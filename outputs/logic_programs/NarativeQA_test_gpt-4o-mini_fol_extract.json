{
  "04d0a3d15a1e39a94524a3958e433a88ca01fdf9": [
    {
      "id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Saved(x, y) ::: x saves y.",
        "Orphan(x) ::: x is an orphan child.",
        "DisguisedAs(x, y) ::: x is disguised as y.",
        "Hides(x, y) ::: x hides y.",
        "Fled(x, y) ::: x has fled from y.",
        "Burned(x) ::: x is burned.",
        "Killed(x) ::: x is killed.",
        "Sent(x, y) ::: x is sent to y.",
        "BelievedDead(x) ::: x is believed to have died.",
        "",
        "Premises:",
        "Fled(kingCharlesII, London) ::: King Charles I has fled from London.",
        "Sent(parliamentarySoldiers, NewForest) ::: Parliamentary soldiers have been sent to search the New Forest.",
        "Burned(arnwoodEstate) ::: Arnwood, the house of Colonel Beverley, is burned.",
        "∃x (Orphan(x) ∧ BelievedDead(x)) ::: The four orphan children are believed to have died in the flames.",
        "Saved(jacobArmitage, a_5) ::: Jacob Armitage saves Edward's sisters.",
        "Saved(jacobArmitage, a_6) ::: Jacob Armitage saves Edward's brother.",
        "Hides(jacobArmitage, a_0) ::: Jacob Armitage hides the orphan children in his isolated cottage.",
        "DisguisedAs(a_5, grandchildren) ::: Edward's sisters are disguised as Jacob Armitage's grandchildren.",
        "DisguisedAs(a_6, grandchildren) ::: Edward's brother is disguised as Jacob Armitage's grandchildren."
      ]
    },
    {
      "id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "GuidedBy(x, y) ::: x is guided by y.",
        "AdaptsToLifestyle(x, y) ::: x adapts to lifestyle y.",
        "Develops(x, y) ::: x develops y.",
        "AssistedBy(x, y) ::: x is assisted by y.",
        "Rescues(x, y) ::: x rescues y.",
        "WorksAs(x, y) ::: x works as y.",
        "MaintainsPretence(x, y) ::: x maintains the pretence of being y.",
        "HostileTowards(x, y) ::: x is hostile towards y.",
        "SympatheticTowards(x, y) ::: x is sympathetic towards y.",
        "",
        "Premises:",
        "GuidedBy(a_1, a_2) ∧ AdaptsToLifestyle(a_1, simple foresters) ∧ Develops(a_1, farmstead) ∧ AssistedBy(a_1, a_6) ∧ AssistedBy(a_1, a_7) ::: Under Armitage's guidance, Edward adapts from an aristocratic lifestyle to that of simple foresters and develops the farmstead, aided by the entrepreneurial spirit of his brother Humphrey and the gypsy boy Pablo.",
        "Rescues(a_1, a_7) ::: Edward rescues Pablo from a pitfall trap.",
        "HostileTowards(a_3, a_1) ::: Corbould is hostile towards Edward and his family.",
        "SympatheticTowards(a_3, a_1) ::: Heatherstone is sympathetic towards Edward.",
        "WorksAs(a_1, secretary) ::: Edward works as a secretary for Heatherstone.",
        "MaintainsPretence(a_1, grandson of Jacob Armitage) ::: Edward maintains the pretence that he is the grandson of Jacob Armitage."
      ]
    },
    {
      "id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "Joins(x, y) ::: x joins the army of y.",
        "Defeated(x, y) ::: x is defeated at y.",
        "Returns(x, y) ::: x returns to y.",
        "Awarded(x, y) ::: x is awarded y.",
        "Flees(x, y) ::: x flees to y.",
        "RaisedAsAristocraticLadies(x) ::: x is raised as aristocratic ladies.",
        "LivesIn(x, y) ::: x lives in y.",
        "Learns(x, y) ::: x learns about y.",
        "Loves(x, y) ::: x loves y.",
        "WorksAs(x, y) ::: x works as y.",
        "Reunited(x, y) ::: x is reunited with y.",
        "",
        "Premises:",
        "Joins(Edward, King Charles II) ::: Edward eventually joins the army of the future King Charles II.",
        "Defeated(Royalist army, Battle of Worcester) ::: The Royalist army is defeated at the Battle of Worcester.",
        "Returns(Edward, New Forest) ::: Edward returns to the New Forest after the Royalist defeat at the Battle of Worcester.",
        "Awarded(Heatherstone, Arnwood estate) ::: Heatherstone has been awarded the old Arnwood estate.",
        "Flees(Edward, France) ::: Edward flees to France due to disillusionment.",
        "RaisedAsAristocraticLadies(Edward's sisters) ::: Edward's sisters are raised as aristocratic ladies while he is in exile.",
        "LivesIn(Edward's brother, New Forest) ::: Edward's brother continues to live in the New Forest.",
        "Learns(Edward, Loves(Patience, Edward)) ::: Edward learns that Patience does love him.",
        "Awarded(Heatherstone, Arnwood estate) → WorksAs(Edward, mercenary soldier) ::: Heatherstone acquired the Arnwood estate for Edward, but he works as a mercenary soldier in exile.",
        "Reunited(Patience, Edward) ::: They are reunited after the Restoration."
      ]
    }
  ],
  "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea": [
    {
      "id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "PhilosophyOfLoveAndSex(x) ::: x discusses the philosophy of love and sex.",
        "WrittenInLetters(x) ::: x is written in the form of letters.",
        "Author(x, y) ::: x is the author of y.",
        "PartOfGroup(x, y) ::: x is part of group y.",
        "YoungScientist(x) ::: x is a young scientist.",
        "ElderlyPoet(x) ::: x is an elderly poet.",
        "PublicationDate(x, y) ::: x is published in year y.",
        "",
        "Premises:",
        "PhilosophyOfLoveAndSex(novel) ::: The novel presents a discussion of the philosophy of love and sex.",
        "WrittenInLetters(novel) ::: The novel is written in the form of a series of letters.",
        "Author(london, waceLetters) ::: Jack London wrote \"Wace's\" letters.",
        "Author(strunsky, kemptonLetters) ::: Anna Strunsky wrote \"Kempton's\" letters.",
        "YoungScientist(herbertWace) ::: Herbert Wace is a young scientist.",
        "ElderlyPoet(daneKempton) ::: Dane Kempton is an elderly poet.",
        "PartOfGroup(london, crowd) ::: Jack London was part of \"The Crowd.\"",
        "PartOfGroup(strunsky, crowd) ::: Anna Strunsky was part of \"The Crowd.\"",
        "PublicationDate(waceLetters, d1) ::: \"Wace's\" letters were published in 1916.",
        "PublicationDate(kemptonLetters, d2) ::: \"Kempton's\" letters were published in 1917. ",
        "",
        "Conclusion:",
        "Author(london, waceLetters) ∧ Author(strunsky, kemptonLetters) ::: Jack London and Anna Strunsky are the authors of \"Wace's\" and \"Kempton's\" letters, respectively."
      ]
    },
    {
      "id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "MakesCase(x, y) ::: x makes the case for y.",
        "ProceedsScientifically(x, y) ::: x proceeds scientifically and analyzes y in a specific context.",
        "",
        "Premises:",
        "MakesCase(kempton, feelingAndEmotion) ::: Kempton makes the case for feeling and emotion.",
        "ProceedsScientifically(wace, love) ::: Wace proceeds \"scientifically\" and analyzes love in Darwinian terms."
      ]
    },
    {
      "id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "Married(x, y) ::: x is married to y.",
        "BasedOnHealth(x) ::: x's marriage is based on health.",
        "BasedOnSanity(x) ::: x's marriage is based on sanity.",
        "BasedOnCompatibility(x) ::: x's marriage is based on compatibility.",
        "IntellectDelightsIn(x) ::: x's intellect delights in the marriage tie.",
        "",
        "Premises:",
        "Married(Strunsky, HesterStebbins) ∧ BasedOnHealth(Strunsky) ∧ BasedOnSanity(Strunsky) ∧ BasedOnCompatibility(Strunsky) ::: The marriage of the speaker (Strunsky) to Hester Stebbins is based upon health, sanity, and compatibility.",
        "IntellectDelightsIn(Strunsky) ::: Strunsky's intellect delights in the marriage tie."
      ]
    },
    {
      "id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "PiquedPublic(x) ::: The public was piqued by x.",
        "Successful(x) ::: x was moderately successful.",
        "Praises(x, y) ::: x praises y.",
        "Quotes(x, y) ::: x quotes y.",
        "Admires(x, y) ::: x admires y.",
        "HoldsPlace(x, y) ::: x holds firmly its place in y.",
        "",
        "Premises:",
        "PiquedPublic(book) ∧ Successful(book) ::: Initially, the public was piqued by the anonymity of the writers and the book was moderately successful.",
        "Praises(russKingman, book) ::: London biographer Russ Kingman praised the book.",
        "Quotes(russKingman, buffaloCommercial) ::: He quoted the Buffalo Commercial.",
        "Admires(buffaloCommercial, prose) ::: The Buffalo Commercial admired the \"sheer charm of its prose.\"",
        "HoldsPlace(book, frontRank) ::: The book holds firmly its place in the front rank of the best of the season's publications. ",
        "",
        "Conclusion:",
        "Praises(russKingman, book) ∧ Admires(buffaloCommercial, prose) ::: Russ Kingman and the Buffalo Commercial both provided positive feedback about the book."
      ]
    },
    {
      "id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "Unoriginal(c) ::: c is unoriginal.",
        "LacksAppeal(c) ::: c lacks appeal.",
        "Complains(c, d) ::: c complains about d.",
        "Review(c, d) ::: c is a review of d.",
        "Author(c, d) ::: c is the author of d.",
        "Publication(c) ::: c is a publication.",
        "TerseLine(c, d) ::: c contains a terse line d.",
        "FallsFlat(c) ::: c falls flat.",
        "",
        "Premises:",
        "Unoriginal(review) ∧ LacksAppeal(review) ::: The New York Times finds the review unoriginal and lacking appeal.",
        "Complains(newYorkTimes, review) ::: The New York Times complained about the review.",
        "Review(review, topic) ::: The review is of the topic.",
        "TerseLine(review, \"The sex problem again.\") ::: The review contains the terse line \"The sex problem again.\"",
        "FallsFlat(review) ::: The review falls flat.",
        "",
        "Conclusion:",
        "Unoriginal(review) ∧ LacksAppeal(review) ::: The review is unoriginal and lacks appeal."
      ]
    },
    {
      "id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 5,
      "fols": [
        "Predicates:",
        "Describes(x, y) ::: x describes y.",
        "SpiritualMisprint(x) ::: x is a spiritual misprint.",
        "TypographicalError(x) ::: x is a typographical error.",
        "VocabFromEncyclopedia(x) ::: x's vocabulary sounds as if taken from an encyclopedia.",
        "ConscientiousSophomore(x) ::: x is a conscientious sophomore.",
        "",
        "Premises:",
        "Describes(georgeSterling, londonPortion) ∧ SpiritualMisprint(londonPortion) ∧ TypographicalError(londonPortion) ::: George Sterling described London's portion of the book as \"a spiritual misprint, a typographical error half a volume long.\"",
        "VocabFromEncyclopedia(herbertWace) ∧ ConscientiousSophomore(herbertWace) ::: His vocabulary, in the letters of Herbert Wace, sounds as if taken that day from an encyclopedia by a conscientious sophomore."
      ]
    },
    {
      "id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 6,
      "fols": [
        "Predicates:",
        "Intrigued(a_0, c_0) ::: Biographers are intrigued by a publication.",
        "CoRespondent(a_1, a_2) ::: Jack London is the co-respondent with Strunsky.",
        "Platonic(a_1, a_2) ::: The relationship between Jack London and Strunsky is platonic.",
        "ActiveIn(a_1, c_1) ::: Jack London is active in a literary group.",
        "ActiveIn(a_2, c_1) ::: Strunsky is active in a literary group.",
        "",
        "Premises:",
        "Intrigued(biographers, TheKemptonWaceLetters) ::: Biographers have been intrigued by The Kempton-Wace Letters for the light it seems to shed on Jack London's life and ideas.",
        "CoRespondent(a_1, a_2) ::: Strunsky was named as the co-respondent in Jack London's divorce from his first wife, Bessie.",
        "Platonic(a_1, a_2) ::: Biographers generally agree that Jack London's relation with the younger Strunsky was platonic.",
        "ActiveIn(a_1, TheCrowd) ∧ ActiveIn(a_2, TheCrowd) ::: They were active in socialism and the literary group, \"The Crowd\", in San Francisco."
      ]
    },
    {
      "id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 7,
      "fols": [
        "Predicates:",
        "ExpressesTheories(x) ::: x expresses theories about the \"Mother-Woman\" and the \"Mate-Woman.\"",
        "Published(x, y) ::: x published y.",
        "Author(x, y) ::: x is the author of y.",
        "Relationship(x, y) ::: x and y have a relationship.",
        "Wife(x) ::: x is a wife.",
        "",
        "Premises:",
        "ExpressesTheories(a_1) ::: London expresses his theories about the \"Mother-Woman\" and the \"Mate-Woman.\"",
        "Published(a_2, c_0) ::: Strunsky published a memoir in The Masses about their relationship.",
        "Author(a_2, c_0) ::: Strunsky is the author of the memoir.",
        "Relationship(a_1, a_3) ::: London has a relationship with his first wife.",
        "Relationship(a_1, a_4) ::: London has a relationship with his second wife.",
        "Wife(a_3) ::: a_3 is the first wife of London.",
        "Wife(a_4) ::: a_4 is the second wife of London.",
        "Publish(c_0, c_1) ::: The memoir was published in The Masses.",
        "Publish(c_0, d_2) ::: The memoir was published in 1917.",
        "Died(a_1, d_1) ::: London died in 1916.",
        "",
        "Conclusion:",
        "ExpressesTheories(a_1) ::: London expresses theories about the \"Mother-Woman\" and the \"Mate-Woman.\"",
        "Relationship(a_1, a_3) ∧ Relationship(a_1, a_4) ::: London has relationships with both his first and second wives."
      ]
    }
  ],
  "09333c7d604bd412e6aef5d3e56b046ed301c5e5": [
    {
      "id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Dying(a_1) ::: Holmes is apparently dying of a rare disease.",
        "Shocked(a_3) ::: Watson is shocked about Holmes's illness.",
        "Eaten(a_1) ::: Holmes has eaten something.",
        "Drunk(a_1) ::: Holmes has drunk something.",
        "DaysWithoutFoodOrDrink(a_1, 3) ::: Holmes has neither eaten nor drunk anything in three days.",
        "",
        "Premises:",
        "Dying(a_1) ::: Holmes is apparently dying of a rare disease contracted while he was on a case.",
        "Shocked(a_3) ::: Watson was shocked, having heard about his friend’s illness.",
        "¬Eaten(a_1) ∧ ¬Drunk(a_1) ∧ DaysWithoutFoodOrDrink(a_1, 3) ::: Mrs. Hudson says that Holmes has neither eaten nor drunk anything in three days."
      ]
    },
    {
      "id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "Instructs(x, y) ::: x instructs y.",
        "Infectious(x) ::: x is highly infectious.",
        "Wishes(x, y) ::: x wishes to do y.",
        "Demands(x, y) ::: x demands y.",
        "Waits(x, y) ::: x waits for y.",
        "Worries(x) ::: x is in extreme worry.",
        "Mutters(x) ::: x mutters nonsense.",
        "",
        "Premises:",
        "Instructs(a_1, a_3) ::: Holmes instructs Watson not to come near him.",
        "Infectious(disease) ::: The illness is highly infectious.",
        "Wishes(a_3, Examine(a_1)) ::: Watson wishes to examine Holmes himself.",
        "Demands(a_1, Wait(a_3, several_hours)) ::: Holmes demands that Watson wait several hours before seeking help.",
        "Waits(a_3, several_hours) ::: Watson is forced to wait several hours.",
        "Worries(a_3) ::: Watson is in extreme worry.",
        "Mutters(a_1) ::: Holmes mutters nonsense."
      ]
    },
    {
      "id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "PrefersUntouched(x) ::: x prefers that his belongings remain untouched.",
        "Touches(x, y) ::: x touches y.",
        "Angry(x) ::: x is angry.",
        "",
        "Premises:",
        "PrefersUntouched(a_1) ::: Holmes prefers that his belongings remain untouched.",
        "Touches(a_3, b_0) ::: Watson touches several objects in Holmes's room.",
        "Angry(a_1) ::: Holmes grows angry when Watson touches items.",
        "",
        "Conclusion:",
        "Angry(a_1) ∧ Touches(a_3, b_0) → PrefersUntouched(a_1) ::: If Watson touches items, then Holmes grows angry because he prefers that his belongings remain untouched."
      ]
    },
    {
      "id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "TurnOnGaslight(x, y) ::: x turns on the gaslight to level y.",
        "Instructs(x, y, z) ::: x instructs y to do z.",
        "ReturnsTo(x, y) ::: x returns to location y before an event occurs.",
        "Arrives(x, y) ::: x arrives at location y.",
        "",
        "Premises:",
        "TurnOnGaslight(a_3, half_full) ::: Watson turns on the gaslight to half-full.",
        "Instructs(a_1, a_3, Bring(a_2)) ::: Holmes instructs Watson to bring Mr. Culverton Smith to see him.",
        "ReturnsTo(a_3, BakerStreet) → Arrives(a_2, a_1) ::: Watson must return to Baker Street before Mr. Culverton Smith arrives.",
        "",
        "Conclusion:",
        "Instructs(a_1, a_3, ReturnBefore(a_2, a_1)) ::: Holmes requires Watson to ensure that he returns to Baker Street before Mr. Culverton Smith arrives."
      ]
    },
    {
      "id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "GoesTo(x, y) ::: x goes to y's address.",
        "RefusesToSee(x) ::: x refuses to see anyone.",
        "ForcesWayIn(x) ::: x forces his way in.",
        "ExplainsErrand(x, y) ::: x explains his errand on behalf of y.",
        "ChangesAttitude(x) ::: x's attitude changes drastically.",
        "AgreesToCome(x, y) ::: x agrees to come to y.",
        "ExcusesSelf(x) ::: x excuses himself.",
        "ReturnsTo(x, y) ::: x returns to y.",
        "",
        "Premises:",
        "GoesTo(watson, smith) ::: Watson goes to Smith's address.",
        "RefusesToSee(smith) ::: Smith refuses to see anyone.",
        "ForcesWayIn(watson) ::: Watson forces his way in.",
        "ExplainsErrand(watson, holmes) ::: Watson explains his errand on behalf of Sherlock Holmes.",
        "ChangesAttitude(smith) ::: Smith's attitude changes drastically after Watson's explanation.",
        "AgreesToCome(smith, bakerStreet) ::: Smith agrees to come to Baker Street after Watson's explanation.",
        "ExcusesSelf(watson) ::: Watson excuses himself, saying that he has another appointment.",
        "ReturnsTo(watson, bakerStreet) ::: Watson returns to Baker Street before Smith's arrival."
      ]
    },
    {
      "id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 5,
      "fols": [
        "Predicates:",
        "Alone(x) ::: x believes that they are alone.",
        "FrankWith(x, y) ::: x is frank with y.",
        "SickenedBy(x, y) ::: x has been sickened by y.",
        "Killed(x, y) ::: x killed y.",
        "Contains(x, y) ::: x contains y.",
        "Pocketed(x, y) ::: x pockets y.",
        "ResolvedToStay(x) ::: x resolves to stay.",
        "Watch(x, y) ::: x watches y.",
        "Die(x) ::: x dies.",
        "",
        "Premises:",
        "Alone(a_2) ::: Smith believes that he is alone.",
        "FrankWith(a_2, a_1) ::: Smith is frank with Holmes.",
        "SickenedBy(a_1, a_3) ::: Holmes has been sickened by the same illness that killed Smith's nephew Victor.",
        "Killed(a_3, a_4) ::: The illness killed Smith's nephew Victor.",
        "Contains(b_1, b_3) ::: The little ivory box contains a sharp spring infected with the illness.",
        "Pocketed(a_2, b_1) ::: Smith pockets the little ivory box, removing the evidence of his crime.",
        "ResolvedToStay(a_2) ::: Smith resolves to stay there.",
        "Watch(a_2, a_1) ::: Smith watches Holmes.",
        "Die(a_1) ::: Holmes is at risk of dying from the illness that killed Smith's nephew Victor."
      ]
    },
    {
      "id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 6,
      "fols": [
        "Predicates:",
        "AsGoodAs(x, y) ::: x's word is as good as y's in court.",
        "TurnUpGas(x) ::: x turns the gas up full.",
        "Requests(x, y) ::: x requests y.",
        "Replies(x, y) ::: x replies with y.",
        "Arrest(x, y) ::: x arrests y.",
        "Witness(x, y) ::: x is a witness to y.",
        "",
        "Premises:",
        "TurnUpGas(a_2) ::: Smith turns the gas up full.",
        "Requests(a_2, \"anything else\") ::: Smith asks Holmes if he would like anything else.",
        "Replies(a_1, \"a match and a cigarette\") ::: Holmes replies with \"a match and a cigarette.\"",
        "AsGoodAs(a_1, a_2) ::: Holmes's word is as good as Smith's in court.",
        "Arrest(a_1, a_2) ::: Holmes tells Morton to arrest Culverton Smith.",
        "Witness(a_3, \"the conversation\") ::: Watson is a witness to the conversation.",
        "",
        "Conclusion:",
        "AsGoodAs(a_1, a_2) ::: Holmes's word is as good as Smith's in court."
      ]
    },
    {
      "id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 7,
      "fols": [
        "Predicates:",
        "FeignedIllness(x) ::: x has a feigned illness.",
        "InducedConfession(x, y) ::: x induced y to confess.",
        "Infected(x, y) ::: x is infected by y.",
        "ExamineMail(x) ::: x examines his mail carefully.",
        "Starved(x) ::: x starved himself.",
        "ClaimInfectiousNature(x) ::: x claims the disease has an infectious nature.",
        "",
        "Premises:",
        "FeignedIllness(a_1) ∧ InducedConfession(a_1, a_2) ::: Holmes feigned illness as a ruse to induce Smith to confess to his nephew’s murder.",
        "¬Infected(a_1, b_1) ::: Holmes was not infected by the little box.",
        "ExamineMail(a_1) ::: Holmes examines his mail carefully before he opens it.",
        "Starved(a_1) ∧ ClaimInfectiousNature(b_3) ::: Holmes starved himself for three days, and the claim of the \"disease's\" infectious nature was to keep Watson from examining him and discovering the ruse."
      ]
    }
  ],
  "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d": [
    {
      "id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "ForeignManCharacter(x) ::: x is Andy Kaufman's \"foreign man\" character.",
        "Editing(x) ::: x refers to the massive editing of the film.",
        "EndOfFilm(x) ::: x is the end of the film.",
        "PhonographRecord(x) ::: x is a phonograph record played by Andy Kaufman.",
        "Credits(x) ::: x refers to the credits of the film.",
        "NormalVoice(x) ::: x refers to Andy Kaufman's normal voice.",
        "Understand(x, y) ::: x understands y.",
        "ShowStory(x, y) ::: x shows the story of y.",
        "ChildhoodHome(x) ::: x refers to Andy Kaufman's childhood home.",
        "Location(x) ::: x is a location.",
        "",
        "Premises:",
        "ForeignManCharacter(andy) ∧ Editing(andy) ∧ EndOfFilm(andy) ::: Andy Kaufman's \"foreign man\" character appears in black and white, declaring that (due to massive editing), this is actually the end of the film.",
        "PhonographRecord(andy) ∧ Credits(andy) ::: He plays a phonograph record alongside the credits before walking somberly off.",
        "NormalVoice(andy) ∧ Understand(andy, people) ∧ ShowStory(andy, life) ::: Kaufman then comes back, and, in his normal voice, claiming he \"had to get rid of the people who don't understand me, and don't want to try,\" he proceeds to show the story of his life.",
        "ChildhoodHome(andy) ∧ Location(greatNeck) ∧ Year(1957) ::: starting with his childhood home in Great Neck, New York, circa 1957."
      ]
    },
    {
      "id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "StrugglingPerformer(x) ::: x is a struggling performer.",
        "FailsInNightclubs(x) ::: x's act fails in nightclubs.",
        "WantsComedy(a_0) ::: The audience wants comedy.",
        "SingsChildrensSongs(x) ::: x sings children's songs.",
        "RefusesToTellJokes(x) ::: x refuses to tell conventional jokes.",
        "Believes(x, y) ::: x believes that y is true.",
        "HasNoRealTalent(x) ::: x has no real talent.",
        "PutsOnJacket(x) ::: x puts on a rhinestone jacket.",
        "DoesImpersonation(x, y) ::: x does an impersonation of y.",
        "Applauds(a_0) ::: The audience applauds.",
        "Tricked(a_0, x) ::: a_0 is tricked by x.",
        "",
        "Premises:",
        "StrugglingPerformer(a_2) ∧ FailsInNightclubs(a_2) ∧ WantsComedy(a_0) ∧ SingsChildrensSongs(a_2) ∧ RefusesToTellJokes(a_2) ::: Kaufman is a struggling performer whose act fails in nightclubs because the audience wants comedy, he sings children's songs, and refuses to tell conventional jokes.",
        "∀a_0 (Believes(a_0, HasNoRealTalent(a_2))) ::: The audience begins to believe that Kaufman may have no real talent.",
        "PutsOnJacket(a_2) ∧ DoesImpersonation(a_2, Elvis) ::: Kaufman's peculiar \"foreign man\" puts on a rhinestone jacket and does a dead-on Elvis impersonation and song.",
        "Applauds(a_0) ::: The audience bursts into applause.",
        "Tricked(a_0, a_2) ::: The audience realizes Kaufman had tricked them.",
        "",
        "Conclusion:",
        "Tricked(a_0, a_2) ::: The audience was tricked by Kaufman."
      ]
    },
    {
      "id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "CatchesEye(x, y) ::: x catches the eye of y.",
        "SignsAsClient(x, y) ::: x signs y as a client.",
        "LandsShow(x, y) ::: x lands y a network TV series.",
        "Dislikes(x, y) ::: x dislikes y.",
        "AcceptsRole(x, y) ::: x accepts the role of y.",
        "HatesDoing(x, y) ::: x hates doing y.",
        "ExpressesDesireToQuit(x) ::: x expresses a desire to quit.",
        "",
        "Premises:",
        "CatchesEye(andyKaufman, georgeShapiro) ::: Andy Kaufman catches the eye of talent agent George Shapiro.",
        "SignsAsClient(georgeShapiro, andyKaufman) ::: George Shapiro signs Kaufman as a client.",
        "LandsShow(georgeShapiro, taxi) ::: George Shapiro immediately lands Kaufman a network TV series, Taxi.",
        "Dislikes(andyKaufman, sitcoms) ::: Kaufman dislikes sitcoms.",
        "AcceptsRole(andyKaufman, taxi) ::: Kaufman accepts the role on Taxi.",
        "HatesDoing(andyKaufman, taxi) ::: Kaufman secretly hates doing the show.",
        "ExpressesDesireToQuit(andyKaufman) ::: Kaufman expresses a desire to quit."
      ]
    },
    {
      "id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Rude(x) ::: x is rude.",
        "LoudMouthed(x) ::: x is loud-mouthed.",
        "WantsGuestStar(x, y) ::: x wants y to guest-star on a show.",
        "BadAttitude(x) ::: x has a bad attitude.",
        "HorribleAppearance(x) ::: x has a horrible appearance.",
        "VillainCharacter(x) ::: x is a villain character.",
        "CreatedBy(x, y, z) ::: x is created by y and z.",
        "GagOnAudience(x) ::: x is a gag on the audience.",
        "",
        "Premises:",
        "Rude(tonyClifton) ∧ LoudMouthed(tonyClifton) ∧ BadAttitude(tonyClifton) ∧ HorribleAppearance(tonyClifton) ::: Tony Clifton is a rude, loud-mouthed lounge singer with a bad attitude and horrible appearance.",
        "WantsGuestStar(andyKaufman, tonyClifton) ::: Andy Kaufman wants Tony Clifton to guest-star on Taxi.",
        "VillainCharacter(tonyClifton) ∧ CreatedBy(tonyClifton, andyKaufman, zmuda) ::: Tony Clifton is a villain character created by Andy Kaufman and Bob Zmuda.",
        "GagOnAudience(tonyClifton) ::: The gag is on the audience when Tony Clifton reveals his true identity.",
        "",
        "Conclusion:",
        "¬Rude(tonyClifton) ∧ ¬LoudMouthed(tonyClifton) ∧ ¬BadAttitude(tonyClifton) ∧ ¬HorribleAppearance(tonyClifton) ::: Tony Clifton's rude and loud-mouthed persona is a facade."
      ]
    },
    {
      "id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "Famous(x) ::: x is famous.",
        "Dislikes(x, y) ::: x dislikes y.",
        "Demands(x, y) ::: x demands that y be performed.",
        "Antagonizes(x, y) ::: x deliberately antagonizes y.",
        "Performs(x, y) ::: x performs y.",
        "Chaos(x) ::: x causes chaos.",
        "Removed(x, y) ::: x is removed from y.",
        "KnowsHowToEntertain(x) ::: x knows how to entertain an audience.",
        "",
        "Premises:",
        "Famous(kaufman) ::: Kaufman's fame increases with his Saturday Night Live appearances.",
        "∀x (Dislikes(x, kaufman) ∧ Demands(x, latka) → Antagonizes(kaufman, x)) ::: When audiences dislike Kaufman's strange sense of humor and demand that he perform as Latka, he deliberately antagonizes them.",
        "Performs(kaufman, theGreatGatsby) ::: Kaufman performs The Great Gatsby aloud from start to finish.",
        "Chaos(clifton) ::: Tony Clifton causes chaos on the Taxi set.",
        "Removed(clifton, studioLot) ::: Tony Clifton is removed from the studio lot.",
        "¬KnowsHowToEntertain(kaufman) ::: Kaufman does not know how to entertain an audience effectively.",
        "∀x (KnowsHowToEntertain(x) → Famous(x)) ::: If someone knows how to entertain an audience, then that person is famous.",
        "",
        "Conclusion:",
        "¬KnowsHowToEntertain(kaufman) ::: Kaufman does not know how to entertain an audience effectively."
      ]
    },
    {
      "id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 5,
      "fols": [
        "Predicates:",
        "ProfessionalWrestler(x) ::: x is a professional wrestler.",
        "WrestlesOnlyWomen(x) ::: x wrestles only women.",
        "BeratesAfterWinning(x) ::: x berates opponents after winning.",
        "InterGenderChampion(x) ::: x is the Inter-Gender Wrestling Champion.",
        "Smitten(x, y) ::: x is smitten with y.",
        "RomanticRelationship(x, y) ::: x has a romantic relationship with y.",
        "Actress(y) ::: y is an actress.",
        "",
        "Premises:",
        "ProfessionalWrestler(a_2) ∧ WrestlesOnlyWomen(a_2) ∧ BeratesAfterWinning(a_2) ∧ InterGenderChampion(a_2) ::: Andy Kaufman decides to become a professional wrestler, wrestles only women, berates them after winning, and declares himself the \"Inter-Gender Wrestling Champion.\"",
        "Smitten(a_2, a_1) ∧ RomanticRelationship(a_2, a_1) ::: Andy Kaufman becomes smitten with Lynne Margulies and they begin a romantic relationship.",
        "Actress(a_1) ::: Lynne Margulies is an actress.",
        "",
        "Conclusion:",
        "ProfessionalWrestler(a_2) ∧ WrestlesOnlyWomen(a_2) ∧ BeratesAfterWinning(a_2) ∧ InterGenderChampion(a_2) ::: Andy Kaufman is a professional wrestler who wrestles only women, berates them after winning, and is the Inter-Gender Wrestling Champion."
      ]
    },
    {
      "id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 6,
      "fols": [
        "Predicates:",
        "StagedFeud(a_2, a_1) ::: Kaufman and Lawler staged the feud.",
        "Banned(a_2, \"Saturday Night Live\") ::: Kaufman is banned from Saturday Night Live.",
        "WrestlingAntics(a_2) ::: Kaufman engages in wrestling antics.",
        "InConflict(a_2, a_1) ::: Kaufman and Lawler appear to be in conflict.",
        "Injured(a_2) ::: Kaufman is injured.",
        "AppearsOn(a_2, b_0) ::: Kaufman appears on a live TV comedy show.",
        "RefusesToSpeakLines(a_2) ::: Kaufman refuses to speak his lines.",
        "Challenges(a_1, a_2) ::: Lawler challenges Kaufman to a wrestling match.",
        "Overpowers(a_1, a_2) ::: Lawler overpowers Kaufman.",
        "Insults(a_1, a_2) ::: Lawler insults Kaufman.",
        "ThrowsDrink(a_2, a_1) ::: Kaufman throws a drink at Lawler.",
        "SpewsTirade(a_2) ::: Kaufman spews a vicious tirade of epithets.",
        "Advises(a_3, a_2) ::: Shapiro advises Kaufman.",
        "Calls(a_3, a_2) ::: Shapiro calls Kaufman.",
        "Canceled(\"Taxi\") ::: The show Taxi has been canceled.",
        "",
        "Premises:",
        "StagedFeud(a_2, a_1) ::: Kaufman and Lawler staged the feud despite appearing to be in conflict.",
        "Banned(a_2, \"Saturday Night Live\") ::: Kaufman is banned from Saturday Night Live due to his wrestling antics.",
        "WrestlingAntics(a_2) ::: Kaufman engages in wrestling antics.",
        "InConflict(a_2, a_1) ::: Kaufman and Lawler appear to be in conflict.",
        "Injured(a_2) ::: Kaufman is injured after the wrestling match.",
        "AppearsOn(a_2, b_0) ::: Kaufman appears on a live TV comedy show, ABC's Fridays.",
        "RefusesToSpeakLines(a_2) ::: Kaufman refuses to speak his lines during the show.",
        "Challenges(a_1, a_2) ::: Lawler challenges Kaufman to a \"real\" wrestling match.",
        "Overpowers(a_1, a_2) ::: Lawler easily overpowers Kaufman in the match.",
        "Insults(a_1, a_2) ::: Lawler insults Kaufman during their appearance on NBC's Late Night with David Letterman.",
        "ThrowsDrink(a_2, a_1) ::: Kaufman throws a drink at Lawler after being insulted.",
        "SpewsTirade(a_2) ::: Kaufman spews a vicious tirade of epithets at Lawler.",
        "Advises(a_3, a_2) ::: Shapiro advises Kaufman and Lawler not to work together again.",
        "Calls(a_3, a_2) ::: Shapiro later calls Kaufman to inform him that Taxi has been canceled."
      ]
    },
    {
      "id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 7,
      "fols": [
        "Predicates:",
        "Diagnosed(a_2, lung_cancer) ::: Andy Kaufman has been diagnosed with a rare form of lung cancer.",
        "Believes(a_3, stunt) ::: Zmuda believes that Kaufman's announcement could be a stunt.",
        "Booking(a_2, carnegie_hall) ::: Andy Kaufman gets a booking at Carnegie Hall.",
        "SuccessfulPerformance(c_0) ::: The performance at Carnegie Hall is a memorable success.",
        "InvitesAudience(c_0) ::: Kaufman invites the entire audience out for milk and cookies.",
        "Deteriorates(a_2) ::: Andy Kaufman's health deteriorates.",
        "SeeksMiracle(a_2, philippines) ::: Andy Kaufman heads to the Philippines to seek a medical \"miracle\".",
        "DiscoversScam(a_2) ::: Andy Kaufman discovers the scam regarding the medical \"miracle\".",
        "LaughsAtIrony(a_2) ::: Andy Kaufman laughs at the irony of the situation.",
        "Dies(a_2) ::: Andy Kaufman dies soon after.",
        "SingAlong(d_1) ::: Friends and loved ones do a sing-along at Andy Kaufman's funeral.",
        "",
        "Premises:",
        "Diagnosed(a_2, lung_cancer) ::: Andy Kaufman has been diagnosed with a rare form of lung cancer.",
        "∀x (Believes(x, stunt) → (x = a_3)) ::: Zmuda believes that Kaufman's announcement could be a stunt.",
        "Booking(a_2, carnegie_hall) ::: Andy Kaufman gets a booking at Carnegie Hall.",
        "SuccessfulPerformance(c_0) ::: The performance at Carnegie Hall is a memorable success.",
        "InvitesAudience(c_0) ::: Kaufman invites the entire audience out for milk and cookies.",
        "Deteriorates(a_2) ::: Andy Kaufman's health deteriorates as he seeks a medical \"miracle\" in the Philippines.",
        "SeeksMiracle(a_2, philippines) ::: Andy Kaufman heads to the Philippines to seek a medical \"miracle\".",
        "DiscoversScam(a_2) ::: Andy Kaufman discovers the scam regarding the medical \"miracle\".",
        "LaughsAtIrony(a_2) ::: Andy Kaufman laughs at the irony of the situation.",
        "Dies(a_2) ::: Andy Kaufman dies soon after.",
        "SingAlong(d_1) ::: Friends and loved ones do a sing-along at Andy Kaufman's funeral."
      ]
    },
    {
      "id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 8,
      "fols": [
        "Predicates:",
        "Appears(x, y) ::: x appears at event y.",
        "Performs(x, y) ::: x performs piece y.",
        "InAudience(x, y) ::: x is in the audience of event y.",
        "PansCamera(x, y) ::: x pans over the crowd at event y.",
        "Peeks(x, y) ::: x briefly peeks in at event y.",
        "BlackAndWhite(x) ::: x is in black-and-white.",
        "",
        "Premises:",
        "Appears(tonyClifton, tribute) ::: Tony Clifton appears at Andy Kaufman's tribute.",
        "Performs(tonyClifton, \"I Will Survive\") ::: Tony Clifton performs \"I Will Survive.\"",
        "PansCamera(camera, tribute) ::: The camera pans over the crowd at the tribute.",
        "InAudience(zmuda, tribute) ::: Zmuda is in the audience of the tribute.",
        "Peeks(kaufman, credits) ::: Andy Kaufman briefly peeks in during the final credits.",
        "BlackAndWhite(credits) ::: The final credits are in black-and-white.",
        "",
        "Conclusion:",
        "∃x (Appears(x, tribute) ∧ Performs(x, \"I Will Survive\")) ::: There exists a person who appears at the tribute and performs \"I Will Survive.\"",
        "∃y (InAudience(zmuda, y) ∧ PansCamera(camera, y)) ::: There exists an event where Zmuda is in the audience and the camera pans over the crowd."
      ]
    }
  ],
  "0c1274df8299049d4959ef8a1ea23a6a68e26f6e": [
    {
      "id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Hacker(x) ::: x is a hacker.",
        "OnParole(x) ::: x is on parole.",
        "ForbiddenToTouchComputers(x) ::: x is forbidden from touching computers.",
        "Alcoholic(x) ::: x is an alcoholic.",
        "ExWife(x, y) ::: x is the ex-wife of y.",
        "HasCustody(x, y) ::: x has custody over y.",
        "RestrainingOrder(x, y) ::: x has a restraining order preventing y from visiting.",
        "SolicitedBy(x, y) ::: x is solicited by y.",
        "CrackServer(x, y) ::: x cracks a secure government server for y.",
        "Offered(x, y) ::: x is offered y by someone.",
        "Program(x, y) ::: x programs y.",
        "SiphonFunds(x, y) ::: x siphons y from several government slush funds.",
        "",
        "Premises:",
        "Hacker(Stanley) ∧ OnParole(Stanley) ∧ ForbiddenToTouchComputers(Stanley) ::: Stanley Jobson is a hacker, on parole, and forbidden from touching computers.",
        "Alcoholic(Melissa) ∧ ExWife(Melissa, Stanley) ∧ HasCustody(Melissa, Holly) ∧ RestrainingOrder(Melissa, Stanley) ::: Melissa is an alcoholic, the ex-wife of Stanley, has custody over their daughter Holly, and has a restraining order preventing Stanley from visiting Holly.",
        "SolicitedBy(Stanley, Gabriel) ::: Gabriel Shear solicits Stanley Jobson for hacking skills.",
        "CrackServer(Stanley, Gabriel) ::: Stanley cracks a secure government server for Gabriel while held at gunpoint.",
        "Offered(Stanley, 10Million) ::: Gabriel offers Stanley $10 million.",
        "Program(Stanley, Hydra) ::: Stanley programs a multi-headed worm, a \"hydra\".",
        "SiphonFunds(Stanley, 9.5Billion) ::: Stanley siphons $9.5 billion from several government slush funds.",
        "",
        "Conclusion:",
        "Hacker(Stanley) ∧ OnParole(Stanley) ∧ ForbiddenToTouchComputers(Stanley) ∧ SolicitedBy(Stanley, Gabriel) ∧ CrackServer(Stanley, Gabriel) ∧ Offered(Stanley, 10Million) ∧ Program(Stanley, Hydra) ∧ SiphonFunds(Stanley, 9.5Billion) ::: Stanley Jobson is a hacker who is on parole, forbidden from touching computers, solicited by Gabriel for his hacking skills, cracks a secure government server, is offered $10 million, programs a \"hydra\", and siphons $9.5 billion from government slush funds."
      ]
    },
    {
      "id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "Leads(x, y) ::: x leads group y.",
        "LaunchesAttacks(x, y) ::: x launches retaliatory attacks against y.",
        "Monitors(x, y) ::: x monitors y closely.",
        "MoreInterestedIn(x, y) ::: x is more interested in y than in others.",
        "Orders(x, y) ::: x orders y to take a specific action.",
        "Refuses(x, y) ::: x refuses to comply with y's orders.",
        "Kills(x, y) ::: x kills y.",
        "Threatens(x, y) ::: x threatens y.",
        "",
        "Premises:",
        "Leads(gabriel, blackCell) ∧ LaunchesAttacks(gabriel, knownTerrorists) ∧ Threatens(knownTerrorists, US) ::: Gabriel leads Black Cell to launch retaliatory attacks against terrorists that threaten the United States.",
        "Monitors(roberts, stanley) ∧ MoreInterestedIn(roberts, gabriel) ::: J.T. Roberts monitors Stanley closely while being more interested in Gabriel.",
        "Orders(reisman, standDown(gabriel)) ::: Senator Reisman oversees Black Cell and orders Gabriel to stand down.",
        "Refuses(gabriel, standDown(reisman)) ∧ Kills(gabriel, reisman) ::: Gabriel refuses Reisman's order to stand down and kills Reisman in revenge."
      ]
    },
    {
      "id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "Delivers(x, y) ::: x delivers y.",
        "Kills(x, y) ::: x kills y.",
        "Kidnaps(x, y) ::: x kidnaps y.",
        "Frames(x, y) ::: x frames y.",
        "ParticipatesIn(x, y) ::: x participates in y.",
        "Storms(x, y) ::: x storms y.",
        "Secures(x, y) ::: x secures y.",
        "FittingWithExplosives(x, y) ::: x is fitted with explosives y.",
        "Surrounds(x, y) ::: x surrounds y.",
        "Takes(x, y) ::: x takes y.",
        "Discusses(x, y) ::: x discusses y.",
        "Demonstrates(x, y) ::: x demonstrates y.",
        "Kills(x, y) ::: x kills y.",
        "Pulls(x, y) ::: x pulls y.",
        "Detonates(x) ::: x detonates.",
        "Causes(x, y) ::: x causes y.",
        "ResultsIn(x, y) ::: x results in y.",
        "",
        "Premises:",
        "Delivers(stanley, hydra) ::: Stanley delivers the hydra to Gabriel.",
        "Kills(gabriel, melissa) ∧ Kills(gabriel, husband) ::: Gabriel has killed Melissa and her husband.",
        "Kidnaps(gabriel, holly) ::: Gabriel kidnaps Holly.",
        "Frames(gabriel, stanley) ::: Gabriel frames Stanley.",
        "ParticipatesIn(stanley, bank_heist) ::: Stanley participates in the bank heist to get Holly back.",
        "Storms(gabriel, worldbanc) ::: Gabriel storms a Worldbanc branch.",
        "Secures(gabriel, employees) ∧ Secures(gabriel, customers) ::: Gabriel secures the employees and customers as hostages.",
        "FittingWithExplosives(employees, ball_bearing_explosives) ::: Employees and customers are fitted with ball-bearing-based explosives.",
        "Surrounds(police, worldbanc) ∧ Surrounds(FBI, worldbanc) ::: Police and FBI surround the branch.",
        "Takes(gabriel, stanley) ::: Gabriel takes Stanley to the coffee shop.",
        "Discusses(gabriel, dog_day_afternoon) ::: Gabriel discusses the film Dog Day Afternoon.",
        "Demonstrates(gabriel, situation) ::: Gabriel demonstrates the situation with a hostage.",
        "Kills(sniper, man) ::: A sniper kills the man.",
        "Pulls(agents, hostage) ::: Other agents pull the hostage away from the bank.",
        "Detonates(bomb) ::: The bomb detonates.",
        "ResultsIn(detonation, casualties) ∧ ResultsIn(detonation, destruction) ::: The detonation of the bomb results in casualties and destruction.",
        "",
        "Conclusion:",
        "Causes(gabriel, kidnapping(holly)) ::: Gabriel's actions lead to the kidnapping of Holly.",
        "Causes(stanley, rescue(holly)) ::: The bank heist is a means for Stanley to attempt to rescue Holly.",
        "ResultsIn(detonation, casualties) ::: The detonation of the bomb results in casualties and destruction."
      ]
    },
    {
      "id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Instructs(x, y) ::: x instructs y to perform an action.",
        "TurnsOver(x, y) ::: x turns over y to someone else.",
        "Triggers(x) ::: x triggers an event.",
        "Recaptured(x) ::: x is recaptured.",
        "Rescued(x) ::: x is rescued.",
        "Threatens(x, y) ::: x threatens y with harm.",
        "IsAgent(x, y) ::: x is an agent of organization y.",
        "ReSiphons(x, y) ::: x re-siphons money back to y.",
        "Shoots(x, y) ::: x shoots y.",
        "Loads(x, y) ::: x loads y onto a vehicle.",
        "Demands(x, y) ::: x demands y.",
        "WaitsFor(x, y) ::: x waits for y to arrive.",
        "Lifts(x, y) ::: x lifts y off the ground.",
        "Deposits(x, y) ::: x deposits y in a location.",
        "Deactivates(x) ::: x deactivates a device.",
        "Departs(x) ::: x leaves a location.",
        "ShootsDown(x, y) ::: x shoots down y using a weapon.",
        "",
        "Premises:",
        "Instructs(gabriel, stanley) ::: Gabriel instructs Stanley to launch the hydra.",
        "TurnsOver(gabriel, holly) ::: Gabriel turns Holly over to Stanley once the hydra is launched.",
        "Triggers(stanley) ::: Stanley's back door triggers before they can leave the bank.",
        "Recaptured(stanley) ::: Stanley is recaptured while Holly is rescued.",
        "Threatens(gabriel, ginger) ::: Gabriel threatens to kill Ginger.",
        "IsAgent(ginger, DEA) ::: Ginger is a DEA agent.",
        "ReSiphons(stanley, monteCarlo) ::: Stanley re-siphons the money back to a Monte Carlo bank.",
        "Shoots(gabriel, ginger) ::: Gabriel shoots Ginger.",
        "Loads(gabriel, hostages) ::: Gabriel and his men load the hostages on a bus.",
        "Demands(gabriel, plane) ::: Gabriel demands a plane wait for them at the local airport.",
        "Lifts(bus, roof) ::: The bus is lifted off by an S-64 Aircrane.",
        "Deposits(aircrane, roof) ::: The bus is deposited on the roof of a local skyscraper.",
        "Deactivates(gabriel) ::: Gabriel deactivates the bombs.",
        "Departs(gabriel) ::: Gabriel departs with his surviving men on a waiting helicopter.",
        "ShootsDown(stanley, helicopter) ::: Stanley shoots down the helicopter using a rocket-propelled grenade from the bus.",
        "",
        "Conclusion:",
        "Threatens(gabriel, ginger) → ReSiphons(stanley, monteCarlo) ::: Gabriel will kill Ginger unless Stanley re-siphons the money back to a Monte Carlo bank."
      ]
    },
    {
      "id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "MossadAgent(x) ::: x is a Mossad agent.",
        "DEAAgent(x) ::: x is a DEA agent.",
        "CorpseIdentified(x, y) ::: x recognizes the corpse as y.",
        "Escaped(x) ::: x escaped through a different route.",
        "WearingBulletproofVest(x) ::: x is wearing a bulletproof vest.",
        "WorkingWith(x, y) ::: x is working with y.",
        "FullCustody(x, y) ::: x has full custody of y.",
        "TourTogether(x, y) ::: x and y tour together.",
        "WithdrawMoney(x, y) ::: x and y withdraw money.",
        "Explodes(x) ::: x explodes.",
        "KnownTerrorist(x) ::: x is a known terrorist.",
        "Incident(x) ::: x is an incident.",
        "",
        "Premises:",
        "MossadAgent(gabriel) ::: Gabriel was a Mossad agent.",
        "¬∃x (DEAAgent(x)) ::: There was no record of a DEA agent named Ginger.",
        "CorpseIdentified(stanley, c) ::: Stanley recognizes the corpse as the one he discovered earlier.",
        "Escaped(gabriel) ::: Gabriel had escaped a different route.",
        "WearingBulletproofVest(ginger) ::: Ginger had been wearing a bulletproof vest.",
        "WorkingWith(ginger, gabriel) ::: Ginger was working with Gabriel.",
        "FullCustody(roberts, holly) ::: Roberts arranges for Stanley to have full custody of Holly.",
        "TourTogether(stanley, b_2) ::: Stanley and Holly tour the US together.",
        "WithdrawMoney(gabriel, ginger) ::: Gabriel and Ginger withdraw the money in Monte Carlo.",
        "Explodes(d) ::: A yacht at sea explodes.",
        "Incident(d) ::: The explosion of the yacht is an incident.",
        "KnownTerrorist(h) ::: The yacht was carrying a known terrorist.",
        "",
        "Conclusion:",
        "Gabriel and Ginger were involved in a scheme that led to the destruction of the yacht."
      ]
    }
  ],
  "145200abf14baeffa646797dfbfa58861cb4b079": [
    {
      "id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Young(x) ::: x is a young boy.",
        "Idolizes(x, y) ::: x idolizes y.",
        "Accused(x, y) ::: x is accused of y.",
        "WantsTo(x, y) ::: x wants to do y.",
        "Married(x, y) ::: x is married to y.",
        "LivesIn(x, y) ::: x lives in y.",
        "Sells(x, y) ::: x sells y.",
        "Opens(x, y) ::: x opens y.",
        "Suffers(x, y) ::: x suffers from y.",
        "Decides(x, y) ::: x decides to do y.",
        "Spends(x, y) ::: x spends y.",
        "ArrangesFor(x, y) ::: x arranges for y.",
        "BecomesIll(x) ::: x becomes ill.",
        "Dies(x) ::: x dies.",
        "",
        "Premises:",
        "Young(carl) ::: Carl Fredricksen is a young 9-year-old boy.",
        "Idolizes(carl, charlesMuntz) ::: Carl idolizes famous explorer Charles Muntz.",
        "Accused(charlesMuntz, fabricatingSkeleton) ::: Muntz has been accused of fabricating the skeleton of a giant exotic bird.",
        "WantsTo(ellie, move(clubhouse, cliff)) ::: Ellie confides to Carl her desire to move her \"clubhouse\" to a cliff overlooking Paradise Falls.",
        "Married(carl, ellie) ::: Carl and Ellie are married.",
        "LivesIn(carl, restoredHouse) ::: Carl and Ellie live together in the restored house.",
        "Sells(carl, toyBalloons) ::: Carl sells toy balloons from a cart at a zoo Ellie opens.",
        "Suffers(carl, miscarriage) ::: Carl and Ellie suffer a miscarriage.",
        "Decides(carl, visitParadiseFalls) ::: They decide to realize their dream of visiting Paradise Falls.",
        "Spends(carl, money) ::: They try to save for the trip but repeatedly end up spending the money on more pressing needs.",
        "ArrangesFor(carl, trip) ::: Carl arranges for the trip.",
        "BecomesIll(ellie) ::: Ellie suddenly becomes ill.",
        "Dies(ellie) ::: Ellie dies.",
        "",
        "Conclusion:",
        "¬(∃x (Child(x) ∧ (Parent(carl, x) ∧ Parent(ellie, x)))) ::: Carl Fredricksen and Ellie are unable to have a child after suffering a miscarriage."
      ]
    },
    {
      "id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "LivesIn(x, y) ::: x lives in y.",
        "Injures(x, y) ::: x injures y.",
        "CourtOrders(x, y) ::: x is ordered by the court to do y.",
        "TurnsInto(x, y) ::: x turns into y.",
        "AccidentalStowaway(x, y) ::: x is an accidental stowaway in y's effort.",
        "Survives(x, y) ::: x survives y.",
        "Lands(x, y) ::: x lands in y.",
        "Harnesses(x, y) ::: x harnesses y.",
        "Walks(x, y) ::: x walks y.",
        "Encounters(x, y) ::: x encounters y.",
        "Names(x, y) ::: x names y.",
        "Vows(x, y) ::: x vows to do y.",
        "",
        "Premises:",
        "LivesIn(carl, house) ::: Carl still lives in the house.",
        "Injures(carl, construction_worker) ::: Carl accidentally injures a construction worker.",
        "CourtOrders(court, move_to_retirement_home) ::: A court orders Carl to move to a retirement home.",
        "TurnsInto(carl, makeshift_airship) ::: Carl turns his house into a makeshift airship.",
        "AccidentalStowaway(russell, carl) ::: Russell becomes an accidental stowaway in Carl's effort.",
        "Survives(russell, thunderstorm) ::: Russell survives a thunderstorm.",
        "Lands(carl_airship, tepui) ::: The flying house lands on a tepui opposite Paradise Falls.",
        "Harnesses(carl, house) ::: Carl harnesses himself to the still-buoyant house.",
        "Walks(carl, mesa) ::: Carl walks the house across the mesa.",
        "Encounters(russell, kevin) ::: Russell encounters a tall, colorful flightless bird, whom he names \"Kevin\".",
        "Names(russell, kevin) ::: Russell names the bird \"Kevin\".",
        "Vows(dug, take_kevin_to_master) ::: Dug vows to take Kevin to his master.",
        "Aims(carl, reach_paradise_falls) ::: Carl aims to reach Paradise Falls before the balloons deflate.",
        "Aims(russell, reach_paradise_falls) ::: Russell aims to reach Paradise Falls before the balloons deflate."
      ]
    },
    {
      "id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "Hostile(x) ::: x is hostile.",
        "Seeking(x, y) ::: x is seeking y.",
        "Captured(x, y) ::: x captures y.",
        "Invites(x, y) ::: x invites y aboard y.",
        "Explains(x, y) ::: x explains y.",
        "Flees(x, y) ::: x flees with y.",
        "CatchesUp(x, y) ::: x catches up with y.",
        "StartsFire(x, y) ::: x starts a fire beneath y.",
        "Chooses(x, y, z) ::: x chooses between y and z.",
        "Disappointed(x, y) ::: x is disappointed in y.",
        "",
        "Premises:",
        "Hostile(muntz) ∧ Believes(muntz, Stealing(carl, russell, bird)) ::: Charles Muntz becomes hostile when he believes Carl and Russell are attempting to steal the bird.",
        "Forced(carl, Choose(carl, house, kevin)) ::: Carl is forced to choose between saving his house or Kevin.",
        "Seeking(muntz, bird) ::: Muntz is seeking the bird.",
        "Captured(muntz, kevin) ::: Muntz captures Kevin.",
        "Invites(muntz, dirigible) ::: Muntz invites Carl and Russell aboard his dirigible.",
        "Explains(muntz, searchingForGiantBird) ::: Muntz explains that he has spent years searching for the giant bird.",
        "Flees(carl, russell) ::: Carl flees with Russell.",
        "CatchesUp(muntz, carl) ::: Muntz catches up with Carl.",
        "StartsFire(muntz, house) ::: Muntz starts a fire beneath Carl's house.",
        "Chooses(carl, house, kevin) ::: Carl chooses between saving his house or Kevin.",
        "Disappointed(russell, carl) ::: Russell is disappointed in Carl over his decision to abandon Kevin."
      ]
    },
    {
      "id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Home(x) ::: x is a home.",
        "Scrapbook(x) ::: x is a scrapbook.",
        "Filled(x, y) ::: x is filled with y.",
        "Thank(x, y) ::: x thanks y.",
        "Adventure(x) ::: x is an adventure.",
        "Lighten(x) ::: x is lightened of possessions.",
        "Pursue(x, y) ::: x pursues y.",
        "Captured(x, y) ::: x is captured by y.",
        "Board(x, y) ::: x boards y.",
        "Free(x, y) ::: x frees y.",
        "AccidentallyDefeat(x, y) ::: x accidentally defeats y.",
        "Leader(x, y) ::: x becomes the leader of y.",
        "Pursue(x, y) ::: x pursues y.",
        "Corner(x, y, z) ::: x corners y and z.",
        "Lure(x, y) ::: x lures y.",
        "Fall(x) ::: x falls.",
        "Death(x) ::: x meets death.",
        "",
        "Premises:",
        "Home(carlHome) ∧ Scrapbook(ellieScrapbook) ∧ Filled(ellieScrapbook, photosOfMarriage) ∧ Thank(ellie, carl) ∧ Adventure(adventureNote) ::: Carl looks through Ellie's childhood scrapbook and finds it filled with photos of their marriage and a note thanking him for the adventure.",
        "Lighten(carlHome) ∧ Pursue(carl, russell) ::: Carl empties the house of furniture and possessions, lightening it, and pursues Russell.",
        "Captured(russell, muntz) ∧ Board(carl, dirigible) ∧ Free(carl, russell) ∧ Free(carl, kevin) ::: Russell is captured by Muntz, but Carl manages to board the dirigible in flight and free both him and Kevin.",
        "AccidentallyDefeat(dug, alpha) ∧ Leader(dug, dogs) ::: Dug accidentally defeats Alpha and becomes the new leader of the dogs.",
        "Pursue(muntz, carl) ∧ Fall(muntz) ∧ Death(muntz) ::: Muntz pursues them around the airship, but ends with his death after falling from the airship.",
        "Lure(carl, kevin) ∧ Corner(muntz, dug, russell) ::: Carl lures Kevin back onto the airship while Muntz corners Dug, Kevin, and Russell inside Carl's tethered house.",
        "",
        "Conclusion:",
        "Pursue(carl, russell) ::: Carl pursues Russell after being reinvigorated.",
        "Free(carl, russell) ∧ Free(carl, kevin) ::: Carl frees both Russell and Kevin."
      ]
    },
    {
      "id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "Reunites(x, y) ::: x reunites y with her chicks.",
        "Flies(x, y) ::: x flies y back to the city.",
        "Presents(x, y, z) ::: x presents y with z.",
        "Enjoys(x, y) ::: x enjoys y.",
        "Lands(x, y) ::: x lands on y.",
        "FulfillsPromise(x, y) ::: x fulfills a promise to y.",
        "Symbolizes(x, y) ::: x symbolizes y.",
        "",
        "Premises:",
        "Reunites(carl, chicks) ::: Carl reunites Kevin with her chicks.",
        "Flies(carl, dirigible) ::: Carl flies the dirigible back to the city.",
        "Presents(carl, russell, grapeSodaCap) ::: Carl presents Russell with his final badge: a grape soda cap that Ellie gave to Carl when they first met and made their promise.",
        "Enjoys(carl, iceCream) ∧ Enjoys(russell, iceCream) ∧ Enjoys(dug, iceCream) ::: The two and Dug enjoy some ice cream together.",
        "Lands(carl'sHouse, cliff) ::: Carl's house has landed on the cliff beside Paradise Falls.",
        "FulfillsPromise(carl, ellie) ::: Carl fulfills his promise to Ellie.",
        "Symbolizes(grapeSodaCap, promise) ::: The grape soda cap symbolizes the promise made between Carl and Ellie."
      ]
    }
  ],
  "1528f4c003dde308ae74bdec458466765944ca6a": [
    {
      "id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "HeavilyInDebt(x) ::: x is heavily in debt.",
        "FindsBody(x, y) ::: x finds body y.",
        "LeftByMafiaHitmen(y) ::: body y was left by Mafia hitmen.",
        "AttemptsToFindCure(x, y) ::: x attempts to find a cure for y.",
        "StagesAttack(x, y) ::: x stages an attack involving y.",
        "DisfiguringAnimalAttack(y) ::: y is a disfiguring animal attack.",
        "CashInPolicy(x, y) ::: x cashes in y's life-insurance policy.",
        "CorpseRequired(y) ::: y requires a corpse.",
        "",
        "Premises:",
        "HeavilyInDebt(a_1) ::: Paul Barnell is heavily in debt.",
        "FindsBody(a_1, b) ::: Paul finds a body in a dumpster.",
        "LeftByMafiaHitmen(b) ::: The body was left there by Mafia hitmen.",
        "AttemptsToFindCure(a_1, a_3) ::: Paul attempts to find a cure for his wife Margaret's apparent Tourette Syndrome.",
        "StagesAttack(a_1, b) ::: Paul stages a disfiguring animal attack with the body.",
        "CashInPolicy(a_1, b_1) ::: Paul cashes in his missing brother's life-insurance policy.",
        "CorpseRequired(b_1) ::: The life-insurance policy requires a corpse.",
        "",
        "Conclusion:",
        "MotivatedByDebtAndCorpse(a_1) ::: Paul Barnell's actions are motivated by his debt and the need for a corpse to claim the life-insurance policy."
      ]
    },
    {
      "id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "Convinced(x) ::: x is convinced by the local police.",
        "PromotionHungry(x) ::: x is eager for promotion.",
        "InSearchOf(x, y) ::: x is in search of y.",
        "Hostage(x, y) ::: x is holding y hostage.",
        "Neglects(x, y) ::: x neglects y.",
        "WorksUp(x) ::: x is working his way up in his firm.",
        "",
        "Premises:",
        "Convinced(localPolice) ∧ ¬Convinced(ted) ::: Local police are convinced, but promotion-hungry insurance agent Ted Waters is not.",
        "∀x (InSearchOf(hitmen, corpse) ∧ Hostage(hitmen, margaret)) ::: The hitmen who dumped the body are also in search of the corpse for proof to collect their payment and take Margaret hostage to ensure that they will get the body.",
        "Neglects(ted, tiffany) ∧ WorksUp(ted) ::: Ted is having problems with his girlfriend, Tiffany, whom he neglects as he works his way up in his firm."
      ]
    },
    {
      "id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "MissingBrother(x) ::: x is a missing brother.",
        "Beats(x, y) ::: x beats y.",
        "Demands(x, y) ::: x demands y.",
        "Suggests(x, y) ::: x suggests that y.",
        "SpeedsUpDelivery(x, y) ::: x speeds up the delivery of y.",
        "Exhume(x) ::: x is exhumed.",
        "AgreesToExchange(x, y, z) ::: x agrees to exchange y for z.",
        "Fears(x, y) ::: x fears y.",
        "ConsidersKilling(x, y) ::: x considers killing y.",
        "CannotDo(x) ::: x cannot do something.",
        "",
        "Premises:",
        "MissingBrother(raymond) ∧ Beats(raymond, paul) ∧ Demands(raymond, portionOfInsurance) ::: Raymond is Paul's missing brother, beats him up, and demands a portion of the insurance money.",
        "Suggests(pauls, TedAssaulted(raymond)) ∧ SpeedsUpDelivery(pauls, millionDollarInsurancePayment) ::: Paul speeds up the delivery of the million dollar insurance payment by suggesting that Ted assaulted Raymond.",
        "Exhume(body) ∧ AgreesToExchange(pauls, body, margaret) ::: Paul has the body exhumed and agrees to exchange it and a portion of the money for Margaret.",
        "Fears(pauls, RaymondWillKill(margaret)) ::: Paul fears that Raymond will attempt to kill Margaret to keep her quiet.",
        "ConsidersKilling(pauls, raymond) ∧ CannotDo(pauls) ::: Paul considers killing Raymond but cannot bring himself to do so."
      ]
    },
    {
      "id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Asleep(x) ::: x is asleep.",
        "Meets(x, y) ::: x meets y.",
        "Angered(x, y) ::: x is angered at y's actions.",
        "ToldBy(x, y, z) ::: x is told by y about z.",
        "Shoots(x, y) ::: x shoots y.",
        "ShotBy(x, y) ::: x is shot by y.",
        "Finds(x, y) ::: x finds y.",
        "Hidden(x, y) ::: x has hidden y.",
        "CommitsFraud(x, y) ::: x commits fraud out of love for y.",
        "LetsGo(x, y) ::: x lets y go.",
        "TakesOnVacation(x, y) ::: x takes y on vacation.",
        "",
        "Premises:",
        "Asleep(a_2) ::: Raymond is asleep.",
        "Meets(a_1, hit_men) ::: Paul meets the hit-men for the exchange.",
        "Angered(a_2, a_1) ::: Raymond is angered at Paul's deception.",
        "ToldBy(a_2, insurance_agent, million_dollar_policy) ::: Raymond is told by the insurance agent about his million dollar policy.",
        "Shoots(a_2, a_3) ::: Raymond shoots Margaret in the back.",
        "ShotBy(a_2, hit_man) ::: Raymond is shot in the stomach by one of the hit-men (Tim Nelson).",
        "Finds(a_1, a_3) ::: Paul finds Margaret alive.",
        "Hidden(a_1, insurance_money) ::: Paul has hidden the insurance money in Margaret's jacket.",
        "CommitsFraud(a_1, a_3) ::: Paul commits fraud out of love for his wife (Margaret).",
        "LetsGo(a_4, a_1) ::: Ted lets Paul and Margaret go.",
        "TakesOnVacation(a_1, tropical_vacation) ::: Paul takes Margaret on a tropical vacation.",
        "",
        "Conclusion:",
        "Raymond dies after being shot by a hit-man. ",
        "Paul's actions are motivated by love for his wife."
      ]
    }
  ],
  "18a67c48f4afdee5d95afd681e6e1787471b5f30": [
    {
      "id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Defeated(a_2) ::: The individual is defeated in battle.",
        "Captured(a_2) ::: The individual is captured.",
        "PlacedInDungeon(a_2) ::: The individual is placed in a monster-infested dungeon.",
        "FindsAlly(a_2) ::: The individual finds an unexpected ally.",
        "Escapes(a_2) ::: The individual escapes from the dungeon.",
        "Riots(a_0) ::: The population of the Aquilonian capital riots.",
        "BelievesDead(a_0, a_2) ::: The population believes the individual is dead.",
        "AcceptsAlternativeKing(a_0) ::: The population is ready to accept an alternative King.",
        "Returns(a_2) ::: The individual returns.",
        "DisposesFoes(a_2) ::: The individual disposes of his foes.",
        "LongHarrowingOccupation(a_0) ::: Aquilonia lives under a long and harrowing foreign occupation.",
        "HazardousQuest(a_2) ::: The individual goes through a long hazardous quest.",
        "",
        "Premises:",
        "Defeated(a_2) ∧ Captured(a_2) ∧ PlacedInDungeon(a_2) ∧ FindsAlly(a_2) ∧ Escapes(a_2) ::: The individual is defeated in battle, captured, placed in a monster-infested dungeon, finds an unexpected ally, and escapes.",
        "Riots(a_0) ∧ BelievesDead(a_0, a_2) ∧ AcceptsAlternativeKing(a_0) ::: The population of the Aquilonian capital riots, believing the individual is dead and ready to accept an alternative King.",
        "Returns(a_2) ∧ LongHarrowingOccupation(a_0) ∧ HazardousQuest(a_2) ∧ DisposesFoes(a_2) ::: The individual returns after Aquilonia has lived under a long and harrowing foreign occupation and goes through a long hazardous quest before he could finally dispose of his foes."
      ]
    },
    {
      "id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "King(x) ::: x is a king.",
        "Reign(x, y) ::: x reigns in the year y.",
        "Conspirators(x) ::: x is a group of conspirators.",
        "Depose(x, y) ::: x attempts to depose y.",
        "Heir(x, y) ::: x is the heir to y.",
        "Slain(x, y) ::: x has slain y.",
        "ResortToNecromancy(x) ::: x resorts to necromancy.",
        "Resurrect(x, y) ::: x resurrects y.",
        "AncientSorcerer(x) ::: x is an ancient sorcerer.",
        "DefeatedBy(x, y) ::: x is defeated by y.",
        "Captured(x) ::: x is captured.",
        "SlatedForExecution(x) ::: x is slated for execution.",
        "RisksLife(x, y) ::: x risks their life to save y.",
        "",
        "Premises:",
        "King(conan) ∧ Reign(conan, fortyFive) ::: Conan is a king during his reign at the age of forty-five.",
        "Conspirators(group) ∧ Depose(group, conan) ∧ Heir(valerius, numedides) ∧ Slain(conan, numedides) ::: A group of conspirators attempts to depose Conan in favor of Valerius, who is the heir to Numedides, whom Conan has slain.",
        "ResortToNecromancy(group) ∧ Resurrect(xaltotun, ancientSorcerer) ::: The conspirators resort to necromancy, resurrecting Xaltotun, an ancient sorcerer.",
        "DefeatedBy(aquilonianArmy, nemediaArmy) ::: The Aquilonian army is defeated by the army of the rival kingdom of Nemedia.",
        "Captured(conan) ∧ SlatedForExecution(conan) ::: Conan is captured and slated for execution.",
        "RisksLife(zenobia, conan) ::: Zenobia risks her life to free Conan."
      ]
    },
    {
      "id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "Quest(x) ::: x is on a quest.",
        "Retrieve(x, y) ::: x retrieves y.",
        "Defeat(x, y) ::: x defeats y.",
        "Regain(x, y) ::: x regains y.",
        "Throne(x) ::: x is a throne.",
        "Land(x) ::: x is a land.",
        "In(x, y) ::: x is in y.",
        "",
        "Premises:",
        "Quest(conan) ∧ Retrieve(conan, heartOfAhriman) ∧ Defeat(wizard, conan) ∧ Regain(conan, throne) ::: Conan's quest to retrieve the Heart of Ahriman in order to defeat the wizard and regain his throne.",
        "∀x (In(conan, x) → Land(x)) ::: Conan travels through all the lands of Hyboria.",
        "",
        "Conclusion:",
        "Quest(conan) ::: Conan is on a quest.",
        "∃y (Land(y) ∧ In(conan, y)) ::: There exists a land that Conan is in."
      ]
    },
    {
      "id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Triumph(x) ::: x achieves a significant victory.",
        "Vows(x, y) ::: x makes a solemn promise regarding y.",
        "Queen(y) ::: y is a queen.",
        "Elevate(x, y) ::: x raises y to a higher status.",
        "",
        "Premises:",
        "Triumph(a_2) ∧ Vows(a_2, a_1) ::: After his eventual triumph, the individual vows to make Zenobia his queen.",
        "Elevate(a_2, a_1) ::: The individual intends to elevate Zenobia to the status of queen."
      ]
    }
  ],
  "1b548ec72908f9447446bdb24e8c179df19a8999": [
    {
      "id": "1b548ec72908f9447446bdb24e8c179df19a8999",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Captured(x) ::: x is captured.",
        "Imprisoned(x) ::: x is imprisoned.",
        "InCell(x, y) ::: x is in cell y.",
        "WakesEarly(x) ::: x wakes early.",
        "Sees(x, y) ::: x sees y.",
        "FallsInLove(x, y) ::: x falls in love with y.",
        "Claims(x, y) ::: x claims y.",
        "Recognizes(x, y) ::: x recognizes y.",
        "",
        "Premises:",
        "Captured(palamon) ∧ Captured(arcite) ∧ Imprisoned(palamon) ∧ Imprisoned(arcite) ∧ InCell(palamon, tower) ∧ InCell(arcite, tower) ::: Palamon and Arcite are captured and imprisoned by Theseus in the tower of his castle.",
        "WakesEarly(palamon) ::: Palamon wakes early one morning in May.",
        "Sees(palamon, emily) ::: Palamon sees Emily down in the courtyard picking flowers.",
        "FallsInLove(palamon, emily) ::: Palamon instantly falls in love with Emily.",
        "WakesEarly(arcite) ::: Arcite wakes after hearing Palamon's moan.",
        "Sees(arcite, emily) ::: Arcite sees Emily.",
        "FallsInLove(arcite, emily) ::: Arcite falls in love with Emily.",
        "Recognizes(palamon, emily) ::: Palamon recognizes Emily as mortal and not as a goddess.",
        "Claims(arcite, rightToWoo) ::: Arcite claims that he has the right to woo Emily over Palamon.",
        "",
        "Conclusion:",
        "Claims(arcite, woo(emily)) ::: Arcite believes he has the right to woo Princess Emily over Palamon."
      ]
    },
    {
      "id": "1b548ec72908f9447446bdb24e8c179df19a8999",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "ReturnsInDisguise(x, y) ::: x returns to y in disguise.",
        "EntersService(x, y) ::: x enters service in y's household.",
        "CloseTo(x, y) ::: x gets close to y.",
        "EscapesFromPrison(x) ::: x escapes from prison.",
        "Overhears(x, y) ::: x overhears y.",
        "",
        "Premises:",
        "ReturnsInDisguise(arcite, athens) ∧ CloseTo(arcite, emily) ::: Arcite returns to Athens in disguise to get close to Emily.",
        "EscapesFromPrison(palamon) ∧ Overhears(palamon, arcite) ::: Palamon escapes from prison to overhear Arcite."
      ]
    },
    {
      "id": "1b548ec72908f9447446bdb24e8c179df19a8999",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "Duel(x, y) ::: x and y are dueling with each other.",
        "Gather(x, n) ::: x gathers n men.",
        "Fight(x, y) ::: x fights in a tournament against y.",
        "Marry(x, y) ::: x marries y.",
        "PrayTo(x, y) ::: x prays to y.",
        "InCombat(x) ::: x is in combat.",
        "SeriouslyInjured(x) ::: x is seriously injured.",
        "Winner(x) ::: x is the winner of the tournament.",
        "",
        "Premises:",
        "Duel(palamon, arcite) ::: Palamon and Arcite begin to duel with each other over who should get Emily.",
        "Gather(palamon, 100) ∧ Gather(arcite, 100) ::: Theseus sentences both Palamon and Arcite to gather 100 men apiece.",
        "Fight(palamon, arcite) ::: The winner of the tournament fights against the other.",
        "Marry(winner, emily) ::: The winner of the tournament marries Emily.",
        "PrayTo(palamon, venus) ::: Palamon prays to Venus to make Emily his wife.",
        "PrayTo(emily, diana) ::: Emily prays to Diana to remain unmarried, or else to marry the one who truly loves her.",
        "PrayTo(arcite, mars) ::: Arcite prays to Mars for victory.",
        "∀x (SeriouslyInjured(x) → ¬InCombat(x)) ::: If any man becomes seriously injured, he is no longer in combat.",
        "∀x (InCombat(x) → ¬SeriouslyInjured(x)) ::: Because of the rules laid down by Theseus, there were almost no deaths on either side.",
        "",
        "Conclusion:",
        "Winner(palamon) ∧ Marry(winner, emily) ::: The winner of the tournament marries Emily."
      ]
    },
    {
      "id": "1b548ec72908f9447446bdb24e8c179df19a8999",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Wounded(x) ::: x is wounded.",
        "Unhorsed(x) ::: x is unhorsed.",
        "Wins(x, y) ::: x wins against y.",
        "MortallyInjured(x) ::: x is mortally injured.",
        "Tells(x, y, z) ::: x tells y to do z.",
        "Marries(x, y) ::: x marries y.",
        "GoodNameAndReputation(x) ::: x has a good name and reputation.",
        "Honour(x) ::: x has honour.",
        "AcquittedWell(x) ::: x acquitted himself well in a feat of arms.",
        "SubjectToDeath(x) ::: x is subject to death.",
        "InGoodTerms(x, y) ::: x is on good terms with y.",
        "",
        "Premises:",
        "Wounded(a_1) ∧ Unhorsed(a_1) ∧ Wins(a_2, a_1) ::: Palamon is wounded by a sword thrust from one of Arcite's men and is unhorsed, and Arcite wins the battle.",
        "MortallyInjured(a_2) ::: Arcite is mortally injured by his horse throwing him off and then falling on him.",
        "Tells(a_2, a_4, a_1) ::: Arcite tells Emily that she should marry Palamon.",
        "Marries(a_1, a_4) ::: Palamon marries Emily.",
        "GoodNameAndReputation(a_2) ∧ InGoodTerms(a_2, a_3) ∧ Honour(a_2) ::: It is best to die with a good name and reputation, on good terms with friends, and with honour.",
        "AcquittedWell(a_2) ::: Arcite died in just such a manner, having acquitted himself well in a feat of arms.",
        "∀x (SubjectToDeath(x) → (x = a_3 ∨ x = a_4 ∨ x = a_1 ∨ x = a_2)) ::: All classes of medieval society are universally subject to death.",
        "",
        "Conclusion:",
        "AcquittedWell(a_2) ::: Arcite's death is honorable as he acquitted himself well in a feat of arms.",
        "Tells(a_2, a_4, a_1) ::: Emily should marry Palamon as Arcite suggested."
      ]
    }
  ],
  "21813f2122fca16d05e89d44f4521f7da8a8f3b7": [
    {
      "id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "OnDeathbed(a_1) ::: Daisy Fuller is on her deathbed.",
        "Asks(a_1, a_0, c_0) ::: Daisy asks her daughter, Caroline, to read aloud.",
        "Reads(a_0, a_2) ::: Caroline reads aloud from the diary of Benjamin Button.",
        "Approaches(c_1, b_0) ::: Hurricane Katrina approaches the New Orleans hospital.",
        "",
        "Premises:",
        "OnDeathbed(daisy) ∧ Approaches(hurricaneKatrina, newOrleansHospital) ::: In 2005, elderly Daisy Fuller is on her deathbed in a New Orleans hospital as Hurricane Katrina approaches.",
        "Asks(daisy, caroline, readDiary) ::: Daisy asks her daughter, Caroline, to read aloud from the diary of Benjamin Button.",
        "Reads(caroline, benjamin) ::: Caroline reads aloud from the diary of Benjamin Button."
      ]
    },
    {
      "id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "BornOnNovember11_1918(x) ::: x is born on the evening of November 11, 1918.",
        "ElderlyAppearance(x) ::: x has the appearance and physical maladies of an elderly man.",
        "MotherDiedAfterBirth(x) ::: x's mother died after giving birth.",
        "Abandoned(x) ::: x is abandoned by the father.",
        "CaresFor(x, y) ::: x cares for y as their own.",
        "Finds(x, y) ::: x finds y.",
        "WorkerAtNursingHome(x) ::: x is a worker at the nursing home.",
        "DecidesToCareFor(x, y) ::: x decides to care for y.",
        "",
        "Premises:",
        "BornOnNovember11_1918(baby) ∧ ElderlyAppearance(baby) ∧ MotherDiedAfterBirth(baby) ∧ Abandoned(baby) ::: A boy was born on the evening of November 11, 1918, with the appearance and physical maladies of an elderly man, and his mother died after giving birth, leading to his abandonment.",
        "∃x (Finds(queenie, x) ∧ Finds(tizzy, x) ∧ Abandoned(x)) ::: Queenie and Mr. \"Tizzy\" Weathers find the abandoned baby.",
        "WorkerAtNursingHome(queenie) ∧ WorkerAtNursingHome(tizzy) ::: Queenie and Mr. \"Tizzy\" Weathers are workers at the nursing home.",
        "DecidesToCareFor(queenie, baby) ::: Queenie decides to care for the baby as her own."
      ]
    },
    {
      "id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "LearnsToWalk(x, y) ::: x learns to walk in year y.",
        "Declares(x, y) ::: x declares y.",
        "UsesCrutches(x) ::: x uses crutches.",
        "Meets(x, y) ::: x meets y.",
        "BecomesGoodFriends(x, y) ::: x and y become good friends.",
        "AcceptsWork(x, y) ::: x accepts work on y.",
        "CaptainedBy(x, y) ::: y captains x.",
        "Reveals(x, y) ::: x reveals y.",
        "Leaves(x, y) ::: x leaves y for a long-term engagement.",
        "AcceptedInto(x, y) ::: x is accepted into y under z.",
        "",
        "Premises:",
        "LearnsToWalk(benjamin, 1925) ∧ Declares(benjamin, miracle) ∧ UsesCrutches(benjamin) ::: Benjamin learns to walk in 1925; he declares it a miracle, after which he uses crutches in place of a wheelchair.",
        "Meets(benjamin, daisy) ∧ Age(daisy, 7) ∧ LivesIn(daisy, nursing_home) ::: On Thanksgiving 1930, Benjamin meets seven-year-old Daisy, whose grandmother lives in the nursing home.",
        "BecomesGoodFriends(benjamin, daisy) ::: Benjamin and Daisy become good friends.",
        "AcceptsWork(benjamin, tugboat) ∧ CaptainedBy(tugboat, mike_clark) ::: Later, he accepts work on a tugboat captained by Mike Clark.",
        "Meets(benjamin, thomas_button) ∧ ¬Reveals(thomas_button, benjamin) ::: Benjamin also meets Thomas Button, who does not reveal that he is Benjamin's father.",
        "Leaves(benjamin, new_orleans) ∧ LongTermEngagement(benjamin, tugboat_crew) ::: In Autumn 1936, Benjamin leaves New Orleans for a long-term work engagement with the tugboat crew.",
        "AcceptedInto(daisy, dance_company) ∧ Under(dance_company, george_balanchine) ::: Daisy later is accepted into a dance company in New York City under choreographer George Balanchine."
      ]
    },
    {
      "id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "InLocation(x, y) ::: x is in location y.",
        "Affair(x, y) ::: x has an affair with y.",
        "Volunteers(x, y) ::: x volunteers y for a specific purpose.",
        "AssignedTo(x, y) ::: x is assigned to y.",
        "Finds(x, y) ::: x finds y.",
        "Steers(x, y) ::: x steers y.",
        "FiresOn(x, y) ::: x fires on y.",
        "Kills(x, y) ::: x kills y.",
        "Rams(x, y) ::: x rams y.",
        "Explodes(x) ::: x explodes.",
        "Sinks(x) ::: x sinks.",
        "Rescued(x, y) ::: x is rescued by y.",
        "",
        "Premises:",
        "InLocation(benjamin, murmansk) ∧ Affair(benjamin, elizabeth) ∧ InLocation(elizabeth, murmansk) ∧ InLocation(benjamin, worldWarII) ::: Benjamin is in Murmansk, where he begins having an affair with Elizabeth Abbott during World War II.",
        "Volunteers(mike, tugboat) ∧ AssignedTo(crew, salvageDuties) ::: Mike volunteers the boat for the U.S. Navy; the crew is assigned to salvage duties.",
        "Finds(tugboat, sunkenTransport) ∧ Finds(tugboat, bodiesOfTroops) ::: During a patrol, the tugboat finds a sunken U.S. transport and the bodies of many American troops.",
        "InLocation(mike, tugboat) ∧ InLocation(germanSubmarine, ocean) ::: Mike is in the tugboat while a German submarine is in the ocean.",
        "Steers(mike, tugboat) ∧ FiresOn(germanGunner, tugboat) ∧ Kills(germanGunner, crew) ::: Mike steers the tugboat full speed towards the German submarine while a German gunner fires on the tugboat, killing most of the crew.",
        "Rams(tugboat, germanSubmarine) ∧ Explodes(germanSubmarine) ∧ Sinks(tugboat) ::: The tugboat rams the submarine, causing it to explode and sinking both vessels.",
        "Rescued(benjamin, uSNavyShips) ∧ Rescued(crewman, uSNavyShips) ::: Benjamin and another crewman are rescued by U.S. Navy ships the next day."
      ]
    },
    {
      "id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "Returns(x, y) ::: x returns to location y.",
        "Reunites(x, y) ::: x reunites with person y.",
        "GoesOutForDinner(x, y) ::: x goes out for dinner with person y.",
        "FailsToSeduce(x, y) ::: x fails to seduce person y.",
        "Departs(x) ::: x departs.",
        "Reveals(x, y) ::: x reveals information to person y.",
        "Wills(x, y, z) ::: x wills y to person z.",
        "TerminallyIll(x) ::: x is terminally ill.",
        "FatherOf(x, y) ::: x is the father of person y.",
        "Owns(x, y) ::: x owns y.",
        "",
        "Premises:",
        "Returns(benjamin, newOrleans) ::: Benjamin returns to New Orleans.",
        "Reunites(benjamin, queenie) ::: Benjamin reunites with Queenie.",
        "Reunites(benjamin, daisy) ::: Benjamin reunites with Daisy.",
        "GoesOutForDinner(benjamin, daisy) ::: Benjamin and Daisy go out for dinner.",
        "FailsToSeduce(daisy, benjamin) ::: Daisy fails to seduce Benjamin.",
        "Departs(daisy) ::: Daisy departs after failing to seduce Benjamin.",
        "Reunites(benjamin, thomasButton) ::: Benjamin reunites with Thomas Button.",
        "TerminallyIll(thomasButton) ::: Thomas Button is terminally ill.",
        "Reveals(thomasButton, benjamin) ::: Thomas Button reveals to Benjamin that he is his father.",
        "Wills(thomasButton, buttonCompany, benjamin) ::: Thomas Button wills his button company to Benjamin.",
        "Wills(thomasButton, estate, benjamin) ::: Thomas Button wills his estate to Benjamin.",
        "FatherOf(thomasButton, benjamin) ::: Thomas Button is the father of Benjamin."
      ]
    },
    {
      "id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 5,
      "fols": [
        "Predicates:",
        "Visits(x, y) ::: x visits y.",
        "InLocation(x, y) ::: x is in location y.",
        "Injured(x) ::: x is injured.",
        "DancingCareerEnds(x) ::: x's dancing career ends.",
        "Frustrated(x) ::: x is frustrated.",
        "YoungAppearance(x) ::: x has a youthful appearance.",
        "InLoveWith(x, y) ::: x is in love with y.",
        "Departs(x, y) ::: x departs from y.",
        "",
        "Premises:",
        "Visits(benjamin, daisy) ∧ InLocation(benjamin, new_york) ∧ ¬InLoveWith(daisy, benjamin) ::: In 1947, Benjamin visits Daisy in New York unannounced but departs upon seeing that she has fallen in love with someone else.",
        "Visits(daisy, benjamin) ∧ Injured(daisy) ∧ DancingCareerEnds(daisy) ::: In 1954, Daisy's dancing career ends when her leg is crushed in an automobile accident in Paris.",
        "Frustrated(daisy) ∧ YoungAppearance(benjamin) ∧ ¬InLocation(benjamin, daisy) ::: When Benjamin visits her, Daisy is amazed by his youthful appearance, but, frustrated by her injuries, she tells him to stay out of her life.",
        "DancingCareerEnds(daisy) → Injured(daisy) ::: Daisy's injuries lead to the end of her dancing career."
      ]
    },
    {
      "id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 6,
      "fols": [
        "Predicates:",
        "Returns(a_1, b_0) ::: Daisy returns to New Orleans.",
        "Reunites(a_1, a_2) ::: Daisy reunites with Benjamin.",
        "FallsInLove(a_1, a_2) ::: Daisy and Benjamin fall in love.",
        "Sails(a_1, a_2) ::: Daisy and Benjamin go sailing together.",
        "Dies(a_1) ::: Queenie has died.",
        "MovesIn(a_1, a_2) ::: Daisy and Benjamin move in together.",
        "Opens(a_1, c_0) ::: Daisy opens a ballet studio.",
        "Pregnant(a_1) ::: Daisy is pregnant.",
        "GivesBirth(a_1, a_2) ::: Daisy gives birth to Caroline.",
        "Departs(a_2) ::: Benjamin departs.",
        "SellsBelongings(a_2) ::: Benjamin sells his belongings.",
        "Leaves(a_2, b_0) ::: Benjamin leaves a bank account book for Daisy and Caroline.",
        "TravelsAlone(a_2) ::: Benjamin travels alone during the 1970s.",
        "",
        "Premises:",
        "Returns(a_1, b_0) ::: Daisy returns to New Orleans.",
        "Reunites(a_1, a_2) ::: Daisy reunites with Benjamin.",
        "FallsInLove(a_1, a_2) ::: Daisy and Benjamin fall in love.",
        "Sails(a_1, a_2) ::: Daisy and Benjamin go sailing together.",
        "Dies(a_1) ::: Queenie has died.",
        "MovesIn(a_1, a_2) ::: Daisy and Benjamin move in together.",
        "Opens(a_1, c_0) ::: Daisy opens a ballet studio.",
        "Pregnant(a_1) ::: Daisy is pregnant.",
        "GivesBirth(a_1, a_2) ::: Daisy gives birth to Caroline.",
        "Departs(a_2) ::: Benjamin departs after selling his belongings.",
        "SellsBelongings(a_2) ::: Benjamin sells his belongings.",
        "Leaves(a_2, b_0) ::: Benjamin leaves a bank account book for Daisy and Caroline.",
        "TravelsAlone(a_2) ::: Benjamin travels alone during the 1970s.",
        "",
        "Conclusion:",
        "FallsInLove(a_1, a_2) ::: Daisy and Benjamin's relationship evolves as they fall in love and start a family."
      ]
    },
    {
      "id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 7,
      "fols": [
        "Predicates:",
        "Married(x) ::: x is married.",
        "Introduces(x, y, z) ::: x introduces y to z.",
        "Coped(x) ::: x coped with her situation.",
        "SharesPassion(x, y) ::: x shares passion with y.",
        "Visits(x, y) ::: x visits y.",
        "PartOnceMore(x, y) ::: x and y part once more.",
        "",
        "Premises:",
        "Married(daisy) ::: Daisy is now married.",
        "Introduces(daisy, benjamin, husband) ::: Daisy introduces Benjamin to her husband.",
        "Coped(daisy) → ¬Coped(daisy) ::: Daisy admits that she could not have coped otherwise.",
        "Visits(daisy, hotel) ::: Daisy visits Benjamin at his hotel.",
        "SharesPassion(benjamin, daisy) ::: Benjamin and Daisy share their passion for each other.",
        "PartOnceMore(benjamin, daisy) ::: Benjamin and Daisy part once more.",
        "Daisy acknowledges difficulty → ¬Coped(daisy) ::: Daisy's admission indicates that she acknowledges the difficulty of her situation without Benjamin."
      ]
    },
    {
      "id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 8,
      "fols": [
        "Predicates:",
        "CaresFor(x, y) ::: x cares for y.",
        "PhysicallyInfant(x) ::: x is physically an infant.",
        "ChronologicallyAge(x, y) ::: x is chronologically y years old.",
        "DiesInArmsOf(x, y) ::: x dies in the arms of y.",
        "ContactedBy(x, y) ::: x is contacted by y.",
        "FoundInDiary(x, y) ::: x is found in the diary of y.",
        "LivingIn(x, y) ::: x is living in y.",
        "TakenToHospital(x) ::: x is taken to the hospital.",
        "DisplayingSignsOfDementia(x) ::: x is displaying early signs of dementia.",
        "MovesInto(x, y) ::: x moves into y.",
        "Year(x, y) ::: x is in the year y.",
        "",
        "Premises:",
        "ContactedBy(a_1, social_workers) ∧ FoundInDiary(a_2, a_1) ∧ LivingIn(a_2, b_2) ∧ TakenToHospital(a_2) ∧ DisplayingSignsOfDementia(a_2) ::: In 1990, Daisy is contacted by social workers who have found Benjamin living in a condemned building and was taken to the hospital in poor physical condition, and that they found her name in his diary.",
        "MovesInto(a_1, b_1) ∧ CaresFor(a_1, a_2) ::: Daisy moves into the nursing home in 1997 and cares for Benjamin for the rest of his life.",
        "DiesInArmsOf(a_2, a_1) ∧ PhysicallyInfant(a_2) ∧ ChronologicallyAge(a_2, 84) ::: In the spring of 2003, Benjamin dies in Daisy's arms, physically an infant but chronologically 84 years of age.",
        "Dies(a_1) ∧ Year(a_1, 2005) ::: Daisy dies as Hurricane Katrina approaches.",
        "",
        "Conclusion:",
        "CaresFor(a_1, a_2) ::: Daisy cares for Benjamin until his death."
      ]
    }
  ],
  "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e": [
    {
      "id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Marries(x, y) ::: x marries y.",
        "LosesInheritance(x, y) ::: x loses y of Millamant's inheritance.",
        "Consents(x, y) ::: x consents to y.",
        "Encourages(x, y) ::: x encourages y.",
        "Loves(x, y) ::: x loves y.",
        "Informs(x, y) ::: x informs y about y's situation.",
        "",
        "Premises:",
        "Marries(a_1) → LosesInheritance(a_4, c) ::: If Lady Wishfort marries, Mirabell will lose £6000 of Millamant's inheritance.",
        "Consents(a_1, d) → LosesInheritance(a_4, c) ::: Mirabell will get £6000 of Millamant's inheritance if Lady Wishfort consents to his and Millamant's marriage.",
        "Loves(a_4, a_8) ::: Mirabell loves Millamant.",
        "Encourages(a_2, a_4) ::: Fainall encourages Mirabell to marry Millamant.",
        "Informs(a_4, a_2) ::: Mirabell informs Fainall about his love for Millamant."
      ]
    },
    {
      "id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "Hates(x, y) ::: x hates y.",
        "Loves(x, y) ::: x loves y.",
        "Accuses(x, y) ::: x accuses y.",
        "Discusses(x, y) ::: x discusses y.",
        "Plots(x, y) ::: x plots to deceive y.",
        "Angry(x) ::: x is angry.",
        "Reminds(x, y) ::: x reminds y of their roles.",
        "HasVagueIdea(x, y) ::: x has a vague idea about y.",
        "Inherits(x, y) ::: x inherits y.",
        "NewlyWed(x) ::: x is a newly wed.",
        "",
        "Premises:",
        "Discusses(a_3, a_2) ∧ Discusses(a_6, a_2) ::: Mrs. Fainall and Mrs. Marwood are discussing their hatred of men.",
        "Accuses(a_2, a_6) ∧ Loves(a_6, a_4) ::: Fainall accuses Mrs. Marwood of loving Mirabell.",
        "Hates(a_3, a_2) ::: Mrs. Fainall tells Mirabell that she hates her husband.",
        "Plots(a_3, a_1) ∧ Plo(a_4, a_1) ::: Mrs. Fainall and Mirabell plot to deceive Lady Wishfort into giving her consent to the marriage.",
        "Angry(a_8) ∧ HasVagueIdea(a_8, d) ::: Millamant is angry about the previous night and has a vague idea about the plan.",
        "Reminds(a_4, a_5) ::: Mirabell reminds the newly wed servants of their roles in the plan.",
        "NewlyWed(a_5) ∧ NewlyWed(a_7) ::: The newly wed servants appear in the park.",
        "",
        "Conclusion:",
        "Plots(a_3, a_1) ::: Mrs. Fainall and Mirabell plot to deceive Lady Wishfort into giving her consent to the marriage."
      ]
    },
    {
      "id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "Marries(x, y) ::: x marries y.",
        "LosesInheritance(x) ::: x loses his inheritance.",
        "LearnsOfPlan(x) ::: x learns of the plan.",
        "TakesMoney(x, y) ::: x takes y's money.",
        "GoesAwayWith(x, y) ::: x goes away with y.",
        "DisguisedAs(x, y) ::: x is disguised as y.",
        "EncouragedBy(x, y) ::: x is encouraged by y.",
        "Overheard(x, y) ::: x overhears y.",
        "OffersHelp(x, y) ::: x offers help to y.",
        "EmbarrassingSituation(x) ::: x is in an embarrassing situation.",
        "",
        "Premises:",
        "Marries(a_1, a_7) → LosesInheritance(a_4) ::: If Lady Wishfort marries the supposed Sir Rowland, then Mirabell will lose his inheritance.",
        "LearnsOfPlan(a_2) → (TakesMoney(a_2, a_3) ∧ GoesAwayWith(a_2, a_6)) ::: If Fainall learns of the plan, then he will take his wife's money and go away with Mrs. Marwood.",
        "DisguisedAs(a_7, a_4) ::: Waitwell is disguised as Mirabell's supposed uncle, Sir Rowland.",
        "EncouragedBy(a_1, a_5) ::: Lady Wishfort is encouraged by Foible.",
        "OffersHelp(a_4, a_1) ::: Mirabell offers to help Lady Wishfort out of the embarrassing situation.",
        "Overheard(a_6, d) ::: Mrs. Marwood overhears the discussion of the plan by Mrs. Fainall and Foible."
      ]
    },
    {
      "id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "StrongWilled(x) ::: x is strong-willed.",
        "Discuss(x, y) ::: x discusses y.",
        "Propose(x, y) ::: x proposes to y.",
        "Accept(x, y) ::: x accepts y's proposal.",
        "EncouragedBy(x, y) ::: x is encouraged by y.",
        "Wants(x, y) ::: x wants y to marry.",
        "Arrives(x) ::: x arrives.",
        "Accuses(x, y) ::: x accuses y of something.",
        "Brings(x, y) ::: x brings y.",
        "Agrees(x, y) ::: x agrees to y.",
        "",
        "Premises:",
        "StrongWilled(mirabell) ∧ StrongWilled(millamant) ::: Mirabell and Millamant are equally strong-willed.",
        "Discuss(mirabell, conditions) ::: Mirabell and Millamant discuss the conditions under which they would accept each other in marriage.",
        "Propose(mirabell, millamant) ::: Mirabell proposes to Millamant.",
        "Accept(millamant, mirabell) ∧ EncouragedBy(millamant, mrsFainall) ::: Millamant accepts Mirabell's proposal with encouragement from Mrs. Fainall.",
        "Arrives(ladyWishfort) ::: Lady Wishfort arrives.",
        "Wants(ladyWishfort, sirWilfullWitwoud) ::: Lady Wishfort wants Millamant to marry her nephew, Sir Wilfull Witwoud.",
        "Accuses(sirRowland, mirabell) ::: Sir Rowland accuses Mirabell of trying to sabotage their wedding.",
        "Agrees(ladyWishfort, marriageContract) ::: Lady Wishfort agrees to let Sir Rowland bring a marriage contract that night.",
        "",
        "Conclusion:",
        "∃x (StrongWilled(x) ∧ Discuss(mirabell, conditions) ∧ Accept(millamant, mirabell)) ::: There exists a strong-willed person who discusses conditions and accepts a marriage proposal."
      ]
    },
    {
      "id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "Consent(a_1, a_4) ::: Lady Wishfort gives her consent to Mirabell.",
        "SavesFortuneAndHonour(a_4, a_1) ::: Mirabell saves Lady Wishfort's fortune and honour.",
        "TransfersProperty(a_3, a_4, e) ::: Mrs. Fainall transfers her property to Mirabell by the contract.",
        "Blackmails(a_2, a_1) ::: Fainall blackmails Lady Wishfort.",
        "HasContract(a_4, e) ::: Mirabell has the contract.",
        "RestoresProperty(a_4, a_3) ::: Mirabell restores Mrs. Fainall's property to her possession.",
        "Marries(a_4, a_8) ::: Mirabell marries Millamant.",
        "HasInheritance(a_4, c) ::: Mirabell has the £6000 inheritance.",
        "",
        "Premises:",
        "Consent(a_1, a_4) → SavesFortuneAndHonour(a_4, a_1) ::: Lady Wishfort's consent to the marriage is conditional on Mirabell saving her fortune and honour.",
        "TransfersProperty(a_3, a_4, e) ::: Mrs. Fainall's property is transferred to Mirabell by the contract.",
        "Blackmails(a_2, a_1) ::: Fainall blackmails Lady Wishfort.",
        "HasContract(a_4, e) ::: Mirabell has the contract.",
        "RestoresProperty(a_4, a_3) ::: Mirabell restores Mrs. Fainall's property to her possession.",
        "Marries(a_4, a_8) ::: Mirabell marries Millamant.",
        "HasInheritance(a_4, c) ::: Mirabell has the £6000 inheritance."
      ]
    }
  ],
  "2c5f448df18172babaac38806e1fb699a8baf65b": [
    {
      "id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Expecting(x) ::: x expects fine company for tea.",
        "Fetches(x, y) ::: x fetches y indoors.",
        "Washes(x) ::: x is washed.",
        "Dresses(x, y) ::: x dresses y in clothing.",
        "Naughty(x) ::: x is very naughty.",
        "Scratches(x, y) ::: x scratches y.",
        "DressesIn(x, y) ::: x is dressed in y.",
        "Fat(x) ::: x is fat.",
        "BurstsButtons(x) ::: x bursts several buttons.",
        "SewsBackOn(x, y) ::: x sews y back on.",
        "",
        "Premises:",
        "Expecting(a_1) ::: Tabitha expects \"fine company\" for tea.",
        "Fetches(a_1, a_0) ::: Tabitha fetches the children indoors.",
        "Washes(a_0) ::: The children are washed.",
        "Dresses(a_1, a_0) ::: Tabitha dresses the children before her friends arrive.",
        "Naughty(a_2) ::: Tom is \"very naughty.\"",
        "Scratches(a_2, a_1) ::: Tom scratches his mother while she grooms him.",
        "DressesIn(a_1, cleanPinafores) ∧ DressesIn(a_1, tuckers) ∧ DressesIn(a_1, elegantUncomfortableClothes) ::: Tabitha dresses Moppet and Mittens in clean pinafores and tuckers, and Tom in \"all sorts of elegant uncomfortable clothes.\"",
        "Fat(a_2) ::: Tom is fat.",
        "BurstsButtons(a_2) ::: Tom bursts several buttons.",
        "SewsBackOn(a_1, buttons) ::: Tabitha sews the buttons back on again."
      ]
    },
    {
      "id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden.",
        "KeepsClean(b_1) ::: The kittens keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: The kittens keep away from the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: Tom's sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of Tom's buttons burst.",
        "",
        "Premises:",
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party.",
        "KeepsClean(b_1) ::: She tells them to keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: She tells them to keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens soon have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall and loses some of his clothing in the ascent.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: His sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of his buttons burst."
      ]
    },
    {
      "id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "PuddleDuck(x) ::: x is a Puddle-duck.",
        "Kittens(x) ::: x is a kitten.",
        "Dresses(x, y) ::: x dresses y.",
        "Clothing(x) ::: x is an article of clothing.",
        "Approaches(x, y) ::: x approaches y.",
        "Discovers(x, y) ::: x discovers y.",
        "Smacks(x, y) ::: x smacks y.",
        "TakesBack(x, y) ::: x takes y back.",
        "FitToBeSeen(x) ::: x is fit to be seen.",
        "Affronted(x) ::: x is affronted.",
        "",
        "Premises:",
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ Dresses(jemima, clothing) ∧ Dresses(rebeccah, clothing) ::: Jemima Puddle-duck and Rebeccah put on some of the dropped clothing.",
        "Kittens(kittens) ∧ ¬Clothing(kittens) ∧ Descends(kittens, wall) ::: The kittens lose the rest of their clothing descending the wall.",
        "Dresses(moppet, tom) ∧ PicksUp(mrDrake, clothing) ∧ Dresses(mrDrake, clothing) ::: Moppet invites Mr. Drake Puddle-duck to help dress Tom, and he picks up various articles of Tom's clothing and puts them on himself.",
        "Approaches(tabitha, kittens) ∧ Discovers(tabitha, kittens) ∧ Smacks(tabitha, kittens) ∧ TakesBack(tabitha, kittens) ::: Tabitha approaches and discovers her three children with no clothes on, smacks them, and takes them back to the house.",
        "¬FitToBeSeen(kittens) ∧ Affronted(tabitha) ::: Tabitha is affronted because her children are not fit to be seen.",
        "",
        "Conclusion:",
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ PuddleDuck(mrDrake) ::: Jemima Puddle-duck, Rebeccah, and Mr. Drake are all Puddle-ducks."
      ]
    },
    {
      "id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Sends(x, y) ::: x sends y.",
        "InBedWithMeasles(x) ::: x is in bed with the measles.",
        "Disturbs(x, y) ::: x disturbs y.",
        "Romp(x) ::: x romps around.",
        "InDisorder(x) ::: x is in complete disorder.",
        "Promises(x, y) ::: x promises y.",
        "LookingFor(x, y) ::: x is looking for y.",
        "Lost(x, y) ::: x has lost y.",
        "",
        "Premises:",
        "Sends(a_1, b_1) ::: Tabitha sends her kittens upstairs.",
        "InBedWithMeasles(b_1) ::: The kittens are in bed with the measles.",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the dignity and repose of the tea party.",
        "Romp(b_1) ::: The playful kittens romp in the bedroom.",
        "InDisorder(c_1) ::: The bedroom is in complete disorder.",
        "Promises(a_0, \"larger book about Tom\") ::: The author promises the reader she will make a larger book about Tom some day.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens.",
        "Lost(b_1, \"kittens' clothing\") ::: The Puddle-ducks have lost the kittens' clothing in a pond.",
        "",
        "Conclusion:",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the tea party.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens."
      ]
    }
  ],
  "35592c2abea624d315c5171d67ab5e14794ca071": [
    {
      "id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "ExtremeSportAthlete(x) ::: x is an extreme sport athlete.",
        "Traversing(x, y) ::: x is traversing location y.",
        "Jump(x, y) ::: x jumps onto y.",
        "Overshoot(x, y) ::: x overshoots the landing on y.",
        "FallsToDeath(x) ::: x falls to his death.",
        "",
        "Premises:",
        "ExtremeSportAthlete(Johnny) ∧ ExtremeSportAthlete(Jeff) ::: Johnny Utah and Jeff are extreme sport athletes.",
        "Traversing(Johnny, ridgeline) ∧ Traversing(Jeff, ridgeline) ::: Johnny and Jeff are traversing a steep ridgeline on motorbikes.",
        "Jump(Jeff, stoneColumn) ∧ Overshoot(Jeff, stoneColumn) ::: Jeff jumps onto a lone stone column and overshoots the landing.",
        "FallsToDeath(Jeff) ::: Jeff falls to his death.",
        "",
        "Conclusion:",
        "FallsToDeath(Jeff) ::: Jeff falls to his death after overshooting the landing."
      ]
    },
    {
      "id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "FBI_Agent_Candidate(x) ::: x is an FBI agent candidate.",
        "Attends(x, y) ::: x attends event y.",
        "Heist(x) ::: x is a heist.",
        "Steal(x, y) ::: x steals y.",
        "EscapeByParachute(x) ::: x escapes by parachute.",
        "Unload(x, y) ::: x unloads y.",
        "Disappear(x, y) ::: x disappears into location y.",
        "Research(x, y) ::: x conducts research on y.",
        "Complete(x, y) ::: x completes ordeal y.",
        "Attempt(x, y) ::: x attempts ordeal y.",
        "Help(x, y) ::: x gets help from y.",
        "Surf(x, y) ::: x surfs wave y.",
        "FieldAgent(x, y) ::: x is a field agent for y.",
        "",
        "Premises:",
        "FBI_Agent_Candidate(utah) ::: Utah is an FBI agent candidate.",
        "Attends(utah, briefing) ::: Utah attends a briefing on a skyscraper heist.",
        "Heist(skyscraper_heist) ::: The event is a heist involving a skyscraper.",
        "Steal(criminals, diamonds) ::: The criminals steal diamonds.",
        "EscapeByParachute(criminals) ::: The criminals escape by parachute.",
        "Heist(mexico_heist) ::: A similar heist happens over Mexico.",
        "Unload(criminals, millions_of_dollars) ::: The criminals unload millions of dollars in bills.",
        "Disappear(criminals, cave_of_swallows) ::: The criminals disappear into the Cave of Swallows.",
        "Research(utah, heists) ::: Utah's research concludes that the heists were done by the same men.",
        "Complete(criminals, eight_ordeals) ::: The criminals are attempting to complete the Ozaki 8.",
        "Attempt(criminals, fourth_ordeal) ::: They will attempt the fourth ordeal.",
        "RareSeaWavePhenomenon(france) ::: The fourth ordeal is on a rare sea wave phenomenon in France.",
        "FieldAgent(pappas, fbi) ::: Pappas is a field agent for the FBI.",
        "Help(utah, others) ::: Utah gets help from others.",
        "Surf(utah, tall_tube_wave) ::: Utah surfs the tall tube wave.",
        "",
        "Conclusion:",
        "Attempt(criminals, eight_ordeals) ::: The criminals are attempting to complete the Ozaki 8 by performing extreme ordeals."
      ]
    },
    {
      "id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "Surfer(x) ::: x is a surfer.",
        "Faints(x) ::: x faints.",
        "Rescues(x, y) ::: x rescues y.",
        "WakesUp(x, y) ::: x wakes up with y.",
        "AcquaintedWith(x, y) ::: x gets acquainted with y.",
        "InitiationFight(x, y) ::: x gives y an initiation fight.",
        "AcceptedInCircle(x, y) ::: x is accepted in y's circle.",
        "TravelTo(x, y) ::: x travels to y.",
        "SucceedInAttempt(x) ::: x succeeds in their attempt.",
        "Climbs(x, y) ::: x climbs y.",
        "ExtendsLine(x) ::: x extends his line.",
        "FallsToDeath(x) ::: x falls to his death.",
        "ExperiencesDepression(x) ::: x experiences depression.",
        "",
        "Premises:",
        "Rescues(a_2, a_1) ::: The other surfer rescues Utah.",
        "WakesUp(a_1, a_2) ::: Utah wakes up aboard a yacht with Bodhi.",
        "AcquaintedWith(a_1, a_4) ::: Utah gets acquainted with Samsara.",
        "InitiationFight(a_2, a_1) ::: Bodhi gives Utah an initiation fight.",
        "AcceptedInCircle(a_1, a_2) ::: Utah is accepted into Bodhi's circle after the initiation fight.",
        "TravelTo(a_1, b_0) ::: They travel to the Alps for the next ordeal.",
        "SucceedInAttempt(a_1) ::: The four succeed in their attempt.",
        "Climbs(a_1, c_0) ::: They climb the snow peaks for the sixth ordeal.",
        "ExtendsLine(a_1) ::: Utah decides to extend his line.",
        "FallsToDeath(a_3) ::: Chowder slips and falls to his death.",
        "ExperiencesDepression(a_1) ::: Utah experiences depression after Chowder's death."
      ]
    },
    {
      "id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Knew(x, y) ::: x knew y when they were young.",
        "GaveHome(x, y) ::: x gave y a home.",
        "CompletedOrdeal(x) ::: x completed his third ordeal.",
        "DidNotDie(x) ::: x did not die attempting the ordeal.",
        "KilledByWhalingShip(x) ::: x was killed by a whaling ship.",
        "TryingToSave(x, y) ::: x was trying to save y.",
        "DecidedNotToTellTruth(x) ::: x decided not to tell the truth of his story.",
        "FinishedWhatStarted(x, y) ::: x finished what y started.",
        "",
        "Premises:",
        "Knew(samsara, ozaki) ∧ Knew(bodhi, ozaki) ::: Samsara and Bodhi both knew Ono Ozaki when they were young.",
        "GaveHome(ozaki, samsara) ::: Ozaki gave Samsara a home after her parents died in an avalanche accident.",
        "CompletedOrdeal(ozaki) ::: Ozaki actually completed his third ordeal, as was widely believed.",
        "¬DidNotDie(ozaki) ∧ KilledByWhalingShip(ozaki) ::: He did not die attempting the ordeal, but was actually killed by a whaling ship crashing into his boat.",
        "TryingToSave(ozaki, humpbackWhales) ::: Ozaki was trying to save humpback whales.",
        "DecidedNotToTellTruth(bodhi) ::: Bodhi decided not to tell the truth of his story.",
        "FinishedWhatStarted(bodhi, ozaki) ::: Bodhi finished what Ozaki started."
      ]
    },
    {
      "id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "Detonates(x, y) ::: x detonates explosives y.",
        "Chases(x, y) ::: x chases y.",
        "Tripped(x, y) ::: x trips y.",
        "Escapes(x) ::: x escapes.",
        "FreezesAssets(x, y) ::: x freezes the assets of y.",
        "PlansToRob(x, y) ::: x plans to rob y.",
        "Intercepts(x, y) ::: x intercepts y.",
        "ResultsIn(x, y) ::: x results in y.",
        "Shoots(x, y) ::: x shoots y.",
        "RevealedAs(x, y) ::: x is revealed to be y.",
        "",
        "Premises:",
        "Detonates(bodhi, explosives) ::: Bodhi detonates explosives.",
        "Chases(utah, bodhi) ::: Utah chases Bodhi.",
        "Tripped(utah, bike) ::: Utah trips Bodhi's bike.",
        "Escapes(bodhi) ::: Bodhi escapes.",
        "FreezesAssets(fbi, bodhi's sponsors) ::: The FBI freezes Bodhi's sponsors' assets.",
        "PlansToRob(bodhi, italian bank) ::: Bodhi plans to rob a nearby Italian bank.",
        "Intercepts(utah, group) ::: Utah and the police intercept the group.",
        "ResultsIn(crossfire, kills(roaches)) ::: The crossfire results in the death of Roach.",
        "Chases(utah, group) ::: Utah chases the group.",
        "Shoots(utah, one of them) ::: Utah shoots one of the group members.",
        "RevealedAs(one of them, samsara) ::: One of the group members is revealed to be Samsara.",
        "",
        "Conclusion:",
        "PlansToRob(bodhi, italian bank) → FreezesAssets(fbi, bodhi's sponsors) ::: Bodhi's plan to rob the bank is linked to the actions of the FBI freezing his sponsors' assets."
      ]
    },
    {
      "id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 5,
      "fols": [
        "Predicates:",
        "Location(x) ::: x is a location.",
        "ClimbingEvent(x) ::: x is an event of solo rock climbing.",
        "WaterfallLeap(x) ::: x is an event of leaping down a waterfall.",
        "GiantWave(x) ::: x is an event of facing a giant wave.",
        "Career(x) ::: x is a career.",
        "FBI(x) ::: x is part of the FBI.",
        "AttemptSurf(x, y) ::: x attempts to surf y.",
        "CatchesUp(x, y) ::: x catches up to y.",
        "FallsToDeath(x) ::: x falls to his death.",
        "RedoOrdeal(x) ::: x has to redo an ordeal.",
        "CompletesOrdeal(x) ::: x completes an ordeal.",
        "Knows(x, y) ::: x knows y.",
        "Chases(x, y) ::: x chases y.",
        "Engulfs(x, y) ::: x engulfs y.",
        "",
        "Premises:",
        "Location(AngelFalls) ∧ Location(Venezuela) ::: Angel Falls is a location in Venezuela.",
        "ClimbingEvent(soloRockClimbing) ::: Solo rock climbing is an event.",
        "WaterfallLeap(waterfallLeap) ::: Leaping down the waterfall is an event.",
        "GiantWave(giantWave) ::: Facing a giant wave is an event.",
        "Career(utah) ∧ FBI(utah) ::: Utah continues his career in the FBI.",
        "CatchesUp(utah, bodhi) ::: Utah catches up to Bodhi.",
        "FallsToDeath(grommet) ::: Grommet falls to his death.",
        "Chases(utah, grommet) ::: Utah chases Grommet on the climb.",
        "CompletesOrdeal(bodhi) ::: Bodhi completes what would have been the last ordeal.",
        "RedoOrdeal(bodhi) ::: Bodhi has to redo the fourth ordeal.",
        "Knows(utah, bodhi) ::: Utah knows that Bodhi will not come back after attempting to surf the wave.",
        "AttemptSurf(bodhi, giantWave) ::: Bodhi attempts to surf the giant wave.",
        "Engulfs(giantWave, bodhi) ::: The giant wave engulfs Bodhi.",
        "",
        "Conclusion:",
        "¬Returns(bodhi) ::: Bodhi does not return after attempting to surf the wave."
      ]
    }
  ],
  "35891de62bab83d5b312ddeb835c7e0b245e3282": [
    {
      "id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Wounded(dean) ::: Dean Keaton is badly wounded.",
        "Confronted(dean, keyser) ::: Dean Keaton is confronted by the mysterious figure called \"Keyser\".",
        "Killed(dean, keyser) ::: Dean Keaton is killed by the mysterious figure.",
        "SetFire(ship) ::: The ship is set on fire.",
        "Docked(ship, sanPedroBay) ::: The ship is docked in San Pedro Bay.",
        "",
        "Premises:",
        "Wounded(dean) ::: The film opens with criminal Dean Keaton lying badly wounded.",
        "Confronted(dean, keyser) ::: He is confronted by a mysterious figure whom he calls \"Keyser\".",
        "Killed(dean, keyser) ::: Keyser shoots Dean Keaton dead.",
        "SetFire(ship) ::: Keyser sets fire to the ship.",
        "Docked(ship, sanPedroBay) ::: The ship is docked in the San Pedro Bay."
      ]
    },
    {
      "id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "Survivor(x) ::: x is a survivor of the bloodbath on the ship.",
        "Mobster(x) ::: x is a mobster.",
        "Hospitalized(x) ::: x is hospitalized.",
        "ConArtist(x) ::: x is a con artist.",
        "CerebralPalsy(x) ::: x has cerebral palsy.",
        "Interrogates(x, y) ::: x interrogates y.",
        "Describes(x, y) ::: x describes y.",
        "Criminal(x) ::: x is a criminal.",
        "PartOfGroup(x, g) ::: x is part of group g.",
        "Event(x, y) ::: x is an event that leads to y.",
        "",
        "Premises:",
        "Survivor(arkosh) ∧ Mobster(arkosh) ∧ Hospitalized(arkosh) ::: Arkosh Kovash is a Hungarian mobster hospitalized with severe burns.",
        "Survivor(verbal) ∧ ConArtist(verbal) ∧ CerebralPalsy(verbal) ::: Roger \"Verbal\" Kint is a con artist with cerebral palsy.",
        "Interrogates(kujan, verbal) ::: Customs agent Dave Kujan interrogates Verbal.",
        "Describes(verbal, story) ::: Verbal describes the events that led him and four other criminals onto the ship.",
        "∃x (Criminal(x) ∧ PartOfGroup(x, group)) ::: There are criminals who are part of a group.",
        "Event(story, ship) ::: The story involves events that led to the situation on the ship.",
        "",
        "Conclusion:",
        "Survivor(arkosh) ∧ Survivor(verbal) ::: Arkosh Kovash and Roger \"Verbal\" Kint are the survivors of the bloodbath on the ship."
      ]
    },
    {
      "id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "Arrested(x, y) ::: x was arrested on charge y.",
        "Robbed(x, y) ::: x robbed y.",
        "Fenced(x, y) ::: x fenced stolen goods with y.",
        "Contacted(x, y) ::: x contacted y.",
        "OfferedJob(x, y, z) ::: x offered y a job to z.",
        "Transporting(x, y) ::: x is transporting y.",
        "Competing(x, y) ::: x is competing with y.",
        "",
        "Premises:",
        "Arrested(a_2, trumped_up_hijacking_charge) ::: Verbal and the other criminals were arrested on supposedly a trumped-up hijacking charge.",
        "Robbed(a_0, corrupt_cops) ::: Led by Keaton, they robbed a group of corrupt cops.",
        "Fenced(a_0, Redfoot) ::: They went to California to fence the stolen jewels with a criminal named Redfoot.",
        "Contacted(Kobayashi, a_0) ::: A lawyer named Kobayashi contacted them.",
        "OfferedJob(Keyser_Söze, a_0, invade_ship_and_destroy_cocaine) ::: Keyser Söze offered the group of criminals a job to invade a ship and destroy the cocaine being transported by the Argentinian drug dealers.",
        "Transporting(argentinian_drug_dealers, cocaine) ::: The Argentinian drug dealers were transporting cocaine.",
        "Competing(Keyser_Söze, argentinian_drug_dealers) ::: Keyser Söze was competing with the Argentinian drug dealers."
      ]
    },
    {
      "id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Murdered(x) ::: x has murdered his own family.",
        "Massacred(x) ::: x has massacred a group of people.",
        "Underground(x) ::: x has gone underground.",
        "FearsomeLegend(x) ::: x is a fearsome urban legend.",
        "Tells(x, y) ::: x tells y about something.",
        "BusinessThroughUnderlings(x) ::: x does business only through underlings.",
        "",
        "Premises:",
        "Tells(a_2, a_1) ::: Verbal tells Kujan about Söze's legend.",
        "Murdered(söze) ::: Söze has murdered his own family after they were attacked by a gang of Hungarian criminals.",
        "Massacred(söze) ::: Söze has massacred the Hungarians and everyone they held dear.",
        "Underground(söze) ::: Söze has gone underground and has never been seen again.",
        "BusinessThroughUnderlings(söze) ::: Söze does business only through underlings who do not know for whom they are working.",
        "FearsomeLegend(söze) ::: Söze is a fearsome urban legend, \"a spook story that criminals tell their kids at night.\""
      ]
    },
    {
      "id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "BailedOnGroup(x) ::: x bailed on the group.",
        "GaveLocation(x, y) ::: x gave y a location.",
        "TriedToKill(x, y) ::: x tried to kill y.",
        "StrongArmed(x, y) ::: x strong-armed y.",
        "PerformedHeist(x) ::: x performed the heist.",
        "ThreatenedLovedOnes(x) ::: x threatened their loved ones.",
        "StakedOut(x, y) ::: x staked out y.",
        "Killed(x, y) ::: x killed y.",
        "FoundDrugsOnBoard(x) ::: x found drugs on board.",
        "KilledByUnseenPerson(x) ::: x was killed by an unseen person.",
        "SetOnFire(x) ::: x was set on fire.",
        "LookedOn(x, y) ::: x looked on at y.",
        "",
        "Premises:",
        "BailedOnGroup(fenster) ::: Fenster had bailed on the group.",
        "GaveLocation(kobayashi, deadBodyLocation) ::: Kobayashi gave them a location at which to find their compatriot's dead body.",
        "TriedToKill(group, kobayashi) ::: They tried to kill Kobayashi.",
        "StrongArmed(kobayashi, group) ::: Kobayashi strong-armed them into performing the heist by threatening their loved ones.",
        "StakedOut(group, ship) ::: They staked out the ship.",
        "Killed(group, argentinianGangsters) ::: They killed several Argentinian gangsters.",
        "Killed(group, hungarianGangsters) ::: They killed several Hungarian gangsters.",
        "¬FoundDrugsOnBoard(group) ::: They found no drugs on board.",
        "Killed(mcmanus, unseenPerson) ::: McManus was killed by an unseen person.",
        "Killed(hockney, unseenPerson) ::: Hockney was killed by an unseen person.",
        "Killed(lockedMan, unseenPerson) ::: The man locked aboard the ship was killed by an unseen person.",
        "Killed(keaton, unseenPerson) ::: Keaton was killed by an unseen person.",
        "SetOnFire(ship) ::: The ship was set on fire.",
        "LookedOn(verbal, ship) ::: Verbal looked on as the ship was set on fire."
      ]
    },
    {
      "id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 5,
      "fols": [
        "Predicates:",
        "ImplicatedInMurder(x, y) ::: x is implicated in the murder of y.",
        "ConnectedToEvents(x, y) ::: x's murder is connected to the events surrounding y.",
        "ReleaseContingentOn(x, y) ::: x's release is contingent upon the posting of y.",
        "Testify(x) ::: x testifies in court.",
        "Idea(x, y) ::: x is the idea of y.",
        "",
        "Premises:",
        "ImplicatedInMurder(keaton, arturoMarquez) ::: Keaton is implicated in the murder of Arturo Marquez.",
        "ConnectedToEvents(edieFinneran, soze) ::: Edie Finneran's murder is connected to the events surrounding Söze.",
        "ReleaseContingentOn(verbal, bond) ::: Verbal's release is contingent upon the posting of his bond.",
        "¬Testify(verbal) ::: Verbal refuses to testify in court.",
        "Idea(keaton, plan) ::: The entire plan was Keaton's idea."
      ]
    },
    {
      "id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 6,
      "fols": [
        "Predicates:",
        "Fabricated(x, y) ::: x's story is fabricated from details found in y's office.",
        "Identical(x, y) ::: x's appearance is identical to y's appearance.",
        "Misses(x, y) ::: x misses y.",
        "Disappears(x, y) ::: x disappears into a vehicle driven by y.",
        "Flexes(x, y) ::: x flexes y.",
        "",
        "Premises:",
        "Fabricated(b_1, a_1) ::: Verbal's story is fabricated from details found in Kujan's office.",
        "Identical(a_2, a_3) ::: Verbal's appearance is identical to the police sketch of Söze.",
        "Misses(a_1, a_2) ::: Kujan misses Verbal by moments.",
        "Disappears(a_2, \"Kobayashi\") ::: Verbal disappears into a car driven by Kobayashi.",
        "Flexes(a_2, f) ::: Verbal flexes his supposedly withered hand."
      ]
    }
  ],
  "42b6d4260bbc83d7d8343779d34e96a067dfaad4": [
    {
      "id": "42b6d4260bbc83d7d8343779d34e96a067dfaad4",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "BountyHunter(x) ::: x is a bounty hunter.",
        "DisguisedAs(x, y) ::: x is disguised as y.",
        "Infiltrates(x, y) ::: x infiltrates y.",
        "Fights(x, y) ::: x fights y.",
        "Defeats(x, y) ::: x defeats y.",
        "LeadsTo(x, y) ::: x could lead to y.",
        "DarkSide(x) ::: x is the Dark Side.",
        "FatherOf(x, y) ::: x is the father of y.",
        "TwinSisterOf(x, y) ::: x is the twin sister of y.",
        "Captured(x) ::: x is captured.",
        "Rescued(x) ::: x is rescued.",
        "GroupEscape(x) ::: x is part of a group that escapes.",
        "",
        "Premises:",
        "DisguisedAs(a_3, bounty hunter) ∧ Infiltrates(a_3, Jabba's palace) ::: Leia is a bounty hunter disguised to infiltrate Jabba's palace.",
        "Fights(a_2, a_5) ::: Luke must fight Vader again to defeat the Empire.",
        "LeadsTo(anger(a_2), DarkSide(a_2)) ::: Luke's anger could lead him to the Dark Side.",
        "FatherOf(a_5, a_2) ::: Anakin is the father of Luke.",
        "TwinSisterOf(a_3, a_2) ::: Leia is Luke's twin sister.",
        "Captured(a_4) ∧ Rescued(a_4) ::: Han is captured and later rescued.",
        "GroupEscape(b_0) ::: The group escapes.",
        "",
        "Conclusion:",
        "BountyHunter(a_3) ∧ DisguisedAs(a_3, bounty hunter) ∧ Infiltrates(a_3, Jabba's palace) ::: Leia is a bounty hunter disguised to infiltrate Jabba's palace.",
        "Fights(a_2, a_5) ::: Luke must fight Vader again to defeat the Empire.",
        "LeadsTo(anger(a_2), DarkSide(a_2)) ::: Luke's anger could lead him to the Dark Side."
      ]
    },
    {
      "id": "42b6d4260bbc83d7d8343779d34e96a067dfaad4",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "Constructing(c_1) ::: The Death Star is being constructed.",
        "Supervised(c_1, a_5) ::: The Emperor supervises the construction of the Death Star.",
        "Protected(c_1) ::: The Death Star is protected by an energy shield.",
        "Leads(a_4, b_0) ::: Han leads a strike team.",
        "Destroys(b_0, c_1) ::: The strike team destroys the Death Star.",
        "Travels(a_4, c_2, f) ::: Han travels to Endor in a stolen Imperial shuttle.",
        "Encounters(a_2, b_1) ::: Luke encounters a tribe of Ewoks.",
        "GainsTrust(a_2, b_1) ::: Luke gains the trust of the Ewoks.",
        "Tells(a_2, a_3) ::: Luke tells Leia something.",
        "Surrenders(a_2, a_5) ::: Luke surrenders to Vader.",
        "Confronts(a_2, a_5) ::: Luke confronts Vader.",
        "Fails(a_2, a_5) ::: Luke fails to convince Vader.",
        "",
        "Premises:",
        "Constructing(c_1) ∧ Supervised(c_1, a_5) ::: The Empire has been constructing a second Death Star under the direct supervision of the Emperor.",
        "Protected(c_1) ::: The station is protected by an energy shield.",
        "Leads(a_4, b_0) ∧ Destroys(b_0, c_1) ::: Han leads a strike team to destroy the shield generator on the forest moon of Endor; doing so would allow a squadron of starfighters to destroy the Death Star.",
        "Travels(a_4, c_2, f) ::: The strike team, accompanied by Luke and Leia, travels to Endor in a stolen Imperial shuttle.",
        "Encounters(a_2, b_1) ∧ GainsTrust(a_2, b_1) ::: Luke and his companions encounter a tribe of Ewoks and gain their trust.",
        "Tells(a_2, a_3) ::: Luke tells Leia that she is his sister, Vader is their father, and he must go and confront him.",
        "Surrenders(a_2, a_5) ::: Luke surrenders to Imperial troops and is taken to Vader.",
        "Fails(a_2, a_5) ::: Luke tries to convince Vader to turn from the dark side of the Force, but fails."
      ]
    },
    {
      "id": "42b6d4260bbc83d7d8343779d34e96a067dfaad4",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "Jedi(x) ::: x is a Jedi.",
        "DarkSide(x) ::: x is on the dark side.",
        "Refuses(x, y) ::: x refuses to give in to y.",
        "Sacrifices(x, y) ::: x sacrifices himself to save y.",
        "Tortures(x, y) ::: x tortures y.",
        "Engages(x, y) ::: x engages in a duel with y.",
        "Overpowers(x, y) ::: x overpowers y.",
        "Severs(x, y) ::: x severs y.",
        "Dies(x) ::: x dies.",
        "Authorizes(x, y) ::: x authorizes y to take his place.",
        "HasSister(x) ::: x has a sister.",
        "RebelFleet(x) ::: x is part of the Rebel fleet.",
        "ImperialForces(x) ::: x is part of the Imperial forces.",
        "Counterattack(x, y) ::: x counterattacks y.",
        "Destroys(x, y) ::: x destroys y.",
        "LaunchesAssault(x, y) ::: x launches an assault on y.",
        "",
        "Premises:",
        "Refuses(luke, darkSide) ::: Luke refuses to give in to the dark side and declares himself a Jedi.",
        "Sacrifices(vader, luke) ::: Vader sacrifices himself to save Luke from the Emperor.",
        "Tortures(emperor, luke) ::: The Emperor tortures Luke with Force lightning.",
        "Engages(luke, vader) ::: Luke engages Vader in a lightsaber duel.",
        "Overpowers(luke, vader) ::: Luke overpowers Vader.",
        "Severs(luke, prostheticHand) ::: Luke severs Vader's prosthetic right hand.",
        "HasSister(luke) ::: Luke has a sister.",
        "Authorizes(emperor, luke) ::: The Emperor tells Luke to kill Vader and take his place.",
        "Counterattack(ewoks, imperialForces) ::: A surprise counterattack by the Ewoks allows the Rebels to battle the Imperials.",
        "Destroys(strikeTeam, shieldGenerator) ::: The strike team defeats the Imperial forces and destroys the shield generator.",
        "LaunchesAssault(rebelFleet, deathStar) ::: The Rebel fleet launches their assault on the Death Star.",
        "Dies(vader) ::: Vader dies peacefully after asking Luke to remove his mask.",
        "",
        "Conclusion:",
        "Jedi(luke) ::: Luke is a Jedi.",
        "RebelFleet(rebelFleet) ::: The Rebel fleet is part of the battle against the Death Star.",
        "ImperialForces(imperialForces) ::: The Imperial forces are defeated by the Rebels."
      ]
    },
    {
      "id": "42b6d4260bbc83d7d8343779d34e96a067dfaad4",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Brother(x, y) ::: x is the brother of y.",
        "Son(x, y) ::: x is the son of y.",
        "Redeemed(x) ::: x is redeemed.",
        "JediGhost(x) ::: x is a Jedi ghost.",
        "Leads(x, y) ::: x leads a group of y.",
        "Destroys(x, y) ::: x destroys y.",
        "Escapes(x, y) ::: x escapes on y.",
        "FliesOut(x, y) ::: x flies out of y.",
        "Reveals(x, y, z) ::: x reveals to y that z is true.",
        "Kisses(x, y) ::: x kisses y.",
        "Returns(x, y) ::: x returns to y.",
        "Cremates(x, y) ::: x cremates y.",
        "Celebrates(x) ::: x celebrates.",
        "Smiles(x) ::: x smiles.",
        "Sees(x, y) ::: x sees y.",
        "",
        "Premises:",
        "Brother(luke, leia) ::: Luke is the brother of Leia.",
        "Son(luke, anakin) ::: Luke is the son of Anakin.",
        "Redeemed(anakin) ::: Anakin is redeemed.",
        "JediGhost(obi_wan) ::: Obi-Wan is a Jedi ghost.",
        "JediGhost(yoda) ::: Yoda is a Jedi ghost.",
        "Leads(lando, rebel_ships) ::: Lando leads a group of Rebel ships.",
        "Destroys(lando, main_reactor) ::: Lando destroys the main reactor.",
        "Escapes(luke, shuttle) ::: Luke escapes on a shuttle.",
        "FliesOut(falcon, death_star) ::: The Falcon flies out of the Death Star.",
        "Celebrates(rebels) ::: The Rebels celebrate their victory over the Empire.",
        "Returns(luke, endor) ::: Luke returns to Endor.",
        "Cremates(luke, body) ::: Luke cremates his father's body on a funeral pyre.",
        "Reveals(leia, han, brother_of_luke) ::: Leia reveals to Han that Luke is her brother.",
        "Kisses(leia, han) ::: Leia kisses Han.",
        "Sees(luke, jedi_ghosts) ::: Luke sees the ghosts of Obi-Wan, Yoda, and the redeemed Anakin watching over them.",
        "Smiles(luke) ::: Luke smiles.",
        "",
        "Conclusion:",
        "Celebrates(rebels) ::: The Rebels celebrate their victory over the Empire.",
        "Sees(luke, {obi_wan, yoda, anakin}) ::: Luke sees the Jedi ghosts of Obi-Wan, Yoda, and the redeemed Anakin."
      ]
    }
  ],
  "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63": [
    {
      "id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Rescues(x, y) ::: x rescues y.",
        "Cannibal(x) ::: x is a cannibal.",
        "InCity(x, c) ::: x is in the city c.",
        "PreysOn(x, y) ::: x preys on y.",
        "LockedInHome(x) ::: x is locked securely in their home.",
        "MakesDeal(x, y) ::: x makes a deal with y.",
        "ProvidesFreshMeat(x, y) ::: x provides fresh meat to y.",
        "ProfitsFrom(x, y) ::: x profits from y.",
        "AttemptsToKill(x, y) ::: x attempts to kill y.",
        "Loves(x, y) ::: x loves y.",
        "MagicPotion(x) ::: x is a magic potion.",
        "NakedWoman(x) ::: x is a naked woman.",
        "DerangedLover(x) ::: x is a deranged lover.",
        "",
        "Premises:",
        "Rescues(a_1, a_3) ::: Conan rescues the naked woman and her deranged lover from cannibals.",
        "∀x (Cannibal(x) → PreysOn(x, a_0)) ::: All cannibals prey on travelers.",
        "∀x (InCity(x, c_1) → LockedInHome(x)) ::: The people of the city stay locked securely in their homes.",
        "∀x ∀y (MakesDeal(a_2, d) → ProvidesFreshMeat(a_2, d) ∧ ProfitsFrom(a_2, a_0)) ::: Aram Baksh makes a deal with the cannibals, providing them fresh meat while profiting from the belongings of his guests.",
        "∀x (NakedWoman(x) ∧ DerangedLover(y) ∧ Loves(y, x) ∧ MagicPotion(z) ∧ AttemptsToKill(a_1, a_2)) ::: The naked woman tried to secure her lover's affection via a love potion and they attempt to kill the high priest responsible for his madness."
      ]
    },
    {
      "id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "Captured(x) ::: x is captured in the attempt.",
        "Hypnotized(x) ::: x is forced via hypnotism.",
        "DancesBefore(x, y) ::: x dances before y.",
        "Dies(x) ::: x dies.",
        "Defeats(x, y) ::: x defeats y.",
        "Rescues(x, y) ::: x rescues y.",
        "Kills(x, y) ::: x kills y.",
        "Reveals(x, y) ::: x reveals y.",
        "Promises(x, y) ::: x promises y.",
        "TakesAntidote(x, y) ::: x takes an antidote to y.",
        "MistressTo(x, y) ::: x is the mistress to y.",
        "",
        "Premises:",
        "Captured(woman) ∧ Hypnotized(woman) ∧ DancesBefore(woman, highPriest) ∧ Dies(woman) ::: The woman is captured in the attempt, and forced via hypnotism to dance before the High priest until she dies.",
        "Defeats(conan, stranglerBaalPteor) ∧ Rescues(conan, woman) ∧ Kills(conan, highPriest) ::: Conan defeats the strangler Baal-pteor at his own game, rescues her, and kills the priest.",
        "Reveals(woman, nafertari) ∧ MistressTo(nafertari, jungir) ::: At the point of claiming his payment, she reveals that she is really Nafertari, mistress to the satrap of the city, Jungir Khan.",
        "TakesAntidote(nafertari, jungir) ∧ Promises(nafertari, positionAndWealth) ::: Taking an antidote to Jungir, she promises Conan position and wealth."
      ]
    },
    {
      "id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "Recognizes(x, y) ::: x recognizes y.",
        "TakesRevengeOn(x, y) ::: x takes revenge on y.",
        "CutsOutTongue(x, y) ::: x cuts out the tongue of y.",
        "ShearsOffBeard(x, y) ::: x shears off the beard of y.",
        "TurnsOverToCannibals(x, y) ::: x turns y over to the hungry cannibals.",
        "LeavesCity(x) ::: x leaves the city.",
        "HasGold(x) ::: x has gold.",
        "HasMagicRing(x) ::: x has the magic ring.",
        "DisplaysIrony(x) ::: x displays an ironic sense of humor.",
        "IntentToSell(x, y) ::: x intends to sell y to another interested party.",
        "",
        "Premises:",
        "Recognizes(conan, aramBaksh) ::: Conan recognized Aram Baksh almost immediately.",
        "TakesRevengeOn(conan, aramBaksh) ::: Conan takes revenge on the tavern owner Aram Baksh.",
        "CutsOutTongue(conan, aramBaksh) ::: Conan cuts out Aram Baksh's tongue.",
        "ShearsOffBeard(conan, aramBaksh) ::: Conan shears off Aram Baksh's beard.",
        "TurnsOverToCannibals(conan, aramBaksh) ::: Conan turns Aram Baksh over to the hungry cannibals.",
        "LeavesCity(conan) ::: Conan leaves the city.",
        "HasGold(conan) ::: Conan has gold.",
        "HasMagicRing(conan) ::: Conan has the magic ring that started the night's intrigues.",
        "DisplaysIrony(conan) ::: Conan's actions display an ironic sense of humor.",
        "IntentToSell(conan, magicRing) ::: Conan intends to sell the magic ring to another interested party."
      ]
    }
  ],
  "4e6e052732e90a9c127f6502feddee1a17301c14": [
    {
      "id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "PassiveProtagonist(x) ::: x is a passive protagonist.",
        "Age(x, y) ::: x is of age y.",
        "StaysAt(x, y) ::: x stays at the home of y.",
        "InResidence(x, y) ::: x is in residence with y.",
        "Devotion(x, y) ::: x has a deep devotion to y.",
        "Attention(x, y) ::: x showers y with attention.",
        "TakesAway(x, y) ::: x takes y away.",
        "",
        "Premises:",
        "PassiveProtagonist(lucy) ∧ Age(lucy, 14) ∧ StaysAt(lucy, mrsBretton) ::: Lucy Snowe is a famously passive protagonist, age 14, staying at the home of her godmother Mrs. Bretton.",
        "InResidence(mrsBretton, johnGraham) ∧ InResidence(mrsBretton, paulina) ::: Mrs. Bretton has her son John Graham Bretton and a young visitor Paulina Home in residence.",
        "Devotion(paulina, johnGraham) ∧ Attention(johnGraham, paulina) ::: Polly develops a deep devotion to Graham, who showers her with attention.",
        "TakesAway(father, paulina) ::: Polly's visit is cut short when her father arrives to take her away."
      ]
    },
    {
      "id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "Leaves(x, y) ::: x leaves y.",
        "HiredAs(x, y) ::: x is hired as y.",
        "Content(x) ::: x feels content.",
        "Caregiver(x) ::: x is a caregiver.",
        "RheumaticCrippled(x) ::: x is a rheumatic crippled person.",
        "FamilyTragedy(x) ::: x experiences a family tragedy.",
        "HomeLess(x) ::: x is without a home.",
        "MeansLess(x) ::: x is without means.",
        "",
        "Premises:",
        "Leaves(lucy, mrsBretton) ::: Lucy leaves Mrs. Bretton's home a few weeks after Polly's departure.",
        "FamilyTragedy(lucy) ∧ HomeLess(lucy) ∧ MeansLess(lucy) ::: An unspecified family tragedy leaves Lucy without family, home, or means.",
        "HiredAs(lucy, caregiver) ∧ RheumaticCrippled(missMarchmont) ::: Lucy is hired as a caregiver by Miss Marchmont, a rheumatic crippled woman.",
        "Content(lucy) ::: Lucy feels content with her quiet lifestyle."
      ]
    },
    {
      "id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "RegainsEnergy(a_0) ::: Miss Marchmont regains all her energy.",
        "FeelsYoung(a_0) ::: Miss Marchmont feels young again.",
        "Shares(a_0, a_1) ::: Miss Marchmont shares her story with Lucy.",
        "SadLoveStory(a_0) ::: Miss Marchmont shares her sad love story.",
        "TreatBetter(a_0) ::: Miss Marchmont concludes that she should treat Lucy better.",
        "Believes(a_0, b_0) ::: Miss Marchmont believes that death will reunite her with her dead lover.",
        "Finds(a_1, a_0) ::: Lucy finds Miss Marchmont dead.",
        "Dead(a_0) ::: Miss Marchmont is dead.",
        "",
        "Premises:",
        "RegainsEnergy(a_0) ∧ FeelsYoung(a_0) ::: During an evening of dramatic weather changes, Miss Marchmont regains all her energy and feels young again.",
        "Shares(a_0, a_1) ∧ SadLoveStory(a_0) ::: She shares with Lucy her sad love story of 30 years previously.",
        "TreatBetter(a_0) ::: She concludes that she should treat Lucy better and be a better person.",
        "Believes(a_0, b_0) ::: She believes that death will reunite her with her dead lover.",
        "Finds(a_1, a_0) ∧ Dead(a_0) ::: The next morning, Lucy finds Miss Marchmont dead.",
        "¬(Dead(a_0) ∧ (TreatBetter(a_0) ∧ Believes(a_0, b_0))) ::: Miss Marchmont's death occurs after she expresses her beliefs and conclusions."
      ]
    },
    {
      "id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Leaves(x, y) ::: x leaves location y.",
        "Boards(x, y) ::: x boards a ship for destination y.",
        "TravelsTo(x, y) ::: x travels to location y.",
        "FindsEmployment(x, y) ::: x finds employment at location y.",
        "Teaches(x, y) ::: x teaches subject y.",
        "Minds(x, y) ::: x minds y (children).",
        "Thrives(x) ::: x thrives in the given situation.",
        "Surveillance(x, y) ::: x conducts surveillance on y.",
        "",
        "Premises:",
        "Leaves(a_0, English countryside) ::: Lucy leaves the English countryside.",
        "Boards(a_0, Labassecour) ::: Lucy boards a ship for Labassecour.",
        "TravelsTo(a_0, Villette) ::: Lucy travels to the city of Villette.",
        "FindsEmployment(a_0, Mme_Beck's_boarding_school) ::: Lucy finds employment as a bonne at Mme. Beck's boarding school for girls.",
        "Teaches(a_0, English) ::: Lucy is hired to teach English at the school.",
        "Minds(a_0, Mme_Beck's_children) ::: Lucy has to mind Mme. Beck's three children.",
        "Thrives(a_0) ::: Lucy thrives despite the situation.",
        "Surveillance(Mme_Beck, staff_and_students) ::: Mme. Beck conducts constant surveillance of the staff and students."
      ]
    },
    {
      "id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "Handsome(x) ::: x is a handsome person.",
        "Doctor(x) ::: x is a doctor.",
        "Visits(x, y) ::: x frequently visits y.",
        "Loves(x, y) ::: x loves y.",
        "RevealedAs(x, y) ::: x is revealed to be y.",
        "Concealed(x, y) ::: x has concealed y from the reader.",
        "CloseFriends(x, y) ::: x and y are close friends.",
        "ValuesFriendship(x, y) ::: x values her friendship with y highly.",
        "EmotionalReserve(x) ::: x has a usual emotional reserve.",
        "",
        "Premises:",
        "Handsome(drJohn) ∧ Doctor(drJohn) ∧ Visits(drJohn, school) ∧ Loves(drJohn, ginevra) ::: \"Dr. John\" is a handsome English doctor who frequently visits the school because of his love for Ginevra Fanshawe.",
        "RevealedAs(drJohn, johnGrahamBretton) ∧ Concealed(lucy, revealedAs(drJohn, johnGrahamBretton)) ::: \"Dr. John\" is later revealed to be John Graham Bretton, a fact that Lucy has known but has deliberately concealed from the reader.",
        "CloseFriends(lucy, drJohn) ::: After Dr. John discovers Ginevra's unworthiness, he turns his attention to Lucy, and they become close friends.",
        "ValuesFriendship(lucy, drJohn) ∧ EmotionalReserve(lucy) ::: Lucy values her friendship with Dr. John despite her usual emotional reserve."
      ]
    },
    {
      "id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 5,
      "fols": [
        "Predicates:",
        "Count(x) ::: x is a Count.",
        "InheritsTitle(x, y) ::: x inherits the title y.",
        "RenewsFriendship(x, y) ::: x renews friendship with y.",
        "FallsInLove(x, y) ::: x falls in love with y.",
        "Marries(x, y) ::: x marries y.",
        "",
        "Premises:",
        "InheritsTitle(father, \"de Bassompierre\") ::: Polly's father has inherited the title \"de Bassompierre\".",
        "Count(father) ::: Polly's father is now a Count.",
        "RenewsFriendship(polly, graham) ::: Polly and Graham renew their friendship.",
        "FallsInLove(polly, graham) ::: Polly and Graham fall in love.",
        "Marries(polly, graham) ::: Polly and Graham eventually marry."
      ]
    },
    {
      "id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 6,
      "fols": [
        "Predicates:",
        "Closer(x, y) ::: x becomes progressively closer to y.",
        "InLove(x, y) ::: x and y are in love.",
        "Irascible(x) ::: x is irascible.",
        "Autocratic(x) ::: x is autocratic.",
        "MaleChauvinist(x) ::: x is a male chauvinist.",
        "Relative(x, y) ::: x is a relative of y.",
        "",
        "Premises:",
        "Closer(lucy, paul) ::: Lucy becomes progressively closer to M. Paul Emanuel.",
        "Irascible(paul) ::: M. Paul Emanuel is irascible.",
        "Autocratic(paul) ::: M. Paul Emanuel is autocratic.",
        "MaleChauvinist(paul) ::: M. Paul Emanuel is a male chauvinist.",
        "Relative(paul, beck) ::: M. Paul Emanuel is a relative of Mme. Beck.",
        "InLove(lucy, paul) ::: Lucy and M. Paul Emanuel eventually fall in love."
      ]
    },
    {
      "id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 7,
      "fols": [
        "Predicates:",
        "Antagonists(x) ::: x is a group of conspiring antagonists.",
        "KeepsApart(x, y) ::: x keeps y apart from z.",
        "DeclaresLove(x, y) ::: x declares love for y.",
        "Arranges(x, y, z) ::: x arranges for y to do z.",
        "Headmistress(x) ::: x is a headmistress.",
        "Pensionnat(x) ::: x is a boarding school.",
        "",
        "Premises:",
        "Antagonists(group) ::: A group of conspiring antagonists exists.",
        "KeepsApart(group, mPaul) ∧ KeepsApart(group, lucy) ::: The group of antagonists keeps M. Paul and Lucy apart.",
        "DeclaresLove(mPaul, lucy) ::: M. Paul declares his love for Lucy before his departure.",
        "Arranges(mPaul, lucy, liveIndependently) ::: M. Paul arranges for Lucy to live independently as the headmistress of her own day school.",
        "Headmistress(lucy) ::: Lucy is the headmistress of her own day school.",
        "Pensionnat(expandedSchool) ::: Lucy later expands her day school into a pensionnat (boarding school)."
      ]
    },
    {
      "id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 8,
      "fols": [
        "Predicates:",
        "Encounter(x, y) ::: x has an encounter with y.",
        "Ghost(x) ::: x is a ghost.",
        "BuriedAlive(x) ::: x was buried alive.",
        "VowOfChastity(x) ::: x has broken a vow of chastity.",
        "SymbolicScene(x) ::: x is a highly symbolic scene.",
        "DestroysHabit(x) ::: x destroys the \"nun's\" habit.",
        "Disguise(x, y) ::: x is a disguise worn by y.",
        "ContributesToReputation(x, y) ::: x contributes substantially to the reputation of y.",
        "GothicNovel(x) ::: x is a gothic novel.",
        "",
        "Premises:",
        "∀x (Encounter(Lucy, x) ∧ Ghost(x) â§ BuriedAlive(x) â§ VowOfChastity(x)) ::: The figure of a nun is linked to the ghost of a nun buried alive for breaking her vow of chastity.",
        "SymbolicScene(nearEnd) ∧ DestroysHabit(Lucy) ::: Lucy’s actions regarding the \"nun's\" habit are significant to the plot.",
        "ContributesToReputation(episodesWithNun, gothicNovel) ::: The episodes with the nun contribute substantially to the novel's reputation as a gothic novel."
      ]
    },
    {
      "id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 9,
      "fols": [
        "Predicates:",
        "Ambiguous(x) ::: x is ambiguous.",
        "Hints(x, y) ::: x hints strongly that y is true.",
        "WantsFreeEnding(x) ::: x wants to leave the reader free to imagine a happy ending.",
        "Drowned(x) ::: x was drowned.",
        "DestroyedByStorm(x) ::: x was destroyed by a storm.",
        "HappiestYears(x, y) ::: x had the happiest years of y's life.",
        "",
        "Premises:",
        "Ambiguous(villette) ::: Villette's final pages are ambiguous.",
        "WantsFreeEnding(lucy) ::: Lucy says that she wants to leave the reader free to imagine a happy ending.",
        "Hints(lucy, destroyedByStorm(mPaulShip)) ::: Lucy hints strongly that M. Paul's ship was destroyed by a storm during his return journey from the West Indies.",
        "Hints(lucy, drowned(mEmanuel)) ::: Lucy hints strongly that M. Emanuel was drowned.",
        "HappiestYears(mEmanuel, 3) ::: M. Emanuel was away three years, which were the three happiest years of Lucy's life."
      ]
    },
    {
      "id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 10,
      "fols": [
        "Predicates:",
        "Describes(x, y) ::: x describes the concept y.",
        "IsAmbiguous(y) ::: y is ambiguous.",
        "IsPuzzle(y) ::: y is a puzzle.",
        "",
        "Premises:",
        "Describes(a_1, b_1) ::: Brontë described the ambiguity of the ending.",
        "IsAmbiguous(b_1) ::: The ambiguity of the ending is ambiguous.",
        "IsPuzzle(b_2) ::: The little puzzle is a puzzle."
      ]
    }
  ],
  "5328457f649b51410906d4d23b915f5147bee4ed": [
    {
      "id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Inherit(x, y) ::: x is set to inherit y.",
        "ChallengeWill(x, y) ::: x challenges the will of y.",
        "ReadyForResponsibility(x) ::: x is ready for the responsibility.",
        "WantsToTakeForSelf(x, y) ::: x wants to take y for himself.",
        "VictimOf(x, y) ::: x is a victim of y.",
        "Discuss(x, y) ::: x discusses y.",
        "",
        "Premises:",
        "Inherit(marie, motherAndDaughter) ::: Marie Clifton is set to inherit the \"mother and daughter\" diamonds.",
        "ChallengeWill(jay, willOf(marie)) ::: Jay Clifton challenges the will of Marie Clifton.",
        "¬ReadyForResponsibility(marie) ::: Marie Clifton is not ready for the responsibility (implied by Jay's claim).",
        "WantsToTakeForSelf(jay, motherAndDaughter) ::: Jay Clifton wants to take the diamonds for himself by challenging the will of Marie Clifton.",
        "Discuss(chad, sexCrimes) ::: Dr. Chad Johnson discusses sex crimes at the seminar.",
        "VictimOf(kristen, anonymousRapist) ::: Kristen Richards reveals she was a victim of an anonymous rapist many years before."
      ]
    },
    {
      "id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "NotWelcome(a_2, a_0) ::: Elena Sandoval is not welcome at Marie's birthday party.",
        "Comforts(a_3, a_2) ::: Jay comforts Elena Sandoval after the assault.",
        "Alleges(a_2, a_3) ::: Elena Sandoval alleges that Jay raped her.",
        "Testifies(a_1, a_2) ::: Chad testifies that Elena Sandoval was raped.",
        "",
        "Premises:",
        "NotWelcome(a_2, a_0) ::: Elena Sandoval is not welcome at Marie's birthday party.",
        "Comforts(a_3, a_2) ::: Jay comforts Elena Sandoval after the assault.",
        "Alleges(a_2, a_3) ::: Elena Sandoval alleges that Jay raped her.",
        "Testifies(a_1, a_2) ::: Chad testifies that Elena Sandoval was raped."
      ]
    },
    {
      "id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "Believes(x, y) ::: x believes y.",
        "PayOff(x, y) ::: x pays off y.",
        "Broke(x) ::: x is broke.",
        "Sell(x, y) ::: x sells y.",
        "RevokesClaim(x, y) ::: x revokes his claim to y.",
        "Custody(x, y) ::: x has custody of y.",
        "InRelationship(x, y) ::: x is in a relationship with y.",
        "Conspire(x, y) ::: x conspires with y.",
        "Collaborate(x, y) ::: x collaborates with y.",
        "",
        "Premises:",
        "Believes(marie, payOff(elena)) ::: Marie believes that Elena is doing this for money and tells Jay to pay her off.",
        "Broke(jay) ::: Jay admits that he's broke.",
        "Conspire(marie, jay) ::: Marie and Jay conspire to sell the diamonds to resolve their financial issues.",
        "Sell(marie, diamonds) ::: Marie suggests that they sell the diamonds.",
        "Agree(jay, sell(diamonds)) ::: Jay agrees to sell the diamonds.",
        "RevokesClaim(jay, will) ::: Jay revokes his claim to the will.",
        "Custody(marie, diamonds) ::: Marie has custody of the diamonds so she can sell them off.",
        "Collaborate(elena, marie, chad) ::: Elena, Marie, and Chad collaborate in a scheme to acquire the diamonds.",
        "InRelationship(elena, marie) ::: Elena is in a relationship with Marie.",
        "InRelationship(elena, chad) ::: Elena is in a relationship with Chad.",
        "InRelationship(marie, chad) ::: Marie is in a relationship with Chad."
      ]
    },
    {
      "id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Believes(x, y) ::: x believes y.",
        "Recant(x) ::: x recants her accusation.",
        "Threatens(x, y) ::: x threatens to kill y.",
        "SentToPrison(x) ::: x is sent to prison.",
        "SuspiciousOf(x, y) ::: x is suspicious of y's behavior.",
        "Search(x, y) ::: x searches y's trailer.",
        "GathersInformation(x, y) ::: x gathers information about y.",
        "FormsTestimony(x, y) ::: x forms her testimony based on y.",
        "Collaborating(x, y, z) ::: x, y, and z are collaborating.",
        "",
        "Premises:",
        "Believes(a_3, Recant(a_2)) ::: Jay believes that Elena will recant her accusation after being paid off.",
        "Testifies(a_2, Threatens(a_3, a_2)) ::: At the next court session, Elena testifies that Jay also threatened to kill her.",
        "SentToPrison(a_3) ::: Jay is sent to prison.",
        "SuspiciousOf(a_1, a_2) ::: Richards is now suspicious of Elena's behavior.",
        "Search(a_1, a_2) ::: Richards and Morrison search Elena's trailer.",
        "GathersInformation(a_2, a_4) ::: Elena has gathered information about Kristen's rape.",
        "FormsTestimony(a_2, GathersInformation(a_2, a_4)) ::: Elena's testimony is influenced by the information she gathered about Kristen's rape.",
        "Collaborating(a_2, a_0, a_3) ::: Marie, Elena, and Chad are suspected to be collaborating."
      ]
    },
    {
      "id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "Questioned(x, y) ::: x is questioned by y.",
        "Fears(x, y) ::: x fears y suspects him.",
        "TurnsOn(x, y) ::: x turns on y.",
        "Drugs(x, y) ::: x drugs y.",
        "Steals(x, y) ::: x steals y.",
        "Chases(x, y) ::: x gives chase to y.",
        "Kills(x, y) ::: x kills y.",
        "Learns(x, y) ::: x learns that y is fake.",
        "Caught(x, y) ::: x is caught by y.",
        "DealsWith(x, y) ::: x deals with y.",
        "",
        "Premises:",
        "Questioned(chad, richards) ∧ Fears(chad, richards) ::: Chad is questioned by Richards and fears they suspect him.",
        "TurnsOn(chad, marie) ∧ Drugs(chad, marie) ∧ Steals(chad, diamonds) ::: Chad turns on Marie, drugging her and stealing the diamonds.",
        "Chases(marie, chad) ∧ Chases(elena, chad) ::: Marie and Elena give chase, following Chad into the woods.",
        "Kills(marie, chad) ::: Marie kills Chad with a tire iron.",
        "Learns(marie, diamonds) ::: Marie learns that the diamonds are fake after Chad's death.",
        "Caught(elena, richards) ::: Elena, who is left to deal with Chad's body, is caught by Richards.",
        "",
        "Conclusion:",
        "Fears(chad, richards) ::: Chad fears that Richards suspects him.",
        "Steals(chad, diamonds) ::: Chad steals the diamonds.",
        "Kills(marie, chad) ::: Marie kills Chad."
      ]
    },
    {
      "id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 5,
      "fols": [
        "Predicates:",
        "WearsWire(x) ::: x wears a wire.",
        "GetsConfession(x, y) ::: x gets y to confess.",
        "ChargesLessened(x) ::: the charges against x will be lessened.",
        "Finds(x, y) ::: x finds y.",
        "Shoots(x, y) ::: x shoots y.",
        "Kills(x, y) ::: x kills y.",
        "Chases(x, y) ::: x chases y.",
        "HasDiamonds(x) ::: x has the diamonds.",
        "Plans(x, y) ::: x has a plan involving y.",
        "",
        "Premises:",
        "WearsWire(a_2) ∧ GetsConfession(a_2, a_3) âˆ’> ChargesLessened(a_2) ::: If Elena wears a wire and gets Marie to confess, the charges against Elena will be lessened.",
        "Finds(a_1, a_3) âˆ’> Shoots(a_1, a_3) ::: If Richards finds Marie, Richards may shoot Marie.",
        "Shoots(a_1, a_3) âˆ’> Kills(a_1, a_3) ::: If Richards shoots Marie, Richards may kill Marie.",
        "HasDiamonds(a_2) ∧ Chases(a_3, a_2) ::: Marie chases Elena with her own gun after Elena flees with the diamonds."
      ]
    },
    {
      "id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 6,
      "fols": [
        "Predicates:",
        "Mother(x, y) ::: x is the mother of y.",
        "Daughter(x, y) ::: x is the daughter of y.",
        "Raped(x, y) ::: x raped y.",
        "Revealed(x) ::: x is revealed in the end.",
        "Shows(x, y) ::: x shows y during the credits.",
        "Plan(x) ::: x is a plan.",
        "",
        "Premises:",
        "Mother(a_1, a_2) ::: Richards is the mother of Elena.",
        "Daughter(a_2, a_1) ::: Elena is the daughter of Richards.",
        "Raped(a_3, a_4) ::: Jay raped Kristen.",
        "Revealed(Events(c_0)) ::: It is revealed that Richards and Elena are mother and daughter.",
        "Shows(Credits(d_0), Scenes(d_1)) ::: During the credits, scenes are shown explaining how they managed to pull their plan off.",
        "Plan(c_1) ::: There is a plan that they managed to pull off.",
        "",
        "Conclusion:",
        "Mother(a_1, a_2) ∧ Daughter(a_2, a_1) ::: Richards and Elena are mother and daughter.",
        "Raped(a_3, a_4) ::: Jay was the man that raped Kristen in the past."
      ]
    }
  ],
  "55ac84541ede6e0f1106b2e4ab01a2bac2f21e39": [
    {
      "id": "55ac84541ede6e0f1106b2e4ab01a2bac2f21e39",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Wealthy(x) ::: x is a wealthy person.",
        "Bidder(x, y) ::: x is a bidder for y.",
        "Wins(x, y) ::: x wins y.",
        "Buys(x, y, z) ::: x buys y for z.",
        "Mutters(x, y) ::: x mutters y.",
        "Retires(x, y) ::: x retires to y.",
        "Uninhabited(x) ::: x is uninhabited.",
        "LocatedAt(x, y) ::: x is located at coordinates y.",
        "",
        "Premises:",
        "Uninhabited(spencerIsland) ::: Spencer Island is uninhabited.",
        "LocatedAt(spencerIsland, (32°15′N, 145°18′W)) ::: Spencer Island is located at coordinates 32°15′N 145°18′W.",
        "Wealthy(kolderup) ::: William W. Kolderup is a very wealthy San Franciscan.",
        "Bidder(kolderup, spencerIsland) ::: Kolderup is a bidder for Spencer Island.",
        "Bidder(taskinar, spencerIsland) ::: J. R. Taskinar is a bidder for Spencer Island.",
        "Wins(kolderup, auction) ::: Kolderup wins the auction.",
        "Buys(kolderup, spencerIsland, 4000000) ::: Kolderup buys Spencer Island for four million dollars.",
        "Mutters(taskinar, \"I will be avenged!\") ::: Taskinar mutters \"I will be avenged!\".",
        "Retires(taskinar, hotel) ::: Taskinar retires to his hotel."
      ]
    },
    {
      "id": "55ac84541ede6e0f1106b2e4ab01a2bac2f21e39",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "Idle(x) ::: x is idle.",
        "Age(x, y) ::: x is y years old.",
        "LivesWith(x, y) ::: x lives with y.",
        "Loves(x, y) ::: x loves y.",
        "UndertakesTour(x) ::: x undertakes a world tour.",
        "Sends(x, y, z) ::: x sends y on z.",
        "OnBoard(x, y) ::: x is on board y.",
        "CommandedBy(x, y) ::: x is commanded by y.",
        "AccompaniedBy(x, y) ::: x is accompanied by y.",
        "",
        "Premises:",
        "Idle(godfrey) ∧ Age(godfrey, 22) ::: Godfrey is an idle twenty-two-year-old.",
        "LivesWith(godfrey, kolderup) ∧ LivesWith(godfrey, phina) ::: Godfrey lives with Kolderup and Phina.",
        "Loves(godfrey, phina) ::: Godfrey has grown to love Phina.",
        "UndertakesTour(godfrey) ::: Godfrey undertakes a world tour before marrying Phina.",
        "Sends(kolderup, godfrey, seaVoyage) ::: Kolderup sends Godfrey on a sea voyage around the world.",
        "OnBoard(godfrey, dream) ::: Godfrey is on board one of Kolderup's steamships, the Dream.",
        "CommandedBy(dream, turcott) ::: The Dream is commanded by Captain Turcott.",
        "AccompaniedBy(godfrey, tartlet) ::: Godfrey is accompanied by his mentor, teacher, and dance instructor, Professor T. Artelett aka \"Tartlet\"."
      ]
    },
    {
      "id": "55ac84541ede6e0f1106b2e4ab01a2bac2f21e39",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "Awakened(a_1) ::: Godfrey is awakened.",
        "AbandonShip(a_1) ::: Godfrey is told to abandon ship.",
        "WashedAshore(a_1, b_1) ::: Godfrey is washed ashore on a deserted island.",
        "Finds(a_1, a_2) ::: Godfrey finds Tartlet.",
        "LearnToSurvive(a_1) ::: Godfrey learns to survive.",
        "OrganizeLife(a_1) ::: Godfrey organizes his life.",
        "FaceIntruders(a_1) ::: Godfrey faces hostile intruders.",
        "OvercomeObstacles(a_1) ::: Godfrey overcomes other obstacles.",
        "Rescue(a_1, a_3) ::: Godfrey rescues Carefinotu.",
        "JoinedBy(a_1, a_3) ::: Godfrey is joined by Carefinotu.",
        "DiscoverValue(a_1) ::: Godfrey discovers the value of independent effort.",
        "GainsPoise(a_1) ::: Godfrey gains poise.",
        "GainsCourage(a_1) ::: Godfrey gains courage.",
        "Rescued(c_1) ::: The marooned group is rescued.",
        "Returned(c_1, b_2) ::: The marooned group is returned to San Francisco.",
        "Reunited(a_1, a_4) ::: Godfrey is reunited with Phina.",
        "AgreeToMarry(a_1, a_4) ::: Godfrey and Phina agree to marry.",
        "ContinueWorldTour(a_1, a_4) ::: Godfrey and Phina continue the world tour together.",
        "",
        "Premises:",
        "Awakened(a_1) ∧ AbandonShip(a_1) ::: Godfrey is awakened and told to abandon ship.",
        "WashedAshore(a_1, b_1) ::: Godfrey is washed ashore on a deserted island.",
        "Finds(a_1, a_2) ::: Godfrey finds Tartlet on the deserted island.",
        "LearnToSurvive(a_1) ∧ OrganizeLife(a_1) ∧ FaceIntruders(a_1) ∧ OvercomeObstacles(a_1) ::: Godfrey learns to survive, organizes his life, faces hostile intruders, and overcomes other obstacles.",
        "Rescue(a_1, a_3) ::: Godfrey rescues Carefinotu from Polynesians visiting the island.",
        "JoinedBy(a_1, a_3) ::: Godfrey is joined by Carefinotu.",
        "DiscoverValue(a_1) ∧ GainsPoise(a_1) ∧ GainsCourage(a_1) ::: Godfrey discovers the value of independent effort and gains poise and courage.",
        "Rescued(c_1) ∧ Returned(c_1, b_2) ::: The marooned group is rescued and returned to San Francisco.",
        "Reunited(a_1, a_4) ∧ AgreeToMarry(a_1, a_4) ::: Godfrey is reunited with Phina and they agree to marry.",
        "ContinueWorldTour(a_1, a_4) ::: Godfrey and Phina continue the world tour together."
      ]
    }
  ],
  "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78": [
    {
      "id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Degeneration(x) ::: x represents degeneration in society.",
        "MedicalInterpretation(x) ::: x is a medical interpretation of degeneration.",
        "SocialInterpretation(x) ::: x is a social interpretation of degeneration.",
        "Divides(x, y) ::: x divides his study into y books.",
        "Identifies(x, y) ::: x identifies the phenomenon y.",
        "RecognizedIn(x, y) ::: x is recognized in y.",
        "Describes(x, y) ::: x describes y as a certain phenomenon.",
        "Accuses(x, y) ::: x accuses y of a certain behavior.",
        "Imitate(x, y) ::: x imitates what they see in y.",
        "FashionableSociety(x) ::: x is a fashionable society.",
        "Strives(x, y) ::: x strives for a certain quality or characteristic.",
        "",
        "Premises:",
        "MedicalInterpretation(nordau) ∧ SocialInterpretation(nordau) ∧ Degeneration(nordau) ::: Nordau begins his work with a \"medical\" and social interpretation of what has created this Degeneration in society.",
        "Divides(nordau, 5) ::: Nordau divides his study into five books.",
        "Identifies(nordau, fin_de_siècle) ::: In the first book, Nordau identifies the phenomenon of fin de siècle in Europe.",
        "RecognizedIn(fin_de_siècle, france) ::: He sees this as first being recognized in France.",
        "Describes(fin_de_siècle, contempt_for_traditional_views) ::: He describes this phenomenon as \"a contempt for the traditional views of custom and morality\".",
        "Accuses(nordau, society) ::: Nordau accuses society of becoming more inclined to imitate what they see in art.",
        "Imitate(society, art) ::: Society imitates what they see in art.",
        "FashionableSociety(paris) ∧ FashionableSociety(london) ::: He sees in the fashionable society of Paris and London.",
        "Strives(figure, singularity) ::: Every single figure strives visibly by some singularity in outline, set, cut or colour, to startle attention violently.",
        "",
        "Conclusion:",
        "∀x (Degeneration(x) → (MedicalInterpretation(x) ∧ SocialInterpretation(x))) ::: Any degeneration in society has both medical and social interpretations."
      ]
    },
    {
      "id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "CulturalPhenomenon(x) ::: x is a cultural phenomenon.",
        "Physician(x) ::: x is a physician.",
        "Identifies(x, y) ::: x identifies y as something.",
        "Illness(x) ::: x is an illness.",
        "MentalAberration(x) ::: x is a mental aberration.",
        "Malfunction(x) ::: x is a malfunction.",
        "HumanPsyche(x) ::: x is related to the human psyche.",
        "SymbolicApproach(x) ::: x is a symbolic approach.",
        "MythicApproach(x) ::: x is a mythic approach.",
        "",
        "Premises:",
        "CulturalPhenomenon(fin_de_siecle) ::: Nordau establishes the cultural phenomenon of fin de siècle.",
        "Physician(nordau) ::: Nordau moves to the viewpoint of a physician.",
        "Identifies(nordau, illness) ::: Nordau identifies what he sees as an illness.",
        "Illness(mental_aberrations) ::: Mental aberrations are considered an illness.",
        "Illness(malfunctions) ::: Malfunctions are also considered an illness.",
        "HumanPsyche(human_psyche) ::: The concept relates to the human psyche.",
        "SymbolicApproach(symbolic_approach) ::: There is a symbolic approach to understanding the human psyche.",
        "MythicApproach(mythic_approach) ::: There is also a mythic approach to understanding the human psyche. ",
        "",
        "Conclusion:",
        "CulturalPhenomenon(fin_de_siecle) ∧ Physician(nordau) ∧ Identifies(nordau, illness) ::: Nordau establishes the cultural phenomenon of fin de siècle and identifies it as an illness from the viewpoint of a physician."
      ]
    },
    {
      "id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "Degeneration(x) ::: x is a condition of degeneration.",
        "Hysteria(x) ::: x is a condition of hysteria.",
        "Neurasthenia(x) ::: x is a minor stage of hysteria.",
        "ContemporaryArt(x) ::: x is a tendency of contemporary art.",
        "MysticWorks(x) ::: x is a mystic work.",
        "SymbolicWorks(x) ::: x is a symbolic work.",
        "DecadentWorks(x) ::: x is a decadent work.",
        "FashionableSociety(x) ::: x is a fashionable society.",
        "Admiration(x, y) ::: x admires y.",
        "MentalAberration(x) ::: x is a mental aberration.",
        "HumanPsyche(x) ::: x is related to the human psyche.",
        "",
        "Premises:",
        "∀x (Degeneration(x) ∧ Hysteria(x) → Neurasthenia(x)) ::: The confluence of degeneration and hysteria leads to neurasthenia.",
        "∀x (ContemporaryArt(x) ∧ MysticWorks(x) ∧ SymbolicWorks(x) ∧ DecadentWorks(x) ∧ FashionableSociety(x) → Admiration(a_0, x)) ::: The tendencies of contemporary art and poetry are admired by fashionable society.",
        "∀x (MentalAberration(x) → HumanPsyche(x)) ::: Mental aberrations are related to the human psyche.",
        "∀x (Neurasthenia(x) → (Degeneration(x) ∧ Hysteria(x))) ::: Neurasthenia is a minor stage of degeneration and hysteria.",
        "",
        "Conclusion:",
        "∃x (Degeneration(x) ∧ Hysteria(x)) ::: There exists a condition of degeneration and hysteria.",
        "∃y (Admiration(a_0, y) ∧ (MysticWorks(y) ∧ SymbolicWorks(y) ∧ DecadentWorks(y))) ::: There exists a mystic, symbolic, or decadent work that is admired by people."
      ]
    },
    {
      "id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Degenerating(a_0) ::: a person or society is degenerating.",
        "ReflectsInArt(a_0) ::: a person or society is reflected in art.",
        "InfluencedByArt(a_0) ::: a person or society is influenced by art.",
        "CaseStudy(x) ::: x is a case study of an artist, writer, or thinker.",
        "Author(x, y) ::: x is the author of y.",
        "Book(x) ::: x is a book.",
        "Premise(x) ::: x is a basic premise of a book.",
        "UnusualTypes(x) ::: x refers to unusual or exotic types or individuals.",
        "",
        "Premises:",
        "Degenerating(a_0) ∧ ReflectsInArt(a_0) ∧ InfluencedByArt(a_0) ::: The degeneration of society and human beings is both reflected in and influenced by art.",
        "∃x (CaseStudy(x) ∧ Author(a_1, x)) ::: The book deals with numerous case studies of various artists, writers, and thinkers, including Howard Fertig.",
        "Premise(degeneration) ::: The basic premise of the book remains that society and human beings themselves are degenerating.",
        "∃y (UnusualTypes(y) ∧ Author(a_2, y)) ::: Hannah Arendt refers to unusual or exotic types or individuals in her book.",
        "∃z (CaseStudy(z) ∧ Author(a_3, z)) ::: Freud is a case study in the book.",
        "∃w (CaseStudy(w) ∧ Author(a_4, w)) ::: Jung is a case study in the book."
      ]
    },
    {
      "id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "OriginalText(x) ::: x is the original article's text.",
        "ComportsWith(x, y) ::: x comports closely with y.",
        "CausativeFactors(x) ::: x are factors regarded as causative in mental aberrations and malfunctions.",
        "SymbolicApproach(x) ::: x is a symbolic approach.",
        "MythicApproach(x) ::: x is a mythic approach.",
        "Understanding(x, y) ::: x is the understanding of y.",
        "",
        "Premises:",
        "OriginalText(originalArticle) ∧ ComportsWith(originalArticle, howardFertig) ::: The original article's text comports quite closely to Howard Fertig, NY 1960.",
        "CausativeFactors(physicalFactors) ∧ CausativeFactors(physiognomicFactors) ∧ CausativeFactors(mechanicalFactors) ∧ (CausativeFactors(physicalFactors) ∧ CausativeFactors(physiognomicFactors) ∧ CausativeFactors(mechanicalFactors) → Understanding(nordau, mentalAberrations)) ::: During the time of Nordau's writing, physical, physiognomic, or mechanical factors were still being regarded as causative in mental aberrations and malfunctions.",
        "¬Understanding(nordau, symbolicApproach) ∧ ¬Understanding(nordau, mythicApproach) ::: The symbolic or mythic approaches later implemented by Freud and Jung made no part of Nordau's understanding of the human psyche."
      ]
    }
  ],
  "5f4f9df9f707d382b33c73db83b316a60599a6ea": [
    {
      "id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Predicted(murder) ::: A murder is predicted.",
        "ImprisonedInVirtualReality(x) ::: x is imprisoned in their own happy virtual reality.",
        "PreCrimeSystem(x) ::: x is the PreCrime police system.",
        "Precogs(x) ::: x refers to the mutated humans who previsualize crimes.",
        "MurderRateZero() ::: The murder rate is reduced to zero.",
        "Adopts(x) ::: x is adopted by the Federal government.",
        "",
        "Premises:",
        "Predicted(murder) → ImprisonedInVirtualReality(wouldBeMurderer) ::: If a murder is predicted, then the would-be murderer is imprisoned in a happy virtual reality.",
        "PreCrimeSystem(d) ∧ Precogs(b_1) ∧ MurderRateZero() ::: Washington, D.C.'s PreCrime police stops murderers before they act, reducing the murder rate to zero.",
        "Adopts(FederalGovernment) ∧ PreCrimeSystem(d) ::: The Federal government is on the verge of adopting the controversial PreCrime program."
      ]
    },
    {
      "id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "Separated(a_2, a_3) ::: John Anderton has separated from his wife Lara.",
        "DrugAddict(a_2) ::: John Anderton has become a drug addict.",
        "Auditing(a_1, d) ::: Danny Witwer is auditing the PreCrime program.",
        "GeneratesPrediction(b_1, a_2, a_4, t) ::: The Precogs generate a prediction that Anderton will murder a man named Leo Crow in 36 hours.",
        "Flees(a_2, c_0) ::: John Anderton flees the area.",
        "SeeksAdvice(a_2, a_5) ::: John Anderton seeks the advice of Dr. Iris Hineman.",
        "Reveals(a_5, b_1) ::: Dr. Iris Hineman reveals information about the Precogs.",
        "HasDifferentVision(b_1, a_6) ::: One of the Precogs, usually Agatha, has a different vision than the other two.",
        "KeepsSecret(b_1) ::: The existence of the minority report is kept a secret.",
        "Resolves(a_2, b_1) ::: John Anderton resolves to recover the minority report.",
        "",
        "Premises:",
        "Separated(a_2, a_3) ::: John Anderton has separated from his wife Lara.",
        "DrugAddict(a_2) ::: John Anderton has become a drug addict.",
        "Auditing(a_1, d) ::: Danny Witwer is auditing the PreCrime program.",
        "GeneratesPrediction(b_1, a_2, a_4, 36) ::: The Precogs generate a prediction that Anderton will murder a man named Leo Crow in 36 hours.",
        "Flees(a_2, c_0) ::: John Anderton flees the area.",
        "SeeksAdvice(a_2, a_5) ::: John Anderton seeks the advice of Dr. Iris Hineman.",
        "Reveals(a_5, b_1) ::: Dr. Iris Hineman reveals information about the Precogs.",
        "HasDifferentVision(b_1, a_6) ::: One of the Precogs, usually Agatha, has a different vision than the other two.",
        "KeepsSecret(b_1) ::: The existence of the minority report is kept a secret.",
        "Resolves(a_2, b_1) ::: John Anderton resolves to recover the minority report to prove his innocence."
      ]
    },
    {
      "id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "GoesTo(x, y) ::: x goes to y.",
        "Kidnaps(x, y) ::: x kidnaps y.",
        "ShutsDown(x, y) ::: x shuts down y.",
        "OperatesAsGroupMind(x) ::: x operates as a group mind.",
        "Extracts(x, y, z) ::: x extracts y from z.",
        "Shows(x, y) ::: x shows y.",
        "Exists(x) ::: x exists.",
        "Murder(x, y) ::: x is the murder of y.",
        "DrownedBy(x, y) ::: x is drowned by y.",
        "",
        "Premises:",
        "GoesTo(anderton, blackMarketDoctor) ::: Anderton goes to a black market doctor for a risky eye transplant.",
        "ShutsDown(anderton, PreCrime) ::: Anderton shuts down the PreCrime system.",
        "OperatesAsGroupMind(precogs) ::: The Precogs operate as a group mind.",
        "Kidnaps(anderton, agatha) ::: Anderton kidnaps Agatha.",
        "Extracts(anderton, minorityReport, hacker) ::: Anderton takes Agatha to a hacker to extract the minority report of Leo Crow.",
        "¬Exists(minorityReport) ::: None exists; instead, Agatha shows him an image of the murder of Ann Lively.",
        "Shows(agatha, murderOfAnnLively) ::: Agatha shows him an image of the murder of Ann Lively.",
        "Murder(murderOfAnnLively, annLively) ::: The murder is of Ann Lively.",
        "DrownedBy(annLively, hoodedFigure) ::: Ann Lively was drowned by a hooded figure in 2049."
      ]
    },
    {
      "id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Aware(x) ::: x is aware of their future.",
        "ChooseFuture(x) ::: x has the ability to choose their future.",
        "Targeted(x) ::: x is targeted for knowing about Lively's existence and her connection to Agatha.",
        "Killed(x) ::: x is killed.",
        "HiredToPlantPhotos(x) ::: x is hired to plant the photos.",
        "Flee(x, y) ::: x flees to location y.",
        "Mother(x, y) ::: x is the mother of y.",
        "Sold(x, y) ::: x sold y.",
        "SoberedUp(x) ::: x has sobered up.",
        "Murdered(x) ::: x is murdered.",
        "",
        "Premises:",
        "ChooseFuture(a_2) ∧ Aware(a_2) ::: Anderton has the ability to choose his future now that he is aware of it.",
        "Targeted(a_2) ::: Anderton is targeted for knowing about Lively's existence and her connection to Agatha.",
        "Killed(a_1) ∧ HiredToPlantPhotos(a_1) ::: Crow is killed and was hired to plant the photos.",
        "Flee(a_2, a_3) ::: Anderton flees to Lara's house for refuge.",
        "Mother(a_1, a_2) ∧ Sold(a_1, a_2) ∧ SoberedUp(a_1) ∧ Murdered(a_1) ::: Lively was Agatha's drug-addicted mother who sold her to PreCrime, had sobered up, and was murdered."
      ]
    },
    {
      "id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "Framed(x) ::: x is being framed.",
        "Suspects(x, y) ::: x suspects y.",
        "Examines(x, y) ::: x examines y.",
        "Reports(x, y) ::: x reports y to y.",
        "Kills(x, y) ::: x kills y.",
        "Detected(x) ::: x is detected.",
        "Offline(x) ::: x is offline.",
        "",
        "Premises:",
        "Suspects(witwer, anderton) ::: Witwer suspects Anderton is being framed.",
        "Examines(witwer, footageOfLivelysMurder) ::: Witwer examines the footage of Lively's murder.",
        "Reports(witwer, burgess) ::: Witwer reports this to Lamar Burgess.",
        "Kills(burgess, witwer) ::: Burgess kills Witwer using Anderton's gun.",
        "Offline(precogs) ::: The Precogs are offline.",
        "¬Detected(kills(witwer)) ::: Witwer's murder is not detected due to the Precogs being offline."
      ]
    },
    {
      "id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 5,
      "fols": [
        "Predicates:",
        "Calls(x, y) ::: x calls y.",
        "Reveals(x, y) ::: x reveals y.",
        "Captured(x) ::: x is captured.",
        "Accused(x, y) ::: x is accused of y.",
        "FittedWithDevice(x) ::: x is fitted with a brain device.",
        "Deposited(x, y) ::: x is deposited into y.",
        "Tells(x, y) ::: x tells y.",
        "DreamsComeTrue(x) ::: x's dreams come true.",
        "",
        "Premises:",
        "Calls(lara, burgess) ::: Lara calls Burgess to reveal that Anderton is with her.",
        "Reveals(lara, anderton) ::: Lara reveals that Anderton is with her.",
        "Captured(anderton) ::: Anderton is captured.",
        "Accused(anderton, murders) ::: Anderton is accused of both murders.",
        "FittedWithDevice(anderton) ::: Anderton is fitted with the brain device that puts him permanently into a dreamlike sleep.",
        "Deposited(anderton, prison) ::: Anderton's body is deposited into the prison.",
        "Tells(warden, anderton) ::: The warden tells Anderton.",
        "DreamsComeTrue(anderton) ::: The warden tells him that all his dreams come true."
      ]
    },
    {
      "id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 6,
      "fols": [
        "Predicates:",
        "Reconnected(a_1) ::: Burgess is reconnected to the PreCrime system.",
        "Murderer(a_1, a_2) ::: Burgess is the murderer of Lively.",
        "Freed(a_3, a_2) ::: Lara frees Anderton from stasis.",
        "Exposes(a_2, a_1) ::: Anderton exposes Burgess.",
        "GeneratedReport(d, a_1) ::: A new report is generated at PreCrime stating that Burgess will kill Anderton.",
        "Corners(a_1, a_2) ::: Burgess corners Anderton.",
        "Explains(a_1, a_2) ::: Burgess explains his actions to Anderton.",
        "Dilemma(a_1) ::: Burgess faces a moral dilemma.",
        "Imprisoned(a_1) ::: Burgess will be imprisoned for life if he kills Anderton.",
        "Validated(d) ::: PreCrime will be validated if Burgess kills Anderton.",
        "Discredited(d) ::: PreCrime will be discredited if Burgess spares Anderton.",
        "Flaw(d) ::: There is a flaw in the PreCrime system.",
        "Aware(a_0, f) ::: People are aware of their future.",
        "ChangeFuture(a_0) ::: People are able to change their future.",
        "Shoots(a_1) ::: Burgess shoots himself.",
        "",
        "Premises:",
        "Reconnected(burgess) ::: Agatha is reconnected to the PreCrime system.",
        "Murderer(burgess, lively) ::: Burgess accidentally reveals himself as Lively's murderer.",
        "Freed(lara, anderton) ::: Lara frees Anderton from stasis.",
        "Exposes(anderton, burgess) ::: Anderton exposes Burgess at a PreCrime celebratory banquet by playing the full video of Agatha's vision of Burgess killing Lively.",
        "GeneratedReport(d, burgess) ::: A new report is generated at PreCrime: Burgess will kill Anderton.",
        "Corners(burgess, anderton) ::: Burgess corners Anderton.",
        "Explains(burgess, anderton) ::: Burgess explains his actions to Anderton.",
        "Dilemma(burgess) ::: Burgess faces a moral dilemma regarding the lives of others.",
        "Imprisoned(burgess) → Validated(d) ::: If Burgess kills Anderton, he will be imprisoned for life, but PreCrime will be validated.",
        "Spared(burgess) → Discredited(d) ::: If Burgess spares Anderton, PreCrime will be discredited and shut down.",
        "Flaw(d) ::: Anderton reveals the ultimate flaw of the system: once people are aware of their future, they are able to change it.",
        "Shoots(burgess) ::: Burgess shoots himself.",
        "",
        "Conclusion:",
        "Dilemma(burgess) ::: Burgess's actions are driven by the need to protect the PreCrime system, leading to a moral dilemma regarding the lives of others."
      ]
    },
    {
      "id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 7,
      "fols": [
        "Predicates:",
        "Pardoned(x) ::: x is a pardoned prisoner.",
        "ShutDown(d) ::: the PreCrime system is shut down.",
        "NewChild(x, y) ::: x and y are having a new child together.",
        "SentTo(x, y) ::: x is sent to y.",
        "LiveInPeace(x) ::: x lives in peace.",
        "",
        "Premises:",
        "Pardoned(e) ::: All prisoners are pardoned after Burgess's death.",
        "ShutDown(d) ::: The PreCrime system is shut down after Burgess's death.",
        "NewChild(a_2, a_3) ::: Anderton and Lara are soon to have a new child together.",
        "SentTo(b_1, c_1) ::: The Precogs are sent to an isolated island.",
        "LiveInPeace(b_1) ::: The Precogs live their lives in peace on the isolated island."
      ]
    }
  ],
  "60510bf4be495aeb1b4640a7a058b4ae7c04b884": [
    {
      "id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Dentist(x) ::: x is a dentist.",
        "LimitedIntellect(x) ::: x has limited intellect.",
        "FromPoorFamily(x) ::: x is from a poor miner's family.",
        "OpenedShop(x, y) ::: x opened a shop at location y.",
        "BestFriend(x, y) ::: x is the best friend of y.",
        "Courting(x, y) ::: x is courting y.",
        "InfatuatedWith(x, y) ::: x is infatuated with y.",
        "Woos(x, y) ::: x woos y.",
        "Kissed(x, y) ::: x kissed y.",
        "DeclaredLove(x, y) ::: x declared love for y.",
        "WonLottery(x, y) ::: x won y from a lottery ticket.",
        "Announces(x, y) ::: x announces y.",
        "JealousOf(x, y) ::: x is jealous of y.",
        "ClaimsCheated(x, y) ::: x claims to have been cheated out of y.",
        "",
        "Premises:",
        "Dentist(a_1) ∧ LimitedIntellect(a_1) ∧ FromPoorFamily(a_1) ∧ OpenedShop(a_1, b_0) ::: McTeague is a dentist of limited intellect from a poor miner's family, who has opened a dentist shop on Polk Street in San Francisco.",
        "BestFriend(a_2, a_1) ∧ Courting(a_2, a_3) ::: Marcus Schouler is McTeague's best friend and is courting Trina Sieppe.",
        "InfatuatedWith(a_1, a_3) ::: McTeague becomes infatuated with Trina while working on her teeth.",
        "Woos(a_1, a_3) ::: McTeague successfully woos Trina.",
        "Kissed(a_1, a_3) ∧ DeclaredLove(a_1, a_3) ::: McTeague and Trina kissed and declared their love for each other.",
        "WonLottery(a_3, $15,000) ::: Trina discovers that she has won $15,000 from a lottery ticket.",
        "Announces(a_3, \"McTeague and Trina are to marry\") ::: Trina's mother announces that McTeague and Trina are to marry.",
        "JealousOf(a_2, a_1) ∧ ClaimsCheated(a_2, $15,000) ::: Marcus becomes jealous of McTeague and claims that he has been cheated out of money that would have been rightfully his if he had married Trina."
      ]
    },
    {
      "id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "Parsimonious(x) ::: x is a parsimonious person.",
        "RefusesToTouchPrincipal(x, y) ::: x refuses to touch the principal of y.",
        "Invests(x, y) ::: x invests with y.",
        "LivesOnEarnings(x) ::: x lives on the earnings from McTeague's dental practice.",
        "AccumulatesSavings(x) ::: x accumulates savings.",
        "DeterioratesFriendship(x, y) ::: The friendship between x and y deteriorates.",
        "PrevailsInFight(x, y) ::: x prevails in a fight against y.",
        "BreaksArm(x, y) ::: x breaks y's arm.",
        "PartAsFriends(x, y) ::: x and y part as friends.",
        "",
        "Premises:",
        "RefusesToTouchPrincipal(a_3, $15,000) ∧ Parsimonious(a_3) ∧ LivesOnEarnings(a_1) ::: Trina's refusal to touch the principal of her $15,000 leads to a parsimonious lifestyle for her and McTeague.",
        "PrevailsInFight(a_1, a_2) ∧ BreaksArm(a_1, a_2) ::: McTeague's immense physical strength leads to the deterioration of the friendship with Marcus.",
        "DeterioratesFriendship(a_2, a_1) ::: The friendship between Marcus and McTeague deteriorates.",
        "AccumulatesSavings(a_3) ::: Trina secretly accumulates penny-pinched savings in a locked trunk.",
        "PartAsFriends(a_2, a_1) ::: Marcus and McTeague part apparently as friends before Marcus leaves."
      ]
    },
    {
      "id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "Debarred(a_1) ::: McTeague is debarred from practicing dentistry.",
        "Informed(a_2, cityHall) ::: Marcus informed city hall about McTeague's lack of license or degree.",
        "LosesPractice(a_1) ::: McTeague loses his dental practice.",
        "MovesIntoPoorQuarters(a_1, a_3) ::: McTeague and Trina move into successively poorer quarters.",
        "Miserly(a_3) ::: Trina becomes more miserly.",
        "Deteriorates(a_1, a_3) ::: The life of McTeague and Trina deteriorates.",
        "TakesSavings(a_1, a_3) ::: McTeague takes Trina's domestic savings.",
        "Abandons(a_1, a_3) ::: McTeague abandons Trina.",
        "FallsUnderSpell(a_3, c) ::: Trina falls completely under the spell of money.",
        "WithdrawsWinnings(a_3) ::: Trina withdraws the principal of her prior winnings in gold.",
        "HandlesCoins(a_3) ::: Trina admires and handles the coins in her room.",
        "SpreadsCoins(a_3) ::: Trina spreads the coins over her bed.",
        "",
        "Premises:",
        "Debarred(a_1) ∧ Informed(a_2, cityHall) ∧ LosesPractice(a_1) ∧ MovesIntoPoorQuarters(a_1, a_3) ∧ Miserly(a_3) ∧ Deteriorates(a_1, a_3) ::: McTeague is debarred from practicing dentistry, Marcus informs city hall about McTeague's lack of license or degree, McTeague loses his practice, and they move into poorer quarters as Trina becomes more miserly, leading to the deterioration of their life together.",
        "TakesSavings(a_1, a_3) ∧ Abandons(a_1, a_3) ::: McTeague takes Trina's domestic savings and abandons her.",
        "FallsUnderSpell(a_3, c) ∧ WithdrawsWinnings(a_3) ∧ HandlesCoins(a_3) ∧ SpreadsCoins(a_3) ::: Trina falls under the spell of money, withdraws her winnings in gold, admires and handles the coins, and spreads them over her bed."
      ]
    },
    {
      "id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Destitute(a_1) ::: McTeague is destitute.",
        "Refuses(a_3, a_1, e) ::: Trina refuses to give McTeague money for food.",
        "Aggravated(a_1) ::: McTeague is aggravated by whisky.",
        "Violent(a_1) ::: McTeague becomes violent due to whisky.",
        "Beats(a_1, a_3) ::: McTeague beats Trina.",
        "Dead(a_3) ::: Trina is dead.",
        "Takes(a_1, c) ::: McTeague takes the entire hoard of gold.",
        "HeadsOut(a_1, b_2) ::: McTeague heads out to a mining community.",
        "SensesPursuit(a_1) ::: McTeague senses pursuit.",
        "MakesWay(a_1, b_3) ::: McTeague makes his way towards Mexico.",
        "Hears(a_2, a_3) ::: Marcus hears of Trina's murder.",
        "JoinsHunt(a_2, a_1) ::: Marcus joins the hunt for McTeague.",
        "Catches(a_2, a_1) ::: Marcus catches McTeague in Death Valley.",
        "Fights(a_1, a_2) ::: McTeague fights Marcus.",
        "OverWater(a_1, a_2) ::: They fight over McTeague's remaining water.",
        "OverGold(a_1, a_2) ::: They fight over Trina's $15,000.",
        "Kills(a_1, a_2) ::: McTeague kills Marcus.",
        "Handcuffs(a_2, a_1) ::: Marcus handcuffs himself to McTeague.",
        "Stranded(a_1) ::: McTeague is stranded.",
        "Alone(a_1) ::: McTeague is alone.",
        "Helpless(a_1) ::: McTeague is helpless.",
        "WithCorpse(a_1, a_2) ::: McTeague is left with Marcus's corpse.",
        "InDesolateWaste(a_1, b_1) ::: McTeague is in the desolate, arid waste of Death Valley.",
        "",
        "Premises:",
        "Destitute(a_1) ∧ Refuses(a_3, a_1, e) ∧ Aggravated(a_1) ∧ Violent(a_1) ∧ Beats(a_1, a_3) ∧ Dead(a_3) ::: McTeague is destitute, Trina refuses to give him money for food, McTeague is aggravated and violent due to whisky, and he beats Trina to death.",
        "Takes(a_1, c) ∧ HeadsOut(a_1, b_2) ::: McTeague takes the entire hoard of gold and heads out to a mining community.",
        "SensesPursuit(a_1) ∧ MakesWay(a_1, b_3) ::: McTeague senses pursuit and makes his way towards Mexico.",
        "Hears(a_2, a_3) ∧ JoinsHunt(a_2, a_1) ∧ Catches(a_2, a_1) ::: Marcus hears of the murder, joins the hunt for McTeague, and catches him in Death Valley.",
        "Fights(a_1, a_2) ∧ OverWater(a_1, a_2) ∧ OverGold(a_1, a_2) ::: McTeague and Marcus fight over McTeague's remaining water and Trina's $15,000.",
        "Kills(a_1, a_2) ∧ Handcuffs(a_2, a_1) ::: McTeague kills Marcus, but Marcus handcuffs himself to McTeague.",
        "Stranded(a_1) ∧ Alone(a_1) ∧ Helpless(a_1) ∧ WithCorpse(a_1, a_2) ∧ InDesolateWaste(a_1, b_1) ::: McTeague is stranded, alone, and helpless with Marcus's corpse in the desolate, arid waste of Death Valley.",
        "",
        "Conclusion:",
        "McTeague's actions lead to his isolation and helplessness in Death Valley."
      ]
    }
  ],
  "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58": [
    {
      "id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "EnglishScientist(x) ::: x is an English scientist.",
        "GentlemanInventor(x) ::: x is a gentleman inventor.",
        "LivesIn(x, y) ::: x lives in location y.",
        "TimeTraveller(x) ::: x is the Time Traveller.",
        "Lecture(x, y) ::: x gives a lecture on topic y.",
        "Demonstrates(x, y) ::: x demonstrates item y.",
        "Built(x, y) ::: x built item y.",
        "Machine(x) ::: x is a machine.",
        "CarriesThroughTime(x, y) ::: x can carry person y through time.",
        "Narrator(x) ::: x is a narrator.",
        "RemarkableTale(x) ::: x is a remarkable tale.",
        "",
        "Premises:",
        "EnglishScientist(timeTraveller) ∧ GentlemanInventor(timeTraveller) ∧ LivesIn(timeTraveller, richmond) ∧ LivesIn(timeTraveller, surrey) ∧ LivesIn(timeTraveller, victorianTime) ::: The Time Traveller is an English scientist and gentleman inventor living in Richmond, Surrey, in Victorian England.",
        "Lecture(timeTraveller, fourthDimension) ::: The Time Traveller gives a lecture that time is simply a fourth dimension.",
        "Demonstrates(timeTraveller, tabletopModelMachine) ::: The Time Traveller demonstrates a tabletop model machine for travelling through time.",
        "Built(timeTraveller, timeMachine) ::: The Time Traveller built a machine capable of carrying a person through time.",
        "Narrator(originalNarrator) ∧ Narrator(timeTraveller) ::: The original narrator recounts the Time Traveller's lecture and becomes the new narrator after the Time Traveller returns at dinner the following week to recount a remarkable tale.",
        "RemarkableTale(timeTraveller) ::: The Time Traveller recounts a remarkable tale.",
        "",
        "Conclusion:",
        "CarriesThroughTime(timeMachine, timeTraveller) ::: The machine built by the Time Traveller can carry him through time."
      ]
    },
    {
      "id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "Eloi(x) ::: x is an Eloi.",
        "TimeTraveller(x) ::: x is the Time Traveller.",
        "Curious(x) ::: x is curious.",
        "Disciplined(x) ::: x is disciplined.",
        "Frugivorous(x) ::: x has a frugivorous diet.",
        "CommunicatesWith(x, y) ::: x communicates with y.",
        "LivesIn(x, y) ::: x lives in location y.",
        "Work(x) ::: x does work.",
        "Peaceful(x) ::: x is peaceful.",
        "CommunistSociety(x) ::: x is a communist society.",
        "TechnologicallyAdvanced(x) ::: x is technologically advanced.",
        "AdaptsToEnvironment(x) ::: x adapts to the environment.",
        "StrengthAdvantageous(x) ::: x has strength advantageous for survival.",
        "IntellectAdvantageous(x) ::: x has intellect advantageous for survival.",
        "",
        "Premises:",
        "Eloi(x) → (Frugivorous(x) ∧ ¬Work(x) ∧ ¬Curious(x) ∧ ¬Disciplined(x)) ::: The Eloi live a frugivorous lifestyle, do no work, and lack curiosity and discipline.",
        "TimeTraveller(a_3) ∧ LivesIn(a_3, b_0) ∧ CommunicatesWith(a_3, Eloi) ::: The Time Traveller tests his device and communicates with the Eloi in A.D. 802,701.",
        "Eloi(x) → (Peaceful(x) ∧ CommunistSociety(x)) ::: The Eloi are a peaceful, communist society.",
        "TechnologicallyAdvanced(humanity) ∧ AdaptsToEnvironment(Eloi) ∧ ¬(StrengthAdvantageous(Eloi) ∧ IntellectAdvantageous(Eloi)) ::: The Eloi are a result of humanity's evolution in a technologically advanced environment, where strength and intellect are no longer advantageous for survival."
      ]
    },
    {
      "id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "Missing(x) ::: x is missing.",
        "Shocked(x) ::: x is shocked to find something missing.",
        "Dragged(x, y) ::: x has been dragged by y.",
        "Resembles(x, y) ::: x resembles y.",
        "RemovedLevers(x) ::: x has removed the levers from the time machine.",
        "Approached(x, y) ::: x is approached by y.",
        "Discover(x, y) ::: x discovers y.",
        "AlterTheory(x, y) ::: x alters his theory about y.",
        "Evolved(x, y) ::: x has evolved into y.",
        "FeedOn(x, y) ::: x feeds on y.",
        "Relationship(x, y, z) ::: x has a relationship of type z with y.",
        "Theorizes(x, y) ::: x theorizes about y.",
        "Lost(x, y) ::: x has lost y.",
        "",
        "Premises:",
        "Missing(timeMachine) ∧ Shocked(timeTraveller) ::: The Time Traveller is shocked to find his time machine missing.",
        "Dragged(timeMachine, unknownParty) ::: The time machine has been dragged by some unknown party.",
        "Resembles(timeMachine, sphinx) ::: The structure resembles a Sphinx.",
        "RemovedLevers(timeTraveller) ::: The Time Traveller had removed the machine's levers before leaving it.",
        "Approached(timeTraveller, morlocks) ::: The Time Traveller is approached menacingly by the Morlocks.",
        "Discover(timeTraveller, machinery) ∧ Discover(timeTraveller, industry) ::: The Time Traveller discovers the machinery and industry that makes the above-ground paradise possible.",
        "AlterTheory(timeTraveller, species) ::: The Time Traveller alters his theory about the human race evolving into two species.",
        "Evolved(humanRace, (elois, morlocks)) ::: The human race has evolved into the Eloi and Morlocks.",
        "FeedOn(morlocks, eloi) ::: The Morlocks feed on the Eloi.",
        "Relationship(morlocks, eloi, livestockAndRanchers) ::: The relationship between Morlocks and Eloi is one of livestock and ranchers.",
        "Theorizes(timeTraveller, intelligence) ::: The Time Traveller theorizes that intelligence is the result of and response to danger.",
        "Lost(eloi, spirit) ∧ Lost(eloi, intelligence) ∧ Lost(eloi, physicalFitness) ::: The Eloi have lost the spirit, intelligence, and physical fitness of humanity at its peak."
      ]
    },
    {
      "id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Saves(x, y) ::: x saves y from danger.",
        "DevelopsAffectionateRelationship(x, y) ::: x develops an affectionate relationship with y.",
        "Takes(x, y, z) ::: x takes y with him on an expedition to z.",
        "Finds(x, y) ::: x finds y.",
        "Fights(x, y) ::: x fights y.",
        "Plans(x, y) ::: x plans to take y back to his own time.",
        "OvercomeBy(x, y) ::: x is overcome by y.",
        "Faints(x) ::: x faints.",
        "Escapes(x) ::: x escapes from danger.",
        "Devastated(x, y) ::: x is devastated over the loss of y.",
        "",
        "Premises:",
        "Saves(a_3, a_1) ::: The Time Traveller saves Weena from drowning.",
        "DevelopsAffectionateRelationship(a_3, a_1) ::: The Time Traveller develops an affectionate relationship with Weena.",
        "Takes(a_3, a_1, b_0) ::: The Time Traveller takes Weena with him on an expedition to a distant structure.",
        "Finds(a_3, c_0) ::: The Time Traveller finds a fresh supply of matches.",
        "Fights(a_3, Morlocks) ::: The Time Traveller fights Morlocks to retrieve his machine.",
        "Plans(a_3, a_1) ::: The Time Traveller plans to take Weena back to his own time.",
        "OvercomeBy(a_1, Morlocks) ::: Weena is overcome by Morlocks in the night.",
        "Faints(a_1) ::: Weena faints.",
        "Escapes(a_3) ::: The Time Traveller escapes when a small fire he had left behind catches up to them.",
        "Devastated(a_3, a_1) ::: The Time Traveller is devastated over the loss of Weena.",
        "",
        "Conclusion:",
        "Devastated(a_3, a_1) ::: The Time Traveller is devastated over the loss of Weena."
      ]
    },
    {
      "id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "Open(x, y) ::: x opens y.",
        "Use(x, y) ::: x uses y.",
        "Capture(x, y) ::: x captures y.",
        "Reattach(x, y) ::: x reattaches y.",
        "Travel(x, y) ::: x travels to y.",
        "See(x, y) ::: x sees y.",
        "Wander(x, y) ::: x wanders y.",
        "Chase(x, y) ::: x chases y.",
        "GrowLarger(x) ::: x grows larger.",
        "GrowRedder(x) ::: x grows redder.",
        "GrowDimmer(x) ::: x grows dimmer.",
        "FallSilent(x) ::: x falls silent.",
        "Freeze(x) ::: x freezes.",
        "DieOut(x) ::: x dies out.",
        "",
        "Premises:",
        "Open(morlocks, sphinx) ::: The Morlocks open the Sphinx.",
        "Use(morlocks, timeMachine) ::: The Morlocks use the time machine as bait.",
        "Capture(morlocks, traveller) ::: The Morlocks capture the Traveller.",
        "¬Understand(morlocks, escape(traveller)) ::: The Morlocks do not understand that the Traveller will use it to escape.",
        "Reattach(traveller, levers) ::: The Traveller reattaches the levers.",
        "Travel(traveller, 30MillionYears) ::: The Traveller travels roughly 30 million years from his own time.",
        "See(traveller, lastLivingThings) ::: The Traveller sees some of the last living things on a dying Earth.",
        "Wander(crabLikeCreatures, bloodRedBeaches) ::: Menacing reddish crab-like creatures wander the blood-red beaches.",
        "Chase(crabLikeCreatures, enormousButterflies) ::: Crab-like creatures chase enormous butterflies.",
        "Cover(world, simpleLichenousVegetation) ::: The world is covered in simple lichenous vegetation.",
        "Continue(traveller) ::: The Traveller continues to make short jumps through time.",
        "Cease(EarthRotation) ::: Earth's rotation gradually ceases.",
        "GrowLarger(sun) ::: The sun grows larger.",
        "GrowRedder(sun) ::: The sun grows redder.",
        "GrowDimmer(sun) ::: The sun grows dimmer.",
        "FallSilent(world) ::: The world falls silent.",
        "Freeze(world) ::: The world freezes.",
        "DieOut(lastDegenerateLivingThings) ::: The last degenerate living things die out.",
        "",
        "Conclusion:",
        "Experience(traveller, dyingEarth) ::: The Traveller experiences a dying Earth as he travels through time."
      ]
    },
    {
      "id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 5,
      "fols": [
        "Predicates:",
        "Overwhelmed(x) ::: x is overwhelmed.",
        "GoesBack(x, y) ::: x goes back to location y.",
        "ArrivesAt(x, y) ::: x arrives at location y.",
        "RelatesAdventures(x, y) ::: x relates his adventures to person y.",
        "ProducesEvidence(x, y) ::: x produces evidence of item y.",
        "PreparesForJourney(x) ::: x prepares for another journey.",
        "PromisesToReturn(x, y) ::: x promises to return in a short period of time.",
        "NeverReturned(x) ::: x has never returned.",
        "",
        "Premises:",
        "Overwhelmed(timeTraveller) ::: The Time Traveller is overwhelmed.",
        "GoesBack(timeTraveller, machine) ::: The Time Traveller goes back to the machine.",
        "ArrivesAt(timeTraveller, laboratory) ::: The Time Traveller arrives at his laboratory.",
        "RelatesAdventures(timeTraveller, visitors) ::: The Time Traveller relates his adventures to his disbelieving visitors.",
        "ProducesEvidence(timeTraveller, strangeWhiteFlowers) ::: The Time Traveller produces as evidence the strange white flowers.",
        "ArrivesAt(originalNarrator, house) ::: The original narrator arrives at the Time Traveller's house the next day.",
        "PreparesForJourney(timeTraveller) ::: The Time Traveller is preparing for another journey.",
        "PromisesToReturn(originalNarrator, timeTraveller) ::: The original narrator promises to return in a short period of time.",
        "NeverReturned(timeTraveller) ::: The Time Traveller has never returned after 3 years of waiting."
      ]
    }
  ],
  "7f1cb0e615795ed6be5d96ea3f13ce62921d8835": [
    {
      "id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "WantsToMarry(x, y) ::: x wants to marry y.",
        "Divorces(x, y) ::: x divorces y.",
        "Recognizes(x, y) ::: x recognizes y.",
        "KnowsAbout(x, y) ::: x knows about y.",
        "Proposes(x, y) ::: x proposes y.",
        "Murders(x, y) ::: x murders y.",
        "Agrees(x, y) ::: x agrees to y.",
        "Humors(x, y) ::: x humors y.",
        "Borrows(x, y) ::: x borrows y.",
        "SlipsIntoPocket(x, y) ::: x slips y into his pocket.",
        "",
        "Premises:",
        "WantsToMarry(a_1, a_0) ::: Guy Haines wants to marry Anne Morton.",
        "Divorces(a_1, a_4) ::: Guy Haines must divorce his wife Miriam.",
        "Recognizes(a_2, a_1) ::: Bruno Anthony recognizes Guy Haines.",
        "KnowsAbout(a_2, gossipPages) ::: Bruno knows about Guy's marital situation from the gossip pages.",
        "Proposes(a_2, murderScheme) ::: Bruno proposes the idea for the perfect homicide.",
        "Murders(a_2, a_4) ::: Bruno will murder Miriam.",
        "Murders(a_1, a_3) ::: Guy will kill Bruno's despised father.",
        "Agrees(a_1, murderScheme) ::: Guy humors Bruno's absurd murder plot by pretending to find it amusing.",
        "Borrows(a_2, d_1) ::: Bruno borrows Guy's monogrammed cigarette lighter.",
        "SlipsIntoPocket(a_2, d_1) ::: Bruno slips the lighter into his own pocket.",
        "",
        "Conclusion:",
        "¬(IdentifiableMotive(a_1, c_2) ∧ IdentifiableMotive(a_2, c_2)) ::: Neither Guy nor Bruno would have identifiable motives for the murders."
      ]
    },
    {
      "id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "Meets(x, y) ::: x meets with y.",
        "Pregnant(x) ::: x is pregnant.",
        "RefusesToDivorce(x, y) ::: x refuses to give y a divorce.",
        "Threatens(x, y) ::: x threatens y.",
        "Relays(x, y, z) ::: x relays information about y to z.",
        "Comment(x, y) ::: x makes a comment about y.",
        "Stalks(x, y) ::: x stalks y.",
        "Strangles(x, y) ::: x strangles y.",
        "Informs(x, y) ::: x informs y about something.",
        "Expects(x, y) ::: x expects y to do something.",
        "Sends(x, y, z) ::: x sends y to z.",
        "",
        "Premises:",
        "Meets(guy, miriam) ::: Guy meets with Miriam.",
        "Pregnant(miriam) ::: Miriam is pregnant.",
        "RefusesToDivorce(miriam, guy) ::: Miriam refuses to give Guy a divorce.",
        "Threatens(miriam, scandal) ::: Miriam threatens to cause a scandal.",
        "Relays(guy, badNews, anne) ::: Guy relays the bad news to Anne.",
        "Comment(guy, \"strangle miriam\") ::: Guy metaphorically comments that he would like to \"strangle\" Miriam.",
        "Stalks(bruno, miriam) ::: Bruno stalks Miriam.",
        "Strangles(bruno, miriam) ::: Bruno fatally strangles Miriam.",
        "Informs(bruno, guy) ::: Bruno informs Guy that Miriam is dead.",
        "Expects(bruno, murder(guy, bruno'sFather)) ::: Bruno expects Guy to follow through on murdering Bruno's father.",
        "Sends(bruno, houseKey, guy) ::: Bruno sends Guy his house key.",
        "Sends(bruno, map, guy) ::: Bruno sends Guy a map to his father's bedroom.",
        "Sends(bruno, pistol, guy) ::: Bruno sends Guy a pistol."
      ]
    },
    {
      "id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "OnTrain(x) ::: x is on a train.",
        "Claims(x, y) ::: x claims y.",
        "AlibiInconclusive(x) ::: x's alibi is inconclusive.",
        "CouldLeaveTrain(x) ::: x could leave the train in time to commit the murder.",
        "AssignedOfficer(x) ::: an officer is assigned to x.",
        "Trails(x) ::: x is being trailed by an officer.",
        "Flee(x) ::: x flees.",
        "",
        "Premises:",
        "Claims(a_1, OnTrain(a_1)) ::: Guy claims he was on a train at the time of the murder.",
        "AlibiInconclusive(a_1) ::: The police determine Guy's alibi is inconclusive.",
        "CouldLeaveTrain(a_1) ::: Guy could have left the train in time to commit the murder.",
        "¬Arrested(a_1) ::: Guy is not arrested.",
        "AssignedOfficer(a_1) ∧ Trails(a_1) ::: The police assign an officer to trail Guy to ensure he does not flee while they investigate."
      ]
    },
    {
      "id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Introduces(x, y) ::: x introduces himself to y.",
        "Resembles(x, y) ::: x physically resembles y.",
        "Demonstrates(x, y) ::: x demonstrates how to y.",
        "Strangles(x, y) ::: x strangles y.",
        "BlacksOut(x) ::: x blacks out.",
        "Upset(x) ::: x is upset.",
        "Confronts(x, y) ::: x confronts y.",
        "Confesses(x, y) ::: x confesses the truth about y.",
        "",
        "Premises:",
        "Introduces(bruno, anne) ::: Bruno introduces himself to Anne.",
        "Introduces(bruno, barbara) ::: Bruno meets Anne's younger sister, Barbara.",
        "Resembles(barbara, miriam) ::: Barbara physically resembles Miriam.",
        "Demonstrates(bruno, fatallyStrangle) ::: Bruno demonstrates how to fatally strangle someone.",
        "GazeFalls(bruno, barbara) ::: Bruno's gaze happens to fall upon Barbara.",
        "TriggersFlashback(bruno, barbara) ::: Barbara's resemblance to Miriam triggers a flashback for Bruno.",
        "Strangles(bruno, woman) ∧ BlacksOut(bruno) ::: Bruno begins strangling the woman but blacks out before harming her.",
        "Upset(barbara) ::: An upset Barbara tells Anne that, \"His hands were on her throat, but he was strangling me.\"",
        "Confronts(anne, guy) ::: Anne confronts Guy.",
        "Confesses(guy, brunoScheme) ::: Guy confesses the truth about Bruno's crazy scheme.",
        "",
        "Conclusion:",
        "Influenced(bruno, barbara) ::: Bruno's actions are influenced by his flashback triggered by Barbara's resemblance to Miriam."
      ]
    },
    {
      "id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "MurderousIntent(x) ::: x has a murderous intent.",
        "Threatens(x, y) ::: x threatens y to achieve his goals.",
        "Agrees(x, y) ::: x pretends to agree with y.",
        "SneaksInto(x, y) ::: x sneaks into y's location.",
        "Warns(x, y) ::: x warns y of a danger.",
        "Refuses(x, y) ::: x refuses to follow through with y's plan.",
        "SeeksHelp(x) ::: x seeks psychiatric help.",
        "",
        "Premises:",
        "Agrees(a_1, plan) ::: Guy pretends to agree to Bruno's original plan.",
        "SneaksInto(a_1, bedroom) ::: Guy sneaks into Mr. Anthony's bedroom.",
        "Warns(a_1, a_2) ::: Guy intends to warn Mr. Anthony of his son's murderous intent.",
        "MurderousIntent(a_2) ::: Bruno has a murderous intent.",
        "Threatens(a_2, a_1) ::: Bruno threatens Guy to frame him for Miriam's murder.",
        "Refuses(a_1, plan) ::: Guy refuses to follow through with Bruno's plan.",
        "SeeksHelp(a_1) ::: Guy tries to convince Bruno to seek psychiatric help."
      ]
    },
    {
      "id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 5,
      "fols": [
        "Predicates:",
        "Visits(x, y) ::: x visits y.",
        "Informs(x, y, z) ::: x informs y about z.",
        "Intends(x, y) ::: x intends to do y.",
        "Plans(x, y) ::: x plans to do y.",
        "Incriminate(x, y) ::: x incriminates y.",
        "Plant(x, y, z) ::: x plants y at z.",
        "Evade(x, y) ::: x evades y.",
        "FinishMatch(x) ::: x finishes his tennis match.",
        "Reach(x, y) ::: x reaches y.",
        "",
        "Premises:",
        "Visits(anne, marion) ::: Anne visits Bruno's mother, Marion Lorne, to tell her that her son committed a murder.",
        "¬Informs(marion, anne, murder) ::: The befuddled woman discounts the information about the murder.",
        "Intends(bruno, Incriminate(guy)) ::: Bruno intends to incriminate Guy by planting the stolen cigarette lighter.",
        "Plant(bruno, lighter, amusementPark) ::: Bruno plans to plant the stolen lighter at the amusement park.",
        "Plans(anne, Evade(guy, police)) ::: Anne and Guy devise a plan for Guy to evade the police.",
        "FinishMatch(guy) ::: Guy is to finish his tennis match.",
        "Reach(guy, amusementPark) ::: Guy is to reach the amusement park to prevent Bruno from planting the lighter."
      ]
    },
    {
      "id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 6,
      "fols": [
        "Predicates:",
        "Innocent(x) ::: x is innocent of the murder.",
        "MortallyInjured(x) ::: x is mortally injured.",
        "Reveals(x, y) ::: x reveals y.",
        "Plant(x, y, z) ::: x attempts to plant y at location z.",
        "Recognizes(x, y) ::: x recognizes y.",
        "Fights(x, y) ::: x fights y.",
        "Shoots(x, y) ::: x shoots at y.",
        "Misses(x, y) ::: x misses y.",
        "Kills(x, y) ::: x kills y.",
        "FallsOn(x, y) ::: x falls onto y.",
        "SpinsOutOfControl(x) ::: x spins wildly out of control.",
        "Crashes(x) ::: x crashes.",
        "Tells(x, y, z) ::: x tells y that z.",
        "",
        "Premises:",
        "MortallyInjured(a_2) ∧ Reveals(a_2, d_1) ::: Bruno is mortally injured and reveals Guy's lighter before dying.",
        "Innocent(a_1) ::: Guy is innocent of the murder.",
        "∀a_4 (Recognizes(a_4, a_2) ∧ Tells(a_4, police, Innocent(a_1))) ::: The worker who recognized Bruno tells the police that Guy is innocent.",
        "Fights(a_1, a_2) ::: Guy catches up to Bruno, and they fight on the park's carousel.",
        "Shoots(police_officer, a_1) ∧ Misses(police_officer, a_1) ∧ Kills(police_officer, a_3) ::: A police officer shoots at Guy, but his shot misses and kills the carousel operator instead.",
        "FallsOn(a_3, control_panel) ∧ SpinsOutOfControl(carousel) ∧ Crashes(carousel) ::: The dead man falls onto the control panel, and the carousel spins wildly out of control and crashes.",
        "Plant(a_2, d_1, b_3) ::: Bruno attempts to plant Guy's lighter at the Magic Isle.",
        "Reveals(a_2, d_1) ::: Bruno reveals Guy's lighter before dying.",
        "",
        "Conclusion:",
        "Innocent(a_1) ::: Guy is innocent of the murder.",
        "Reveals(a_2, d_1) ::: Bruno reveals Guy's lighter before dying."
      ]
    }
  ],
  "8b5a5e185f5a7d9f240a38d396205831967418ff": [
    {
      "id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Duke(x) ::: x is the Duke of Omnium.",
        "Child(x) ::: x is a child of the Duke of Omnium.",
        "GrownUp(x) ::: x is a grown-up child.",
        "DistantRelationship(x, y) ::: x has a somewhat distant relationship with y.",
        "PrimeMinister(x) ::: x is the Prime Minister.",
        "Bereft(x, y) ::: x is bereft of y.",
        "",
        "Premises:",
        "Duke(a_1) ::: The Duke of Omnium is represented by a_1.",
        "∀x (Child(x) → (Duke(a_1) ∧ GrownUp(x))) ::: All children of the Duke of Omnium are grown-up.",
        "DistantRelationship(a_1, b_0) ::: The Duke has a somewhat distant relationship with his children.",
        "PrimeMinister(a_1) ::: The Duke is the Prime Minister.",
        "Bereft(a_1, Lady Glencora) ∧ Bereft(a_1, c_0) ::: The Duke is bereft of his beloved wife, Lady Glencora, and his political position.",
        "",
        "Conclusion:",
        "∃x (Child(x) ∧ DistantRelationship(a_1, x)) ::: There exists a child of the Duke with whom he has a distant relationship."
      ]
    },
    {
      "id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "Blessing(x, y) ::: x gives a secret blessing to y.",
        "Courtship(x, y) ::: x is courting y.",
        "Friend(x, y) ::: x is a friend of y.",
        "Companion(x, y) ::: x is a companion to y.",
        "Chaperone(x, y) ::: x is an unofficial chaperone for y.",
        "Insist(x, y) ::: x insists that y be informed.",
        "Aware(x, y) ::: x is aware of y.",
        "SeriousRelationship(x, y) ::: x and y are in a serious relationship.",
        "",
        "Premises:",
        "Blessing(LadyGlencora, Courtship(Mary, FrankTregear)) ::: Lady Glencora had given her secret blessing to Mary's courtship by Frank Tregear.",
        "Friend(FrankTregear, LordSilverbridge) ::: Frank Tregear is a friend of Lord Silverbridge.",
        "Companion(MrsFinn, Mary) ∧ Chaperone(MrsFinn, Mary) ::: Mrs. Finn remains as a companion and unofficial chaperone for Mary.",
        "Insist(MrsFinn, Inform(Duke)) ::: Mrs. Finn insists that the Duke be informed of the seriousness of the relationship.",
        "Aware(MrsFinn, SeriousRelationship(Mary, FrankTregear)) ::: Mrs. Finn becomes aware of the seriousness of the relationship between Mary and Frank.",
        "",
        "Conclusion:",
        "¬(Insist(MrsFinn, Inform(Duke)) ∧ Aware(MrsFinn, SeriousRelationship(Mary, FrankTregear))) ::: If Mrs. Finn is not aware of the seriousness of the relationship, she will not insist that the Duke be informed."
      ]
    },
    {
      "id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "BurdenSome(x) ::: x is burdensome.",
        "EntersParliament(x) ::: x enters Parliament.",
        "Proposes(x, y) ::: x proposes to y.",
        "TurnsDown(x, y) ::: x turns down y.",
        "Welcomes(x, y) ::: x welcomes y.",
        "BecomesEnamoured(x, y) ::: x becomes enamoured with y.",
        "AgreesToMarry(x, y) ::: x agrees to marry y.",
        "Disapproves(x, y) ::: x disapproves of y.",
        "Expelled(x) ::: x is expelled from Cambridge.",
        "AttendedDerby(x) ::: x attended the Derby.",
        "",
        "Premises:",
        "BurdenSome(Children) ::: The Duke's two sons prove burdensome.",
        "EntersParliament(LordSilverbridge) ::: Lord Silverbridge follows the wishes of his father by entering Parliament.",
        "Proposes(LordSilverbridge, LadyMabelGrex) ::: Lord Silverbridge proposed to Lady Mabel Grex, whom he has known all his life.",
        "TurnsDown(LadyMabelGrex, LordSilverbridge) ::: Lady Mabel Grex turned down Lord Silverbridge.",
        "AgreesToMarry(IsabelBoncassen, LordSilverbridge) ::: Isabel Boncassen agrees to marry Lord Silverbridge.",
        "Welcomes(a_1, IsabelBoncassen) → AgreesToMarry(IsabelBoncassen, LordSilverbridge) ::: Lord Silverbridge's marriage to Isabel Boncassen is contingent upon the Duke's acceptance of Isabel Boncassen into the family.",
        "Disapproves(a_1, IsabelBoncassen) ::: At first, the Duke disapproves of Isabel Boncassen.",
        "Disapproves(a_1, Daughter'sSuitor) ::: The Duke disapproves even more of his daughter's suitor.",
        "Expelled(gerald) ∧ AttendedDerby(gerald) ::: Gerald, the younger son, gets himself expelled from Cambridge after attending the Derby without permission."
      ]
    },
    {
      "id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Closer(a_1, a_0) ::: The Duke grows closer to his children.",
        "Engaged(a_2) ::: The son is engaged.",
        "Engaged(a_3) ::: The daughter is engaged.",
        "Invited(a_1, c_0) ::: The Duke is invited to take part in the government.",
        "",
        "Premises:",
        "Closer(a_1, b_1) ::: The Duke grows closer to all three of his children.",
        "Engaged(a_2) ::: The Duke allows the engagement of his son.",
        "Engaged(a_3) ::: The Duke allows the engagement of his daughter.",
        "Invited(a_1, c_0) ::: The Duke is invited once more to take a part in the government."
      ]
    }
  ],
  "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409": [
    {
      "id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Producer(x) ::: x is a TV producer.",
        "Interview(x, y) ::: x interviews y.",
        "Airing(x) ::: x is airing a show.",
        "Failure(x) ::: x is a total failure.",
        "BelievesIn(x, y) ::: x believes in the potential of y.",
        "Show(x) ::: x is a TV show.",
        "NormalPerson(x) ::: x is a normal person.",
        "BoringThings(x) ::: x involves boring things.",
        "",
        "Premises:",
        "Producer(cynthia) ::: Cynthia is a TV producer.",
        "Interview(cynthia, ed) ::: Cynthia interviews Ed Pekurny.",
        "Airing(edTV) ::: They start airing the show, which they call Ed TV.",
        "Failure(edTV) ::: The show is a total failure at first.",
        "BelievesIn(cynthia, edTV) ::: Cynthia believes in the potential of Ed TV despite its initial failure.",
        "NormalPerson(ed) ::: Ed Pekurny is a normal person.",
        "BoringThings(edTV) ::: Ed TV involves boring things.",
        "",
        "Conclusion:",
        "¬Failure(edTV) ::: Ed TV is not a total failure in the long run due to Cynthia's belief in its potential."
      ]
    },
    {
      "id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "Popular(x) ::: x is extremely popular.",
        "InRelationship(x, y) ::: x is in a relationship with y.",
        "Cheating(x, y) ::: x is cheating on y.",
        "Insulting(x, y) ::: x is insulting y.",
        "Comfort(x, y) ::: x is comforting y.",
        "HasFeelingsFor(x, y) ::: x has feelings for y.",
        "Kiss(x, y) ::: x kisses y.",
        "LocksOut(x, y) ::: x locks out y.",
        "ShortLived(x, y) ::: x and y's relationship is short-lived.",
        "GrowingInterest(x, y) ::: x is growing more interested in y.",
        "Unappealing(x) ::: x is perceived as unappealing by viewers.",
        "",
        "Premises:",
        "Cheating(ray, shari) ::: Ray is cheating on his girlfriend Shari.",
        "Insulting(shari, ray) ::: Shari is insulting Ray.",
        "Comfort(ed, shari) ::: Ed tries to comfort Shari.",
        "HasFeelingsFor(ed, shari) ::: Ed reveals he has feelings for Shari.",
        "HasFeelingsFor(shari, ed) ::: Shari reveals she has feelings for Ed.",
        "Kiss(ed, shari) ::: Ed and Shari kiss each other.",
        "LocksOut(ed, cameramen) ::: Ed locks out the camera crew.",
        "Popular(edTV) ::: Ed TV suddenly becomes extremely popular.",
        "InRelationship(ed, shari) ::: Ed starts a relationship with Shari.",
        "ShortLived(ed, shari) ::: Ed and Shari's relationship is short-lived.",
        "GrowingInterest(ed, stayingOnTV) ::: Ed grows more interested in staying on TV.",
        "Unappealing(shari) ::: Shari is perceived as unappealing by viewers."
      ]
    },
    {
      "id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "GoesOnShow(x, y) ::: x goes on the show y.",
        "Meets(x, y) ::: x meets y.",
        "Likes(x, y) ::: x takes a liking to y.",
        "WantsToBeWith(x, y) ::: x wants to be with y.",
        "LeavesTown(x) ::: x leaves town.",
        "PlaysFootball(x) ::: x plays football.",
        "Invites(x, y) ::: x invites y to dinner.",
        "Kisses(x, y) ::: x kisses y.",
        "FallsOffTable(x) ::: x falls off the table.",
        "Squishes(x, y) ::: x squishes y.",
        "NeverSees(x, y) ::: x never sees y again.",
        "",
        "Premises:",
        "GoesOnShow(a_1, \"The Tonight Show with Jay Leno\") ::: Ed goes on The Tonight Show with Jay Leno.",
        "Meets(a_1, a_2) ::: Ed meets beautiful model/actress Jill (Elizabeth Hurley).",
        "Likes(a_2, a_1) ::: Jill takes a liking to Ed.",
        "WantsToBeWith(a_2, a_1) ::: Shari tells Ed that she does not want to be with him until the Show stops airing.",
        "LeavesTown(a_2) ::: Shari leaves town.",
        "PlaysFootball(a_1) ::: Ed goes to the park with Ray and some friends to play football.",
        "Invites(a_2, a_1) ::: Jill invites Ed to dinner at her house.",
        "FallsOffTable(a_1) ::: Ed falls off the table.",
        "Squishes(a_1, \"Jill's cat\") ::: Ed squishes Jill's cat.",
        "NeverSees(a_1, a_2) ::: Ed never sees Jill again.",
        "¬(Likes(a_1, a_2)) ::: Ed does not have a relationship with Jill after the incident."
      ]
    },
    {
      "id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Abandoned(a_1) ::: Ed's father abandoned his family.",
        "Visited(a_1, a_0) ::: Ed's father unexpectedly visits Ed.",
        "Informed(a_1, a_2) ::: Ed's father informs Ed about the affair.",
        "Furious(a_1, a_2) ::: Ed is furious with his mother.",
        "Argued(a_1, a_2) ::: Ed argues with his mother.",
        "Called(a_1, b_0) ::: Ed receives a phone call telling him to come to the hospital.",
        "Dead(a_1) ::: Ed's father is dead.",
        "DiedMakingLove(a_1) ::: Ed's father died making love to his wife.",
        "Cheating(a_2, a_0) ::: Ed's mother was cheating on Al.",
        "",
        "Premises:",
        "Abandoned(dennis) ::: Ed's father (Dennis Hopper) abandoned his family when Ed was 13.",
        "Visited(dennis, ed) ::: Dennis Hopper unexpectedly visits Ed.",
        "Informed(dennis, shari) ::: Dennis Hopper informs Ed that he left because Shari was having an affair with Al.",
        "Furious(ed, shari) ::: Ed is furious with his mother.",
        "Argued(ed, shari) ::: Ed argues with his mother.",
        "Called(ed, hospital) ::: Ed gets a phone call telling him to come to the hospital.",
        "Dead(dennis) ::: The doctor says that Ed's father is dead.",
        "DiedMakingLove(dennis) ::: Ed's father died making love to his wife.",
        "Cheating(shari, dennis) ::: Ed's mother had an affair with Dennis Hopper while married to Al.",
        "¬(DiedMakingLove(dennis) ∧ Cheating(shari, al)) ::: Ed's perception of the situation is incorrect regarding who died."
      ]
    },
    {
      "id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "Disheartened(a_1) ::: Ed is disheartened.",
        "Depressed(a_1) ::: Ed is depressed.",
        "WantsToEndShow(a_1) ::: Ed wants to end the show.",
        "With(a_1, a_2) ::: Ed is with Shari.",
        "InBathroom(a_2, b_0) ::: Shari is in the women's bathroom.",
        "Chases(a_1, a_2) ::: Ed chases Shari.",
        "StaysWith(a_2, a_0) ::: Shari stays with her brother.",
        "FamilyFilmed(a_0) ::: Ed's family is being filmed.",
        "InterestingPerson(a_0) ::: The most interesting person is being shown.",
        "",
        "Premises:",
        "Disheartened(a_1) ∧ Depressed(a_1) ::: Ed becomes disheartened and is depressed after the funeral.",
        "Chases(a_1, a_2) ∧ InBathroom(a_2, b_0) ::: Ed chases Shari until she stops in the women's bathroom.",
        "WantsToEndShow(a_1) ∧ With(a_1, a_2) ::: Ed wants to end the show to be with Shari.",
        "StaysWith(a_2, a_0) ::: Shari is staying with her brother for his birthday.",
        "FamilyFilmed(a_0) ∧ InterestingPerson(a_0) ::: All of Ed's family are being filmed, but they show the most interesting person.",
        "",
        "Conclusion:",
        "WantsToEndShow(a_1) ::: Ed wants to end the show to be with Shari."
      ]
    },
    {
      "id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 5,
      "fols": [
        "Predicates:",
        "Gives(x, y, z) ::: x gives y to z.",
        "BestDirt(x, y) ::: x provides the best amount of \"dirt\" on y.",
        "Announces(x, y) ::: x announces y.",
        "FeelsSorryFor(x, y) ::: x feels sorry for y.",
        "Secret(x, y) ::: x is a secret of y.",
        "StopsAiring(x) ::: x stops airing the show.",
        "LiquidPump(x) ::: x pumps a liquid into his penis to get an erection.",
        "",
        "Premises:",
        "Gives(a_1, 10000, a_0) ::: Ed offers $10,000 to the person who can give him the best amount of \"dirt\" on the producers.",
        "BestDirt(a_0, producers) ::: The person provides the best amount of \"dirt\" on the producers.",
        "Announces(a_1, secret) ::: Ed announces the secret.",
        "FeelsSorryFor(a_2, a_1) ::: Cynthia feels sorry for Ed.",
        "Secret(secret, a_2) ::: The secret is that the main producer has to pump a liquid into his penis to get an erection.",
        "StopsAiring(show) ::: They stop airing the show before Ed can announce who it is.",
        "",
        "Conclusion:",
        "¬Announces(a_1, whoItIs) ::: Ed does not announce who it is before they stop airing the show."
      ]
    },
    {
      "id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 6,
      "fols": [
        "Predicates:",
        "RenewRelationship(x, y) ::: x and y renew their relationship.",
        "Celebrate(x) ::: x celebrates something.",
        "Predict(x, y) ::: x predicts y.",
        "Forgotten(x) ::: x is forgotten.",
        "",
        "Premises:",
        "RenewRelationship(a_1, a_2) ::: Ed and Shari renew their relationship.",
        "Celebrate(a_1) ::: Ed celebrates the fact that TV news panelists predict Ed will be forgotten in a short period of time.",
        "Predict(c, Forgotten(a_1)) ::: TV news panelists predict that Ed will be forgotten."
      ]
    }
  ],
  "907e3c83c161299b8f178e98399d4e2cc0dcd57f": [
    {
      "id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Graduated(x) ::: x has graduated from university.",
        "AspiringFilmmaker(x) ::: x is an aspiring filmmaker.",
        "TravelsTo(x, y) ::: x travels to y.",
        "JobAvailable(x) ::: x has a job available.",
        "WaitsFor(x, y) ::: x waits for y.",
        "Encourages(x, y, z) ::: x encourages y to do z.",
        "GivesJob(x, y, z) ::: x gives y a job on z.",
        "FindsPlaceFor(x, y, z) ::: x finds a suitable place for y and z.",
        "Impresses(x, y, z) ::: x impresses y and z.",
        "",
        "Premises:",
        "Graduated(colin) ::: Colin graduated from university in 1956.",
        "AspiringFilmmaker(colin) ::: Colin is an aspiring filmmaker.",
        "TravelsTo(colin, london) ::: Colin travels to London to get a job.",
        "¬JobAvailable(olivier) ::: There are no jobs available on Olivier's next production.",
        "WaitsFor(colin, olivier) ::: Colin decides to wait for Olivier.",
        "Encourages(vivien, olivier, givesJob(colin, olivier, thePrinceAndTheShowgirl)) ::: Vivien encourages Olivier to give Colin a job on his upcoming film The Prince and the Showgirl.",
        "FindsPlaceFor(colin, marilyn, arthur) ::: Colin's first task is to find a suitable place for Marilyn and her husband, Arthur Miller, to stay while they are in England.",
        "Impresses(colin, olivier, arthurPJacobs) ::: Colin impresses Olivier and Marilyn's publicist, Arthur P. Jacobs.",
        "",
        "Conclusion:",
        "GivesJob(olivier, colin, thePrinceAndTheShowgirl) ::: Olivier gives Colin a job on The Prince and the Showgirl due to Vivien Leigh's encouragement."
      ]
    },
    {
      "id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "Discomfort(x) ::: x is uncomfortable around photographers.",
        "Relaxed(x) ::: x is relaxed at the press conference.",
        "Frustrated(x, y) ::: x is frustrated with y.",
        "Assists(x, y) ::: x assists y with her lines.",
        "Attracted(x, y) ::: x is attracted to y.",
        "Praise(x, y) ::: x praises y.",
        "Defend(x, y) ::: x defends y against criticism.",
        "Late(x) ::: x is late to an event.",
        "",
        "Premises:",
        "Discomfort(a_2) ∧ Late(a_2, readThrough) ∧ Frustrated(a_6, a_2) ∧ Assists(a_4, a_2) ∧ Attracted(a_1, a_7) ∧ Praise(a_3, a_2) ∧ Defend(a_3, a_2) ::: Marilyn is initially uncomfortable around photographers, is late to the read-through, Olivier is frustrated with her, Paula assists Marilyn with her lines, Colin is attracted to Lucy, and Sybil praises and defends Marilyn.",
        "Relaxed(a_2) ::: Marilyn's discomfort around photographers decreases at the press conference.",
        "Frustrated(a_6, a_2) ::: Marilyn's lateness to the read-through frustrates Olivier.",
        "Assists(a_4, a_2) ::: Paula Strasberg assists Marilyn with her lines.",
        "Attracted(a_1, a_7) → Date(a_1, a_7) ::: Colin's attraction to Lucy leads to a date.",
        "Praise(a_3, a_2) ∧ Defend(a_3, a_2) ::: Sybil Thorndike's praise and defense of Marilyn occur in response to Olivier's frustration."
      ]
    },
    {
      "id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "UnderstandsImpact(x, y) ::: x understands the impact of his actions on y.",
        "Captivates(x, y) ::: x captivates those around her/him.",
        "Infatuated(x, y) ::: x develops an infatuation with y.",
        "Reacts(x, y) ::: x reacts to y.",
        "",
        "Premises:",
        "¬UnderstandsImpact(olivier, marilyn) ::: Olivier does not understand the impact of his actions on Marilyn.",
        "Captivates(marilyn, a_0) ::: Marilyn's presence captivates those around her.",
        "Infatuated(colin, marilyn) ::: Colin develops an infatuation with Marilyn.",
        "Reacts(lucy, infatuation(colin, marilyn)) ::: Lucy reacts to Colin's infatuation with Marilyn."
      ]
    },
    {
      "id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "SpendTimeTogether(x, y) ::: x and y spend time together.",
        "Tour(x, y, z) ::: x gives a tour of y to z.",
        "ShowAround(x, y, z) ::: x shows y around z.",
        "SkinnyDipping(x, y) ::: x and y go skinny dipping.",
        "Kiss(x, y) ::: x kisses y.",
        "FoundBy(x, y) ::: x is found by y.",
        "LockedInRoom(x) ::: x is locked in her room.",
        "Invite(x, y) ::: x invites y to lie next to her.",
        "WakesUpInPain(x) ::: x wakes up in pain.",
        "ClaimsMiscarriage(x) ::: x claims she is having a miscarriage.",
        "TendsTo(x, y) ::: x tends to y.",
        "WantsToForget(x, y) ::: x wants to forget y.",
        "ReturnsToSet(x) ::: x returns to the set.",
        "Praises(x, y) ::: x praises y.",
        "Reveals(x, y) ::: x reveals y.",
        "Asks(x, y) ::: x asks y.",
        "Replies(x, y) ::: x replies to y.",
        "Thanks(x, y) ::: x thanks y.",
        "KissesGoodbye(x, y) ::: x kisses y goodbye.",
        "DrivesTo(x, y) ::: x drives y to a location.",
        "",
        "Premises:",
        "SpendTimeTogether(colin, marilyn) ::: Colin and Marilyn spend the day together.",
        "Tour(owenMorshead, windsorCastle, marilyn) ::: Owen Morshead gives a tour of Windsor Castle to Marilyn.",
        "ShowAround(colin, marilyn, etonCollege) ::: Colin shows Marilyn around Eton College.",
        "SkinnyDipping(colin, marilyn) ::: Colin and Marilyn go skinny dipping in the River Thames.",
        "Kiss(marilyn, colin) ::: Marilyn kisses Colin.",
        "FoundBy(marilyn, rogerSmith) ::: Marilyn is found by Roger Smith.",
        "LockedInRoom(marilyn) ::: Marilyn has locked herself in her room.",
        "Invite(marilyn, colin) ::: Marilyn invites Colin to lie next to her on the bed.",
        "WakesUpInPain(marilyn) ::: Marilyn wakes up in pain.",
        "ClaimsMiscarriage(marilyn) ::: Marilyn claims she is having a miscarriage.",
        "TendsTo(doctor, marilyn) ::: A doctor tends to Marilyn.",
        "WantsToForget(marilyn, relationshipWithColin) ::: Marilyn wants to forget her relationship with Colin to focus on being a good wife to Arthur.",
        "ReturnsToSet(marilyn) ::: Marilyn returns to the set to complete the film.",
        "Praises(olivier, marilyn) ::: Olivier praises Marilyn.",
        "Reveals(olivier, desireToDirectAgain) ::: Olivier reveals she has killed his desire to direct again.",
        "Asks(lucy, colin) ::: Lucy asks Colin if Marilyn broke his heart.",
        "Replies(colin, lucy) ::: Colin replies that she did.",
        "Replies(lucy, colin) ::: Lucy replies that he needed it.",
        "Thanks(marilyn, colin) ::: Marilyn thanks Colin for helping her.",
        "KissesGoodbye(marilyn, colin) ::: Marilyn kisses Colin goodbye.",
        "DrivesTo(rogerSmith, airport) ::: Roger drives Marilyn to the airport."
      ]
    }
  ],
  "9292406d5193d3402195df7e5647fd168da2d15a": [
    {
      "id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "PublicRadioJournalist(x) ::: x is a public radio journalist.",
        "Age(x, y) ::: x is y years old.",
        "LivesIn(x, y) ::: x lives in location y.",
        "HasGirlfriend(x, y) ::: x has girlfriend y.",
        "Disapproves(x, y) ::: x disapproves of y.",
        "Brash(x) ::: x is brash.",
        "Outspoken(x) ::: x is outspoken.",
        "Introverted(x) ::: x is introverted.",
        "MildMannered(x) ::: x is mild-mannered.",
        "",
        "Premises:",
        "PublicRadioJournalist(a_1) ∧ Age(a_1, 27) ∧ LivesIn(a_1, Seattle) ::: Adam Lerner is a 27-year-old public radio journalist in Seattle.",
        "HasGirlfriend(a_1, a_2) ::: Adam has an artist girlfriend Rachael.",
        "Disapproves(a_3, a_2) ::: Kyle disapproves of Rachael.",
        "Brash(a_3) ∧ Outspoken(a_3) ∧ Introverted(a_1) ∧ MildMannered(a_1) ::: Kyle is brash and outspoken, while Adam is introverted and mild-mannered."
      ]
    },
    {
      "id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "HasCondition(a_1, b_0) ::: Adam has a medical condition.",
        "UndergoesTreatment(a_1, c_0) ::: Adam undergoes treatment for his condition.",
        "CaresFor(a_2, a_1) ::: Rachael cares for Adam.",
        "RejectsOffer(a_1, a_2) ::: Adam rejects the offer from Rachael.",
        "Uncomfortable(a_2) ::: Rachael is uncomfortable during Adam's chemotherapy treatments.",
        "Late(a_2) ::: Rachael is often late to pick up Adam.",
        "CaresFor(a_2, a_3) ::: Diane cares for her husband Richard.",
        "DesiresToCare(a_2, a_1) ::: Diane desires to care for Adam.",
        "Conflicts(a_1, a_2) ::: There is a conflict between Adam's wish and Diane's desire.",
        "Influences(a_3, a_1) ::: Kyle's actions influence Adam.",
        "BreaksUp(a_1, a_2) ::: Adam breaks up with Rachael.",
        "FollowsLead(a_1, a_3) ::: Adam follows Kyle's lead.",
        "",
        "Premises:",
        "HasCondition(a_1, b_0) ∧ UndergoesTreatment(a_1, c_0) ::: Adam learns he has schwannoma neurofibrosarcoma and must undergo chemotherapy.",
        "Uncomfortable(a_2) ∧ Late(a_2) ∧ CaresFor(a_2, a_1) ∧ BreaksUp(a_1, a_2) ::: Rachael's discomfort and lateness during Adam's chemotherapy treatments contribute to the strain in their relationship, leading Adam to break up with her.",
        "DesiresToCare(a_2, a_1) ∧ RejectsOffer(a_1, a_2) ::: Diane's desire to care for Adam conflicts with Adam's wish for Rachael to take care of him, which he rejects.",
        "Influences(a_3, a_1) ::: Kyle's actions influence Adam's behavior and decisions regarding relationships.",
        "FollowsLead(a_1, a_3) ::: After breaking up with Rachael, Adam starts to follow Kyle's lead in using his illness to pick up women.",
        "",
        "Conclusion:",
        "Conflicts(a_1, a_2) ::: There is a conflict between Adam's wish for Rachael to care for him and Diane's desire to care for him."
      ]
    },
    {
      "id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "Skeptical(x) ::: x is skeptical about therapy.",
        "Therapist(x) ::: x is a therapist.",
        "PhDStudent(x) ::: x is a PhD candidate.",
        "OpenUp(x, y) ::: x opens up to y about his disease.",
        "DevelopRapport(x, y) ::: x develops a rapport with y.",
        "BlurLines(x, y) ::: x blurs the lines of their relationship with y.",
        "UnderstandSituation(x, y) ::: x helps y understand a situation.",
        "FeelStress(x, y) ::: x feels stress about y's medical condition.",
        "Friend(x, y) ::: x is a friend of y.",
        "Advice(x, y) ::: x gives advice to y.",
        "SmokeMarijuana(x, y) ::: x smokes marijuana with y.",
        "",
        "Premises:",
        "Skeptical(a_1) ∧ Therapist(a_2) ∧ PhDStudent(a_2) ::: Adam skeptically begins going to a young and inexperienced therapist, Katherine McKay, a PhD candidate doing the clinical aspect of her thesis at the hospital.",
        "OpenUp(a_1, a_2) ::: Adam slowly begins to open up to Katherine about his disease and how it is affecting him.",
        "DevelopRapport(a_1, a_2) ::: Adam and Katherine develop a rapport both in and outside of their sessions.",
        "BlurLines(a_1, a_2) ::: Their relationship as doctor-patient and friends begins to blur.",
        "UnderstandSituation(a_2, a_1) ::: Katherine helps Adam understand his mother's situation.",
        "FeelStress(a_1, b_1) ::: Adam's loved ones feel just as much stress as Adam while he fights the disease.",
        "Friend(a_1, a_3) ∧ Friend(a_1, a_4) ::: Adam befriends Alan and Mitch, two older cancer patients undergoing chemotherapy.",
        "Advice(a_3, a_1) ∧ Advice(a_4, a_1) ::: Alan and Mitch offer Adam advice.",
        "SmokeMarijuana(a_3, a_1) ∧ SmokeMarijuana(a_4, a_1) ::: Alan and Mitch smoke marijuana with Adam."
      ]
    },
    {
      "id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Fears(a_1) ::: Adam has fears of his own potential death and unknown future.",
        "TreatmentNotWorking(a_1) ::: Adam's treatment is not working.",
        "NeedsSurgery(a_1) ::: Adam needs to undertake a risky surgery.",
        "Argument(a_1, a_3) ::: Adam has an argument with Kyle.",
        "DemandsToDrive(a_1, a_3) ::: Adam demands to drive Kyle's car.",
        "Drunk(a_3) ::: Kyle is drunk.",
        "NoLicense(a_1) ::: Adam does not have a driver's license.",
        "NearlyCausesAccident(a_1) ::: Adam nearly causes an accident.",
        "Criticizes(a_1, a_3) ::: Adam criticizes Kyle.",
        "Calls(a_1, a_2) ::: Adam calls Katherine.",
        "WishesForGirlfriend(a_1, a_2) ::: Adam wishes he had a girlfriend like Katherine.",
        "Tired(a_1) ::: Adam is tired.",
        "StaysAt(a_1, a_3) ::: Adam stays at Kyle's.",
        "FindsBook(a_1, d) ::: Adam finds a book entitled 'Facing Cancer Together'.",
        "Cares(a_3, a_1) ::: Kyle sincerely cares about Adam's struggle.",
        "Helps(a_3, a_1) ::: Kyle helps Adam throughout his illness.",
        "",
        "Premises:",
        "Fears(a_1) ::: Adam's fears of his own potential death and unknown future become more evident after Mitch dies.",
        "TreatmentNotWorking(a_1) ::: Adam is informed that his treatment is not working.",
        "NeedsSurgery(a_1) ::: Adam needs to undertake a risky surgery as a last resort.",
        "Argument(a_1, a_3) ::: Adam has an argument with Kyle the night before his surgery.",
        "DemandsToDrive(a_1, a_3) ∧ Drunk(a_3) ∧ NoLicense(a_1) ::: Adam demands to drive Kyle's car because Kyle is drunk, even though Adam does not have a driver's license.",
        "NearlyCausesAccident(a_1) ::: Adam nearly causes an accident.",
        "Criticizes(a_1, a_3) ::: Adam criticizes Kyle for seemingly not taking his illness seriously.",
        "Calls(a_1, a_2) ∧ WishesForGirlfriend(a_1, a_2) ∧ Tired(a_1) ::: Adam calls Katherine and tells her that he wishes he had a girlfriend like her, but also says he is tired and just wants it to be over.",
        "StaysAt(a_1, a_3) ::: Adam stays at Kyle's that night.",
        "FindsBook(a_1, d) ::: Adam finds a book entitled 'Facing Cancer Together' in the bathroom.",
        "Cares(a_3, a_1) ∧ Helps(a_3, a_1) ::: The book proves to Adam that Kyle sincerely cares about his struggle and has been helping him the best way he knows how.",
        "",
        "Conclusion:",
        "Cares(a_3, a_1) ::: Kyle sincerely cares about Adam's struggle."
      ]
    },
    {
      "id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "GoodFriend(x, y) ::: x is a good friend to y.",
        "Apologizes(x, y) ::: x apologizes to y.",
        "FinalFarewells(x) ::: x says final farewells.",
        "UndergoesSurgery(x) ::: x undergoes surgery.",
        "ToldByDoctor(x, y) ::: x is told by the doctor about y.",
        "BoneDegradationWorseThanThought(x) ::: x has bone degradation worse than thought.",
        "TumorRemovedSuccessfully(x) ::: x's tumor was removed successfully.",
        "WillRecover(x) ::: x will recover.",
        "",
        "Premises:",
        "GoodFriend(a_3, a_1) ∧ Apologizes(a_1, a_3) ::: Adam embraces Kyle for being a good friend and apologizes for what he said the previous night.",
        "FinalFarewells(a_1) ::: Adam says what could be his final farewells to his family.",
        "UndergoesSurgery(a_1) ::: Adam undergoes his surgery.",
        "InWaitingRoom(a_2) ∧ InWaitingRoom(a_3) ::: Katherine goes to the waiting room where she inadvertently meets Adam's family and Kyle.",
        "ToldByDoctor(a_3, BoneDegradationWorseThanThought(a_1) ∧ TumorRemovedSuccessfully(a_1) ∧ WillRecover(a_1)) ::: After the surgery, Kyle, Diane, and Katherine are told by the doctor that although the bone degradation was worse than they had thought, the tumor was removed successfully, and that Adam would recover."
      ]
    },
    {
      "id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 5,
      "fols": [
        "Predicates:",
        "ReadyForDate(x, y) ::: x is ready for a date with y.",
        "Encourages(x, y) ::: x encourages y.",
        "Cleans(x, y) ::: x cleans y.",
        "LetsIn(x, y) ::: x lets y inside.",
        "FreeOfCancer(x) ::: x is free of cancer.",
        "",
        "Premises:",
        "ReadyForDate(a_1, a_2) ::: Adam is ready for a date with Katherine.",
        "Encourages(a_3, a_1) ::: Kyle encourages Adam.",
        "Cleans(a_3, c_1) ::: Kyle cleans the incision on Adam's back from the surgery.",
        "LetsIn(a_1, a_2) ::: Adam lets Katherine inside.",
        "FreeOfCancer(a_1) ::: Adam is free of cancer.",
        "",
        "Conclusion:",
        "ReadyForDate(a_1, a_2) ∧ FreeOfCancer(a_1) ::: Adam is ready for a date with Katherine and is free of cancer."
      ]
    }
  ],
  "935775d945bc210b0928bffb6924e06e1ef9a9dd": [
    {
      "id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Shy(x) ::: x is a shy person.",
        "Friendless(x) ::: x is a friendless person.",
        "Bibliophile(x) ::: x is a bibliophile.",
        "Teased(x) ::: x is teased by bullies.",
        "Hides(x, y) ::: x hides from y.",
        "Asks(x, y) ::: x asks about y.",
        "AdvisesAgainst(x, y) ::: x advises against y.",
        "Seizes(x, y) ::: x seizes y.",
        "PromisesToReturn(x, y) ::: x promises to return y.",
        "HidesIn(x, y) ::: x hides in y.",
        "Describes(x, y) ::: x describes y.",
        "FallsIll(x) ::: x falls ill.",
        "TaskedToDiscover(x, y) ::: x is tasked to discover y.",
        "Believes(x, y) ::: x believes that y is true.",
        "Given(x, y) ::: x is given y.",
        "SetsOut(x) ::: x sets out on a quest.",
        "Summons(x, y) ::: x summons y.",
        "ToKill(x, y) ::: x is tasked to kill y.",
        "",
        "Premises:",
        "Shy(bastian) ∧ Friendless(bastian) ∧ Bibliophile(bastian) ∧ Teased(bastian) ::: Bastian Balthazar Bux is a shy and friendless bibliophile 12-year-old, teased by bullies from school.",
        "Hides(bastian, bullies) ::: On his way to school, he hides from the bullies in a bookstore.",
        "Asks(bastian, book) ∧ AdvisesAgainst(coreander, book) ::: Bastian asks about one of the books he sees, but Mr. Coreander advises against it.",
        "Seizes(bastian, book) ∧ PromisesToReturn(bastian, book) ::: Bastian seizes the book, leaving a note promising to return it.",
        "HidesIn(bastian, attic) ::: Bastian hides in the school's attic to read.",
        "Describes(book, fantasia) ::: The book describes the world of Fantasia slowly being devoured by a force called \"The Nothing\".",
        "FallsIll(empress) ::: Fantasia's ruler, the Childlike Empress, has fallen ill.",
        "TaskedToDiscover(atreyu, cure) ::: Atreyu is tasked to discover the cure for the Childlike Empress to stop the Nothing.",
        "Believes(atreyu, empressWell) ::: Atreyu believes that once the Empress is well, the Nothing will no longer be a threat.",
        "Given(atreyu, auryn) ::: Atreyu is given a medallion named the AURYN that can guide and protect him in the quest.",
        "SetsOut(atreyu) ::: As Atreyu sets out, the Nothing summons Gmork.",
        "Summons(nothing, gmork) ::: The Nothing summons Gmork, a wolf-like creature, to kill Atreyu."
      ]
    },
    {
      "id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "Quest(x) ::: x is on a quest.",
        "Advisor(x) ::: x is an advisor.",
        "Protects(x, y) ::: x protects y.",
        "Lost(x, y) ::: x is lost to y.",
        "Surprised(x, y) ::: x is surprised by y.",
        "Hears(x, y) ::: x hears y.",
        "Directs(x, y) ::: x directs y to y.",
        "Succumbs(x, y) ::: x succumbs to y.",
        "SavedBy(x, y) ::: x is saved by y.",
        "Explains(x, y) ::: x explains y.",
        "Faces(x, y) ::: x faces y.",
        "Enters(x, y) ::: x enters y.",
        "Reveals(x, y) ::: x reveals y to y.",
        "Recognizes(x, y) ::: x recognizes y.",
        "ThrowsAside(x, y) ::: x throws aside y.",
        "ContinuesReading(x) ::: x continues to read.",
        "Tells(x, y) ::: x tells y.",
        "Finds(x, y) ::: x finds y.",
        "Gives(x, y, z) ::: x gives y to z.",
        "",
        "Premises:",
        "Quest(atreyu) ::: Atreyu is on a quest.",
        "Advisor(morla) ::: Morla is an advisor.",
        "Protects(auryn, atreyu) ::: AURYN protects Atreyu.",
        "Lost(artax, swamp) ::: Artax is lost to the Swamps of Sadness.",
        "Surprised(atreyu, morla) ::: Atreyu is surprised by Morla's sudden appearance.",
        "Hears(atreyu, scream) ::: Atreyu hears a scream.",
        "Hears(morla, scream) ::: Morla hears a scream.",
        "Directs(morla, southernOracle) ::: Morla directs Atreyu to the Southern Oracle.",
        "Succumbs(atreyu, exhaustion) ::: Atreyu succumbs to exhaustion.",
        "SavedBy(atreyu, falkor) ::: Atreyu is saved by Falkor.",
        "Explains(gnomes, trials) ::: The gnomes explain that Atreyu will face various trials.",
        "Faces(atreyu, trials) ::: Atreyu faces various trials.",
        "Enters(atreyu, oracle) ::: Atreyu enters the Oracle.",
        "Reveals(mirror, atreyu) ::: The mirror reveals Atreyu's true self.",
        "Recognizes(bastian, himself) ::: Bastian recognizes the boy as himself.",
        "ThrowsAside(bastian, book) ::: Bastian throws the book aside.",
        "ContinuesReading(bastian) ::: Bastian continues to read.",
        "Tells(southernOracle, atreyu) ::: The Southern Oracle tells Atreyu the only way to save the Empress is to find a human child.",
        "Finds(atreyu, humanChild) ::: Atreyu must find a human child.",
        "Gives(atreyu, newName, empress) ::: Atreyu gives a new name to the Empress.",
        "",
        "Conclusion:",
        "Finds(atreyu, humanChild) → Gives(atreyu, newName, empress) ::: Atreyu must find a human child to save the Empress by giving her a new name."
      ]
    },
    {
      "id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "HumanChild(x) ::: x is a human child.",
        "Succeed(x, y) ::: x has succeeded in y.",
        "Brings(x, y, z) ::: x brings y to z.",
        "CallsOut(x, y) ::: x calls out y.",
        "LosesConsciousness(x) ::: x loses consciousness.",
        "ConsumedByNothing(x) ::: x is consumed by the Nothing.",
        "InLocation(x, y) ::: x is in location y.",
        "Flee(x, y) ::: x flees from y.",
        "KnockedFrom(x, y) ::: x is knocked from y.",
        "Finds(x, y) ::: x finds y.",
        "Reveals(x, y) ::: x reveals y.",
        "FendsOff(x, y) ::: x fends off y.",
        "Rescues(x, y) ::: x rescues y.",
        "",
        "Premises:",
        "Flee(atreyu, nothing) ::: Atreyu and Falkor flee before the Nothing consumes the Southern Oracle.",
        "KnockedFrom(atreyu, falkor) ::: Atreyu is knocked from Falkor's back into the Sea of Possibilities.",
        "Finds(atreyu, paintings) ::: Atreyu finds a series of paintings depicting his quest.",
        "Reveals(gmork, humanityImagination) ::: Gmork reveals that Fantasia represents humanity's imagination.",
        "ConsumedByNothing(ruins) ::: The Nothing begins to consume the ruins.",
        "FendsOff(atreyu, gmork) ::: Atreyu fends off and kills Gmork.",
        "Rescues(falkor, atreyu) ::: Falkor rescues Atreyu in time.",
        "InLocation(atreyu, ivoryTower) ::: Atreyu is in the Empress's Ivory Tower.",
        "Succeed(atreyu, quest) ::: The Empress assures Atreyu that he has succeeded in his quest.",
        "Brings(atreyu, humanChild, empress) ::: Atreyu brings a human child to the Empress.",
        "CallsOut(bastian, newName) ::: Bastian calls out the name he had selected.",
        "LosesConsciousness(bastian) ::: Bastian loses consciousness.",
        "ConsumedByNothing(tower) ::: The Nothing begins to consume the Tower.",
        "",
        "Conclusion:",
        "HumanChild(bastian) ::: Bastian is a human child.",
        "Succeed(atreyu, quest) ::: Atreyu has succeeded in his quest."
      ]
    },
    {
      "id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "PowerToRestore(x) ::: x has the power to bring Fantasia back.",
        "Imagination(x) ::: x uses imagination.",
        "WishForAnything(x) ::: x can wish for anything.",
        "Restored(c) ::: c is restored.",
        "Reunited(x, y) ::: x is reunited with y.",
        "InBlackness(x) ::: x is in blackness.",
        "FliesOn(x, y) ::: x flies on the back of y.",
        "ChaseDown(x, y) ::: x chases down y.",
        "",
        "Premises:",
        "PowerToRestore(a_1) ∧ Imagination(a_1) ∧ PowerToRestore(a_1) ::: Bastian has the power to bring Fantasia back with his imagination using the power of the AURYN.",
        "WishForAnything(a_1) ::: Bastian can wish for anything.",
        "Restored(c_1) ::: Fantasia is restored.",
        "Reunited(a_3, a_2) ::: Atreyu has been reunited with Artax.",
        "InBlackness(a_1) ::: Bastian finds himself in blackness.",
        "FliesOn(a_1, b_1) ::: Bastian flies on Falkor's back.",
        "ChaseDown(a_1, e) ::: Bastian chases down the bullies.",
        "",
        "Conclusion:",
        "Restored(c_1) ::: Fantasia has been restored."
      ]
    }
  ],
  "999a532b45f030c8f382f0f92fc51b3d12fd821c": [
    {
      "id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "KnowsIdentity(x) ::: x knows her own identity.",
        "Helps(x, y) ::: x helps y.",
        "Confused(x) ::: x is confused.",
        "AssumesName(x, y) ::: x assumes the name y.",
        "Finds(x, y, z) ::: x finds y in z.",
        "Injured(x) ::: x is injured.",
        "InShock(x) ::: x is in shock.",
        "",
        "Premises:",
        "¬KnowsIdentity(a_1) ::: Rita does not know her own identity.",
        "Helps(a_4, a_1) ::: Betty Elms helps Rita remember her identity.",
        "Confused(a_1) ::: The dark-haired woman (Rita) is confused.",
        "AssumesName(a_1, \"Rita\") ::: The dark-haired woman assumes the name \"Rita\" after seeing a poster for the film Gilda (1946).",
        "Finds(a_4, money, a_2) ::: Betty finds a large amount of money in Rita's purse.",
        "Finds(a_4, blueKey, a_2) ::: Betty finds an unusual blue key in Rita's purse.",
        "Injured(a_1) ∧ InShock(a_1) ::: The dark-haired woman is injured and in shock after the car accident.",
        "",
        "Conclusion:",
        "¬KnowsIdentity(a_1) ∧ Helps(a_4, a_1) ::: Rita does not know her own identity and Betty helps her remember it."
      ]
    },
    {
      "id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "Commandeered(x, y) ::: x's film is commandeered by y.",
        "NegativelyImpacted(x, y) ::: x's life is negatively impacted by y's demands.",
        "ProvidesAdvice(x, y) ::: x provides advice to y for their own good.",
        "Dreamt(x, y) ::: x dreamt about y.",
        "Investigate(x, y) ::: x investigates y.",
        "CollapsesInFright(x) ::: x collapses in fright.",
        "HasAffair(x, y) ::: x has an affair with y.",
        "ClosedCreditLine(x) ::: x's bank has closed their line of credit.",
        "Broke(x) ::: x is broke.",
        "Meets(x, y) ::: x meets y.",
        "Urges(x, y) ::: x urges y to do something.",
        "",
        "Premises:",
        "Commandeered(adamKesher, mobsters) ::: Adam Kesher's film is commandeered by mobsters.",
        "NegativelyImpacted(adamKesher, mobsters) ::: Adam Kesher's life is negatively impacted by the mobsters' demands.",
        "ProvidesAdvice(cowboy, adamKesher) ::: The Cowboy provides advice to Adam Kesher for his own good.",
        "Dreamt(patrickFischler, horribleFigure) ::: Patrick Fischler dreamt about a horrible figure behind the diner.",
        "Investigate(patrickFischler, horribleFigure) ::: Patrick Fischler investigates the horrible figure.",
        "CollapsesInFright(patrickFischler) ::: Patrick Fischler collapses in fright.",
        "HasAffair(diane, michaelCooke) ::: Diane has an affair with Michael Cooke.",
        "ClosedCreditLine(adamKesher) ::: Adam Kesher's bank has closed his line of credit.",
        "Broke(adamKesher) ::: Adam Kesher is broke.",
        "Meets(adamKesher, cowboy) ::: Adam Kesher meets The Cowboy.",
        "Urges(cowboy, adamKesher) ::: The Cowboy urges Adam Kesher to cast Camilla Rhodes for his own good."
      ]
    },
    {
      "id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "ServedBy(x, y) ::: x is served by waitress y.",
        "Remembers(x, y) ::: x remembers y.",
        "Finds(x, y) ::: x finds y in the phone book.",
        "Calls(x, y) ::: x calls y.",
        "Answers(x) ::: x answers the phone.",
        "HighlyPraised(x) ::: x is highly praised.",
        "TakesToSet(x, y) ::: x takes y to the set of a film.",
        "Auditions(x) ::: x gives an audition.",
        "Declares(x, y) ::: x declares y as the girl.",
        "LocksEyes(x, y) ::: x locks eyes with y.",
        "Flees(x) ::: x flees from a situation.",
        "LateToMeet(x, y) ::: x is late to meet y.",
        "",
        "Premises:",
        "ServedBy(Rita, Diane) ∧ Remembers(Rita, \"Diane Selwyn\") ::: Rita is served by waitress Diane, which causes her to remember the name \"Diane Selwyn\".",
        "Finds(Betty, Diane) ∧ Calls(Betty, Diane) ∧ ¬Answers(Diane) ::: Betty finds Diane Selwyn in the phone book and calls her, but she does not answer.",
        "HighlyPraised(Betty) ∧ TakesToSet(castingAgent, Betty) ∧ Auditions(Camilla) ∧ Declares(Adam, Camilla) ::: Betty goes to an audition, where her performance is highly praised, and a casting agent takes her to the set of a film called The Sylvia North Story, where Camilla Rhodes gives an audition and Adam declares, \"This is the girl.\"",
        "LocksEyes(Betty, Adam) ∧ Flees(Betty) ∧ LateToMeet(Betty, friend) ::: Betty smiles shyly as she locks eyes with Adam, but she flees before she can meet him, saying that she is late to meet a friend."
      ]
    },
    {
      "id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "GoesTo(x, y) ::: x goes to location y.",
        "BreaksIn(x, y) ::: x breaks into location y.",
        "Finds(x, y) ::: x finds object y.",
        "Dead(x) ::: x is dead.",
        "Disguises(x, y) ::: x disguises herself as y.",
        "HasSex(x, y) ::: x has sex with y.",
        "AwakeAt(x, t) ::: x is awake at time t.",
        "Insists(x, y) ::: x insists on doing y.",
        "Explains(x, y) ::: x explains something in language y.",
        "Sings(x) ::: x sings.",
        "Collapses(x) ::: x collapses.",
        "FindsObject(x, y) ::: x finds object y.",
        "Unlocks(x, y) ::: x unlocks object y.",
        "Disappears(x) ::: x disappears.",
        "Falls(x) ::: x falls to the floor.",
        "",
        "Premises:",
        "GoesTo(a_4, b_2) ∧ BreaksIn(a_4, b_2) ∧ ¬(GoesTo(a_4, a_1)) ::: Betty goes to Diane Selwyn's apartment and breaks in when no one answers the door.",
        "Finds(a_4, a_3) ∧ Dead(a_3) ::: In the bedroom, Betty finds the body of a woman (Camilla) who has been dead for several days.",
        "AwakeAt(a_4, 2) ∧ Insists(a_4, GoTo(b_3)) ::: Betty and Rita awake at 2 a.m., when Rita insists they go to an eerie theater called Club Silencio.",
        "Explains(a_2, severalLanguages) ::: On stage, a man explains in several languages that everything is an illusion.",
        "Sings(a_2) ∧ Collapses(a_2) ::: A woman begins singing then collapses, although her vocals continue.",
        "Finds(a_4, c_1) ::: Betty finds a blue key in her purse that matches Rita's key.",
        "Unlocks(a_4, c_1) ∧ Disappears(a_4) ::: Rita unlocks the box, and it falls to the floor with a thump.",
        "",
        "Conclusion:",
        "Disguises(a_4, blondeWig) ::: Rita disguises herself with a blonde wig.",
        "Falls(c_1) ::: The blue box falls to the floor with a thump."
      ]
    },
    {
      "id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "InDeepDepression(x) ::: x is in a deep depression.",
        "UnrequitedLove(x, y) ::: x has unrequited love for y.",
        "LooksLike(x, y) ::: x looks exactly like y.",
        "Attends(x, y) ::: x attends an event at location y.",
        "Kisses(x, y) ::: x kisses y.",
        "Crying(x) ::: x is crying.",
        "Loves(x, y) ::: x is in love with y.",
        "InvitedTo(x, y) ::: x is invited to an event by y.",
        "WakesUp(x) ::: x wakes up from sleep.",
        "AppearsInDoorway(x, y) ::: x appears in the doorway of y.",
        "States(x, y) ::: x states something y.",
        "",
        "Premises:",
        "InDeepDepression(a_1) ::: Diane Selwyn is in a deep depression.",
        "UnrequitedLove(a_1, a_3) ::: Diane Selwyn has unrequited love for Camilla Rhodes.",
        "LooksLike(a_1, a_4) ::: Diane Selwyn looks exactly like Betty.",
        "WakesUp(a_1) ::: Diane Selwyn wakes up in her bed.",
        "AppearsInDoorway(a_2, b_2) ::: The Cowboy appears in the doorway of Diane Selwyn's bedroom.",
        "States(a_1, \"I came to Hollywood when my aunt died, and I met Camilla at an audition for The Sylvia North Story.\") ::: Diane states her background.",
        "Attends(a_1, b_0) ::: Diane attends a party at Adam's house on Mulholland Drive.",
        "InvitedTo(a_1, a_3) ::: Camilla invites Diane to the party.",
        "Loves(a_2, a_3) ::: Adam appears to be in love with Camilla.",
        "Kisses(a_3, a_4) ::: Another woman kisses Camilla.",
        "Crying(a_1) ::: Diane watches, crying.",
        "",
        "Conclusion:",
        "Crying(a_1) ::: Diane Selwyn is crying while watching the interaction between Camilla and Adam."
      ]
    },
    {
      "id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 5,
      "fols": [
        "Predicates:",
        "Meets(x, y) ::: x meets with y.",
        "Gives(x, y, z) ::: x gives y to z.",
        "ServedBy(x, y) ::: x is served by y.",
        "Tells(x, y, z) ::: x tells y z.",
        "Asks(x, y, z) ::: x asks y z.",
        "Sees(x, y) ::: x sees y.",
        "TerrorizedBy(x, y) ::: x is terrorized by y.",
        "Runs(x) ::: x runs.",
        "Shoots(x) ::: x shoots herself/himself.",
        "Whispers(x, y) ::: x whispers y.",
        "",
        "Premises:",
        "Meets(diane, hit_man) ::: Diane meets with the hit man.",
        "Gives(diane, camilla_photo, hit_man) ::: Diane gives Camilla's photo to the hit man.",
        "ServedBy(hit_man, betty) ::: The hit man is served by a waitress named Betty.",
        "Tells(hit_man, diane, \"when the job is done, you will find a blue key\") ::: The hit man tells Diane that when the job is done, she will find a blue key.",
        "Asks(diane, hit_man, \"what, if anything, does the key open?\") ::: Diane asks the hit man what, if anything, the key opens.",
        "Laughs(hit_man) ::: The hit man just laughs.",
        "Sees(diane, man_with_nightmare) ::: Diane sees the man who had the nightmare standing at the counter.",
        "TerrorizedBy(diane, hallucinations) ::: Diane is terrorized by hallucinations.",
        "Runs(diane) ::: Diane runs screaming to her bed.",
        "Shoots(diane) ::: Diane shoots herself.",
        "Whispers(woman_at_club, \"Silencio\") ::: A woman at the club whispers \"Silencio\"."
      ]
    }
  ],
  "9bfa931a5513a490a9cc14f4c5062f5edfbc0f32": [
    {
      "id": "9bfa931a5513a490a9cc14f4c5062f5edfbc0f32",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "BeginsAt(x, t) ::: x begins at time t.",
        "EndsAt(x, t) ::: x ends at time t.",
        "LocatedAt(x, p) ::: x is located at place p.",
        "Time(x) ::: x is a specific time.",
        "",
        "Premises:",
        "BeginsAt(book, 2PM) ∧ LocatedAt(book, BritishLinenCompany) ∧ Time(25August1751) ::: The book begins precisely at 2 PM on 25 August 1751, outside the British Linen Company in Edinburgh, Scotland.",
        "EndsAt(kidnapped, 2PM) ∧ LocatedAt(kidnapped, BritishLinenCompany) ∧ Time(25August1751) ::: Kidnapped ends at 2 PM on 25 August 1751, outside the British Linen Company in Edinburgh, Scotland."
      ]
    },
    {
      "id": "9bfa931a5513a490a9cc14f4c5062f5edfbc0f32",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "AttemptsToGainJustice(x, y) ::: x attempts to gain justice for y.",
        "Kidnapped(x) ::: x is kidnapped.",
        "Confined(x, z) ::: x is confined on z.",
        "PressCaseForInnocence(x, y) ::: x presses the case for the innocence of y.",
        "InLoveWith(x, y) ::: x is in love with y.",
        "EducatedBy(x, y) ::: x receives education from y.",
        "HeldInPrison(x) ::: x is held in prison.",
        "CondemnedToDeath(x) ::: x is condemned to death.",
        "",
        "Premises:",
        "AttemptsToGainJustice(a_1, a_3) ::: David Balfour attempts to gain justice for James Stewart.",
        "Kidnapped(a_1) ::: David is kidnapped.",
        "Confined(a_1, b_0) ::: David is confined on the Bass Rock.",
        "PressCaseForInnocence(a_1, a_3) ::: David presses the case for James' innocence.",
        "HeldInPrison(a_3) ::: James More is held in prison.",
        "CondemnedToDeath(a_3) ::: James More is condemned to death.",
        "InLoveWith(a_1, a_4) ::: David falls in love with Catriona MacGregor Drummond.",
        "EducatedBy(a_1, a_2) ::: David receives education in the manners and morals of polite society from Barbara Grant.",
        "",
        "Conclusion:",
        "¬AttemptsToGainJustice(a_1, a_3) ::: David Balfour's attempts to gain justice for James Stewart fail due to being kidnapped and confined."
      ]
    },
    {
      "id": "9bfa931a5513a490a9cc14f4c5062f5edfbc0f32",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "Travel(x, y) ::: x travels to location y.",
        "Studies(x, y) ::: x studies subject y.",
        "TakesUnderProtection(x, y) ::: x takes y under his protection.",
        "ProvesDisappointment(x) ::: x proves to be a disappointment.",
        "DrinksExcessively(x) ::: x drinks a great deal.",
        "LivesOff(x, y) ::: x lives off the largesse of y.",
        "LearnsOfDeath(x, y) ::: x learns of the death of y.",
        "GainsInheritance(x) ::: x gains a substantial inheritance.",
        "FastFriends(x, y) ::: x and y are fast friends.",
        "SendsPayment(x, y) ::: x sends payment to y.",
        "FindsWayTo(x, y) ::: x finds their way to location y.",
        "Joins(x, y) ::: x joins y.",
        "Berates(x, y) ::: x berates y.",
        "UnderstandsWomen(x) ::: x understands women.",
        "",
        "Premises:",
        "Travel(a_1, Holland) ::: David travels to Holland.",
        "Studies(a_1, law) ::: David studies law.",
        "TakesUnderProtection(a_1, a_4) ::: David takes Catriona under his protection.",
        "ProvesDisappointment(a_3) ::: James More proves to be a disappointment.",
        "DrinksExcessively(a_3) ::: James More drinks a great deal.",
        "LivesOff(a_3, a_1) ::: James More lives off David's largesse.",
        "LearnsOfDeath(a_1, Ebenezer) ::: David learns of the death of his uncle Ebenezer.",
        "GainsInheritance(a_1) ::: David gains a substantial inheritance.",
        "FastFriends(a_1, a_4) ::: David and Catriona are fast friends.",
        "SendsPayment(a_1, a_3) ::: David sends payment to James More.",
        "FindsWayTo(a_3, b_1) ::: James and Catriona find their way to Dunkirk.",
        "Joins(a_2, a_1) ::: Alan Breck joins David in Leyden.",
        "Berates(a_2, a_1) ::: Alan berates David for not understanding women.",
        "∀a_1 (FastFriends(a_1, a_4) → (Misunderstandings(a_1, a_4) → (Leaves(a_4, a_3) ∧ Leaves(a_3, a_4)))) ::: David's misunderstandings with Catriona lead to her and James More leaving.",
        "",
        "Conclusion:",
        "Leaves(a_4, a_3) ::: Catriona leaves with James More.",
        "Leaves(a_3, a_4) ::: James More leaves with Catriona."
      ]
    },
    {
      "id": "9bfa931a5513a490a9cc14f4c5062f5edfbc0f32",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Likes(x, y) ::: x likes y.",
        "Detests(x, y) ::: x detests y.",
        "Gomeral(x) ::: x is a gomeral (foolish person).",
        "Women(x) ::: x is a woman.",
        "Man(y) ::: y is a man.",
        "",
        "Premises:",
        "∀x (Women(x) → (∃y (Likes(x, y)) ∧ ∃z (Detests(x, z)))) ::: There are only two types of relationships women have with men: affection (likes) or disdain (detests).",
        "∀x (Likes(x, a_1) → (Detests(x, a_2) ∧ Detests(x, a_3))) ::: If a woman likes David, then she detests Alan and James More.",
        "∀x (Detests(x, a_1) → ¬Likes(x, a_1)) ::: If a woman detests David, then she does not like him.",
        "Gomeral(a_1) ::: David is a gomeral.",
        "",
        "Conclusion:",
        "∀x (Women(x) → (Likes(x, a_1) ⊕ Detests(x, a_1))) ::: For every woman, she either likes David or detests him."
      ]
    },
    {
      "id": "9bfa931a5513a490a9cc14f4c5062f5edfbc0f32",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "Betrays(x, y) ::: x betrays y.",
        "CapturedBy(x, y) ::: x is captured by y.",
        "Flees(x, y) ::: x flees with y.",
        "Married(x, y) ::: x is married to y.",
        "ReturnsTo(x, y) ::: x returns to y.",
        "RaisesFamily(x) ::: x raises a family.",
        "",
        "Premises:",
        "Betrays(a_3, a_2) ::: James More betrays Alan.",
        "CapturedBy(a_2, c) ::: Alan is captured by the British warship.",
        "Flees(a_1, a_4) ∧ Flees(a_2, a_4) ::: David and Catriona flee with Alan.",
        "Married(a_1, a_4) ::: David and Catriona are married.",
        "ReturnsTo(a_1, b_3) ::: David returns to Scotland.",
        "RaisesFamily(a_1) ::: David raises a family.",
        "",
        "Conclusion:",
        "Flees(a_1, a_2) ::: David flees with Alan.",
        "ReturnsTo(a_4, b_3) ::: Catriona returns to Scotland."
      ]
    }
  ],
  "9c05142dcf6d0705d4619800a741d7b337b21116": [
    {
      "id": "9c05142dcf6d0705d4619800a741d7b337b21116",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "PettyCrook(x) ::: x is a petty crook.",
        "GivenChoice(x, y) ::: x is given the choice of y.",
        "MedicalProcedure(x) ::: x is a medical procedure.",
        "Volunteers(x, y) ::: x volunteers to join y.",
        "TrainedToMimic(x, y) ::: x is trained to mimic y.",
        "BaseUnderIce(x) ::: x is a base built under the ice.",
        "TeamedWith(x, y) ::: x is teamed with y.",
        "Archaeologist(x) ::: x is an archaeologist.",
        "MimicTrader(x) ::: x mimics a trader of the Beaker culture.",
        "",
        "Premises:",
        "PettyCrook(RossMurdock) ::: Ross Murdock is a petty crook.",
        "GivenChoice(RossMurdock, MedicalProcedure(Rehabilitation)) ::: Ross Murdock is given the choice of facing a new medical procedure called Rehabilitation.",
        "Volunteers(RossMurdock, OperationRetrograde) ::: Ross Murdock volunteers to join Operation Retrograde.",
        "BaseUnderIce(Base) ::: There is a base built under the ice near the North Pole.",
        "TeamedWith(RossMurdock, GordonAshe) ::: Ross Murdock is teamed with archaeologist Gordon Ashe.",
        "TrainedToMimic(RossMurdock, TraderOfBeakerCulture) ::: Ross Murdock is trained to mimic a trader of the Beaker culture of Bronze-Age Europe."
      ]
    },
    {
      "id": "9c05142dcf6d0705d4619800a741d7b337b21116",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "Bombed(x) ::: x has been bombed.",
        "Destroyed(x) ::: x has been destroyed.",
        "WrathOfLurgha(x) ::: x is due to the wrath of Lurgha.",
        "DirectionOfBomber(x, y) ::: x is the direction whence the bomber came.",
        "Clue(x, y) ::: x is a clue pointing to y.",
        "OccupiedBySovietBase(x) ::: x is occupied by the Soviet base.",
        "Survivor(x) ::: x is a lone survivor of the bombing.",
        "GoTo(x, y) ::: x goes to y.",
        "",
        "Premises:",
        "Bombed(outpost) ∧ Destroyed(outpost) ∧ WrathOfLurgha(outpost) ::: The outpost has been bombed and destroyed by the wrath of Lurgha, according to two of the natives.",
        "∃x (DirectionOfBomber(x, area) ∧ Clue(x, area)) ::: There exists a direction whence the bomber came and other clues pointing to the area occupied by the Soviet base.",
        "Survivor(mcneil) ::: McNeil is the lone survivor of the bombing.",
        "GoTo(ross, area) ∧ GoTo(ashe, area) ∧ GoTo(mcneil, area) ::: Ross, Ashe, and McNeil go to the area occupied by the Soviet base."
      ]
    },
    {
      "id": "9c05142dcf6d0705d4619800a741d7b337b21116",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "Building(x, y) ::: x is building y.",
        "LearningFrom(x, y) ::: x learns from y.",
        "Separated(x, y, z) ::: x is separated from y and z.",
        "GoesInto(x, y) ::: x goes into y.",
        "Finds(x, y) ::: x finds y.",
        "CapturedBy(x, y) ::: x is captured by y.",
        "",
        "Premises:",
        "Building(ross, beakerTradingPost) ∧ Building(ashe, beakerTradingPost) ∧ Building(mcneil, beakerTradingPost) ::: Ross, Ashe, and McNeil begin building a Beaker trading post.",
        "LearningFrom(ross, locals) ∧ LearningFrom(ashe, locals) ∧ LearningFrom(mcneil, locals) ::: Ross, Ashe, and McNeil learn from the locals.",
        "Separated(ross, ashe, mcneil) ::: Ross gets separated from Ashe and McNeil.",
        "GoesInto(ross, tabooArea) ::: Ross goes into the taboo area alone.",
        "Finds(ross, sovietBase) ::: Ross finds the Soviet base.",
        "CapturedBy(ross, reds) ::: Ross is captured by the Reds."
      ]
    },
    {
      "id": "9c05142dcf6d0705d4619800a741d7b337b21116",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Transferred(x, y) ::: x is transferred to y.",
        "Abandoned(x, y) ::: x is abandoned by y.",
        "ClimbsOut(x, y) ::: x climbs out of y.",
        "FollowsTrail(x, y) ::: x follows the trail leading away from y.",
        "Enters(x, y) ::: x enters y.",
        "FallsThrough(x, y) ::: x falls through y.",
        "",
        "Premises:",
        "Transferred(ross, soviet_base) ::: Ross is transferred to a Soviet base.",
        "Abandoned(ross, reds) ::: The Reds abandon Ross.",
        "ClimbsOut(ross, crevice) ::: Ross climbs out of the crevice into which he was shoved.",
        "FollowsTrail(ross, soviet_base) ::: Ross follows the trail leading away from the Soviet base.",
        "Enters(ross, globe) ::: Ross enters the globe.",
        "FallsThrough(ross, panel) ::: Ross falls through a panel into a tub full of transparent-red gel."
      ]
    },
    {
      "id": "9c05142dcf6d0705d4619800a741d7b337b21116",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "Healed(x) ::: x's wounds are healed.",
        "Hungry(x) ::: x is hungry.",
        "Thirsty(x) ::: x is thirsty.",
        "Wears(x, y) ::: x wears clothing y.",
        "Offers(x, y) ::: x offers y to someone.",
        "Explores(x, y) ::: x explores y.",
        "Recaptured(x, y) ::: x is recaptured by y.",
        "Activates(x, y) ::: x activates y.",
        "FaceToFace(x, y) ::: x comes face to face with y.",
        "Humanoid(x) ::: x is a humanoid.",
        "BaldHead(x) ::: x has a large bald head.",
        "",
        "Premises:",
        "Healed(ross) ∧ ¬Hungry(ross) ∧ ¬Thirsty(ross) ::: Ross discovers that all of his wounds are healed, he is no longer hungry or thirsty.",
        "¬Wears(ross, beakerman_clothing) ∧ Wears(ross, skin_tight_suit) ::: Ross's Beakerman clothing is gone, and he is offered a skin-tight suit made of an iridescent dark-blue fabric.",
        "Explores(ross, ship) ::: Ross explores what is clearly some kind of ship.",
        "Recaptured(ross, reds) ::: Ross is recaptured by the Reds.",
        "Activates(ross, communication_system) ::: Ross activates the ship’s communication system.",
        "FaceToFace(ross, humanoid) ::: Ross comes face to face with a hostile-looking humanoid.",
        "Humanoid(humanoid) ∧ BaldHead(humanoid) ::: The humanoid has a large bald head."
      ]
    },
    {
      "id": "9c05142dcf6d0705d4619800a741d7b337b21116",
      "paragraph_id": 5,
      "fols": [
        "Predicates:",
        "Interrogated(x, y) ::: x is interrogated by y.",
        "InterruptedBy(x, y) ::: x is interrupted by y.",
        "Reunited(x, y, z) ::: x is reunited with y and z.",
        "Escape(x) ::: x escapes.",
        "Steal(x, y) ::: x steals y.",
        "Attack(x, y) ::: x attacks y.",
        "Leave(x, y) ::: x leaves y.",
        "MakeWayTo(x, y) ::: x makes their way to y.",
        "PickedUpBy(x, y) ::: x is picked up by y.",
        "",
        "Premises:",
        "Interrogated(ross, reds) ∧ InterruptedBy(interrogated(ross, reds), explosions) ::: The Reds’ interrogation of Ross is interrupted by explosions that rock the base.",
        "Reunited(ross, ashe, mcneil) ∧ Escape(ross) ∧ Escape(ashe) ∧ Escape(mcneil) ::: Ross is reunited with Ashe and McNeil and the three men escape.",
        "Steal(ross, recordingTapes) ::: The three men pause only to steal some recording tapes.",
        "Leave(ross, timeTravelBuilding) ∧ Escape(ross) ∧ Escape(ashe) ∧ Escape(mcneil) ::: The men leave the time-travel building and escape from the village.",
        "Attack(baldies, men) ::: The alien Baldies attack the men.",
        "MakeWayTo(ross, river) ∧ MakeWayTo(ashe, river) ∧ MakeWayTo(mcneil, river) ::: The men make their way to the river.",
        "PickedUpBy(ross, submarine) ∧ PickedUpBy(ashe, submarine) ∧ PickedUpBy(mcneil, submarine) ::: The men are picked up by their submarine.",
        "",
        "Conclusion:",
        "Escape(ross) ∧ Escape(ashe) ∧ Escape(mcneil) ::: Ross, Ashe, and McNeil escape together."
      ]
    },
    {
      "id": "9c05142dcf6d0705d4619800a741d7b337b21116",
      "paragraph_id": 6,
      "fols": [
        "Predicates:",
        "Captured(x) ::: x is captured by warriors from a barbarian tribe.",
        "Escaped(x) ::: x escapes from captivity.",
        "Hunting(x) ::: x is being hunted by the Baldies.",
        "Reaches(x, y) ::: x reaches location y.",
        "TelepathicHypnosis(x, y) ::: x attempts to capture y with telepathic hypnosis.",
        "Flees(x) ::: x flees from a situation.",
        "Takes(x, y) ::: x takes y to a location.",
        "Indicates(x, y) ::: x indicates information about y.",
        "WantsToBePartOf(x, y) ::: x wants to be part of y.",
        "",
        "Premises:",
        "Captured(ross) ::: Ross is captured by warriors from a barbarian tribe.",
        "Escaped(ross) ::: Ross escapes from captivity.",
        "Hunting(ross) ::: The Baldies are hunting Ross.",
        "Reaches(ross, camp) ::: Ross reaches the camp occupied by Ashe and/or McNeil.",
        "TelepathicHypnosis(baldies, ross) ::: The Baldies attempt to capture Ross with telepathic hypnosis.",
        "Flees(baldies) ::: The Baldies flee when Kelgarries and his men arrive.",
        "Takes(men, ross) ::: The men take Ross to the sub and home.",
        "Indicates(tapes, alien_spaceships) ::: The tapes Ross stole indicate other alien spaceships abandoned on Earth.",
        "WantsToBePartOf(ross, operationRetrograde) ::: Ross wants to be part of the action in Operation Retrograde."
      ]
    },
    {
      "id": "9c05142dcf6d0705d4619800a741d7b337b21116",
      "paragraph_id": 7,
      "fols": [
        "Predicates:",
        "Modified(x, y) ::: x modified y.",
        "Change(x, y) ::: x is a change in y.",
        "",
        "Premises:",
        "Modified(norton, version1958) ∧ Change(change1, text) ∧ Change(change2, text) ∧ Change(change3, text) ::: The 2000 version: Norton modified the 1958 version by making three changes in the text."
      ]
    },
    {
      "id": "9c05142dcf6d0705d4619800a741d7b337b21116",
      "paragraph_id": 8,
      "fols": [
        "Predicates:",
        "ResetStory(x, y) ::: x reset the story in year y.",
        "ShiftAction(x, y) ::: x shifted the action futureward by y generations.",
        "",
        "Premises:",
        "ResetStory(a, twentyFirstCentury) ::: She reset the story in the first quarter of the Twenty-First Century.",
        "ShiftAction(a, oneGeneration) ::: She shifted the action futureward by a full generation."
      ]
    },
    {
      "id": "9c05142dcf6d0705d4619800a741d7b337b21116",
      "paragraph_id": 9,
      "fols": [
        "Predicates:",
        "Reds(x) ::: x refers to the Reds.",
        "Russians(x) ::: x refers to the Russians.",
        "GreaterRussia(x) ::: x refers to Greater Russia.",
        "SovietUnion(x) ::: x refers to the Soviet Union.",
        "",
        "Premises:",
        "Reds(a) → Russians(a) ::: The Reds have become the Russians.",
        "SovietUnion(b) → GreaterRussia(b) ::: The Soviet Union has been replaced by Greater Russia."
      ]
    },
    {
      "id": "9c05142dcf6d0705d4619800a741d7b337b21116",
      "paragraph_id": 10,
      "fols": [
        "Predicates:",
        "SpaceTravel(x) ::: x is space travel.",
        "LunarLandings(x) ::: x refers to lunar landings.",
        "Satellites(x) ::: x refers to satellites.",
        "RidiculedAsImpossible(x) ::: x is ridiculed as impossible.",
        "RidiculedAsInfeasible(x) ::: x is ridiculed as infeasible.",
        "GoneBeyond(x, y) ::: x has gone beyond y.",
        "",
        "Premises:",
        "¬GoneBeyond(SpaceTravel, LunarLandings) ::: Space travel has not gone beyond the first lunar landings.",
        "¬GoneBeyond(SpaceTravel, Satellites) ::: Space travel has not gotten beyond the first attempts to put satellites into orbit.",
        "RidiculedAsInfeasible(SpaceTravel) ::: Space travel is publicly ridiculed as infeasible instead of being ridiculed as impossible."
      ]
    }
  ],
  "9d9741c1e26478633f439ec30de0329a5f4c02a7": [
    {
      "id": "9d9741c1e26478633f439ec30de0329a5f4c02a7",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Troubled(x) ::: x is a troubled person.",
        "Teenager(x) ::: x is a teenager.",
        "MotherCommittedSuicide(x) ::: x's mother committed suicide.",
        "DealtWithFeelingsProperly(x) ::: x has dealt with feelings properly.",
        "Visits(x, y) ::: x visits location y.",
        "VideoArcade(x) ::: x is a video arcade.",
        "TestMarketed(x) ::: x is being test marketed.",
        "HypeUp(x, y) ::: x hypes up y.",
        "DonorSoul(x) ::: x is a donor's soul.",
        "",
        "Premises:",
        "Troubled(a_1) ∧ Teenager(a_1) ∧ MotherCommittedSuicide(a_1) ∧ ¬DealtWithFeelingsProperly(a_1) ::: Alex Manning is a troubled suburban teenager whose mother committed suicide and has not dealt with her feelings properly.",
        "Visits(a_1, c_2) ::: Alex Manning and her friends visit the local video arcade known as \"Dante's Inferno.\"",
        "VideoArcade(c_2) ::: \"Dante's Inferno\" is a video arcade.",
        "TestMarketed(d_0) ::: The new virtual reality arcade game called \"Arcade\" is being test marketed.",
        "HypeUp(a_2, d_0) ::: The computer company CEO hypes up the game \"Arcade\" as if his job is depending on it."
      ]
    },
    {
      "id": "9d9741c1e26478633f439ec30de0329a5f4c02a7",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "Imprisoned(x) ::: x is imprisoned inside the virtual reality world.",
        "Villain(x) ::: x is a villain in the game.",
        "OnceBoy(x) ::: x was once a little boy.",
        "BeatenToDeath(x) ::: x was beaten to death by his mother.",
        "UsedBrainCells(x) ::: x used some of the boy's brain cells.",
        "Realistic(x) ::: x is realistic.",
        "Deadly(x) ::: x is deadly.",
        "KnewProblem(x) ::: x knew there would be a problem.",
        "TriedConvince(x, y) ::: x tried to convince y.",
        "HaltRelease(x) ::: x halted the game's release.",
        "UnorthodoxDecision(x) ::: x made an unorthodox decision.",
        "",
        "Premises:",
        "Imprisoned(teenagers) ::: The teenagers who play the game and lose are being imprisoned inside the virtual reality world.",
        "Villain(Arcade) ∧ OnceBoy(Arcade) ∧ BeatenToDeath(Arcade) ::: \"Arcade\" was once a little boy who was beaten to death by his mother.",
        "UsedBrainCells(Vertigo/Tronics) ∧ Realistic(Arcade) ∧ Deadly(game) ::: The computer company felt it would be a good idea to use some of the boy's brain cells in order to make the game's villain more realistic, but it made the game deadly.",
        "KnewProblem(programmer) ∧ TriedConvince(programmer, Vertigo/Tronics) ∧ ¬HaltRelease(Vertigo/Tronics) ::: The game's programmer knew there would be a problem with this, and even tried to convince the computer company, Vertigo/Tronics, to halt the game's release, but failed.",
        "UnorthodoxDecision(Vertigo/Tronics) ::: The company's decision to use human brain cells in the game's development was unorthodox."
      ]
    },
    {
      "id": "9d9741c1e26478633f439ec30de0329a5f4c02a7",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "Enlist(x, y) ::: x enlists the help of y.",
        "HeadTo(x, y) ::: x heads to y.",
        "Release(x, y) ::: x releases y from a virtual prison.",
        "Taunt(x, y) ::: x taunts y.",
        "FinalShowdown(x, y) ::: x has a final showdown with y.",
        "Friends(x) ::: x refers to Alex's friends.",
        "EvilBoy(x) ::: x refers to the evil little boy.",
        "",
        "Premises:",
        "Enlist(alex, programmer) ∧ HeadTo(alex, arcade) ::: Alex and Nick enlist the help of the game's programmer and head to the video arcade.",
        "Release(alex, friends) ∧ Release(alex, evilBoy) ::: Alex is able to release her friends from a virtual prison and also ended up freeing the evil little boy.",
        "Taunt(evilBoy, alex) ::: The evil little boy taunts Alex in the final moments of the film.",
        "FinalShowdown(nick, arcade) ::: Nick and Alex have a final showdown with \"Arcade\".",
        "",
        "Conclusion:",
        "Release(alex, friends) ∧ Release(alex, evilBoy) ::: Alex's actions lead to the release of both friends and the evil little boy."
      ]
    },
    {
      "id": "9d9741c1e26478633f439ec30de0329a5f4c02a7",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "WalkingAway(x, y) ::: x is walking away from y.",
        "LaidToRest(x) ::: x's soul is laid to rest.",
        "EndsOnHappierNote(f) ::: film f ends on a happier note.",
        "InFilm(x, f) ::: x is in film f.",
        "",
        "Premises:",
        "EndsOnHappierNote(d_1) ::: The original CGI version of the film ends on a somewhat happier note.",
        "WalkingAway(a_1, c_2) ∧ WalkingAway(b_1, c_2) ∧ WalkingAway(a_2, c_2) ::: Alex, her friends, and Albert are walking away from Dante's Inferno.",
        "LaidToRest(c_1) ::: The donor's soul is seemingly laid to rest. ",
        "InFilm(a_1, d_1) ∧ InFilm(a_2, d_1) ∧ InFilm(b_1, d_1) ::: Alex, Albert, and her friends are in the original CGI version of the film."
      ]
    }
  ],
  "a62274041e562a4bfbc5f7c5c7f3aa427c178c9e": [
    {
      "id": "a62274041e562a4bfbc5f7c5c7f3aa427c178c9e",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Invited(x, y) ::: x is invited to y's dinner party.",
        "Father(x) ::: x is Ellie's father.",
        "Fiancé(x) ::: x is Ellie's fiancé.",
        "Eccentric(x) ::: x is eccentric.",
        "Inventor(x) ::: x is an inventor.",
        "House(x) ::: x is a house.",
        "ShapeOf(x, y) ::: x is built in the shape of y.",
        "RunningOutOfMoney(x) ::: x is running out of money.",
        "NeedsToInvent(x, y) ::: x needs to invent y.",
        "LastInvention(x, y) ::: x's last invention is y.",
        "Loves(x, y) ::: x loves y.",
        "IntendsToMarry(x, y) ::: x intends to marry y.",
        "Ruthless(x) ::: x is ruthless.",
        "Bumbling(x) ::: x is bumbling.",
        "Conflicts(x, y) ::: x conflicts with y.",
        "SensibleChoice(x, y) ::: x is the sensible choice for y.",
        "",
        "Premises:",
        "Invited(a_3, a_4) ::: Ellie Dunn is invited to Captain Shotover's dinner party.",
        "Father(a_4) ::: Captain Shotover is Ellie's father.",
        "Fiancé(a_2) ::: Boss Mangan is Ellie's fiancé.",
        "Eccentric(a_4) ::: Captain Shotover is eccentric.",
        "Inventor(a_4) ::: Captain Shotover is an inventor.",
        "House(a_4) ::: Captain Shotover's house is a house.",
        "ShapeOf(a_4, stern) ::: Captain Shotover's house is built in the shape of the stern of a ship.",
        "RunningOutOfMoney(a_4) ::: Captain Shotover is running out of money.",
        "NeedsToInvent(a_4, bombs) ::: Captain Shotover needs to invent bombs.",
        "LastInvention(a_4, lifeboat) ::: Captain Shotover's last invention is a lifeboat.",
        "IntendsToMarry(a_3, a_2) ::: Ellie intends to marry Boss Mangan.",
        "Loves(a_3, a_5) ::: Ellie loves Hector.",
        "Ruthless(a_2) ::: Boss Mangan is ruthless.",
        "Bumbling(a_4) ::: Captain Shotover is bumbling.",
        "Conflicts(Loves(a_3, a_5), IntendsToMarry(a_3, a_2)) ::: Ellie's love for Hector conflicts with her intention to marry Boss Mangan.",
        "SensibleChoice(a_2, a_3) ::: Marriage to Mangan will be the sensible choice for Ellie."
      ]
    },
    {
      "id": "a62274041e562a4bfbc5f7c5c7f3aa427c178c9e",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "Captured(x) ::: x is captured.",
        "Prosecute(x) ::: x is prosecuted.",
        "TurnIn(x) ::: x turns themselves in.",
        "PayNotToProsecute(x) ::: x is paid not to prosecute.",
        "OldCrewman(x) ::: x is an old crewman of Shotover.",
        "Confesses(x) ::: x confesses something.",
        "RealBurglar(x) ::: x is a real burglar.",
        "GetsCaptured(x) ::: x deliberately gets captured.",
        "CharitableAssistance(x) ::: x seeks charitable assistance.",
        "Married(x, y) ::: x is married to y.",
        "Lament(x, y) ::: x laments about y.",
        "Suggests(x, y) ::: x suggests y to another person.",
        "Dead(x) ::: x is dead.",
        "",
        "Premises:",
        "Captured(burglar) ::: A burglar is captured.",
        "¬Prosecute(burglar) ::: They say they do not want to prosecute him.",
        "TurnIn(burglar) → PayNotToProsecute(burglar) ::: The burglar insists he will turn himself in unless they pay him not to.",
        "OldCrewman(burglar) ::: The burglar is one of Shotover's old crewmen.",
        "Confesses(burglar) ::: He confesses that he is not a real burglar.",
        "GetsCaptured(burglar) → CharitableAssistance(burglar) ::: The burglar deliberately gets himself captured to get charitable assistance from his victims.",
        "Lament(Shotover, youngerGeneration) ::: Shotover laments that the younger generation have lost their romance.",
        "Suggests(Ellie, marry(Shotover)) ::: Ellie suggests that she should marry Shotover.",
        "Married(Shotover, blackJamaicanWife) ::: He says he's already married to a black Jamaican wife.",
        "¬Dead(blackJamaicanWife) ::: It's possible she's now dead.",
        "",
        "Conclusion:",
        "¬RealBurglar(burglar) ::: The burglar is not a real burglar.",
        "¬Prosecute(burglar) â†§ TurnIn(burglar) ::: The burglar does not want to be prosecuted and insists on turning himself in."
      ]
    },
    {
      "id": "a62274041e562a4bfbc5f7c5c7f3aa427c178c9e",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "PutToRight(x) ::: x will be put to right.",
        "HasHorses(x) ::: x has horses.",
        "EnglishFamily(x) ::: x is an English family.",
        "HeadDepartment(x) ::: x heads a government department.",
        "CannotMarry(x, y) ::: x cannot marry y.",
        "WhiteWife(x, y) ::: x is the \"white wife\" of y.",
        "Predicts(x, y) ::: x predicts y.",
        "DrunkCaptain(x) ::: x is a drunk captain.",
        "GamblingCrew(x) ::: x is a crew that is gambling.",
        "AirRaid(x) ::: x is an air raid.",
        "SwitchOffLights(x) ::: x switches off the lights.",
        "SwitchOnLights(x) ::: x switches on the lights.",
        "LackOfConcern(x) ::: x shows lack of concern.",
        "BombLands(x, y) ::: x lands in y.",
        "BlowsUp(x, y) ::: x blows up y.",
        "Killed(x, y) ::: x kills y.",
        "Bored(x) ::: x is bored.",
        "HopeForBombs(x) ::: x hopes for bombs.",
        "",
        "Premises:",
        "∀x (EnglishFamily(x) → (HasHorses(x) → PutToRight(x))) ::: If every English family should have horses, then everything will be put to right if they get some horses.",
        "HeadDepartment(mangan) ::: Mangan declares that he is to head a government department.",
        "CannotMarry(ellie, mangan) ::: Ellie suddenly announces that she cannot marry Mangan as she is now Shotover's \"white wife\".",
        "Predicts(shotover, founder) ::: Shotover predicts that the ship of England will founder.",
        "DrunkCaptain(captain) ∧ GamblingCrew(crew) ::: The captain is drunk and the crew are all gambling.",
        "AirRaid(airRaid) ::: The maid enters with news that an air-raid is about to happen.",
        "SwitchOffLights(maid) ∧ SwitchOnLights(hector) ::: The lights are switched off, but Hector switches them back on to demonstrate his lack of concern about the threat.",
        "BombLands(bomb, garden) ∧ BlowsUp(bomb, dynamite) ∧ Killed(mangan, burglar) ::: A bomb lands in the garden, blowing up Shotover's store of dynamite and killing Mangan and the burglar who were hiding there.",
        "Bored(people) ::: When it is over everyone says how bored they are.",
        "HopeForBombs(people) ::: They hope the bombs will come again tomorrow."
      ]
    }
  ],
  "a9a03a147849d65e6bcaf3cc74c3dd93d0ef88d4": [
    {
      "id": "a9a03a147849d65e6bcaf3cc74c3dd93d0ef88d4",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Revenge(x, y) ::: x takes revenge on y.",
        "Angry(x) ::: x is angry.",
        "Injuries(x) ::: x has suffered injuries.",
        "Insulted(x) ::: x has been insulted.",
        "Drunk(x) ::: x is drunk.",
        "Dizzy(x) ::: x is dizzy.",
        "WearingMotley(x) ::: x is wearing a jester's motley.",
        "Narrator(x) ::: x is the narrator of the story.",
        "Friend(x, y) ::: x is a friend of y.",
        "CarnivalTime(x) ::: x is during Carnival.",
        "",
        "Premises:",
        "Angry(a_1) ∧ Injuries(a_1) ∧ Insulted(a_1) ∧ Revenge(a_1, a_2) ::: Montresor's revenge on Fortunato is motivated by anger over injuries and an unspecified insult.",
        "Drunk(a_2) ∧ Dizzy(a_2) ∧ WearingMotley(a_2) ∧ CarnivalTime(a_2) ::: Fortunato is drunk, dizzy, and wearing a jester's motley during Carnival.",
        "Narrator(a_1) ::: Montresor is the narrator of the story.",
        "Friend(a_1, a_2) ::: Montresor is a friend of Fortunato."
      ]
    },
    {
      "id": "a9a03a147849d65e6bcaf3cc74c3dd93d0ef88d4",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "DiscerningPalate(a_2) ::: Fortunato has a discerning palate for wine.",
        "Lures(a_1, a_2) ::: Montresor lures Fortunato.",
        "WineTasting(a_1, a_2) ::: Montresor and Fortunato are engaged in a wine-tasting excursion.",
        "Obtains(a_1, b_0) ::: Montresor obtains a pipe of amontillado.",
        "Invites(a_1, a_3) ::: Montresor invites Luchesi for a private tasting.",
        "Resist(a_2, x) ::: Fortunato cannot resist x.",
        "Taste(a_2, b_0) ::: Fortunato tastes the amontillado.",
        "Warns(a_1, a_2) ::: Montresor warns Fortunato.",
        "Cough(a_2) ::: Fortunato has a bad cough.",
        "Insists(a_2, x) ::: Fortunato insists on x.",
        "CoatOfArms(a_1) ::: Montresor mentions his family coat of arms.",
        "",
        "Premises:",
        "Lures(a_1, a_2) ::: Montresor lures Fortunato into a private wine-tasting excursion.",
        "Obtains(a_1, b_0) ::: Montresor has obtained a pipe of what he believes to be a rare vintage of amontillado.",
        "Invites(a_1, a_3) ::: Montresor invites Luchesi for a private tasting to confirm the pipe's contents.",
        "Resist(a_2, Taste(a_2, b_0)) ::: Fortunato cannot resist demonstrating his discerning palate for wine and insists on tasting the amontillado.",
        "Warns(a_1, a_2) → Cough(a_2) ::: Montresor warns Fortunato of the damp due to his bad cough.",
        "Insists(a_2, Continue) ::: Fortunato insists on continuing despite Montresor's warnings.",
        "CoatOfArms(a_1) ::: Montresor mentions his family coat of arms during their walk.",
        "",
        "Conclusion:",
        "Taste(a_2, b_0) ::: Fortunato tastes the amontillado."
      ]
    },
    {
      "id": "a9a03a147849d65e6bcaf3cc74c3dd93d0ef88d4",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "Chains(x, y) ::: x chains y to the wall.",
        "Recognizes(x, y) ::: x recognizes y's gesture.",
        "IsMason(x) ::: x is a mason.",
        "RequestsSign(x, y) ::: x requests a sign from y.",
        "Displays(x, y) ::: x displays y.",
        "Enters(x, y) ::: x enters y.",
        "Drunk(x) ::: x is drunk.",
        "Unsuspecting(x) ::: x is unsuspecting.",
        "Resists(x) ::: x resists.",
        "PositivelyLeaves(x, y) ::: x positively leaves y.",
        "",
        "Premises:",
        "Chains(a_1, a_2) ::: Montresor chains Fortunato to the wall.",
        "¬Recognizes(a_1, c_0) → RequestsSign(a_2, a_1) ::: If Montresor does not recognize the gesture, then Fortunato requests a sign from Montresor.",
        "IsMason(a_1) ::: Montresor is a mason.",
        "Displays(a_1, b_0) ::: Montresor displays the trowel.",
        "Enters(a_2, b_1) ∧ Drunk(a_2) ∧ Unsuspecting(a_2) ::: Fortunato enters the niche drunk and unsuspecting.",
        "¬Resists(a_2) ::: Fortunato does not resist.",
        "PositivelyLeaves(a_1, a_2) ::: Montresor positively leaves Fortunato there."
      ]
    },
    {
      "id": "a9a03a147849d65e6bcaf3cc74c3dd93d0ef88d4",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Entombs(x, y) ::: x entombs y.",
        "Alive(y) ::: y is alive.",
        "Screams(y) ::: y screams for help.",
        "Mocks(x, y) ::: x mocks y.",
        "Hears(x, y) ::: x hears y.",
        "FeelsSickAtHeart(x) ::: x feels sick at heart.",
        "Dismisses(x, y) ::: x dismisses y.",
        "Drops(x, y) ::: x drops y.",
        "",
        "Premises:",
        "Entombs(a_1, a_2) ∧ Alive(a_2) ::: Montresor entombs Fortunato alive in the niche.",
        "Screams(a_2) ::: Fortunato screams for help.",
        "Mocks(a_1, a_2) ::: Montresor mocks Fortunato's cries.",
        "Hears(a_1, y) → ¬Hears(a_1, a_2) ::: Montresor listens for a reply but hears only the jester's bells ringing.",
        "FeelsSickAtHeart(a_1) ∧ Dismisses(a_1, SickAtHeart) ::: Montresor claims that he feels sick at heart but dismisses this reaction as an effect of the dampness of the catacombs.",
        "Drops(a_1, burningTorch) ::: Montresor drops a burning torch through the gap before placing the last stone."
      ]
    },
    {
      "id": "a9a03a147849d65e6bcaf3cc74c3dd93d0ef88d4",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "HangsFromChains(x) ::: x's body hangs from chains.",
        "LeftInNiche(x, y) ::: x left y in the niche.",
        "Believes(x, y) ::: x believes y.",
        "RestInPeace(x) ::: x should rest in peace.",
        "",
        "Premises:",
        "HangsFromChains(fortunato) ::: Fortunato's body still hangs from its chains.",
        "LeftInNiche(montresor, fortunato) ::: Montresor left Fortunato's body in the niche.",
        "Believes(montresor, RestInPeace(fortunato)) ::: Montresor believes that Fortunato should rest in peace."
      ]
    }
  ],
  "b0ec3188818dc23370cf89bdf260b7eef55f4bab": [
    {
      "id": "b0ec3188818dc23370cf89bdf260b7eef55f4bab",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Wealthy(x) ::: x is a wealthy person.",
        "Independent(x) ::: x is an independent person.",
        "MiningEngineer(x) ::: x is a mining engineer.",
        "Explores(x, y) ::: x explores y.",
        "ReachesBottom(x, y) ::: x reaches the bottom of y.",
        "RopeBreaks(x) ::: the rope breaks for x.",
        "Killed(x, y) ::: x is killed by y.",
        "FindsWay(x, y) ::: x finds a way into y.",
        "Resembles(x, y) ::: x resembles y.",
        "Befriends(x, y) ::: x befriends y.",
        "Guides(x, y) ::: x guides y.",
        "Meets(x, y) ::: x meets y.",
        "LearnsToSpeak(x, y) ::: x learns to speak y.",
        "Explains(x, y) ::: x explains y.",
        "",
        "Premises:",
        "Wealthy(a_1) ∧ Independent(a_1) ::: The narrator is a wealthy and independent traveler.",
        "Explores(a_1, c_1) ::: The narrator explores the chasm.",
        "ReachesBottom(a_1, c_1) ::: The narrator reaches the bottom of the chasm safely.",
        "RopeBreaks(a_1) ∧ Killed(a_4, a_1) ::: The rope breaks and the narrator's friend is killed.",
        "FindsWay(a_1, c_3) ::: The narrator finds his way into the underground.",
        "Resembles(a_4, angels) ::: Zee's father resembles angels.",
        "Befriends(a_1, a_2) ::: The narrator befriends Zee.",
        "Guides(a_4, a_1) ::: Zee's father guides the narrator around the city.",
        "Meets(a_1, a_4) ::: The narrator meets Zee's father.",
        "LearnsToSpeak(a_2, English) ::: Zee learns to speak English.",
        "Explains(a_4, a_1) ::: Zee's father explains who they are and how they function.",
        "",
        "Conclusion:",
        "LearnsToSpeak(a_2, English) ::: Zee learns to speak English by way of a makeshift dictionary during which the narrator unconsciously teaches them the language."
      ]
    },
    {
      "id": "b0ec3188818dc23370cf89bdf260b7eef55f4bab",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "Telepathic(x) ::: x has telepathic abilities.",
        "Parapsychological(x) ::: x has parapsychological abilities.",
        "TransmitInformation(x) ::: x can transmit information.",
        "GetRidOfPain(x) ::: x can get rid of pain.",
        "PutToSleep(x, y) ::: x can put y to sleep.",
        "BetterAdapted(x, y) ::: x is better adapted to learn about y.",
        "BehavesKindly(x, y) ::: x behaves kindly towards y.",
        "Magistrate(x) ::: x is a magistrate.",
        "",
        "Premises:",
        "∀x (Vril-ya(x) → (Telepathic(x) ∧ Parapsychological(x))) ::: All Vril-ya have great telepathic and parapsychological abilities.",
        "∀x (Vril-ya(x) → TransmitInformation(x)) ::: All Vril-ya can transmit information.",
        "∀x (Vril-ya(x) → GetRidOfPain(x)) ::: All Vril-ya can get rid of pain.",
        "∀x ∀y (Vril-ya(x) ∧ People(y) → PutToSleep(x, y)) ::: Vril-ya can put people to sleep.",
        "¬BetterAdapted(a_1, b_1) ::: The narrator is offended by the idea that the Vril-ya are better adapted to learn about him.",
        "BehavesKindly(a_4, a_1) ∧ BehavesKindly(a_3, a_1) ::: Zee's father and Taee behave kindly towards the narrator.",
        "Magistrate(a_4) ::: Zee's father is a magistrate."
      ]
    },
    {
      "id": "b0ec3188818dc23370cf89bdf260b7eef55f4bab",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "Descendant(x, y) ::: x is a descendant of y.",
        "LivesIn(x, y) ::: x lives in location y.",
        "FledUnderground(x) ::: x fled underground.",
        "TechnologicallySupportedUtopia(x) ::: x is a technologically supported Utopia.",
        "Master(x, y) ::: x can master y.",
        "AccessPowers(x) ::: x has access to extraordinary powers.",
        "CommunicateWith(x, y) ::: x communicates with y.",
        "Heal(x) ::: x has the ability to heal.",
        "Change(x) ::: x has the ability to change.",
        "Destroy(x) ::: x has the ability to destroy.",
        "DestructivePowers(x) ::: x has destructive powers.",
        "CanDestroyCities(x) ::: x can destroy entire cities.",
        "",
        "Premises:",
        "∀x (Descendant(x, ana) → LivesIn(x, underground)) ::: The Vril-ya are descendants of the Ana who live in underground networks.",
        "∀x (FledUnderground(x) → (LivesIn(x, underground) ∧ ¬LivesIn(x, surface))) ::: Originally surface dwellers, they fled underground to escape a massive flood.",
        "∀x (LivesIn(x, b_0) → TechnologicallySupportedUtopia(x)) ::: The place where the narrator descended housed 12,000 families, one of the largest groups, and was a technologically supported Utopia.",
        "∀x (Master(x, vril) → AccessPowers(x)) ::: The Vril-ya can master Vril to access extraordinary powers.",
        "∀x (AccessPowers(x) → (Heal(x) ∧ Change(x) ∧ Destroy(x))) ::: If a being has access to extraordinary powers, then it can heal, change, and destroy.",
        "∀x (DestructivePowers(x) → CanDestroyCities(x)) ::: If a being has destructive powers, then it can destroy entire cities.",
        "",
        "Conclusion:",
        "CommunicateWith(vril_ya, narrator) ::: The Vril-ya employed Vril to communicate with the narrator."
      ]
    },
    {
      "id": "b0ec3188818dc23370cf89bdf260b7eef55f4bab",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "EqualRights(x, y) ::: x and y have equal rights.",
        "StrongAs(x, y) ::: x is as strong as y.",
        "StrongerThan(x, y) ::: x is stronger than y.",
        "MarryForYears(x, y, z) ::: x marries y for z years.",
        "FreeToRemarryOrRemainSingle(x) ::: x is free to remarry or remain single.",
        "",
        "Premises:",
        "∀x ∀y (EqualRights(x, y)) ::: Men and women have equal rights.",
        "∀x (StrongAs(x, men) ∧ StrongAs(women, x) → StrongerThan(women, men)) ::: The women are as strong as, if not stronger than the men.",
        "∀x (MarryForYears(x, women, 3) → FreeToRemarryOrRemainSingle(x)) ::: Women have the option to remarry or to remain single after three years of marriage."
      ]
    },
    {
      "id": "b0ec3188818dc23370cf89bdf260b7eef55f4bab",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "SuperiorBeingExists() ::: There exists a superior being according to their religion.",
        "PermanenceOfLife() ::: The belief in the permanence of life according to the Vril-ya.",
        "ChangesForm() ::: Life changes form but is not destroyed.",
        "",
        "Premises:",
        "SuperiorBeingExists() ::: Their religion posits the existence of a superior being.",
        "PermanenceOfLife() ::: The Vril-ya believe in the permanence of life.",
        "PermanenceOfLife() → ChangesForm() ::: According to the Vril-ya, life is not destroyed but merely changes form."
      ]
    },
    {
      "id": "b0ec3188818dc23370cf89bdf260b7eef55f4bab",
      "paragraph_id": 5,
      "fols": [
        "Predicates:",
        "AdoptsAttire(x) ::: x adopts the attire of his hosts.",
        "AdoptsCustoms(x) ::: x adopts the customs of his hosts.",
        "InLove(x, y) ::: x falls in love with y.",
        "Orders(x, y, z) ::: x orders y to do z.",
        "Conspires(x, y, z) ::: x and y conspire against z.",
        "Leads(x, y, z) ::: x leads y through z.",
        "Warns(x, y) ::: x warns y about something.",
        "Claims(x, y) ::: x claims something about y.",
        "Destroys(x, y) ::: x destroys y.",
        "",
        "Premises:",
        "AdoptsAttire(a_1) ∧ AdoptsCustoms(a_1) ::: The narrator adopts the attire and customs of his hosts.",
        "InLove(a_2, a_1) ::: Zee falls in love with the narrator.",
        "Orders(a_4, a_3, Kill(a_1)) ::: Zee's father orders Taee to kill the narrator with his staff.",
        "Conspires(a_2, a_3, Orders(a_4, a_3, Kill(a_1))) ::: Zee and Taee conspire against Zee's father's command.",
        "Leads(a_2, a_1, c_1) ::: Zee leads the narrator through the chasm.",
        "Warns(a_1, \"Vril-ya will run out of habitable space underground and will claim the surface of the Earth\") ::: The narrator warns that the Vril-ya will run out of habitable space underground and will claim the surface of the Earth.",
        "Claims(b_1, \"will destroy mankind if necessary\") ::: The Vril-ya claims they will destroy mankind if necessary.",
        "",
        "Conclusion:",
        "Destroys(b_1, d) ::: The Vril-ya will destroy mankind if necessary."
      ]
    }
  ],
  "bf445b279454ae52287f19febc74f258f34c9134": [
    {
      "id": "bf445b279454ae52287f19febc74f258f34c9134",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Decline(b_0) ::: Halsey's Planet is in decline.",
        "Arrives(g) ::: A generation ship arrives.",
        "Contacted(g, p) ::: g has contacted planet p.",
        "Discover(a_1, g) ::: Ross discovers the state of the interstellar colonies.",
        "Ship(a_1, b_0) ::: Ross is given a ship that can make the trip from colony to colony.",
        "InstantaneousTrip(b_0) ::: The ship can make the trip almost instantaneously.",
        "SecretTechnology(b_0) ::: The technology used in the ship has been kept secret.",
        "InterstellarWar(b_0) ::: The secret technology could give rise to interstellar war.",
        "Conquer(g, p) ::: g could conquer planet p.",
        "GeneticDrift(p) ::: The isolated populations are affected by genetic drift.",
        "DeclineSociety(p) ::: The societies of the isolated populations are in decline.",
        "",
        "Premises:",
        "Decline(b_0) ::: Halsey's Planet is in decline.",
        "Arrives(g) ::: A generation ship arrives.",
        "¬Contacted(g, b_1) ::: The generation ship has failed to contact Earth.",
        "Discover(a_1, g) ::: Ross is sent to discover the state of the interstellar colonies.",
        "Ship(a_1, b_0) ::: Ross is given a ship that can make the trip from colony to colony almost instantaneously.",
        "InstantaneousTrip(b_0) ::: The ship can make the trip almost instantaneously.",
        "SecretTechnology(b_0) ::: The technology used in the ship has been kept secret.",
        "InterstellarWar(b_0) → (∃p Conquer(g, p)) ::: The secret technology could give rise to interstellar war if one colony decided to conquer others.",
        "GeneticDrift(p) â†§ DeclineSociety(p) ::: The isolated populations are affected by genetic drift resulting in a decline in their societies."
      ]
    },
    {
      "id": "bf445b279454ae52287f19febc74f258f34c9134",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "Destroyed(x) ::: x is a completely destroyed planet.",
        "Gerontocratic(x) ::: x is a gerontocratic society.",
        "Democracy(x) ::: x is a democracy.",
        "Repressive(x) ::: x is a repressive society.",
        "Matriarchy(x) ::: x is a matriarchy.",
        "Companion(x, y) ::: x is a companion of y.",
        "Visits(x, y) ::: x visits y.",
        "",
        "Premises:",
        "Destroyed(planet1) ::: The first planet he visits has been completely destroyed.",
        "Gerontocratic(planet2) ∧ Democracy(planet2) ::: The second planet is a gerontocratic travesty of a democracy.",
        "Repressive(planet3) ∧ Matriarchy(planet3) ::: The third planet is a repressive matriarchy.",
        "Visits(a_1, planet1) ∧ Visits(a_1, planet2) ∧ Visits(a_1, planet3) ::: Ross visits the first, second, and third planets.",
        "Companion(helena, a_1) ∧ Companion(bernie, a_1) ::: On the way, Ross picks up companions Helena and Bernie."
      ]
    },
    {
      "id": "bf445b279454ae52287f19febc74f258f34c9134",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "DifferentPlanet(x) ::: x is a planet that is different from Earth.",
        "PopulatedByJoneses(x) ::: x is populated by a race of people called Joneses.",
        "RuledByCult(x) ::: x is ruled by a cult of total conformity.",
        "WorshipsEquation(x) ::: x worships an equation.",
        "GeneticDriftEquation(x) ::: x is an equation on genetic drift.",
        "LossOfUnfixedGenes(x) ::: x refers to the loss of unfixed genes in a small population.",
        "Degeneracy(x) ::: x explains the degeneracy of the planets visited.",
        "JoinsBand(x) ::: x joins the little band.",
        "",
        "Premises:",
        "DifferentPlanet(jones) ∧ PopulatedByJoneses(jones) ∧ RuledByCult(jones) ::: The next planet they visit is supposed to be Earth, but it turns out not to be; it is populated by a race of almost-identical people called Joneses and ruled by a cult of total conformity.",
        "GeneticDriftEquation(equation) ∧ LossOfUnfixedGenes(equation) ::: The equation whose meaning Ross has been seeking refers to the loss of unfixed genes in a small population.",
        "Degeneracy(planet) ∧ (DifferentPlanet(planet) ∧ PopulatedByJoneses(planet)) âˆ’> Degeneracy(planet) ::: This explains the degeneracy of the planets he has visited.",
        "WorshipsEquation(sam) ∧ GeneticDriftEquation(equation) ::: Dr. Sam Jones learns that he has been worshiping an equation on genetic drift.",
        "JoinsBand(sam) ::: Dr. Sam Jones joins the little band."
      ]
    },
    {
      "id": "bf445b279454ae52287f19febc74f258f34c9134",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "NavigationalProblem(x) ::: x has a navigational problem.",
        "CivilizationOfMorons(x) ::: x is a civilization of morons.",
        "HiddenGeniuses(x) ::: x has hidden geniuses.",
        "DegenerateWorlds(x) ::: x is a degenerate world.",
        "FTLDrive(x) ::: x is an FTL drive.",
        "Rectifies(x, y) ::: x rectifies the problem of y.",
        "BringsTogether(x, y) ::: x brings y together.",
        "Isolation(x) ::: x is isolation.",
        "",
        "Premises:",
        "NavigationalProblem(c_5) ::: They sort out their navigational problem.",
        "CivilizationOfMorons(Earth) ::: Earth is a civilization of morons.",
        "HiddenGeniuses(Earth) ::: Earth is protected by a small minority of hidden geniuses.",
        "DegenerateWorlds(c_3) ::: The problem with all the degenerate worlds is their isolation.",
        "FTLDrive(c_4) ::: Ross has the FTL drive.",
        "Rectifies(Ross, isolation) ::: Ross rectifies the problem of isolation among degenerate worlds.",
        "BringsTogether(Ross, degenerateWorlds) ::: Ross brings the degenerate worlds together using the FTL drive.",
        "",
        "Conclusion:",
        "Rectifies(Ross, isolation) ∧ BringsTogether(Ross, degenerateWorlds) ::: Ross rectifies the problem of isolation among degenerate worlds by bringing them together."
      ]
    }
  ],
  "c1325899c4266174c4c64fd055834b07dc28e49c": [
    {
      "id": "c1325899c4266174c4c64fd055834b07dc28e49c",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Leads(x, y) ::: x leads y.",
        "Reunites(x, y) ::: x reunites with y.",
        "Retrieves(x, y) ::: x retrieves y.",
        "Steals(x, y) ::: x steals y.",
        "Suffers(x, y) ::: x suffers a mental attack from y.",
        "Deduces(x, y) ::: x deduces that y will happen.",
        "Rides(x, y) ::: x rides to y.",
        "Thinks(x, y) ::: x thinks that y is true.",
        "",
        "Premises:",
        "Leads(gandalf, {aragorn, legolas, gimli, king_theoden}) ::: Gandalf leads Aragorn, Legolas, Gimli, and King Théoden to Isengard.",
        "Reunites(gandalf, {merry, pippin}) ::: Gandalf reunites with Merry and Pippin at Isengard.",
        "Retrieves(gandalf, sarumans_palantir) ::: Gandalf retrieves Saruman's palantír.",
        "Steals(pippin, glance_into_seeing_stone) ::: Pippin steals a glance into the seeing-stone.",
        "Suffers(pippin, sauron) ::: Pippin suffers a mental attack from Sauron.",
        "Deduces(gandalf, attack(gondor_capital)) ::: Gandalf deduces that Sauron will attack Gondor's capital Minas Tirith.",
        "Rides(gandalf, gondor) ::: Gandalf rides to Gondor to warn them.",
        "Thinks(sauron, pippin_is_ring_bearer) ::: Sauron thinks Pippin is the ring bearer."
      ]
    },
    {
      "id": "c1325899c4266174c4c64fd055834b07dc28e49c",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "Leads(x, y) ::: x leads y to a location.",
        "Witnesses(x, y) ::: x witnesses y.",
        "Climbs(x, y) ::: x climbs y.",
        "SuspiciousOf(x, y) ::: x is suspicious of y.",
        "Lights(x, y) ::: x lights y.",
        "Signals(x, y) ::: x signals y to an ally.",
        "",
        "Premises:",
        "Leads(gollum, frodo) ∧ Leads(gollum, sam) ∧ Leads(gollum, minasMorgul) ::: Gollum leads Frodo Baggins and Samwise Gamgee to Minas Morgul.",
        "Witnesses(frodo, witchKing) ∧ Witnesses(sam, witchKing) ∧ Witnesses(frodo, orcArmy) ∧ Witnesses(sam, orcArmy) ::: Frodo and Sam witness the Witch-king of Angmar leading an Orc army.",
        "Climbs(frodo, stair) ∧ Climbs(sam, stair) ∧ Climbs(gollum, stair) ::: Frodo, Sam, and Gollum begin climbing a precarious stair carved in the cliff face.",
        "SuspiciousOf(sam, gollum) ::: Sam keeps a suspicious eye on Gollum.",
        "Lights(pippin, beacon) ∧ Signals(pippin, théoden) ::: Pippin lights the beacon to signal Théoden to assemble the Rohirrim.",
        "",
        "Conclusion:",
        "Leads(gollum, frodo) ∧ Leads(gollum, sam) ∧ Leads(gollum, minasMorgul) ::: Gollum leads Frodo Baggins and Samwise Gamgee to Minas Morgul."
      ]
    },
    {
      "id": "c1325899c4266174c4c64fd055834b07dc28e49c",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "Dying(x) ::: x is dying.",
        "RefusedToLeave(x, y) ::: x refused to leave y.",
        "Gives(x, y, z) ::: x gives y to z.",
        "Reforged(x) ::: x is reforged.",
        "Reclaim(x, y) ::: x reclaims y.",
        "Joined(x, y) ::: x is joined by y.",
        "Travels(x, y) ::: x travels to y.",
        "Recruit(x, y) ::: x recruits y.",
        "Promise(x, y, z) ::: x promises y to z.",
        "FulfillOath(x, y) ::: x fulfills their oath to y.",
        "",
        "Premises:",
        "RefusedToLeave(a_2, MiddleEarth) ::: Arwen refused to leave Middle Earth.",
        "Dying(a_2) ::: Arwen is dying.",
        "Gives(a_1, Andúril, a_1) ::: Elrond gives Aragorn the sword Andúril.",
        "Reforged(Andúril) ::: Andúril is Isildur's sword Narsil reforged.",
        "Reclaim(a_1, birthright) ::: Aragorn reclaims his birthright.",
        "Joined(a_1, {Legolas, Gimli}) ::: Aragorn is joined by Legolas and Gimli.",
        "Travels(a_1, PathsOfTheDead) ::: Aragorn travels to the Paths of the Dead.",
        "Recruit(a_1, ArmyOfTheDead) ::: Aragorn recruits the Army of the Dead.",
        "Promise(a_1, release, ArmyOfTheDead) ::: Aragorn promises to release the Army of the Dead.",
        "FulfillOath(ArmyOfTheDead, Isildur) ::: The Army of the Dead fulfills their oath to Isildur.",
        "",
        "Conclusion:",
        "RefusedToLeave(a_2, MiddleEarth) → Dying(a_2) ::: Arwen's refusal to leave Middle Earth is linked to her dying condition.",
        "Promise(a_1, release, ArmyOfTheDead) → FulfillOath(ArmyOfTheDead, Isildur) ::: Aragorn's promise to the Army of the Dead is contingent upon them fulfilling their oath to Isildur."
      ]
    },
    {
      "id": "c1325899c4266174c4c64fd055834b07dc28e49c",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Wounded(x) ::: x is gravely wounded.",
        "Mad(x) ::: x has fallen into madness.",
        "Command(x, y) ::: x commands y.",
        "AttemptSuicide(x) ::: x attempts to kill himself.",
        "Slay(x, y) ::: x slays y.",
        "ArriveWithArmy(x, y) ::: x arrives with army y.",
        "VictoryOver(x, y) ::: x achieves victory over y.",
        "Comfort(x, y) ::: x comforts y.",
        "Lead(x, y) ::: x leads y.",
        "March(x, y) ::: x marches upon y.",
        "",
        "Premises:",
        "Wounded(faramir) ::: Faramir is gravely wounded after a futile effort to retake Osgiliath.",
        "Mad(denethor) ::: Denethor falls into madness believing his son to be dead.",
        "Command(gandalf, city_defenses) ::: Gandalf is left to command the city defenses against the Orc army led by Gothmog.",
        "AttemptSuicide(denethor) ::: Denethor tries to kill himself and Faramir on a pyre.",
        "Alert(pippin, gandalf) ::: Pippin alerts Gandalf about Denethor's actions.",
        "Save(gandalf, faramir) ::: Gandalf and Pippin save Faramir.",
        "LeapToDeath(denethor) ::: Denethor leaps to his death from the top of Minas Tirith.",
        "Advantage(rohhirrim) ::: Initially the Rohirrim have the advantage at the Battle of the Pelennor Fields.",
        "Overwhelmed(rohhirrim, haradrim) ::: The Rohirrim are eventually overwhelmed by the Oliphaunt-riding Haradrim.",
        "MortallyWound(witch_king, theoden) ::: The Witch-king mortally wounds Théoden.",
        "Slay(eowyn, witch_king) ::: Éowyn battles and slays the Witch-King with Merry's help.",
        "Die(theoden) ::: Théoden dies of his wounds.",
        "ArriveWithArmy(aragorn, army_of_the_dead) ::: Aragorn arrives with the Army of the Dead.",
        "VictoryOver(aragorn, orcs) ::: Aragorn and the Army of the Dead overcome the Orcs and win the battle.",
        "Comfort(eowyn, faramir) ::: Éowyn meets Faramir in the Houses of Healing, and they comfort each other.",
        "Lead(aragorn, captains_of_men) ::: Aragorn and the other captains of Men decide to lead all who can march.",
        "March(aragorn, black_gate) ::: Aragorn leads all who can march upon the Black Gate as a distraction.",
        "",
        "Conclusion:",
        "VictoryOver(aragorn, orcs) ::: Aragorn's arrival with the Army of the Dead results in the victory over the Orcs.",
        "AttemptSuicide(denethor) ::: Denethor's madness leads to his suicide attempt.",
        "Slay(eowyn, witch_king) ::: Éowyn's actions in battle lead to the slaying of the Witch-King."
      ]
    },
    {
      "id": "c1325899c4266174c4c64fd055834b07dc28e49c",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "Manipulates(x, y) ::: x manipulates y.",
        "Tricks(x, y) ::: x tricks y.",
        "Paralyses(x, y) ::: x paralyses y.",
        "Binds(x, y) ::: x binds y.",
        "DrivesAway(x, y) ::: x drives away y.",
        "Believes(x, y) ::: x believes y to be y.",
        "Takes(x, y) ::: x takes y.",
        "Realises(x, y) ::: x realises y.",
        "GivesChase(x, y) ::: x gives chase to y.",
        "Rescues(x, y) ::: x rescues y.",
        "Returns(x, y) ::: x returns y to y.",
        "",
        "Premises:",
        "Manipulates(a_1, a_3) ∧ Leaves(a_3, a_4) ::: Gollum manipulates Frodo into leaving Sam behind.",
        "Tricks(a_1, a_3) ∧ LeadsTo(a_3, c_0) ::: Gollum tricks Frodo into the lair of the giant spider Shelob.",
        "Paralyses(c_1, a_3) ∧ Binds(c_1, a_3) ::: Shelob paralyses and binds Frodo.",
        "DrivesAway(a_4, c_1) ::: Sam arrives and drives Shelob away.",
        "Believes(a_4, a_3) ::: Sam believes Frodo to be dead.",
        "Takes(a_4, d_0) ∧ Takes(a_4, d_1) ::: Sam takes Frodo's sword Sting and The One Ring for safekeeping.",
        "Realises(a_4, a_3) ∧ Sees(a_4, a_3) ::: Sam realises that Frodo is still alive when he sees Frodo's body being taken by Orcs.",
        "GivesChase(a_4, a_3) ::: Sam gives chase to Frodo.",
        "Rescues(a_4, a_3) ::: Sam rescues Frodo from the Orcs.",
        "Returns(a_4, a_3) ::: Sam returns the Ring to Frodo.",
        "",
        "Conclusion:",
        "Rescues(a_4, a_3) ::: Sam rescues Frodo from the Orcs."
      ]
    },
    {
      "id": "c1325899c4266174c4c64fd055834b07dc28e49c",
      "paragraph_id": 5,
      "fols": [
        "Predicates:",
        "DrawOut(x, y) ::: x draws out y's forces.",
        "Exhausted(x) ::: x is exhausted.",
        "Attack(x, y) ::: x attacks y.",
        "Claim(x, y) ::: x claims y as his own.",
        "Refuse(x, y) ::: x refuses to destroy y.",
        "Bite(x, y) ::: x bites y.",
        "FightBack(x, y) ::: x fights back against y.",
        "KnockInto(x, y) ::: x knocks y into a location.",
        "Save(x, y) ::: x saves y.",
        "Destroy(x) ::: x is destroyed.",
        "CauseChainReaction(x, y) ::: x causes a chain-reaction that affects y.",
        "Awaken(x, y) ::: x awakens in location y.",
        "Reunite(x, y) ::: x is reunited with y.",
        "",
        "Premises:",
        "DrawOut(a_1, Sauron) ∧ Exhausted(b_1) ∧ Attack(Gollum, Frodo) ∧ Claim(Frodo, Ring) ∧ Refuse(Frodo, Ring) ::: Aragorn's army draws out Sauron's forces and the exhausted Hobbits are attacked by Gollum when they reach Mount Doom, and Frodo claims the Ring as his own and refuses to destroy it.",
        "Bite(Gollum, Frodo) ∧ FightBack(Frodo, Gollum) ∧ KnockInto(Frodo, Gollum) ::: Gollum attacks Frodo and bites his finger off to reclaim the Ring, but Frodo fights back and knocks Gollum into the volcano.",
        "Save(Sam, Frodo) ::: Sam manages to save Frodo.",
        "Destroy(Ring) ∧ Destroy(Sauron) ∧ CauseChainReaction(Destroy(Ring), Mountain) ∧ CauseChainReaction(Destroy(Sauron), Orcs) ::: The destruction of the Ring leads to the destruction of Sauron, causing a chain-reaction that affects the mountain and the fleeing Orcs.",
        "Awaken(Hobbits, Minas Tirith) ∧ Reunite(Hobbits, Fellowship) ::: The Hobbits awaken later in Minas Tirith and are reunited with the surviving Fellowship members."
      ]
    },
    {
      "id": "c1325899c4266174c4c64fd055834b07dc28e49c",
      "paragraph_id": 6,
      "fols": [
        "Predicates:",
        "Crowned(a_1) ::: Aragorn is crowned King of Gondor.",
        "Queen(a_2) ::: Arwen is Aragorn's queen.",
        "Bows(x, y) ::: x bows before y.",
        "Returns(x, y) ::: x returns to y.",
        "Marries(x, y) ::: x marries y.",
        "Departs(x, y) ::: x departs to y.",
        "Receives(x, y) ::: x receives y.",
        "Leaves(x, y) ::: x leaves y.",
        "Details(x, y) ::: x details y.",
        "",
        "Premises:",
        "Crowned(a_1) ∧ Queen(a_2) ::: Aragorn is crowned King of Gondor and takes Arwen as his queen.",
        "∀x (Bows(x, a_3) ∧ Bows(x, b_1)) ::: All present at Aragorn's coronation bow before Frodo and the Hobbits.",
        "Returns(a_4, c_2) ::: Sam returns to the Shire.",
        "Marries(a_4, a_5) ::: Sam marries Rosie Cotton.",
        "Departs(a_3, c_3) ::: Frodo departs Middle Earth for the Grey Havens.",
        "Leaves(a_3, a_6) ::: Frodo leaves with his uncle Bilbo.",
        "Leaves(a_3, a_7) ::: Frodo leaves with Gandalf.",
        "Leaves(a_3, b_0) ::: Frodo leaves with the Elves.",
        "Receives(a_4, d_1) ::: Sam receives the Red Book of Westmarch.",
        "Details(d_1, adventures) ::: The Red Book of Westmarch details their adventures.",
        "¬Copes(a_3) ::: Frodo is unable to cope with the traumas of his journey.",
        "Gladdened(a_4) ::: Sam is gladdened by the warm welcome he receives upon returning home."
      ]
    }
  ],
  "c3ad97ba978bd2f56484be04acb706a6a42d8e00": [
    {
      "id": "c3ad97ba978bd2f56484be04acb706a6a42d8e00",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Narrator(x) ::: x is the narrator of the story.",
        "Traveler(x) ::: x is a traveler and amateur naturalist.",
        "Conscious(x) ::: x regains consciousness.",
        "Entwined(x) ::: x is entwined in the roots of plants.",
        "Sees(x, y) ::: x sees y.",
        "WalksToward(x, y) ::: x walks toward y.",
        "Encounters(x, y) ::: x encounters y.",
        "StruckBy(x, y) ::: x is struck by y.",
        "ExpressSurprise(x, y) ::: x expresses surprise at y.",
        "Allows(x, y) ::: x allows y to accompany them.",
        "InLove(x, y) ::: x falls in love with y.",
        "Age(x, y) ::: x appears to be y years old.",
        "OlderThanTheyAppear(x) ::: x is older than they appear.",
        "",
        "Premises:",
        "Narrator(Smith) ::: Smith is the narrator of the story.",
        "Traveler(Smith) ::: Smith is a traveler and amateur naturalist.",
        "Conscious(Smith) ::: Smith regains consciousness.",
        "Entwined(Smith) ::: Smith is entwined in the roots of plants.",
        "Sees(Smith, greatHouse) ::: Smith sees a great house in the distance.",
        "WalksToward(Smith, greatHouse) ::: Smith walks toward the great house to seek help and information.",
        "Encounters(Smith, funeralParty) ::: Smith encounters a funeral party.",
        "StruckBy(Smith, youngGirl) ::: Smith is struck by the beautiful girl who is overcome by grief.",
        "Age(youngGirl, 14) ::: The young girl appears to be about 14 years old.",
        "OlderThanTheyAppear(funeralParty) ::: The funeral party and the world are older than they appear.",
        "InLove(Smith, youngGirl) ::: Smith falls in love with the young girl.",
        "ExpressSurprise(funeralParty, Smith) ::: The funeral party expresses surprise at Smith's presence and his odd uncouth clothes and boots.",
        "Allows(funeralParty, Smith) ::: The funeral party allows Smith to accompany them to the enormous mansion where they live."
      ]
    },
    {
      "id": "c3ad97ba978bd2f56484be04acb706a6a42d8e00",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "DifferentSociety(x, y) ::: x's society is fundamentally different from y's society.",
        "Probationer(x, y) ::: x works as a probationer in community y.",
        "Misunderstands(x, y) ::: x stumbles into misunderstandings with y.",
        "InquireAbout(x, y) ::: x inquires about y.",
        "SharesLanguage(x, y) ::: x shares a language with y.",
        "CannotRead(x, y) ::: x cannot read y.",
        "OrganizedInCommunalHouses(x) ::: x is organized into communal houses.",
        "",
        "Premises:",
        "DifferentSociety(narrator, community) ::: The narrator's society is fundamentally different from the society of the people in the community.",
        "Probationer(narrator, community) ::: The narrator agrees to work for a year as a probationer in this community.",
        "Misunderstands(narrator, companions) ::: The narrator is constantly stumbling into misunderstandings with his new companions.",
        "InquireAbout(narrator, city) ::: The narrator inquires about the nearest city.",
        "SharesLanguage(narrator, companions) ::: The narrator notes that they share the English language.",
        "CannotRead(narrator, writingSystem) ::: The narrator cannot read the \"Hebrew-like characters\" in which their books are written.",
        "OrganizedInCommunalHouses(humanRace) ::: The entire human race is now organized into communal houses like this one."
      ]
    },
    {
      "id": "c3ad97ba978bd2f56484be04acb706a6a42d8e00",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "Older(x) ::: x is an older person.",
        "Vegetarian(x) ::: x is a vegetarian.",
        "Beautiful(x) ::: x has rare physical beauty.",
        "PureHeart(x) ::: x has crystal purity of heart.",
        "Contented(x) ::: x is ever contented and calmly glad.",
        "Loves(x, y) ::: x loves y.",
        "RomanticInterest(x) ::: x has romantic interests.",
        "Child(x) ::: x is a child.",
        "Lies(x) ::: x lies.",
        "PunishedBySolitaryConfinement(x) ::: x is punished by solitary confinement.",
        "",
        "Premises:",
        "∀x (Older(x) ∧ Beautiful(x) ∧ PureHeart(x) ∧ Contented(x) ∧ Vegetarian(x)) ::: All people in the community are much older than they appear, have rare physical beauty, crystal purity of heart, are ever contented and calmly glad, and are vegetarians.",
        "∀x (Loves(a_2, a_1) ∧ ¬RomanticInterest(a_2)) ::: Yoletta loves the narrator without romantic passion.",
        "∀x (¬RomanticInterest(x) ∧ ¬Child(x)) ::: There are no romantic interests and no children in the community.",
        "∀x (Lies(x) → PunishedBySolitaryConfinement(x)) ::: Lying is a serious offense, punishable by solitary confinement.",
        "∀x (¬RomanticInterest(x) ∧ ¬Lies(x)) ::: The narrator sometimes falls afoul of the strict rules, indicating he may lie.",
        "",
        "Conclusion:",
        "Loves(a_2, a_1) ::: Yoletta loves the narrator without romantic passion."
      ]
    },
    {
      "id": "c3ad97ba978bd2f56484be04acb706a6a42d8e00",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "UtopianState(x) ::: x has achieved a utopian state.",
        "AbandonSexuality(x) ::: x has abandoned sexuality.",
        "AbandonRomanticLove(x) ::: x has abandoned romantic love.",
        "Reproduce(x) ::: x reproduces.",
        "LiveCommunally(x) ::: x lives communally.",
        "Groom(x, y) ::: x grooms y to take on a role.",
        "Despair(x) ::: x despairs over unfulfilled passion.",
        "Adapt(x) ::: x can adapt to a new mode of living.",
        "NewFather(x) ::: x is the new Father of the House.",
        "NewMother(x) ::: x is the new Mother of the House.",
        "",
        "Premises:",
        "∀x (UtopianState(x) → (AbandonSexuality(x) ∧ AbandonRomanticLove(x))) ::: The humans of this distant future have achieved their utopian state by abandoning sexuality and romantic love.",
        "∀x (Reproduce(x) → (x = Queen ∧ x = AlphaMale ∧ x = AlphaFemale ∧ x = Father ∧ x = Mother)) ::: Only the Queen, Alpha Male, Alpha Female, Father, and Mother of the House reproduce.",
        "∀x (LiveCommunally(x) → (x is a sibling)) ::: The rest of the House live communally, as siblings.",
        "Despair(a_1) ::: The traveler despairs when he realizes that his passion for Yoletta can never be consummated.",
        "Adapt(a_1) ::: The traveler wonders whether he can adapt to this mode of living.",
        "Groom(Mother, a_1) ∧ Groom(Mother, a_2) ::: The Mother has begun the long process of grooming the traveler and Yoletta to become the new Father and Mother of the House.",
        "NewFather(a_1) ∧ NewMother(a_2) ::: The new Father and Mother of the House will be the traveler and Yoletta."
      ]
    },
    {
      "id": "c3ad97ba978bd2f56484be04acb706a6a42d8e00",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "InLibrary(x) ::: x is in the library.",
        "Discovers(x, y) ::: x discovers y.",
        "Inscription(y, z) ::: y has an inscription stating z.",
        "ProvidesCure(y, z) ::: y provides a cure for z.",
        "TakesDose(x, y) ::: x takes a dose of y.",
        "Cures(x, y) ::: x cures y.",
        "Realizes(x, y) ::: x realizes y.",
        "GrowsStiff(x) ::: x's body grows stiff.",
        "GrowsCold(x) ::: x's body grows cold.",
        "Poison(x) ::: x is a poison.",
        "ReliefFromPains(x, y) ::: x provides relief from the pains of y.",
        "LeadsToDeath(x) ::: x leads to death.",
        "",
        "Premises:",
        "InLibrary(a_1) ∧ Discovers(a_1, bottle) ∧ Inscription(bottle, \"provides a cure for the oppressions of 'time and disease' and the thoughts or passions that 'lead to madness'\") ::: When the traveler is in the library, he discovers an elaborately-carved bottle on a shelf; its inscription states that its contents provide a cure for the oppressions of \"time and disease\" and the thoughts or passions that \"lead to madness.\"",
        "TakesDose(a_1, liquid) ∧ Cures(liquid, passionForYoletta) ::: He takes a dose of the liquid, thinking it will cure his passion for Yoletta.",
        "Realizes(a_1, poison) ∧ GrowsStiff(a_1) ∧ GrowsCold(a_1) ::: It is only when his body grows stiff and cold that he realizes that the potion is a poison.",
        "ProvidesCure(liquid, \"pains of life\") ∧ LeadsToDeath(liquid) ::: The potion does not cure passions but leads to death.",
        "",
        "Conclusion:",
        "¬Cures(liquid, passionForYoletta) ::: The potion does not cure his passion for Yoletta."
      ]
    },
    {
      "id": "c3ad97ba978bd2f56484be04acb706a6a42d8e00",
      "paragraph_id": 5,
      "fols": [
        "Predicates:",
        "Loves(x, y) ::: x falls in love with y.",
        "HasProtector(x, y) ::: x has a protector y.",
        "SimilarPlot(x, y) ::: x has a plot similar to y.",
        "Author(x, y) ::: x is the author of y.",
        "Novel(x) ::: x is a novel.",
        "",
        "Premises:",
        "Loves(traveler, youngGirl) ::: The traveler falls in love with the young girl.",
        "HasProtector(youngGirl, elderlyProtector) ::: The young girl has an elderly protector.",
        "SimilarPlot(story, GreenMansions) ::: The plot of this story is similar to the plot of Hudson's later and more famous novel, Green Mansions.",
        "Author(Hudson, GreenMansions) ::: Hudson is the author of the novel Green Mansions.",
        "Novel(GreenMansions) ::: Green Mansions is a novel."
      ]
    }
  ],
  "ccfabbee5a88f09447f3cbba5ea0f86e5c039058": [
    {
      "id": "ccfabbee5a88f09447f3cbba5ea0f86e5c039058",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Teenager(x) ::: x is a teenager.",
        "LivesIn(x, y) ::: x lives in location y.",
        "NewNeighbor(x, y) ::: x is the new neighbor of y.",
        "Informs(x, y, z) ::: x informs y about z.",
        "Missing(x) ::: x is missing.",
        "Introduces(x, y, z) ::: x introduces y to z.",
        "Crazy(x) ::: x is considered crazy.",
        "DoesNotWantToBeFriends(x, y) ::: x does not want to be friends with y.",
        "",
        "Premises:",
        "Teenager(charley) ∧ LivesIn(charley, suburbOfLasVegas) ::: Charley Brewster is a teenager living in a suburb of Las Vegas, Nevada.",
        "NewNeighbor(jerry, charley) ::: Charley's new neighbor is Jerry Dandrige.",
        "Informs(ed, charley, missingStudents) ::: Ed informs Charley that many students have gone missing, including their other childhood friend, Adam Johnson.",
        "Introduces(jane, charley, jerry) ::: Charley's mother, Jane, introduces Charley to Jerry Dandrige.",
        "Crazy(charley) ∧ DoesNotWantToBeFriends(charley, ed) ::: Charley tells Ed that he's crazy and that he doesn't want to be friends anymore.",
        "Missing(adam) ::: Adam Johnson is missing.",
        "",
        "Conclusion:",
        "∃x (Teenager(x) ∧ LivesIn(x, suburbOfLasVegas) ∧ NewNeighbor(jerry, x)) ::: There exists a teenager living in a suburb of Las Vegas who has a new neighbor named Jerry."
      ]
    },
    {
      "id": "ccfabbee5a88f09447f3cbba5ea0f86e5c039058",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "Vampire(x) ::: x is a vampire.",
        "Bites(x, y) ::: x bites y.",
        "Believes(x, y) ::: x believes y.",
        "Attacks(x, y) ::: x attacks y.",
        "Records(x, y) ::: x records y.",
        "KeepsVictimsInSecretRooms(x) ::: x keeps his victims in secret rooms.",
        "ExpertOnVampires(x) ::: x is an expert on vampires.",
        "TakesSeriously(x, y) ::: x takes y seriously.",
        "KicksOut(x, y) ::: x kicks out y.",
        "",
        "Premises:",
        "Bites(jerry, ed) → Vampire(ed) ::: Ed becomes a vampire after allowing Jerry to bite him.",
        "Records(charley, videoRecordings) ∧ Believes(charley, claims(ed)) ::: Charley believes Ed's claims after discovering the video recordings.",
        "∀x (Attacks(jerry, x) ∧ InNeighborhood(x)) ::: Jerry attacks people in the neighborhood.",
        "KeepsVictimsInSecretRooms(jerry) ::: Charley learns about Jerry's secret rooms for victims.",
        "ExpertOnVampires(peter) ∧ ¬TakesSeriously(peter, charley) ∧ KicksOut(peter, charley) ::: Peter doesn't take Charley seriously and kicks him out.",
        "",
        "Conclusion:",
        "Vampire(ed) ::: Ed is a vampire.",
        "Believes(charley, claims(ed)) ::: Charley believes Ed's claims.",
        "Attacks(jerry, people) ::: Jerry attacks people in the neighborhood.",
        "KeepsVictimsInSecretRooms(jerry) ::: Jerry keeps his victims in secret rooms."
      ]
    },
    {
      "id": "ccfabbee5a88f09447f3cbba5ea0f86e5c039058",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "SetsFire(a_1, b_2) ::: Charley sets fire to his house.",
        "Flee(a_1, b_0) ::: Charley flees through the desert in his minivan.",
        "WoundedBy(a_2, a_4) ::: Jerry is wounded by Jane.",
        "AdmittedTo(a_4, b_1) ::: Jane is admitted to a hospital.",
        "SummonedBy(a_1, a_5) ::: Charley is summoned by Peter.",
        "TransformedToVampire(a_3) ::: Ed is transformed into a vampire.",
        "Aids(a_3, a_2) ::: Ed aids Jerry in attacking Charley, Amy, and Peter.",
        "Kills(a_1, a_3) ::: Charley kills Ed.",
        "Injures(a_4, a_2) ::: Amy injures Jerry with holy water.",
        "SeparatedInCrowd(a_4) ::: Amy gets separated in the crowd.",
        "PossessedBy(a_4, a_2) ::: Amy becomes possessed by Jerry.",
        "",
        "Premises:",
        "SetsFire(a_1, b_2) ::: Charley sets fire to his house.",
        "Flee(a_1, b_0) ::: Charley flees through the desert in his minivan.",
        "WoundedBy(a_2, a_4) ::: Jerry is wounded by Jane with a real estate sign stake.",
        "AdmittedTo(a_4, b_1) ::: Jane is admitted to a hospital.",
        "SummonedBy(a_1, a_5) ::: Charley is summoned by Peter.",
        "TransformedToVampire(a_3) ::: Ed has been fully transformed into a vampire.",
        "Aids(a_3, a_2) ::: Ed aids Jerry in attacking Charley, Amy, and Peter.",
        "Kills(a_1, a_3) ::: Charley reluctantly kills Ed during the fight.",
        "Injures(a_4, a_2) ::: Amy injures Jerry with holy water.",
        "SeparatedInCrowd(a_4) ::: Amy gets separated in the crowd.",
        "PossessedBy(a_4, a_2) ::: Amy becomes possessed by Jerry after being kissed and bitten."
      ]
    },
    {
      "id": "ccfabbee5a88f09447f3cbba5ea0f86e5c039058",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Refuses(x, y) ::: x refuses to help y.",
        "Killed(x, y) ::: x killed y.",
        "Gives(x, y, z) ::: x gives y to z.",
        "BlessedStake(x) ::: x is a stake blessed by Saint Michael.",
        "EffectiveAgainst(x, y) ::: x is effective against y.",
        "TurnsBackToHuman(x) ::: x turns back into a human.",
        "Joins(x, y) ::: x joins y.",
        "",
        "Premises:",
        "Refuses(peter, charley) ::: Peter refuses to help Charley.",
        "Killed(jerry, a_3) ::: Jerry killed Charley's mother.",
        "Killed(jerry, a_5) ::: Jerry killed Peter's parents.",
        "Gives(peter, blessedStake, charley) ::: Peter gives Charley a stake blessed by Saint Michael.",
        "EffectiveAgainst(blessedStake, jerry) ::: The stake blessed by Saint Michael is effective against Jerry.",
        "EffectiveAgainst(blessedStake, c_1) ::: The stake blessed by Saint Michael is effective against Charley's victims.",
        "TurnsBackToHuman(c_1) ::: Charley's victims turn back into humans.",
        "Joins(peter, charley) ::: Peter decides to join Charley after all."
      ]
    },
    {
      "id": "ccfabbee5a88f09447f3cbba5ea0f86e5c039058",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "LeadsTo(x, y) ::: x leads to y.",
        "Attacks(x, y) ::: x attacks y.",
        "Explains(x, y) ::: x explains y to y.",
        "Stabs(x, y) ::: x stabs y.",
        "Escapes(x) ::: x escapes.",
        "AmbushedBy(x, y) ::: x is ambushed by y.",
        "Kills(x, y) ::: x kills y.",
        "Shoots(x, y) ::: x shoots y.",
        "Guards(x, y) ::: x guards y from y.",
        "Burns(x, y) ::: x burns y.",
        "Tosses(x, y) ::: x tosses y to y.",
        "Struggles(x, y) ::: x struggles with y.",
        "Assists(x, y) ::: x assists y.",
        "",
        "Premises:",
        "LeadsTo(basement, victims) ::: They are led into Jerry's basement, where they are attacked by many of Jerry's victims.",
        "Attacks(victims, Charley) ::: Jerry's victims attack Charley.",
        "Explains(Amy, Charley) ::: Amy explains to Charley how they can be with each other forever.",
        "Stabs(Charley, Amy) ::: Charley stabs Amy.",
        "Escapes(Charley) ::: Charley escapes after stabbing Amy.",
        "AmbushedBy(Peter, Jerry) ::: Peter is ambushed by Jerry and many of his victims.",
        "Kills(Peter, victims) ::: Peter is able to kill a few victims before his weapon backfires.",
        "Backfires(weapon) ::: Peter's weapon backfires.",
        "Sees(Charley, Peter) ::: Charley returns to the basement only to see Peter being fed on by the remaining vampires.",
        "ShootsHoles(Charley, roof) ::: Charley decides to shoot holes in the roof.",
        "ShinesIn(sunlight, vampires) ::: Sunlight shines in and kills the vampires.",
        "Guards(Charley, vampires) ::: The patch of sunlight guards both Charley and Peter from the vampires who had not been destroyed.",
        "Explains(Jerry, Charley) ::: Jerry appears, explaining that Charley's quest is in fact over.",
        "Outfits(Charley, suit) ::: Charley, having outfitted himself in a flame-retardant suit.",
        "Lights(Peter, Charley) ::: Peter lights Charley on fire.",
        "Tackles(Charley, Jerry) ::: Charley tackles Jerry just as Amy is feeding off him.",
        "Struggles(Charley, Jerry) ::: A struggle between Charley and Jerry ensues while the other vampires watch.",
        "Assists(Peter, Charley) ::: Peter assists Charley by shooting another hole in the floor above.",
        "Burns(Jerry, sunlight) ::: This burns Jerry.",
        "Tosses(Peter, stake) ::: Peter tosses Charley the stake he had dropped.",
        "",
        "Conclusion:",
        "Charley and Peter can use sunlight to defeat vampires. ",
        "Charley can confront and attack vampires to protect himself and Peter. ",
        "Charley's quest to defeat Jerry is completed through teamwork with Peter."
      ]
    },
    {
      "id": "ccfabbee5a88f09447f3cbba5ea0f86e5c039058",
      "paragraph_id": 5,
      "fols": [
        "Predicates:",
        "Stabs(x, y) ::: x stabs y.",
        "Kills(x, y) ::: x kills y.",
        "Recovers(x) ::: x recovers from the hospital.",
        "ShopsFor(x, y) ::: x shops for y.",
        "HasSex(x, y) ::: x has sex with y.",
        "ReturnsToHumanForm(x) ::: x returns to their human form.",
        "",
        "Premises:",
        "Stabs(a_1, a_2) ::: Charley quickly stabs Jerry.",
        "Kills(a_1, a_2) ::: Charley kills Jerry.",
        "ReturnsToHumanForm(c_1) ::: Charley returns his victims to their human form.",
        "Recovers(a_3) ::: Charley's mother recovers from the hospital.",
        "ShopsFor(a_3, b_2) ::: Charley's mother goes to shop for a new house.",
        "HasSex(a_1, a_4) ::: Charley and Amy have sex.",
        "InLocation(a_1, b_3) ::: Charley and Amy are in Peter's penthouse.",
        "",
        "Conclusion:",
        "Kills(a_1, a_2) ::: Charley kills Jerry.",
        "Recovers(a_3) ::: Charley's mother recovers from the hospital."
      ]
    }
  ],
  "cf09f10dcf0a2d000a7d2a0fc776f16a0e5a86be": [
    {
      "id": "cf09f10dcf0a2d000a7d2a0fc776f16a0e5a86be",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Teenager(x) ::: x is a teenager.",
        "FascinationWithDeath(x) ::: x harbors a fascination with death.",
        "PactToDieTogether(x, y) ::: x and y formed a pact to die together.",
        "AttackedByCreature(x) ::: x is attacked by the creature responsible for the maulings.",
        "Wounded(x) ::: x is wounded.",
        "Bites(x, y) ::: x bites y.",
        "Rescues(x, y) ::: x rescues y.",
        "HealsQuickly(x) ::: x heals quickly.",
        "RunsOver(x, y) ::: x runs over y.",
        "LocalDrugDealer(x) ::: x is a local drug dealer.",
        "DogKillingsOccurring(x) ::: x is a place where dog killings are occurring.",
        "",
        "Premises:",
        "Teenager(ginger) ∧ Teenager(brigitte) ∧ FascinationWithDeath(ginger) ∧ FascinationWithDeath(brigitte) ∧ PactToDieTogether(ginger, brigitte) ::: Brigitte and Ginger Fitzgerald are teenage sisters who harbor a fascination with death and formed a pact to die together.",
        "AttackedByCreature(ginger) ∧ Wounded(ginger) ∧ Bites(creature, ginger) ::: Ginger begins her first period and is attacked by the creature responsible for the maulings, resulting in her being wounded and bitten.",
        "Rescues(brigitte, ginger) ::: Brigitte rescues Ginger after the creature wounds and bites her.",
        "RunsOver(sam, creature) ::: The creature is run over by a van belonging to Sam MacDonald, a local drug dealer.",
        "HealsQuickly(ginger) ::: Ginger decides not to go to the hospital as her wounds heal quickly.",
        "DogKillingsOccurring(baileyDowns) ::: The film is set in Bailey Downs, a suburb where a rash of dog killings has been occurring."
      ]
    },
    {
      "id": "cf09f10dcf0a2d000a7d2a0fc776f16a0e5a86be",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "Aggressive(x) ::: x behaves aggressively.",
        "Transforms(x) ::: x undergoes physical and mental transformations.",
        "HasHairFromWounds(x) ::: x grows hair from her wounds.",
        "SproutsTail(x) ::: x sprouts a tail.",
        "HeavilyMenstruates(x) ::: x heavily menstruates.",
        "UnprotectedSex(x, y) ::: x has unprotected sex with y.",
        "Kills(x, y) ::: x kills y.",
        "AttackedByWerewolf(x) ::: x was attacked by a werewolf.",
        "InProcessOfTurning(x) ::: x is in the process of turning into a werewolf.",
        "Pierced(x, y) ::: x has her navel pierced using y.",
        "Ineffective(x) ::: x proves ineffective.",
        "Suggests(x, y) ::: x suggests y.",
        "FoundInSpring(x) ::: x is only found in the spring.",
        "",
        "Premises:",
        "Transforms(a_1) ∧ Aggressive(a_1) ∧ HasHairFromWounds(a_1) ∧ SproutsTail(a_1) ∧ HeavilyMenstruates(a_1) ::: Ginger undergoes physical and mental transformations that concern Brigitte.",
        "UnprotectedSex(a_1, a_3) ::: Ginger has unprotected sex with a classmate named Jason.",
        "Kills(a_1, a_4) ::: Ginger kills a neighbor's dog.",
        "AttackedByWerewolf(a_1) ∧ InProcessOfTurning(a_1) ::: Brigitte and Sam agree that Ginger was attacked by a werewolf and is in the process of turning into one.",
        "Pierced(a_1, b_0) ∧ Ineffective(b_0) ::: Ginger has her navel pierced using a silver ring in the hopes of curing her, but it proves ineffective.",
        "Suggests(a_2, b_2) ∧ FoundInSpring(b_2) ::: Sam suggests a monkshood solution, which is not possible as the plant is only found in the spring."
      ]
    },
    {
      "id": "cf09f10dcf0a2d000a7d2a0fc776f16a0e5a86be",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "Accuse(x, y) ::: x accuses y of a crime.",
        "Killed(x) ::: x is killed.",
        "SlipAndHitHead(x) ::: x slips and hits their head.",
        "PutInFreezer(x) ::: x is put in a freezer.",
        "ExplainBlood(x, y) ::: x explains the blood to y.",
        "BreaksFingers(x, y) ::: x breaks y's fingers.",
        "Bury(x) ::: x is buried.",
        "Defiant(x) ::: x is defiant.",
        "",
        "Premises:",
        "Accuse(a_1, a_2) ::: Trina accuses Ginger of kidnapping her dog.",
        "Killed(a_1) ::: Trina is killed.",
        "SlipAndHitHead(a_1) ::: Trina slips and hits her head on the kitchen counter.",
        "PutInFreezer(a_1) ::: Trina's body is put in a freezer.",
        "ExplainBlood(a_2, a_0) ::: Brigitte explains the blood to their parents as part of another school project.",
        "BreaksFingers(a_2, a_1) ::: Brigitte accidentally breaks off two of Trina's fingers.",
        "Bury(a_1) ::: Trina's body is buried.",
        "Defiant(a_1) ::: Ginger remains defiant."
      ]
    },
    {
      "id": "cf09f10dcf0a2d000a7d2a0fc776f16a0e5a86be",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Dangerous(x) ::: x is a danger to others.",
        "Takes(x, y) ::: x takes y.",
        "Asks(x, y, z) ::: x asks y to do z.",
        "Attacks(x, y) ::: x attacks y.",
        "Defends(x, y) ::: x defends against y.",
        "Uses(x, y) ::: x uses y.",
        "Witnesses(x, y) ::: x witnesses y.",
        "Murders(x, y) ::: x murders y.",
        "InfectedBy(x, y) ::: x is infected by y.",
        "",
        "Premises:",
        "Takes(a_2, b_0) ::: Brigitte takes monkshood purchased by her mother.",
        "Asks(a_2, a_0, make(b_2)) ::: Brigitte asks Sam to make the cure.",
        "Attacks(a_1, a_2) ::: Ginger attacks Brigitte.",
        "InfectedBy(a_1, a_2) ::: Jason is infected by Ginger due to unprotected sex.",
        "Defends(a_2, a_1) ::: Brigitte defends herself against Jason.",
        "Uses(a_2, b_2) ::: Brigitte uses the cure on Jason.",
        "Witnesses(a_2, change(a_1)) ::: Brigitte witnesses Jason's immediate change in behavior.",
        "Dangerous(a_1) ::: Ginger is a danger to others.",
        "Murders(a_1, a_0) ::: Ginger murders the guidance counselor, Mr. Wayne.",
        "Witnesses(a_2, murder(a_1, a_0)) ::: Brigitte is a witness to Ginger killing the school's janitor.",
        "",
        "Conclusion:",
        "Dangerous(a_1) ::: Ginger is a danger to others."
      ]
    },
    {
      "id": "cf09f10dcf0a2d000a7d2a0fc776f16a0e5a86be",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "Mother(a_0) ::: a_0 is the girls' mother.",
        "Discovers(a_0, b_0) ::: a_0 discovers object b_0.",
        "LookingFor(a_0, a_2) ::: a_0 is looking for daughter a_2.",
        "Sees(a_0, a_2) ::: a_0 sees person a_2.",
        "PicksUp(a_0, a_2) ::: a_0 picks up person a_2.",
        "Drives(a_0, a_2, c_0) ::: a_0 drives person a_2 to location c_0.",
        "Tells(a_0, a_2, p) ::: a_0 tells person a_2 something p.",
        "Burns(a_0, c_0) ::: a_0 burns location c_0.",
        "FillsWithGas(c_0) ::: location c_0 is filled with gas.",
        "LightsMatch(a_0) ::: a_0 lights a match.",
        "ErasesEvidence(a_0, b_0) ::: a_0 erases evidence of object b_0.",
        "Rejects(a_1, a_2) ::: a_1 rejects advances of a_2.",
        "BreaksArm(a_1) ::: a_1 breaks Sam's arm.",
        "Infects(a_2) ::: a_2 infects herself.",
        "Pleading(a_1, a_2) ::: a_1 pleads with a_2.",
        "KnocksOut(a_1, a_2) ::: a_1 knocks out a_2.",
        "TakesBack(a_2, a_1, c_0) ::: a_2 and a_1 take a_2 back to location c_0.",
        "Prepares(a_2, b_2) ::: a_2 prepares more of the cure for b_2.",
        "",
        "Premises:",
        "Discovers(a_0, b_0) ::: The girls' mother discovers Trina's corpse.",
        "LookingFor(a_0, a_2) ::: The mother is looking for her daughters.",
        "Sees(a_0, a_2) ::: The mother sees Brigitte running.",
        "PicksUp(a_0, a_2) ::: The mother picks up Brigitte.",
        "Drives(a_0, a_2, c_0) ::: The mother drives Brigitte to the Greenhouse Bash.",
        "Tells(a_0, a_2, \"I will burn the house down by letting it fill up with gas then lighting a match to erase evidence of Trina's death.\") ::: The mother tells Brigitte her plan.",
        "Rejects(a_1, a_2) ::: Sam rejects Ginger's advances.",
        "BreaksArm(a_1) ::: Ginger breaks Sam's arm.",
        "Infects(a_2) ::: In despair, Brigitte infects herself.",
        "Pleading(a_1, a_2) ::: Sam pleads with Brigitte not to infect herself.",
        "KnocksOut(a_1, a_2) ::: Sam knocks Ginger out with a shovel.",
        "TakesBack(a_2, a_1, c_0) ::: Brigitte and Sam take Ginger back to the Fitzgerald house in his van.",
        "Prepares(a_2, b_2) ::: Brigitte and Sam prepare more of the cure for Ginger."
      ]
    },
    {
      "id": "cf09f10dcf0a2d000a7d2a0fc776f16a0e5a86be",
      "paragraph_id": 5,
      "fols": [
        "Predicates:",
        "Transformed(a_1) ::: Ginger fully transforms into a werewolf.",
        "Escaped(a_1) ::: Ginger escapes the van.",
        "Hiding(a_2, a_0) ::: Brigitte and Sam hide in the pantry.",
        "MakingCure(a_0, b_2) ::: Sam makes the cure.",
        "Mutilated(a_1, a_0) ::: Ginger mutilates Sam.",
        "FollowingBloodTrail(a_2, c_1) ::: Brigitte follows the blood trail downstairs.",
        "Injured(a_0) ::: Sam is injured.",
        "Bloody(a_0) ::: Sam is bloody.",
        "AttemptToSave(a_2, a_0) ::: Brigitte tries to save Sam.",
        "DrinkingBlood(a_2, a_0) ::: Brigitte attempts to drink Sam's blood.",
        "Revulsion(a_2) ::: Brigitte feels revulsion.",
        "Killed(a_1, a_0) ::: Ginger kills Sam.",
        "",
        "Premises:",
        "Transformed(a_1) ∧ Escaped(a_1) ::: Ginger fully transforms into a werewolf on the way home and escapes the van.",
        "Hiding(a_2, a_0) ∧ MakingCure(a_0, b_2) ::: Aware that she has transformed, Sam and Brigitte hide in the pantry as he makes the cure.",
        "Mutilated(a_1, a_0) ::: When he goes to find Ginger, Ginger mutilates Sam.",
        "FollowingBloodTrail(a_2, c_1) ::: Brigitte picks up the dropped syringe and follows the blood trail downstairs.",
        "Injured(a_0) ∧ Bloody(a_0) ::: After finding an injured and bloody Sam.",
        "AttemptToSave(a_2, a_0) ∧ ¬DrinkingBlood(a_2, a_0) ::: Brigitte tries to save him by drinking his blood in an attempt to calm Ginger, but can't go through with it.",
        "Revulsion(a_2) ∧ Killed(a_1, a_0) ::: Ginger sees Brigitte's revulsion and kills Sam in front of her by biting him in the jugular."
      ]
    },
    {
      "id": "cf09f10dcf0a2d000a7d2a0fc776f16a0e5a86be",
      "paragraph_id": 6,
      "fols": [
        "Predicates:",
        "Stalks(x, y) ::: x stalks y.",
        "Returns(x, y) ::: x returns to location y.",
        "Finds(x, y) ::: x finds object y.",
        "Holds(x, y) ::: x holds object y.",
        "Lunges(x, y) ::: x lunges at y.",
        "FatallyStabbed(x, y) ::: x is fatally stabbed by y.",
        "LaysHeadOn(x, y) ::: x lays their head on y.",
        "Sobs(x) ::: x sobs.",
        "",
        "Premises:",
        "Stalks(a_1, a_2) ::: Ginger stalks Brigitte.",
        "Returns(a_2, c_2) ::: Brigitte returns to the room where they grew up.",
        "Finds(a_2, b_1) ::: Brigitte finds the knife that Ginger had been using.",
        "Holds(a_2, b_2) ∧ Holds(a_2, b_1) ::: Brigitte holds the cure in one hand and the knife in the other.",
        "Lunges(a_1, a_2) ::: Ginger lunges at Brigitte.",
        "FatallyStabbed(a_1, b_1) ::: Ginger is fatally stabbed with the knife.",
        "LaysHeadOn(a_2, a_1) ::: Brigitte lays her head upon her dying sister's chest.",
        "Sobs(a_2) ::: Brigitte sobs."
      ]
    }
  ],
  "daa54dd9f8daecd7bcc6f01f3b360a272d5d97a4": [
    {
      "id": "daa54dd9f8daecd7bcc6f01f3b360a272d5d97a4",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "WrittenInParts(x) ::: x is written in three parts.",
        "",
        "Premises:",
        "WrittenInParts(book) ::: The book is written in three parts."
      ]
    },
    {
      "id": "daa54dd9f8daecd7bcc6f01f3b360a272d5d97a4",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "Believes(x, y) ::: x believes in concept y.",
        "Attends(x, y) ::: x attends institution y.",
        "LeavesBehind(x, y) ::: x leaves behind person y.",
        "Befriends(x, y) ::: x befriends person y.",
        "Reencounters(x, y) ::: x re-encounters person y.",
        "StartsRelationship(x, y) ::: x starts a romantic relationship with person y.",
        "WritesPoems(x) ::: x writes poems.",
        "Disenchanted(x, y) ::: x becomes disenchanted with person y.",
        "",
        "Premises:",
        "Believes(a_1, promisingFuture) ::: Amory Blaine believes he has an exceptionally promising future.",
        "Attends(a_1, boardingSchool) ::: Amory attends boarding school.",
        "Attends(a_1, PrincetonUniversity) ::: Amory attends Princeton University.",
        "LeavesBehind(a_1, Beatrice) ::: Amory leaves behind his eccentric mother Beatrice.",
        "Befriends(a_1, a_3) ::: Amory befriends Monsignor Darcy, a close friend of his mother.",
        "Reencounters(a_1, Isabelle) ::: Amory re-encounters Isabelle Borgé, a young lady he had met as a little boy.",
        "StartsRelationship(a_1, Isabelle) ::: Amory starts a romantic relationship with Isabelle.",
        "WritesPoems(a_1) ::: Amory writes ever more flowery poems.",
        "Disenchanted(a_1, Isabelle) ::: Amory becomes disenchanted with Isabelle after meeting again at his prom."
      ]
    },
    {
      "id": "daa54dd9f8daecd7bcc6f01f3b360a272d5d97a4",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "ServesInArmy(x) ::: x serves in the army.",
        "BayonetInstructor(x) ::: x is a bayonet instructor.",
        "Stationed(x, y) ::: x is stationed in location y.",
        "BreakUp(x, y) ::: x and y have broken up.",
        "",
        "Premises:",
        "ServesInArmy(a_1) ::: Amory is shipped overseas to serve in the army in World War I.",
        "BayonetInstructor(a_1) ::: Amory was a bayonet instructor.",
        "Stationed(a_0, b_1) ::: Fitzgerald was stationed in New York.",
        "BreakUp(a_1, a_2) ::: Amory and Rosalind Connage have broken up.",
        "",
        "Conclusion:",
        "ServesInArmy(a_1) ∧ BayonetInstructor(a_1) ::: Amory serves in the army and is a bayonet instructor."
      ]
    },
    {
      "id": "daa54dd9f8daecd7bcc6f01f3b360a272d5d97a4",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Poor(x) ::: x is poor.",
        "InLove(x, y) ::: x is in love with y.",
        "Marry(x, y) ::: x marries y.",
        "Mentor(x, y) ::: x is the mentor of y.",
        "Devastated(x) ::: x is devastated.",
        "Death(x) ::: x has died.",
        "Lament(x, y) ::: x expresses a lament about y.",
        "",
        "Premises:",
        "Poor(a_1) ∧ InLove(a_1, a_2) → RelationshipCollapse(a_1, a_2) ::: Amory's love for Rosalind Connage is affected by his poverty, leading to the collapse of their relationship.",
        "Devastated(a_1) ∧ Death(a_3) ::: Amory's devastation is compounded by the death of Monsignor Darcy.",
        "Lament(a_1, \"I know myself, but that is all\") ::: The book ends with Amory's iconic lament, \"I know myself, but that is all\".",
        "Marry(a_2, wealthyMan) ::: Rosalind decides to marry a wealthy man instead of Amory."
      ]
    }
  ],
  "e1ac7a600860a99c208b96dccc4e4f870c3108cf": [
    {
      "id": "e1ac7a600860a99c208b96dccc4e4f870c3108cf",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "FireStarted(x) ::: x is a fire that starts aboard the Colonial Marine spaceship Sulaco.",
        "LaunchesEscapePod(x, y) ::: x launches an escape pod containing y.",
        "InCryonicStasis(x) ::: x is in cryonic stasis.",
        "AttachedTo(x, y) ::: x is attached to y.",
        "CrashLands(x, y) ::: x crash-lands on y.",
        "InhabitedBy(x, y) ::: x is inhabited by y.",
        "Recovers(x, y) ::: x recovers y.",
        "",
        "Premises:",
        "FireStarted(sulaco) ::: A fire starts aboard the Colonial Marine spaceship Sulaco.",
        "LaunchesEscapePod(computer, [Ripley, Newt, Hicks, Bishop]) ::: The computer launches an escape pod containing Ellen Ripley, the young girl Newt, Hicks, and the damaged android Bishop.",
        "InCryonicStasis(Ripley) ∧ InCryonicStasis(Newt) ∧ InCryonicStasis(Hicks) ∧ InCryonicStasis(Bishop) ::: All four are in cryonic stasis.",
        "AttachedTo(facehugger, member) ::: Scans of the crew's cryotubes show an Alien facehugger attached to one of the members.",
        "CrashLands(pod, fiorina) ::: The pod crash-lands on Fiorina \"Fury\" 161.",
        "InhabitedBy(facility, male_inmates) ::: Fiorina \"Fury\" 161 is a foundry facility and penal colony inhabited by male inmates with histories of physical and sexual violence.",
        "Recovers(inmates, pod) ::: Inmates recover the pod and its passengers."
      ]
    },
    {
      "id": "e1ac7a600860a99c208b96dccc4e4f870c3108cf",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "SoleSurvivor(x) ::: x is the sole survivor of an incident involving an Alien.",
        "HasNoWeapons(facility) ::: The facility has no weapons to combat the Alien threat.",
        "HopeForSurvival(x) ::: x is the hope for survival against the Alien threat.",
        "Informs(x, y) ::: x informs y about something.",
        "Requests(x, y) ::: x requests y to perform an action.",
        "Conducts(x, y) ::: x conducts an action on y.",
        "Believes(x, y) ::: x believes in y.",
        "Suggests(x, y) ::: x suggests y to others.",
        "Kills(x, y) ::: x kills y.",
        "Cremates(x, y) ::: x cremated y.",
        "ReturnsToState(x, y) ::: x returns to a certain state y.",
        "",
        "Premises:",
        "SoleSurvivor(Ripley) ::: Ripley is the sole survivor of an incident involving an Alien.",
        "HasNoWeapons(facility) ::: The facility has no weapons to combat the Alien threat.",
        "HopeForSurvival(rescueShip) ::: The only hope for survival is the rescue ship sent by the Weyland-Yutani Corporation.",
        "Informs(Ripley, Andrews) ::: Ripley informs Andrews about her encounters with the Aliens.",
        "Requests(Ripley, Clemens) ::: Ripley requests Clemens to perform an autopsy on Newt.",
        "Conducts(Clemens, autopsyOn(Newt)) ::: Clemens conducts an autopsy on Newt.",
        "Believes(Andrews, Ripley) ::: Andrews does not believe Ripley's story.",
        "Suggests(Ripley, workTogetherToHunt) ::: Ripley suggests everyone work together to hunt down and kill the Alien.",
        "Cremates(facility, Newt) ::: The facility cremated Newt's body.",
        "Cremates(facility, Hicks) ::: The facility cremated Hicks' body.",
        "ReturnsToState(Golic, deranged) ::: Golic returns to his deranged state after the Alien kills several members of the colony."
      ]
    },
    {
      "id": "e1ac7a600860a99c208b96dccc4e4f870c3108cf",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "Surprises(x, y) ::: x surprises y.",
        "Kills(x, y) ::: x kills y.",
        "Examines(x, y) ::: x examines y.",
        "Spares(x, y) ::: x spares y.",
        "Orders(x, y, z) ::: x orders y to do z.",
        "Ambushed(x) ::: x is ambushed.",
        "Proposes(x, y) ::: x proposes y.",
        "Pours(x, y, z) ::: x pours y into z.",
        "Ignites(x, y) ::: x ignites y.",
        "Causes(x, y) ::: x causes y.",
        "Discovers(x, y) ::: x discovers y.",
        "GrowsInside(x, y) ::: x grows inside y.",
        "Hopes(x, y) ::: x hopes for y.",
        "",
        "Premises:",
        "Surprises(alien, ripley) ∧ Kills(alien, clemens) ::: The Alien surprises Ripley and kills Clemens.",
        "Examines(alien, ripley) ∧ Spares(alien, ripley) ∧ Retreats(alien) ::: The Alien examines Ripley, spares her, and retreats.",
        "Orders(andrew, aaron, takeBack(ripley, infirmary)) ::: Andrews orders Aaron to take her back to the infirmary.",
        "Ambushed(aaron) ∧ Kills(alien, aaron) ::: Aaron is ambushed and killed by the Alien.",
        "Proposes(ripley, pour(flammableToxicWaste, ventilationSystem)) ∧ Ignites(ripley, flammableToxicWaste) ::: Ripley proposes they pour flammable toxic waste into the ventilation system and ignite it.",
        "Causes(alien, explosion) ∧ Kills(alien, inmates) ::: The Alien's intervention causes an explosion and several inmates are killed.",
        "Discovers(ripley, embryo(c_4)) ∧ GrowsInside(c_4, ripley) ::: Ripley discovers the embryo of an Alien Queen growing inside her.",
        "Hopes(weylandYutani, turn(queenEmbryo, adultAlien, biologicalWeapon)) ::: Weyland-Yutani hopes to turn the Queen embryo and the adult Alien into a biological weapon."
      ]
    },
    {
      "id": "e1ac7a600860a99c208b96dccc4e4f870c3108cf",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Sacrifices(x, y) ::: x sacrifices himself to distract y.",
        "Kills(x, y) ::: x kills y.",
        "Plans(x, y) ::: x forms a plan to do y.",
        "Traps(x, y) ::: x traps y.",
        "Drowns(x, y) ::: x drowns y.",
        "Escapes(x) ::: x escapes from a situation.",
        "Activates(x, y) ::: x activates y.",
        "Covers(x, y) ::: x covers y.",
        "Shatters(x) ::: x shatters.",
        "",
        "Premises:",
        "Sacrifices(dillon, alien) ::: Dillon sacrifices himself to distract the Alien.",
        "Plans(ripley, (Traps(alien, foundry) ∧ Drowns(alien, moltenLead))) ::: Ripley forms a plan to trap the Alien in the foundry and drown it in molten lead.",
        "Covers(alien, moltenMetal) ::: The Alien is covered in molten metal.",
        "Escapes(alien) ::: The Alien escapes the mold.",
        "Activates(ripley, fireSprinklers) ::: Ripley activates the fire sprinklers.",
        "Kills(ripley, alien) ::: Ripley successfully kills the Alien by activating the fire sprinklers."
      ]
    },
    {
      "id": "e1ac7a600860a99c208b96dccc4e4f870c3108cf",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "Sacrifices(a_1, c_1) ::: Ripley sacrifices herself to prevent the baby Alien Queen from escaping.",
        "Creator(a_2, a_1) ::: Bishop's creator is the man who looks identical to Bishop.",
        "Persuades(a_2, a_1) ::: The man tries to persuade Ripley to undergo surgery.",
        "Refuses(a_1) ::: Ripley refuses to undergo surgery.",
        "Positions(a_3, c_2, c_3) ::: Morse positions the mobile platform over the furnace.",
        "Shoots(b_1, a_3) ::: The commando team shoots Morse in the leg.",
        "Strikes(a_4, a_2) ::: Aaron strikes the man with a wrench.",
        "ShotDead(a_4) ::: Aaron is shot dead.",
        "Beg(b_1, a_1) ::: The commando team begs Ripley.",
        "Throws(a_1, c_3) ::: Ripley throws herself into the furnace.",
        "Grabs(a_1, c_1) ::: Ripley grabs the baby Alien Queen.",
        "Falls(a_1, c_1, c_3) ::: Ripley and the baby Alien Queen fall into the furnace.",
        "Closes(c_5) ::: The facility is closed.",
        "LeadsAway(a_3) ::: Morse is led away.",
        "",
        "Premises:",
        "Sacrifices(a_1, c_1) ::: Ripley sacrifices herself to prevent the baby Alien Queen from escaping.",
        "Creator(a_2, a_1) ::: The man who looks identical to Bishop is Bishop's creator.",
        "Persuades(a_2, a_1) ::: The man tries to persuade Ripley to undergo surgery.",
        "Refuses(a_1) ::: Ripley refuses to undergo surgery.",
        "Positions(a_3, c_2, c_3) ::: Morse positions the mobile platform over the furnace.",
        "Shoots(b_1, a_3) ::: The commando team shoots Morse in the leg.",
        "Strikes(a_4, a_2) ::: Aaron strikes the man with a wrench.",
        "ShotDead(a_4) ::: Aaron is shot dead.",
        "Beg(b_1, a_1) ::: The commando team begs Ripley to let them have the \"magnificent specimen.\"",
        "Throws(a_1, c_3) ::: Ripley throws herself into the furnace.",
        "Grabs(a_1, c_1) ::: Ripley grabs the baby Alien Queen.",
        "Falls(a_1, c_1, c_3) ::: Ripley and the baby Alien Queen fall into the furnace.",
        "Closes(c_5) ::: The facility is closed.",
        "LeadsAway(a_3) ::: Morse is led away."
      ]
    }
  ],
  "e62ba8eff570a51d9e5dd256e45012d4d83bfd5f": [
    {
      "id": "e62ba8eff570a51d9e5dd256e45012d4d83bfd5f",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Owner(x) ::: x is the owner of the boarding house.",
        "Resident(x, y) ::: x is a resident of y.",
        "Ridiculed(x) ::: x is ridiculed by the other boarders.",
        "Bankrupted(x) ::: x has bankrupted himself.",
        "Supports(x, y) ::: x supports y.",
        "WellMarried(x) ::: x is well-married.",
        "",
        "Premises:",
        "Owner(madameVauquer) ::: Madame Vauquer owns the boarding house Maison Vauquer.",
        "Resident(eugène, maisonVauquer) ::: Eugène de Rastignac is a resident of the boarding house.",
        "Resident(vautrin, maisonVauquer) ::: Vautrin is a resident of the boarding house.",
        "Resident(goriot, maisonVauquer) ::: Jean-Joachim Goriot is a resident of the boarding house.",
        "Ridiculed(goriot) ::: Goriot is ridiculed frequently by the other boarders.",
        "Bankrupted(goriot) ::: Goriot has bankrupted himself.",
        "Supports(goriot, daughters) ::: Goriot supports his two well-married daughters.",
        "WellMarried(daughters) ::: Goriot's daughters are well-married.",
        "",
        "Conclusion:",
        "∀x (Resident(x, maisonVauquer) → (x = eugène ∨ x = vautrin ∨ x = goriot)) ::: All residents of the boarding house are either Eugène, Vautrin, or Goriot."
      ]
    },
    {
      "id": "e62ba8eff570a51d9e5dd256e45012d4d83bfd5f",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "TutoredBy(x, y) ::: x is tutored by y in the ways of high society.",
        "EndearsTo(x, y) ::: x endears himself to y.",
        "ExtractsMoneyFrom(x, y) ::: x extracts money from y.",
        "OffersHelp(x, y) ::: x offers help to y.",
        "Pursue(x, y) ::: x pursues y.",
        "Unmarried(x) ::: x is an unmarried woman.",
        "BlockedFortune(x) ::: x has a family fortune that is blocked.",
        "",
        "Premises:",
        "TutoredBy(a_4, Madame de Beauséant) ::: Rastignac is tutored in the ways of high society by Madame de Beauséant.",
        "EndearsTo(a_4, a_1) ::: Rastignac endears himself to Delphine after extracting money from his family.",
        "ExtractsMoneyFrom(a_4, a_3) ::: Rastignac extracts money from his own already-poor family.",
        "OffersHelp(a_5, a_4) ::: Vautrin offers to help Rastignac pursue Victorine.",
        "Unmarried(Victorine) ::: Victorine is an unmarried woman.",
        "BlockedFortune(Victorine) ::: Victorine has a family fortune that is blocked only by her brother."
      ]
    },
    {
      "id": "e62ba8eff570a51d9e5dd256e45012d4d83bfd5f",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "Refuses(x) ::: x refuses to go along with the plot.",
        "Balks(x) ::: x balks at the idea of having someone killed to acquire their wealth.",
        "Notes(x, y) ::: x takes note of y's machinations.",
        "Learns(x, y) ::: x learns a lesson in y.",
        "Seeks(x, y) ::: x is seeking y.",
        "RevealedAs(x, y) ::: x is revealed to be y.",
        "Arranges(x, y) ::: x arranges for y.",
        "Captured(x) ::: x is captured by the police.",
        "",
        "Premises:",
        "Refuses(rastignac) ∧ Balks(rastignac) ::: Rastignac refuses to go along with the plot and balks at the idea of having someone killed to acquire their wealth.",
        "Notes(rastignac, vautrin) ::: Rastignac takes note of Vautrin's machinations.",
        "Learns(rastignac, harshRealitiesOfHighSociety) ::: Rastignac learns a lesson in the harsh realities of high society.",
        "∀x (Learns(x, harshRealitiesOfHighSociety) → Seeks(police, vautrin)) ::: If someone learns a lesson in the harsh realities of high society, then the police are seeking Vautrin.",
        "RevealedAs(vautrin, masterCriminal) ::: Vautrin is revealed to be a master criminal nicknamed Trompe-la-Mort (\"Cheater of Death\").",
        "Arranges(vautrin, killVictorineBrother) ::: Vautrin arranges for a friend to kill Victorine's brother.",
        "Captured(vautrin) ::: Vautrin is captured by the police."
      ]
    },
    {
      "id": "e62ba8eff570a51d9e5dd256e45012d4d83bfd5f",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Supportive(x, y) ::: x is supportive of y's interest.",
        "Furious(x, y) ::: x is furious with y.",
        "UnableToHelp(x) ::: x is unable to help.",
        "SellingJewelry(x) ::: x is selling off jewelry.",
        "OvercomeWithGrief(x) ::: x is overcome with grief.",
        "SuffersStroke(x) ::: x suffers a stroke.",
        "",
        "Premises:",
        "Supportive(a_3, a_4) ∧ Furious(a_3, a_5) ∧ UnableToHelp(a_3) ::: Goriot is supportive of Rastignac's interest in his daughter and furious with her husband's tyrannical control over her, finding himself unable to help.",
        "SellingJewelry(a_2) ∧ OvercomeWithGrief(a_3) ∧ SuffersStroke(a_3) ::: Anastasie informs Goriot that she has been selling off her husband's family jewelry to pay her lover's debts, which causes Goriot to be overcome with grief and suffer a stroke."
      ]
    },
    {
      "id": "e62ba8eff570a51d9e5dd256e45012d4d83bfd5f",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "Visits(x, y) ::: x visits y.",
        "LiesOnDeathbed(x) ::: x lies on his deathbed.",
        "ArrivesTooLate(x, y) ::: x arrives too late to see y.",
        "RagesAboutDisrespect(x) ::: x rages about disrespect toward him.",
        "AttendsFuneral(x, y) ::: x attends the funeral of y.",
        "SendsEmptyCoaches(x, y) ::: x sends empty coaches bearing their families' respective coat of arms.",
        "TurnsToFace(x, y) ::: x turns to face y.",
        "Declares(x, y) ::: x declares something to y.",
        "DinesWith(x, y) ::: x dines with y.",
        "",
        "Premises:",
        "¬Visits(a_1, a_3) ::: Delphine does not visit Goriot as he lies on his deathbed.",
        "ArrivesTooLate(a_2, a_3) ::: Anastasie arrives too late, only once Goriot has lost consciousness.",
        "RagesAboutDisrespect(a_3) ::: Before dying, Goriot rages about their disrespect toward him.",
        "AttendsFuneral(a_4, a_3) ∧ AttendsFuneral(a_5, a_3) ∧ AttendsFuneral(b_2, a_3) ::: Goriot's funeral is attended only by Rastignac, a servant named Christophe, and two paid mourners.",
        "SendsEmptyCoaches(b_1, a_3) ::: Goriot's daughters send their empty coaches, each bearing their families' respective coat of arms.",
        "TurnsToFace(a_4, c_1) ::: Rastignac turns to face Paris as the lights of evening begin to appear.",
        "DinesWith(a_4, a_1) ::: He sets out to dine with Delphine de Nucingen.",
        "Declares(a_4, \"À nous deux, maintenant!\") ::: Rastignac declares to the city: \"À nous deux, maintenant!\" (\"It's between you and me now!\")"
      ]
    }
  ],
  "ec25b1507cdc7d59d8b9341d93ff59b649c5752f": [
    {
      "id": "ec25b1507cdc7d59d8b9341d93ff59b649c5752f",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Struggling(x) ::: x is struggling economically.",
        "InvolvedInIllegalActivities(x) ::: x is involved in illegal activities.",
        "DiscountStoreClerk(x) ::: x is a discount store clerk.",
        "MotherOf(x, y) ::: x is the mother of y.",
        "DrivingCar(x) ::: x is driving a car.",
        "FoundAbandoned(x) ::: x is found abandoned.",
        "TraffickingIllegalImmigrants(x, y) ::: x is trafficking illegal immigrants for y.",
        "Location(x, y) ::: x is located in y.",
        "",
        "Premises:",
        "Struggling(rayEddy) ::: Ray Eddy is struggling economically.",
        "Struggling(lilaLittlewolf) ::: Lila Littlewolf is struggling economically.",
        "InvolvedInIllegalActivities(rayEddy) ::: Ray Eddy is involved in illegal activities due to her economic struggles.",
        "InvolvedInIllegalActivities(lilaLittlewolf) ::: Lila Littlewolf is involved in illegal activities due to her economic struggles.",
        "DiscountStoreClerk(rayEddy) ::: Ray Eddy is a discount store clerk.",
        "DrivingCar(lilaLittlewolf) ::: Lila Littlewolf is driving a car.",
        "FoundAbandoned(lilaLittlewolf) ::: Lila Littlewolf found the car abandoned.",
        "TraffickingIllegalImmigrants(rayEddy, 1200) ::: Ray Eddy is trafficking illegal immigrants for $1,200 each.",
        "TraffickingIllegalImmigrants(lilaLittlewolf, 1200) ::: Lila Littlewolf is trafficking illegal immigrants for $1,200 each.",
        "Location(b0, \"North Country of Upstate New York\") ::: The film is set in the North Country of Upstate New York.",
        "",
        "Conclusion:",
        "InvolvedInIllegalActivities(rayEddy) ∧ InvolvedInIllegalActivities(lilaLittlewolf) ::: Both Ray Eddy and Lila Littlewolf are involved in illegal activities due to their economic struggles."
      ]
    },
    {
      "id": "ec25b1507cdc7d59d8b9341d93ff59b649c5752f",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "WantsJob(a_2) ::: T.J. wants to find a job.",
        "SupportsFamily(a_2) ::: T.J. wants to help support the family.",
        "Clashes(a_2, a_4) ::: T.J. clashes with his mother over his decision.",
        "RemainsInHighSchool(a_2) ::: T.J. remains in high school.",
        "LooksAfter(a_2, a_5) ::: T.J. looks after his younger brother Ricky.",
        "DropsOut(a_2) ::: T.J. drops out of high school to work.",
        "SetsFire(a_2, b_1) ::: T.J. sets the trailer on fire.",
        "LongsFor(a_1, c) ::: Lila longs for the day she can reclaim her son.",
        "TakenBy(a_3, c) ::: Lila's mother-in-law took Lila's son from her.",
        "",
        "Premises:",
        "WantsJob(a_2) ∧ SupportsFamily(a_2) ::: T.J. wants to find a job and help support the family.",
        "Clashes(a_2, a_4) ∧ (RemainsInHighSchool(a_2) ∧ LooksAfter(a_2, a_5) ∨ DropsOut(a_2)) ::: T.J. clashes with his mother over whether he should remain in high school and look after his younger brother Ricky or drop out to work.",
        "SetsFire(a_2, b_1) ::: T.J. sets an outside corner of the trailer on fire with a torch.",
        "LongsFor(a_1, c) ∧ TakenBy(a_3, c) ::: Lila longs for the day she will be able to reclaim her son, who was taken from her by her mother-in-law immediately after his birth."
      ]
    },
    {
      "id": "ec25b1507cdc7d59d8b9341d93ff59b649c5752f",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "Smuggler(x) ::: x is a person participating in the smuggling operation.",
        "Detectable(x) ::: x is detectable by local law-enforcement.",
        "Baby(x) ::: x is an infant baby.",
        "Revive(x) ::: x is revived from a state of being dead.",
        "Coerce(x, y) ::: x coerces y into doing something.",
        "Crossing(x) ::: x is a crossing of the border.",
        "Finances(x, y) ::: x finances y.",
        "MobileHome(x) ::: x is a mobile home.",
        "",
        "Premises:",
        "∀x (Smuggler(x) → ¬Detectable(x)) ::: The women's route takes them from an Indian reservation in the US to an Indian reserve in Canada, and they hope to avoid detection by local law-enforcement.",
        "∀x (¬Detectable(x) ∧ ¬Detectable(y) → ¬Detectable(x) ∧ ¬Detectable(y)) ::: Their problems escalate when they are asked to smuggle a Pakistani couple and Ray, leading to a situation where they are not detectable.",
        "Baby(b) ∧ ¬Detectable(b) ∧ ¬Revive(b) ::: Ray leaves the duffel bag behind in sub-freezing temperatures, only to discover it contained their infant baby when they arrive at their destination.",
        "Revive(b) ∧ ¬Detectable(b) ::: Lila insists the baby is dead, but she revives the baby moments before being reunited with the baby's parents.",
        "¬Smuggler(a_1) → Coerce(a_0, a_1) ::: The experience leaves Lila shaken, and she announces she no longer wants to participate in the smuggling operation, but Ray coerces her into joining her for one last journey.",
        "Crossing(a_0) ∧ Finances(a_0, MobileHome(a_0)) ::: Ray's need for one more crossing to finance the down payment on her mobile home influences her decision to continue participating in the smuggling operation."
      ]
    },
    {
      "id": "ec25b1507cdc7d59d8b9341d93ff59b649c5752f",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Shaken(x) ::: x is shaken after being shot in the ear.",
        "ErraticDriving(x) ::: x is driving erratically.",
        "AttentionFromPolice(x) ::: x catches the attention of the provincial police.",
        "AbandonVehicle(x) ::: x abandons the vehicle.",
        "SeekRefuge(x, y) ::: x seeks refuge at location y.",
        "CrossFrozenRiver(x) ::: x crosses the frozen river.",
        "",
        "Premises:",
        "Shaken(ray) ::: Ray is shaken after being shot in the ear.",
        "ErraticDriving(ray) ∧ AttentionFromPolice(ray) ::: Ray's erratic driving leads to police attention.",
        "∀x (AbandonVehicle(x) → SeekRefuge(x, IndianReservation)) ::: The four women seek refuge after abandoning the vehicle.",
        "CrossFrozenRiver(ray) ::: Ray crosses the frozen river where one of the wheels of the car breaks through the ice."
      ]
    },
    {
      "id": "ec25b1507cdc7d59d8b9341d93ff59b649c5752f",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "Excommunicated(x) ::: x is excommunicated.",
        "SmugglingHistory(x) ::: x has a smuggling history.",
        "FitOfConscience(x) ::: x has a fit of conscience.",
        "GivesShare(x, y) ::: x gives her share to y.",
        "TakesCareOf(x, y) ::: x takes care of y.",
        "Surrendered(x) ::: x is surrendered to the police.",
        "Speculates(x, y) ::: x speculates about y.",
        "Calls(x, y) ::: x calls y.",
        "",
        "Premises:",
        "Excommunicated(a_1) ∧ SmugglingHistory(a_1) ::: Lila is excommunicated due to her smuggling history.",
        "FitOfConscience(a_1) ∧ Surrendered(a_1) ::: Ray's actions are motivated by a fit of conscience and she surrenders to the police.",
        "GivesShare(a_1, a_2) ::: Lila gives her share of money to T.J.",
        "TakesCareOf(a_1, a_5) ::: Lila takes care of T.J.'s younger brother.",
        "Speculates(a_0, fourMonthsInJail) ::: A trooper speculates that Lila will have to serve four months in jail.",
        "Calls(a_1, a_2) ::: Lila calls her son T.J. to explain what has happened."
      ]
    },
    {
      "id": "ec25b1507cdc7d59d8b9341d93ff59b649c5752f",
      "paragraph_id": 5,
      "fols": [
        "Predicates:",
        "PushesInto(x, y) ::: x pushes into y.",
        "Reclaims(x, y) ::: x reclaims y.",
        "ShowsUp(x, y) ::: x shows up at y.",
        "Completes(x, y) ::: x completes y.",
        "Welds(x, y) ::: x welds y.",
        "Pedals(x, y) ::: x pedals y.",
        "Smiles(x) ::: x smiles.",
        "Carries(x, y) ::: x carries y.",
        "Home(x) ::: x is a home.",
        "",
        "Premises:",
        "PushesInto(a_1, a_3) ::: Lila pushes her way into her mother-in-law's home.",
        "Reclaims(a_1, c) ::: Lila reclaims her infant son.",
        "ShowsUp(a_1, b_0) ::: Lila and the baby show up at the Eddy trailer.",
        "Completes(a_2, y) ::: T.J. completes the welding of a bicycle-propelled carousel.",
        "Welds(a_2, y) ::: T.J. welds a bicycle-propelled carousel bearing his younger brother and Lila's strapped in baby.",
        "Pedals(a_2, y) ::: T.J. pedals the carousel.",
        "Smiles(a_1) ::: Lila smiles on.",
        "Carries(truck, b_1) ::: A truck nears carrying the new trailer home.",
        "",
        "Conclusion:",
        "Home(a_3) ::: Lila's mother-in-law's home is a home.",
        "Home(b_1) ::: The trailer is a home."
      ]
    }
  ],
  "ee7e2ef2ecfa84682214c65ed178f959eaffb8ea": [
    {
      "id": "ee7e2ef2ecfa84682214c65ed178f959eaffb8ea",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "IntroducedToCrime(x, y) ::: x was introduced to organized crime by y.",
        "Grooms(x, y) ::: x grooms y to become a mole.",
        "AcceptedIntoUnit(x, y) ::: x is accepted into y.",
        "FocusesOn(x, y) ::: x focuses on y.",
        "",
        "Premises:",
        "IntroducedToCrime(sullivan, costello) ::: Colin Sullivan was introduced to organized crime by Frank Costello.",
        "Grooms(costello, sullivan) ::: Frank Costello grooms Colin Sullivan to become a mole inside the Massachusetts State Police.",
        "AcceptedIntoUnit(sullivan, specialInvestigationsUnit) ::: Colin Sullivan is accepted into the Special Investigations Unit.",
        "FocusesOn(specialInvestigationsUnit, organizedCrime) ::: The Special Investigations Unit focuses on organized crime."
      ]
    },
    {
      "id": "ee7e2ef2ecfa84682214c65ed178f959eaffb8ea",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "Recruited(x, y) ::: x is recruited by y.",
        "Undercover(x) ::: x is going undercover.",
        "FamilyTiesToOrganizedCrime(x) ::: x has family ties to organized crime.",
        "Credibility(x) ::: x has credibility.",
        "PrisonTime(x) ::: x does time in prison.",
        "FakeAssaultCharge(x) ::: x is charged with a fake assault.",
        "",
        "Premises:",
        "Recruited(billy, captainQueenan) ∧ Undercover(billy) ∧ FamilyTiesToOrganizedCrime(billy) ::: Billy Costigan is recruited by Captain Queenan to go undercover due to his family ties to organized crime.",
        "¬(Undercover(billy) ∧ PrisonTime(billy)) → (PrisonTime(billy) ∧ FakeAssaultCharge(billy)) ::: If Billy is not going undercover, then he does time in prison on a fake assault charge to increase his credibility.",
        "",
        "Conclusion:",
        "Recruited(billy, captainQueenan) ::: Billy Costigan is recruited by Captain Queenan.",
        "Undercover(billy) ::: Billy Costigan is going undercover."
      ]
    },
    {
      "id": "ee7e2ef2ecfa84682214c65ed178f959eaffb8ea",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "Infiltrates(x, y) ::: x infiltrates organization y.",
        "Romances(x, y) ::: x begins a romance with y.",
        "Sees(x, y) ::: x sees y under certain terms.",
        "AwareOf(x, y) ::: x is aware of y's existence.",
        "ToldToFind(x, y) ::: x is told to find y.",
        "Asks(x, y) ::: x asks y for information.",
        "",
        "Premises:",
        "Infiltrates(sullivan, organization) ::: Each man infiltrates his respective organization.",
        "Romances(sullivan, madolyn) ::: Sullivan begins a romance with police psychiatrist Madolyn Madden.",
        "Sees(costigan, madolyn) ::: Costigan is seeing her under the terms of his probation.",
        "AwareOf(sullivan, costigan) ::: After Costello escapes a sting operation, each mole becomes aware of the other's existence.",
        "ToldToFind(sullivan, rat) ::: Sullivan is told to find the \"rat\".",
        "Asks(sullivan, costello) ::: Sullivan asks Costello for information to identify the informer."
      ]
    },
    {
      "id": "ee7e2ef2ecfa84682214c65ed178f959eaffb8ea",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Follows(x, y) ::: x follows y.",
        "Gives(x, y, z) ::: x gives y to z.",
        "Chases(x, y) ::: x chases y.",
        "KnowsIdentity(x, y) ::: x knows the identity of y.",
        "Tails(x, y) ::: x tails y.",
        "Orders(x, y, z) ::: x orders y to do z.",
        "Throws(x, y) ::: x throws y.",
        "Pretends(x, y) ::: x pretends to be y.",
        "Reports(x, y) ::: x reports y.",
        "Resigns(x) ::: x resigns from a position.",
        "Suspects(x, y) ::: x suspects y.",
        "",
        "Premises:",
        "Follows(costigan, costello) ::: Costigan follows Costello into a porn theater.",
        "Gives(costello, envelope, sullivan) ::: Costello gives Sullivan an envelope containing personal information on his crew members.",
        "Chases(costigan, sullivan) ::: Costigan chases Sullivan through Chinatown.",
        "¬KnowsIdentity(costigan, sullivan) ::: Neither man knows the other's identity.",
        "Tails(sullivan, queenan) ::: Sullivan has Queenan tailed to a meeting with Costigan on the roof of a building.",
        "Orders(queenan, costigan, flee) ::: Queenan orders Costigan to flee while he confronts Costello's men alone.",
        "Throws(costello's men, queenan) ::: The men then throw Queenan off the building to his death.",
        "Pretends(costigan, joinThem) ::: Costigan pretends he has come to join them.",
        "Reports(televisionNews, delahunt) ::: Television news reports that crew member Delahunt has been a Boston Police Department undercover cop.",
        "Believes(costello, lie) ::: Costello believes it to be a lie probably designed to lull him into a sense of security.",
        "Resigns(dignam) ::: Dignam resigns rather than work with Sullivan.",
        "Suspects(dignam, sullivan) ::: Dignam suspects Sullivan is the mole after he is asked why he had Queenan followed."
      ]
    },
    {
      "id": "ee7e2ef2ecfa84682214c65ed178f959eaffb8ea",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "Enemy(x, y) ::: x is the enemy of y.",
        "Informant(x, y) ::: x is an informant for y.",
        "Shoots(x, y) ::: x shoots y.",
        "Applauded(x) ::: x is applauded by everyone on the force.",
        "Flees(x) ::: x flees from a location.",
        "ErasesRecords(x) ::: x erases records from the police computer system.",
        "PaidForWork(x) ::: x is paid for their work.",
        "TracedTo(x, y) ::: x is traced to y.",
        "Gunfight(x, y) ::: x and y are involved in a gunfight.",
        "",
        "Premises:",
        "Enemy(a_1, a_0) ::: Sullivan is the enemy of Costigan.",
        "Informant(costello, FBI) ::: Costello is an informant for the FBI.",
        "Shoots(a_1, costello) ::: Sullivan shoots Costello multiple times.",
        "Applauded(a_1) ::: Sullivan is applauded the next day by everyone on the force.",
        "Flees(costigan) ::: Costigan flees after realizing Sullivan is the enemy.",
        "ErasesRecords(a_1) ::: Sullivan erases Costigan's records from the police computer system.",
        "TracedTo(costello, cocaineDropOff) ::: Costello is traced to a cocaine drop-off.",
        "Gunfight(costelloCrew, police) ::: A gunfight erupts between Costello's crew and the police.",
        "",
        "Conclusion:",
        "PaidForWork(costigan) ::: Costigan comes to Sullivan for restoration of his true identity and to be paid for his work."
      ]
    },
    {
      "id": "ee7e2ef2ecfa84682214c65ed178f959eaffb8ea",
      "paragraph_id": 5,
      "fols": [
        "Predicates:",
        "Unaware(x) ::: x is unaware of certain information.",
        "Pregnant(x) ::: x is pregnant.",
        "ListeningTo(x, y) ::: x is listening to y.",
        "Contains(x, y) ::: x contains y.",
        "AttemptsToAssuage(x, y) ::: x attempts to assuage y's suspicions.",
        "Contacts(x, y) ::: x contacts y.",
        "Reveals(x, y) ::: x reveals y to someone.",
        "IntendsToImplicate(x, y) ::: x intends to implicate y.",
        "AgreesToMeet(x, y) ::: x agrees to meet y at a location.",
        "",
        "Premises:",
        "Unaware(a_1) ∧ Pregnant(a_2) ::: Sullivan is unaware that Madolyn is pregnant.",
        "ListeningTo(a_2, CD) ∧ Contains(CD, incriminating conversations) ::: Madolyn is listening to a CD from Costigan that contains incriminating recorded conversations.",
        "AttemptsToAssuage(a_1, a_2) ::: Sullivan unsuccessfully attempts to assuage Madolyn's suspicions.",
        "Contacts(a_1, a_3) ::: Sullivan contacts Costigan.",
        "Reveals(a_3, recordings) ∧ Contains(recordings, conversations) ∧ IntendsToImplicate(a_3, a_1) ::: Costigan reveals that Costello recorded every one of their conversations and intends to implicate Sullivan.",
        "AgreesToMeet(a_1, a_3) ::: Sullivan and Costigan agree to meet at the building where Queenan died."
      ]
    },
    {
      "id": "ee7e2ef2ecfa84682214c65ed178f959eaffb8ea",
      "paragraph_id": 6,
      "fols": [
        "Predicates:",
        "Catches(x, y) ::: x catches y off-guard.",
        "Handcuffs(x, y) ::: x handcuffs y.",
        "Appears(x) ::: x appears on the roof.",
        "DrawsGun(x) ::: x draws a gun.",
        "Justifies(x, y) ::: x justifies actions by exposing y.",
        "Identifies(x, y) ::: x identifies y as the mole.",
        "Recommends(x, y) ::: x recommends y for the Medal of Merit.",
        "Shoots(x, y) ::: x shoots y.",
        "Hostage(x, y) ::: y is the hostage of x.",
        "ElevatorArrives(x) ::: x leads to the elevator arriving at the ground floor.",
        "",
        "Premises:",
        "Catches(costigan, sullivan) ::: Costigan catches Sullivan off-guard.",
        "Handcuffs(costigan, sullivan) ::: Costigan handcuffs Sullivan.",
        "Appears(brown) ::: Trooper Brown appears on the roof.",
        "DrawsGun(brown) ::: Brown draws his gun on Costigan.",
        "Justifies(costigan, sullivan) ::: Costigan attempts to justify his actions by exposing Sullivan as Costello's mole.",
        "Identifies(sullivan, barrigan) ::: Sullivan identifies Barrigan as the mole.",
        "Recommends(sullivan, costigan) ::: Sullivan recommends Costigan for the Medal of Merit.",
        "Shoots(barrigan, costigan) ::: Barrigan shoots Costigan in the head.",
        "Shoots(barrigan, brown) ::: Barrigan shoots Brown.",
        "Shoots(sullivan, barrigan) ::: Sullivan shoots and kills Barrigan.",
        "Hostage(costigan, sullivan) ::: Costigan leads Sullivan, his hostage, to the elevator.",
        "ElevatorArrives(costigan) ::: The elevator reaches the ground floor."
      ]
    },
    {
      "id": "ee7e2ef2ecfa84682214c65ed178f959eaffb8ea",
      "paragraph_id": 7,
      "fols": [
        "Predicates:",
        "Tearful(a_2) ::: Madolyn is tearful.",
        "Notices(a_1, a_2) ::: Sullivan notices Madolyn.",
        "AttemptsToTalk(a_1, a_2) ::: Sullivan attempts to talk to Madolyn.",
        "Ignores(a_2, a_1) ::: Madolyn ignores Sullivan.",
        "Ambushed(a_1, a_3) ::: Sullivan is ambushed by Dignam.",
        "Shoots(a_3, a_1) ::: Dignam shoots Sullivan.",
        "Kills(a_3, a_1) ::: Dignam kills Sullivan.",
        "Enters(a_1, c_2) ::: Sullivan enters his apartment.",
        "",
        "Premises:",
        "Notices(a_1, a_2) ∧ Tearful(a_2) ::: Sullivan notices that Madolyn is tearful at Costigan's funeral.",
        "AttemptsToTalk(a_1, a_2) ∧ Ignores(a_2, a_1) ::: Sullivan attempts to talk to Madolyn, but she ignores him.",
        "Ambushed(a_1, a_3) ∧ Enters(a_1, c_2) ::: Sullivan is ambushed by Dignam as he enters his apartment.",
        "Shoots(a_3, a_1) ∧ Kills(a_3, a_1) ::: Dignam shoots and kills Sullivan.",
        "",
        "Conclusion:",
        "Tearful(a_2) ::: Madolyn is tearful.",
        "Ambushed(a_1, a_3) ::: Sullivan is ambushed by Dignam."
      ]
    }
  ],
  "ef722cf82033c8e66197209f06a9cb9754be78d9": [
    {
      "id": "ef722cf82033c8e66197209f06a9cb9754be78d9",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Detained(x) ::: x is detained by officer.",
        "BroughtTo(x, y) ::: x is brought to y.",
        "FormerSupervisor(x, y) ::: x is a former supervisor of y.",
        "Job(x, y) ::: x has the job of y.",
        "TrackDown(x, y) ::: x tracks down y.",
        "Retire(x, y) ::: x \"retires\" (kills) y.",
        "IllegalArrival(x) ::: x has arrived illegally.",
        "Lifespan(x, y) ::: x has a lifespan of y years.",
        "CameToEarth(x) ::: x has come to Earth.",
        "",
        "Premises:",
        "Detained(a_1) ∧ BroughtTo(a_1, a_4) ∧ FormerSupervisor(a_4, a_1) ::: Rick Deckard is detained by officer Gaff and brought to his former supervisor, Bryant.",
        "Job(a_1, \"Blade Runner\") ::: Deckard's job is to track down bioengineered beings known as replicants.",
        "TrackDown(a_1, a_2) ∧ TrackDown(a_1, a_3) ::: Deckard tracks down Pris and Roy.",
        "Retire(a_1, a_2) ∧ Retire(a_1, a_3) ::: Deckard \"retires\" (kills) Pris and Roy.",
        "∃x (IllegalArrival(x) ∧ CameToEarth(x)) ::: Rick Deckard is informed about the illegal arrival of four replicants.",
        "∀x (Lifespan(x, 4) ∧ CameToEarth(x)) ::: As Tyrell Corporation Nexus-6 models, they have only a four-year lifespan and may have come to Earth to try to extend their lives."
      ]
    },
    {
      "id": "ef722cf82033c8e66197209f06a9cb9754be78d9",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "Watches(x, y) ::: x watches y.",
        "Administers(x, y) ::: x administers y.",
        "Test(x) ::: x is a test.",
        "Subject(x) ::: x is a test subject.",
        "Shoots(x, y) ::: x shoots y.",
        "Wants(x, y) ::: x wants y.",
        "Retire(x, y) ::: x must retire y.",
        "Threatens(x, y) ::: x threatens y.",
        "Agrees(x, y) ::: x agrees to y.",
        "ReluctantlyAgrees(x, y) ::: x reluctantly agrees to y.",
        "",
        "Premises:",
        "Watches(deckard, video) ::: Deckard watches a video.",
        "Administers(holden, VoightKampff) ::: Holden administers the \"Voight-Kampff\" test.",
        "Test(VoightKampff) ::: \"Voight-Kampff\" is a test designed to distinguish replicants from humans.",
        "Subject(leon) ::: Leon is a test subject.",
        "Shoots(leon, holden) ::: Leon shoots Holden after Holden asks about Leon's mother.",
        "Wants(bryant, retire(leon)) ::: Bryant wants Deckard to retire Leon.",
        "Wants(bryant, retire(roy)) ::: Bryant wants Deckard to retire Roy Batty.",
        "Wants(bryant, retire(zhora)) ::: Bryant wants Deckard to retire Zhora.",
        "Wants(bryant, retire(pris)) ::: Bryant wants Deckard to retire Pris.",
        "Threatens(bryant, deckard) ::: Bryant ambiguously threatens Deckard.",
        "ReluctantlyAgrees(deckard, retire(leon)) ::: Deckard reluctantly agrees to retire Leon after Bryant's threat.",
        "ReluctantlyAgrees(deckard, retire(roy)) ::: Deckard reluctantly agrees to retire Roy after Bryant's threat.",
        "ReluctantlyAgrees(deckard, retire(zhora)) ::: Deckard reluctantly agrees to retire Zhora after Bryant's threat.",
        "ReluctantlyAgrees(deckard, retire(pris)) ::: Deckard reluctantly agrees to retire Pris after Bryant's threat."
      ]
    },
    {
      "id": "ef722cf82033c8e66197209f06a9cb9754be78d9",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "Replicant(x) ::: x is a replicant.",
        "Human(x) ::: x is human.",
        "TestRequired(x) ::: A more extensive test is required to determine the nature of x.",
        "Assistant(x, y) ::: x is the assistant of y.",
        "Believes(x, y) ::: x believes y to be true.",
        "FalseMemories(x) ::: x has been given false memories.",
        "EmotionalCushion(x) ::: x provides an emotional cushion.",
        "Investigation(x, y) ::: x begins an investigation at y.",
        "WorksOn(x, y) ::: x works on y.",
        "",
        "Premises:",
        "Investigation(deckard, tyrellCorporation) ::: Deckard begins his investigation at the Tyrell Corporation to ensure that the test works on Nexus-6 models.",
        "Assistant(rachael, tyrell) ::: Rachael is an assistant of Dr. Eldon Tyrell.",
        "Believes(rachael, human) ::: Rachael believes herself to be human.",
        "FalseMemories(rachael) ::: Rachael has been given false memories.",
        "EmotionalCushion(rachael) ::: The false memories provide Rachael with an emotional cushion.",
        "TestRequired(rachael) → Replicant(rachael) ::: Rachael is a replicant if a more extensive test is required to determine her nature."
      ]
    },
    {
      "id": "ef722cf82033c8e66197209f06a9cb9754be78d9",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Searches(x, y) ::: x searches for y.",
        "WorksWith(x, y) ::: x works closely with y.",
        "ProvesHumanity(x, y) ::: x proves their humanity to y.",
        "Shows(x, y) ::: x shows y something.",
        "Reveals(x, y) ::: x reveals y to someone.",
        "Leaves(x, y) ::: x leaves y.",
        "Manipulates(x, y) ::: x manipulates y to gain their trust.",
        "",
        "Premises:",
        "Searches(a_1, a_3) ::: Deckard searches for the replicants.",
        "Searches(a_3, a_4) ::: Roy searches for Tyrell to force him to extend their lives.",
        "Searches(a_2, a_1) ::: Pris locates Sebastian and manipulates him to gain his trust.",
        "WorksWith(a_3, a_4) ::: J.F. Sebastian works closely with Tyrell.",
        "ProvesHumanity(a_5, a_1) ::: Rachael visits Deckard to prove her humanity.",
        "Shows(a_5, c_0) ::: Rachael shows Deckard a family photo.",
        "Reveals(a_1, a_5) ::: Deckard reveals to Rachael that her memories are implants from Tyrell's niece.",
        "Leaves(a_5, a_1) ::: Rachael leaves Deckard's apartment in tears.",
        "Manipulates(a_2, a_4) ::: Pris manipulates Sebastian to gain his trust."
      ]
    },
    {
      "id": "ef722cf82033c8e66197209f06a9cb9754be78d9",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "Finds(x, y) ::: x finds object y.",
        "WorksAt(x, y) ::: x works at location y.",
        "Kills(x, y) ::: x kills person y.",
        "ToldToRetire(x, y) ::: x is told to retire person y.",
        "Spots(x, y) ::: x spots person y.",
        "Attacks(x, y) ::: x attacks person y.",
        "KillsWith(x, y, z) ::: x kills person y using object z.",
        "ReturnsTo(x, y) ::: x returns to location y.",
        "Promises(x, y) ::: x promises something to person y.",
        "Restrains(x, y) ::: x physically restrains person y.",
        "Kisses(x, y) ::: x kisses person y.",
        "",
        "Premises:",
        "Finds(deckard, photo_of_zhora) ::: Deckard finds a photo of Zhora.",
        "Finds(deckard, synthetic_snake_scale) ::: Deckard finds a synthetic snake scale.",
        "WorksAt(zhora, strip_club) ::: Zhora works at a strip club.",
        "Kills(deckard, zhora) ::: Deckard kills Zhora.",
        "ToldToRetire(bryant, rachael) ::: Bryant tells Deckard to retire Rachael.",
        "Spots(deckard, rachael) ::: Deckard spots Rachael in a crowd.",
        "Attacks(leon, deckard) ::: Leon attacks Deckard.",
        "KillsWith(rachael, leon, deckard's_dropped_pistol) ::: Rachael kills Leon using Deckard's dropped pistol.",
        "ReturnsTo(deckard, apartment) ::: Deckard returns to his apartment.",
        "Promises(deckard, rachael) ::: Deckard promises not to hunt Rachael.",
        "Restrains(deckard, rachael) ::: Deckard physically restrains Rachael.",
        "Kisses(deckard, rachael) ::: Deckard kisses Rachael.",
        "",
        "Conclusion:",
        "Finds(deckard, photo_of_zhora) ∧ Finds(deckard, synthetic_snake_scale) ∧ WorksAt(zhora, strip_club) ∧ Kills(deckard, zhora) ∧ ToldToRetire(bryant, rachael) ∧ Spots(deckard, rachael) ∧ Attacks(leon, deckard) ∧ KillsWith(rachael, leon, deckard's_dropped_pistol) ∧ ReturnsTo(deckard, apartment) ∧ Promises(deckard, rachael) ∧ Restrains(deckard, rachael) ∧ Kisses(deckard, rachael) ::: All events and actions involving Deckard, Zhora, Rachael, and Leon are represented."
      ]
    },
    {
      "id": "ef722cf82033c8e66197209f06a9cb9754be78d9",
      "paragraph_id": 5,
      "fols": [
        "Predicates:",
        "LifeCutShort(x) ::: x's life is cut short due to \"Methuselah Syndrome.\"",
        "Dead(x) ::: x is dead.",
        "Confesses(x, y) ::: x confesses to y about something.",
        "Demands(x, y) ::: x demands y from someone.",
        "Kills(x, y) ::: x kills y.",
        "Praises(x, y) ::: x praises y for something.",
        "Implied(x, y) ::: x implies y.",
        "",
        "Premises:",
        "LifeCutShort(roy) ::: Roy's life is cut short due to \"Methuselah Syndrome.\"",
        "Dead(tyrell) ::: Tyrell is dead.",
        "Dead(sebastian) ::: Sebastian is dead (implied by police radio).",
        "Confesses(roy, \"questionable things\") ::: Roy confesses that he has done \"questionable things.\"",
        "Demands(roy, more_life) ::: Roy demands more life from Tyrell.",
        "Praises(tyrell, roy) ::: Tyrell praises Roy's advanced design and accomplishments in his short life.",
        "Kills(roy, tyrell) ::: Roy kills Tyrell.",
        "Implied(bryant, Dead(sebastian)) ::: It is implied by Bryant via police radio that Roy also kills Sebastian.",
        "",
        "Conclusion:",
        "Dead(roy) ::: Roy is dead (implied by the context of his actions leading to the deaths of others)."
      ]
    },
    {
      "id": "ef722cf82033c8e66197209f06a9cb9754be78d9",
      "paragraph_id": 6,
      "fols": [
        "Predicates:",
        "Ambush(x, y) ::: x ambushes y.",
        "Kill(x, y) ::: x kills y.",
        "Chase(x, y) ::: x chases y.",
        "Jump(x, y) ::: x jumps to y.",
        "Hanging(x) ::: x is left hanging precariously.",
        "Hoist(x, y) ::: x hoists y.",
        "Save(x, y) ::: x saves y.",
        "DeliverMonologue(x) ::: x delivers a monologue.",
        "Die(x) ::: x dies.",
        "Watch(x, y) ::: x watches y.",
        "Shout(x, y) ::: x shouts to y.",
        "Find(x, y) ::: x finds y.",
        "Leave(x, y) ::: x leaves y.",
        "Notice(x, y) ::: x notices y.",
        "Link(x, y) ::: x is linked to y.",
        "",
        "Premises:",
        "Ambush(pris, deckard) ∧ Kill(deckard, pris) ::: Upon entering Sebastian's apartment, Deckard is ambushed by Pris, but he manages to kill her.",
        "Chase(roy, deckard) ∧ Jump(roy, roof) ∧ Hanging(deckard) ::: As Roy starts to die, he chases Deckard through the building, ending up on the roof. Deckard tries to jump to an adjacent roof, but misses and is left hanging precariously between buildings.",
        "Hoist(roy, deckard) ∧ Save(roy, deckard) ::: Roy makes the jump with ease, and as Deckard's grip loosens, Roy hoists him onto the roof, saving him.",
        "DeliverMonologue(roy) ∧ Die(roy) ::: As Roy's life runs out, he delivers a monologue about how his memories \"will be lost like tears in rain\"; Roy dies in front of Deckard.",
        "Watch(deckard, roy) ::: Deckard watches silently as Roy dies.",
        "Shout(gaff, deckard) ::: Gaff arrives and shouts across to Deckard, \"It's too bad she won't live, but then again, who does?\"",
        "Find(deckard, door) ∧ Find(deckard, rachael) ::: Deckard returns to his apartment and finds the door ajar, but Rachael is safe, asleep in his bed.",
        "Leave(deckard, apartmentBlock) ::: As they leave, Deckard and Rachael quickly leave the apartment block.",
        "Notice(deckard, origamiUnicorn) ::: Deckard notices a small tin-foil origami unicorn on the floor.",
        "Link(gaffFinalWords, origamiUnicorn) ::: Gaff's final words are linked to the origami unicorn found by Deckard."
      ]
    }
  ],
  "f6470b27b43e232e5b4458fb1dd6c194cddb2452": [
    {
      "id": "f6470b27b43e232e5b4458fb1dd6c194cddb2452",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Elderly(x) ::: x is an elderly person.",
        "Veteran(x) ::: x is a World War II veteran.",
        "Visit(x, y) ::: x visits location y.",
        "WalksAround(x, y) ::: x walks around location y.",
        "Sees(x, y) ::: x sees y.",
        "Collapses(x) ::: x collapses to his knees.",
        "Overwhelmed(x) ::: x is overwhelmed by emotion.",
        "Gravestone(x) ::: x is a specific gravestone.",
        "",
        "Premises:",
        "Elderly(a_1) ∧ Veteran(a_1) ::: Reiben is an elderly World War II veteran.",
        "Visit(a_1, b_0) ::: Reiben and his family visit the Normandy American Cemetery and Memorial in Normandy, France.",
        "WalksAround(a_1, b_0) ::: Reiben walks around the cemetery.",
        "Sees(a_1, b_1) ::: Reiben sees one specific gravestone.",
        "Collapses(a_1) ∧ Overwhelmed(a_1) ::: Reiben collapses to his knees, overwhelmed by emotion.",
        "",
        "Conclusion:",
        "∃x (Elderly(x) ∧ Veteran(x) ∧ Visit(x, b_0) ∧ WalksAround(x, b_0) ∧ Sees(x, b_1) ∧ Collapses(x) ∧ Overwhelmed(x)) ::: There exists an elderly World War II veteran who visits the Normandy American Cemetery, walks around it, sees a specific gravestone, collapses, and is overwhelmed by emotion."
      ]
    },
    {
      "id": "f6470b27b43e232e5b4458fb1dd6c194cddb2452",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "AmericanSoldier(x) ::: x is an American soldier.",
        "Prepare(x) ::: x prepares to land on Omaha Beach.",
        "Struggle(x) ::: x struggles against German infantry, machine gun nests, and artillery fire.",
        "Survive(x) ::: x survives the initial landing.",
        "Assemble(x, y) ::: x assembles a group y.",
        "Penetrate(x, y) ::: x penetrates y.",
        "Breakout(x) ::: x leads to a breakout from the beach.",
        "DeadSoldier(x) ::: x is a dead soldier.",
        "Inscribed(x, y) ::: x has y inscribed on it.",
        "LyingFaceDown(x) ::: x is lying face down.",
        "",
        "Premises:",
        "∀x (AmericanSoldier(x) → Prepare(x)) ::: All American soldiers prepare to land on Omaha Beach.",
        "∀x (Struggle(x) → Survive(x)) ::: If a soldier struggles against German forces, then the soldier survives the initial landing.",
        "Survive(miller) ∧ Assemble(miller, rangers) ∧ Penetrate(miller, germanDefenses) ∧ Breakout(miller) ::: Captain John H. Miller survives the initial landing, assembles a group of Rangers, penetrates the German defenses, and leads to a breakout from the beach.",
        "DeadSoldier(soldier) ∧ Inscribed(soldier, \"S. Ryan\") ∧ LyingFaceDown(soldier) ::: The body of a dead soldier is lying face down on the beach with \"S. Ryan\" inscribed on the back of his uniform."
      ]
    },
    {
      "id": "f6470b27b43e232e5b4458fb1dd6c194cddb2452",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "KilledInAction(x) ::: x is killed in action.",
        "ReceivesTelegram(x, y) ::: x receives telegram y.",
        "Paratrooper(x) ::: x is a paratrooper.",
        "MissingInAction(x) ::: x is missing in action.",
        "Orders(x, y) ::: x orders y.",
        "FindAndSendHome(x) ::: x must be found and sent home.",
        "",
        "Premises:",
        "∀x (KilledInAction(x) ∧ x is a brother of RyanFamily ∧ x is one of three → ReceivesTelegram(RyanMother, telegrams)) ::: If three brothers of the Ryan family are killed in action, then their mother receives all three telegrams in the same day.",
        "Paratrooper(a_2) ∧ MissingInAction(a_2) ∧ Orders(GeorgeMarshall, FindAndSendHome(a_2)) ::: If James Francis Ryan is a paratrooper and missing in action, then General George Marshall orders that James Francis Ryan must be found and sent home immediately."
      ]
    },
    {
      "id": "f6470b27b43e232e5b4458fb1dd6c194cddb2452",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Orders(x, y) ::: x receives orders to do y.",
        "Assembles(x, y) ::: x assembles y.",
        "MovesOut(x, y) ::: x moves out to y.",
        "Meets(x, y) ::: x meets y.",
        "Dies(x, y) ::: x dies after being y.",
        "Speaks(x, y) ::: x speaks language y.",
        "LoanedFrom(x, y) ::: x is loaned from y.",
        "",
        "Premises:",
        "Orders(miller, find(ryan)) ::: Miller receives orders to find Ryan and bring him back from the front.",
        "Assembles(miller, {horvath, reiben, mellish, caparzo, jackson, wade, upham}) ::: Miller assembles six men from his company: T/Sgt. Mike Horvath, Private First Class Richard Reiben, Privates Stanley Mellish, Adrian Caparzo, Danny Jackson, medic Irwin Wade, and T/5 Timothy Upham.",
        "MovesOut(miller, neuville) ::: Miller and his men move out to Neuville.",
        "Meets(miller, squad(101st_airborne)) ::: Miller and his men meet a squad from the 101st Airborne Division.",
        "Dies(capazo, shot_by(sniper)) ::: Caparzo dies after being shot by a sniper.",
        "Speaks(upham, french) ∧ Speaks(upham, german) ::: Upham speaks French and German.",
        "LoanedFrom(upham, 29th_infantry_division) ::: Upham is loaned from the 29th Infantry Division."
      ]
    },
    {
      "id": "f6470b27b43e232e5b4458fb1dd6c194cddb2452",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "Locate(x, y) ::: x locates y.",
        "Informs(x, y, z) ::: x informs y about z.",
        "Defend(x, y) ::: x defends y.",
        "Neutralize(x, y) ::: x neutralizes y.",
        "Wound(x, y) ::: x is wounded by y.",
        "Decline(x, y) ::: x declines to do y.",
        "Execute(x, y) ::: x executes y.",
        "SetFree(x, y) ::: x sets y free.",
        "Desert(x) ::: x deserts the squad or mission.",
        "Confront(x, y) ::: x confronts y.",
        "Disclose(x, y) ::: x discloses y.",
        "Decide(x, y) ::: x decides to do y.",
        "",
        "Premises:",
        "Locate(miller, ryan) ::: Miller locates Private James Ryan.",
        "Informs(member, miller, dropZone) ::: A member of Ryan's regiment informs Miller that Ryan's drop zone was at Vierville.",
        "Defend(ryan, bridge) ::: Ryan is defending a strategically important bridge over the Merderet River.",
        "Neutralize(miller, germanMachineGun) ::: Miller decides to neutralize a German machine gun position.",
        "Wound(wade, german) ::: Wade is fatally wounded in the ensuing skirmish.",
        "Decline(miller, execute(steamboatWillie)) ::: Miller declines to execute a surviving German, nicknamed \"Steamboat Willie\".",
        "SetFree(miller, steamboatWillie) ::: Miller sets Steamboat Willie free on condition that he give himself up as a prisoner of war.",
        "Desert(reiben) ::: Reiben declares his intention to desert the squad and the mission.",
        "Confront(reiben, horvath) ::: Reiben confronts Horvath.",
        "Disclose(miller, background) ::: Miller discloses his background in civilian life.",
        "Decide(reiben, stay) ::: Reiben reluctantly decides to stay after Miller's disclosure.",
        "",
        "Conclusion:",
        "¬(Leadership(miller) ∧ Questioned(reiben)) ::: Miller's leadership is questioned by Reiben after the confrontation."
      ]
    },
    {
      "id": "f6470b27b43e232e5b4458fb1dd6c194cddb2452",
      "paragraph_id": 5,
      "fols": [
        "Predicates:",
        "TakesCommand(x) ::: x takes command.",
        "Defend(x, y) ::: x defends y.",
        "Distressed(x) ::: x is distressed.",
        "IntendsToStay(x) ::: x intends to stay.",
        "HasBrothers(x) ::: x has brothers.",
        "Lost(x, y) ::: x lost y.",
        "FormsAmbushPositions(x, y) ::: x forms ambush positions for y.",
        "Utilizes(x, y) ::: x utilizes y.",
        "",
        "Premises:",
        "TakesCommand(miller) ::: Miller takes command.",
        "Defend(miller, bridge) ::: Miller defends the bridge.",
        "Distressed(ryan) ::: Ryan is distressed at the loss of his brothers.",
        "IntendsToStay(ryan) ::: Ryan intends to stay with the only brothers he has left.",
        "Lost(ryan, brothers) ::: Ryan lost his brothers.",
        "FormsAmbushPositions(miller, town) ::: Miller forms ambush positions throughout the ruined town.",
        "Utilizes(miller, [Molotov cocktails, detonation cords, sticky bombs]) ::: Miller utilizes Molotov cocktails, detonation cords, and sticky bombs.",
        "",
        "Conclusion:",
        "TakesCommand(miller) ∧ Defend(miller, bridge) ∧ Distressed(ryan) ∧ IntendsToStay(ryan) ∧ Lost(ryan, brothers) ∧ FormsAmbushPositions(miller, town) ∧ Utilizes(miller, [Molotov cocktails, detonation cords, sticky bombs]) ::: Miller takes command to defend the bridge, Ryan is distressed and intends to stay with his brothers, and Miller forms ambush positions utilizing various resources."
      ]
    },
    {
      "id": "f6470b27b43e232e5b4458fb1dd6c194cddb2452",
      "paragraph_id": 6,
      "fols": [
        "Predicates:",
        "Arrives(x, y) ::: x arrives with y.",
        "InflictsCasualties(x, y) ::: x inflicts casualties on y.",
        "Killed(x) ::: x is killed.",
        "Shot(x, y) ::: x is shot by y.",
        "MortallyWounded(x) ::: x is mortally wounded.",
        "Destroys(x, y) ::: x destroys y.",
        "Routs(x, y) ::: x routs y.",
        "Surprises(x, y) ::: x surprises y.",
        "RaisesHands(x) ::: x raises hands in surrender.",
        "AcceptsSurrender(x, y) ::: x accepts the surrender of y.",
        "Shoots(x, y) ::: x shoots y.",
        "LetsFlee(x, y) ::: x lets y flee.",
        "Witnessed(x, y) ::: x witnessed y.",
        "",
        "Premises:",
        "Arrives(2ndSSPanzerDivision, infantry) ∧ Arrives(2ndSSPanzerDivision, armor) ::: Elements of the 2nd SS Panzer Division arrive with infantry and armor.",
        "InflictsCasualties(2ndSSPanzerDivision, Germans) ::: They inflict heavy casualties on the Germans.",
        "∃x (Killed(x) ∧ (x = paratroopers ∨ x = Jackson ∨ x = Mellish ∨ x = Horvath)) ::: Most of the paratroopers, along with Jackson, Mellish, and Horvath, are killed.",
        "Shot(Miller, GermanSoldier) ∧ MortallyWounded(Miller) ::: Miller is shot and mortally wounded by a German soldier.",
        "Destroys(P51Mustang, TigerTank) ∧ Rout(AmericanArmoredUnits, RemainingGermans) ::: An American P-51 Mustang destroys the Tiger tank, followed by American armored units which rout the remaining Germans.",
        "Surprises(Upham, GermanSoldiers) ::: Upham surprises a group of German soldiers as they attempt to retreat.",
        "RaisesHands(SteamboatWillie) ∧ AcceptsSurrender(Upham, SteamboatWillie) ::: The German infantryman who shot Miller, \"Steamboat Willie\", raises his hands in surrender, believing that Upham will accept because of their earlier encounter.",
        "Witnessed(Upham, Shot(Miller, SteamboatWillie)) ∧ Shoots(Upham, SteamboatWillie) ∧ LetsFlee(Upham, SurvivingGermans) ::: Upham witnesses Captain Miller being shot by Steamboat Willie, shoots him, and lets the other surviving Germans flee."
      ]
    },
    {
      "id": "f6470b27b43e232e5b4458fb1dd6c194cddb2452",
      "paragraph_id": 7,
      "fols": [
        "Predicates:",
        "Worthy(x) ::: x is worthy of the sacrifice of Miller and the others.",
        "LastWords(x, y) ::: x says last words to y.",
        "AtAttention(x) ::: x stands at attention.",
        "Salute(x, y) ::: x delivers a salute toward y.",
        "Confirms(x, y) ::: x confirms something to y.",
        "GoodMan(x) ::: x is a \"good man\".",
        "",
        "Premises:",
        "LastWords(miller, \"James ... earn this. Earn it.\") ::: Miller says his last words, \"James ... earn this. Earn it.\"",
        "Worthy(ryan) ::: Ryan is worthy of the sacrifice of Miller and the others.",
        "Confirms(wife, ryan) ::: Ryan's wife confirms that Ryan has led a good life.",
        "GoodMan(ryan) ::: Ryan is a \"good man\".",
        "AtAttention(ryan) ::: Ryan stands at attention.",
        "Salute(ryan, grave) ::: Ryan delivers a salute toward Miller's grave."
      ]
    }
  ],
  "f6fbb458ad9ae228f23e0903109646020e249761": [
    {
      "id": "f6fbb458ad9ae228f23e0903109646020e249761",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "HappySoul(x) ::: x is depicted as a happy soul.",
        "Naive(x) ::: x is quite naive about the world.",
        "Friend(x, y) ::: x is a close friend of y.",
        "Effeminate(x) ::: x is an effeminate character.",
        "MysteriouslyDrawnTo(x, y) ::: x is mysteriously drawn to y for unknown reasons.",
        "Disinterested(x) ::: x is disinterested in y.",
        "Likes(x, y) ::: x has a strong dislike for y.",
        "QuestionsInterest(x, y) ::: x questions their interest in y.",
        "MutualAttraction(x, y) ::: x and y have a mutual attraction for z.",
        "Affair(x, y) ::: x and y are having an affair.",
        "IgnoranceIsBliss(x) ::: x alludes to the sentiment that ignorance is bliss.",
        "LiveBlissfully(x) ::: x lives blissfully ignorant of the truth.",
        "LiveWithKnowledge(x) ::: x lives with the knowledge of a harsh reality.",
        "",
        "Premises:",
        "HappySoul(bertha) ∧ Naive(bertha) ::: Bertha Young is depicted as a happy soul and quite naive about the world she lives in.",
        "Friend(bertha, harry) ∧ Friend(bertha, norman) ∧ Friend(bertha, mrsNorman) ::: Bertha and Harry are close friends with Mr. and Mrs. Norman Knight.",
        "Effeminate(eddie) ::: Eddie Warren is an effeminate character who adds an interesting mix to the party.",
        "MysteriouslyDrawnTo(bertha, pearl) ::: Bertha is mysteriously drawn to Pearl Fulton for reasons unknown to her at the start.",
        "Disinterested(harry) ∧ Likes(harry, pearl) ::: Harry is presented as disinterested in Pearl by his conversational tone and curtness towards her.",
        "QuestionsInterest(bertha, pearl) ::: Bertha questions her own interest and fascination towards Pearl.",
        "MutualAttraction(bertha, pearl) ∧ MutualAttraction(bertha, harry) ::: Bertha's interest in Pearl may be more than platonic due to the presence of Eddie and the mutual attraction for Harry.",
        "Affair(harry, pearl) ::: Harry and Pearl are having an affair.",
        "IgnoranceIsBliss(story) ::: The title of the story alludes to the sentiment that ignorance is bliss.",
        "LiveBlissfully(bertha) ∧ LiveWithKnowledge(bertha) ::: The story leaves the question about whether it is best for Bertha to live blissfully ignorant of the truth or live with the knowledge of a harsh reality."
      ]
    }
  ],
  "fd282523a8df2592d93d84ab3911e6f24ffb56ab": [
    {
      "id": "fd282523a8df2592d93d84ab3911e6f24ffb56ab",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Intelligent(x) ::: x is intelligent.",
        "Tough(x) ::: x is tough.",
        "Favorite(x) ::: x is Satan's favorite son.",
        "Torment(x, y) ::: x torments y.",
        "Assault(x, y) ::: x assaults y.",
        "MotherOf(x, y) ::: x is the mother of y.",
        "Disfigured(x) ::: x has a disfigured jaw.",
        "SpeechImpediment(x) ::: x has a speech impediment.",
        "ControlsBody(x, y) ::: x controls the body of y.",
        "",
        "Premises:",
        "Intelligent(adrian) ::: Adrian is the most intelligent.",
        "Tough(cassius) ::: Cassius is the toughest.",
        "Favorite(nicky) ::: Nicky is Satan's favorite son.",
        "Torment(adrian, nicky) ∧ Torment(cassius, nicky) ::: Adrian and Cassius torment Nicky because Nicky is their father's favorite son.",
        "Disfigured(nicky) ∧ SpeechImpediment(nicky) ::: Nicky has a disfigured jaw and a speech impediment.",
        "Assault(adrian, nicky) ∧ Assault(cassius, nicky) ::: Adrian and Cassius assault Nicky.",
        "ControlsBody(adrian, nicky) ∧ ControlsBody(cassius, nicky) ::: Adrian and Cassius control Nicky's body with their minds.",
        "MotherOf(valerie, nicky) ::: Valerie is Nicky's mother.",
        "",
        "Conclusion:",
        "Torment(adrian, nicky) ∧ Torment(cassius, nicky) ::: Adrian and Cassius torment Nicky."
      ]
    },
    {
      "id": "fd282523a8df2592d93d84ab3911e6f24ffb56ab",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "SatanicThrone(x) ::: x is the throne of Satan.",
        "Successor(x, y) ::: x is the successor of y.",
        "Ready(x) ::: x is ready to be a successor.",
        "LearnBalance(x) ::: x needs to learn to keep the balance between good and evil.",
        "Angered(x, y) ::: x is angered by y's decision.",
        "CreateNewHell(x) ::: x creates a new Hell.",
        "Possess(x, y) ::: x possesses y.",
        "FreezeEntrance(x) ::: x freezes the entrance to Hell.",
        "Decomposing(x) ::: x is decomposing.",
        "Send(x, y) ::: x sends y to Earth.",
        "Trap(x, y) ::: x traps y.",
        "",
        "Premises:",
        "∀x (Successor(x, a_4) → ¬Ready(x)) ::: No son of Satan is ready to be his successor.",
        "Angered(a_5, a_4) ∧ Angered(a_6, a_4) ::: Adrian and Cassius are angered by Satan's decision.",
        "CreateNewHell(a_5) ∧ CreateNewHell(a_6) ::: Adrian and Cassius create a new Hell.",
        "∀y (Possess(a_5, y) ∧ Possess(a_6, y) ∧ (ReligiousLeader(y) ∧ PoliticalLeader(y))) ::: Adrian and Cassius possess religious and political leaders in New York City.",
        "FreezeEntrance(b_1) ::: They freeze the entrance to Hell.",
        "Decomposing(a_4) ::: Satan's body begins decomposing.",
        "Send(a_4, a_1) ::: Satan sends Nicky to Earth.",
        "Trap(a_1, x) ::: Nicky has a silver flask that traps whoever drinks from it.",
        "",
        "Conclusion:",
        "¬Ready(a_5) ∧ ¬Ready(a_6) ::: Adrian and Cassius are not ready to be successors.",
        "Decomposing(a_4) ::: Satan is decomposing due to the actions of Adrian and Cassius."
      ]
    },
    {
      "id": "fd282523a8df2592d93d84ab3911e6f24ffb56ab",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "Alive(x) ::: x is alive.",
        "Killed(x) ::: x is killed.",
        "Returns(x, y) ::: x returns to location y.",
        "Meets(x, y) ::: x meets y.",
        "Rents(x, y) ::: x rents an apartment y.",
        "InLove(x, y) ::: x is in love with y.",
        "TalkingBulldog(x) ::: x is a talking bulldog.",
        "FriendOf(x, y) ::: x is a friend of y.",
        "",
        "Premises:",
        "¬Alive(a_1) ∧ Killed(a_1) ∧ Returns(a_1, b_2) ∧ Returns(a_1, b_1) ::: Nicky has trouble staying alive on Earth, is killed several times, and returns to New York from Hell.",
        "Meets(a_1, a_3) ::: Nicky meets a talking bulldog named Mr. Beefy (a friend of Nicky's father).",
        "Rents(a_1, c_0) ::: Nicky rents an apartment with an actor named Todd.",
        "InLove(a_1, a_2) ::: Nicky falls in love with a design student named Valerie.",
        "",
        "Conclusion:",
        "∃y (Alive(y) ∧ Killed(a_1) ∧ Returns(a_1, b_2) ∧ Returns(a_1, b_1)) ::: There exists a person who is alive, while Nicky experiences multiple deaths and returns to New York from Hell."
      ]
    },
    {
      "id": "fd282523a8df2592d93d84ab3911e6f24ffb56ab",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Impresses(x, y) ::: x impresses y.",
        "DevotedFan(x, y) ::: x is a devoted fan of y.",
        "MentalControl(x, y) ::: x takes mental control of y.",
        "ScareAway(x, y) ::: x scares away y.",
        "Possesses(x, y) ::: x possesses y.",
        "Tricks(x, y) ::: x tricks y.",
        "Apologizes(x, y) ::: x apologizes to y.",
        "Accepts(x, y) ::: x accepts y.",
        "Explains(x, y) ::: x explains y to y.",
        "",
        "Premises:",
        "MentalControl(adrian, nicky) ∧ ScareAway(nicky, valerie) ::: Adrian takes mental control of Nicky and makes him scare Valerie away.",
        "Possesses(cassius, referee) ::: Cassius possesses the referee (Dana Carvey) of a Harlem Globetrotters game.",
        "Tricks(nicky, cassius) ::: Nicky tricks Cassius into the flask.",
        "Impresses(nicky, john) ∧ Impresses(nicky, peter) ::: Nicky's performance impresses John and Peter.",
        "DevotedFan(john, nicky) ∧ DevotedFan(peter, nicky) ::: John and Peter become devoted fans of Nicky.",
        "Apologizes(nicky, valerie) ∧ Explains(nicky, whoHeIs) ∧ Explains(nicky, whyHeIsOnEarth) ∧ Accepts(valerie, nicky) ::: Nicky tries to apologize to Valerie, explains who he is and why he is on Earth, and she accepts him.",
        "",
        "Conclusion:",
        "DevotedFan(john, nicky) ∧ DevotedFan(peter, nicky) ::: John and Peter are devoted fans of Nicky."
      ]
    },
    {
      "id": "fd282523a8df2592d93d84ab3911e6f24ffb56ab",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "Possesses(x, y) ::: x possesses y.",
        "Accuses(x, y, z) ::: x accuses y of z.",
        "Kills(x, y) ::: x kills y.",
        "Hears(x) ::: x can hear.",
        "InPanic(x) ::: x is in a state of panic.",
        "Deadline(x, y) ::: x has a deadline of y.",
        "DevisesPlan(x, y) ::: x devises a plan to capture y.",
        "Informs(x, y, z) ::: x informs y of z.",
        "Arrests(x, y) ::: x arrests y.",
        "Realizes(x, y) ::: x realizes y.",
        "KeepsCool(x) ::: x is keeping cool.",
        "Dives(x, y) ::: x dives onto y.",
        "Throws(x, y) ::: x throws y out of the way.",
        "KilledBy(x, y) ::: x is killed by y.",
        "",
        "Premises:",
        "Possesses(adrian, mckean) ∧ Accuses(adrian, nicky, massMurder) ::: Adrian possesses the chief of the NYPD (Michael McKean) and accuses Nicky of mass murder.",
        "¬Hears(satan) ∧ InPanic(assistants) ∧ Deadline(assistants, midnight) ::: Satan has trouble hearing because his ears have fallen off and his assistants are in a panic because the midnight deadline to capture Adrian and Cassius is only hours away.",
        "DevisesPlan(nicky, adrian) ∧ Informs(john, chief, nicky) ∧ Arrests(todd, beefy) ::: Nicky and his friends devise a plan to capture Adrian in a subway station; John informs the chief of the NYPD of Nicky's whereabouts which leads to Todd and Mr. Beefy being arrested.",
        "Realizes(adrian, trick) ∧ KeepsCool(john) ∧ ¬KeepsCool(peter) ::: Adrian discovers their trick when he realizes that John is keeping cool whereas Peter isn't.",
        "Dives(adrian, track) ∧ Throws(nicky, valerie) ∧ KilledBy(nicky, train) ∧ KilledBy(adrian, train) ::: In the ensuing fight, Adrian grabs Valerie and dives onto the track as a train approaches, but Nicky throws her out of the way, leaving himself and Adrian to be killed by the train.",
        "",
        "Conclusion:",
        "¬(Nicky ∧ Adrian) ::: Nicky's actions lead to the death of both Nicky and Adrian."
      ]
    },
    {
      "id": "fd282523a8df2592d93d84ab3911e6f24ffb56ab",
      "paragraph_id": 5,
      "fols": [
        "Predicates:",
        "Defeat(x, y) ::: x can defeat y.",
        "Inherit(x, y) ::: x inherits y from someone.",
        "Respect(x, y) ::: x respects y.",
        "Join(x, y) ::: x joins y.",
        "TurnInto(x, y) ::: x can turn into y.",
        "Bite(x, y) ::: x bites y.",
        "",
        "Premises:",
        "Inherit(a_1, inner_light) ::: Nicky inherits the \"inner light\" from Holly.",
        "Defeat(a_1, a_5) ::: Nicky can defeat Adrian with the \"inner light\" inherited from Holly.",
        "∀x (Respect(x, a_1) ∧ CreateGifts(a_1, x) → Join(x, a_1)) ::: The demons respect Nicky enough to join him after he creates gifts for them.",
        "TurnInto(a_5, bat) ::: Adrian can turn himself into a bat.",
        "Bite(ozzyOsbourne, a_5) ::: Ozzy Osbourne can bite Adrian's head off.",
        "",
        "Conclusion:",
        "Defeat(a_1, a_5) ::: Nicky can defeat Adrian."
      ]
    },
    {
      "id": "fd282523a8df2592d93d84ab3911e6f24ffb56ab",
      "paragraph_id": 6,
      "fols": [
        "Predicates:",
        "Captured(x) ::: x is captured.",
        "ReadyToSave(x) ::: x is ready to save his father.",
        "Sins(x) ::: x commits sins.",
        "SetsBeesOn(x, y) ::: x sets bees on y.",
        "ExpressLove(x, y) ::: x expresses love for y.",
        "Kills(x, y) ::: x kills y.",
        "RegainsBody(x) ::: x regains his body.",
        "Recommends(x, y) ::: x recommends y to do something.",
        "LivesIn(x, y) ::: x lives in location y.",
        "HasInfantSon(x, y) ::: x has an infant son named y.",
        "DiedInPlaneCrash(x) ::: x died in a plane crash.",
        "LivesInHell(x) ::: x lives in Hell.",
        "",
        "Premises:",
        "Captured(a_1) ∧ ReadyToSave(a_1) ::: Nicky is captured and ready to save his father.",
        "Sins(a_1) ∧ SetsBeesOn(a_1, a_3) ::: Nicky sins to make sure he goes to Hell by setting bees on Henry Winkler.",
        "ExpressLove(a_1, a_2) ∧ Kills(a_2, a_1) ::: Nicky and Valerie express their love for each other and Valerie kills Nicky.",
        "RegainsBody(a_4) ::: Satan regains his body.",
        "Recommends(a_4, a_1) ::: Satan recommends that Nicky go back to live on Earth.",
        "LivesIn(a_1, b_2) ∧ HasInfantSon(a_1, Zachariah) ::: Nicky and Valerie live in New York with their infant son, Zachariah.",
        "DiedInPlaneCrash(a_8) ∧ DiedInPlaneCrash(a_9) ∧ LivesInHell(a_8) ∧ LivesInHell(a_9) ::: John and Peter have died in a plane crash and are now happily living in Hell.",
        "",
        "Conclusion:",
        "LivesIn(a_1, b_2) ::: Nicky lives in New York.",
        "LivesInHell(a_8) ∧ LivesInHell(a_9) ::: John and Peter live in Hell."
      ]
    }
  ]
}