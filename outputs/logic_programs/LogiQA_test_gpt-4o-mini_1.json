[
  {
    "id": 0,
    "context": "In the planning of a new district in a township, it was decided to build a special community in the southeast, northwest, centered on the citizen park.These four communities are designated as cultural area, leisure area, commercial area and administrative service area.It is known that the administrative service area is southwest of the cultural area, and the cultural area is southeast of the leisure area.",
    "question": "Based on the above statement, which of the following can be derived?",
    "answer": "A",
    "options": [
      "A.Civic Park is north of the administrative service area",
      "B.The leisure area is southwest of the cultural area",
      "C.The cultural district is in the northeast of the business district",
      "D.The business district is southeast of the leisure area"
    ],
    "raw_logic_programs": [
      "# Declarations\nareas = EnumSort([cultural_area, leisure_area, commercial_area, administrative_service_area])\nposition = Function([areas] -> [int, int])  # Position represented as (x, y) coordinates\n\n# Constraints\nposition(cultural_area) == (x1, y1) ::: Position of cultural area\nposition(leisure_area) == (x2, y2) ::: Position of leisure area\nposition(administrative_service_area) == (x3, y3) ::: Position of administrative service area\nposition(commercial_area) == (x4, y4) ::: Position of commercial area\n\nAnd(x3 < x1, y3 > y1) ::: Administrative service area is southwest of the cultural area\nAnd(x1 < x2, y1 > y2) ::: Cultural area is southeast of the leisure area\n\n# Options\nQuestion ::: Based on the above statement, which of the following can be derived?\nis_valid(position(civic_park) == (x3, y3 + 1)) ::: (A) Civic Park is north of the administrative service area\nis_valid(position(leisure_area) == (x1 - 1, y1)) ::: (B) The leisure area is southwest of the cultural area\nis_valid(position(cultural_area) == (x4 + 1, y4)) ::: (C) The cultural district is in the northeast of the business district\nis_valid(position(commercial_area) == (x2 + 1, y2 - 1)) ::: (D) The business district is southeast of the leisure area"
    ]
  },
  {
    "id": 1,
    "context": "The company sent three young staff members to the South for business trip.The three of them happened to be sitting in a row.At least one of the two people sitting on the right side of 24 years old was 20 years old.20 years old.At least one of the two people sitting on the left of the accountant is a salesperson, and one of the two people sitting on the right of the salesperson is also a salesperson.",
    "question": "So what are the three young people on business?",
    "answer": "A",
    "options": [
      "A.20-year-old accountant, 20-year-old salesperson, 24-year-old salesperson",
      "B.20-year-old accountant, 24-year-old salesperson, 24-year-old salesperson",
      "C.24-year-old accountant, 20-year-old salesperson, 20-year-old salesperson",
      "D.20-year-old accountant, 20-year-old accountant, 24-year-old salesperson"
    ],
    "raw_logic_programs": [
      "# Declarations\nstaff_members = EnumSort([Person1, Person2, Person3])\nages = EnumSort([20, 24])\nroles = EnumSort([accountant, salesperson])\nsits = Function([staff_members] -> [int])  # Position in the row (1, 2, or 3)\nage_of = Function([staff_members] -> [ages])\nrole_of = Function([staff_members] -> [roles])\n\n# Constraints\nForAll([p:staff_members], Or(age_of(p) == 20, age_of(p) == 24)) ::: Each staff member is either 20 or 24 years old\nExists([p1:staff_members, p2:staff_members], And(sits(p1) == 2, age_of(p1) == 24, Or(age_of(p2) == 20))) ::: At least one of the two people sitting on the right side of the 24-year-old is 20 years old\nExists([p1:staff_members, p2:staff_members], And(sits(p1) == 1, role_of(p1) == accountant, Or(role_of(p2) == salesperson))) ::: At least one of the two people sitting on the left of the accountant is a salesperson\nExists([p1:staff_members, p2:staff_members], And(role_of(p1) == salesperson, Or(role_of(p2) == salesperson))) ::: One of the two people sitting on the right of the salesperson is also a salesperson\n\n# Options\nQuestion ::: What are the three young people on business?\nis_valid(And(age_of(Person1) == 20, role_of(Person1) == accountant, age_of(Person2) == 20, role_of(Person2) == salesperson, age_of(Person3) == 24, role_of(Person3) == salesperson)) ::: (A)\nis_valid(And(age_of(Person1) == 20, role_of(Person1) == accountant, age_of(Person2) == 24, role_of(Person2) == salesperson, age_of(Person3) == 24, role_of(Person3) == salesperson)) ::: (B)\nis_valid(And(age_of(Person1) == 24, role_of(Person1) == accountant, age_of(Person2) == 20, role_of(Person2) == salesperson, age_of(Person3) == 20, role_of(Person3) == salesperson)) ::: (C)\nis_valid(And(age_of(Person1) == 20, role_of(Person1) == accountant, age_of(Person2) == 20, role_of(Person2) == accountant, age_of(Person3) == 24, role_of(Person3) == salesperson)) ::: (D)"
    ]
  },
  {
    "id": 2,
    "context": "In recent years, graduate entrance examinations have continued to heat up.Correspondingly, a variety of postgraduate counseling classes have emerged, especially English and political counseling classes are almost a must for the postgraduates.Xiaozhuang, who has just started working, also intends to take the postgraduate entrance exam, so Xiaozhuang must take English tutoring classes",
    "question": "Which of the following can best strengthen the above argument",
    "answer": "D",
    "options": [
      "A.If you take an English tutoring class, you can pass the graduate entrance exam",
      "B.Only those who intend to take the graduate entrance exam will participate in the English tutoring class",
      "C.Even if you take an English tutoring class, you may not be able to pass the graduate entrance exam",
      "D.If you do not participate in the English tutoring class, you cannot pass the graduate entrance exam"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Xiaozhuang])\nclasses = EnumSort([English, Political])\ntakes = Function([students] -> [classes])\n\n# Constraints\ntakes(Xiaozhuang) == English ::: Xiaozhuang must take English tutoring classes\n\n# Options\nQuestion ::: Which of the following can best strengthen the above argument?\nis_strong(Implies(takes(Xiaozhuang) == English, passes(Xiaozhuang))) ::: (A)\nis_strong(ForAll([s:students], Implies(takes(s) == English, intends_to_take_graduate_exam(s)))) ::: (B)\nis_weak(Implies(takes(Xiaozhuang) == English, passes(Xiaozhuang))) ::: (C)\nis_weak(Implies(Not(takes(Xiaozhuang) == English), Not(passes(Xiaozhuang)))) ::: (D)"
    ]
  },
  {
    "id": 3,
    "context": "A unit conducted the year-end assessment and after democratic voting, five people were identified as candidates for the first prize.In the selection of five in four, the following factors need to be considered? 1) At least one person of Bingding is selected.2) If E is selected, then A and B are also selected.3) A maximum of 2 people are selected.",
    "question": "According to the above statement, it can be concluded that who is not in the fourth?",
    "answer": "D",
    "options": [
      "A.A.",
      "B.B.",
      "C.C.",
      "D.Ding."
    ],
    "raw_logic_programs": [
      "# Declarations\ncandidates = EnumSort([A, B, C, Ding, E])\nselected = Function([candidates] -> [bool])\n\n# Constraints\nCount([c:candidates], selected(c)) >= 1 ::: At least one person of Bingding is selected.\nImplies(selected(E), And(selected(A), selected(B))) ::: If E is selected, then A and B are also selected.\nCount([c:candidates], selected(c)) <= 2 ::: A maximum of 2 people are selected.\n\n# Options\nQuestion ::: According to the above statement, it can be concluded that who is not in the fourth?\nis_unsat(selected(A)) ::: (A)\nis_unsat(selected(B)) ::: (B)\nis_unsat(selected(C)) ::: (C)\nis_unsat(selected(Ding)) ::: (D)"
    ]
  },
  {
    "id": 4,
    "context": "Zhang Ming, Li Ying, Wang Jia and Chen Rui work in a team.They come from four provinces of Jiangsu, Anhui, Fujian and Shandong.Each person can only speak a dialect of their origin.Speaking of southern Fujian dialects, Shandong people have the highest educational level and can speak Central Plains Mandarin.Wang Jia has a lower education level than Fujianese.Li Ying can speak Huizhou dialect and is a colleague with his classmates from Jiangsu.Chen Rui does not understand the dialect of southern Fujian.",
    "question": "According to the above statement, you can get which of the following?",
    "answer": "B",
    "options": [
      "A Chen Rui can't speak the Central Plains Mandarin",
      "B Zhang Ming speaks Minnan dialect",
      "C Li Ying is from Shandong",
      "D Wang Jia can speak Huizhou dialect"
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([Zhang_Ming, Li_Ying, Wang_Jia, Chen_Rui])\nprovinces = EnumSort([Jiangsu, Anhui, Fujian, Shandong])\ndialects = EnumSort([Minnan, Huizhou, Central_Plains_Mandarin])\nspeaks = Function([people] -> [dialects])\nfrom_province = Function([people] -> [provinces])\neducation_level = Function([people] -> [int])  # Higher number indicates higher education level\n\n# Constraints\nForAll([p:people], speaks(p) == speaks(from_province(p))) ::: Each person can only speak a dialect of their origin\neducation_level(Shandong) > education_level(Fujian) ::: Shandong people have the highest educational level\nspeaks(Shandong) == Central_Plains_Mandarin ::: Shandong people can speak Central Plains Mandarin\neducation_level(Wang_Jia) < education_level(Fujian) ::: Wang Jia has a lower education level than Fujianese\nspeaks(Li_Ying) == Huizhou ::: Li Ying can speak Huizhou dialect\nfrom_province(Li_Ying) == Jiangsu ::: Li Ying is a colleague with his classmates from Jiangsu\nNot(speaks(Chen_Rui) == Minnan) ::: Chen Rui does not understand the dialect of southern Fujian\n\n# Options\nQuestion ::: According to the above statement, you can get which of the following?\nis_valid(Not(speaks(Chen_Rui) == Central_Plains_Mandarin)) ::: (A)\nis_valid(speaks(Zhang_Ming) == Minnan) ::: (B)\nis_valid(from_province(Li_Ying) == Shandong) ::: (C)\nis_valid(speaks(Wang_Jia) == Huizhou) ::: (D)"
    ]
  },
  {
    "id": 5,
    "context": "The person in charge of the relevant department said that pilots will be carried out in some areas this year to prepare for the system and policy preparations for the comprehensive clean-up of 'small property houses', and require all localities to confirm the registration and certification of rural collective land.All small-property houses are not subject to registration and are not protected by law.Therefore, this newly built house in Hexi Village is not protected by law.",
    "question": "Which of the following is true will most weaken the above argument",
    "answer": "D",
    "options": [
      "A.This newly built house in Hexi Village has been tacitly approved by relevant departments",
      "B.This newly built house in Hexi Village is a small property house",
      "C.This newly built house in Hexi Village is built on rural collective land",
      "D.Some of the newly built houses in Hexi Village are not small property houses"
    ],
    "raw_logic_programs": [
      "To formulate the given problem as a logic program, we will follow the structure of Declarations, Constraints, and Options.\n\n### Problem:\nThe person in charge of the relevant department said that pilots will be carried out in some areas this year to prepare for the system and policy preparations for the comprehensive clean-up of 'small property houses', and require all localities to confirm the registration and certification of rural collective land. All small-property houses are not subject to registration and are not protected by law. Therefore, this newly built house in Hexi Village is not protected by law.\n\n### Question:\nWhich of the following is true will most weaken the above argument?\n\n### Choices:\n(A) This newly built house in Hexi Village has been tacitly approved by relevant departments  \n(B) This newly built house in Hexi Village is a small property house  \n(C) This newly built house in Hexi Village is built on rural collective land  \n(D) Some of the newly built houses in Hexi Village are not small property houses  \n\n### Logic Program\n\n#### Declarations\n``` \nhouses = EnumSort([newly_built_house_Hexi, small_property_house])\nstatus = EnumSort([protected, not_protected])\napproved = Function([houses] -> [bool])\nregistered = Function([houses] -> [bool])\nprotection_status = Function([houses] -> [status])\n```\n\n#### Constraints\n```\nForAll([h:houses], Implies(approved(h), protection_status(h) == protected)) ::: If a house is approved, it is protected\nForAll([h:houses], Implies(h == small_property_house, protection_status(h) == not_protected)) ::: All small-property houses are not protected by law\nprotection_status(newly_built_house_Hexi) == not_protected ::: The newly built house in Hexi Village is not protected by law\n```\n\n#### Options\n```\nQuestion ::: Which of the following is true will most weaken the above argument?\nis_valid(approved(newly_built_house_Hexi)) ::: (A) This newly built house in Hexi Village has been tacitly approved by relevant departments\nis_valid(houses == small_property_house) ::: (B) This newly built house in Hexi Village is a small property house\nis_valid(registered(newly_built_house_Hexi) == true) ::: (C) This newly built house in Hexi Village is built on rural collective land\nis_valid(Exists([h:houses], And(h == newly_built_house_Hexi, protection_status(h) == not_protected))) ::: (D) Some of the newly built houses in Hexi Village are not small property houses\n```\n\n### Summary\nThis logic program captures the relationships and constraints regarding the newly built house in Hexi Village and the concept of small property houses. The options represent statements that could potentially weaken the argument that the newly built house is not protected by law."
    ]
  },
  {
    "id": 6,
    "context": "There are five teams participating in the game.The audience had the following comments on the results? (1) The champion is either the Shannan team or the Jiangbei team.(2) The champion is neither Shanbei nor Jiangnan.(3) The champion is Jiangnan Team.(4) The champion is not the Shannan team.",
    "question": "The result of the match showed that only one argument was correct, so who won the championship?",
    "answer": "C",
    "options": [
      "A Shannan",
      "B Jiangnan",
      "C Shanbei",
      "D Jiangbei"
    ],
    "raw_logic_programs": [
      "# Declarations\nteams = EnumSort([Shannan, Jiangbei, Shanbei, Jiangnan])\nchampion = Function([] -> [teams])\n\n# Constraints\nCount([c:teams], champion() == c) == 1 ::: only one team can be the champion\nOr(champion() == Shannan, champion() == Jiangbei) ::: The champion is either the Shannan team or the Jiangbei team.\nNot(Or(champion() == Shanbei, champion() == Jiangnan)) ::: The champion is neither Shanbei nor Jiangnan.\nchampion() == Jiangnan ::: The champion is Jiangnan Team.\nNot(champion() == Shannan) ::: The champion is not the Shannan team.\n\n# Options\nQuestion ::: Who won the championship?\nis_valid(champion() == Shannan) ::: (A)\nis_valid(champion() == Jiangnan) ::: (B)\nis_valid(champion() == Shanbei) ::: (C)\nis_valid(champion() == Jiangbei) ::: (D)"
    ]
  },
  {
    "id": 7,
    "context": "Compared with small and medium-sized cities, especially small cities and towns, large cities have higher living costs, which inevitably limits the entry of rural population.Therefore, the development of large cities alone cannot actually achieve urbanization",
    "question": "Which of the following is the conclusion must be assumed",
    "answer": "C",
    "options": [
      "A.Urbanization is the only way for China's development",
      "B.Simple development of large cities is not conducive to the promotion of urbanization",
      "C.To achieve urbanization, the city must fully absorb the rural population",
      "D.The attractiveness of large cities to the rural population in the outside world is significantly lower than that of small and medium-sized cities"
    ],
    "raw_logic_programs": [
      "# Declarations\ncities = EnumSort([small, medium, large])\nliving_costs = Function([cities] -> [bool])\nurbanization = Function([cities] -> [bool])\nrural_population_entry = Function([cities] -> [bool])\n\n# Constraints\nliving_costs(large) == true ::: large cities have higher living costs\nliving_costs(small) == false ::: small cities have lower living costs\nliving_costs(medium) == false ::: medium cities have lower living costs\nurbanization(large) == false ::: development of large cities alone cannot achieve urbanization\nForAll([c:cities], Implies(living_costs(c), Not(rural_population_entry(c)))) ::: higher living costs limit the entry of rural population\n\n# Options\nQuestion ::: Which of the following is the conclusion must be assumed?\nis_assumed(urbanization(medium) == true) ::: (A) Urbanization is the only way for China's development\nis_assumed(Not(urbanization(large))) ::: (B) Simple development of large cities is not conducive to the promotion of urbanization\nis_assumed(rural_population_entry(large) == false) ::: (C) To achieve urbanization, the city must fully absorb the rural population\nis_assumed(living_costs(large) < living_costs(medium)) ::: (D) The attractiveness of large cities to the rural population in the outside world is significantly lower than that of small and medium-sized cities"
    ]
  },
  {
    "id": 8,
    "context": "Researchers recently discovered that there is an area called the thalamus pillow deep in the human brain, which is like an information desk operator, responsible for sorting out the external stimulus information and focusing human attention on the most important for behavior and survival Information.The researchers pointed out that this discovery is expected to bring new treatments for disorders such as attention deficit hyperactivity disorder and schizophrenia caused by lack of attention.",
    "question": "Which of the following is assumed by the above argument",
    "answer": "D",
    "options": [
      "A.Some schizophrenia are not caused by lack of attention",
      "B.Visual information is only transmitted through the visual cortex to obtain a neural network to transmit",
      "C.Researchers have developed a new technology that can directly track the communication between the nerve cortex in the visual cortex and thalamus occipital region",
      "D.The brain cannot process too much information in detail at the same time, and will only selectively focus on the things most relevant to the behavior"
    ],
    "raw_logic_programs": [
      "# Declarations\ndisorders = EnumSort([ADHD, schizophrenia])\nfunctions = EnumSort([thalamus_pillow, information_sorting, attention_focus])\ncauses = Function([disorders] -> [bool])\nresponsible = Function([functions] -> [bool])\n\n# Constraints\nresponsible(thalamus_pillow) == true ::: The thalamus pillow is responsible for sorting out external stimulus information and focusing attention\nForAll([d:disorders], Implies(causes(d), responsible(thalamus_pillow))) ::: If a disorder is caused by lack of attention, it is related to the thalamus pillow\ncauses(ADHD) == true ::: ADHD is caused by lack of attention\ncauses(schizophrenia) == true ::: Schizophrenia is caused by lack of attention\n\n# Options\nQuestion ::: Which of the following is assumed by the above argument?\nis_assumed(ForAll([d:disorders], Implies(causes(d), responsible(thalamus_pillow)))) ::: (A)\nis_assumed(False) ::: (B)\nis_assumed(False) ::: (C)\nis_assumed(True) ::: (D)"
    ]
  },
  {
    "id": 9,
    "context": "According to a report, in the year to March, mainland Chinese buyers became the second largest group of foreign buyers buying US real estate, with a transaction volume of US $ 9 billion, second only to Canada.This is 23% higher than the previous year 's USD 7.3 billion transaction volume and 88% higher than the previous year 's USD 4.8 billion transaction volume.Some people think that there are more and more rich people in China who are transferring their property abroad.",
    "question": "Which of the following is true is the best argument against the above argument",
    "answer": "B",
    "options": [
      "A? Many Chinese people buy homes for their children to study in the US",
      "B? Although the turnover has increased by 23%, the volume of Chinese buyers has not increased this year",
      "C.There are groups of real estate speculators among the wealthy Chinese who have speculated in Beijing and Shanghai",
      "D.The risk of the US real estate market has been small in recent years and has a certain function of value preservation and appreciation"
    ],
    "raw_logic_programs": [
      "# Declarations\narguments = EnumSort([A, B, C, D])\nclaims = EnumSort([rich_people_increase, property_transfer])\nsupports = Function([arguments] -> [bool])\n\n# Constraints\nsupports(A) == true ::: Many Chinese people buy homes for their children to study in the US\nsupports(B) == false ::: Although the turnover has increased by 23%, the volume of Chinese buyers has not increased this year\nsupports(C) == false ::: There are groups of real estate speculators among the wealthy Chinese who have speculated in Beijing and Shanghai\nsupports(D) == true ::: The risk of the US real estate market has been small in recent years and has a certain function of value preservation and appreciation\n\n# Options\nQuestion ::: Which of the following is true is the best argument against the above argument?\nis_valid(supports(A)) ::: (A)\nis_valid(supports(B)) ::: (B)\nis_valid(supports(C)) ::: (C)\nis_valid(supports(D)) ::: (D)"
    ]
  },
  {
    "id": 10,
    "context": "People often use microwave ovens to heat food.Some people think that microwave oven heating changes the molecular structure of food, producing molecules that the human body cannot recognize.These strange molecular formulas are unacceptable to the human body, and some are toxic and may even cause cancer.Therefore, people or animals who often eat microwave foods will have serious physiological changes in their bodies, which will cause serious health problems.",
    "question": "Which of the following can best question the above view?",
    "answer": "D",
    "options": [
      "A.Microwave heating will not cause more nutrient loss than other cooking methods",
      "B.China's microwave oven production standards are consistent with international standards and EU standards",
      "C.It is also common for developed countries to use microwave ovens",
      "D.The microwave only heats the water molecules in the food, the food does not change chemically"
    ],
    "raw_logic_programs": [
      "# Declarations\nviews = EnumSort([microwave_heating_changes_structure, nutrient_loss, production_standards, common_usage, water_molecule_heating])\narguments = Function([views] -> [bool])\n\n# Constraints\narguments(microwave_heating_changes_structure) == true ::: Some people think that microwave oven heating changes the molecular structure of food\narguments(nutrient_loss) == true ::: Microwave heating will not cause more nutrient loss than other cooking methods\narguments(production_standards) == true ::: China's microwave oven production standards are consistent with international standards and EU standards\narguments(common_usage) == true ::: It is also common for developed countries to use microwave ovens\narguments(water_molecule_heating) == true ::: The microwave only heats the water molecules in the food, the food does not change chemically\n\n# Options\nQuestion ::: Which of the following can best question the above view?\nis_valid(arguments(nutrient_loss)) ::: (A)\nis_valid(arguments(production_standards)) ::: (B)\nis_valid(arguments(common_usage)) ::: (C)\nis_valid(arguments(water_molecule_heating)) ::: (D)"
    ]
  },
  {
    "id": 11,
    "context": "A research report shows that the proportion of children of cadres in Peking University increased from 20% in the 1980s to nearly 40% in 1977, surpassing the children of workers, farmers and professional technicians, and becoming the largest source of students.According to this, some media believe that the proportion of students and children of Peking University students has been rising for 20 years, surpassing other classes.",
    "question": "Which one, if true, most doubts the views of the above media",
    "answer": "A",
    "options": [
      "A.Many of the cadres counted in the past 20 years are enterprise cadres, which used to include only government officials",
      "B.Compared with foreign countries, Chinese education provides workers and peasants with more opportunities for education and social mobility",
      "C.After the founding of New China, more and more children of workers and peasants entered the university",
      "D.Some of the workers 'children in the statistics may be former farmers' children"
    ],
    "raw_logic_programs": [
      "# Declarations\nproportions = EnumSort([children_of_cadres, children_of_workers, children_of_farmers, children_of_professional_technicians])\nyears = EnumSort([1980s, 1977])\nincrease = Function([proportions, years] -> [bool])\n\n# Constraints\nincrease(children_of_cadres, 1980s) == (20 / 100) ::: proportion of children of cadres in the 1980s\nincrease(children_of_cadres, 1977) == (40 / 100) ::: proportion of children of cadres in 1977\nincrease(children_of_workers, 1980s) < increase(children_of_cadres, 1980s) ::: children of workers are less than children of cadres in the 1980s\nincrease(children_of_farmers, 1980s) < increase(children_of_cadres, 1980s) ::: children of farmers are less than children of cadres in the 1980s\nincrease(children_of_professional_technicians, 1980s) < increase(children_of_cadres, 1980s) ::: children of professional technicians are less than children of cadres in the 1980s\n\n# Options\nQuestion ::: Which one, if true, most doubts the views of the above media?\nis_doubtful(increase(children_of_cadres, 1980s) == (20 / 100) && increase(children_of_cadres, 1977) == (40 / 100) && increase(children_of_workers, 1980s) < increase(children_of_cadres, 1980s)) ::: (A)\nis_doubtful(increase(children_of_workers, 1980s) > increase(children_of_cadres, 1980s)) ::: (B)\nis_doubtful(increase(children_of_workers, 1980s) < increase(children_of_cadres, 1980s) && increase(children_of_workers, 1980s) < increase(children_of_farmers, 1980s)) ::: (C)\nis_doubtful(increase(children_of_workers, 1980s) < increase(children_of_cadres, 1980s) && increase(children_of_farmers, 1980s) < increase(children_of_professional_technicians, 1980s)) ::: (D)"
    ]
  },
  {
    "id": 12,
    "context": "Lotus leaf is the leaf of the aquatic herbaceous plant for many years.Its chemical components mainly include lotus alkaloid, citric acid, malic acid, gluconic acid, oxalic acid, succinic acid, and other basic components against mitosis.Lotus leaf contains a variety of alkaloids, brassin glycosides, lotus leaf glycosides and other ingredients, can effectively reduce cholesterol and triglycerides, has a good effect on hyperlipidemia and obese patients.Lotus leaf infusion and decoction can expand blood vessels, clear heat and relieve heat, and lower blood pressure.Some experts pointed out that lotus leaf is a good medicine for weight loss.Which of the following",
    "question": "If it is true, can it most support the opinions of the above experts?",
    "answer": "D",
    "options": [
      "A.Lotus leaf promotes gastrointestinal motility and clears the body of stool;",
      "B.Lotus leaf tea is a food, not a medicine, which has the advantages of non-toxicity and safety;",
      "C.Lotus leaf tea becomes a liquid food after soaking in water, and is quickly absorbed in the stomach for a short time, with higher concentration and greater irritation.",
      "D.After taking lotus leaf products, a layer of fat isolation film is formed on the human intestinal wall, which can effectively prevent the absorption of fat;"
    ],
    "raw_logic_programs": [
      "# Declarations\ncomponents = EnumSort([lotus_alkaloid, citric_acid, malic_acid, gluconic_acid, oxalic_acid, succinic_acid])\neffects = EnumSort([reduce_cholesterol, reduce_triglycerides, lower_blood_pressure, promote_weight_loss])\nsupports = Function([components] -> [effects])\n\n# Constraints\nForAll([c:components], Or(supports(c) == reduce_cholesterol, supports(c) == reduce_triglycerides, supports(c) == lower_blood_pressure, supports(c) == promote_weight_loss)) ::: Lotus leaf contains a variety of components that can effectively reduce cholesterol and triglycerides, and has a good effect on hyperlipidemia and obesity.\nForAll([c:components], Implies(supports(c) == promote_weight_loss, supports(c) == reduce_cholesterol)) ::: If lotus leaf is a good medicine for weight loss, it should also help in reducing cholesterol.\n\n# Options\nQuestion ::: If it is true, can it most support the opinions of the above experts?\nis_supportive(supports(lotus_leaf) == promote_weight_loss) ::: (A) Lotus leaf promotes gastrointestinal motility and clears the body of stool;\nis_supportive(supports(lotus_leaf_tea) == non_toxic) ::: (B) Lotus leaf tea is a food, not a medicine, which has the advantages of non-toxicity and safety;\nis_supportive(supports(lotus_leaf_tea) == quick_absorption) ::: (C) Lotus leaf tea becomes a liquid food after soaking in water, and is quickly absorbed in the stomach for a short time, with higher concentration and greater irritation.\nis_supportive(supports(lotus_leaf_products) == fat_absorption_prevention) ::: (D) After taking lotus leaf products, a layer of fat isolation film is formed on the human intestinal wall, which can effectively prevent the absorption of fat;"
    ]
  },
  {
    "id": 13,
    "context": "On August 3, 2003, a 'human fossil of 110,000 years ago' was unearthed from the Zhangkoudong ancient human site in Jiuxiang, Yiliang County.The announcement of this excavation immediately attracted wide attention from the media and experts.Many experts who participated in the excavation believe that the appearance of this human tooth fossil indicates that Zhangkoudong had human activities as early as 110,000 years ago.It will rewrite the Kunming area defined by the ancient human ruins of Longtan Mountain in Chenggong County.Mankind has only 30,000 years of history.",
    "question": "Which of the following, if true, most doubts the opinions of the above experts?",
    "answer": "B",
    "options": [
      "A.Academics are inherently controversial, and everyone has the right to express their opinions;",
      "B.Some experts analyzed the fossil's long axis, crown shape, crown lip and tongue surface protrusion and enamel, etc., that this fossil is not a human incisor fossil, but a deer tooth fossil;",
      "C.This tooth fossil was excavated in the red sand layer 20 cm below the calcium plate 110,000 years ago;",
      "D.Some experts used the uranium method to date the calcium plates of each layer of Zhangkou Cave, and proved that the earliest deposits of the fossil tooth were formed 300,000 years ago;"
    ],
    "raw_logic_programs": [
      "# Declarations\nfossils = EnumSort([human_fossil, deer_tooth])\nexperts = EnumSort([expert1, expert2, expert3, expert4])\nopinions = Function([experts] -> [bool])\n\n# Constraints\nForAll([e:experts], opinions(e) == true) ::: All experts believe the fossil indicates human activities as early as 110,000 years ago.\nexists_human_fossil = Exists([f:fossils], f == human_fossil) ::: There is a belief that the fossil is a human fossil.\n\n# Options\nQuestion ::: Which of the following, if true, most doubts the opinions of the above experts?\nis_doubtful(opinions(expert2) == false) ::: (A) Academics are inherently controversial, and everyone has the right to express their opinions.\nis_doubtful(opinions(expert2) == false) ::: (B) Some experts analyzed the fossil's long axis, crown shape, crown lip and tongue surface protrusion and enamel, etc., that this fossil is not a human incisor fossil, but a deer tooth fossil.\nis_doubtful(opinions(expert2) == false) ::: (C) This tooth fossil was excavated in the red sand layer 20 cm below the calcium plate 110,000 years ago.\nis_doubtful(opinions(expert2) == false) ::: (D) Some experts used the uranium method to date the calcium plates of each layer of Zhangkou Cave, and proved that the earliest deposits of the fossil tooth were formed 300,000 years ago."
    ]
  },
  {
    "id": 14,
    "context": "In the recruitment examination for the public selection of deputy chiefs in a certain department, a total of 7 people were registered as A.B, C, D, E, G and G.According to statistics, the highest academic qualifications among the 7 people are undergraduate and doctor.Among them there are 3 people who graduated with Ph.D .; 3 women.It is known that? A.B, and C have the same educational level, while G and G have different educational levels; E, G, and G have the same gender, and A and D have different genders.The final appointment was a female doctor.",
    "question": "Based on the above statement, which of the following can be derived?",
    "answer": "D",
    "options": [
      "A.A is a male doctor;",
      "B.I am a female doctor;",
      "C? Geng is not a male doctor;",
      "D? Ding is a female doctor."
    ],
    "raw_logic_programs": [
      "# Declarations\ncandidates = EnumSort([A, B, C, D, E, G1, G2])  # G1 and G2 represent the two Gs\neducational_levels = EnumSort([undergraduate, doctor])\ngenders = EnumSort([male, female])\nhas_degree = Function([candidates] -> [educational_levels])\ngender = Function([candidates] -> [genders])\n\n# Constraints\nCount([c:candidates], has_degree(c) == doctor) == 3 ::: There are 3 people with a Ph.D.\nCount([c:candidates], gender(c) == female) == 3 ::: There are 3 women\nhas_degree(A) == has_degree(B) == has_degree(C) ::: A, B, and C have the same educational level\nhas_degree(G1) != has_degree(G2) ::: G1 and G2 have different educational levels\ngender(E) == gender(G1) == gender(G2) ::: E, G1, and G2 have the same gender\ngender(A) != gender(D) ::: A and D have different genders\nExists([c:candidates], And(gender(c) == female, has_degree(c) == doctor)) ::: The final appointment was a female doctor\n\n# Options\nQuestion ::: Based on the above statement, which of the following can be derived?\nis_valid(gender(A) == male, has_degree(A) == doctor) ::: (A) A is a male doctor\nis_valid(gender(I) == female, has_degree(I) == doctor) ::: (B) I am a female doctor\nis_valid(gender(G1) == female, has_degree(G1) != doctor) ::: (C) Geng is not a male doctor\nis_valid(gender(D) == female) ::: (D) Ding is a female doctor"
    ]
  },
  {
    "id": 15,
    "context": "There are five stations set up from west to east along a section of the high-speed railway along the river.It is known that Fuyi Station is east of Haoyun Station and West of Huyao Station, and is adjacent to Huyao Station; Jiushang Station is adjacent to Yinling Station.",
    "question": "Based on the above information, regarding the order of the five stations from west to east, which of the following is possible?",
    "answer": "C",
    "options": [
      "A.Yinling Station, Haoyun Station, Jiushang Station, Fuyi Station, Hu Yao Station;",
      "B.Fuyi Station, Hu Yao Station, Jiushang Station, Yinling Station, Haoyun Station;",
      "C.Haoyun Station, Yinling Station, Jiushang Station, Fuyi Station, Hu Yao Station;",
      "D.Haoyun Station, Hu Yao Station, Fuyi Station, Yinling Station, Jiushang Station;"
    ],
    "raw_logic_programs": [
      "# Declarations\nstations = EnumSort([Fuyi, Haoyun, Huyao, Jiushang, Yinling])\nposition = Function([stations] -> [int])\nForAll([s:stations], And(1 <= position(s), position(s) <= 5))\n\n# Constraints\nAnd(position(Fuyi) > position(Haoyun), position(Fuyi) < position(Huyao)) ::: Fuyi Station is east of Haoyun Station and west of Huyao Station\nAnd(position(Fuyi) == position(Huyao) - 1) ::: Fuyi Station is adjacent to Huyao Station\nAnd(position(Jiushang) == position(Yinling) - 1) ::: Jiushang Station is adjacent to Yinling Station\n\n# Options\nQuestion ::: Which of the following is possible regarding the order of the five stations from west to east?\nis_valid(And(position(Yinling) == 1, position(Haoyun) == 2, position(Jiushang) == 3, position(Fuyi) == 4, position(Huyao) == 5)) ::: (A)\nis_valid(And(position(Fuyi) == 1, position(Huyao) == 2, position(Jiushang) == 3, position(Yinling) == 4, position(Haoyun) == 5)) ::: (B)\nis_valid(And(position(Haoyun) == 1, position(Yinling) == 2, position(Jiushang) == 3, position(Fuyi) == 4, position(Huyao) == 5)) ::: (C)\nis_valid(And(position(Haoyun) == 1, position(Huyao) == 2, position(Fuyi) == 3, position(Yinling) == 4, position(Jiushang) == 5)) ::: (D)"
    ]
  },
  {
    "id": 16,
    "context": "There are five stations set up from west to east along a section of the high-speed railway along the river.It is known that Fuyi Station is east of Haoyun Station and West of Huyao Station, and is adjacent to Huyao Station; Jiushang Station is adjacent to Yinling Station.",
    "question": "If Jiushang Station is adjacent to Haoyun Station and east of Haoyun Station, it can be concluded that?",
    "answer": "A",
    "options": [
      "A.Hu Yao is standing on the east side;",
      "B.Fuyi is standing in the west;",
      "C.Yinling is standing on the east side;",
      "D.Leek standing on the west side;"
    ],
    "raw_logic_programs": [
      "# Declarations\nstations = EnumSort([Fuyi, Haoyun, Huyao, Jiushang, Yinling])\nposition = Function([stations] -> [int])\nForAll([s:stations], And(1 <= position(s), position(s) <= 5))\n\n# Constraints\nposition(Fuyi) > position(Haoyun) ::: Fuyi Station is east of Haoyun Station\nposition(Fuyi) < position(Huyao) ::: Fuyi Station is west of Huyao Station\nAbs(position(Fuyi) - position(Huyao)) == 1 ::: Fuyi Station is adjacent to Huyao Station\nAbs(position(Jiushang) - position(Yinling)) == 1 ::: Jiushang Station is adjacent to Yinling Station\nposition(Jiushang) > position(Haoyun) ::: Jiushang Station is east of Haoyun Station\n\n# Options\nQuestion ::: If Jiushang Station is adjacent to Haoyun Station and east of Haoyun Station, it can be concluded that?\nis_valid(position(Huyao) > position(Jiushang)) ::: (A) Huyao is standing on the east side\nis_valid(position(Fuyi) < position(Haoyun)) ::: (B) Fuyi is standing in the west\nis_valid(position(Yinling) > position(Jiushang)) ::: (C) Yinling is standing on the east side\nis_valid(position(Haoyun) < position(Jiushang)) ::: (D) Jiushang is standing on the west side"
    ]
  },
  {
    "id": 17,
    "context": "There are five stations set up from west to east along a section of the high-speed railway along the river.It is known that Fuyi Station is east of Haoyun Station and West of Huyao Station, and is adjacent to Huyao Station; Jiushang Station is adjacent to Yinling Station.",
    "question": "If Hao Yun stands to the east of Jiushang Station, you can get?",
    "answer": "B",
    "options": [
      "A.Yinling Station is adjacent to Haoyun Station and west of Haoyun Station;",
      "B.Haoyun Station is adjacent to Fuyi Station and west of Fuyi Station;",
      "C.Jiushang Station is adjacent to Haoyun Station and west of Haoyun Station;",
      "D.Yinling Station is adjacent to Fuyi Station and west of Fuyi Station;"
    ],
    "raw_logic_programs": [
      "# Declarations\nstations = EnumSort([Fuyi, Haoyun, Huyao, Jiushang, Yinling])\nadjacent = Function([stations, stations] -> [bool])\nposition = Function([stations] -> [int])\n\n# Constraints\nAnd(position(Fuyi) > position(Haoyun), position(Fuyi) < position(Huyao)) ::: Fuyi Station is east of Haoyun Station and west of Huyao Station\nadjacent(Fuyi, Huyao) ::: Fuyi Station is adjacent to Huyao Station\nadjacent(Jiushang, Yinling) ::: Jiushang Station is adjacent to Yinling Station\n\n# Options\nQuestion ::: If Haoyun stands to the east of Jiushang Station, you can get?\nis_valid(And(adjacent(Yinling, Haoyun), position(Yinling) < position(Haoyun))) ::: (A)\nis_valid(And(adjacent(Haoyun, Fuyi), position(Haoyun) < position(Fuyi))) ::: (B)\nis_valid(And(adjacent(Jiushang, Haoyun), position(Jiushang) < position(Haoyun))) ::: (C)\nis_valid(And(adjacent(Yinling, Fuyi), position(Yinling) < position(Fuyi))) ::: (D)"
    ]
  },
  {
    "id": 18,
    "context": "There are five stations set up from west to east along a section of the high-speed railway along the river.It is known that Fuyi Station is east of Haoyun Station and West of Huyao Station, and is adjacent to Huyao Station; Jiushang Station is adjacent to Yinling Station.",
    "question": "If Haoyun Station is adjacent to Yinling Station, you can get?",
    "answer": "D",
    "options": [
      "A.Yinling is standing west of Haoyun Station",
      "B.Fuyi standing west of Jiushang Station",
      "C.Hao Yun stands west of Yinling Station",
      "D.Jiu Shang standing west of Fuyi Station"
    ],
    "raw_logic_programs": [
      "# Declarations\nstations = EnumSort([Fuyi, Haoyun, Huyao, Jiushang, Yinling])\nadjacent = Function([stations, stations] -> [bool])\n\n# Constraints\nAnd(adjacent(Fuyi, Huyao), adjacent(Fuyi, Haoyun), adjacent(Haoyun, Huyao)) ::: Fuyi Station is east of Haoyun Station and west of Huyao Station, and is adjacent to Huyao Station\nadjacent(Jiushang, Yinling) ::: Jiushang Station is adjacent to Yinling Station\n\n# Options\nQuestion ::: If Haoyun Station is adjacent to Yinling Station, you can get?\nis_valid(adjacent(Yinling, Haoyun)) ::: (A) Yinling is standing west of Haoyun Station\nis_valid(adjacent(Jiushang, Fuyi)) ::: (B) Fuyi standing west of Jiushang Station\nis_valid(adjacent(Haoyun, Yinling)) ::: (C) Haoyun stands west of Yinling Station\nis_valid(adjacent(Fuyi, Jiushang)) ::: (D) Jiushang standing west of Fuyi Station"
    ]
  },
  {
    "id": 19,
    "context": "Leeds lived in the middle Jurassic about 165 million years ago.It is a huge fish in the dinosaur era.Leeds can grow up to 9 meters long within 20 years of birth, with an average life span of about 40 years.The largest body length can even reach 16.5 meters.This size is comparable to the largest whale shark in modern times, and the average lifespan of the whale shark is about 70 years, so the growth rate of Leeds is likely to exceed that of the whale shark.",
    "question": "Which of the following, if true, can best refute the above argument?",
    "answer": "B",
    "options": [
      "A.Leeds fish and whale sharks feed on plankton and small animals in the ocean, and the growth rate cannot be significantly different.",
      "B.Although the lifespan of the Leeds fish and the whale shark differ greatly, they all reach adulthood around the age of 20, and their body shape is basically fixed.",
      "C.Although the lifespan of fish is different, their growth stages basically correspond to their juvenile, adult, middle-aged and elderly",
      "D.There is no obvious change in the growth cycle of Jurassic fish and modern fish"
    ],
    "raw_logic_programs": [
      "# Declarations\nspecies = EnumSort([Leeds, whale_shark])\ngrowth_rate = Function([species] -> [float])\nlifespan = Function([species] -> [int])\nmax_length = Function([species] -> [float])\ngrowth_comparison = Function([species, species] -> [bool])\n\n# Constraints\ngrowth_rate(Leeds) > growth_rate(whale_shark) ::: The growth rate of Leeds is likely to exceed that of the whale shark\nlifespan(Leeds) == 40 ::: Average lifespan of Leeds is about 40 years\nlifespan(whale_shark) == 70 ::: Average lifespan of whale shark is about 70 years\nmax_length(Leeds) == 16.5 ::: Largest body length of Leeds can reach 16.5 meters\nmax_length(whale_shark) == 18 ::: Largest body length of whale shark can reach up to 18 meters\n\n# Options\nQuestion ::: Which of the following, if true, can best refute the above argument?\nis_refutation(growth_rate(Leeds) == growth_rate(whale_shark)) ::: (A)\nis_refutation(lifespan(Leeds) != lifespan(whale_shark) && adulthood_age(Leeds) == adulthood_age(whale_shark)) ::: (B)\nis_refutation(growth_stages(Leeds) == growth_stages(whale_shark)) ::: (C)\nis_refutation(growth_cycle(Leeds) == growth_cycle(whale_shark)) ::: (D)"
    ]
  },
  {
    "id": 20,
    "context": "In 27.3 years, three canoes were continuously excavated on the Huai River beach in Xinyang County, Henan.Among them, in 2010, the first canoe was discovered under the Huaihe River beach in the Zhangzhuang Formation of Xuzhuang Village, Chengjiao Township, Xixian County, which was proved to be one of the earliest and largest canoe in China.The canoe is 9.3 meters long, 0.8 meters wide and 0.6 meters high.According to carbon-14 measurement, the materials for these canoes are exactly the same as the wood produced in tropical regions of Yunnan.This shows that in ancient times more than 3,000 years ago, the climate in Henan was very similar to the tropical climate.The climate on both sides of the middle and lower reaches of the Huaihe River is warm and humid, with tall and dense forests and a wide variety of animals and plants.",
    "question": "Which of the following, if true, will best support the above argument?",
    "answer": "A",
    "options": [
      "A.The raw materials of these canoes cannot be transported from the distant Yunnan virgin forest, they can only be obtained locally",
      "B.These canoes have been soaked in water for thousands of years and are very heavy",
      "C.The place where the Qi Zhou Qiu Jian story takes place is the Chu area, including south of Xuchang, Henan",
      "D.The canoe hull is pointed at both ends and is chiseled from a complete log for better preservation"
    ],
    "raw_logic_programs": [
      "# Declarations\ncanoes = EnumSort([Canoe1, Canoe2, Canoe3])\nmaterials = EnumSort([wood])\nlocations = EnumSort([Yunnan, Henan])\nclimate_conditions = EnumSort([tropical, warm_humid])\nsupports = Function([canoes] -> [bool])\n\n# Constraints\nForAll([c:canoes], supports(c) == (materials == wood)) ::: The materials for these canoes are exactly the same as the wood produced in tropical regions of Yunnan\nForAll([c:canoes], Implies(supports(c), climate_conditions == tropical)) ::: This shows that in ancient times more than 3,000 years ago, the climate in Henan was very similar to the tropical climate\n\n# Options\nQuestion ::: Which of the following, if true, will best support the above argument?\nis_valid(supports(Canoe1) == (materials == wood) && (locations == Yunnan)) ::: (A)\nis_valid(supports(Canoe2) == (materials == wood) && (locations == Henan)) ::: (B)\nis_valid(supports(Canoe3) == (materials == wood) && (locations == Yunnan)) ::: (C)\nis_valid(supports(Canoe1) == (materials == wood) && (climate_conditions == tropical)) ::: (D)"
    ]
  },
  {
    "id": 21,
    "context": "In a study, 51 middle school student volunteers were divided into a test group and a control group to receive the same mathematics training.During the five-day training, the researchers used a technique called transcranial random noise stimulation to lightly shock the areas of the brains of 25 test group members that were considered to be related to computing power.The subsequent test results showed that the mathematics ability of the test group members was significantly higher than that of the control group members.To their surprise, the effect of this ability improvement can last at least half a year.The researchers therefore believe that micro-shocks in the brain can improve the brain's computing power.",
    "question": "Which of the following, if true, best supports the above researchers 'views?",
    "answer": "C",
    "options": [
      "A.This non-invasive stimulus is inexpensive and will not cause any pain to the human body",
      "B.After a slight electric shock to the brain, the blood flow between the neurons in the brain is significantly enhanced, but it returns to normal after multiple stimulations",
      "C.Before the experiment, the mathematics scores of the two groups of students were almost the same",
      "D.Subjects with microshocks in the brain are more concerned about their behavior, and their concentration is more focused during the test"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([student1, student2, ..., student51])  # 51 middle school students\ngroups = EnumSort([test_group, control_group])\ntraining = Function([students] -> [groups])\nscores = Function([students] -> [int])  # Mathematics scores\n\n# Constraints\nCount([s:students], training(s) == test_group) == 25  # 25 students in the test group\nCount([s:students], training(s) == control_group) == 26  # 26 students in the control group\nForAll([s:students], scores(s) >= 0)  # Scores are non-negative\nForAll([s:students], Implies(training(s) == test_group, scores(s) > scores(s' where training(s') == control_group))  # Test group scores higher than control group\n\n# Options\nQuestion ::: Which of the following, if true, best supports the above researchers' views?\nis_supportive(A) ::: (A) This non-invasive stimulus is inexpensive and will not cause any pain to the human body\nis_supportive(B) ::: (B) After a slight electric shock to the brain, the blood flow between the neurons in the brain is significantly enhanced, but it returns to normal after multiple stimulations\nis_supportive(C) ::: (C) Before the experiment, the mathematics scores of the two groups of students were almost the same\nis_supportive(D) ::: (D) Subjects with microshocks in the brain are more concerned about their behavior, and their concentration is more focused during the test"
    ]
  },
  {
    "id": 22,
    "context": "An institution conducted a survey on the average house prices of three types of residential housing in three cities (A.B, and C) in eastern China (these are villas, ordinary commercial houses, and affordable housing from high to low), and the published information includes The following content? according to the price of villa houses, from high to low are A City, B City, and C City; according to the price of ordinary commercial houses, from high to low are A City, B City, and B City; according to affordable housing prices , From high to low are B city, A city, C city.",
    "question": "Regarding the overall average price of residential housing in the above three cities, which of the following judgments is wrong?",
    "answer": "D",
    "options": [
      "A.The overall average price of residential housing in A City is the highest",
      "B.The overall average price of residential housing in City B is in the middle",
      "C.The overall average price of residential housing in Cingcheng is the lowest",
      "D.The overall average price of residential housing in A City is the lowest"
    ],
    "raw_logic_programs": [
      "# Declarations\ncities = EnumSort([A, B, C])\nhousing_types = EnumSort([villas, ordinary_commercial_houses, affordable_housing])\nprices = Function([cities, housing_types] -> [int])\n\n# Constraints\nAnd(prices(A, villas) > prices(B, villas), prices(B, villas) > prices(C, villas)) ::: according to the price of villa houses, from high to low are A City, B City, and C City\nAnd(prices(A, ordinary_commercial_houses) > prices(B, ordinary_commercial_houses), prices(B, ordinary_commercial_houses) > prices(C, ordinary_commercial_houses)) ::: according to the price of ordinary commercial houses, from high to low are A City, B City, and C City\nAnd(prices(B, affordable_housing) > prices(A, affordable_housing), prices(A, affordable_housing) > prices(C, affordable_housing)) ::: according to affordable housing prices, from high to low are B City, A City, C City\n\n# Options\nQuestion ::: Which of the following judgments is wrong regarding the overall average price of residential housing in the above three cities?\nis_unsat(prices(A, villas) + prices(A, ordinary_commercial_houses) + prices(A, affordable_housing) > prices(B, villas) + prices(B, ordinary_commercial_houses) + prices(B, affordable_housing) && prices(A, villas) + prices(A, ordinary_commercial_houses) + prices(A, affordable_housing) > prices(C, villas) + prices(C, ordinary_commercial_houses) + prices(C, affordable_housing)) ::: (A)\nis_unsat(prices(B, villas) + prices(B, ordinary_commercial_houses) + prices(B, affordable_housing) < prices(A, villas) + prices(A, ordinary_commercial_houses) + prices(A, affordable_housing) && prices(B, villas) + prices(B, ordinary_commercial_houses) + prices(B, affordable_housing) > prices(C, villas) + prices(C, ordinary_commercial_houses) + prices(C, affordable_housing)) ::: (B)\nis_unsat(prices(C, villas) + prices(C, ordinary_commercial_houses) + prices(C, affordable_housing) < prices(A, villas) + prices(A, ordinary_commercial_houses) + prices(A, affordable_housing) && prices(C, villas) + prices(C, ordinary_commercial_houses) + prices(C, affordable_housing) < prices(B, villas) + prices(B, ordinary_commercial_houses) + prices(B, affordable_housing)) ::: (C)\nis_unsat(prices(A, villas) + prices(A, ordinary_commercial_houses) + prices(A, affordable_housing) < prices(B, villas) + prices(B, ordinary_commercial_houses) + prices(B, affordable_housing) && prices(A, villas) + prices(A, ordinary_commercial_houses) + prices(A, affordable_housing) < prices(C, villas) + prices(C, ordinary_commercial_houses) + prices(C, affordable_housing)) ::: (D)"
    ]
  },
  {
    "id": 23,
    "context": "The secret of the 'age' of human male and female ancestors is hidden in the Y chromosome and mitochondria.The Y chromosome only passes from father to son, while mitochondria only pass from mother to daughter.Looking back through these two genetic materials, we can find that all men have a common male ancestor 'Y chromosome Adam', and all women have a common female ancestor 'mitochondrial Eve'.The researchers conducted genome sequencing and comparative analysis of 69 males from nine different populations, such as Asia, Africa, and Latin America, and found that this male common ancestor 'Y chromosome Adam' was formed about 156,000 to 120,000 years ago.Using the same technical analysis of mitochondria, the researchers also calculated that this female common ancestor 'mitochondrial Eve' was formed between 148,000 and 99,000 years ago.",
    "question": "Which of the following is most appropriate as a corollary of the above discussion?",
    "answer": "A",
    "options": [
      "A.'Y chromosome Adam' and 'mitochondrial Eve' were formed in the same period, and 'age' is close, 'Y chromosome Adam' may be earlier.",
      "B.15 years ago, there was only one man 'Adam' on earth",
      "C.As two individuals, 'Adam' and 'Eve' should never meet",
      "D.Men and women are born together and have conceived modern humans together"
    ],
    "raw_logic_programs": [
      "# Declarations\nancestors = EnumSort(['Y chromosome Adam', 'mitochondrial Eve'])\ntime_periods = EnumSort(['156,000 to 120,000 years ago', '148,000 to 99,000 years ago'])\nevents = Function([ancestors] -> [time_periods])\n\n# Constraints\nevents('Y chromosome Adam') == '156,000 to 120,000 years ago' ::: The male common ancestor 'Y chromosome Adam' was formed about 156,000 to 120,000 years ago.\nevents('mitochondrial Eve') == '148,000 to 99,000 years ago' ::: The female common ancestor 'mitochondrial Eve' was formed between 148,000 and 99,000 years ago.\n\n# Options\nQuestion ::: Which of the following is most appropriate as a corollary of the above discussion?\nis_valid(And(events('Y chromosome Adam') == events('mitochondrial Eve'), 'Y chromosome Adam' may be earlier)) ::: (A)\nis_invalid('15 years ago, there was only one man Adam on earth') ::: (B)\nis_invalid('As two individuals, Adam and Eve should never meet') ::: (C)\nis_valid('Men and women are born together and have conceived modern humans together') ::: (D)"
    ]
  },
  {
    "id": 24,
    "context": "Research has found that insects 'breathe' through the stomata system on their bodies.The stomata are connected to the trachea, and more and more layers of smaller and smaller air are attached from top to bottom, thereby bringing oxygen to the whole body.At the current level of oxygen in the atmosphere, the total length of the stomata system has reached the limit; if the total length exceeds this limit, the oxygen supply capacity will be insufficient.Therefore, it can be judged that the amount of oxygen content can determine the size of insects.",
    "question": "Which of the following, if true, would best support the above argument?",
    "answer": "B",
    "options": [
      "A.Studies of invertebrates in the ocean have also found that in colder water and with higher oxygen content, the organisms there are also larger",
      "B.During the Carboniferous period, the concentration of oxygen in the earth 's atmosphere was as high as 35%, much higher than the current 21%.At that time, there were many giant insects on the earth, and the wingspan of the dragonfly was close to one meter.",
      "C.Small locusts cannot survive in a low-oxygen environment, especially in an environment with an oxygen concentration below 15%.Adult locusts can survive in an environment with 2% oxygen",
      "D.Under the environment with high oxygen content and high air pressure, the tested fruit flies lived to the fifth generation and their body size increased by 20%"
    ],
    "raw_logic_programs": [
      "# Declarations\ninsects = EnumSort([insect])\noxygen_levels = EnumSort([low, normal, high])\nsize = Function([insects] -> [int])\noxygen_content = Function([oxygen_levels] -> [int])\n\n# Constraints\noxygen_content(low) < oxygen_content(normal) ::: Low oxygen levels lead to smaller insect sizes\noxygen_content(normal) < oxygen_content(high) ::: Normal oxygen levels lead to medium insect sizes\nForAll([i:insects], Implies(oxygen_content(high) > oxygen_content(normal), size(i) > size(insect))) ::: Higher oxygen content supports larger insect sizes\n\n# Options\nQuestion ::: Which of the following, if true, would best support the above argument?\nis_supportive(oxygen_content(high) > oxygen_content(normal) AND size(insect) > size(insect)) ::: (A)\nis_supportive(oxygen_content(35%) > oxygen_content(21%) AND size(insect) > size(insect)) ::: (B)\nis_supportive(oxygen_content(low) < oxygen_content(15%) AND size(insect) < size(insect)) ::: (C)\nis_supportive(oxygen_content(high) AND size(insect) > size(insect)) ::: (D)"
    ]
  },
  {
    "id": 25,
    "context": "A certain class intends to select two of three girls from Fang Rufen, Guo Yanran, He Zhilian, and three from five male students such as Peng Youwen, Qiu Zhijie, Ren Xiangyang, Song Wenkai, Tang Xiaohua to form a five-person support group for college students to volunteer teaching in the mountains.Requirements? (1) Guo Yanran and Tang Xiaohua are not selected at the same time; (2) Peng Youwen and Song Kaiwen are not selected at the same time; (3) Qiu Zhijie and Tang Xiaohua are not selected at the same time.",
    "question": "Which of the following must be selected?",
    "answer": "D",
    "options": [
      "A.Fang Rufen",
      "B.Guo Yanran",
      "C.Song Kaiwen",
      "D.Ren Xiangyang"
    ],
    "raw_logic_programs": [
      "# Declarations\ngirls = EnumSort([Fang_Rufen, Guo_Yanran, He_Zhilian])\nboys = EnumSort([Peng_Youwen, Qiu_Zhijie, Ren_Xiangyang, Song_Wenkai, Tang_Xiaohua])\nselected_girls = Function([girls] -> [bool])\nselected_boys = Function([boys] -> [bool])\n\n# Constraints\nCount([g:girls], selected_girls(g)) == 2 ::: exactly two girls must be selected\nCount([b:boys], selected_boys(b)) == 3 ::: exactly three boys must be selected\nNot(And(selected_girls(Guo_Yanran), selected_boys(Tang_Xiaohua))) ::: Guo Yanran and Tang Xiaohua are not selected at the same time\nNot(And(selected_boys(Peng_Youwen), selected_boys(Song_Wenkai))) ::: Peng Youwen and Song Wenkai are not selected at the same time\nNot(And(selected_boys(Qiu_Zhijie), selected_boys(Tang_Xiaohua))) ::: Qiu Zhijie and Tang Xiaohua are not selected at the same time\n\n# Options\nQuestion ::: Which of the following must be selected?\nis_must_select(selected_girls(Fang_Rufen)) ::: (A)\nis_must_select(selected_girls(Guo_Yanran)) ::: (B)\nis_must_select(selected_boys(Song_Wenkai)) ::: (C)\nis_must_select(selected_boys(Ren_Xiangyang)) ::: (D)"
    ]
  },
  {
    "id": 26,
    "context": "A certain class intends to select two of three girls from Fang Rufen, Guo Yanran, He Zhilian, and three from five male students such as Peng Youwen, Qiu Zhijie, Ren Xiangyang, Song Wenkai, Tang Xiaohua to form a five-person support group for college students to volunteer teaching in the mountains.Requirements? (1) Guo Yanran and Tang Xiaohua are not selected at the same time; (2) Peng Youwen and Song Kaiwen are not selected at the same time; (3) Qiu Zhijie and Tang Xiaohua are not selected at the same time.",
    "question": "If Guo Yanran is selected, which of the following must also be selected?",
    "answer": "D",
    "options": [
      "A.Fang Rufen",
      "B.He Zhilian",
      "C.Peng Youwen",
      "D.Qiu Zhijie"
    ],
    "raw_logic_programs": [
      "# Declarations\ngirls = EnumSort([Fang_Rufen, Guo_Yanran, He_Zhilian])\nboys = EnumSort([Peng_Youwen, Qiu_Zhijie, Ren_Xiangyang, Song_Wenkai, Tang_Xiaohua])\nselected = Function([girls] -> [bool])\nselected_boy = Function([boys] -> [bool])\n\n# Constraints\nCount([g:girls], selected(g)) == 2 ::: exactly two girls are selected\nCount([b:boys], selected_boy(b)) == 3 ::: exactly three boys are selected\nNot(And(selected(Guo_Yanran), selected(Tang_Xiaohua))) ::: Guo Yanran and Tang Xiaohua are not selected at the same time\nNot(And(selected(Peng_Youwen), selected(Song_Wenkai))) ::: Peng Youwen and Song Wenkai are not selected at the same time\nNot(And(selected(Qiu_Zhijie), selected(Tang_Xiaohua))) ::: Qiu Zhijie and Tang Xiaohua are not selected at the same time\n\n# Options\nQuestion ::: If Guo Yanran is selected, which of the following must also be selected?\nis_must_select(selected(Fang_Rufen)) ::: (A)\nis_must_select(selected(He_Zhilian)) ::: (B)\nis_must_select(selected(Peng_Youwen)) ::: (C)\nis_must_select(selected(Qiu_Zhijie)) ::: (D)"
    ]
  },
  {
    "id": 27,
    "context": "A certain class intends to select two of three girls from Fang Rufen, Guo Yanran, He Zhilian, and three from five boys, including Peng Youwen, Qiu Zhijie, Ren Xiangyang, Song Wenkai, and Tang Xiaohua, to form a five-person support group for university students to volunteer teaching in the mountains.Requirements? (1) Guo Yanran and Tang Xiaohua are not selected at the same time; (2) Peng Youwen and Song Kaiwen are not selected at the same time; (3) Qiu Zhijie and Tang Xiaohua are not selected at the same time.",
    "question": "If He Zhilian is not selected, which of the following is not selected?",
    "answer": "A",
    "options": [
      "A.Tang Xiaohua",
      "B.Peng Youwen",
      "C.Qiu Zhijie",
      "D.Song Wenkai"
    ],
    "raw_logic_programs": [
      "# Declarations\ngirls = EnumSort([Fang_Rufen, Guo_Yanran, He_Zhilian, He_Zhilian])\nboys = EnumSort([Peng_Youwen, Qiu_Zhijie, Ren_Xiangyang, Song_Wenkai, Tang_Xiaohua])\nselected_girls = Function([girls] -> [bool])\nselected_boys = Function([boys] -> [bool])\n\n# Constraints\nCount([g:girls], selected_girls(g)) == 2 ::: exactly two girls are selected\nCount([b:boys], selected_boys(b)) == 3 ::: exactly three boys are selected\nNot(And(selected_girls(Guo_Yanran), selected_boys(Tang_Xiaohua))) ::: Guo Yanran and Tang Xiaohua are not selected at the same time\nNot(And(selected_boys(Peng_Youwen), selected_boys(Song_Wenkai))) ::: Peng Youwen and Song Wenkai are not selected at the same time\nNot(And(selected_boys(Qiu_Zhijie), selected_boys(Tang_Xiaohua))) ::: Qiu Zhijie and Tang Xiaohua are not selected at the same time\nNot(selected_girls(He_Zhilian)) ::: He Zhilian is not selected\n\n# Options\nQuestion ::: If He Zhilian is not selected, which of the following is not selected?\nis_unsat(selected_boys(Tang_Xiaohua)) ::: (A)\nis_unsat(selected_boys(Peng_Youwen)) ::: (B)\nis_unsat(selected_boys(Qiu_Zhijie)) ::: (C)\nis_unsat(selected_boys(Song_Wenkai)) ::: (D)"
    ]
  },
  {
    "id": 28,
    "context": "A certain class intends to select two of three girls from Fang Rufen, Guo Yanran, He Zhilian, and three from five boys, including Peng Youwen, Qiu Zhijie, Ren Xiangyang, Song Wenkai, and Tang Xiaohua, to form a five-person support group for university students to volunteer teaching in the mountains.Requirements? (1) Guo Yanran and Tang Xiaohua are not selected at the same time; (2) Peng Youwen and Song Kaiwen are not selected at the same time; (3) Qiu Zhijie and Tang Xiaohua are not selected at the same time.",
    "question": "If Tang Xiaohua is selected, which two of the following must be selected?",
    "answer": "D",
    "options": [
      "A.Fang Rufen and Guo Yanran",
      "B.Guo Yanran and He Zhilian",
      "C.Peng Youwen and He Zhilian",
      "D.Fang Rufen and He Zhilian"
    ],
    "raw_logic_programs": [
      "# Declarations\ngirls = EnumSort([Fang_Rufen, Guo_Yanran, He_Zhilian])\nboys = EnumSort([Peng_Youwen, Qiu_Zhijie, Ren_Xiangyang, Song_Wenkai, Tang_Xiaohua])\nselected = Function([girls] -> [bool])\nselected_boy = Function([boys] -> [bool])\n\n# Constraints\nCount([g:girls], selected(g)) == 2 ::: exactly two girls must be selected\nCount([b:boys], selected_boy(b)) == 3 ::: exactly three boys must be selected\nNot(And(selected(Guo_Yanran), selected(Tang_Xiaohua))) ::: Guo Yanran and Tang Xiaohua are not selected at the same time\nNot(And(selected(Peng_Youwen), selected(Song_Wenkai))) ::: Peng Youwen and Song Wenkai are not selected at the same time\nNot(And(selected(Qiu_Zhijie), selected(Tang_Xiaohua))) ::: Qiu Zhijie and Tang Xiaohua are not selected at the same time\nselected(Tang_Xiaohua) ::: Tang Xiaohua is selected\n\n# Options\nQuestion ::: If Tang Xiaohua is selected, which two of the following must be selected?\nis_must_select(And(selected(Fang_Rufen), selected(Guo_Yanran))) ::: (A)\nis_must_select(And(selected(Guo_Yanran), selected(He_Zhilian))) ::: (B)\nis_must_select(And(selected(Peng_Youwen), selected(He_Zhilian))) ::: (C)\nis_must_select(And(selected(Fang_Rufen), selected(He_Zhilian))) ::: (D)"
    ]
  },
  {
    "id": 29,
    "context": "From the 'Aklyusian monkey', the researchers discovered the characteristics of many apes.For example, a bone in its heel is short and wide.In addition, the 'Aklyusian monkey' has a small eye socket, and scientists speculate that it is active during the day, just like the ancestors of the early apes.",
    "question": "Which of the following, if true, best supports the above-mentioned scientists 'speculation?",
    "answer": "D",
    "options": [
      "A.The short and wide hind bone makes this primate good at jumping and preying in the bushes",
      "B.There is no strict proportional relationship between animal vision and orbital size",
      "C.The time when the earliest great apes separated from other primates was at least 55 million years ago",
      "D.Animals dominated by nocturnal activities, generally have larger eyes"
    ],
    "raw_logic_programs": [
      "# Declarations\napes = EnumSort([Aklyusian_monkey])\ncharacteristics = EnumSort([short_wide_heel_bone, small_eye_socket, active_daytime])\nspeculation = Function([apes] -> [bool])\n\n# Constraints\nAnd(characteristics(short_wide_heel_bone), characteristics(small_eye_socket), characteristics(active_daytime)) ::: The 'Aklyusian monkey' has a short and wide heel bone, a small eye socket, and is speculated to be active during the day.\n\n# Options\nQuestion ::: Which of the following, if true, best supports the above-mentioned scientists' speculation?\nis_supportive(speculation(A)) ::: (A) The short and wide hind bone makes this primate good at jumping and preying in the bushes.\nis_supportive(speculation(B)) ::: (B) There is no strict proportional relationship between animal vision and orbital size.\nis_supportive(speculation(C)) ::: (C) The time when the earliest great apes separated from other primates was at least 55 million years ago.\nis_supportive(speculation(D)) ::: (D) Animals dominated by nocturnal activities generally have larger eyes."
    ]
  },
  {
    "id": 30,
    "context": "Conne Levi with a 'moe' look looks like other newborns.But because it is the world's first test-tube baby screened by next-generation gene sequencing technology, his advent has attracted the attention of experts and scholars.Not long ago, this news detonated the audience at the 'European Society of Human Reproduction and Embryology Annual Meeting' held in London, England.And ordinary people also believe that humans may usher in the era of 'customized babies'.",
    "question": "Which of the following, if true, would best refute the views of ordinary people?",
    "answer": "C",
    "options": [
      "A.'Artificial' genetic screening does not rule out that there will be loopholes; in natural conception, the guidelines for survival of the fittest in nature seem to be more subtle and effective",
      "B.It can be seen from the development history of modern science and technology that technological development is often faster than human cognition, and sometimes technology will go further and deviate from the track of human cognition",
      "C.Gene screening is mainly to avoid reproductive defects, this technology brings opportunities for human eugenics and eugenics; as for 'customized babies', the concept of cloning is more involved, the two should not be confused",
      "D.'Customized babies' have not been tried globally, this concept also challenges the most controversial human reproductive ethics"
    ],
    "raw_logic_programs": [
      "# Declarations\nviews = EnumSort([ordinary_people])\nclaims = EnumSort([genetic_screening_loopholes, technology_development, gene_screening_eugenics, customized_babies_ethics])\nrefutes = Function([views] -> [claims])\n\n# Constraints\nForAll([v:views], Exists([c:claims], refutes(v) == c)) ::: Each view can be refuted by a claim\n\n# Options\nQuestion ::: Which of the following, if true, would best refute the views of ordinary people?\nis_best_refutation(refutes(ordinary_people) == genetic_screening_loopholes) ::: (A)\nis_best_refutation(refutes(ordinary_people) == technology_development) ::: (B)\nis_best_refutation(refutes(ordinary_people) == gene_screening_eugenics) ::: (C)\nis_best_refutation(refutes(ordinary_people) == customized_babies_ethics) ::: (D)"
    ]
  },
  {
    "id": 31,
    "context": "The basis of life-the main component of protein is an amino acid molecule.It is an organic molecule.Although people have not directly observed amino acid molecules in cosmic space, scientists have used hydrogen, water, oxygen, methane and formaldehyde in the laboratory to simulate the natural conditions of space.Kinds of amino acids.The raw materials used to synthesize amino acids are abundant in interstellar molecules.It is not difficult to imagine that there must also be amino acid molecules in the universe.As long as there is an appropriate environment, they may be transformed into proteins and further develop into organic life.According to this speculation, there are living bodies on other planets than the earth, and may even be living bodies with higher intelligence.",
    "question": "Which of the following is true to best refute the above speculation?",
    "answer": "A",
    "options": [
      "A.There is a huge difference between the process of developing from protein to organic life and the process from organic molecules to protein",
      "B.Higher intelligence is not only a product of material evolution, but also a product of continuous socialization",
      "C.In the natural environment, the synthesis of amino acid molecules from existing interstellar molecules is a small probability event",
      "D.Some interstellar molecules are not found in the Earth 's environment, and they are still not available in the laboratory"
    ],
    "raw_logic_programs": [
      "# Declarations\nspeculation = EnumSort([A, B, C, D])\ntruth_value = EnumSort([true, false])\nrefutes = Function([speculation] -> [truth_value])\n\n# Constraints\nrefutes(A) == true ::: There is a huge difference between the process of developing from protein to organic life and the process from organic molecules to protein\nrefutes(B) == true ::: Higher intelligence is not only a product of material evolution, but also a product of continuous socialization\nrefutes(C) == true ::: In the natural environment, the synthesis of amino acid molecules from existing interstellar molecules is a small probability event\nrefutes(D) == true ::: Some interstellar molecules are not found in the Earth's environment, and they are still not available in the laboratory\n\n# Options\nQuestion ::: Which of the following is true to best refute the above speculation?\nis_valid(refutes(A) == true) ::: (A)\nis_valid(refutes(B) == true) ::: (B)\nis_valid(refutes(C) == true) ::: (C)\nis_valid(refutes(D) == true) ::: (D)"
    ]
  },
  {
    "id": 32,
    "context": "To date, the oldest Homo sapiens remains have appeared in Africa, about 200,000 years ago.According to this, many scientists believe that humans originated in Africa, and Homo sapiens, the direct ancestor of modern people, evolved in Africa about 200,000 years ago, and then slowly migrated northwards about 150,000 to 200,000 years ago , Crossing the Middle East to Europe and Asia, and gradually migrating to other parts of the world.",
    "question": "Which of the following, if true, can best refute the views of the above scientists?",
    "answer": "D",
    "options": [
      "A.Modern Homo sapiens, living in the late Paleolithic period, about 40,000 to 10,000 years ago.There are hundreds of places where late Homo sapiens fossils or cultural sites have been found in our country",
      "B.In an archaeological excavation in South America, people discovered the fossils of Homo sapiens skulls that lived about 170,000 years ago",
      "C.Homo sapiens have the extraordinary ability to communicate with each other, make plans, and solve difficult problems",
      "D.Eight Homo sapiens teeth 400,000 years ago were discovered in the Qesem cave 12 km east of Tel Aviv, Israel"
    ],
    "raw_logic_programs": [
      "# Declarations\nfossils = EnumSort([Homo_sapiens])\nlocations = EnumSort([Africa, South_America, Europe, Asia, Middle_East])\ntime_periods = EnumSort([200000_years_ago, 170000_years_ago, 400000_years_ago])\nevidence = Function([fossils, locations, time_periods] -> [bool])\n\n# Constraints\nevidence(Homo_sapiens, Africa, 200000_years_ago) ::: oldest Homo sapiens remains have appeared in Africa, about 200,000 years ago\nevidence(Homo_sapiens, Middle_East, 150000_years_ago) ::: Homo sapiens migrated northwards about 150,000 to 200,000 years ago, crossing the Middle East\nevidence(Homo_sapiens, Europe, 150000_years_ago) ::: Homo sapiens migrated to Europe and Asia\n\n# Options\nQuestion ::: Which of the following, if true, can best refute the views of the above scientists?\nis_refuting(evidence(Homo_sapiens, South_America, 170000_years_ago)) ::: (B)\nis_refuting(evidence(Homo_sapiens, Middle_East, 400000_years_ago)) ::: (D)\nis_refuting(evidence(Homo_sapiens, Africa, 400000_years_ago)) ::: (A)\nis_refuting(evidence(Homo_sapiens, Europe, 400000_years_ago)) ::: (C)"
    ]
  },
  {
    "id": 33,
    "context": "By analyzing the light released or absorbed by the atoms of an object, you can measure whether the object is far away from the earth or close to the earth.When the object is far away from the earth, the frequency of these lights will move to the red end (low frequency) of the spectrum, referred to as 'red shift' 'On the contrary, it is called' blue shift '.The unique light emitted by the atoms is also affected by the mass of the elementary particles that make up the atoms, especially the electrons.If the mass of an atom increases, the energy of the photons it releases will also become higher, so the release and absorption frequencies will be blue-shifted.Conversely, if the particles become lighter and lighter, the frequency will be red-shifted.Astronomical observations have found that most galaxies have a redshift phenomenon.Moreover, the farther the galaxy is from the earth, the greater the redshift.According to this, many scientists believe that the universe must be constantly expanding.",
    "question": "Which of the following, if true, can best refute the views of the above scientists?",
    "answer": "C",
    "options": [
      "A.In the distant universe, some blue-shifted objects were also found",
      "B.The earth is not in the center of the universe",
      "C.The stars that people can observe may be less than one percent of the real universe",
      "D.From the perspective of other celestial bodies in the universe, redshift is also an absolute dominant phenomenon"
    ],
    "raw_logic_programs": [
      "# Declarations\nobservations = EnumSort([red_shift, blue_shift])\ngalaxies = EnumSort([galaxy1, galaxy2, galaxy3, ..., galaxyN])  # Representing multiple galaxies\nphenomena = Function([galaxies] -> [observations])\n\n# Constraints\nForAll([g:galaxies], phenomena(g) == red_shift) ::: Most galaxies have a redshift phenomenon\nForAll([g1:galaxies, g2:galaxies], Implies(g1 != g2, And(phenomena(g1) == red_shift, phenomena(g2) == red_shift))) ::: The farther the galaxy is from the earth, the greater the redshift\n\n# Options\nQuestion ::: Which of the following, if true, can best refute the views of the above scientists?\nis_valid(Exists([g:galaxies], phenomena(g) == blue_shift)) ::: (A) In the distant universe, some blue-shifted objects were also found\nis_valid(False) ::: (B) The earth is not in the center of the universe\nis_valid(False) ::: (C) The stars that people can observe may be less than one percent of the real universe\nis_valid(False) ::: (D) From the perspective of other celestial bodies in the universe, redshift is also an absolute dominant phenomenon"
    ]
  },
  {
    "id": 34,
    "context": "A company has a 6-story office building.The company's finance department, planning department, administration department, sales department, human resources department, and research and development department work here, and each department occupies one of the floors.Known? (1) The two floors of the human resources department and the sales department are not adjacent; (2) The finance department is on the next floor of the planning department; (3) The floor of the administrative department is above the planning department, but in the manpower Below the Resources Department.",
    "question": "In order from bottom to top, which of the following matches the distribution of the above floors?",
    "answer": "A",
    "options": [
      "A.Finance Department, Planning Department, Administration Department, Human Resources Department, R & D Department, Sales Department",
      "B.Finance Department, Planning Department, Administration Department, Human Resources Department, Sales Department, R & D Department",
      "C.Planning Department, Finance Department, Sales Department, R & D Department, Administration Department, Human Resources Department",
      "D.Sales Department, Finance Department, Planning Department, R & D Department, Human Resources Department, Administration Department"
    ],
    "raw_logic_programs": [
      "# Declarations\ndepartments = EnumSort([Finance, Planning, Administration, Human_Resources, Sales, R_and_D])\nfloors = EnumSort([1, 2, 3, 4, 5, 6])\noccupies = Function([departments] -> [floors])\n\n# Constraints\nAnd(Not(Adjacent(occupies(Human_Resources), occupies(Sales)))) ::: The two floors of the human resources department and the sales department are not adjacent\nAnd(occupies(Finance) == Next(occupies(Planning))) ::: The finance department is on the next floor of the planning department\nAnd(occupies(Administration) > occupies(Planning), occupies(Administration) < occupies(Human_Resources)) ::: The floor of the administrative department is above the planning department, but below the human resources department\n\n# Options\nQuestion ::: In order from bottom to top, which of the following matches the distribution of the above floors?\nis_valid(And(occupies(Finance) == 1, occupies(Planning) == 2, occupies(Administration) == 3, occupies(Human_Resources) == 4, occupies(R_and_D) == 5, occupies(Sales) == 6)) ::: (A)\nis_valid(And(occupies(Finance) == 1, occupies(Planning) == 2, occupies(Administration) == 3, occupies(Human_Resources) == 4, occupies(Sales) == 5, occupies(R_and_D) == 6)) ::: (B)\nis_valid(And(occupies(Planning) == 1, occupies(Finance) == 2, occupies(Sales) == 3, occupies(R_and_D) == 4, occupies(Administration) == 5, occupies(Human_Resources) == 6)) ::: (C)\nis_valid(And(occupies(Sales) == 1, occupies(Finance) == 2, occupies(Planning) == 3, occupies(R_and_D) == 4, occupies(Human_Resources) == 5, occupies(Administration) == 6)) ::: (D)"
    ]
  },
  {
    "id": 35,
    "context": "A company has a 6-story office building.The company's finance department, planning department, administration department, sales department, human resources department, and research and development department work here, and each department occupies one of the floors.Known? (1) The two floors of the human resources department and the sales department are not adjacent; (2) The finance department is on the next floor of the planning department; (3) The floor of the administrative department is above the planning department, but in the manpower Below the Resources Department.",
    "question": "If the Human Resources Department is not at the upper level of the Administration Department, which of the following may be correct?",
    "answer": "B",
    "options": [
      "A.The sales department is on the upper level of the R & D department",
      "B.The sales department is one level above the administrative department",
      "C.The sales department is at the next level of the planning department",
      "D.Sales Department is on the second floor"
    ],
    "raw_logic_programs": [
      "# Declarations\ndepartments = EnumSort([Finance, Planning, Administration, Sales, Human_Resources, R&D])\nfloors = EnumSort([1, 2, 3, 4, 5, 6])\noccupies = Function([departments] -> [floors])\n\n# Constraints\nAnd(Not(Adjacent(occupies(Human_Resources), occupies(Sales))), Not(Adjacent(occupies(Sales), occupies(Human_Resources)))) ::: The two floors of the human resources department and the sales department are not adjacent\nAnd(occupies(Finance) == Next(occupies(Planning))) ::: The finance department is on the next floor of the planning department\nAnd(occupies(Administration) > occupies(Planning), occupies(Human_Resources) < occupies(Administration)) ::: The floor of the administrative department is above the planning department, but below the human resources department\n\n# Options\nQuestion ::: If the Human Resources Department is not at the upper level of the Administration Department, which of the following may be correct?\nis_possible(occupies(Sales) == Next(occupies(R&D))) ::: (A)\nis_possible(occupies(Sales) == occupies(Administration) + 1) ::: (B)\nis_possible(occupies(Sales) == Next(occupies(Planning))) ::: (C)\nis_possible(occupies(Sales) == 2) ::: (D)"
    ]
  },
  {
    "id": 36,
    "context": "A company has a 6-story office building.The company's finance department, planning department, administration department, sales department, human resources department, and research and development department work here, and each department occupies one of the floors.Known? (1) The two floors of the human resources department and the sales department are not adjacent; (2) The finance department is on the next floor of the planning department; (3) The floor of the administrative department is above the planning department, but in the manpower Below the Resources Department.",
    "question": "If the human resources department is not on the top floor, the floors that the R & D department may be on are?",
    "answer": "D",
    "options": [
      "A.3, 4, 6",
      "B.3, 4, 5",
      "C.4, 5",
      "D.5, 6"
    ],
    "raw_logic_programs": [
      "# Declarations\ndepartments = EnumSort([finance, planning, administration, sales, human_resources, research_and_development])\nfloors = EnumSort([1, 2, 3, 4, 5, 6])\noccupies = Function([departments] -> [floors])\n\n# Constraints\nAnd(Not(Adjacent(occupies(human_resources), occupies(sales)))) ::: The two floors of the human resources department and the sales department are not adjacent\nAnd(occupies(finance) == Next(occupies(planning))) ::: The finance department is on the next floor of the planning department\nAnd(occupies(administration) > occupies(planning), occupies(administration) < occupies(human_resources)) ::: The floor of the administrative department is above the planning department, but below the human resources department\n\n# Options\nQuestion ::: If the human resources department is not on the top floor, the floors that the R & D department may be on are?\nis_valid(Or(occupies(research_and_development) == 3, occupies(research_and_development) == 4, occupies(research_and_development) == 6)) ::: (A)\nis_valid(Or(occupies(research_and_development) == 3, occupies(research_and_development) == 4, occupies(research_and_development) == 5)) ::: (B)\nis_valid(Or(occupies(research_and_development) == 4, occupies(research_and_development) == 5)) ::: (C)\nis_valid(Or(occupies(research_and_development) == 5, occupies(research_and_development) == 6)) ::: (D)"
    ]
  },
  {
    "id": 37,
    "context": "A company has a 6-story office building.The company's finance department, planning department, administration department, sales department, human resources department, and research and development department work here, and each department occupies one of the floors.Known? (1) The two floors of the human resources department and the sales department are not adjacent; (2) The finance department is on the next floor of the planning department; (3) The floor of the administrative department is above the planning department, but in the manpower Below the Resources Department.",
    "question": "If the Finance Department is on the third level, which of the following may be correct?",
    "answer": "B",
    "options": [
      "A.The R & D department is on the fifth floor",
      "B.The R & D department is on the upper level of the sales department",
      "C.The Administration Department is not on the upper level of the Planning Department",
      "D.The sales department is on a certain layer above the planning department"
    ],
    "raw_logic_programs": [
      "# Declarations\ndepartments = EnumSort([Finance, Planning, Administration, Sales, Human_Resources, Research_and_Development])\nfloors = EnumSort([1, 2, 3, 4, 5, 6])\noccupies = Function([departments] -> [floors])\n\n# Constraints\nAnd(Not(Adjacent(occupies(Human_Resources), occupies(Sales))), \n    Next(occupies(Finance), occupies(Planning)), \n    And(occupies(Administration) > occupies(Planning), occupies(Administration) < occupies(Human_Resources))) ::: \n    The two floors of the human resources department and the sales department are not adjacent; The finance department is on the next floor of the planning department; The floor of the administrative department is above the planning department, but below the human resources department.\n\n# Options\nQuestion ::: If the Finance Department is on the third level, which of the following may be correct?\nis_valid(occupies(Research_and_Development) == 5) ::: (A)\nis_valid(occupies(Research_and_Development) > occupies(Sales)) ::: (B)\nis_valid(Not(occupies(Administration) > occupies(Planning))) ::: (C)\nis_valid(occupies(Sales) > occupies(Planning)) ::: (D)"
    ]
  },
  {
    "id": 38,
    "context": "A company has a 6-story office building.The company's finance department, planning department, administration department, sales department, human resources department, and research and development department work here, and each department occupies one of the floors.Known? (1) The two floors of the human resources department and the sales department are not adjacent; (2) The finance department is on the next floor of the planning department; (3) The floor of the administrative department is above the planning department, but in the manpower Below the Resources Department.",
    "question": "Which of the following may be the two departments where the first and second tiers are located?",
    "answer": "C",
    "options": [
      "A.Finance Department, Sales Department",
      "B.Planning Department, Sales Department",
      "C.R & D Department and Sales Department",
      "D.Sales Department, Planning Department"
    ],
    "raw_logic_programs": [
      "# Declarations\ndepartments = EnumSort([Finance, Planning, Administration, Sales, Human_Resources, R_and_D])\nfloors = EnumSort([1, 2, 3, 4, 5, 6])\noccupies = Function([departments] -> [floors])\n\n# Constraints\nAnd(Not(Adjacent(occupies(Human_Resources), occupies(Sales)))) ::: The two floors of the human resources department and the sales department are not adjacent\nAnd(occupies(Finance) == Next(occupies(Planning))) ::: The finance department is on the next floor of the planning department\nAnd(occupies(Administration) > occupies(Planning), occupies(Administration) < occupies(Human_Resources)) ::: The floor of the administrative department is above the planning department, but below the human resources department\n\n# Options\nQuestion ::: Which of the following may be the two departments where the first and second tiers are located?\nis_valid(And(occupies(Finance) == 1, occupies(Sales) == 2)) ::: (A) Finance Department, Sales Department\nis_valid(And(occupies(Planning) == 1, occupies(Sales) == 2)) ::: (B) Planning Department, Sales Department\nis_valid(And(occupies(R_and_D) == 1, occupies(Sales) == 2)) ::: (C) R & D Department and Sales Department\nis_valid(And(occupies(Sales) == 1, occupies(Planning) == 2)) ::: (D) Sales Department, Planning Department"
    ]
  },
  {
    "id": 39,
    "context": "All landscape rooms can see the landscape, but Li Wenbing's family can't see the landscape.Therefore, Li Wenbing's family is not a landscape room.",
    "question": "Which of the following is most similar to the above argument?",
    "answer": "D",
    "options": [
      "A.Kind people will be respected by the villagers, Chenggong who is kind and charitable will be respected by the villagers, so Chenggong is a kind person",
      "B.Vegetables in Dongdun Market are very cheap.This basket of vegetables is not bought in Dongdun Market.Therefore, this basket of vegetables is not cheap",
      "C.Employees of Jiutian Company can speak English, Lin Yingrui is an employee of Jiutian Company, therefore, Lin Yingrui can speak English",
      "D.Anyone who meets the basic conditions can apply for a small loan.Sun Wen did not apply for a small loan.Therefore, Sun Wen did not meet the basic conditions"
    ],
    "raw_logic_programs": [
      "# Declarations\nrooms = EnumSort([landscape_room, non_landscape_room])\nfamilies = EnumSort([Li_Wenbing_family])\ncan_see_landscape = Function([families] -> [bool])\nis_landscape_room = Function([rooms] -> [bool])\n\n# Constraints\nForAll([r:rooms], Implies(is_landscape_room(r), can_see_landscape(Li_Wenbing_family) == false)) ::: All landscape rooms can see the landscape, but Li Wenbing's family can't see the landscape\ncan_see_landscape(Li_Wenbing_family) == false ::: Therefore, Li Wenbing's family is not a landscape room\n\n# Options\nQuestion ::: Which of the following is most similar to the above argument?\nis_similar(Implies(is_cheap(vegetables_in_Dongdun_Market), is_basket_cheap(basket_of_vegetables) == false)) ::: (B)"
    ]
  },
  {
    "id": 40,
    "context": "Chili relieves indigestion.' People who suffer from indigestion after eating a hot meal may be shocked when they see this sentence, and they can't believe it.However, the conclusions made by Italian experts through experiments are the same.They gave the experimenters suffering from indigestion to take the tablets containing chili before meals.After 5 weeks, 60% of the experimenters' discomfort symptoms were relieved.",
    "question": "Which of the following, if true, would best refute the above experimental conclusion?",
    "answer": "A",
    "options": [
      "A.The capsaicin contained in chili can hinder the secretion of a neurotransmitter to a certain extent",
      "B.In this experiment, 5% of the experimenters' discomfort symptoms worsened",
      "C.In another group of subjects who took the pill after meals, 55% of the subjects' symptoms were alleviated",
      "D.After paying attention to a healthy diet, patients with dyspepsia will generally ease the symptoms of discomfort within one month"
    ],
    "raw_logic_programs": [
      "# Declarations\nexperimenters = EnumSort([E1, E2, E3, E4, E5, E6])  # Representing the experimenters\nsymptoms = EnumSort([relieved, worsened])  # Possible outcomes for discomfort symptoms\ntreatment = Function([experimenters] -> [symptoms])  # Function to determine the outcome of treatment\n\n# Constraints\nForAll([e:experimenters], treatment(e) == relieved) ::: 60% of the experimenters' discomfort symptoms were relieved\nCount([e:experimenters], treatment(e) == worsened) == 0.05 * Count([e:experimenters]) ::: 5% of the experimenters' discomfort symptoms worsened\n\n# Options\nQuestion ::: Which of the following, if true, would best refute the above experimental conclusion?\nis_refuted(treatment(E1) == worsened) ::: (A)  # The capsaicin contained in chili can hinder the secretion of a neurotransmitter to a certain extent\nis_refuted(Count([e:experimenters], treatment(e) == worsened) == 0.05 * Count([e:experimenters])) ::: (B)  # In this experiment, 5% of the experimenters' discomfort symptoms worsened\nis_refuted(Count([e:experimenters], treatment(e) == relieved) == 0.55 * Count([e:experimenters])) ::: (C)  # In another group of subjects who took the pill after meals, 55% of the subjects' symptoms were alleviated\nis_refuted(Count([e:experimenters], treatment(e) == relieved) == 0.8 * Count([e:experimenters])) ::: (D)  # After paying attention to a healthy diet, patients with dyspepsia will generally ease the symptoms of discomfort within one month"
    ]
  },
  {
    "id": 41,
    "context": "Aptripa Cave is located near the bay of Dilos in the Peninsula of Maina, and is as large as four football fields.This cave dates back to the Neolithic Age, but was not accidentally discovered by a man walking a dog until the 1950s.After decades of scientific research work, archaeologists excavated tools, pottery, obsidian, silver and copper utensils from the cave, and thus believed that hundreds of people had lived in the cave.",
    "question": "Which of the following, if true, can best refute the above argument?",
    "answer": "B",
    "options": [
      "A.The cave inspired the description of hell in Greek mythology",
      "B.The cave is actually an ancient cemetery and funeral venue",
      "C.There is no prehistoric village in Europe that has been found earlier than the cave",
      "D.The entrance to the cave collapsed 5000 years ago"
    ],
    "raw_logic_programs": [
      "# Declarations\ncave = EnumSort([Aptripa_Cave])\ndiscoverer = EnumSort([man_with_dog])\nartifacts = EnumSort([tools, pottery, obsidian, silver_utensils, copper_utensils])\npopulation = Function([cave] -> [int])\nexcavated = Function([cave] -> [artifacts])\nlived = Function([cave] -> [bool])\n\n# Constraints\npopulation(cave) >= 100 ::: hundreds of people had lived in the cave\nexcavated(cave) == [tools, pottery, obsidian, silver_utensils, copper_utensils] ::: archaeologists excavated tools, pottery, obsidian, silver and copper utensils from the cave\nlived(cave) == true ::: believed that people had lived in the cave\n\n# Options\nQuestion ::: Which of the following, if true, can best refute the above argument?\nis_refutation(lived(cave) == false) ::: (A) The cave inspired the description of hell in Greek mythology\nis_refutation(lived(cave) == false) ::: (B) The cave is actually an ancient cemetery and funeral venue\nis_refutation(lived(cave) == false) ::: (C) There is no prehistoric village in Europe that has been found earlier than the cave\nis_refutation(lived(cave) == false) ::: (D) The entrance to the cave collapsed 5000 years ago"
    ]
  },
  {
    "id": 42,
    "context": "Researchers in a country reported that they found meteorites about 200 million years old in the strata of a certain area, and they were probably traces of flying objects when a huge meteorite hit the present province of Quebec, Canada.The clay layer with a thickness of about 5 cm also contains high concentrations of elements such as iridium and platinum, which are 50 to 2000 times the concentration normally found on the ground.In addition, this rock also contains special minerals in the formation of the late Bacques.Since the upper and lower strata also contain marine plankton fossils, it can be determined that the impact period was about 215 million years ago.",
    "question": "Which of the following, if true, would best support the above research findings?",
    "answer": "C",
    "options": [
      "A.The rock was formed after the accumulation layer of the deep seabed in the ancient times exposed above the ground",
      "B.In the late Paleozoic Triassic (approximately 200 million to 237 million years ago) ammonite and other species were extinct on a large scale",
      "C.Elements such as iridium and platinum are peculiar to meteorites and usually only exist in trace amounts on the surface",
      "D.In ancient times, there have been many incidents of meteorite impacting the earth"
    ],
    "raw_logic_programs": [
      "# Declarations\nfindings = EnumSort([meteorites, clay_layer, elements, minerals, fossils])\nsupporting_evidence = EnumSort([A, B, C, D])\nsupports = Function([findings, supporting_evidence] -> [bool])\n\n# Constraints\nsupports(meteorites, A) ::: The rock was formed after the accumulation layer of the deep seabed in the ancient times exposed above the ground\nsupports(meteorites, B) ::: In the late Paleozoic Triassic (approximately 200 million to 237 million years ago) ammonite and other species were extinct on a large scale\nsupports(elements, C) ::: Elements such as iridium and platinum are peculiar to meteorites and usually only exist in trace amounts on the surface\nsupports(meteorites, D) ::: In ancient times, there have been many incidents of meteorite impacting the earth\n\n# Options\nQuestion ::: Which of the following, if true, would best support the above research findings?\nis_best_support(supports(elements, C)) ::: (C)"
    ]
  },
  {
    "id": 43,
    "context": "A newly recruited researcher in 2013 by a scientific research unit, or 'introduced talent' with a deputy high title or above, or a fresh graduate PhD student with Beijing household registration.The fresh graduate PhD students live in postdoctoral apartments, and the 'introduced talents' all live in the 'Peony Garden' community.",
    "question": "Regarding the newly recruited researchers of the unit in 2013, which of the following judgments is correct?",
    "answer": "D",
    "options": [
      "A.None of those who live in postdoctoral apartments have deputy senior titles or above",
      "B.Those who have a Ph.D.have Beijing household registration",
      "C.None of the people living in the 'Peony Garden' community have a doctorate",
      "D.All non-graduate PhD students live in the 'Peony Garden' community"
    ],
    "raw_logic_programs": [
      "# Declarations\nresearchers = EnumSort([new_recruits])\ntitles = EnumSort([deputy_high_title, above])\nresidences = EnumSort([postdoctoral_apartments, Peony_Garden])\ndegrees = EnumSort([PhD, non_PhD])\nhas_title = Function([researchers] -> [titles])\nlives_in = Function([researchers] -> [residences])\nhas_degree = Function([researchers] -> [degrees])\n\n# Constraints\nForAll([r:researchers], Implies(has_degree(r) == PhD, lives_in(r) == postdoctoral_apartments)) ::: fresh graduate PhD students live in postdoctoral apartments\nForAll([r:researchers], Implies(has_title(r) != None, lives_in(r) == Peony_Garden)) ::: 'introduced talents' all live in the 'Peony Garden' community\n\n# Options\nQuestion ::: Regarding the newly recruited researchers of the unit in 2013, which of the following judgments is correct?\nis_valid(ForAll([r:researchers], Implies(lives_in(r) == postdoctoral_apartments, has_title(r) == None))) ::: (A)\nis_valid(ForAll([r:researchers], Implies(has_degree(r) == PhD, has_title(r) == None))) ::: (B)\nis_valid(ForAll([r:researchers], Implies(lives_in(r) == Peony_Garden, has_degree(r) != PhD))) ::: (C)\nis_valid(ForAll([r:researchers], Implies(has_degree(r) != PhD, lives_in(r) == Peony_Garden))) ::: (D)"
    ]
  },
  {
    "id": 44,
    "context": "Recently, discussions on whether to gradually extend the retirement age have been launched on the Internet.According to a month's blog statistics from a discussion column on this issue on a website, about half of the blog posts with more than 200 words that give reasons agree to gradually extend the retirement age to alleviate the social security pressure caused by the aging population; About 80% of the blog posts opposed extending the retirement age, mainly because of the negative impact on youth employment.",
    "question": "Which of the following, if true, best supports the idea of ​​gradually extending the retirement age?",
    "answer": "A",
    "options": [
      "A.Many people now find a second career after going through retirement procedures",
      "B.Respecting the elderly and loving children is a fine tradition in China for thousands of years, which should be carried forward",
      "C.The employment problem of young people should be solved by economic development and transformation and upgrading",
      "D.Due to the implementation of the one-child policy for many years, China's aging problem will be more acute than many Western developed countries"
    ],
    "raw_logic_programs": [
      "# Declarations\nblog_posts = EnumSort([post1, post2, post3, post4, post5, post6, post7, post8, post9, post10])  # Example posts\nreasons = EnumSort([agree, oppose])\nsupports = Function([blog_posts] -> [reasons])\n\n# Constraints\nCount([p:blog_posts], And(WordCount(p) > 200, supports(p) == agree)) >= Count([p:blog_posts], And(WordCount(p) > 200, supports(p) == oppose)) ::: About half of the blog posts with more than 200 words that give reasons agree to gradually extend the retirement age\nCount([p:blog_posts], And(WordCount(p) > 200, supports(p) == oppose)) >= 0.8 * Count([p:blog_posts], WordCount(p) > 200) ::: About 80% of the blog posts opposed extending the retirement age\n\n# Options\nQuestion ::: Which of the following, if true, best supports the idea of gradually extending the retirement age?\nis_supportive(And(ManyPeopleFindSecondCareerAfterRetirement(), supports(post1) == agree)) ::: (A)\nis_supportive(RespectingElderlyAndLovingChildrenIsTradition()) ::: (B)\nis_supportive(SolvingYouthEmploymentByEconomicDevelopment()) ::: (C)\nis_supportive(DueToOneChildPolicyAgingProblemMoreAcute()) ::: (D)"
    ]
  },
  {
    "id": 45,
    "context": "A certain online forum made a statistical comparison of posts about social issues published by netizens in the past year and 5 years ago, and found that posts such as money-gathering, poverty alleviation, and bravery have increased such posts by 50%.Posts related to evildoing, escaping evil, and killing more people have increased by 90%.This shows that the social atmosphere is rapidly deteriorating.",
    "question": "Which of the following, if true, would weaken the above argument most?",
    "answer": "D",
    "options": [
      "A.'Good things don't go out, bad things spread thousands of miles.' Throughout the ages",
      "B.The number of Internet users has quadrupled in the past 5 years",
      "C.In recent years, some people have used rumors online to achieve profit-making purposes.",
      "D.The online forum is a legal forum"
    ],
    "raw_logic_programs": [
      "# Declarations\nposts = EnumSort([money_gathering, poverty_alleviation, bravery, evildoing, escaping_evil, killing_more_people])\nincrease_percentage = Function([posts] -> [int])\n\n# Constraints\nincrease_percentage(money_gathering) == 50 ::: Posts such as money-gathering have increased by 50%\nincrease_percentage(poverty_alleviation) == 50 ::: Posts related to poverty alleviation have increased by 50%\nincrease_percentage(bravery) == 50 ::: Posts related to bravery have increased by 50%\nincrease_percentage(evildoing) == 90 ::: Posts related to evildoing have increased by 90%\nincrease_percentage(escaping_evil) == 90 ::: Posts related to escaping evil have increased by 90%\nincrease_percentage(killing_more_people) == 90 ::: Posts related to killing more people have increased by 90%\n\n# Options\nQuestion ::: Which of the following, if true, would weaken the above argument most?\nis_weakening(A) ::: (A) 'Good things don't go out, bad things spread thousands of miles.' Throughout the ages\nis_weakening(B) ::: (B) The number of Internet users has quadrupled in the past 5 years\nis_weakening(C) ::: (C) In recent years, some people have used rumors online to achieve profit-making purposes.\nis_weakening(D) ::: (D) The online forum is a legal forum"
    ]
  },
  {
    "id": 46,
    "context": "On November 17, 2012, the 'Tianhe No.1' supercomputer developed by the National University of Defense Technology became the world's fastest computing speed with a peak speed of 4700 trillion times and a continuous speed of 2568 trillion floating-point operations per second Computer.Less than three years later, at the 2013 International Supercomputer Conference in Leipzig, Germany on June 17, 2013, the international TOP500 organization announced the latest list of the world's top 500 supercomputers.The 'Tianhe 2' developed by the National University of Defense Technology topped the list with its peak calculation speed of 549 million times per second and continuous calculation speed of 339 million times per second.Compared to the US 'Titanium' supercomputer, which ranked first in the world, the calculation speed is twice that of the latter.",
    "question": "Which of the following is most suitable as a corollary of the above discussion",
    "answer": "D",
    "options": [
      "A.Only the United States and China can make supercomputers in the world",
      "B.Only China National Defense University has successfully developed a supercomputer",
      "C.Only the supercomputers in the United States and China have been ranked first in the world in terms of computing speed",
      "D.China's 'Tianhe 2' computing speed is clearly ahead of other supercomputers"
    ],
    "raw_logic_programs": [
      "# Declarations\nsupercomputers = EnumSort([Tianhe_No1, Tianhe_2, Titanium])\ncountries = EnumSort([China, USA])\nspeeds = Function([supercomputers] -> [int])\n\n# Constraints\nspeeds(Tianhe_No1) == 4700 * 10^12 ::: Tianhe No.1 peak speed\nspeeds(Tianhe_2) == 549 * 10^6 ::: Tianhe 2 peak speed\nspeeds(Titanium) == speeds(Tianhe_2) / 2 ::: Titanium speed is half of Tianhe 2\n\n# Options\nQuestion ::: Which of the following is most suitable as a corollary of the above discussion?\nis_valid(Or(countries == USA, countries == China)) ::: (A)\nis_valid(countries == China) ::: (B)\nis_valid(Or(countries == USA, countries == China)) ::: (C)\nis_valid(speeds(Tianhe_2) > speeds(Titanium)) ::: (D)"
    ]
  },
  {
    "id": 47,
    "context": "With the help of animal fossils and DNA retained in specimens, and using increasingly advanced cloning and genetic techniques, humans have been able to 'resurrect' some already extinct animals, such as mammoths, dodos, dinosaurs, etc.At the same time, the scientific community also started a big discussion about whether humans should revive extinct animals.Supporters believe that reanimated animals are expected to restore the damaged ecological environment in some areas.For example, Mammoths live on the vast grasslands of Siberia, and their excrement is an excellent fertilizer to nourish the grasslands.After the mammoth became extinct, grasslands lacking fertilizer were gradually replaced by tundra.If the mammoth can be resurrected and returned to Siberia, it will help reduce the area of ​​tundra and gradually restore the grassland ecosystem.",
    "question": "Which of the following, if true, would best refute the arguments of the above supporters?",
    "answer": "C",
    "options": [
      "A.If you invest a lot of time, energy and cost to resurrect the disappeared creatures, it will inevitably contain and weaken the protection of existing endangered animals, and the result will not be worth the loss.",
      "B.Merely cloning an individual of an extinct animal does not mean that humans have the ability to resurrect the entire population",
      "C.Even if the extinct animals can be resurrected in batches, the habitat suitable for their growth may have long since disappeared.If you can not give heavy organisms a suitable environment for survival, all efforts will be in vain",
      "D.The vast majority of these animals gradually disappeared in the course of human development.It was human activities that led to their extinction"
    ],
    "raw_logic_programs": [
      "To formulate the problem as a logic program, we will follow the structure of Declarations, Constraints, and Options as outlined in your request.\n\n### Problem:\nWith the help of animal fossils and DNA retained in specimens, and using increasingly advanced cloning and genetic techniques, humans have been able to 'resurrect' some already extinct animals, such as mammoths, dodos, dinosaurs, etc. At the same time, the scientific community also started a big discussion about whether humans should revive extinct animals. Supporters believe that reanimated animals are expected to restore the damaged ecological environment in some areas. For example, Mammoths live on the vast grasslands of Siberia, and their excrement is an excellent fertilizer to nourish the grasslands. After the mammoth became extinct, grasslands lacking fertilizer were gradually replaced by tundra. If the mammoth can be resurrected and returned to Siberia, it will help reduce the area of tundra and gradually restore the grassland ecosystem.\n\n### Question:\nWhich of the following, if true, would best refute the arguments of the above supporters?\n\n### Choices:\n(A) If you invest a lot of time, energy, and cost to resurrect the disappeared creatures, it will inevitably contain and weaken the protection of existing endangered animals, and the result will not be worth the loss.  \n(B) Merely cloning an individual of an extinct animal does not mean that humans have the ability to resurrect the entire population.  \n(C) Even if the extinct animals can be resurrected in batches, the habitat suitable for their growth may have long since disappeared. If you cannot give heavy organisms a suitable environment for survival, all efforts will be in vain.  \n(D) The vast majority of these animals gradually disappeared in the course of human development. It was human activities that led to their extinction.\n\n### Logic Program\n\n#### Declarations\n``` \narguments = EnumSort([A, B, C, D])\nrefute = Function([arguments] -> [bool])\n```\n\n#### Constraints\n```\nForAll([arg:arguments], refute(arg) == true) ::: If an argument is true, it refutes the supporters' claims.\n```\n\n#### Options\n```\nis_valid(refute(A)) ::: (A)\nis_valid(refute(B)) ::: (B)\nis_valid(refute(C)) ::: (C)\nis_valid(refute(D)) ::: (D)\n```\n\n### Explanation:\n- **Declarations**: We declare the possible arguments (A, B, C, D) that could refute the supporters' claims.\n- **Constraints**: We state that if any argument is true, it refutes the claims of the supporters.\n- **Options**: We check the validity of each argument in terms of its ability to refute the supporters' claims.\n\nThis structure allows us to analyze which argument best refutes the supporters' claims regarding the resurrection of extinct animals."
    ]
  },
  {
    "id": 48,
    "context": "Many pregnant women have symptoms of vitamin deficiency, but this is usually not due to the lack of vitamins in the diet of pregnant women, but because of the growth of babies in the abdomen, they have a higher demand for vitamins than others.",
    "question": "Which of the following is most important for evaluating the above conclusion?",
    "answer": "B",
    "options": [
      "A.Test the daily diet of some pregnant women who do not lack vitamins to determine the vitamin content.",
      "B.Test pregnant women and other women who have enough vitamins in their daily diet to determine whether they lack vitamins.",
      "C.Test pregnant women and other women with insufficient vitamins in their daily diet and determine whether they are deficient in vitamins.",
      "D.Test the daily diet of some pregnant women who lack vitamins to determine the content of vitamins."
    ],
    "raw_logic_programs": [
      "# Declarations\npregnant_women = EnumSort([woman1, woman2, woman3, woman4, woman5, woman6])  # Representing a sample of pregnant women\nother_women = EnumSort([womanA, womanB, womanC, womanD, womanE, womanF])  # Representing a sample of non-pregnant women\nvitamin_content = Function([pregnant_women] -> [int])  # Function to represent vitamin content in the diet\nvitamin_deficiency = Function([pregnant_women] -> [bool])  # Function to represent whether a woman is vitamin deficient\n\n# Constraints\nForAll([pw:pregnant_women], vitamin_deficiency(pw) == (vitamin_content(pw) < required_vitamin_level))  # Pregnant women are deficient if their vitamin content is below a required level\nForAll([ow:other_women], vitamin_deficiency(ow) == (vitamin_content(ow) < required_vitamin_level))  # Non-pregnant women are deficient if their vitamin content is below a required level\n\n# Options\nQuestion ::: Which of the following is most important for evaluating the above conclusion?\nis_valid(Exists([pw:pregnant_women], vitamin_content(pw) >= sufficient_vitamin_level) && ForAll([ow:other_women], vitamin_content(ow) >= sufficient_vitamin_level)) ::: (A)\nis_valid(Exists([pw:pregnant_women], vitamin_content(pw) >= sufficient_vitamin_level) && Exists([ow:other_women], vitamin_content(ow) >= sufficient_vitamin_level)) ::: (B)\nis_valid(Exists([pw:pregnant_women], vitamin_content(pw) < insufficient_vitamin_level) && Exists([ow:other_women], vitamin_content(ow) < insufficient_vitamin_level)) ::: (C)\nis_valid(Exists([pw:pregnant_women], vitamin_content(pw) < insufficient_vitamin_level)) ::: (D)"
    ]
  },
  {
    "id": 49,
    "context": "The education system has two aspects, one is compulsory education and the other is higher education.A reasonable education system requires everyone to have the right to compulsory education and to have access to higher education through fair competition.",
    "question": "Which of the following conclusions can be drawn from the above conclusions?",
    "answer": "C",
    "options": [
      "A.An education system that does not allow everyone to go to college is unreasonable.",
      "B.An education system that guarantees everyone to enjoy compulsory education is reasonable.",
      "C.An education system that does not allow everyone to enjoy the right to compulsory education is unreasonable.",
      "D.There should be more requirements for a reasonable education system."
    ],
    "raw_logic_programs": [
      "# Declarations\neducation_aspects = EnumSort([compulsory_education, higher_education])\neducation_system = Function([] -> [bool])\n\n# Constraints\neducation_system() == True ::: A reasonable education system requires everyone to have the right to compulsory education\neducation_system() == True ::: A reasonable education system requires access to higher education through fair competition\n\n# Options\nQuestion ::: Which of the following conclusions can be drawn from the above conclusions?\nis_valid(education_system() == False) ::: (A) An education system that does not allow everyone to go to college is unreasonable.\nis_valid(education_system() == True) ::: (B) An education system that guarantees everyone to enjoy compulsory education is reasonable.\nis_valid(education_system() == False) ::: (C) An education system that does not allow everyone to enjoy the right to compulsory education is unreasonable.\nis_valid(education_system() == False) ::: (D) There should be more requirements for a reasonable education system."
    ]
  },
  {
    "id": 50,
    "context": "A survey of traffic accidents has found that the incidence of traffic accidents is actually similar in cities where drunk driving is strictly investigated and those who do not.However, most experts believe that strict investigation of drunk driving can indeed reduce the occurrence of traffic accidents.",
    "question": "Which of the following is most helpful in eliminating this inconsistency?",
    "answer": "A",
    "options": [
      "A.Severe investigations of drunk driving have occurred in urban traffic accidents.",
      "B.The city that implements strict investigation of drunk driving has not eliminated drunk driving.",
      "C.It is more important to improve drivers' traffic safety awareness than strict management.",
      "D.In addition to strict investigation of drunk driving, other traffic violations should also be stopped."
    ],
    "raw_logic_programs": [
      "# Declarations\ncities = EnumSort([CityA, CityB])  # Example cities where the study is conducted\ninvestigation_strictness = EnumSort([strict, lenient])\naccident_incidence = Function([cities] -> [bool])  # Indicates if the incidence of accidents is similar\ndrunk_driving_investigation = Function([cities] -> [investigation_strictness])  # Type of investigation in each city\n\n# Constraints\nForAll([c:cities], accident_incidence(c) == (drunk_driving_investigation(c) == strict)) ::: The incidence of traffic accidents is similar in cities with strict and lenient investigations\nForAll([c:cities], Implies(drunk_driving_investigation(c) == strict, Not(accident_incidence(c)))) ::: Strict investigation can reduce the occurrence of traffic accidents\n\n# Options\nQuestion ::: Which of the following is most helpful in eliminating this inconsistency?\nis_helpful(Exists([c:cities], And(drunk_driving_investigation(c) == strict, accident_incidence(c) == false))) ::: (A) Severe investigations of drunk driving have occurred in urban traffic accidents.\nis_helpful(Exists([c:cities], And(drunk_driving_investigation(c) == strict, Not(drunk_driving_investigation(c) == lenient)))) ::: (B) The city that implements strict investigation of drunk driving has not eliminated drunk driving.\nis_helpful(Exists([c:cities], And(drunk_driving_investigation(c) == strict, Not(accident_incidence(c))))) ::: (C) It is more important to improve drivers' traffic safety awareness than strict management.\nis_helpful(Exists([c:cities], And(drunk_driving_investigation(c) == strict, Not(accident_incidence(c))))) ::: (D) In addition to strict investigation of drunk driving, other traffic violations should also be stopped."
    ]
  },
  {
    "id": 51,
    "context": "On the eve of the Minsk talks of the Ukrainian authorities 'coordination group, the speakers of' Donetsk People 's Republic 'and' Lugansk People 's Republic 'announced their negotiating positions? if the Ukrainian authorities do not recognize their territories and the special status of Russian, And without stopping its military operations in the southeast, the conflict cannot be resolved.In addition, the two 'Republics' insisted on pardoning all militia armed participants and political prisoners.Some Ukrainian observers commented? Do we recognize the special status of these two so-called 'Republics' and can we resolve the conflict by pardoning the militia?",
    "question": "The comments of Ukrainian observers are best used to refute which of the following?",
    "answer": "D",
    "options": [
      "A.Even if the Ukrainian authorities recognize the special status of the two 'Republic' territories and Russian language, and pardon all militia armed participants and political prisoners, the conflict may still not be resolved.",
      "B.Even if the conflict is resolved, it is not necessarily because the Ukrainian authorities recognize the 'Republic' territory and the special status of Russian.",
      "C.If the conflict is to be resolved, the Ukrainian authorities must recognize the special status of the two 'Republic' territories and the Russian language, and pardon all militia armed participants and political prisoners.",
      "D.As long as the Ukrainian authorities recognize the special status of the two 'Republic' territories and the Russian language, and pardon all militia armed participants and political prisoners, the conflict can be resolved."
    ],
    "raw_logic_programs": [
      "# Declarations\ncomments = EnumSort([Ukrainian_observers])\npositions = EnumSort([recognize_special_status, pardon_militia])\nconflict_resolution = Function([comments] -> [bool])\n\n# Constraints\nForAll([c:comments], Implies(And(conflict_resolution(c), recognize_special_status), Not(conflict_resolution(c)))) ::: Even if the Ukrainian authorities recognize the special status of the two 'Republic' territories and Russian language, and pardon all militia armed participants and political prisoners, the conflict may still not be resolved.\nForAll([c:comments], Implies(conflict_resolution(c), Not(recognize_special_status))) ::: Even if the conflict is resolved, it is not necessarily because the Ukrainian authorities recognize the 'Republic' territory and the special status of Russian.\nForAll([c:comments], Implies(conflict_resolution(c), And(recognize_special_status, pardon_militia))) ::: If the conflict is to be resolved, the Ukrainian authorities must recognize the special status of the two 'Republic' territories and the Russian language, and pardon all militia armed participants and political prisoners.\nForAll([c:comments], Implies(And(recognize_special_status, pardon_militia), conflict_resolution(c))) ::: As long as the Ukrainian authorities recognize the special status of the two 'Republic' territories and the Russian language, and pardon all militia armed participants and political prisoners, the conflict can be resolved.\n\n# Options\nQuestion ::: The comments of Ukrainian observers are best used to refute which of the following?\nis_refuted(And(recognize_special_status, pardon_militia) => Not(conflict_resolution)) ::: (A)\nis_refuted(conflict_resolution => Not(recognize_special_status)) ::: (B)\nis_refuted(conflict_resolution => And(recognize_special_status, pardon_militia)) ::: (C)\nis_refuted(And(recognize_special_status, pardon_militia) => conflict_resolution) ::: (D)"
    ]
  },
  {
    "id": 52,
    "context": "With the rapid development of the Internet, it has become a reality to buy your favorite products without leaving home.Even in countries and regions with low economic development levels, people can satisfy their pursuit of material life through online shopping.",
    "question": "Which of the following can most question the above view?",
    "answer": "D",
    "options": [
      "A.As online shopping sales increase, related taxes and fees will also increase.",
      "B.Even in the era when there is no Internet, people can still buy their favorite products through physical stores.",
      "C.The display of goods on the Internet cannot fully reflect the real situation.",
      "D.People's satisfaction with the pursuit of material life depends only on the level of economic development in the region."
    ],
    "raw_logic_programs": [
      "# Declarations\nviews = EnumSort([A, B, C, D])\nquestion = Function([views] -> [bool])\n\n# Constraints\n# The view is that online shopping allows people to satisfy their pursuit of material life.\n# We need to identify which statement can most question this view.\n# A: Online shopping sales increase, related taxes and fees will also increase.\n# B: Even in the era when there is no Internet, people can still buy their favorite products through physical stores.\n# C: The display of goods on the Internet cannot fully reflect the real situation.\n# D: People's satisfaction with the pursuit of material life depends only on the level of economic development in the region.\n\n# Options\n# Question: Which of the following can most question the above view?\nis_valid(question(A) == false) ::: (A)  # A does not question the view, it supports the idea of online shopping.\nis_valid(question(B) == true) ::: (B)  # B questions the view by stating that physical stores existed before the Internet.\nis_valid(question(C) == true) ::: (C)  # C questions the view by stating that online displays may not reflect reality.\nis_valid(question(D) == true) ::: (D)  # D questions the view by suggesting that satisfaction is solely dependent on economic development."
    ]
  },
  {
    "id": 53,
    "context": "Wang Gang must be a university teacher, because he not only has a doctorate from a prestigious school, but also has more than one year of research experience in a research institution overseas.",
    "question": "Which of the following can guarantee the correctness of the above statement?",
    "answer": "A",
    "options": [
      "A.Unless it is a university teacher, it is impossible to have a doctorate from a prestigious school and have more than one year of research experience in an overseas research institution.",
      "B.In recent years, college teachers have required overseas research experience.",
      "C.Some middle school teachers also have doctorate degrees and overseas research experience.",
      "D.Unless they are PhDs and have more than one year of overseas research experience, they cannot become university teachers."
    ],
    "raw_logic_programs": [
      "# Declarations\nindividuals = EnumSort([Wang_Gang])\nqualifications = EnumSort([doctorate, research_experience])\nroles = EnumSort([university_teacher, middle_school_teacher])\nhas = Function([individuals, qualifications] -> [bool])\nis = Function([individuals] -> [roles])\n\n# Constraints\nhas(Wang_Gang, doctorate) ::: Wang Gang has a doctorate from a prestigious school\nhas(Wang_Gang, research_experience) ::: Wang Gang has more than one year of research experience in a research institution overseas\nis(Wang_Gang) == university_teacher ::: Wang Gang must be a university teacher\n\n# Options\nQuestion ::: Which of the following can guarantee the correctness of the above statement?\nis_valid(Implies(Not(is(Wang_Gang) == university_teacher), And(has(Wang_Gang, doctorate), has(Wang_Gang, research_experience)))) ::: (A)\nis_valid(Implies(is(Wang_Gang) == university_teacher, has(Wang_Gang, research_experience))) ::: (B)\nis_valid(Exists([x:individuals], And(is(x) == middle_school_teacher, has(x, doctorate), has(x, research_experience)))) ::: (C)\nis_valid(Implies(Not(And(has(Wang_Gang, doctorate), has(Wang_Gang, research_experience))), Not(is(Wang_Gang) == university_teacher))) ::: (D)"
    ]
  },
  {
    "id": 54,
    "context": "If Malaysia Airlines 'passenger plane did not malfunction and was not hijacked by terrorist organizations, it must have been shot down by a missile.If the passenger plane is shot down by a missile, it will be discovered by the satellite; if the satellite finds that the passenger plane is shot down by the missile, it will be announced to the media.",
    "question": "If you want to get the conclusion that the plane was hijacked by a terrorist organization, which of the following should be added?",
    "answer": "B",
    "options": [
      "A.The passenger plane was not shot down by the missile.",
      "B.There were no reports of missiles shooting down the passenger plane, and the passenger plane did not malfunction.",
      "C.The passenger plane did not malfunction.",
      "D.The passenger plane malfunctioned and no missiles shot down the passenger plane."
    ],
    "raw_logic_programs": [
      "# Declarations\nevents = EnumSort([malfunction, hijacked, shot_down, discovered, announced])\nconditions = Function([events] -> [bool])\n\n# Constraints\nImplies(Not(conditions(malfunction)), Not(conditions(hijacked))) ::: If the passenger plane did not malfunction, it was not hijacked\nImplies(Not(conditions(hijacked)), conditions(shot_down)) ::: If the passenger plane was not hijacked, it must have been shot down by a missile\nImplies(conditions(shot_down), conditions(discovered)) ::: If the passenger plane is shot down by a missile, it will be discovered by the satellite\nImplies(conditions(discovered), conditions(announced)) ::: If the satellite finds that the passenger plane is shot down by a missile, it will be announced to the media\n\n# Options\nQuestion ::: If you want to get the conclusion that the plane was hijacked by a terrorist organization, which of the following should be added?\nis_valid(conditions(shot_down) == false) ::: (A) The passenger plane was not shot down by the missile.\nis_valid(And(Not(conditions(shot_down)), Not(conditions(malfunction)))) ::: (B) There were no reports of missiles shooting down the passenger plane, and the passenger plane did not malfunction.\nis_valid(conditions(malfunction) == false) ::: (C) The passenger plane did not malfunction.\nis_valid(And(conditions(malfunction), Not(conditions(shot_down)))) ::: (D) The passenger plane malfunctioned and no missiles shot down the passenger plane."
    ]
  },
  {
    "id": 55,
    "context": "Making more money makes people happier, at least to some extent.But new research shows that the reverse is also true, and happy people can make more money.Researchers at the University of London, after researching more than 10,000 Americans, found that those with positive emotions who are more satisfied with life as they grow up have higher incomes when they reach the age of 29.",
    "question": "Which of the following can best question the above research conclusions?",
    "answer": "C",
    "options": [
      "A.Most of the young people who grew up in wealthier families have a negative attitude towards life.",
      "B.In addition to emotions, the degree of specialization and work ability will directly affect the income level.",
      "C.Most young people who are more satisfied with their lives are born in wealthier families, and all have a good professional background.",
      "D.It should compare the occupational distribution of the respondents."
    ],
    "raw_logic_programs": [
      "# Declarations\nvariables = EnumSort([income, happiness, satisfaction, age])\npeople = EnumSort([individual_1, individual_2, ..., individual_10000])  # Representing the 10,000 Americans studied\nresearch = Function([people] -> [bool])  # Function to represent the research conclusions\n\n# Constraints\nForAll([p:people], Implies(happiness(p) == positive, income(p) > threshold)) ::: Happy people can make more money\nForAll([p:people], Implies(satisfaction(p) == high, income(p) > threshold)) ::: Those with positive emotions and high satisfaction have higher incomes at age 29\nForAll([p:people], age(p) == 29) ::: The study focuses on individuals at the age of 29\n\n# Options\nQuestion ::: Which of the following can best question the above research conclusions?\nis_valid(Exists([p:people], And(income(p) < threshold, happiness(p) == negative))) ::: (A)\nis_valid(Exists([p:people], And(income(p) < threshold, specialization(p) == low))) ::: (B)\nis_valid(Exists([p:people], And(income(p) < threshold, satisfaction(p) == high, background(p) == wealthy))) ::: (C)\nis_valid(Exists([p:people], And(occupation_distribution(p) == skewed))) ::: (D)"
    ]
  },
  {
    "id": 56,
    "context": "Teacher Zhang said? This time, all the students in our class have passed the examination.Therefore, none of the students in our class have passed.",
    "question": "Which of the following is most similar to the above reasoning?",
    "answer": "D",
    "options": [
      "A.All the students who passed the bottom-up exam passed the review, so all the students who passed the review passed.",
      "B.All the students who failed the bottom-up exam did not review well, so the students who did not review well did not pass.",
      "C.All the students who have participated in the bottom-up examination have been carefully prepared.Therefore, the students who have not taken the bottom-up examination have not been carefully prepared.",
      "D.All heroes can stand the test, so those who cannot stand the test are not heroes."
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Student1, Student2, Student3, ..., StudentN])  # Represents all students in the class\npassed_exam = Function([students] -> [bool])  # Function to determine if a student passed the exam\n\n# Constraints\nForAll([s:students], passed_exam(s) == true) ::: All students in the class have passed the examination\nForAll([s:students], passed_exam(s) == false) ::: None of the students in the class have passed\n\n# Options\nQuestion ::: Which of the following is most similar to the above reasoning?\nis_similar(And(passed_exam(Student1) == true, passed_exam(Student1) == false)) ::: (A)  # Contradictory reasoning\nis_similar(And(passed_exam(Student2) == false, Not(passed_exam(Student2) == true))) ::: (B)  # Contradictory reasoning\nis_similar(And(passed_exam(Student3) == false, Not(passed_exam(Student3) == true))) ::: (C)  # Contradictory reasoning\nis_similar(And(passed_exam(Student4) == false, Not(passed_exam(Student4) == true))) ::: (D)  # Contradictory reasoning\n\n# Note: The reasoning in the original problem is contradictory, and the options should reflect similar contradictions."
    ]
  },
  {
    "id": 57,
    "context": "In the past five years, food prices in City W have increased by an average of 25%.At the same time, residents' food purchases accounted for only about 8% of the city's monthly household income.As a result, the average income of households in City W has increased in the past two years.",
    "question": "Which of the following is most likely the hypothesis of the above argument?",
    "answer": "D",
    "options": [
      "A.In the past five years, the living standards of families in City W have generally improved.",
      "B.Over the past five years, the average price of other commodities in City W, except food, has risen by 25%.",
      "C.In the past five years, the amount of food purchased by residents of W has increased by 8%.",
      "D.In the past five years, the amount of food purchased by each household in City W has not changed."
    ],
    "raw_logic_programs": [
      "# Declarations\nfood_prices_increase = 0.25  # 25% increase in food prices\nfood_purchases_percentage = 0.08  # 8% of monthly household income\naverage_income_increase = True  # Average income of households has increased\n\n# Constraints\nfood_prices_increase > 0  # Food prices have increased\nfood_purchases_percentage > 0  # Food purchases account for a percentage of income\naverage_income_increase == True  # Average income has increased\n\n# Options\nQuestion ::: Which of the following is most likely the hypothesis of the above argument?\nis_likely(hypothesis(A)) ::: (A) In the past five years, the living standards of families in City W have generally improved.\nis_likely(hypothesis(B)) ::: (B) Over the past five years, the average price of other commodities in City W, except food, has risen by 25%.\nis_likely(hypothesis(C)) ::: (C) In the past five years, the amount of food purchased by residents of W has increased by 8%.\nis_likely(hypothesis(D)) ::: (D) In the past five years, the amount of food purchased by each household in City W has not changed."
    ]
  },
  {
    "id": 58,
    "context": "The proliferation of private cars in a certain city has aggravated the air pollution in the city, and often caused severe congestion on multiple road sections during the morning and evening peaks.In order to solve this problem, the city government decided to implement all-weather single and double number travel restrictions for private cars, that is, only private cars with ending numbers on odd days are allowed to travel, and only private cars with ending numbers are allowed on even days.",
    "question": "Which of the following can best question the decision of the city government?",
    "answer": "B",
    "options": [
      "A.There is a large automobile production company in the city, and the order restriction will definitely affect the automobile sales of the enterprise.",
      "B.Private car owners in the city generally have two or more private cars.",
      "C.The owners of private cars in the city are generally wealthy, and they do not care about the fines for violations.",
      "D.Mass transit is being developed in the city, which will help overcome congestion."
    ],
    "raw_logic_programs": [
      "# Declarations\ncars = EnumSort([car1, car2, car3, ..., carN])  # Represents all private cars in the city\ndays = EnumSort([odd_day, even_day])\nallowed = Function([cars, days] -> [bool])\n\n# Constraints\nForAll([c:cars], And(allowed(c, odd_day) == (ends_with_odd(c)), allowed(c, even_day) == (ends_with_even(c)))) ::: Only private cars with ending numbers on odd days are allowed to travel on odd days, and only private cars with ending numbers on even days are allowed on even days.\n\n# Options\nQuestion ::: Which of the following can best question the decision of the city government?\nis_valid(Exists([c:cars], And(is_large_automobile_company(c), affects_sales(c)))) ::: (A)\nis_valid(Exists([c:cars], has_multiple_cars(c))) ::: (B)\nis_valid(Exists([c:cars], is_wealthy(c))) ::: (C)\nis_valid(Exists([c:cars], is_mass_transit_developed(c))) ::: (D)"
    ]
  },
  {
    "id": 59,
    "context": "All undergraduates who enter the Beijing University for a master's degree without a test have already obtained the recommended qualifications of their schools",
    "question": "Which of the following means exactly the same as the above assertion?",
    "answer": "A",
    "options": [
      "A.Undergraduates who do not have the qualifications recommended by their school cannot be exempted from going to Peking University to study for a master's degree.",
      "B.Undergraduates who go to Nanyang University to study for a master's degree without a test may not obtain the recommended qualifications of their schools.",
      "C.Undergraduates who have obtained the qualifications recommended by their school may not necessarily be able to enter the university for a master's degree.",
      "D.In addition to Peking University.Undergraduates can also go to other schools to study for a master's degree."
    ],
    "raw_logic_programs": [
      "To formulate the given problem as a logic program, we will follow the structure of Declarations, Constraints, and Options.\n\n### Problem:\nAll undergraduates who enter the Beijing University for a master's degree without a test have already obtained the recommended qualifications of their schools.\n\n### Question:\nWhich of the following means exactly the same as the above assertion?\n\n### Choices:\n(A) Undergraduates who do not have the qualifications recommended by their school cannot be exempted from going to Peking University to study for a master's degree.  \n(B) Undergraduates who go to Nanyang University to study for a master's degree without a test may not obtain the recommended qualifications of their schools.  \n(C) Undergraduates who have obtained the qualifications recommended by their school may not necessarily be able to enter the university for a master's degree.  \n(D) In addition to Peking University, undergraduates can also go to other schools to study for a master's degree.  \n\n### Logic Program\n\n#### Declarations\n``` \nundergraduates = EnumSort([U1, U2, U3, ..., Un])  // Represents all undergraduates\nuniversities = EnumSort([Beijing_University, Nanyang_University, ...])  // Represents universities\nqualifications = EnumSort([qualified, not_qualified])  // Represents qualification status\nenters = Function([undergraduates] -> [universities])  // Function to represent which university an undergraduate enters\nhas_qualifications = Function([undergraduates] -> [qualifications])  // Function to represent qualification status\n```\n\n#### Constraints\n```\nForAll([u:undergraduates], \n    Implies(enters(u) == Beijing_University, \n        has_qualifications(u) == qualified))  // All undergraduates entering Beijing University without a test must have qualifications\n```\n\n#### Options\n```\nis_equivalent(ForAll([u:undergraduates], \n    Implies(has_qualifications(u) == not_qualified, \n        Not(enters(u) == Beijing_University))))  // (A) Equivalent to the original statement\nis_equivalent(Exists([u:undergraduates], \n    And(enters(u) == Nanyang_University, \n        Not(has_qualifications(u) == qualified))))  // (B) Not equivalent\nis_equivalent(Exists([u:undergraduates], \n    And(has_qualifications(u) == qualified, \n        Not(enters(u) == Beijing_University))))  // (C) Not equivalent\nis_equivalent(Exists([u:undergraduates], \n    Not(enters(u) == Beijing_University)))  // (D) Not equivalent\n```\n\n### Summary\nThe logic program captures the essence of the original assertion about undergraduates entering Beijing University and their qualifications. The options are framed to check for equivalence with the original statement, allowing us to determine which choice accurately reflects the same meaning."
    ]
  },
  {
    "id": 60,
    "context": "Compared with mineral water, pure water lacks minerals, and some of them are essential for the human body.Therefore, nutrition expert Lao Zhang suggested that those who regularly drink pure water change their habits and drink more mineral water.",
    "question": "Which of the following can weaken Lao Zhang 's suggestion the most?",
    "answer": "D",
    "options": [
      "A.Most of the nutrients people need are not from drinking water.",
      "B.What the human body needs is not just minerals.",
      "C.Drinking water other than pure water and mineral water.",
      "D.People can get essential minerals from other foods."
    ],
    "raw_logic_programs": [
      "# Declarations\nnutrients = EnumSort([minerals, vitamins, proteins, carbohydrates, fats])\nwater_types = EnumSort([mineral_water, pure_water])\nsuggestion = Function([water_types] -> [bool])\n\n# Constraints\nForAll([w:water_types], Implies(suggestion(water_types), Not(suggestion(pure_water)))) ::: Lao Zhang suggests changing from pure water to mineral water\nForAll([n:nutrients], Implies(And(n == minerals, Not(suggestion(mineral_water))), Not(suggestion(pure_water)))) ::: Pure water lacks essential minerals compared to mineral water\n\n# Options\nQuestion ::: Which of the following can weaken Lao Zhang's suggestion the most?\nis_weakening(And(suggestion(pure_water), Not(suggestion(mineral_water)))) ::: (A) Most of the nutrients people need are not from drinking water.\nis_weakening(And(suggestion(pure_water), Not(suggestion(mineral_water)))) ::: (B) What the human body needs is not just minerals.\nis_weakening(And(suggestion(pure_water), Not(suggestion(mineral_water)))) ::: (C) Drinking water other than pure water and mineral water.\nis_weakening(And(suggestion(pure_water), Not(suggestion(mineral_water)))) ::: (D) People can get essential minerals from other foods."
    ]
  },
  {
    "id": 61,
    "context": "An evaluation agency conducted a social survey to evaluate the popularity of books.The results show that the sales of life books exceed the sales of science and technology books, so the popularity of life books is higher than that of science and technology books.",
    "question": "Which of the following best refutes the above argument?",
    "answer": "A",
    "options": [
      "A.The sales volume only partially reflects the popularity of the book.",
      "B.Those who purchase technology books are often highly educated.",
      "C.The types of life books far exceed the types of science and technology books.",
      "D.Some books sold may not be read."
    ],
    "raw_logic_programs": [
      "# Declarations\nbooks = EnumSort([life_books, science_technology_books])\npopularity = Function([books] -> [bool])\nsales = Function([books] -> [int])\n\n# Constraints\nsales(life_books) > sales(science_technology_books) ::: the sales of life books exceed the sales of science and technology books\npopularity(life_books) > popularity(science_technology_books) ::: the popularity of life books is higher than that of science and technology books\n\n# Options\nQuestion ::: Which of the following best refutes the above argument?\nis_valid(Not(popularity(life_books) > popularity(science_technology_books))) ::: (A) The sales volume only partially reflects the popularity of the book.\nis_valid(Exists([x:books], And(x == science_technology_books, IsHighlyEducated(x)))) ::: (B) Those who purchase technology books are often highly educated.\nis_valid(Count([t:books], t == life_books) > Count([t:books], t == science_technology_books)) ::: (C) The types of life books far exceed the types of science and technology books.\nis_valid(Exists([b:books], And(sales(b) > 0, Not(Read(b))))) ::: (D) Some books sold may not be read."
    ]
  },
  {
    "id": 62,
    "context": "The report of the Ministry of Health shows that the cost of health care has indeed increased over the years.It can be seen that the medical conditions enjoyed by each of us have greatly improved.",
    "question": "Which of the following raises the most serious question to the above conclusion?",
    "answer": "A",
    "options": [
      "A.The vast majority of health care costs are spent on high-tech intensive care for high-risk patients.",
      "B.Without increasing costs, our health conditions may also improve.",
      "C.70% of the state's allocation to the health sector is for infrastructure construction.",
      "D.The cost of care for elderly chronic diseases is very large."
    ],
    "raw_logic_programs": [
      "# Declarations\nhealthcare_costs = EnumSort([high_tech_care, low_cost_care, infrastructure_spending, chronic_disease_care])\nimprovement = EnumSort([health_condition_improvement, no_improvement])\nconclusion = Function([healthcare_costs] -> [improvement])\n\n# Constraints\nconclusion(high_tech_care) == health_condition_improvement ::: The vast majority of health care costs are spent on high-tech intensive care for high-risk patients.\nconclusion(low_cost_care) == no_improvement ::: Without increasing costs, our health conditions may also improve.\nconclusion(infrastructure_spending) == no_improvement ::: 70% of the state's allocation to the health sector is for infrastructure construction.\nconclusion(chronic_disease_care) == no_improvement ::: The cost of care for elderly chronic diseases is very large.\n\n# Options\nQuestion ::: Which of the following raises the most serious question to the above conclusion?\nis_valid(conclusion(high_tech_care) == no_improvement) ::: (A)\nis_valid(conclusion(low_cost_care) == no_improvement) ::: (B)\nis_valid(conclusion(infrastructure_spending) == no_improvement) ::: (C)\nis_valid(conclusion(chronic_disease_care) == no_improvement) ::: (D)"
    ]
  },
  {
    "id": 63,
    "context": "Five graduate students Zhang, Wang, Li, Zhao, and Liu graduated from a linguistics major in a college of arts of a university in 2014, and were hired by one of the three employers, Tianshu, Tianji, and Tianxuan, and at least one of them was hired by each unit.name.Known? (1) Li was hired by Tianshu; (2) Li and Zhao were not hired by the same unit; (3) Liu and Zhao were hired by the same unit; (4) If Zhang was hired by Tianxuan, then Wang Ye Was hired by Tianxuan.",
    "question": "Which of the following may be correct?",
    "answer": "D",
    "options": [
      "A.Li and Liu were hired by the same unit.",
      "B.Wang, Zhao and Liu were all hired by Tianji.",
      "C.Only Liu was hired by Tian Xuan.",
      "D.Only Wang was hired by Tianxuan."
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Zhang, Wang, Li, Zhao, Liu])\nemployers = EnumSort([Tianshu, Tianji, Tianxuan])\nhired = Function([students] -> [employers])\n\n# Constraints\nhired(Li) == Tianshu ::: Li was hired by Tianshu\nhired(Li) != hired(Zhao) ::: Li and Zhao were not hired by the same unit\nhired(Liu) == hired(Zhao) ::: Liu and Zhao were hired by the same unit\nImplies(hired(Zhang) == Tianxuan, hired(Wang) == Tianxuan) ::: If Zhang was hired by Tianxuan, then Wang was hired by Tianxuan\n\n# Options\nQuestion ::: Which of the following may be correct?\nis_possible(hired(Li) == hired(Liu)) ::: (A) Li and Liu were hired by the same unit.\nis_possible(And(hired(Wang) == Tianji, hired(Zhao) == Tianji, hired(Liu) == Tianji)) ::: (B) Wang, Zhao and Liu were all hired by Tianji.\nis_possible(And(hired(Liu) == Tianxuan, Not(hired(Zhang) == Tianxuan), Not(hired(Wang) == Tianxuan))) ::: (C) Only Liu was hired by Tianxuan.\nis_possible(And(hired(Wang) == Tianxuan, Not(hired(Zhang) == Tianxuan))) ::: (D) Only Wang was hired by Tianxuan."
    ]
  },
  {
    "id": 64,
    "context": "Five graduate students Zhang, Wang, Li, Zhao, and Liu graduated from a linguistics major in a college of arts of a university in 2014, and were hired by one of the three employers, Tianshu, Tianji, and Tianxuan, and at least one of them was hired by each unit.name.Known? (1) Li was hired by Tianshu; (2) Li and Zhao were not hired by the same unit; (3) Liu and Zhao were hired by the same unit; (4) If Zhang was hired by Tianxuan, then Wang Ye Was hired by Tianxuan.",
    "question": "Which of the following must be correct?",
    "answer": "C",
    "options": [
      "A.Zhang and Wang were hired by the same unit.",
      "B.Wang and Liu were hired by different units",
      "C.Tianshu hired at most two people.",
      "D.Tianshu and Tianxuan employ the same number of people."
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Zhang, Wang, Li, Zhao, Liu])\nemployers = EnumSort([Tianshu, Tianji, Tianxuan])\nhired = Function([students] -> [employers])\n\n# Constraints\nhired(Li) == Tianshu ::: Li was hired by Tianshu\nhired(Li) != hired(Zhao) ::: Li and Zhao were not hired by the same unit\nhired(Liu) == hired(Zhao) ::: Liu and Zhao were hired by the same unit\nImplies(hired(Zhang) == Tianxuan, hired(Wang) == Tianxuan) ::: If Zhang was hired by Tianxuan, then Wang was hired by Tianxuan\n\n# Options\nQuestion ::: Which of the following must be correct?\nis_valid(And(hired(Zhang) == hired(Wang))) ::: (A) Zhang and Wang were hired by the same unit.\nis_valid(And(hired(Wang) != hired(Liu))) ::: (B) Wang and Liu were hired by different units.\nis_valid(Count([s:students], hired(s) == Tianshu) <= 2) ::: (C) Tianshu hired at most two people.\nis_valid(Count([s:students], hired(s) == Tianshu) == Count([s:students], hired(s) == Tianxuan)) ::: (D) Tianshu and Tianxuan employ the same number of people."
    ]
  },
  {
    "id": 65,
    "context": "Five graduate students Zhang, Wang, Li, Zhao, and Liu graduated from a linguistics major in a college of arts of a university in 2014, and were hired by one of the three employers, Tianshu, Tianji, and Tianxuan, and at least one of them was hired by each unit.name.Known? (1) Li was hired by Tianshu; (2) Li and Zhao were not hired by the same unit; (3) Liu and Zhao were hired by the same unit; (4) If Zhang was hired by Tianxuan, then Wang Ye Was hired by Tianxuan.",
    "question": "Which of the following is correct, you can determine the employer of each graduate?",
    "answer": "B",
    "options": [
      "A.Li was hired by Tianshu.",
      "B.Zhang was hired by Tianxuan.",
      "C.Zhang was hired by Tianshu.",
      "D.Liu was hired by Tianji."
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Zhang, Wang, Li, Zhao, Liu])\nemployers = EnumSort([Tianshu, Tianji, Tianxuan])\nhired = Function([students] -> [employers])\n\n# Constraints\nhired(Li) == Tianshu ::: Li was hired by Tianshu\nhired(Li) != hired(Zhao) ::: Li and Zhao were not hired by the same unit\nhired(Liu) == hired(Zhao) ::: Liu and Zhao were hired by the same unit\nImplies(hired(Zhang) == Tianxuan, hired(Wang) == Tianxuan) ::: If Zhang was hired by Tianxuan, then Wang was hired by Tianxuan\n\n# Options\nQuestion ::: Which of the following is correct, you can determine the employer of each graduate?\nis_valid(hired(Li) == Tianshu) ::: (A)\nis_valid(hired(Zhang) == Tianxuan) ::: (B)\nis_valid(hired(Zhang) == Tianshu) ::: (C)\nis_valid(hired(Liu) == Tianji) ::: (D)"
    ]
  },
  {
    "id": 66,
    "context": "Five graduate students Zhang, Wang, Li, Zhao, and Liu graduated from a linguistics major in a college of arts of a university in 2014, and were hired by one of the three employers, Tianshu, Tianji, and Tianxuan, and at least one of them was hired by each unit.name.Known? (1) Li was hired by Tianshu; (2) Li and Zhao were not hired by the same unit; (3) Liu and Zhao were hired by the same unit; (4) If Zhang was hired by Tianxuan, then Wang Ye Was hired by Tianxuan.",
    "question": "If Liu was hired by Tianxuan, which of the following must be wrong?",
    "answer": "D",
    "options": [
      "A.Tianxuan hired 3 people.",
      "B.Li's employer only hired him.",
      "C.Wang was hired by Tianxuan.",
      "D.Zhang was hired by Tianxuan."
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Zhang, Wang, Li, Zhao, Liu])\nemployers = EnumSort([Tianshu, Tianji, Tianxuan])\nhired = Function([students] -> [employers])\n\n# Constraints\nhired(Li) == Tianshu ::: Li was hired by Tianshu\nhired(Li) != hired(Zhao) ::: Li and Zhao were not hired by the same unit\nhired(Liu) == hired(Zhao) ::: Liu and Zhao were hired by the same unit\nImplies(hired(Zhang) == Tianxuan, hired(Wang) == Tianxuan) ::: If Zhang was hired by Tianxuan, then Wang was hired by Tianxuan\n\n# Options\nQuestion ::: If Liu was hired by Tianxuan, which of the following must be wrong?\nis_unsat(Count([s:students], hired(s) == Tianxuan) == 3) ::: (A) Tianxuan hired 3 people.\nis_unsat(Count([s:students], hired(s) == Tianshu) == 1) ::: (B) Li's employer only hired him.\nis_unsat(hired(Wang) == Tianxuan) ::: (C) Wang was hired by Tianxuan.\nis_unsat(hired(Zhang) == Tianxuan) ::: (D) Zhang was hired by Tianxuan."
    ]
  },
  {
    "id": 67,
    "context": "There are two types of community-organized activities? health care and leisure.The organizer's statistics on all participants found that? the elderly in the community have participated in all health-related activities, and some have participated in all leisure-type activities .",
    "question": "According to this statistic, which of the following must be true?",
    "answer": "C",
    "options": [
      "A.Some activities organized by the community do not involve the elderly in the community.",
      "B.Some elderly people in the community do not participate in any activities organized by the community.",
      "C.Any activity organized by a community will involve the elderly in the community.",
      "D.Middle-aged people in the community also participated in community-organized activities."
    ],
    "raw_logic_programs": [
      "# Declarations\nactivities = EnumSort([health_care, leisure])\nparticipants = EnumSort([elderly, middle_aged, others])\nparticipates = Function([participants, activities] -> [bool])\n\n# Constraints\nForAll([a:activities], Implies(a == health_care, participates(elderly, a))) ::: The elderly in the community have participated in all health-related activities\nForAll([a:activities], Implies(a == leisure, Exists([p:participants], And(participates(p, a), p == elderly)))) ::: Some elderly have participated in all leisure-type activities\n\n# Options\nQuestion ::: According to this statistic, which of the following must be true?\nis_true(Exists([a:activities], Not(participates(elderly, a)))) ::: (A) Some activities organized by the community do not involve the elderly in the community.\nis_true(Exists([e:elderly], Not(Exists([a:activities], participates(e, a))))) ::: (B) Some elderly people in the community do not participate in any activities organized by the community.\nis_true(ForAll([a:activities], participates(elderly, a))) ::: (C) Any activity organized by a community will involve the elderly in the community.\nis_true(Exists([m:middle_aged], participates(m, a))) ::: (D) Middle-aged people in the community also participated in community-organized activities."
    ]
  },
  {
    "id": 68,
    "context": "A national academic conference held by a society receives nearly 1,000 conference papers each time.In order to ensure the quality of the conference communication papers, the academic conference organizing committee decided to select only 10% of the papers from the conference papers as conference communication papers each time.",
    "question": "The decision of the academic conference organizing committee is most likely based on which of the following assumptions?",
    "answer": "A",
    "options": [
      "A.There is always a certain percentage of paper quality in every conference paper submitted.",
      "B.The number of conference papers received each time in the future will not change significantly.",
      "C.90% of conference papers do not meet the quality of conference papers.",
      "D.The academic conference organizing committee can make accurate judgments on the quality of the paper."
    ],
    "raw_logic_programs": [
      "# Declarations\npapers = EnumSort([paper1, paper2, ..., paper1000])  # Represents the conference papers\nselected = Function([papers] -> [bool])  # Indicates whether a paper is selected as a communication paper\n\n# Constraints\nCount([p:papers], selected(p)) == 100  # Only 10% of the papers (100 out of 1000) are selected\n\n# Options\nQuestion ::: The decision of the academic conference organizing committee is most likely based on which of the following assumptions?\nis_valid(Exists([p:papers], selected(p) == true) ==> (Count([p:papers], quality(p) == high) >= 0.1 * Count([p:papers], true))) ::: (A)\nis_valid(Count([p:papers], true) == 1000) ::: (B)\nis_valid(Count([p:papers], quality(p) == low) >= 900) ::: (C)\nis_valid(ForAll([p:papers], Implies(selected(p), quality(p) == high))) ::: (D)"
    ]
  },
  {
    "id": 69,
    "context": "A blogger declared? 'My analysis of the future trend of housing prices has received more than 1,000 netizens' follow-up posts.I counted them, and 85% of the follow-up posts agree with my opinion.This shows Most people agree with me.'",
    "question": "Which of the following can best question the blogger 's conclusion?",
    "answer": "D",
    "options": [
      "A.Although some people agree with his views, they do not agree with his analysis.",
      "B.The blogger's other articles with higher approval ratings later proved to be wrong.",
      "C.Some of the objections to the post are more fully justified.",
      "D.Most people who follow this blogger's article are their loyal fans."
    ],
    "raw_logic_programs": [
      "# Declarations\nblogger = EnumSort([Blogger])\nposts = EnumSort([FollowUpPost])\nagreement = Function([posts] -> [bool])\n\n# Constraints\nCount([p:posts], agreement(p) == true) >= 1000 * 0.85 ::: 85% of the follow-up posts agree with the blogger's opinion\nCount([p:posts], agreement(p) == false) >= 1000 * 0.15 ::: 15% of the follow-up posts disagree with the blogger's opinion\n\n# Options\nQuestion ::: Which of the following can best question the blogger's conclusion?\nis_valid(Exists([p:posts], And(agreement(p) == true, Not(agreement(p) == true)))) ::: (A)\nis_valid(Exists([p:posts], And(agreement(p) == false, Not(agreement(p) == true)))) ::: (B)\nis_valid(Exists([p:posts], And(agreement(p) == false, Not(agreement(p) == true)))) ::: (C)\nis_valid(Exists([p:posts], And(agreement(p) == true, Not(agreement(p) == true)))) ::: (D)"
    ]
  },
  {
    "id": 70,
    "context": "In judicial trials, the so-called affirmative misjudgment refers to convicting an innocent person as guilty, referred to as misjudgment? negative misjudgment refers to convicting a guilty person as innocent, referred to as misplacement.The fundamental principle of judicial justice is 'to not let a bad person go, not to injustice a good person'.A jurist believes that measuring whether a court implements the principles of judicial justice well in handling cases depends on whether its rate of positive misjudgments is low enough.",
    "question": "Which of the following can most strongly support the views of the above jurists?",
    "answer": "B",
    "options": [
      "A.The accuracy of handling cases in various courts has improved significantly.",
      "B.The negative misjudgment rate of each court is basically the same.",
      "C.Wrong judgment rather than misplacement is a reflection of the 'left' thinking in the judiciary.",
      "D.Most of the losses caused by misplacement are remedyable; the damage caused by the misjudgment to the victim is irreparable."
    ],
    "raw_logic_programs": [
      "# Declarations\njudicial_system = EnumSort([court1, court2, court3, court4, court5])  # Represents different courts\nmisjudgment_types = EnumSort([affirmative_misjudgment, negative_misjudgment])  # Types of misjudgment\nmisjudgment_rate = Function([judicial_system, misjudgment_types] -> [float])  # Rate of misjudgment for each court\n\n# Constraints\nForAll([c:judicial_system], And(misjudgment_rate(c, affirmative_misjudgment) >= 0, misjudgment_rate(c, negative_misjudgment) >= 0))  # Rates must be non-negative\nForAll([c:judicial_system], Implies(misjudgment_rate(c, affirmative_misjudgment) < threshold, True))  # There exists a threshold for acceptable misjudgment rates\n\n# Options\nQuestion ::: Which of the following can most strongly support the views of the above jurists?\nis_strong_support(misjudgment_rate(court1, affirmative_misjudgment) < threshold) ::: (A) The accuracy of handling cases in various courts has improved significantly.\nis_strong_support(ForAll([c:judicial_system], misjudgment_rate(c, negative_misjudgment) == constant_value)) ::: (B) The negative misjudgment rate of each court is basically the same.\nis_strong_support(Exists([c:judicial_system], misjudgment_rate(c, affirmative_misjudgment) > threshold)) ::: (C) Wrong judgment rather than misplacement is a reflection of the 'left' thinking in the judiciary.\nis_strong_support(Exists([c:judicial_system], misjudgment_rate(c, affirmative_misjudgment) > threshold)) ::: (D) Most of the losses caused by misplacement are remedyable; the damage caused by the misjudgment to the victim is irreparable."
    ]
  },
  {
    "id": 71,
    "context": "As long as there are scammers in this society and some people have greed in their hearts, then someone must be cheated.So if society progresses so that no one is deceived, then people in that society must have universally eliminated greed.",
    "question": "Which of the following best supports the above argument?",
    "answer": "D",
    "options": [
      "A.The greater the greed, the easier it is to be deceived.",
      "B.The society has improved, and the scammers will no longer exist.",
      "C.With the progress of society, the quality of people will generally improve, and greed will gradually be eliminated.",
      "D.No matter in what society, scammers always exist."
    ],
    "raw_logic_programs": [
      "# Declarations\nsociety = EnumSort([scammers, honest_people])\ngreed = EnumSort([exists, eliminated])\ndeception = Function([society] -> [bool])\nprogress = Function([society] -> [bool])\n\n# Constraints\nImplies(And(exists(society, scammers), exists(society, greed)), exists(society, deception)) ::: As long as there are scammers in this society and some people have greed in their hearts, then someone must be cheated.\nImplies(progress(society), And(Not(exists(society, deception)), Not(exists(society, greed)))) ::: If society progresses so that no one is deceived, then people in that society must have universally eliminated greed.\n\n# Options\nQuestion ::: Which of the following best supports the above argument?\nis_support(Implies(greed(society), deception(society))) ::: (A) The greater the greed, the easier it is to be deceived.\nis_support(progress(society) == Not(exists(society, scammers))) ::: (B) The society has improved, and the scammers will no longer exist.\nis_support(And(progress(society), Not(exists(society, greed)))) ::: (C) With the progress of society, the quality of people will generally improve, and greed will gradually be eliminated.\nis_support(Not(exists(society, scammers))) ::: (D) No matter in what society, scammers always exist."
    ]
  },
  {
    "id": 72,
    "context": "After multiple rounds of elimination, four players A.B, C and D compete for the final ranking.The ranking does not have a parallel ranking.Analysts predict? I, the first place is either A or B; II.If C Not the first, Ding is not the first; III, A is not the first.",
    "question": "If only one sentence of the analyst 's prediction is correct, who is the first?",
    "answer": "D",
    "options": [
      "A.C",
      "B.B",
      "C.Can't push",
      "D.Ding"
    ],
    "raw_logic_programs": [
      "# Declarations\nplayers = EnumSort([A, B, C, D])\nfirst_place = Function([] -> [players])\n\n# Constraints\nOr(first_place() == A, first_place() == B) ::: I. The first place is either A or B.\nImplies(first_place() != C, first_place() != D) ::: II. If C is not the first, D is not the first.\nfirst_place() != A ::: III. A is not the first.\n\n# Options\nQuestion ::: If only one sentence of the analyst's prediction is correct, who is the first?\nis_valid(first_place() == C) ::: (A)\nis_valid(first_place() == B) ::: (B)\nis_valid(first_place() == Can't_push) ::: (C)\nis_valid(first_place() == D) ::: (D)"
    ]
  },
  {
    "id": 73,
    "context": "It is wrong to say that foods with a high content of refined sugar will not cause acquired diabetes, because foods with a high content of refined sugar will cause obesity, and obesity is an important cause of acquired diabetes.",
    "question": "Which of the following is most similar to the above argument?",
    "answer": "D",
    "options": [
      "A.It is wrong to say that Alexander is a Plato student.In fact, Alexander was a student of Aristotle, and Aristotle was a student of Plato.",
      "B.It is true that excessive fertilization is the main cause of lawn diseases and insect pests.Because excessive fertilization can cause the grass to grow madly, and the grass that grows madly has little resistance to diseases and insect pests.",
      "C.It is wrong for people who frequently participate in strenuous exercise to cause sudden death.Because the violent cause is cardiovascular and cerebrovascular diseases, and vigorous exercise does not necessarily cause cardiovascular and cerebrovascular diseases.",
      "D.It is wrong to say that inferior gasoline will not cause abnormal fuel consumption.Because inferior gasoline can cause very normal aging of engine valves, and abnormal aging of motive valves can cause abnormal fuel consumption."
    ],
    "raw_logic_programs": [
      "# Declarations\narguments = EnumSort([argument1, argument2, argument3, argument4])\ncauses = EnumSort([diabetes, obesity, lawn_diseases, insect_pests, sudden_death, cardiovascular_diseases, abnormal_fuel_consumption, engine_valves])\nrelationships = Function([arguments] -> [causes])\n\n# Constraints\nAnd(relationships(argument1) == diabetes, relationships(argument1) == obesity) ::: Foods with a high content of refined sugar will cause obesity, and obesity is an important cause of acquired diabetes.\nAnd(relationships(argument2) == lawn_diseases, relationships(argument2) == insect_pests) ::: Excessive fertilization can cause the grass to grow madly, and the grass that grows madly has little resistance to diseases and insect pests.\nAnd(relationships(argument3) == sudden_death, relationships(argument3) == cardiovascular_diseases) ::: The violent cause is cardiovascular and cerebrovascular diseases, and vigorous exercise does not necessarily cause cardiovascular and cerebrovascular diseases.\nAnd(relationships(argument4) == abnormal_fuel_consumption, relationships(argument4) == engine_valves) ::: Inferior gasoline can cause very normal aging of engine valves, and abnormal aging of motive valves can cause abnormal fuel consumption.\n\n# Options\nQuestion ::: Which of the following is most similar to the above argument?\nis_similar(And(relationships(argument1) == diabetes, relationships(argument1) == obesity)) ::: (A)\nis_similar(And(relationships(argument2) == lawn_diseases, relationships(argument2) == insect_pests)) ::: (B)\nis_similar(And(relationships(argument3) == sudden_death, relationships(argument3) == cardiovascular_diseases)) ::: (C)\nis_similar(And(relationships(argument4) == abnormal_fuel_consumption, relationships(argument4) == engine_valves)) ::: (D)"
    ]
  },
  {
    "id": 74,
    "context": "In the football player transfer market this summer, only those who perform well during the World Cup and also perform well in clubs can be favored and chased by many clubs.",
    "question": "If the above statement is true, which of the following cannot be true?",
    "answer": "C",
    "options": [
      "A.Veteran Klose broke Ronaldo's 15-ball World Cup goal record with 16 goals at the World Cup, but still did not win the favor of many clubs.",
      "B.J.Ronaldo won the World Cup Golden Boots.At the same time, with the excellent performance of the club, he successfully transferred to Real Madrid in the case of many clubs chasing.",
      "C.Royce failed to represent the German team in the Brazil World Cup due to injury, but he has an excellent performance in the Bundesliga club field, and has been favored by top giants such as Real Madrid and Barcelona in the transfer market.",
      "D.Dortmund top scorer Lewandowski successfully transferred to Bayern Munich."
    ],
    "raw_logic_programs": [
      "# Declarations\nplayers = EnumSort([Klose, Ronaldo, Royce, Lewandowski])\nperformance = EnumSort([world_cup, club])\nfavor = Function([players] -> [bool])\n\n# Constraints\nForAll([p:players], Implies(And(performance(p, world_cup) == good, performance(p, club) == good), favor(p) == true)) ::: Only those who perform well during the World Cup and also perform well in clubs can be favored and chased by many clubs.\n\n# Options\nQuestion ::: If the above statement is true, which of the following cannot be true?\nis_unsat(And(performance(Klose, world_cup) == good, performance(Klose, club) == good, favor(Klose) == false)) ::: (A)\nis_sat(And(performance(Ronaldo, world_cup) == good, performance(Ronaldo, club) == good, favor(Ronaldo) == true)) ::: (B)\nis_sat(And(performance(Royce, world_cup) == bad, performance(Royce, club) == good, favor(Royce) == true)) ::: (C)\nis_sat(And(performance(Lewandowski, world_cup) == good, performance(Lewandowski, club) == good, favor(Lewandowski) == true)) ::: (D)"
    ]
  },
  {
    "id": 75,
    "context": "In recent years, overseas study markets in Europe and the United States have continued to heat up, and more and more Chinese have sent their children out.At the same time, part of the returned scholars were caught in a job-hunting dilemma and became a 'sea waiter' family.An authoritative person pointed out? 'As a job seeker with an overseas degree, if you have real knowledge and basic social skills, and can be accurately positioned in the career selection process, then you cannot become a' sea wait.'Daejeon is The returnee who has obtained a master's degree in the UK has not yet found a job.",
    "question": "Which of the following conclusions can be made based on the above discussion?",
    "answer": "B",
    "options": [
      "A.Datian has real talent and basic social skills, but the positioning is not accurate.",
      "B.Datian either does not have real talent, or lacks basic social skills, or fails to accurately locate in the career selection process.",
      "C.Datian does not possess real knowledge and basic social skills, but the positioning is accurate.",
      "D.Datian does not have real knowledge and basic social skills, and does not have an accurate positioning."
    ],
    "raw_logic_programs": [
      "# Declarations\nindividuals = EnumSort([Datian])\nskills = EnumSort([real_knowledge, basic_social_skills, accurate_positioning])\nhas_skill = Function([individuals, skills] -> [bool])\njob_status = Function([individuals] -> [bool])  # true if employed, false if not\n\n# Constraints\nhas_skill(Datian, real_knowledge) == false ::: Datian does not possess real knowledge\nhas_skill(Datian, basic_social_skills) == false ::: Datian does not possess basic social skills\nhas_skill(Datian, accurate_positioning) == false ::: Datian does not have accurate positioning\njob_status(Datian) == false ::: Datian has not yet found a job\n\n# Options\nQuestion ::: Which of the following conclusions can be made based on the above discussion?\nis_valid(And(has_skill(Datian, real_knowledge) == true, has_skill(Datian, basic_social_skills) == true, has_skill(Datian, accurate_positioning) == false)) ::: (A)\nis_valid(Or(has_skill(Datian, real_knowledge) == false, has_skill(Datian, basic_social_skills) == false, has_skill(Datian, accurate_positioning) == false)) ::: (B)\nis_valid(And(has_skill(Datian, real_knowledge) == false, has_skill(Datian, basic_social_skills) == false, has_skill(Datian, accurate_positioning) == true)) ::: (C)\nis_valid(And(has_skill(Datian, real_knowledge) == false, has_skill(Datian, basic_social_skills) == false, has_skill(Datian, accurate_positioning) == false)) ::: (D)"
    ]
  },
  {
    "id": 76,
    "context": "Some college teachers have overseas doctorates, so some overseas doctors have a high level.",
    "question": "Which of the following can guarantee the correctness of the above statement?",
    "answer": "A",
    "options": [
      "A.All college teachers have a very high level.",
      "B.Not all college teachers have a high level.",
      "C.Some college teachers have a very high level.",
      "D.All high-level teachers have overseas doctorate degrees."
    ],
    "raw_logic_programs": [
      "To formulate the given problem as a logic program, we will follow the structure of Declarations, Constraints, and Options.\n\n### Problem:\nSome college teachers have overseas doctorates, so some overseas doctors have a high level.\n\n### Question:\nWhich of the following can guarantee the correctness of the above statement?\n\n### Choices:\n(A) All college teachers have a very high level.  \n(B) Not all college teachers have a high level.  \n(C) Some college teachers have a very high level.  \n(D) All high-level teachers have overseas doctorate degrees.  \n\n### Logic Program\n\n#### Declarations\n``` \nteachers = EnumSort([T1, T2, T3, ..., Tn])  // Represents college teachers\ndoctors = EnumSort([D1, D2, D3, ..., Dm])   // Represents overseas doctors\nhas_overseas_doctorate = Function([teachers] -> [bool])  // Indicates if a teacher has an overseas doctorate\nhas_high_level = Function([teachers] -> [bool])  // Indicates if a teacher has a high level\n```\n\n#### Constraints\n```\nExists([t:teachers], has_overseas_doctorate(t) == true)  // Some college teachers have overseas doctorates\nImplies(Exists([t:teachers], has_overseas_doctorate(t) == true), Exists([d:doctors], has_high_level(d) == true))  // If some teachers have overseas doctorates, then some overseas doctors have a high level\n```\n\n#### Options\n```\nis_valid(ForAll([t:teachers], has_high_level(t) == true))  // (A) All college teachers have a very high level.\nis_valid(Not(ForAll([t:teachers], has_high_level(t) == true)))  // (B) Not all college teachers have a high level.\nis_valid(Exists([t:teachers], has_high_level(t) == true))  // (C) Some college teachers have a very high level.\nis_valid(ForAll([t:teachers], Implies(has_high_level(t), has_overseas_doctorate(t))))  // (D) All high-level teachers have overseas doctorate degrees.\n```\n\n### Summary\nThis logic program captures the relationships and conditions described in the problem statement. The declarations define the entities involved, the constraints express the relationships between them, and the options represent the choices that can guarantee the correctness of the statement regarding college teachers and overseas doctors."
    ]
  },
  {
    "id": 77,
    "context": "There are only two secondary schools in Nankou Township.The results of the first middle school students are generally better than those of the second middle school.Since Li Ming from Nankou Town has the best grades in the first year of college, he must have graduated from Nankou Town No.1 Middle School.",
    "question": "Which of the following is most similar to the question-making argument?",
    "answer": "D",
    "options": [
      "A.If the parent has a good education for the child, the child's performance in the school is generally better.Because Wang Zheng's performance in the school is not good, his parents must be poorly educated.",
      "B.If the child recites the poem for 1 hour every day, it will be exported into chapters.Guo Na recites the poems for less than an hour every day, so she cannot export to chapters.",
      "C.If people know how to make money, they can generally accumulate more wealth.Therefore, Mr.Peng's wealth comes from his resourcefulness.",
      "D.Northerners are usually taller than southerners.Marin is the highest in the class, so he must be a northerner."
    ],
    "raw_logic_programs": [
      "To formulate the problem as a logic program, we will follow the structure of Declarations, Constraints, and Options as specified.\n\n### Problem:\nThere are only two secondary schools in Nankou Township. The results of the first middle school students are generally better than those of the second middle school. Since Li Ming from Nankou Town has the best grades in the first year of college, he must have graduated from Nankou Town No.1 Middle School.\n\n### Question:\nWhich of the following is most similar to the question-making argument?\n\n### Choices:\n(A) If the parent has a good education for the child, the child's performance in the school is generally better. Because Wang Zheng's performance in the school is not good, his parents must be poorly educated.  \n(B) If the child recites the poem for 1 hour every day, it will be exported into chapters. Guo Na recites the poems for less than an hour every day, so she cannot export to chapters.  \n(C) If people know how to make money, they can generally accumulate more wealth. Therefore, Mr. Peng's wealth comes from his resourcefulness.  \n(D) Northerners are usually taller than southerners. Marin is the highest in the class, so he must be a northerner.  \n\n### Logic Program\n\n#### Declarations\n``` \nschools = EnumSort([Nankou_No1, Nankou_No2])\nstudents = EnumSort([Li_Ming, Wang_Zheng, Guo_Na, Mr_Peng, Marin])\nperformance = Function([students] -> [int])  // Represents the performance of each student\ngraduated_from = Function([students] -> [schools])  // Represents which school each student graduated from\n```\n\n#### Constraints\n```\nperformance(Li_Ming) > performance(Wang_Zheng) ::: The results of the first middle school students are generally better than those of the second middle school\ngraduated_from(Li_Ming) == Nankou_No1 ::: Li Ming must have graduated from Nankou Town No.1 Middle School\n```\n\n#### Options\n```\nis_similar(Implies(And(educated(Parent), performance(Child) > threshold), performance(Child) > threshold)) ::: (A)\nis_similar(Implies(recitation_time(Child) >= 1, can_export(Child))) ::: (B)\nis_similar(Implies(knowledge_of_money_making, wealth_accumulation)) ::: (C)\nis_similar(Implies(taller(Northerners), is_northerner(Marin))) ::: (D)\n```\n\n### Explanation\n- **Declarations**: We declare the schools and students involved in the argument, along with functions to represent their performance and which school they graduated from.\n- **Constraints**: We establish the relationship between the performance of students and the schools they graduated from, specifically noting that Li Ming has the best grades and must have graduated from the first school.\n- **Options**: We express the choices in terms of logical implications that reflect the reasoning structure of the original argument about Li Ming's performance and school.\n\nThis structure allows us to analyze the logical relationships and determine which of the choices is most similar to the argument presented in the problem."
    ]
  },
  {
    "id": 78,
    "context": "There are more and more Chinese computer software that can correct vocabulary, grammar and punctuation are used incorrectly.Even if journalists do not have a good Chinese language foundation, they will not hinder writing.Therefore, schools that train journalists do not need to pay attention to the improvement of students 'Chinese ability, but should pay attention to the training of journalists' other qualities.",
    "question": "Which of the following, if true, would most weaken the above arguments and suggestions?",
    "answer": "A",
    "options": [
      "A.Avoiding errors in vocabulary, grammar, and punctuation does not necessarily ensure the language quality of the manuscript.",
      "B.Journalism courses have always emphasized and required students to be proficient in using computers and familiar with various software.",
      "C.The more effective the Chinese software is, the more likely it is to be pirated.",
      "D.Opening a new course at the School of Journalism requires a complicated process of argumentation and approval."
    ],
    "raw_logic_programs": [
      "# Declarations\narguments = EnumSort([journalism_training, software_effectiveness, language_quality, student_skills])\nclaims = EnumSort([improvement_not_needed, focus_on_other_qualities])\nweaken = Function([arguments] -> [bool])\n\n# Constraints\nAnd(weaken(journalism_training), weaken(software_effectiveness)) ::: The argument suggests that schools do not need to focus on improving students' Chinese ability.\nweaken(language_quality) ::: The argument implies that software can compensate for poor language skills.\nweaken(student_skills) ::: The argument suggests that other qualities are more important than language skills.\n\n# Options\nQuestion ::: Which of the following, if true, would most weaken the above arguments and suggestions?\nis_weakened(weaken(A)) ::: (A)\nis_weakened(weaken(B)) ::: (B)\nis_weakened(weaken(C)) ::: (C)\nis_weakened(weaken(D)) ::: (D)"
    ]
  },
  {
    "id": 79,
    "context": "It is generally believed that left-handers are more prone to operating accidents than right-handers.This is a misunderstanding.In fact, most housework accidents range from fires, burns, and small finger cuts to right-handers.",
    "question": "Which of the following most appropriately summarizes the loopholes in the above argument?",
    "answer": "D",
    "options": [
      "A.Make a substantive distinction between two types of phenomena that have no substantive difference.",
      "B.Make an analogy between two types of objects that are not comparable.",
      "C.The proportion of housework accidents in the whole operation accidents is not considered.",
      "D.Not taking into account the proportion of left-handers among all people."
    ],
    "raw_logic_programs": [
      "# Declarations\naccidents = EnumSort([fires, burns, small_finger_cuts, operating_accidents])\nhandedness = EnumSort([left_handed, right_handed])\nprone_to_accidents = Function([handedness] -> [bool])\n\n# Constraints\nprone_to_accidents(left_handed) == true ::: left-handers are believed to be more prone to operating accidents\nprone_to_accidents(right_handed) == false ::: right-handers are not believed to be more prone to operating accidents\nCount([a:accidents], And(a == fires, a == burns, a == small_finger_cuts)) > Count([a:accidents], a == operating_accidents) ::: most housework accidents range from fires, burns, and small finger cuts to operating accidents\n\n# Options\nQuestion ::: Which of the following most appropriately summarizes the loopholes in the above argument?\nis_valid(Count([a:accidents], a == operating_accidents) < Count([a:accidents], a == fires) + Count([a:accidents], a == burns) + Count([a:accidents], a == small_finger_cuts)) ::: (A)\nis_valid(Exists([a1:accidents, a2:accidents], a1 != a2, And(a1 == operating_accidents, a2 != operating_accidents))) ::: (B)\nis_valid(Not(Count([a:accidents], a == operating_accidents) / Count([a:accidents], a == fires) + Count([a:accidents], a == burns) + Count([a:accidents], a == small_finger_cuts) < 1)) ::: (C)\nis_valid(Not(Count([h:handedness], h == left_handed) / Count([h:handedness], h == right_handed) < 1)) ::: (D)"
    ]
  },
  {
    "id": 80,
    "context": "The raw material of cement is very cheap, like limestone and mud everywhere can be used as raw material of cement.However, the price of cement will be influenced by the price of oil, because it takes a lot of energy to convert raw materials from Pakistan to cement in high-temperature furnaces.",
    "question": "Based on the above conclusions, which of the following conclusions is most likely to be drawn?",
    "answer": "B",
    "options": [
      "A.Petroleum is one of the raw materials contained in cement",
      "B.Petroleum is the energy source of some high-temperature furnaces for making cement",
      "C.The price of cement falls as the price of oil rises",
      "D.The higher the price of cement, the higher the price of limestone"
    ],
    "raw_logic_programs": [
      "# Declarations\nraw_materials = EnumSort([limestone, mud])\nenergy_sources = EnumSort([oil])\ncement_price = Function([] -> [float])\noil_price = Function([] -> [float])\n\n# Constraints\nForAll([], cement_price() == 0) ::: The price of cement is influenced by the price of oil\nForAll([], cement_price() < oil_price()) ::: The price of cement is influenced by the price of oil\n\n# Options\nQuestion ::: Based on the above conclusions, which of the following conclusions is most likely to be drawn?\nis_valid(Implies(True, Exists([], And(energy_sources(oil), raw_materials(limestone))))) ::: (A)\nis_valid(Implies(True, Exists([], And(energy_sources(oil), True)))) ::: (B)\nis_valid(Implies(True, Exists([], And(cement_price() < oil_price(), oil_price() > 0)))) ::: (C)\nis_valid(Implies(True, Exists([], And(cement_price() > 0, raw_materials(limestone))))) ::: (D)"
    ]
  },
  {
    "id": 81,
    "context": "Ms.Zheng? Hengyuan 's GDP (gross domestic product) growth rate over the past decade is higher than that of Yiyang, so Hengyuan 's economic prospects are better than Yiyang.Mr.Hu? I disagree with you.Although the GDP growth rate of Hengyuan City is higher than that of the Yiyang market, the GDP of Yiyang City is larger.",
    "question": "Which of the following most accurately summarizes the controversial focus of Ms.Zheng and Mr.Hu?",
    "answer": "D",
    "options": [
      "A.Is the GDP of Yiyang City greater than that of Hengyuan City?",
      "B.Is the GDP growth rate of Hengyuan City really higher than that of Angyang City?",
      "C.A city's GDP has a large value, is the economic outlook necessarily good?",
      "D.A city's GDP growth rate is high, is the economic outlook necessarily good?"
    ],
    "raw_logic_programs": [
      "# Declarations\ncities = EnumSort([Hengyuan, Yiyang])\nmetrics = EnumSort([GDP, GDP_growth_rate])\neconomic_prospects = Function([cities] -> [bool])\n\n# Constraints\neconomic_prospects(Hengyuan) == (GDP_growth_rate(Hengyuan) > GDP_growth_rate(Yiyang)) ::: Hengyuan's GDP growth rate is higher than that of Yiyang\neconomic_prospects(Yiyang) == (GDP(Yiyang) > GDP(Hengyuan)) ::: Yiyang's GDP is larger than Hengyuan's\n\n# Options\nQuestion ::: Which of the following most accurately summarizes the controversial focus of Ms.Zheng and Mr.Hu?\nis_valid(Exists([m:metrics], GDP(Yiyang) > GDP(Hengyuan))) ::: (A)\nis_valid(Exists([m:metrics], GDP_growth_rate(Hengyuan) > GDP_growth_rate(Yiyang))) ::: (B)\nis_valid(Exists([m:metrics], Implies(GDP(Yiyang) > GDP(Hengyuan), economic_prospects(Yiyang)))) ::: (C)\nis_valid(Exists([m:metrics], Implies(GDP_growth_rate(Hengyuan) > GDP_growth_rate(Yiyang), economic_prospects(Hengyuan)))) ::: (D)"
    ]
  },
  {
    "id": 82,
    "context": "Clinical trials have shown that for people who occasionally consume a certain amount of beef jerky, most brands of beef jerky additives do not cause arterial hardening.Therefore, people can eat beef jerky without worrying about health effects.",
    "question": "Which of the following, if true, would most weaken the above argument?",
    "answer": "B",
    "options": [
      "A.Eating large amounts of beef jerky is not conducive to arterial health.",
      "B.Arterial health is not equal to physical health.",
      "C.Meat contains substances harmful to the human body.",
      "D.People who like to eat beef jerky often like to eat other foods that are harmful to arterial health."
    ],
    "raw_logic_programs": [
      "# Declarations\nconsumers = EnumSort([people])\nfoods = EnumSort([beef_jerky])\nhealth_effects = EnumSort([arterial_hardening, physical_health])\nconsumes = Function([consumers] -> [foods])\ncauses = Function([foods, health_effects] -> [bool])\n\n# Constraints\nForAll([c:consumers], Implies(consumes(c) == beef_jerky, Not(causes(beef_jerky, arterial_hardening)))) ::: Most brands of beef jerky additives do not cause arterial hardening for people who occasionally consume beef jerky\nForAll([c:consumers], Implies(consumes(c) == beef_jerky, Not(causes(beef_jerky, physical_health)))) ::: People can eat beef jerky without worrying about health effects\n\n# Options\nQuestion ::: Which of the following, if true, would most weaken the above argument?\nis_weakening(Implies(consumes(c) == beef_jerky, causes(beef_jerky, arterial_hardening))) ::: (A)\nis_weakening(Implies(consumes(c) == beef_jerky, Not(causes(beef_jerky, physical_health)))) ::: (B)\nis_weakening(Implies(consumes(c) == beef_jerky, causes(beef_jerky, physical_health))) ::: (C)\nis_weakening(Implies(consumes(c) == beef_jerky, causes(beef_jerky, arterial_hardening))) ::: (D)"
    ]
  },
  {
    "id": 83,
    "context": "The Peace Foundation decided to suspend funding for S, on the grounds that such funding may be used in part for weapons research.In this regard, the S Institute promises? All the funding of the Peace Foundation will not be used for any weapon-related research.As a result, the Peace Foundation withdrew the above decision and reached a conclusion; as long as the S Institute kept its promise, the above funding of the Peace Foundation would no longer benefit weapons research.",
    "question": "Which of the following most appropriately summarizes the loopholes in the conclusions of the Peace Foundation?",
    "answer": "C",
    "options": [
      "A.Ignore this possibility? S Institute does not keep its promises.",
      "B.Ignore this possibility? S Institute can use weapons from other sources for weapons research.",
      "C.Ignored this possibility? the funding of the Peace Foundation enabled S Research to have all the ability to switch other funds to weapons research.",
      "D.Ignore this possibility? weapons research does not necessarily endanger peace."
    ],
    "raw_logic_programs": [
      "# Declarations\nfoundation = EnumSort([Peace_Foundation])\ninstitutes = EnumSort([S_Institute])\nfunding = Function([foundation, institutes] -> [bool])\nweapons_research = Function([foundation, institutes] -> [bool])\n\n# Constraints\nfunding(Peace_Foundation, S_Institute) == true ::: The Peace Foundation decided to fund the S Institute\nweapons_research(Peace_Foundation, S_Institute) == false ::: The S Institute promises that the funding will not be used for weapons research\nweapons_research(Peace_Foundation, S_Institute) == true ::: The Peace Foundation withdrew the decision if the S Institute kept its promise\n\n# Options\nQuestion ::: Which of the following most appropriately summarizes the loopholes in the conclusions of the Peace Foundation?\nis_loophole(Or(Not(funding(Peace_Foundation, S_Institute)), Not(weapons_research(Peace_Foundation, S_Institute)))) ::: (A) Ignore this possibility? S Institute does not keep its promises.\nis_loophole(Or(Not(funding(Peace_Foundation, S_Institute)), weapons_research(Peace_Foundation, S_Institute))) ::: (B) Ignore this possibility? S Institute can use weapons from other sources for weapons research.\nis_loophole(Or(funding(Peace_Foundation, S_Institute), weapons_research(Peace_Foundation, S_Institute))) ::: (C) Ignore this possibility? the funding of the Peace Foundation enabled S Research to have all the ability to switch other funds to weapons research.\nis_loophole(Or(Not(weapons_research(Peace_Foundation, S_Institute)))) ::: (D) Ignore this possibility? weapons research does not necessarily endanger peace."
    ]
  },
  {
    "id": 84,
    "context": "Based on the following questions? Most people think that advertisers do whatever they can to attract customers.But advertisers are not always like this.Recently, in order to expand sales, a family magazine called 'Bay' was renamed 'Inferno', which mainly published violent and pornographic content.As a result, some perennial advertisers from the original 'Bay' magazine refused to renew the contract and turned to other publications.This shows that these advertisers not only consider economic benefits, but also take into account their ethical responsibilities.",
    "question": "If the following items are true, they can weaken the above argument, except",
    "answer": "A",
    "options": [
      "A.The violent and pornographic content published in Purgatory magazine is more moderate in similar magazines.",
      "B.Magazines that publish violent and pornographic content usually sell well, but have low credibility.",
      "C.The above-mentioned advertisers who refused to renew their contracts mainly promoted household goods.",
      "D.The advertising cost of the purgatory magazine after the name change is several times higher than before the name change."
    ],
    "raw_logic_programs": [
      "# Declarations\nadvertisers = EnumSort([Advertiser1, Advertiser2, Advertiser3, Advertiser4, Advertiser5])\nmagazines = EnumSort([Bay, Inferno, Purgatory])\ncontent_types = EnumSort([violent, pornographic, moderate])\ncontracts = Function([advertisers] -> [bool])\nadvertising_cost = Function([magazines] -> [int])\ncredibility = Function([magazines] -> [int])\n\n# Constraints\nForAll([a:advertisers], Implies(contracts(a), Not(contracts(a) == false))) ::: Advertisers consider ethical responsibilities\nForAll([m:magazines], Implies(m == Inferno, Or(content_types == violent, content_types == pornographic))) ::: Inferno publishes violent and pornographic content\nForAll([a:advertisers], Implies(contracts(a) == false, And(contracts(a) == false, Not(contracts(a) == true)))) ::: Advertisers who refuse to renew contracts consider ethical responsibilities\nForAll([m:magazines], Implies(m == Purgatory, content_types == moderate)) ::: Purgatory magazine has more moderate content\n\n# Options\nQuestion ::: If the following items are true, they can weaken the above argument, except\nis_weakening(And(content_types == moderate, contracts(Advertiser1) == false)) ::: (A)\nis_weakening(And(content_types == violent, credibility(Purgatory) < credibility(Inferno))) ::: (B)\nis_weakening(And(contracts(Advertiser2) == false, contracts(Advertiser3) == true)) ::: (C)\nis_weakening(And(advertising_cost(Inferno) > advertising_cost(Bay))) ::: (D)"
    ]
  },
  {
    "id": 85,
    "context": "Based on the following questions? Most people think that advertisers do whatever they can to attract customers.But advertisers are not always like this.Recently, in order to expand sales, a family magazine called 'Bay' was renamed 'Inferno', which mainly published violent and pornographic content.As a result, some perennial advertisers from the original 'Bay' magazine refused to renew the contract and turned to other publications.This shows that these advertisers not only consider economic benefits, but also take into account their ethical responsibilities.",
    "question": "If the following item is true, can the argument be strengthened most?",
    "answer": "D",
    "options": [
      "A.The cost and selling price of 'Inferno' are lower than that of 'Harbour'.",
      "B.The above advertisers who refused to renew their contracts have not affected the benefits after switching to other publications.",
      "C.Readers of family magazines are generally not interested in violent and pornographic content.",
      "D.Some clients who advertise in other family magazines and so on turn to 'Inferno' magazine."
    ],
    "raw_logic_programs": [
      "# Declarations\nadvertisers = EnumSort([Advertiser1, Advertiser2, Advertiser3, Advertiser4, Advertiser5])\nmagazines = EnumSort([Bay, Inferno, Harbour])\ncontent_types = EnumSort([family_friendly, violent, pornographic])\ncontracts = Function([advertisers] -> [magazines])\ncontent = Function([magazines] -> [content_types])\neconomic_benefit = Function([advertisers] -> [bool])\nethical_responsibility = Function([advertisers] -> [bool])\n\n# Constraints\nForAll([a:advertisers], Implies(contracts(a) == Bay, content(Bay) == family_friendly)) ::: Advertisers associated with Bay magazine expect family-friendly content\nForAll([a:advertisers], Implies(contracts(a) == Inferno, content(Inferno) == violent)) ::: Advertisers associated with Inferno magazine expect violent content\nForAll([a:advertisers], Implies(contracts(a) == Bay, Not(contracts(a) == Inferno))) ::: Advertisers cannot be associated with both Bay and Inferno\nForAll([a:advertisers], economic_benefit(a) == true) ::: Advertisers consider economic benefits\nForAll([a:advertisers], ethical_responsibility(a) == true) ::: Advertisers consider ethical responsibilities\n\n# Options\nQuestion ::: If the following item is true, can the argument be strengthened most?\nis_strengthened(ForAll([a:advertisers], economic_benefit(a) == false)) ::: (A) The cost and selling price of 'Inferno' are lower than that of 'Harbour'.\nis_strengthened(ForAll([a:advertisers], Not(economic_benefit(a))) ::: (B) The above advertisers who refused to renew their contracts have not affected the benefits after switching to other publications.\nis_strengthened(ForAll([a:advertisers], Not(ethical_responsibility(a)))) ::: (C) Readers of family magazines are generally not interested in violent and pornographic content.\nis_strengthened(ForAll([a:advertisers], contracts(a) == Inferno)) ::: (D) Some clients who advertise in other family magazines and so on turn to 'Inferno' magazine."
    ]
  },
  {
    "id": 86,
    "context": "The area of ​​the equatorial rainforest in country H decreases at an alarming rate every year, which has attracted global attention.However, data from satellite photos show that the reduction in rainforest area in country H last year was significantly lower than in previous years.Last year, the government of Country H spent millions of dollars to stop deforestation and forest fires.The government of country H claimed that the data from the satellite photos indicated that the efforts of the government to protect the equatorial rainforest had achieved remarkable results.",
    "question": "Which of the following, if true, would most weaken the above conclusions of the government of Country H?",
    "answer": "C",
    "options": [
      "A.Last year, H 's financial investment to protect the equatorial rainforest was significantly lower than in previous years.",
      "B.The area of ​​the equatorial rainforest in country G, which is adjacent to country H, has not decreased.",
      "C.Last year's dry season in Country H saw unusually large and continuous rainfall.",
      "D.The cost of rainforest protection in country H only accounts for a small percentage of annual fiscal expenditure."
    ],
    "raw_logic_programs": [
      "# Declarations\ncountry = EnumSort([H, G])\nrainforest_area = Function([country] -> [int])\ninvestment = Function([country] -> [int])\nrainfall = Function([country] -> [int])\ndeforestation_rate = Function([country] -> [int])\n\n# Constraints\nrainforest_area(H) < rainforest_area(G) ::: The area of the equatorial rainforest in country H decreases at an alarming rate every year\ndeforestation_rate(H) < deforestation_rate(H, previous_year) ::: The reduction in rainforest area in country H last year was significantly lower than in previous years\ninvestment(H) > 0 ::: The government of Country H spent millions of dollars to stop deforestation and forest fires\nrainfall(H) > 0 ::: The government of country H claimed that the data from the satellite photos indicated that the efforts of the government to protect the equatorial rainforest had achieved remarkable results\n\n# Options\nQuestion ::: Which of the following, if true, would most weaken the above conclusions of the government of Country H?\nis_weakening(A) ::: (A) Last year, H's financial investment to protect the equatorial rainforest was significantly lower than in previous years.\nis_weakening(B) ::: (B) The area of the equatorial rainforest in country G, which is adjacent to country H, has not decreased.\nis_weakening(C) ::: (C) Last year's dry season in Country H saw unusually large and continuous rainfall.\nis_weakening(D) ::: (D) The cost of rainforest protection in country H only accounts for a small percentage of annual fiscal expenditure."
    ]
  },
  {
    "id": 87,
    "context": "According to a psychological theory, to be happy, one must maintain an intimate relationship with those around him.However, the great painters in the world often spend most of their time in loneliness and have no intimate relationships.Therefore, the above argument of this psychological theory is untenable.",
    "question": "Which of the following is most likely assumed by the above argument?",
    "answer": "D",
    "options": [
      "A.The psychological theory is to reveal the relationship between inner experience and artistic achievement.",
      "B.People with intimate relationships have little time for loneliness.",
      "C.Loneliness is necessary for great painting artists.",
      "D.Artists who have achieved great achievements cannot be unhappy."
    ],
    "raw_logic_programs": [
      "# Declarations\ntheory = EnumSort([psychological_theory])\npainters = EnumSort([great_painters])\nrelationships = EnumSort([intimate_relationships])\nhappiness = EnumSort([happy, unhappy])\nmaintain = Function([theory, relationships] -> [bool])\nspend_time = Function([painters] -> [bool])\nintimate = Function([relationships] -> [bool])\nachievements = EnumSort([artistic_achievement])\n\n# Constraints\nImplies(maintain(theory, relationships), happiness == happy) ::: To be happy, one must maintain an intimate relationship with those around him\nForAll([p:painters], Implies(spend_time(p), Not(intimate(relationships)))) ::: Great painters often spend most of their time in loneliness and have no intimate relationships\nNot(Implies(maintain(theory, relationships), happiness == happy)) ::: The argument concludes that the psychological theory is untenable\n\n# Options\nQuestion ::: Which of the following is most likely assumed by the above argument?\nis_assumed(Implies(spend_time(painters), happiness == unhappy)) ::: (A) The psychological theory is to reveal the relationship between inner experience and artistic achievement.\nis_assumed(Implies(intimate(relationships), Not(spend_time(painters)))) ::: (B) People with intimate relationships have little time for loneliness.\nis_assumed(Implies(spend_time(painters), happiness == unhappy)) ::: (C) Loneliness is necessary for great painting artists.\nis_assumed(Implies(achievements, happiness == happy)) ::: (D) Artists who have achieved great achievements cannot be unhappy."
    ]
  },
  {
    "id": 88,
    "context": "Xiao Chen? At present, part of the orbit of Comet 1996D3 is far from the sun, but recently it can be found to emit flickering light through the solar telescope.In the past, people never observed such flashes of comets far away from the sun, so this flicker must be an unusual scene.Xiao Wang? Normally people don't observe comets far away from the sun.The 1996D3 comet flicker light discovered this time was obtained by continuous and careful tracking observation.",
    "question": "Which of the following most accurately summarizes the method Xiao Wang used to refute Xiao Chen's views?",
    "answer": "B",
    "options": [
      "A.Point out that the key concepts used by Xiao Chen are ambiguous.",
      "B.pointed out that Xiao Chen's argument is clearly lacking in persuasion.",
      "C.pointed out that Xiao Chen's arguments contradict themselves.",
      "D.Disagree with Xiao Chen's conclusion, and put forward another explanation for Xiao Chen's argument.E.Agree with Xiao Chen's conclusion, but put forward another explanation for Xiao Chen's argument."
    ],
    "raw_logic_programs": [
      "# Declarations\nviews = EnumSort([Xiao_Chen, Xiao_Wang])\nmethods = EnumSort([point_out_ambiguity, lack_of_persuasion, contradiction, disagreement, agreement])\nrefutation_method = Function([views] -> [methods])\n\n# Constraints\nrefutation_method(Xiao_Wang) == point_out_ambiguity ::: Xiao Wang points out that the key concepts used by Xiao Chen are ambiguous.\nrefutation_method(Xiao_Wang) == lack_of_persuasion ::: Xiao Wang pointed out that Xiao Chen's argument is clearly lacking in persuasion.\nrefutation_method(Xiao_Wang) == contradiction ::: Xiao Wang pointed out that Xiao Chen's arguments contradict themselves.\nrefutation_method(Xiao_Wang) == disagreement ::: Xiao Wang disagrees with Xiao Chen's conclusion and puts forward another explanation for Xiao Chen's argument.\nrefutation_method(Xiao_Wang) == agreement ::: Xiao Wang agrees with Xiao Chen's conclusion but puts forward another explanation for Xiao Chen's argument.\n\n# Options\nQuestion ::: Which of the following most accurately summarizes the method Xiao Wang used to refute Xiao Chen's views?\nis_valid(refutation_method(Xiao_Wang) == point_out_ambiguity) ::: (A)\nis_valid(refutation_method(Xiao_Wang) == lack_of_persuasion) ::: (B)\nis_valid(refutation_method(Xiao_Wang) == contradiction) ::: (C)\nis_valid(refutation_method(Xiao_Wang) == disagreement) ::: (D)\nis_valid(refutation_method(Xiao_Wang) == agreement) ::: (E)"
    ]
  },
  {
    "id": 89,
    "context": "Mr.Chen is going to hold a gathering of friends and family.He came forward and invited his father's brother-in-law, his brother-in-law's father, his brother's mother-in-law, his brother-in-law's brother.",
    "question": "How many guests did Mr.Chen come forward to invite?",
    "answer": "D",
    "options": [
      "A.No guest invited",
      "B.1 guest",
      "C.2 guests",
      "D.3 guests"
    ],
    "raw_logic_programs": [
      "# Declarations\nguests = EnumSort([father_brother_in_law, brother_in_law_father, brothers_mother_in_law, brother_in_law_brother])\ninvited = Function([guests] -> [bool])\n\n# Constraints\nForAll([g:guests], invited(g)) ::: Mr. Chen invited each of the guests mentioned\n\n# Options\nQuestion ::: How many guests did Mr. Chen come forward to invite?\nis_valid(Count([g:guests], invited(g)) == 0) ::: (A) No guest invited\nis_valid(Count([g:guests], invited(g)) == 1) ::: (B) 1 guest\nis_valid(Count([g:guests], invited(g)) == 2) ::: (C) 2 guests\nis_valid(Count([g:guests], invited(g)) == 3) ::: (D) 3 guests"
    ]
  },
  {
    "id": 90,
    "context": "Crimes involving the use of firearms are more likely to lead to murder than other types of crimes.However, most crimes involving the use of firearms did not result in homicides.Therefore, there is no need to distinguish the illegal use of firearms as a serious criminal offense in the criminal law from other criminal offenses.",
    "question": "The logic loophole in the above argument is most similar to the following one?",
    "answer": "B",
    "options": [
      "A.Obese people are more likely to suffer from heart disease than people with normal weight.However, obese people make up a very small percentage of our population.Therefore, in our country, there is no need for the medical and health community to emphasize the risk of heart disease.",
      "B.Unchecked sex is more likely to be infected with AIDS than checkpoint.However, among people with unchecked sex, only a small percentage of people are infected with AIDS.Therefore, there is no need to emphasize the harm of unchecked sex in the propaganda of AIDS prevention.",
      "C.The prevailing view is that smoking is more likely to cause lung cancer than not smoking.However, in some countries, the proportion of people with lung cancer who have a history of smoking is not higher than the proportion of the total population who have a history of smoking.Therefore, the above popular opinion is likely to be a prejudice.",
      "D.High-income people are more capable of enjoying life than low-income people.But there are many high-income earners who claim to be unhappy.Therefore, those who pursue a happy life need not pay attention to the level of income."
    ],
    "raw_logic_programs": [
      "# Declarations\ncrimes = EnumSort([firearm_crimes, other_crimes])\noutcomes = EnumSort([murder, non_homicide])\nargument = Function([crimes] -> [outcomes])\n\n# Constraints\nAnd(Implies(argument(firearm_crimes) == murder, Count([o:outcomes], argument(firearm_crimes) == o) > 0)) ::: Crimes involving the use of firearms are more likely to lead to murder than other types of crimes.\nAnd(Implies(argument(firearm_crimes) == non_homicide, Count([o:outcomes], argument(firearm_crimes) == o) > 0)) ::: Most crimes involving the use of firearms did not result in homicides.\nImplies(And(argument(firearm_crimes) == non_homicide, Count([o:outcomes], argument(firearm_crimes) == o) > 0), Not(Implies(argument(firearm_crimes) == murder, argument(other_crimes) == murder))) ::: Therefore, there is no need to distinguish the illegal use of firearms as a serious criminal offense in the criminal law from other criminal offenses.\n\n# Options\nQuestion ::: The logic loophole in the above argument is most similar to the following one?\nis_similar(Implies(argument(obese_people) == heart_disease, Count([o:outcomes], argument(obese_people) == o) > 0)) ::: (A)\nis_similar(Implies(argument(unchecked_sex) == AIDS, Count([o:outcomes], argument(unchecked_sex) == o) > 0)) ::: (B)\nis_similar(Implies(argument(smoking) == lung_cancer, Count([o:outcomes], argument(smoking) == o) > 0)) ::: (C)\nis_similar(Implies(argument(high_income) == happiness, Count([o:outcomes], argument(high_income) == o) > 0)) ::: (D)"
    ]
  },
  {
    "id": 91,
    "context": "Zhang Shan received a higher bonus than Li Si.After learning that Wang Wu's bonus was higher than Miao Xiaoqin, Zhang Shan's bonus was also higher than Miao Xiaoqin.",
    "question": "The following assumptions can make the above inference hold, except",
    "answer": "A",
    "options": [
      "A.Wang Wu's bonus is higher than Li Si's.",
      "B.Li Si's bonus is higher than Miao Xiaoqin's.",
      "C.Li Si's bonus is higher than Wang Wu's.",
      "D.Li Si's bonus is as high as Wang Wu's."
    ],
    "raw_logic_programs": [
      "# Declarations\nbonuses = EnumSort([Zhang_Shan, Li_Si, Wang_Wu, Miao_Xiaoqin])\nhigher_bonus = Function([bonuses, bonuses] -> [bool])\n\n# Constraints\nhigher_bonus(Zhang_Shan, Li_Si) ::: Zhang Shan received a higher bonus than Li Si\nhigher_bonus(Wang_Wu, Miao_Xiaoqin) ::: Wang Wu's bonus was higher than Miao Xiaoqin\nhigher_bonus(Zhang_Shan, Miao_Xiaoqin) ::: Zhang Shan's bonus was also higher than Miao Xiaoqin\n\n# Options\nQuestion ::: The following assumptions can make the above inference hold, except\nis_unsat(higher_bonus(Wang_Wu, Li_Si)) ::: (A)\nis_unsat(higher_bonus(Li_Si, Miao_Xiaoqin)) ::: (B)\nis_unsat(higher_bonus(Li_Si, Wang_Wu)) ::: (C)\nis_unsat(higher_bonus(Li_Si, Wang_Wu)) ::: (D)"
    ]
  },
  {
    "id": 92,
    "context": "A laboratory has three types of robots, A.B, and C.Type A can recognize colors, type B can recognize shapes, and type C can neither recognize colors nor shapes.The laboratory experimented with robots 1 and 2 with red balls, blue balls, red squares, and blue squares, and ordered them to pick up the red balls, but number 1 picked up the red squares, and number 2 picked up the blue balls.",
    "question": "Based on the above experiment, which of the following must be true?",
    "answer": "D",
    "options": [
      "A.Both No.1 and No.2 are type C.",
      "B.Only one of No.1 and No.2 is C type.",
      "C.No.1 is type A and No.2 is type B.",
      "D.No.1 is not Type B and No.2 is not Type A."
    ],
    "raw_logic_programs": [
      "# Declarations\nrobots = EnumSort([Robot1, Robot2])\nrobot_types = EnumSort([TypeA, TypeB, TypeC])\nrecognizes_color = Function([robots] -> [bool])\nrecognizes_shape = Function([robots] -> [bool])\npicked_up = Function([robots] -> [EnumSort([red_ball, blue_ball, red_square, blue_square])])\n\n# Constraints\nAnd(recognizes_color(Robot1), Not(recognizes_shape(Robot1))) ::: Robot1 must be able to recognize colors but not shapes (since it picked up a red square).\nAnd(Not(recognizes_color(Robot2), recognizes_shape(Robot2))) ::: Robot2 must be able to recognize shapes but not colors (since it picked up a blue ball).\nForAll([r:robots], Or(recognizes_color(r), recognizes_shape(r))) ::: Each robot must recognize at least one type of feature (color or shape).\n\n# Options\nQuestion ::: Based on the above experiment, which of the following must be true?\nis_true(And(Not(recognizes_shape(Robot1)), Not(recognizes_color(Robot2)))) ::: (A) Both No.1 and No.2 are type C.\nis_true(Exists([r:robots], And(Not(recognizes_shape(r)), recognizes_color(r)))) ::: (B) Only one of No.1 and No.2 is C type.\nis_true(And(recognizes_color(Robot1), recognizes_shape(Robot2))) ::: (C) No.1 is type A and No.2 is type B.\nis_true(And(Not(recognizes_shape(Robot1)), Not(recognizes_color(Robot2)))) ::: (D) No.1 is not Type B and No.2 is not Type A."
    ]
  },
  {
    "id": 93,
    "context": "Statistics show that in car accidents, the proportion of cars with airbags is higher than that of cars without airbags.Therefore, installing an airbag in a car does not make the car owner safer.",
    "question": "Which of the following most appropriately points out the loophole of the above argument?",
    "answer": "D",
    "options": [
      "A.Assume without explanation? Any car equipped with airbags may experience a car accident.",
      "B.Ignore this possibility? Owners without airbags pay more attention to driving cautiously.",
      "C.Improper assumption? In any car accident, the airbag will automatically open.",
      "D.Improperly equate the possibility of a car accident with the seriousness of the car owner 's injury in the accident."
    ],
    "raw_logic_programs": [
      "# Declarations\naccidents = EnumSort([with_airbags, without_airbags])\nsafety = Function([accidents] -> [bool])\n\n# Constraints\nsafety(with_airbags) == true ::: The presence of airbags is associated with a higher proportion of cars in accidents\nsafety(without_airbags) == false ::: The absence of airbags is associated with a lower proportion of cars in accidents\nImplies(safety(with_airbags), Not(safety(without_airbags))) ::: Installing an airbag does not make the car owner safer\n\n# Options\nQuestion ::: Which of the following most appropriately points out the loophole of the above argument?\nis_loophole(Assume(Exists([a:accidents], safety(a) == true))) ::: (A)\nis_loophole(Ignore(Exists([a:accidents], safety(a) == false))) ::: (B)\nis_loophole(ImproperAssumption(Implies(safety(with_airbags), safety(without_airbags)))) ::: (C)\nis_loophole(ImproperEquate(safety(with_airbags), safety(without_airbags))) ::: (D)"
    ]
  },
  {
    "id": 94,
    "context": "Some good goods are not cheap.Therefore, not all good goods are good goods.'",
    "question": "An analogy with which of the following inferences shows that the above inferences are not true?",
    "answer": "D",
    "options": [
      "A.People in Hunan don't like chili.Therefore, some people who love chili are not Hunanese.",
      "B.Some people are not selfish.Therefore, people are not all selfish.",
      "C.A good motivation does not necessarily have a good effect.Therefore, good effects do not necessarily result from good motivation.",
      "D.Some southerners are not Cantonese.Therefore, not all Cantonese are Southerners."
    ],
    "raw_logic_programs": [
      "# Declarations\ngoods = EnumSort([good_goods, cheap_goods])\ninferences = Function([goods] -> [bool])\n\n# Constraints\nNot(inferences(good_goods) == cheap_goods) ::: Some good goods are not cheap\nNot(All(good_goods)) ::: Therefore, not all good goods are good goods\n\n# Options\nQuestion ::: An analogy with which of the following inferences shows that the above inferences are not true?\nis_invalid(inferences(People_in_Hunan) == chili) ::: (A)\nis_invalid(inferences(Some_people) == selfish) ::: (B)\nis_invalid(inferences(good_motivation) == good_effect) ::: (C)\nis_invalid(inferences(southerners) == Cantonese) ::: (D)"
    ]
  },
  {
    "id": 95,
    "context": "A school classifies students' academic performance into four grades of excellent, good, middle and poor by grade level.In a school year, the top 10% of the total score of each exam is excellent; the latter 30% is poor, and the rest are good and medium.In the previous school year, more students with excellent grades in the second grade were more than those with excellent grades in the first grade.",
    "question": "If the above determination is true, which of the following must be true?",
    "answer": "B",
    "options": [
      "A.Students with poor grades in the second grade are less than those with poor grades in the first grade.",
      "B.There are more students with poor grades in the second grade than those with poor grades in the first grade.",
      "C.There are more students with good grades in the second grade than those with good grades in the first grade.",
      "D.The students with good grades in the second grade are less than those with good grades in the first grade."
    ],
    "raw_logic_programs": [
      "# Declarations\ngrades = EnumSort([excellent, good, middle, poor])\nlevels = EnumSort([first_grade, second_grade])\nstudents = Function([levels] -> [int])\ntotal_students = Function([levels] -> [int])\n\n# Constraints\nForAll([l:levels], students(l) <= total_students(l)) ::: The number of students with a specific grade level cannot exceed the total number of students in that grade level\nstudents(second_grade, excellent) > students(first_grade, excellent) ::: More students with excellent grades in the second grade than in the first grade\n\n# Options\nQuestion ::: If the above determination is true, which of the following must be true?\nis_valid(students(second_grade, poor) < students(first_grade, poor)) ::: (A)\nis_valid(students(second_grade, poor) > students(first_grade, poor)) ::: (B)\nis_valid(students(second_grade, good) > students(first_grade, good)) ::: (C)\nis_valid(students(second_grade, good) < students(first_grade, good)) ::: (D)"
    ]
  },
  {
    "id": 96,
    "context": "There are 90 patients, all suffering from refractory disease T, who have taken the same conventional drugs.These patients were divided into two groups of equal numbers.The first group took W, an experimental drug used to treat T, and the second group took placebo without W.Statistics after 10 years show that 44 deaths occurred in both groups.Therefore, this test drug is ineffective.",
    "question": "Which of the following, if true, would most weaken the above argument?",
    "answer": "A",
    "options": [
      "A.Among the patients who died above, the average year of death of the second group was two years earlier than the first group.",
      "B.Among the patients who died, the average life span of the second group was two years shorter than that of the first group.",
      "C.Among the above living patients, the second group is more severely ill than the first group.",
      "D.Among the above living patients, the second group is older than the first group."
    ],
    "raw_logic_programs": [
      "To formulate the problem as a logic program, we will follow the structure of Declarations, Constraints, and Options as specified.\n\n### Declarations\n```plaintext\npatients = EnumSort([P1, P2, ..., P90])  // Representing 90 patients\ngroups = EnumSort([group1, group2])      // Two groups of patients\ndrugs = EnumSort([W, placebo])            // Two types of treatment\noutcomes = EnumSort([alive, dead])        // Possible outcomes for patients\ntreatment = Function([patients] -> [drugs]) // Function to assign treatment to patients\nresult = Function([patients] -> [outcomes]) // Function to determine outcome of patients\n```\n\n### Constraints\n```plaintext\nCount([p:patients], treatment(p) == W) == 45  // First group took W\nCount([p:patients], treatment(p) == placebo) == 45  // Second group took placebo\nCount([p:patients], result(p) == dead) == 44  // Total deaths in both groups\nCount([p:patients], result(p) == dead && treatment(p) == W) + Count([p:patients], result(p) == dead && treatment(p) == placebo) == 44  // Total deaths accounted for\n```\n\n### Options\n```plaintext\nQuestion ::: Which of the following, if true, would most weaken the above argument?\nis_valid(Exists([p:patients], result(p) == dead && treatment(p) == placebo && average_year_of_death(group2) < average_year_of_death(group1))) ::: (A)\nis_valid(Exists([p:patients], result(p) == dead && treatment(p) == placebo && average_life_span(group2) < average_life_span(group1))) ::: (B)\nis_valid(Exists([p:patients], result(p) == alive && treatment(p) == placebo && severity(group2) > severity(group1))) ::: (C)\nis_valid(Exists([p:patients], result(p) == alive && treatment(p) == placebo && age(group2) > age(group1))) ::: (D)\n```\n\n### Explanation\n- **Declarations**: We declare the patients, groups, drugs, and outcomes. We also define functions to represent the treatment each patient receives and their outcome.\n- **Constraints**: We set up the constraints based on the problem description, ensuring that the number of patients in each group and the outcomes are correctly represented.\n- **Options**: We formulate the options based on the question, where each option represents a statement that could potentially weaken the argument about the ineffectiveness of the drug W. \n\nThis structure allows us to analyze the logical implications of each option in relation to the argument presented in the problem."
    ]
  },
  {
    "id": 97,
    "context": "Kobayashi was refused to enter the deep pool because he did not wear a swimming cap.Kobayashi showed the deep water certificate? According to regulations, I can enter the deep pool.The regulations of the swimming pool are? those who do not wear swimming caps are not allowed to enter the swimming pool; only those with a deep water certificate can enter the deep pool.",
    "question": "Kobayashi is most likely to understand the rules of swimming as?",
    "answer": "C",
    "options": [
      "A.You cannot enter the deep pool unless you have a deep water certificate.",
      "B.Only those who hold a deep water certificate need not wear a swimming cap.",
      "C.If you have a deep water certificate, you can enter the deep pool.",
      "D.Those who are allowed to enter the swimming pool may not be allowed to enter the deep pool."
    ],
    "raw_logic_programs": [
      "# Declarations\nindividuals = EnumSort([Kobayashi])\nrules = EnumSort([wear_cap, deep_water_certificate, enter_deep_pool])\nunderstands = Function([individuals] -> [rules])\n\n# Constraints\nAnd(Not(understands(Kobayashi) == wear_cap), Not(understands(Kobayashi) == enter_deep_pool)) ::: Kobayashi did not wear a swimming cap and was refused entry\nAnd(understands(Kobayashi) == deep_water_certificate) ::: Kobayashi showed the deep water certificate\nImplies(Not(understands(Kobayashi) == wear_cap), Not(understands(Kobayashi) == enter_deep_pool)) ::: Those who do not wear swimming caps are not allowed to enter the swimming pool\nImplies(understands(Kobayashi) == deep_water_certificate, understands(Kobayashi) == enter_deep_pool) ::: Only those with a deep water certificate can enter the deep pool\n\n# Options\nQuestion ::: Kobayashi is most likely to understand the rules of swimming as?\nis_valid(understands(Kobayashi) == wear_cap) ::: (A)\nis_valid(understands(Kobayashi) == deep_water_certificate) ::: (B)\nis_valid(understands(Kobayashi) == enter_deep_pool) ::: (C)\nis_valid(understands(Kobayashi) == Not(understands(Kobayashi) == enter_deep_pool)) ::: (D)"
    ]
  },
  {
    "id": 98,
    "context": "The number of crocodiles in the North Atlantic Ocean has declined sharply, but the number of seals has increased significantly at almost the same time.Some people say that it is the seal that caused the reduction of crocodiles.This argument is difficult to establish because seals rarely feed on crocodiles.",
    "question": "Which of the following, if true, would most weaken the above argument?",
    "answer": "D",
    "options": [
      "A.Seawater pollution causes more damage to crocodiles than seals.",
      "B.Despite the sharp decrease in the number of crocodiles and the increase in the number of seals, there are still fewer seals in the North Atlantic Ocean than crocodiles.",
      "C.Before the number of seals increased, the number of crocodiles in the North Atlantic Ocean decreased.",
      "D.Crocodiles only eat capelin, and capelin is also the main food for seals."
    ],
    "raw_logic_programs": [
      "# Declarations\ncrocodiles = Variable('crocodiles')\nseals = Variable('seals')\npollution = Variable('pollution')\nfood_source = Variable('food_source')\n\n# Constraints\ndecrease_crocodiles = crocodiles < Previous(crocodiles) ::: The number of crocodiles has declined sharply\nincrease_seals = seals > Previous(seals) ::: The number of seals has increased significantly\ncausal_argument = Implies(increase_seals, decrease_crocodiles) ::: Some people say that it is the seal that caused the reduction of crocodiles\nrare_feeding = Not(Feeds(seals, crocodiles)) ::: Seals rarely feed on crocodiles\n\n# Options\nQuestion ::: Which of the following, if true, would most weaken the above argument?\nis_weakening(And(pollution > MoreDamage(crocodiles, seals))) ::: (A)\nis_weakening(And(seals < crocodiles)) ::: (B)\nis_weakening(And(decrease_crocodiles, Not(increase_seals))) ::: (C)\nis_weakening(And(Feeds(crocodiles, capelin), Feeds(seals, capelin))) ::: (D)"
    ]
  },
  {
    "id": 99,
    "context": "No one can make mistakes, and everyone may make serious mistakes.",
    "question": "If the above determination is true, which of the following must be true?",
    "answer": "C",
    "options": [
      "A.Everyone may make mistakes, but some people may not make serious mistakes.",
      "B.Everyone may make mistakes, but all people may not make serious mistakes.",
      "C.Everyone will make mistakes, but some people may not make serious mistakes.",
      "D.Everyone will make mistakes, but all people may not make serious mistakes."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([everyone, no_one])\nmistakes = EnumSort([serious_mistakes, mistakes])\ncan_make = Function([people, mistakes] -> [bool])\n\n# Constraints\nForAll([p:people], can_make(p, mistakes) == true) ::: No one can make mistakes\nForAll([p:people], can_make(p, serious_mistakes) == true) ::: Everyone may make serious mistakes\n\n# Options\nQuestion ::: If the above determination is true, which of the following must be true?\nis_valid(ForAll([p:people], can_make(p, mistakes) == true)) ::: (A)\nis_valid(ForAll([p:people], can_make(p, mistakes) == true) && ForAll([p:people], can_make(p, serious_mistakes) == false)) ::: (B)\nis_valid(ForAll([p:people], can_make(p, mistakes) == true) && ForAll([p:people], can_make(p, serious_mistakes) == true)) ::: (C)\nis_valid(ForAll([p:people], can_make(p, mistakes) == true) && ForAll([p:people], can_make(p, serious_mistakes) == false)) ::: (D)"
    ]
  },
  {
    "id": 100,
    "context": "A company has six general manager assistants F, G, H, I, M and P, and three departments, each of which is in charge of three general manager assistants.Each assistant general manager is in charge of at least one department.The following conditions must be met? (1) There is only one assistant to the general manager in charge of three departments at the same time.(2) F and G are not in charge of the same department.(3) H and I are not in charge of the same department.",
    "question": "Which of the following must be true?",
    "answer": "A",
    "options": [
      "A.Some assistants to the general manager are in charge of the two departments.",
      "B.Any department is in charge of F or G.",
      "C.M and P are in charge of only one department.",
      "D.No department is in charge of F, M and P."
    ],
    "raw_logic_programs": [
      "# Declarations\nassistants = EnumSort([F, G, H, I, M, P])\ndepartments = EnumSort([D1, D2, D3])\nin_charge = Function([assistants] -> [departments])\n\n# Constraints\nForAll([a:assistants], Count([d:departments], in_charge(a) == d) >= 1) ::: each assistant general manager is in charge of at least one department\nCount([a:assistants], Count([d:departments], in_charge(a) == d) == 3) == 1 ::: there is only one assistant to the general manager in charge of three departments at the same time\nin_charge(F) != in_charge(G) ::: F and G are not in charge of the same department\nin_charge(H) != in_charge(I) ::: H and I are not in charge of the same department\n\n# Options\nQuestion ::: Which of the following must be true?\nis_true(Exists([a:assistants], Count([d:departments], in_charge(a) == d) == 2)) ::: (A) Some assistants to the general manager are in charge of the two departments.\nis_true(Exists([d:departments], Or(in_charge(F) == d, in_charge(G) == d))) ::: (B) Any department is in charge of F or G.\nis_true(ForAll([a:assistants], Count([d:departments], in_charge(a) == d) <= 1)) ::: (C) M and P are in charge of only one department.\nis_true(ForAll([d:departments], Not(And(in_charge(F) == d, in_charge(M) == d, in_charge(P) == d)))) ::: (D) No department is in charge of F, M and P."
    ]
  },
  {
    "id": 101,
    "context": "A company has six general manager assistants F, G, H, I, M and P, and three departments, each of which is in charge of three general manager assistants.Each assistant general manager is in charge of at least one department.The following conditions must be met? (1) There is only one assistant to the general manager in charge of three departments at the same time.(2) F and G are not in charge of the same department.(3) H and I are not in charge of the same department.",
    "question": "If F and M are not in charge of the same department, which of the following must be true?",
    "answer": "C",
    "options": [
      "A.F and H are in charge of the same department.",
      "B.F and I are in charge of the same department.",
      "C.I and P are in charge of the same department.",
      "D.M and G are in charge of the same department."
    ],
    "raw_logic_programs": [
      "# Declarations\nassistants = EnumSort([F, G, H, I, M, P])\ndepartments = EnumSort([D1, D2, D3])\nin_charge = Function([assistants] -> [departments])\n\n# Constraints\nForAll([a:assistants], Exists([d:departments], in_charge(a) == d)) ::: each assistant general manager is in charge of at least one department\nCount([a:assistants], in_charge(a) == d) <= 1 ::: there is only one assistant to the general manager in charge of three departments at the same time\nin_charge(F) != in_charge(G) ::: F and G are not in charge of the same department\nin_charge(H) != in_charge(I) ::: H and I are not in charge of the same department\nin_charge(F) != in_charge(M) ::: F and M are not in charge of the same department (given condition)\n\n# Options\nQuestion ::: If F and M are not in charge of the same department, which of the following must be true?\nis_must_be_true(in_charge(F) == in_charge(H)) ::: (A)\nis_must_be_true(in_charge(F) == in_charge(I)) ::: (B)\nis_must_be_true(in_charge(I) == in_charge(P)) ::: (C)\nis_must_be_true(in_charge(M) == in_charge(G)) ::: (D)"
    ]
  },
  {
    "id": 102,
    "context": "Ancient Greek philosophers said that life without reflection is worthless.",
    "question": "Which of the following options is the closest to the meaning of this maxim?",
    "answer": "C",
    "options": [
      "A.Only after introspection can life be of value.",
      "B.To be valuable in life, we must reflect on it from time to time.",
      "C.I'm confused for a lifetime.",
      "D.People should live to understand."
    ],
    "raw_logic_programs": [
      "# Declarations\nmaxim = \"Life without reflection is worthless\"\nmeaning = EnumSort([A, B, C, D])\n\n# Constraints\nis_valid(Implies(meaning == A, \"Only after introspection can life be of value.\")) ::: A\nis_valid(Implies(meaning == B, \"To be valuable in life, we must reflect on it from time to time.\")) ::: B\nis_valid(Implies(meaning == C, \"I'm confused for a lifetime.\")) ::: C\nis_valid(Implies(meaning == D, \"People should live to understand.\")) ::: D\n\n# Options\nQuestion ::: Which of the following options is the closest to the meaning of this maxim?\nis_closest(meaning == A) ::: (A)\nis_closest(meaning == B) ::: (B)\nis_closest(meaning == C) ::: (C)\nis_closest(meaning == D) ::: (D)"
    ]
  },
  {
    "id": 103,
    "context": "People's daily thinking and actions, even if they are extremely small, contain conscious active behaviors and some kind of creativity, and all the behaviors of computers are controlled by pre-programmed programs, so it is impossible for computers to own people The initiative and creativity.",
    "question": "Which of the following supplements will most strongly support the reasoning in the question stem?",
    "answer": "B",
    "options": [
      "A.The computer can have the learning function like a human.",
      "B.Computer programs cannot simulate human initiative and creativity.",
      "C.In the future society, it is difficult to say whether people control computers or control computers.",
      "D.People can compile computer programs that simulate human initiative and creativity."
    ],
    "raw_logic_programs": [
      "# Declarations\nstatements = EnumSort([A, B, C, D])\nsupports = Function([statements] -> [bool])\n\n# Constraints\nsupports(A) == false ::: The computer can have the learning function like a human.\nsupports(B) == true ::: Computer programs cannot simulate human initiative and creativity.\nsupports(C) == false ::: In the future society, it is difficult to say whether people control computers or control computers.\nsupports(D) == false ::: People can compile computer programs that simulate human initiative and creativity.\n\n# Options\nQuestion ::: Which of the following supplements will most strongly support the reasoning in the question stem?\nis_strong_support(supports(A)) ::: (A)\nis_strong_support(supports(B)) ::: (B)\nis_strong_support(supports(C)) ::: (C)\nis_strong_support(supports(D)) ::: (D)"
    ]
  },
  {
    "id": 104,
    "context": "Plants must first bloom before they can produce seeds.There are two types of tarragon-Russian tarragon and French tarragon.They look very similar.Russian tarragon blooms and French tarragon does not bloom, but the leaves of Russian tarragon But there is no unique flavor that makes French tarragon an ideal condiment.",
    "question": "Which of the following conclusions can be deduced from the above discussion?",
    "answer": "C",
    "options": [
      "A.As an ornamental plant, French tarragon is more popular than Russian tarragon.",
      "B.The flower of Russian tarragon may not have fragrance.",
      "C.The plant grown from tarragon seeds is not French tarragon.",
      "D.Apart from Russian tarragon and French tarragon, there are no other types of tarragon."
    ],
    "raw_logic_programs": [
      "# Declarations\ntarragon_types = EnumSort([Russian_tarragon, French_tarragon])\nblooms = Function([tarragon_types] -> [bool])\nproduces_seeds = Function([tarragon_types] -> [bool])\n\n# Constraints\nblooms(Russian_tarragon) == true ::: Russian tarragon blooms\nblooms(French_tarragon) == false ::: French tarragon does not bloom\nForAll([t:tarragon_types], Implies(blooms(t), produces_seeds(t))) ::: Plants must first bloom before they can produce seeds\n\n# Options\nQuestion ::: Which of the following conclusions can be deduced from the above discussion?\nis_deducible(blooms(Russian_tarragon) == false) ::: (A) As an ornamental plant, French tarragon is more popular than Russian tarragon.\nis_deducible(blooms(Russian_tarragon) == true) ::: (B) The flower of Russian tarragon may not have fragrance.\nis_deducible(produces_seeds(French_tarragon) == false) ::: (C) The plant grown from tarragon seeds is not French tarragon.\nis_deducible(Count([t:tarragon_types], true) == 2) ::: (D) Apart from Russian tarragon and French tarragon, there are no other types of tarragon."
    ]
  },
  {
    "id": 105,
    "context": "Some Taiwan independence elements argue that all people under the jurisdiction of the People 's Republic of China are Chinese, and Taiwanese are not under the jurisdiction of the People 's Republic of China.Therefore, Taiwanese are not Chinese.",
    "question": "Which of the following reasoning clearly shows that the above argument is not valid?",
    "answer": "A",
    "options": [
      "A.All successful people have to eat in clothes.I am not a successful person now, so I do n't have to eat in clothes.",
      "B.Commodities have use value, and air certainly has use value, so air is of course a commodity.",
      "C.All technical backbones study hard.Xiao Zhang is a technical backbone.Therefore, Xiao Zhang is a hard-working person.",
      "D.Criminal behaviors are illegal behaviors, and violations should be condemned by the society, so all criminal behaviors should be condemned by the society."
    ],
    "raw_logic_programs": [
      "# Declarations\nelements = EnumSort([Taiwanese, Chinese])\njurisdiction = EnumSort([PRC, not_PRC])\nargument = Function([elements] -> [bool])\n\n# Constraints\nargument(Taiwanese) == Not(jurisdiction(Taiwanese) == PRC) ::: Taiwanese are not under the jurisdiction of the People's Republic of China\nargument(Chinese) == jurisdiction(Chinese) == PRC ::: All people under the jurisdiction of the People's Republic of China are Chinese\n\n# Options\nQuestion ::: Which of the following reasoning clearly shows that the above argument is not valid?\nis_invalid(And(argument(Taiwanese), argument(Chinese))) ::: (A)\nis_invalid(And(argument(Taiwanese), argument(Chinese))) ::: (B)\nis_invalid(And(argument(Taiwanese), argument(Chinese))) ::: (C)\nis_invalid(And(argument(Taiwanese), argument(Chinese))) ::: (D)"
    ]
  },
  {
    "id": 106,
    "context": "A doctor takes a capsule made of lycopene extracted from tomatoes to a group of prostate cancer patients awaiting surgery, 15 mg twice a day.Three weeks later, the tumors of this group of patients were significantly reduced, and some were almost eliminated.The doctor speculated that lycopene has the effect of reducing prostate tumors.",
    "question": "Which of the following, if true, best supports the doctor 's conclusion?",
    "answer": "C",
    "options": [
      "A.The age of prostate cancer patients taking lycopene is between 45-65 years old.",
      "B.A few of the prostate cancer patients taking lycopene are in serious condition.",
      "C.There is a similar group of patients with prostate tumors awaiting surgery.They did not take lycopene capsules, and their tumors did not shrink.",
      "D.Lycopene exists not only in tomatoes, but also in fruits such as watermelons and grapes."
    ],
    "raw_logic_programs": [
      "# Declarations\npatients = EnumSort([Patient1, Patient2, Patient3, Patient4, Patient5, Patient6])  # Representing the group of prostate cancer patients\ntreatment = Function([patients] -> [bool])  # Indicates whether a patient is taking lycopene\ntumor_reduction = Function([patients] -> [bool])  # Indicates whether a patient's tumor has reduced\n\n# Constraints\nForAll([p:patients], treatment(p) == true) ::: All patients in the group are taking lycopene\nForAll([p:patients], Implies(treatment(p), tumor_reduction(p))) ::: If a patient is taking lycopene, their tumor has reduced\n\n# Options\nQuestion ::: Which of the following, if true, best supports the doctor's conclusion?\nis_valid(Exists([p:patients], And(treatment(p), tumor_reduction(p)))) ::: (A) The age of prostate cancer patients taking lycopene is between 45-65 years old.\nis_valid(Exists([p:patients], And(treatment(p), tumor_reduction(p)))) ::: (B) A few of the prostate cancer patients taking lycopene are in serious condition.\nis_valid(Exists([p:patients], And(treatment(p), Not(tumor_reduction(p))))) ::: (C) There is a similar group of patients with prostate tumors awaiting surgery. They did not take lycopene capsules, and their tumors did not shrink.\nis_valid(Exists([p:patients], And(treatment(p), tumor_reduction(p)))) ::: (D) Lycopene exists not only in tomatoes, but also in fruits such as watermelons and grapes."
    ]
  },
  {
    "id": 107,
    "context": "A heating station has 5 valves to control the delivery of steam to the outside.The following operating rules must be followed when using these valves? (1) If valve No.1 is opened, then valve No.2 must be opened and valve No.5 must be closed.(2) If valve No.2 or valve No.5 is opened, valve No.4 must be closed.(3) No.3 valve and No.4 valve cannot be closed at the same time.",
    "question": "Now we need to open the No.1 valve, which two valves are to be opened at the same time?",
    "answer": "B",
    "options": [
      "A.No.2 valve and No.4 valve.",
      "C.No.3 valve and No.5 valve.",
      "B.No.2 valve and No.3 valve.",
      "D.No.4 valve and No.5 valve."
    ],
    "raw_logic_programs": [
      "# Declarations\nvalves = EnumSort([valve1, valve2, valve3, valve4, valve5])\nopened = Function([valves] -> [bool])\n\n# Constraints\nImplies(opened(valve1), And(opened(valve2), Not(opened(valve5)))) ::: If valve No.1 is opened, then valve No.2 must be opened and valve No.5 must be closed.\nImplies(Or(opened(valve2), opened(valve5)), Not(opened(valve4))) ::: If valve No.2 or valve No.5 is opened, valve No.4 must be closed.\nNot(opened(valve3) && opened(valve4)) ::: No.3 valve and No.4 valve cannot be closed at the same time.\n\n# Options\nQuestion ::: Now we need to open the No.1 valve, which two valves are to be opened at the same time?\nis_valid(And(opened(valve2), opened(valve4))) ::: (A) No.2 valve and No.4 valve.\nis_valid(And(opened(valve2), opened(valve3))) ::: (B) No.2 valve and No.3 valve.\nis_valid(And(opened(valve3), opened(valve5))) ::: (C) No.3 valve and No.5 valve.\nis_valid(And(opened(valve4), opened(valve5))) ::: (D) No.4 valve and No.5 valve."
    ]
  },
  {
    "id": 108,
    "context": "Since 1997, Hong Kong has fallen into a severe economic recession; it was this year that Hong Kong began to implement 'one country, two systems.' Some claim that 'one country, two systems' caused Hong Kong's economic recession.",
    "question": "Which of the following questions is most relevant for refuting the above reasoning?",
    "answer": "A",
    "options": [
      "A.If two things happen at the same time or one after another, can we be sure that there is a causal relationship between them?",
      "B.Why did Taiwan, Singapore, South Korea, and the United States also experience economic recession during this period?",
      "C.Why the economy of mainland China is booming.",
      "D.Why was the economic situation of the United Kingdom, which used to regulate Hong Kong, bad during this period?"
    ],
    "raw_logic_programs": [
      "# Declarations\nevents = EnumSort([economic_recession_HK, implementation_one_country_two_systems, economic_recession_other_countries])\ncausal_relationship = Function([events, events] -> [bool])\n\n# Constraints\nImplies(And(causal_relationship(implementation_one_country_two_systems, economic_recession_HK), causal_relationship(implementation_one_country_two_systems, economic_recession_other_countries)), False) ::: If 'one country, two systems' caused Hong Kong's economic recession, then it cannot be the case that other countries experienced recession for different reasons.\n\n# Options\nQuestion ::: Which of the following questions is most relevant for refuting the above reasoning?\nis_relevant(Implies(causal_relationship(implementation_one_country_two_systems, economic_recession_HK), False)) ::: (A)\nis_relevant(Implies(causal_relationship(implementation_one_country_two_systems, economic_recession_other_countries), False)) ::: (B)\nis_relevant(False) ::: (C)\nis_relevant(False) ::: (D)"
    ]
  },
  {
    "id": 109,
    "context": "According to some general principles of human nature, people in social life, no matter how high their status or education, their behavior always changes with the environment.There are both good and evil aspects in human nature.Everyone actually has a self-interested complex or tendency, and they are called 'rational economic men.'",
    "question": "Which of the following options is not the implied meaning or conclusion that can be derived?",
    "answer": "D",
    "options": [
      "A.When a person provides a role or service to society, it is impossible not to consider his own economic interests.",
      "B.Once they have public power, some people are very likely to use 'power rent-seeking' and engage in power and money transactions.",
      "C.Some institutional factors should be designed to restrict the behavior of government officials.",
      "D.The management of government officials should mainly depend on raising their awareness of self-discipline."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([individual])\nbehavior = EnumSort([good, evil])\ninterests = EnumSort([self_interested, altruistic])\nactions = Function([people] -> [behavior])\neconomic_interests = Function([people] -> [interests])\n\n# Constraints\nForAll([p:people], Or(actions(p) == good, actions(p) == evil)) ::: There are both good and evil aspects in human nature.\nForAll([p:people], economic_interests(p) == self_interested) ::: Everyone has a self-interested complex or tendency.\n\n# Options\nQuestion ::: Which of the following options is not the implied meaning or conclusion that can be derived?\nis_unsat(Implies(Exists([p:people], actions(p) == good), economic_interests(p) == self_interested)) ::: (A)\nis_unsat(Implies(Exists([p:people], actions(p) == evil), economic_interests(p) == self_interested)) ::: (B)\nis_unsat(Exists([p:people], actions(p) == good) => Exists([p:people], economic_interests(p) == altruistic)) ::: (C)\nis_unsat(ForAll([p:people], actions(p) == good) => economic_interests(p) == altruistic) ::: (D)"
    ]
  },
  {
    "id": 110,
    "context": "On the last day of military training, a class of students fired live ammunition.Several instructors talked about the shooting results of a class.Instructor Zhang said? 'This time the military training time is too short, no one in this class will have excellent shooting results.' Instructor Sun said? 'No, several people have trained before, and their shooting performance will be excellent.' The instructor said? 'I think the monitor or the sports commissioner can achieve excellent results.'",
    "question": "It turned out that only one of the three instructors was right.Which one of the following must be true?",
    "answer": "D",
    "options": [
      "A.The shooting performance of everyone in the class is not excellent.",
      "B.Someone in the class has excellent shooting performance.",
      "C.The squad leader's shooting performance is excellent.",
      "D.The shooting performance of the Sports Committee is not excellent."
    ],
    "raw_logic_programs": [
      "# Declarations\ninstructors = EnumSort([Zhang, Sun, Instructor])\nstudents = EnumSort([Student1, Student2, Student3, Student4, Student5, Student6])  # Assuming there are 6 students\nperformance = Function([students] -> [bool])  # True if excellent, False otherwise\n\n# Constraints\n# Zhang's statement: \"This time the military training time is too short, no one in this class will have excellent shooting results.\"\nForAll([s:students], performance(s) == False) ::: Zhang's statement implies all students have poor performance\n\n# Sun's statement: \"No, several people have trained before, and their shooting performance will be excellent.\"\nExists([s:students], performance(s) == True) ::: Sun's statement implies at least one student has excellent performance\n\n# Instructor's statement: \"I think the monitor or the sports commissioner can achieve excellent results.\"\nOr(performance(Monitor), performance(SportsCommissioner)) ::: The instructor's statement implies at least one of the two has excellent performance\n\n# Options\nQuestion ::: Which one of the following must be true?\nis_valid(ForAll([s:students], performance(s) == False)) ::: (A) The shooting performance of everyone in the class is not excellent.\nis_valid(Exists([s:students], performance(s) == True)) ::: (B) Someone in the class has excellent shooting performance.\nis_valid(Or(performance(Monitor), performance(SportsCommissioner))) ::: (C) The squad leader's shooting performance is excellent.\nis_valid(performance(SportsCommissioner) == False) ::: (D) The shooting performance of the Sports Committee is not excellent."
    ]
  },
  {
    "id": 111,
    "context": "There is an authoritative public opinion polling agency that investigates the causes of the terrorist attacks on September 11, and found that 40% of the people believed that they were caused by unfair foreign policy of the United States, and 55% It is believed that it is due to the conflict between Islamic civilization and Western civilization.23% of people believe that it is due to the evil nature of terrorists, and 19% of them did not express their views.",
    "question": "Which of the following best explains the contradictory statement above?",
    "answer": "C",
    "options": [
      "A.The sampling of the survey sample is not random and therefore not representative.",
      "B.Some respondents later changed their views.",
      "C.Many investigators believe that the causes of the 'September 11' terrorist attacks were not single but compound.",
      "D.There are technical errors in the calculation of the investigation results."
    ],
    "raw_logic_programs": [
      "# Declarations\ncauses = EnumSort([unfair_foreign_policy, conflict_between_civilizations, evil_nature_of_terrorists, no_opinion])\npercentages = Function([causes] -> [int])\n\n# Constraints\npercentages(unfair_foreign_policy) == 40 ::: 40% believe it was caused by unfair foreign policy\npercentages(conflict_between_civilizations) == 55 ::: 55% believe it was due to the conflict between civilizations\npercentages(evil_nature_of_terrorists) == 23 ::: 23% believe it was due to the evil nature of terrorists\npercentages(no_opinion) == 19 ::: 19% did not express their views\n\n# Options\nQuestion ::: Which of the following best explains the contradictory statement above?\nis_valid(Or(percentages(unfair_foreign_policy) + percentages(conflict_between_civilizations) + percentages(evil_nature_of_terrorists) + percentages(no_opinion) <= 100)) ::: (A)\nis_valid(Exists([c:causes], percentages(c) != percentages(c))) ::: (B)\nis_valid(Exists([c1:causes, c2:causes], And(c1 != c2, percentages(c1) + percentages(c2) > 100))) ::: (C)\nis_valid(Exists([c:causes], percentages(c) != percentages(c))) ::: (D)"
    ]
  },
  {
    "id": 112,
    "context": "A solid wood flooring seller solemnly promised in his contract text? 'The flooring sold in this shop is definitely made of wood; it is responsible for free installation, except for the cost of materials required for installation; free warranty for one year, but not the fault of the company Except for the losses caused.If there is fraud, the company is willing to bear legal responsibility and pay more than 1,000 times the compensation.The company reserves the right to interpret this contract.'",
    "question": "Which of the following options is a correct evaluation of the company and its contract?",
    "answer": "B",
    "options": [
      "A.The company must be very honest because it promises to pay more than 1,000 times in compensation if fraud is discovered.",
      "B.The company's contract actually has no binding force on its behavior.",
      "C.The floors sold by the company must be real solid wood floors.",
      "D.From the customer's perspective, the company's contract terms are acceptable."
    ],
    "raw_logic_programs": [
      "# Declarations\ncompany = EnumSort([seller])\ncontract_terms = EnumSort([made_of_wood, free_installation, warranty, legal_responsibility, interpretation_rights])\nevaluation = Function([company] -> [bool])\n\n# Constraints\nevaluation(seller) == True ::: The flooring sold in this shop is definitely made of wood\nevaluation(seller) == True ::: It is responsible for free installation, except for the cost of materials required for installation\nevaluation(seller) == True ::: Free warranty for one year, but not the fault of the company except for the losses caused\nevaluation(seller) == True ::: If there is fraud, the company is willing to bear legal responsibility and pay more than 1,000 times the compensation\nevaluation(seller) == True ::: The company reserves the right to interpret this contract\n\n# Options\nQuestion ::: Which of the following options is a correct evaluation of the company and its contract?\nis_valid(evaluation(seller) == True) ::: (A) The company must be very honest because it promises to pay more than 1,000 times in compensation if fraud is discovered.\nis_valid(evaluation(seller) == False) ::: (B) The company's contract actually has no binding force on its behavior.\nis_valid(evaluation(seller) == True) ::: (C) The floors sold by the company must be real solid wood floors.\nis_valid(evaluation(seller) == True) ::: (D) From the customer's perspective, the company's contract terms are acceptable."
    ]
  },
  {
    "id": 113,
    "context": "The people in Harbin are all northerners, and some people in Harbin are not workers.",
    "question": "If the above proposition is true, then which of the following must be true?",
    "answer": "B",
    "options": [
      "A.Some northerners are workers.",
      "C.Some workers are Northerners.",
      "B.Some northerners are not workers.",
      "D.Some workers are not Northerners."
    ],
    "raw_logic_programs": [
      "# Declarations\npeople = EnumSort([northerners, workers])\nlocation = EnumSort([Harbin])\nhas_property = Function([people] -> [bool])\n\n# Constraints\nForAll([p:people], Implies(And(p in Harbin, p is northerner), True)) ::: All people in Harbin are northerners\nForExists([p:people], And(p in Harbin, Not(p is worker))) ::: Some people in Harbin are not workers\n\n# Options\nQuestion ::: If the above proposition is true, then which of the following must be true?\nis_valid(Exists([p:people], And(p is northerner, Not(p is worker)))) ::: (A) Some northerners are not workers.\nis_valid(Exists([p:people], And(p is worker, Not(p is northerner)))) ::: (B) Some workers are not northerners.\nis_valid(Exists([p:people], And(p is northerner, p is worker))) ::: (C) Some northerners are workers.\nis_valid(Exists([p:people], And(p is worker, p is northerner))) ::: (D) Some workers are northerners."
    ]
  },
  {
    "id": 114,
    "context": "In an experiment, a doctoral student and a robot independently answered a set of questions through a computer, and a group of scientists then identified which answers on the computer screen were made by the doctoral student and which answers were made by the robot Yes, and the error rate of the identification result is as high as 78%.Some people think that the set of questions posed in the experiment is definitely insufficient, since they cannot make a group of scientists distinguish the doctoral student from the robot.",
    "question": "These people's suspicions are based on which of the following unstated premises?",
    "answer": "D",
    "options": [
      "A.Some robots are able to play games with chess masters.",
      "B.The doctoral student is a master of Go.",
      "C.That robot is IBM's latest generation product.",
      "D.There was a considerable difference between the doctoral student and the robot."
    ],
    "raw_logic_programs": [
      "# Declarations\nparticipants = EnumSort([Doctoral_Student, Robot])\nquestions = EnumSort([Q1, Q2, Q3, ..., Qn])  # A set of questions\nidentification_result = Function([questions] -> [participants])\nerror_rate = Constant(0.78)\n\n# Constraints\nCount([q:questions], identification_result(q) == Doctoral_Student) + Count([q:questions], identification_result(q) == Robot) == Count([q:questions]) ::: Each question is answered by either the doctoral student or the robot\nCount([q:questions], identification_result(q) == Doctoral_Student) + Count([q:questions], identification_result(q) == Robot) > 0 ::: There are answers from both the doctoral student and the robot\nerror_rate >= 0.78 ::: The error rate of the identification result is as high as 78%\n\n# Options\nQuestion ::: These people's suspicions are based on which of the following unstated premises?\nis_valid(Exists([q:questions], And(identification_result(q) == Doctoral_Student, identification_result(q) != Robot))) ::: (A) Some robots are able to play games with chess masters.\nis_valid(Exists([q:questions], And(identification_result(q) == Doctoral_Student, identification_result(q) != Robot))) ::: (B) The doctoral student is a master of Go.\nis_valid(Exists([q:questions], And(identification_result(q) == Robot, identification_result(q) != Doctoral_Student))) ::: (C) That robot is IBM's latest generation product.\nis_valid(Exists([q:questions], And(identification_result(q) == Doctoral_Student, identification_result(q) != Robot))) ::: (D) There was a considerable difference between the doctoral student and the robot."
    ]
  },
  {
    "id": 115,
    "context": "Prince Lima in Li Na's mind is tall, handsome and doctor.She knew four men, Wang Wei, Wu Gang, Li Qiang, and Liu Dawei, and one of them met all the conditions she required.(1) Among the 4 men, there are 3 tall men, 2 doctors, and 1 is handsome; (2) Wang Wei and Wu Gang are both doctors; (3) Liu Dawei and Li Qiang are the same height; (4) Li Qiang and Wang Wei Not all are tall.",
    "question": "Who can meet all the requirements of Li Na?",
    "answer": "C",
    "options": [
      "A.Liu Dawei",
      "B.Li Qiang",
      "C.Wu Gang",
      "D.Wang Wei"
    ],
    "raw_logic_programs": [
      "# Declarations\nmen = EnumSort([Wang_Wei, Wu_Gang, Li_Qiang, Liu_Dawei])\nattributes = EnumSort([tall, handsome, doctor])\nmeets_requirements = Function([men] -> [bool])\n\n# Constraints\nCount([m:men], meets_requirements(m) == tall) == 3 ::: Among the 4 men, there are 3 tall men\nCount([m:men], meets_requirements(m) == doctor) == 2 ::: Among the 4 men, there are 2 doctors\nCount([m:men], meets_requirements(m) == handsome) == 1 ::: Among the 4 men, there is 1 handsome man\nAnd(meets_requirements(Wang_Wei) == doctor, meets_requirements(Wu_Gang) == doctor) ::: Wang Wei and Wu Gang are both doctors\nmeets_requirements(Liu_Dawei) == meets_requirements(Li_Qiang) ::: Liu Dawei and Li Qiang are the same height\nNot(And(meets_requirements(Li_Qiang) == tall, meets_requirements(Wang_Wei) == tall)) ::: Li Qiang and Wang Wei are not both tall\n\n# Options\nQuestion ::: Who can meet all the requirements of Li Na?\nis_valid(meets_requirements(Liu_Dawei)) ::: (A)\nis_valid(meets_requirements(Li_Qiang)) ::: (B)\nis_valid(meets_requirements(Wu_Gang)) ::: (C)\nis_valid(meets_requirements(Wang_Wei)) ::: (D)"
    ]
  },
  {
    "id": 116,
    "context": "Take n (n> 1) natural numbers in turn to form a finite sequence.The odd sequence and even sequence are obviously shorter than the natural sequence.However, if the natural number sequence is extended indefinitely, the odd and even sequence must be smaller than the whole; in an infinite world, the part may be equal to the whole.",
    "question": "Which of the following cannot be a logical inference from the above conclusion?",
    "answer": "B",
    "options": [
      "A.In a poor world, part may be smaller than whole.",
      "B.In an infinite world, parts must not be equal to wholes.",
      "C.In an infinite world, the whole may equal parts.",
      "D.In a poor world, the whole must be larger than the part."
    ],
    "raw_logic_programs": [
      "# Declarations\nworlds = EnumSort([poor, infinite])\nparts = EnumSort([odd_sequence, even_sequence, natural_sequence])\nrelation = Function([worlds, parts] -> [bool])\n\n# Constraints\nForAll([w:worlds], And(Exists([p:parts], relation(w, p)), relation(infinite, natural_sequence))) ::: In an infinite world, the natural sequence exists\nForAll([p:parts], relation(infinite, p) => relation(infinite, natural_sequence)) ::: In an infinite world, parts must not be equal to wholes\nForAll([p:parts], relation(poor, p) => Not(relation(poor, natural_sequence))) ::: In a poor world, part may be smaller than whole\nrelation(infinite, odd_sequence) ::: In an infinite world, the odd sequence exists\nrelation(infinite, even_sequence) ::: In an infinite world, the even sequence exists\n\n# Options\nQuestion ::: Which of the following cannot be a logical inference from the above conclusion?\nis_unsat(relation(poor, natural_sequence) && Not(relation(poor, odd_sequence))) ::: (A)\nis_unsat(relation(infinite, parts) && Not(relation(infinite, natural_sequence))) ::: (B)\nis_unsat(relation(infinite, parts) && relation(infinite, natural_sequence)) ::: (C)\nis_unsat(relation(poor, natural_sequence) && relation(poor, parts)) ::: (D)"
    ]
  },
  {
    "id": 117,
    "context": "People who participate in Taekwondo exercise are generally healthier than those who do not participate in Taekwondo exercise.Therefore, Taekwondo exercise helps improve health.",
    "question": "Which of the following, if true, is the most doubtful of the above conclusion?",
    "answer": "C",
    "options": [
      "A.Every year, a small number of people are injured by accidents in Taekwondo.",
      "B.Taekwondo can train people's reaction ability and enhance people's agility.",
      "C.Only healthy people participate in Taekwondo.",
      "D.Men love taekwondo more than women."
    ],
    "raw_logic_programs": [
      "# Declarations\nparticipants = EnumSort([Taekwondo_Exercisers, Non_Taekwondo_Exercisers])\nhealth = Function([participants] -> [bool])\n\n# Constraints\nForAll([p:participants], health(Taekwondo_Exercisers) == true) ::: People who participate in Taekwondo exercise are generally healthier than those who do not participate in Taekwondo exercise.\nImplies(health(Taekwondo_Exercisers), health(Non_Taekwondo_Exercisers)) ::: Taekwondo exercise helps improve health.\n\n# Options\nQuestion ::: Which of the following, if true, is the most doubtful of the above conclusion?\nis_doubtful(health(Non_Taekwondo_Exercisers) == false) ::: (A) Every year, a small number of people are injured by accidents in Taekwondo.\nis_doubtful(health(Taekwondo_Exercisers) == true) ::: (B) Taekwondo can train people's reaction ability and enhance people's agility.\nis_doubtful(health(Taekwondo_Exercisers) == true) ::: (C) Only healthy people participate in Taekwondo.\nis_doubtful(health(Taekwondo_Exercisers) == true) ::: (D) Men love taekwondo more than women."
    ]
  },
  {
    "id": 118,
    "context": "Scientists have found that the content of a protein called 'SK3' in the brains of experimental rats of different ages is closely related to their memory ability? the brain content of SK3 protein in the brains of old experimental rats is higher, but the content in younger experimental rats is less; and Older rats have worse memory than younger rats.Therefore, scientists believe that increased brain SK3 protein content will lead to memory loss in the experimental mice.",
    "question": "Which of the following, if true, best supports the scientist 's conclusion?",
    "answer": "C",
    "options": [
      "A.In young experimental rats, it is also found that the brain SK3 protein content is high.",
      "B.It has been found that the human brain also contains SK3 protein.",
      "C.When the scientists tried to reduce the content of SK3 protein in the brains of old experimental mice, their memory improved.",
      "D.Scientists have figured out the molecular structure of SK3 protein."
    ],
    "raw_logic_programs": [
      "# Declarations\nrats = EnumSort([young, old])\nproteins = EnumSort([SK3])\nmemory_ability = Function([rats] -> [int])  # Memory ability represented as an integer\nprotein_content = Function([rats, proteins] -> [int])  # Protein content represented as an integer\n\n# Constraints\nForAll([r:rats], protein_content(r, SK3) > 0) ::: The content of SK3 protein in the brains of rats is positive\nprotein_content(old, SK3) > protein_content(young, SK3) ::: The brain content of SK3 protein in old rats is higher than in young rats\nmemory_ability(old) < memory_ability(young) ::: Older rats have worse memory than younger rats\nImplies(protein_content(rats, SK3) > threshold, memory_ability(rats) < baseline) ::: Increased brain SK3 protein content leads to memory loss\n\n# Options\nQuestion ::: Which of the following, if true, best supports the scientist's conclusion?\nis_supportive(Implies(protein_content(old, SK3) > protein_content(young, SK3), memory_ability(old) < memory_ability(young))) ::: (A)\nis_supportive(Exists([r:rats], protein_content(r, SK3) > threshold)) ::: (B)\nis_supportive(Implies(reduce(SK3, old), memory_ability(old) > previous_memory)) ::: (C)\nis_supportive(Exists([structure:structures], molecular_structure(SK3, structure))) ::: (D)"
    ]
  },
  {
    "id": 119,
    "context": "The late famous logician Jin Yuelin of China heard the words 'Money is like dung' and 'Friends are worth a thousand dollars' when he was a child, and found that there are logical problems because they can lead to the absurd conclusion of 'friends are like dung'.",
    "question": "Since the conclusion of 'friends like dung' is not true, it can be logically derived?",
    "answer": "B",
    "options": [
      "A.The expression 'money is like dung' is false.",
      "B.If a friend is indeed worth a lot of money, then money is not like dung.",
      "C.The statement that 'friends are valuable' is true.",
      "D.The words 'Money is like dung' and 'Friends are worth a thousand dollars' are either true or false."
    ],
    "raw_logic_programs": [
      "# Declarations\nstatements = EnumSort([money_is_like_dung, friends_are_worth_a_thousand_dollars])\ntruth_values = EnumSort([true, false])\nderives = Function([statements] -> [truth_values])\n\n# Constraints\nAnd(derives(money_is_like_dung) == true, derives(friends_are_worth_a_thousand_dollars) == true) ::: The statements 'money is like dung' and 'friends are worth a thousand dollars' are either true or false.\nNot(derives(friends_are_worth_a_thousand_dollars) == true) ::: The conclusion 'friends like dung' is not true.\n\n# Options\nQuestion ::: Since the conclusion of 'friends like dung' is not true, it can be logically derived?\nis_valid(derives(money_is_like_dung) == false) ::: (A)\nis_valid(Implies(derives(friends_are_worth_a_thousand_dollars) == true, derives(money_is_like_dung) == false)) ::: (B)\nis_valid(derives(friends_are_worth_a_thousand_dollars) == true) ::: (C)\nis_valid(And(derives(money_is_like_dung) == true, derives(friends_are_worth_a_thousand_dollars) == true)) ::: (D)"
    ]
  },
  {
    "id": 120,
    "context": "Recently, some countries in the world, especially the United States and Japan, have blamed their domestic economic mystery on China 's fixed exchange rate system between the RMB and the US dollar.Some domestic manufacturing companies have caused pressure.",
    "question": "The following are all questions about the above views, except?",
    "answer": "D",
    "options": [
      "A.Japan has been in recession for more than ten years.At that time, China 's merchandise exports were very small, and the renminbi was very weak.",
      "B.The US economic recession was mainly caused by the destruction of the myth of the Internet economy, and the '9.11' terrorist attacks exacerbated this recession.",
      "C.China's GDP accounts for only 3.9% of the world's total, foreign trade is less than 5% of the world's, and it does not have the ability to affect the world market price and supply and demand.",
      "D.Consumers in Western countries have benefited greatly from cheap goods in China."
    ],
    "raw_logic_programs": [
      "# Declarations\ncountries = EnumSort([United_States, Japan, China])\neconomic_factors = EnumSort([fixed_exchange_rate, domestic_pressure, merchandise_exports, GDP, foreign_trade, consumer_benefits])\nviews = Function([countries] -> [economic_factors])\n\n# Constraints\nAnd(views(United_States) == fixed_exchange_rate, views(United_States) == domestic_pressure) ::: The US blames China's fixed exchange rate system and domestic manufacturing companies for economic issues\nAnd(views(Japan) == fixed_exchange_rate, views(Japan) == domestic_pressure) ::: Japan also blames China's fixed exchange rate system and domestic manufacturing companies for economic issues\nviews(China) == merchandise_exports ::: China is viewed in relation to its merchandise exports\nviews(China) == GDP ::: China's GDP is also a factor in the views expressed\n\n# Options\nQuestion ::: The following are all questions about the above views, except?\nis_unsat(views(United_States) == fixed_exchange_rate) ::: (A)\nis_unsat(views(United_States) == domestic_pressure) ::: (B)\nis_unsat(views(China) == GDP) ::: (C)\nis_unsat(views(China) == consumer_benefits) ::: (D)"
    ]
  },
  {
    "id": 121,
    "context": "The football game in the 'Master Cup 2003 China Robot Competition' is in progress.Three professors predicted the final result? Professor Zhao said? 'The champion is not the Tsinghua University team nor the Zhejiang University team.' Professor Qian said ? 'The champion is not the Tsinghua University team, but the University of Science and Technology of China.' Professor Sun said? 'The champion is not the China University of Science and Technology team, but the Tsinghua University team.The results of the competition showed that only one of them judged both, one 'S judgment is one-to-one wrong, the other one is wrong.",
    "question": "According to the above situation, we know that the winner is",
    "answer": "A",
    "options": [
      "A.Tsinghua University Team",
      "B.China University of Science and Technology Team",
      "C.Zhejiang University Team",
      "D.Beijing University of Aeronautics and Astronautics"
    ],
    "raw_logic_programs": [
      "To formulate the given problem as a logic program, we will follow the structure of Declarations, Constraints, and Options.\n\n### Problem:\nThe football game in the 'Master Cup 2003 China Robot Competition' is in progress. Three professors predicted the final result: \n- Professor Zhao said: \"The champion is not the Tsinghua University team nor the Zhejiang University team.\"\n- Professor Qian said: \"The champion is not the Tsinghua University team, but the University of Science and Technology of China.\"\n- Professor Sun said: \"The champion is not the China University of Science and Technology team, but the Tsinghua University team.\"\nThe results of the competition showed that only one of them judged both correctly, one�s judgment is one-to-one wrong, and the other one is wrong.\n\n### Declarations\n``` \nteams = EnumSort([Tsinghua, Zhejiang, USTC, Beijing_Aeronautics])\npredictions = Function([professors] -> [bool])\nprofessors = EnumSort([Zhao, Qian, Sun])\n```\n\n### Constraints\n```\npredictions(Zhao) == Not(Or(champion == Tsinghua, champion == Zhejiang)) ::: Zhao's prediction\npredictions(Qian) == And(Not(champion == Tsinghua), champion == USTC) ::: Qian's prediction\npredictions(Sun) == And(Not(champion == USTC), champion == Tsinghua) ::: Sun's prediction\n\nCount([p:professors], predictions(p) == true) == 1 ::: Only one professor is correct\nCount([p:professors], predictions(p) == false) == 2 ::: Two professors are wrong\n```\n\n### Options\n```\nis_valid(champion == Tsinghua) ::: (A) Tsinghua University Team\nis_valid(champion == USTC) ::: (B) China University of Science and Technology Team\nis_valid(champion == Zhejiang) ::: (C) Zhejiang University Team\nis_valid(champion == Beijing_Aeronautics) ::: (D) Beijing University of Aeronautics and Astronautics\n```\n\n### Summary\nThis logic program captures the problem's structure, including the predictions made by the professors, the constraints on their correctness, and the options for the champion team. The logic formulas allow us to reason about the possible outcomes based on the given conditions."
    ]
  },
  {
    "id": 122,
    "context": "One year before the graduates of Harvard University came out of the school, the school conducted a survey on their life goals.The result was that 27% of them had no goals at all, 60% had blurred goals, and 10% had a close relationship Goals, only 3% of people have long-term and clear goals.Twenty-five years later, those 3% of people have made unremitting efforts towards a goal and become the elite of the society, while the rest have much worse achievements.this means______",
    "question": "Which sentence is most appropriate for the following?",
    "answer": "C",
    "options": [
      "A.You should determine your life goals as soon as possible.",
      "B.Life has no meaning, but we should add a meaning to it.",
      "C.Whether there is a long-term and clear life goal has a very important impact on the size of life achievements.",
      "D.If you have a long-term and clear life goal, you will be successful in life."
    ],
    "raw_logic_programs": [
      "# Declarations\ngoals = EnumSort([no_goals, blurred_goals, close_relationship_goals, long_term_clear_goals])\npercentage = Function([goals] -> [int])\n\n# Constraints\npercentage(no_goals) == 27 ::: 27% of them had no goals at all\npercentage(blurred_goals) == 60 ::: 60% had blurred goals\npercentage(close_relationship_goals) == 10 ::: 10% had close relationship goals\npercentage(long_term_clear_goals) == 3 ::: 3% of people have long-term and clear goals\n\n# Options\nQuestion ::: Which sentence is most appropriate for the following?\nis_appropriate(percentage(long_term_clear_goals) > percentage(no_goals) && percentage(long_term_clear_goals) > percentage(blurred_goals) && percentage(long_term_clear_goals) > percentage(close_relationship_goals)) ::: (A)\nis_appropriate(True) ::: (B)\nis_appropriate(percentage(long_term_clear_goals) > percentage(no_goals) && percentage(long_term_clear_goals) > percentage(blurred_goals) && percentage(long_term_clear_goals) > percentage(close_relationship_goals)) ::: (C)\nis_appropriate(False) ::: (D)"
    ]
  },
  {
    "id": 123,
    "context": "Confucius said? 'Do not do what you don't want to do to others.'",
    "question": "Which of the following options is not a logical inference from the above sentence?",
    "answer": "B",
    "options": [
      "A.Only those who do what they want can do it to others.",
      "B.If you want, then give it to others.",
      "C.Don't treat others unless you want to.",
      "D.Whatever is applied to people should be what they want."
    ],
    "raw_logic_programs": [
      "# Declarations\nstatements = EnumSort([A, B, C, D])\ninference = Function([statements] -> [bool])\n\n# Constraints\ninference(A) == False ::: Only those who do what they want can do it to others.\ninference(B) == True ::: If you want, then give it to others.\ninference(C) == True ::: Don't treat others unless you want to.\ninference(D) == True ::: Whatever is applied to people should be what they want.\n\n# Options\nQuestion ::: Which of the following options is not a logical inference from the above sentence?\nis_not_inference(inference(A)) ::: (A)\nis_not_inference(inference(B)) ::: (B)\nis_not_inference(inference(C)) ::: (C)\nis_not_inference(inference(D)) ::: (D)"
    ]
  },
  {
    "id": 124,
    "context": "Most people think that the thinking of scientists is based on strict logical reasoning, not on image thinking means such as analogy, intuition, and epiphany.However, research shows that Nobel Prize winners make more use of these image thinking methods than general scientists.Therefore, image thinking methods help to achieve major scientific breakthroughs.",
    "question": "The above conclusion is based on which of the following assumptions?",
    "answer": "C",
    "options": [
      "A.Organized, step-by-step reasoning is essential for general scientific research.",
      "B.Nobel Prize winners have the ability to think creatively through analogy, intuition, and insight.",
      "C.Nobel winners have made major scientific breakthroughs.",
      "D.Nobel Prize winners are smarter and harder than ordinary scientists."
    ],
    "raw_logic_programs": [
      "# Declarations\nassumptions = EnumSort([A, B, C, D])\nconclusion = Function([assumptions] -> [bool])\n\n# Constraints\nconclusion(B) ::: The conclusion is based on the assumption that Nobel Prize winners have the ability to think creatively through analogy, intuition, and insight.\n\n# Options\nQuestion ::: The above conclusion is based on which of the following assumptions?\nis_valid(conclusion(A)) ::: (A)\nis_valid(conclusion(B)) ::: (B)\nis_valid(conclusion(C)) ::: (C)\nis_valid(conclusion(D)) ::: (D)"
    ]
  },
  {
    "id": 125,
    "context": "A supermarket often finds that customers steal goods without paying, which affects the profit of the supermarket.As a result, the management of the supermarket decided to install monitoring equipment in the supermarket and increase the number of shopping guides, thereby increasing the profit margin of the supermarket.",
    "question": "Which of the following is most important for evaluating the decision of the supermarket management?",
    "answer": "D",
    "options": [
      "A.The ratio of the purchase price to the selling price of the supermarket goods.",
      "B.The quantity and price of goods sold by the supermarket every day.",
      "C.The number of customers who shop at the supermarket every day and the level of consumption.",
      "D.The ratio of the loss in the supermarket caused by customers stealing commodities, compared with the cost of operating monitoring equipment and increasing shopping guides."
    ],
    "raw_logic_programs": [
      "# Declarations\ndecisions = EnumSort([install_monitoring, increase_guides])\nfactors = EnumSort([profit_margin, theft_loss, operating_costs, sales_volume, customer_count])\nevaluation = Function([decisions] -> [factors])\n\n# Constraints\nevaluation(install_monitoring) == theft_loss + operating_costs ::: The decision to install monitoring equipment affects theft loss and operating costs\nevaluation(increase_guides) == operating_costs + sales_volume ::: The decision to increase shopping guides affects operating costs and sales volume\nevaluation(install_monitoring) + evaluation(increase_guides) == profit_margin ::: The overall evaluation affects the profit margin\n\n# Options\nQuestion ::: Which of the following is most important for evaluating the decision of the supermarket management?\nis_important(evaluation(theft_loss) / (evaluation(operating_costs) + evaluation(increase_guides))) ::: (A)\nis_important(evaluation(sales_volume)) ::: (B)\nis_important(evaluation(customer_count)) ::: (C)\nis_important(evaluation(theft_loss) / (evaluation(operating_costs) + evaluation(increase_guides))) ::: (D)"
    ]
  },
  {
    "id": 126,
    "context": "In the early days of its formation, the earth was a fast rotating body in the state of lava, most of the iron element was in its core part; some molten liquid was thrown from the surface of this rotating body, and later condensed to form the moon.",
    "question": "If the above theory about the origin of the moon is correct, which one of the following conclusions can best be supported?",
    "answer": "B",
    "options": [
      "A.The moon is the only fairly large object that orbits the earth.",
      "B.The iron content of the core part of the moon is smaller than that of the core part of the earth.",
      "C.The solidification of the lunar surface is after the solidification of the earth's surface.",
      "D.Like the earth, the moon has a solid surface structure and a core of lava."
    ],
    "raw_logic_programs": [
      "# Declarations\ntheories = EnumSort([origin_of_moon])\nobjects = EnumSort([moon, earth])\nproperties = EnumSort([iron_content, surface_structure, core_state])\nconclusions = Function([theories] -> [properties])\n\n# Constraints\nconclusions(origin_of_moon) == iron_content ::: The theory about the origin of the moon suggests something about the iron content\nconclusions(origin_of_moon) == surface_structure ::: The theory about the origin of the moon suggests something about the surface structure\nconclusions(origin_of_moon) == core_state ::: The theory about the origin of the moon suggests something about the core state\n\n# Options\nQuestion ::: If the above theory about the origin of the moon is correct, which one of the following conclusions can best be supported?\nis_supported(conclusions(origin_of_moon) == objects(moon) == only_large_object) ::: (A)\nis_supported(conclusions(origin_of_moon) == iron_content(moon) < iron_content(earth)) ::: (B)\nis_supported(conclusions(origin_of_moon) == solidification(lunar_surface) > solidification(earth_surface)) ::: (C)\nis_supported(conclusions(origin_of_moon) == surface_structure(moon) == solid_surface_structure) ::: (D)"
    ]
  },
  {
    "id": 127,
    "context": "There are 9 passengers on a helicopter, including 1 scientist, 2 entrepreneurs, 2 lawyers, 3 Americans, and 4 Chinese.",
    "question": "Which of the following supplements can explain the inconsistency between the total number of people mentioned in the question stem and the number of people with different identities?",
    "answer": "C",
    "options": [
      "A.The scientist and one of the Americans are husband and wife.",
      "B.The products of one of the entrepreneurs are mainly exported to the United States.",
      "C.Two entrepreneurs are Chinese, and another American is a lawyer.",
      "D.One of the lawyers is the legal adviser of one of the entrepreneurs."
    ],
    "raw_logic_programs": [
      "To formulate the problem as a logic program, we will follow the structure of Declarations, Constraints, and Options.\n\n### Declarations\n``` \npassengers = EnumSort([scientist, entrepreneur1, entrepreneur2, lawyer1, lawyer2, american1, american2, american3, chinese1, chinese2, chinese3, chinese4])\nroles = EnumSort([scientist, entrepreneur, lawyer, american, chinese])\nidentity_count = Function([roles] -> [int])\n```\n\n### Constraints\n```\nCount([p:passengers], identity_count(scientist) == 1) ::: There is 1 scientist.\nCount([p:passengers], identity_count(entrepreneur) == 2) ::: There are 2 entrepreneurs.\nCount([p:passengers], identity_count(lawyer) == 2) ::: There are 2 lawyers.\nCount([p:passengers], identity_count(american) == 3) ::: There are 3 Americans.\nCount([p:passengers], identity_count(chinese) == 4) ::: There are 4 Chinese.\nCount([p:passengers], identity_count(roles) == 9) ::: Total number of passengers is 9.\n```\n\n### Options\n```\nQuestion ::: Which of the following supplements can explain the inconsistency between the total number of people mentioned in the question stem and the number of people with different identities?\nis_valid(And(identity_count(entrepreneur) == 2, identity_count(chinese) == 2, identity_count(lawyer) == 1, identity_count(american) == 3)) ::: (A) The scientist and one of the Americans are husband and wife.\nis_valid(And(identity_count(entrepreneur) == 2, identity_count(american) == 3)) ::: (B) The products of one of the entrepreneurs are mainly exported to the United States.\nis_valid(And(identity_count(entrepreneur) == 2, identity_count(chinese) == 2, identity_count(lawyer) == 1, identity_count(american) == 3)) ::: (C) Two entrepreneurs are Chinese, and another American is a lawyer.\nis_valid(And(identity_count(lawyer) == 2, identity_count(entrepreneur) == 2)) ::: (D) One of the lawyers is the legal adviser of one of the entrepreneurs.\n```\n\nThis logic program captures the relationships and constraints regarding the identities of the passengers and allows us to evaluate the options provided in the question."
    ]
  },
  {
    "id": 128,
    "context": "Before the finals of the men 's team division of the World Table Tennis Championships, the coach of Country S was lining up.His idea was? if the No.4 player 's competitive state is good and the injury has healed, then let No.4 player play; only Player No.4 can't play, only player No.6 is sent out.",
    "question": "If the No.6 player plays in the final, which of the following must be true?",
    "answer": "D",
    "options": [
      "A.Player 4 is seriously injured.",
      "B.Player 4's competitive state is not good.",
      "C.No.6 player was not injured.",
      "D.If player 4's injury has healed, then his competitive state is not good."
    ],
    "raw_logic_programs": [
      "# Declarations\nplayers = EnumSort([Player4, Player6])\nstate = EnumSort([good, not_good, injured, healed])\nplays = Function([players] -> [bool])\ncompetitive_state = Function([players] -> [state])\n\n# Constraints\nplays(Player4) == false ::: Player 4 can't play\nplays(Player6) == true ::: Player 6 is sent out\nImplies(competitive_state(Player4) == good, plays(Player4) == true) ::: If Player 4's competitive state is good, then Player 4 plays\nImplies(competitive_state(Player4) == not_good, plays(Player4) == false) ::: If Player 4's competitive state is not good, then Player 4 does not play\nImplies(competitive_state(Player4) == injured, plays(Player4) == false) ::: If Player 4 is injured, then Player 4 does not play\nImplies(competitive_state(Player4) == healed, plays(Player4) == false) ::: If Player 4's injury has healed, then Player 4 does not play\n\n# Options\nQuestion ::: If the No.6 player plays in the final, which of the following must be true?\nis_valid(competitive_state(Player4) == injured) ::: (A)\nis_valid(competitive_state(Player4) == not_good) ::: (B)\nis_valid(competitive_state(Player6) != injured) ::: (C)\nis_valid(Implies(competitive_state(Player4) == healed, competitive_state(Player4) == not_good)) ::: (D)"
    ]
  },
  {
    "id": 129,
    "context": "When a osprey holds a fish, such as herring, cod or courgette, and returns to the nest from the fishing ground, the other osprey will seek food along its whereabouts.However, if the Osprey is a plaice, other Ospreys rarely do this.Although Osprey eats plaice like other fish.",
    "question": "Which of the following is most helpful in explaining the Osprey 's predatory habits mentioned above?",
    "answer": "C",
    "options": [
      "A.Osprey rarely catch herring, cod or courgette.",
      "B.The water where plaice lives is shallower than the water where herring, cod or courgette lives.",
      "C.Herring, cod or courgette are group activities, but plaice is not.",
      "D.Plaice and cod have protective colors, while herring and courgette have no protective colors."
    ],
    "raw_logic_programs": [
      "# Declarations\nospreys = EnumSort([Osprey, Plaice])\nfish = EnumSort([herring, cod, courgette, plaice])\nholds = Function([ospreys, fish] -> [bool])\nseeks_food = Function([ospreys] -> [bool])\n\n# Constraints\nForAll([f:fish], Implies(holds(Osprey, f), seeks_food(Osprey))) ::: When an Osprey holds a fish, it will seek food along its whereabouts\nholds(Osprey, plaice) ::: Osprey eats plaice like other fish\nForAll([o:ospreys], Implies(o == Plaice, Not(seeks_food(o)))) ::: If the Osprey is a plaice, other Ospreys rarely seek food along its whereabouts\n\n# Options\nQuestion ::: Which of the following is most helpful in explaining the Osprey's predatory habits mentioned above?\nis_helpful(holds(Osprey, herring) == false) ::: (A)\nis_helpful(And(holds(Osprey, plaice), Not(holds(Osprey, herring)), Not(holds(Osprey, cod)), Not(holds(Osprey, courgette)))) ::: (B)\nis_helpful(And(seeks_food(Osprey), Not(seeks_food(Plaice)))) ::: (C)\nis_helpful(And(holds(Osprey, cod), holds(Osprey, courgette), Not(holds(Osprey, plaice)))) ::: (D)"
    ]
  },
  {
    "id": 130,
    "context": "The function of the government is to meet the real needs of the people.Unless the government knows what those needs are, the government cannot meet those needs.Freedom of expression can ensure that government officials hear such demand messages.Therefore, for a healthy country, free speech is essential.",
    "question": "Which of the following, if true, cannot weaken the above argument?",
    "answer": "D",
    "options": [
      "A.In most cases, the people do not know what they really need.",
      "B.Free speech ultimately tends to disrupt social order, and good social order is a prerequisite for meeting the needs of the masses.",
      "C.The legitimate function of the government is not to satisfy the needs of the people, but to provide equal opportunities for the people.",
      "D.Freedom of expression is insufficient to satisfy the needs of the masses, and good social order is also essential."
    ],
    "raw_logic_programs": [
      "# Declarations\nneeds = EnumSort([government_needs, people's_needs])\ngovernment_function = Function([needs] -> [bool])\nfreedom_of_expression = Function([bool] -> [bool])\nhealthy_country = EnumSort([true, false])\n\n# Constraints\nImplies(Not(freedom_of_expression(true)), Not(government_function(people's_needs))) ::: Unless the government knows what those needs are, the government cannot meet those needs.\nImplies(freedom_of_expression(true), government_function(people's_needs)) ::: Freedom of expression can ensure that government officials hear such demand messages.\ngovernment_function(people's_needs) == true ::: The function of the government is to meet the real needs of the people.\nhealthy_country == true ::: For a healthy country, free speech is essential.\n\n# Options\nQuestion ::: Which of the following, if true, cannot weaken the above argument?\nis_unsat(Implies(true, Not(government_function(people's_needs)))) ::: (A) In most cases, the people do not know what they really need.\nis_unsat(Implies(true, Not(freedom_of_expression(true)))) ::: (B) Free speech ultimately tends to disrupt social order, and good social order is a prerequisite for meeting the needs of the masses.\nis_unsat(Implies(true, Not(government_function(people's_needs)))) ::: (C) The legitimate function of the government is not to satisfy the needs of the people, but to provide equal opportunities for the people.\nis_unsat(Implies(true, Not(freedom_of_expression(true)))) ::: (D) Freedom of expression is insufficient to satisfy the needs of the masses, and good social order is also essential."
    ]
  },
  {
    "id": 131,
    "context": "In the past, we had a lot of unrealistic high-profile in moral propaganda, so that a lot of the population said one thing and made one behind the other, and split personality.Through thinking about this phenomenon, some scholars have proposed that we should only ask ordinary people to abide by the 'bottom line ethics'.",
    "question": "Based on your understanding, which of the following options is most appropriate as the definition of 'bottom line ethics'?",
    "answer": "B",
    "options": [
      "A.The bottom line ethics is not to steal or kill.",
      "B.The bottom line ethics are some of the most basic and basic codes of conduct and rules that should be observed by ordinary people in a society.",
      "C.The bottom line ethics is not an ethics that requires selfless dedication.",
      "D.If one compares human morality to a building, the bottom line ethics is the fundamental part of that building."
    ],
    "raw_logic_programs": [
      "# Declarations\nethics = EnumSort([bottom_line_ethics])\ndefinitions = EnumSort([not_steal_or_kill, basic_codes, not_selfless_dedication, fundamental_part])\n\n# Constraints\nForAll([d:definitions], Implies(d == not_steal_or_kill, ethics == bottom_line_ethics)) ::: The bottom line ethics is not to steal or kill.\nForAll([d:definitions], Implies(d == basic_codes, ethics == bottom_line_ethics)) ::: The bottom line ethics are some of the most basic and basic codes of conduct and rules that should be observed by ordinary people in a society.\nForAll([d:definitions], Implies(d == not_selfless_dedication, ethics == bottom_line_ethics)) ::: The bottom line ethics is not an ethics that requires selfless dedication.\nForAll([d:definitions], Implies(d == fundamental_part, ethics == bottom_line_ethics)) ::: If one compares human morality to a building, the bottom line ethics is the fundamental part of that building.\n\n# Options\nQuestion ::: Based on your understanding, which of the following options is most appropriate as the definition of 'bottom line ethics'?\nis_valid(ethics == bottom_line_ethics) ::: (A)\nis_valid(ethics == bottom_line_ethics) ::: (B)\nis_valid(ethics == bottom_line_ethics) ::: (C)\nis_valid(ethics == bottom_line_ethics) ::: (D)"
    ]
  },
  {
    "id": 132,
    "context": "In the 3000m finals of the World Athletics Championships, they always ran among the top three players A.B, and C.One was an American player, one was a German player, and the other was a Kenyan player.After the game, I learned? (1) A 's performance is better than German 's; (2) Kenyan 's performance is worse than B 's; and (3) C praises Kenyan 's performance.",
    "question": "Which of the following must be true?",
    "answer": "C",
    "options": [
      "A.A.B, and C are Kenyan, German, and American.",
      "B.The Kenyan player is the champion, the American player is the runner-up, and the German player is the third.",
      "C.A.B and C are Kenyan players, American players and German players.",
      "D.The American player is the champion, the German player is the runner-up, and the Kenyan player is the third."
    ],
    "raw_logic_programs": [
      "# Declarations\nplayers = EnumSort([A, B, C])\nnationalities = EnumSort([American, German, Kenyan])\nperformance = Function([players] -> [int])\nis_better = Function([players, players] -> [bool])\n\n# Constraints\nAnd(is_better(A, German), is_better(B, Kenyan), is_better(Kenyan, B)) ::: A's performance is better than German's; Kenyan's performance is worse than B's\nis_better(C, Kenyan) ::: C praises Kenyan's performance\n\n# Options\nQuestion ::: Which of the following must be true?\nis_true(And(is_better(A, B), is_better(A, C), is_better(B, C))) ::: (A) A, B, and C are Kenyan, German, and American.\nis_true(And(is_better(Kenyan, American), is_better(American, German))) ::: (B) The Kenyan player is the champion, the American player is the runner-up, and the German player is the third.\nis_true(And(is_better(Kenyan, A), is_better(A, B), is_better(B, C))) ::: (C) A, B, and C are Kenyan players, American players, and German players.\nis_true(And(is_better(American, German), is_better(German, Kenyan))) ::: (D) The American player is the champion, the German player is the runner-up, and the Kenyan player is the third."
    ]
  },
  {
    "id": 133,
    "context": "Recently, hundreds of seals died from eating a fish contaminated with chemicals.Even small amounts of this chemical can poison mammals.However, some people have not been poisoned after eating this fish.",
    "question": "Which of the following, if correct, is most helpful in explaining the contradictions in the above statement?",
    "answer": "B",
    "options": [
      "A.The fish contaminated with this chemical has not been harmed by the chemical itself.",
      "B.Toxic chemicals gather in the parts of the fish that seals eat but people don't.",
      "C.Traces of this chemical poison were also found in the bodies of some people who ate neither fish nor fish products.",
      "D.Fish contaminated with this chemical only accounts for a small portion of the seal 's total food intake."
    ],
    "raw_logic_programs": [
      "# Declarations\nfish = EnumSort([contaminated_fish])\nmammals = EnumSort([seals, people])\npoisoned = Function([mammals] -> [bool])\nchemical = EnumSort([toxic_chemical])\n\n# Constraints\npoisoned(seals) == True ::: Hundreds of seals died from eating a fish contaminated with chemicals\npoisoned(people) == False ::: Some people have not been poisoned after eating this fish\nForAll([f:fish], Implies(Contains(f, chemical), poisoned(mammals))) ::: Even small amounts of this chemical can poison mammals\n\n# Options\nQuestion ::: Which of the following, if correct, is most helpful in explaining the contradictions in the above statement?\nis_helpful(And(Contains(contaminated_fish, chemical), Not(poisoned(people)))) ::: (A)\nis_helpful(And(Contains(contaminated_fish, chemical), Not(poisoned(seals)))) ::: (B)\nis_helpful(And(Exists([m:mammals], poisoned(m) == True), Not(poisoned(people)))) ::: (C)\nis_helpful(And(Contains(contaminated_fish, chemical), Not(Contains(chemical, seals)))) ::: (D)"
    ]
  },
  {
    "id": 134,
    "context": "The United States adopted such a policy after the '9.11' terrorist attack? 'Either stand with us to fight terrorism, then you are our friend; or do not stand with us, then you are us Enemy.'",
    "question": "Which of the following is different from the expression in the stem?",
    "answer": "C",
    "options": [
      "A.There is a car advertisement? 'Or if you drive Cadillac, then you are rich; or if you don't drive at all, then you are poor!'",
      "B.People who take football as a profession have only two destinies? either win, then you are a hero, face flowers, cheers, money, beauty; or lose, then you are a scumbag, a fool, face reproach, anger, verbal abuse, and beat your teeth Swallow it.",
      "C.If a professor has enough ability, he can even train stupid students; therefore, if he cannot train stupid students, it means that his ability is not enough.",
      "D.Either you are a morally noble person, then you will selflessly contribute everything to yourself; or if you are a mean person, then you will do whatever you want for personal gain."
    ],
    "raw_logic_programs": [
      "# Declarations\npolicy = EnumSort([stand_with_us, do_not_stand_with_us])\nfriendship = EnumSort([friend, enemy])\nexpression = Function([policy] -> [friendship])\n\n# Constraints\nexpression(stand_with_us) == friend ::: If you stand with us to fight terrorism, then you are our friend\nexpression(do_not_stand_with_us) == enemy ::: If you do not stand with us, then you are our enemy\n\n# Options\nQuestion ::: Which of the following is different from the expression in the stem?\nis_different(expression(stand_with_us) == friend, expression(stand_with_us) == rich) ::: (A)\nis_different(expression(stand_with_us) == friend, expression(stand_with_us) == hero) ::: (B)\nis_different(expression(stand_with_us) == friend, expression(stand_with_us) == not_enough_ability) ::: (C)\nis_different(expression(stand_with_us) == friend, expression(stand_with_us) == selfless_contribution) ::: (D)"
    ]
  },
  {
    "id": 135,
    "context": "A television advertisement said that grassland green birds and chickens, hungry to eat grass and greedy to eat grasshoppers, seem to imply that the nutritional value of the breeder chicken and its eggs is related to the grassland food eaten by the breeder chicken.",
    "question": "To verify this conclusion, which of the following experimental methods is the most reliable?",
    "answer": "C",
    "options": [
      "A.Select an excellent breed of laying hens to feed on the grassland, and then compare with the nutrient composition of the common chickens fed on the grassland.",
      "B.Test and compare the nutritional content of chicken food on grassland and non-grassland chicken food.",
      "C.Choose laying hens of the same breed grade, half of them are fed on the grassland and half are fed on the non-steppe, and then compare their nutritional content.",
      "D.Select different breeds of laying hens, feed them on the grassland, and compare their nutritional content."
    ],
    "raw_logic_programs": [
      "# Declarations\nbreeds = EnumSort([excellent_breed, common_breed, same_breed_grade, different_breeds])\nfood_sources = EnumSort([grassland, non_grassland])\nnutritional_content = Function([breeds, food_sources] -> [nutritional_value])\n\n# Constraints\nForAll([b:breeds], And(nutritional_content(excellent_breed, grassland), nutritional_content(common_breed, grassland))) ::: Select an excellent breed of laying hens to feed on the grassland, and then compare with the nutrient composition of the common chickens fed on the grassland.\nForAll([f:food_sources], And(nutritional_content(same_breed_grade, grassland), nutritional_content(same_breed_grade, non_grassland))) ::: Test and compare the nutritional content of chicken food on grassland and non-grassland chicken food.\nForAll([b:same_breed_grade], And(nutritional_content(b, grassland), nutritional_content(b, non_grassland))) ::: Choose laying hens of the same breed grade, half of them are fed on the grassland and half are fed on the non-steppe, and then compare their nutritional content.\nForAll([b:different_breeds], nutritional_content(b, grassland)) ::: Select different breeds of laying hens, feed them on the grassland, and compare their nutritional content.\n\n# Options\nQuestion ::: To verify this conclusion, which of the following experimental methods is the most reliable?\nis_reliable(And(nutritional_content(same_breed_grade, grassland), nutritional_content(same_breed_grade, non_grassland))) ::: (A)\nis_reliable(And(nutritional_content(same_breed_grade, grassland), nutritional_content(common_breed, non_grassland))) ::: (B)\nis_reliable(And(nutritional_content(same_breed_grade, grassland), nutritional_content(different_breeds, grassland))) ::: (C)\nis_reliable(And(nutritional_content(different_breeds, grassland), nutritional_content(different_breeds, non_grassland))) ::: (D)"
    ]
  },
  {
    "id": 136,
    "context": "The salesperson said to customers? 'The compressor is the core component of the refrigerator.The Penguin refrigerator uses the same high quality compressor as the Polar Bear refrigerator.Because the price of the Penguin refrigerator is much lower than that of the Polar Bear refrigerator So, when you buy a Penguin refrigerator instead of a Polar Bear refrigerator, you can get the same cooling effect with less money.'",
    "question": "Which of the following, if proven, can reasonably lead to the salesperson 's conclusion?",
    "answer": "C",
    "options": [
      "A.Polar bear brand refrigerators have more advertisements than penguin brand refrigerators.",
      "B.The salesperson earned less revenue from selling a Penguin refrigerator than from selling a Polar Bear refrigerator.",
      "C.The refrigeration effect of a refrigerator is solely determined by the quality of its compressor.",
      "D.The annual sales volume of refrigerators is larger than the annual sales volume of Polar Bear refrigerators."
    ],
    "raw_logic_programs": [
      "# Declarations\nrefrigerators = EnumSort([Penguin, PolarBear])\ncomponents = EnumSort([compressor])\nquality = Function([refrigerators, components] -> [bool])\nprice = Function([refrigerators] -> [int])\ncooling_effect = Function([refrigerators] -> [int])\n\n# Constraints\nquality(Penguin, compressor) == quality(PolarBear, compressor) ::: The Penguin refrigerator uses the same high quality compressor as the Polar Bear refrigerator\nprice(Penguin) < price(PolarBear) ::: The price of the Penguin refrigerator is much lower than that of the Polar Bear refrigerator\ncooling_effect(Penguin) == cooling_effect(PolarBear) ::: When you buy a Penguin refrigerator instead of a Polar Bear refrigerator, you can get the same cooling effect\n\n# Options\nQuestion ::: Which of the following, if proven, can reasonably lead to the salesperson's conclusion?\nis_valid(Implies(quality(Penguin, compressor) == true, cooling_effect(Penguin) == cooling_effect(PolarBear))) ::: (A) Polar bear brand refrigerators have more advertisements than penguin brand refrigerators.\nis_valid(Implies(price(Penguin) < price(PolarBear), revenue(Penguin) < revenue(PolarBear))) ::: (B) The salesperson earned less revenue from selling a Penguin refrigerator than from selling a Polar Bear refrigerator.\nis_valid(Implies(quality(Penguin, compressor) == true, cooling_effect(Penguin) == cooling_effect(PolarBear))) ::: (C) The refrigeration effect of a refrigerator is solely determined by the quality of its compressor.\nis_valid(Implies(sales_volume(refrigerators) > sales_volume(PolarBear), sales_volume(Penguin) > sales_volume(PolarBear))) ::: (D) The annual sales volume of refrigerators is larger than the annual sales volume of Polar Bear refrigerators."
    ]
  },
  {
    "id": 137,
    "context": "Some people firmly believe that there are other advanced civilizations other than human civilization in the universe, because there is no theory and evidence to prove that such a civilization cannot exist.",
    "question": "Which of the following options is the same as the argument in the question stem?",
    "answer": "B",
    "options": [
      "A.There are savages in the Shennongjia area because someone has seen the savages.",
      "B.Since you can't prove that ghosts don't exist, so ghosts exist.",
      "C.Scientists are not born smart, for example, Einstein did not seem very smart when he was a child.",
      "D.A scholastic philosopher does not believe that human nerves converge in the brain.The reason is that in Aristotle's writings, nerves are generated from the heart."
    ],
    "raw_logic_programs": [
      "# Declarations\nbeliefs = EnumSort([advanced_civilizations, ghosts, savages, scientists, philosophers])\nevidence = EnumSort([theory, proof, observation])\nclaims = Function([beliefs] -> [evidence])\n\n# Constraints\nclaims(advanced_civilizations) == proof_not_exist ::: There is no theory and evidence to prove that such a civilization cannot exist\nclaims(ghosts) == proof_not_exist ::: There is no theory and evidence to prove that ghosts cannot exist\nclaims(savages) == observation ::: Someone has seen the savages\nclaims(scientists) == observation ::: Example of Einstein not seeming smart when he was a child\nclaims(philosophers) == writings ::: In Aristotle's writings, nerves are generated from the heart\n\n# Options\nQuestion ::: Which of the following options is the same as the argument in the question stem?\nis_equivalent(claims(advanced_civilizations) == claims(ghosts)) ::: (A)\nis_equivalent(claims(ghosts) == proof_not_exist) ::: (B)\nis_equivalent(claims(scientists) == observation) ::: (C)\nis_equivalent(claims(philosophers) == writings) ::: (D)"
    ]
  },
  {
    "id": 138,
    "context": "There are four assertions about a criminal case? (1) There is evidence that Chen Hu did not commit the crime; (2) The perpetrator is either Wang Guang, Chen Hu, or Zhu Tong; (3) There is also evidence that Wang Guang did not commit the crime; (4) The TV screen showed? At the time of the incident, Zhu Tong was in the auditorium of a football game away from the crime scene.",
    "question": "Which of the following is a correct description of the four assertions in the stem?",
    "answer": "B",
    "options": [
      "A.It can be deduced from the above assertion? there is only one crime.",
      "B.At least one of the above assertions is false.",
      "C.From these assertions, it can be concluded that the evidence that Wang Guang did not commit the crime is false.",
      "D.Zhu Tong is definitely not in the audience of the football match."
    ],
    "raw_logic_programs": [
      "# Declarations\nassertions = EnumSort([evidence_chen_hu, perpetrator, evidence_wang_guang, zhu_tong_location])\ncommitted = Function([assertions] -> [bool])\n\n# Constraints\ncommitted(evidence_chen_hu) == false ::: There is evidence that Chen Hu did not commit the crime\nOr(committed(Wang_Guang), committed(Chen_Hu), committed(Zhu_Tong)) ::: The perpetrator is either Wang Guang, Chen Hu, or Zhu Tong\ncommitted(evidence_wang_guang) == false ::: There is also evidence that Wang Guang did not commit the crime\nzhu_tong_location == auditorium ::: At the time of the incident, Zhu Tong was in the auditorium of a football game away from the crime scene\n\n# Options\nQuestion ::: Which of the following is a correct description of the four assertions in the stem?\nis_valid(Exists([x:assertions], committed(x) == false)) ::: (A) It can be deduced from the above assertion that there is only one crime.\nis_valid(Exists([x:assertions], committed(x) == false)) ::: (B) At least one of the above assertions is false.\nis_valid(Implies(committed(evidence_wang_guang), committed(evidence_wang_guang) == false)) ::: (C) From these assertions, it can be concluded that the evidence that Wang Guang did not commit the crime is false.\nis_valid(Not(zhu_tong_location == auditorium)) ::: (D) Zhu Tong is definitely not in the audience of the football match."
    ]
  },
  {
    "id": 139,
    "context": "TV commercial? Well, this wine should be a little longer and the craft should be more refined.Good wine, you can drink a little.(Advertisers looked at Bancheng Shaoguo in their hands) Well, Bancheng Shaoguo, you can drink a little.",
    "question": "In order to make the last sentence in the subject a logical inference from the previous sentences, which of the following premises needs to be added?",
    "answer": "C",
    "options": [
      "A.Moutai is the most famous good wine in China.",
      "C.Wuliangye and Bancheng Shaojiao are good wines.",
      "B.It's been a long time for Bancheng casserole wine.",
      "D.The craft of Bancheng casserole is excellent."
    ],
    "raw_logic_programs": [
      "To formulate the problem as a logic program, we will follow the structure of Declarations, Constraints, and Options as specified.\n\n### Problem:\nTV commercial? Well, this wine should be a little longer and the craft should be more refined. Good wine, you can drink a little. (Advertisers looked at Bancheng Shaoguo in their hands) Well, Bancheng Shaoguo, you can drink a little.\n\n### Question:\nIn order to make the last sentence in the subject a logical inference from the previous sentences, which of the following premises needs to be added?\n\n### Choices:\n(A) Moutai is the most famous good wine in China.  \n(B) It's been a long time for Bancheng casserole wine.  \n(C) Wuliangye and Bancheng Shaojiao are good wines.  \n(D) The craft of Bancheng casserole is excellent.  \n\n### Logic Program\n\n#### Declarations\nwines = EnumSort([Bancheng_Shaoguo, Moutai, Wuliangye, Bancheng_Shaojiao])\nqualities = EnumSort([good_wine, refined_craft, drinkable])\nattributes = Function([wines] -> [qualities])\n\n#### Constraints\nattributes(Bancheng_Shaoguo) == good_wine ::: Bancheng Shaoguo is a good wine.\nattributes(Bancheng_Shaoguo) == refined_craft ::: The craft of Bancheng Shaoguo is refined.\nForAll([w:wines], Implies(attributes(w) == good_wine, drinkable(w))) ::: If a wine is good, it can be drunk.\n\n#### Options\nQuestion ::: In order to make the last sentence in the subject a logical inference from the previous sentences, which of the following premises needs to be added?\nis_valid(attributes(Moutai) == good_wine) ::: (A)\nis_valid(attributes(Bancheng_Shaoguo) == drinkable) ::: (B)\nis_valid(And(attributes(Wuliangye) == good_wine, attributes(Bancheng_Shaojiao) == good_wine)) ::: (C)\nis_valid(attributes(Bancheng_Shaoguo) == refined_craft) ::: (D)\n\n### Explanation\n- **Declarations** define the entities involved (wines and their qualities).\n- **Constraints** establish the relationships and properties of the wines based on the information provided in the problem.\n- **Options** present the premises that could logically support the inference that Bancheng Shaoguo is drinkable based on its classification as a good wine and having refined craft. \n\nThis structure allows us to analyze which premise is necessary to support the conclusion drawn in the last sentence of the problem."
    ]
  },
  {
    "id": 140,
    "context": "European fern is a poisonous wild grass that has spread and destroyed many pastures in the northern hemisphere in recent years.One way to deal with this wild grass is to spend less money and be self-sustaining by introducing the natural enemy of this plant.Therefore, some scientists suggested that the moths that feed on the European fern produced in the southern hemisphere were released into the northern hemisphere affected by this wild grass to control the growth of the European fern.",
    "question": "If the scientist 's proposal to control the European fern is adopted, which of the following is necessary for its success?",
    "answer": "C",
    "options": [
      "A.This northern fern of the northern hemisphere also grows in areas with similar climate and soil conditions in the southern hemisphere.",
      "B.In addition to eating European ferns, the moths they stock also eat other wild grasses that grow in the northern hemisphere.",
      "C.The stocked moths can survive in the northern hemisphere and can form a large enough group to reduce the number of European ferns and prevent their growth.",
      "D.When the number of European ferns decreases, livestock will become immune to diseases caused by this wild grass."
    ],
    "raw_logic_programs": [
      "# Declarations\nproposals = EnumSort([control_european_fern])\nconditions = EnumSort([survival_of_moths, eating_other_grasses, immunity_of_livestock, growth_conditions])\nsuccess = Function([proposals] -> [conditions])\n\n# Constraints\nsuccess(control_european_fern) == survival_of_moths ::: The stocked moths can survive in the northern hemisphere and can form a large enough group to reduce the number of European ferns and prevent their growth.\nsuccess(control_european_fern) == eating_other_grasses ::: In addition to eating European ferns, the moths they stock also eat other wild grasses that grow in the northern hemisphere.\nsuccess(control_european_fern) == immunity_of_livestock ::: When the number of European ferns decreases, livestock will become immune to diseases caused by this wild grass.\nsuccess(control_european_fern) == growth_conditions ::: This northern fern of the northern hemisphere also grows in areas with similar climate and soil conditions in the southern hemisphere.\n\n# Options\nQuestion ::: If the scientist's proposal to control the European fern is adopted, which of the following is necessary for its success?\nis_valid(success(control_european_fern) == survival_of_moths) ::: (A)\nis_valid(success(control_european_fern) == eating_other_grasses) ::: (B)\nis_valid(success(control_european_fern) == immunity_of_livestock) ::: (C)\nis_valid(success(control_european_fern) == growth_conditions) ::: (D)"
    ]
  },
  {
    "id": 141,
    "context": "Koreans love sauerkraut and Cuihua loves sauerkraut, so Cuihua is Korean.",
    "question": "Which of the following options most clearly shows the absurdity of the above reasoning?",
    "answer": "B",
    "options": [
      "A.All Cretans are lying, John is Cretan, so John is lying.",
      "B.Walking animals have legs, and tables have legs, so tables are walking animals.",
      "C.Nishimura loves Cuihua.Cuihua loves pickled cabbage.Therefore, Nishimura loves pickled cabbage.",
      "D.All gold glitters, so some glitters are gold."
    ],
    "raw_logic_programs": [
      "To formulate the problem as a logic program, we will follow the structure of Declarations, Constraints, and Options as specified.\n\n### Problem:\nKoreans love sauerkraut and Cuihua loves sauerkraut, so Cuihua is Korean.\n\n### Question:\nWhich of the following options most clearly shows the absurdity of the above reasoning?\n\n### Choices:\n(A) All Cretans are lying, John is Cretan, so John is lying.  \n(B) Walking animals have legs, and tables have legs, so tables are walking animals.  \n(C) Nishimura loves Cuihua. Cuihua loves pickled cabbage. Therefore, Nishimura loves pickled cabbage.  \n(D) All gold glitters, so some glitters are gold.\n\n### Logic Program\n\n#### Declarations\n- `people = EnumSort([Cuihua, John, Nishimura])`\n- `nationalities = EnumSort([Korean, Cretan])`\n- `foods = EnumSort([sauerkraut, pickled_cabbage])`\n- `loves = Function([people, foods] -> [bool])`\n- `is = Function([people] -> [nationalities])`\n\n#### Constraints\n- `loves(Korean, sauerkraut)` ::: Koreans love sauerkraut.\n- `loves(Cuihua, sauerkraut)` ::: Cuihua loves sauerkraut.\n- `is(Cuihua) == Korean` ::: Cuihua is Korean based on the reasoning provided.\n\n#### Options\n- Question ::: Which of the following options most clearly shows the absurdity of the above reasoning?\n- `is_absurd(And(is(John) == Cretan, loves(John, sauerkraut)))` ::: (A)\n- `is_absurd(And(loves(Walking_Animal, legs), loves(Table, legs), Not(Walking_Animal == Table)))` ::: (B)\n- `is_absurd(And(loves(Nishimura, Cuihua), loves(Cuihua, pickled_cabbage), Not(loves(Nishimura, pickled_cabbage)))` ::: (C)\n- `is_absurd(And(All(glitters), Not(Some(glitters == gold)))` ::: (D)\n\n### Summary\nThis logic program captures the reasoning and absurdity of the original argument by establishing the relationships between people, their nationalities, and their preferences for food. The options provided illustrate different forms of logical fallacies that parallel the flawed reasoning in the original statement."
    ]
  },
  {
    "id": 142,
    "context": "Workers of state-owned enterprises are laid off and migrant workers enter the city, causing a high unemployment rate and a great threat to social stability.Therefore, we must increase the scale of economic development and accelerate the speed of economic development.",
    "question": "Which of the following provides the strongest support for the argument in the question stem?",
    "answer": "B",
    "options": [
      "A.Only by increasing the scale of economic development and accelerating the speed of economic development can more jobs be created.",
      "B.There is a certain relationship between the scale and speed of economic development and the social employment rate.",
      "C.If a person is unemployed, it will affect the life of himself and his family.",
      "D.Unemployed people are easily irritable, emotionally depressed, and deviant."
    ],
    "raw_logic_programs": [
      "# Declarations\neconomic_development = EnumSort([scale, speed])\nemployment_rate = EnumSort([high, low])\njobs_created = Function([economic_development] -> [int])\nsocial_stability = Function([employment_rate] -> [bool])\n\n# Constraints\nForAll([e:economic_development], jobs_created(e) > 0) ::: Increasing the scale and speed of economic development can create jobs\nemployment_rate(low) == Not(social_stability(low)) ::: A low employment rate threatens social stability\nemployment_rate(high) == social_stability(high) ::: A high employment rate supports social stability\n\n# Options\nQuestion ::: Which of the following provides the strongest support for the argument in the question stem?\nis_strong_support(Only(jobs_created(scale) > 0, jobs_created(speed) > 0)) ::: (A)\nis_strong_support(Exists([e:economic_development], And(jobs_created(e) > 0, social_stability(high)))) ::: (B)\nis_strong_support(Implies(employment_rate(low), Not(social_stability(low)))) ::: (C)\nis_strong_support(Implies(employment_rate(low), emotional_state(irritable))) ::: (D)"
    ]
  },
  {
    "id": 143,
    "context": "There are six switches S, T, W, X, Y, and Z in a circuit.The following conditions must be met when using these switches? (1) If W is on, then X must be on; (2) Only off Turn on S to turn off T; (3) T and X cannot be connected at the same time, nor can they be turned off at the same time; (4) If Y and Z are turned on at the same time, then W must also be turned on.",
    "question": "If S and Z are now connected at the same time, which of the following must be true?",
    "answer": "A",
    "options": [
      "A.T is the on state and Y is the off state.",
      "C.Both T and Y are off.",
      "B.Both W and T are on.",
      "D.X is the on state and Y is the off state."
    ],
    "raw_logic_programs": [
      "# Declarations\nswitches = EnumSort([S, T, W, X, Y, Z])\nstate = EnumSort([on, off])\nstatus = Function([switches] -> [state])\n\n# Constraints\nImplies(status(W) == on, status(X) == on) ::: If W is on, then X must be on\nImplies(status(S) == on, status(T) == off) ::: Only off Turn on S to turn off T\nAnd(Implies(status(T) == on, status(X) == off), Implies(status(X) == on, status(T) == off)) ::: T and X cannot be connected at the same time, nor can they be turned off at the same time\nImplies(And(status(Y) == on, status(Z) == on), status(W) == on) ::: If Y and Z are turned on at the same time, then W must also be turned on\n\n# Options\nQuestion ::: If S and Z are now connected at the same time, which of the following must be true?\nis_true(status(T) == on && status(Y) == off) ::: (A)\nis_true(status(W) == on && status(T) == on) ::: (B)\nis_true(status(T) == off && status(Y) == off) ::: (C)\nis_true(status(X) == on && status(Y) == off) ::: (D)"
    ]
  },
  {
    "id": 144,
    "context": "There are 7 heart disease patients E, F, G, H, I, J, K to be assigned to 4 doctors for treatment, they are Dr.Zhang, Dr.Li, Dr.Wang and Dr.Liu.Only one doctor is responsible for each patient, and each doctor is responsible for the treatment of up to two patients.Among the patients, J and K are children, and the remaining 5 are adults; E, F, and J are males, and the remaining 4 are females.The following conditions must be met? (1) Dr.Zhang is only responsible for treating male patients.(2) Dr.Li can only be responsible for the treatment of 1 patient.(3) If a doctor is responsible for treating a child patient, then he must be responsible for the treatment of an adult patient of the same sex as the child.",
    "question": "Based on the above conditions, which of the following must be true?",
    "answer": "C",
    "options": [
      "A.Doctor F is responsible for treatment.",
      "C.J is treated by Dr.Zhang.",
      "B.C is treated by Dr.Liu.",
      "D.H is treated by Dr.Wang."
    ],
    "raw_logic_programs": [
      "# Declarations\npatients = EnumSort([E, F, G, H, I, J, K])\ndoctors = EnumSort([Dr_Zhang, Dr_Li, Dr_Wang, Dr_Liu])\nassigned = Function([patients] -> [doctors])\nis_male = Function([patients] -> [bool])\nis_child = Function([patients] -> [bool])\n\n# Constraints\nForAll([p:patients], Implies(is_male(p), assigned(p) == Dr_Zhang)) ::: Dr.Zhang is only responsible for treating male patients.\nCount([p:patients], assigned(p) == Dr_Li) <= 1 ::: Dr.Li can only be responsible for the treatment of 1 patient.\nForAll([d:doctors, p:patients], Implies(is_child(p), Exists([a:patients], And(assigned(p) == d, assigned(a) == d, is_male(a) == is_male(p))))) ::: If a doctor is responsible for treating a child patient, then he must be responsible for the treatment of an adult patient of the same sex as the child.\n\n# Options\nQuestion ::: Based on the above conditions, which of the following must be true?\nis_true(assigned(F) == Dr_Liu) ::: (A) Doctor F is responsible for treatment.\nis_true(assigned(J) == Dr_Zhang) ::: (B) J is treated by Dr.Zhang.\nis_true(assigned(C) == Dr_Liu) ::: (C) C is treated by Dr.Liu.\nis_true(assigned(H) == Dr_Wang) ::: (D) H is treated by Dr.Wang."
    ]
  },
  {
    "id": 145,
    "context": "There are 7 heart disease patients E, F, G, H, I, J, K to be assigned to 4 doctors for treatment, they are Dr.Zhang, Dr.Li, Dr.Wang and Dr.Liu.Only one doctor is responsible for each patient, and each doctor is responsible for the treatment of up to two patients.Among the patients, J and K are children, and the remaining 5 are adults; E, F, and J are males, and the remaining 4 are females.The following conditions must be met? (1) Dr.Zhang is only responsible for treating male patients.(2) Dr.Li can only be responsible for the treatment of 1 patient.(3) If a doctor is responsible for treating a child patient, then he must be responsible for the treatment of an adult patient of the same sex as the child.",
    "question": "Each of the following patients can be treated by Dr.Li, except which one?",
    "answer": "D",
    "options": [
      "A.E",
      "B.G",
      "C.I",
      "D.K"
    ],
    "raw_logic_programs": [
      "# Declarations\npatients = EnumSort([E, F, G, H, I, J, K])\ndoctors = EnumSort([Dr_Zhang, Dr_Li, Dr_Wang, Dr_Liu])\nassigned = Function([patients] -> [doctors])\ngender = EnumSort([male, female])\nage_group = EnumSort([adult, child])\npatient_gender = Function([patients] -> [gender])\npatient_age_group = Function([patients] -> [age_group])\n\n# Constraints\nForAll([p:patients], assigned(p) != assigned(p)) ::: Only one doctor is responsible for each patient\nForAll([d:doctors], Count([p:patients], assigned(p) == d) <= 2) ::: Each doctor is responsible for the treatment of up to two patients\nAnd(assigned(J) == assigned(K)) ::: J and K are children\nAnd(assigned(E) == male, assigned(F) == male, assigned(J) == male) ::: E, F, and J are males\nAnd(assigned(G) == female, assigned(H) == female, assigned(I) == female, assigned(K) == female) ::: Remaining patients are females\nForAll([p:patients], Implies(assigned(p) == Dr_Zhang, assigned(p) == male)) ::: Dr.Zhang is only responsible for treating male patients\nCount([p:patients], assigned(p) == Dr_Li) == 1 ::: Dr.Li can only be responsible for the treatment of 1 patient\nForAll([d:doctors, p:patients], Implies(assigned(p) == child, Exists([a:patients], And(assigned(a) == adult, assigned(a) == assigned(p) == gender)))) ::: If a doctor is responsible for treating a child patient, then he must be responsible for the treatment of an adult patient of the same sex as the child.\n\n# Options\nQuestion ::: Each of the following patients can be treated by Dr.Li, except which one?\nis_unsat(assigned(E) == Dr_Li) ::: (A)\nis_unsat(assigned(G) == Dr_Li) ::: (B)\nis_unsat(assigned(I) == Dr_Li) ::: (C)\nis_unsat(assigned(K) == Dr_Li) ::: (D)"
    ]
  },
  {
    "id": 146,
    "context": "There are 7 heart disease patients E, F, G, H, I, J, K to be assigned to 4 doctors for treatment, they are Dr.Zhang, Dr.Li, Dr.Wang and Dr.Liu.Only one doctor is responsible for each patient, and each doctor is responsible for the treatment of up to two patients.Among the patients, J and K are children, and the remaining 5 are adults; E, F, and J are males, and the remaining 4 are females.The following conditions must be met? (1) Dr.Zhang is only responsible for treating male patients.(2) Dr.Li can only be responsible for the treatment of 1 patient.(3) If a doctor is responsible for treating a child patient, then he must be responsible for the treatment of an adult patient of the same sex as the child.",
    "question": "If E is treated by Dr.Wang, which of the following must be true?",
    "answer": "C",
    "options": [
      "A.Doctor F is responsible for treatment.",
      "C.H is treated by Dr.Liu.",
      "B.G is treated by Dr.Wang.",
      "D.K is treated by Dr.Liu."
    ],
    "raw_logic_programs": [
      "# Declarations\npatients = EnumSort([E, F, G, H, I, J, K])\ndoctors = EnumSort([Dr_Zhang, Dr_Li, Dr_Wang, Dr_Liu])\nassigned = Function([patients] -> [doctors])\nCountPatients = Function([doctors] -> [int])\n\n# Constraints\nForAll([p:patients], CountPatients(assigned(p)) <= 2) ::: each doctor is responsible for the treatment of up to two patients\nAnd(assigned(J) == Dr_Li, assigned(K) == Dr_Li) ::: J and K are children\nAnd(assigned(E) == Dr_Zhang, assigned(F) == Dr_Zhang, assigned(J) == Dr_Zhang) ::: Dr.Zhang is only responsible for treating male patients\nCountPatients(Dr_Li) == 1 ::: Dr.Li can only be responsible for the treatment of 1 patient\nForAll([d:doctors, c:patients], Implies(assigned(c) == d, Exists([a:patients], And(assigned(a) == d, Gender(c) == Gender(a))))) ::: If a doctor is responsible for treating a child patient, then he must be responsible for the treatment of an adult patient of the same sex as the child.\n\n# Options\nQuestion ::: If E is treated by Dr.Wang, which of the following must be true?\nis_true(assigned(F) == Dr_Li) ::: (A) Doctor F is responsible for treatment.\nis_true(assigned(G) == Dr_Wang) ::: (B) G is treated by Dr.Wang.\nis_true(assigned(H) == Dr_Liu) ::: (C) H is treated by Dr.Liu.\nis_true(assigned(K) == Dr_Liu) ::: (D) K is treated by Dr.Liu."
    ]
  },
  {
    "id": 147,
    "context": "There are 7 heart disease patients E, F, G, H, I, J, K to be assigned to 4 doctors for treatment, they are Dr.Zhang, Dr.Li, Dr.Wang and Dr.Liu.Only one doctor is responsible for each patient, and each doctor is responsible for the treatment of up to two patients.Among the patients, J and K are children, and the remaining 5 are adults; E, F, and J are males, and the remaining 4 are females.The following conditions must be met? (1) Dr.Zhang is only responsible for treating male patients.(2) Dr.Li can only be responsible for the treatment of 1 patient.(3) If a doctor is responsible for treating a child patient, then he must be responsible for the treatment of an adult patient of the same sex as the child.",
    "question": "If Dr.Li is responsible for the treatment of G, which of the following may be true?",
    "answer": "B",
    "options": [
      "A.Dr.Liu is responsible for the treatment of E and F.",
      "C.H and I are treated by Dr.Liu.",
      "B.I and K are treated by Dr.Wang.",
      "D.Dr.Wang is responsible for the treatment of E and K."
    ],
    "raw_logic_programs": [
      "# Declarations\npatients = EnumSort([E, F, G, H, I, J, K])\ndoctors = EnumSort([Dr_Zhang, Dr_Li, Dr_Wang, Dr_Liu])\nassigned = Function([patients] -> [doctors])\ngender = Function([patients] -> [EnumSort([male, female])])\nis_child = Function([patients] -> [bool])\n\n# Constraints\nForAll([p:patients], Count([d:doctors], assigned(p) == d) == 1) ::: Only one doctor is responsible for each patient\nForAll([d:doctors], Count([p:patients], assigned(p) == d) <= 2) ::: Each doctor is responsible for the treatment of up to two patients\nAnd(is_child(J), is_child(K)) ::: J and K are children\nAnd(gender(E) == male, gender(F) == male, gender(J) == male, gender(G) == female, gender(H) == female, gender(I) == female, gender(K) == female) ::: E, F, and J are males; the remaining 4 are females\nassigned(Dr_Zhang) == male ::: Dr.Zhang is only responsible for treating male patients\nCount([p:patients], assigned(Dr_Li) == p) == 1 ::: Dr.Li can only be responsible for the treatment of 1 patient\nForAll([d:doctors, c:patients], Implies(is_child(c), Exists([a:patients], And(assigned(c) == d, assigned(a) == d, gender(c) == gender(a))))) ::: If a doctor is responsible for treating a child patient, then he must be responsible for the treatment of an adult patient of the same sex as the child\n\n# Options\nQuestion ::: If Dr.Li is responsible for the treatment of G, which of the following may be true?\nis_valid(And(assigned(E) == Dr_Liu, assigned(F) == Dr_Liu)) ::: (A) Dr.Liu is responsible for the treatment of E and F.\nis_valid(And(assigned(I) == Dr_Wang, assigned(K) == Dr_Wang)) ::: (B) I and K are treated by Dr.Wang.\nis_valid(And(assigned(H) == Dr_Liu, assigned(I) == Dr_Liu)) ::: (C) H and I are treated by Dr.Liu.\nis_valid(And(assigned(E) == Dr_Wang, assigned(K) == Dr_Wang)) ::: (D) Dr.Wang is responsible for the treatment of E and K."
    ]
  },
  {
    "id": 148,
    "context": "There are 7 heart disease patients E, F, G, H, I, J, K to be assigned to 4 doctors for treatment, they are Dr.Zhang, Dr.Li, Dr.Wang and Dr.Liu.Only one doctor is responsible for each patient, and each doctor is responsible for the treatment of up to two patients.Among the patients, J and K are children, and the remaining 5 are adults; E, F, and J are males, and the remaining 4 are females.The following conditions must be met? (1) Dr.Zhang is only responsible for treating male patients.(2) Dr.Li can only be responsible for the treatment of 1 patient.(3) If a doctor is responsible for treating a child patient, then he must be responsible for the treatment of an adult patient of the same sex as the child.",
    "question": "According to the question, which of the following must be true?",
    "answer": "A",
    "options": [
      "A.Dr.Wang is responsible for treating at least one female patient.",
      "B.Dr.Wang is responsible for treating at least one child patient.",
      "C.Dr.Liu is responsible for treating at least one male patient.",
      "D.Dr.Liu is responsible for treating at least one child patient."
    ],
    "raw_logic_programs": [
      "# Declarations\npatients = EnumSort([E, F, G, H, I, J, K])\ndoctors = EnumSort([Dr_Zhang, Dr_Li, Dr_Wang, Dr_Liu])\nassigned = Function([patients] -> [doctors])\nmale_patients = EnumSort([E, F, J])  # Males: E, F, J\nfemale_patients = EnumSort([G, H, I, K])  # Females: G, H, I, K\nchildren = EnumSort([J, K])  # Children: J, K\nadults = EnumSort([E, F, G, H, I])  # Adults: E, F, G, H, I\n\n# Constraints\nForAll([p:patients], Count([d:doctors], assigned(p) == d) == 1) ::: Each patient is assigned to exactly one doctor\nForAll([d:doctors], Count([p:patients], assigned(p) == d) <= 2) ::: Each doctor can treat up to two patients\nAnd(ForAll([m:male_patients], assigned(m) == Dr_Zhang)) ::: Dr.Zhang treats only male patients\nCount([p:patients], assigned(p) == Dr_Li) == 1 ::: Dr.Li can only treat one patient\nForAll([d:doctors, c:children], Implies(assigned(c) == d, Exists([a:adults], And(assigned(a) == d, (a in male_patients) == (c in male_patients))))) ::: If a doctor treats a child, they must treat an adult of the same sex\n\n# Options\nQuestion ::: According to the question, which of the following must be true?\nis_true(Exists([f:female_patients], assigned(f) == Dr_Wang)) ::: (A) Dr.Wang is responsible for treating at least one female patient.\nis_true(Exists([c:children], assigned(c) == Dr_Wang)) ::: (B) Dr.Wang is responsible for treating at least one child patient.\nis_true(Exists([m:male_patients], assigned(m) == Dr_Liu)) ::: (C) Dr.Liu is responsible for treating at least one male patient.\nis_true(Exists([c:children], assigned(c) == Dr_Liu)) ::: (D) Dr.Liu is responsible for treating at least one child patient."
    ]
  },
  {
    "id": 149,
    "context": "Three Chinese students Zhang Lin, Zhao Qiang, Li Shan and three foreign students John, Jesse, and Anna went on a summer vacation.Alternative tourist destinations include Xi'an, Hangzhou, Dalian and Zhangjiajie.It is already known that? (1) each person can only go to one place; (2) wherever Chinese students go, foreign students must go; (3) where there are foreign students, Chinese students must go; (4) John went to Xi'an or Hangzhou, and Zhao Qiang went to Zhangjiajie.",
    "question": "If Jesse goes to Dalian, which of the following must be true?",
    "answer": "A",
    "options": [
      "A.Anna went to Zhangjiajie.",
      "C.Li Shan went to Xi'an.",
      "B.Zhang Lin went to Dalian.",
      "D.John went to Hangzhou."
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Zhang_Lin, Zhao_Qiang, Li_Shan, John, Jesse, Anna])\ndestinations = EnumSort([Xi_an, Hangzhou, Dalian, Zhangjiajie])\ngoes_to = Function([students] -> [destinations])\n\n# Constraints\nForAll([s:students], Count([d:destinations], goes_to(s) == d) == 1) ::: each person can only go to one place\nForAll([d:destinations], Implies(Exists([s:students], And(is_foreign(s), goes_to(s) == d)), Exists([s:students], And(is_chinese(s), goes_to(s) == d)))) ::: wherever Chinese students go, foreign students must go\nForAll([d:destinations], Implies(Exists([s:students], And(is_chinese(s), goes_to(s) == d)), Exists([s:students], And(is_foreign(s), goes_to(s) == d)))) ::: where there are foreign students, Chinese students must go\nOr(goes_to(John) == Xi_an, goes_to(John) == Hangzhou) ::: John went to Xi'an or Hangzhou\ngoes_to(Zhao_Qiang) == Zhangjiajie ::: Zhao Qiang went to Zhangjiajie\n\n# Options\nQuestion ::: If Jesse goes to Dalian, which of the following must be true?\nis_true(goes_to(Anna) == Zhangjiajie) ::: (A)\nis_true(goes_to(Zhang_Lin) == Dalian) ::: (B)\nis_true(goes_to(Li_Shan) == Xi_an) ::: (C)\nis_true(goes_to(John) == Hangzhou) ::: (D)"
    ]
  },
  {
    "id": 150,
    "context": "Three Chinese students Zhang Lin, Zhao Qiang, Li Shan and three foreign students John, Jesse, and Anna went on a summer vacation.Alternative tourist destinations include Xi'an, Hangzhou, Dalian and Zhangjiajie.It is already known that? (1) each person can only go to one place; (2) wherever Chinese students go, foreign students must go; (3) where there are foreign students, Chinese students must go; (4) John went to Xi'an or Hangzhou, and Zhao Qiang went to Zhangjiajie.",
    "question": "If the conclusion of the question is true, which two people cannot go to Hangzhou at the same time?",
    "answer": "C",
    "options": [
      "A.Zhang Lin and Li Shan",
      "B.Li Shan and Anna",
      "C.Jesse and Anna",
      "D.Zhang Lin and Jessie"
    ],
    "raw_logic_programs": [
      "# Declarations\nstudents = EnumSort([Zhang_Lin, Zhao_Qiang, Li_Shan, John, Jesse, Anna])\ndestinations = EnumSort([Xi_an, Hangzhou, Dalian, Zhangjiajie])\ngoes_to = Function([students] -> [destinations])\n\n# Constraints\nForAll([s:students], Count([d:destinations], goes_to(s) == d) == 1) ::: each person can only go to one place\nForAll([d:destinations], Implies(Exists([s:students], And(s == John, goes_to(s) == d)), Exists([s:students], goes_to(s) == d))) ::: wherever Chinese students go, foreign students must go\nForAll([d:destinations], Implies(Exists([s:students], And(s != John, goes_to(s) == d)), Exists([s:students], goes_to(s) == d))) ::: where there are foreign students, Chinese students must go\nOr(goes_to(John) == Xi_an, goes_to(John) == Hangzhou) ::: John went to Xi'an or Hangzhou\ngoes_to(Zhao_Qiang) == Zhangjiajie ::: Zhao Qiang went to Zhangjiajie\n\n# Options\nQuestion ::: If the conclusion of the question is true, which two people cannot go to Hangzhou at the same time?\nis_unsat(And(goes_to(Zhang_Lin) == Hangzhou, goes_to(Li_Shan) == Hangzhou)) ::: (A)\nis_unsat(And(goes_to(Li_Shan) == Hangzhou, goes_to(Anna) == Hangzhou)) ::: (B)\nis_unsat(And(goes_to(Jesse) == Hangzhou, goes_to(Anna) == Hangzhou)) ::: (C)\nis_unsat(And(goes_to(Zhang_Lin) == Hangzhou, goes_to(Jesse) == Hangzhou)) ::: (D)"
    ]
  }
]