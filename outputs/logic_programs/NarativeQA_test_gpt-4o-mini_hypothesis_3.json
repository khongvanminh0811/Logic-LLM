{
  "614": [
    {
      "id": 614,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 1,
      "paragraph": "Since the disappearance of his son Sean, PreCrime Captain John Anderton has separated from his wife Lara and becomes a drug addict. While United States Department of Justice agent Danny Witwer is auditing the program, the Precogs generate a new prediction, saying Anderton will murder a man named Leo Crow in 36 hours. Anderton does not know Crow, but flees the area as Witwer begins a manhunt. Anderton seeks the advice of Dr. Iris Hineman, the creator of PreCrime technology. She reveals that sometimes, one of the Precogs, usually Agatha, has a different vision than the other two, a \"minority report\" of a possible alternate future; this has been kept a secret as it would damage the system's credibility. Anderton resolves to recover the minority report to prove his innocence.",
      "question_template": "The main idea of The Origins of Totalitarianism is about [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "United States Department of Justice agent Danny Witwer"
      ],
      "predicates": [
        "Separated(a_2, a_3) ::: John Anderton has separated from his wife Lara.",
        "DrugAddict(a_2) ::: John Anderton has become a drug addict.",
        "Auditing(a_1, d) ::: Danny Witwer is auditing the PreCrime program.",
        "GeneratesPrediction(b_1, a_2, a_4, t) ::: The Precogs generate a prediction that Anderton will murder a man named Leo Crow in 36 hours.",
        "Flees(a_2, c_0) ::: John Anderton flees the area.",
        "SeeksAdvice(a_2, a_5) ::: John Anderton seeks the advice of Dr. Iris Hineman.",
        "Reveals(a_5, b_1) ::: Dr. Iris Hineman reveals information about the Precogs.",
        "HasDifferentVision(b_1, a_6) ::: One of the Precogs, usually Agatha, has a different vision than the other two.",
        "KeepsSecret(b_1) ::: The existence of the minority report is kept a secret.",
        "Resolves(a_2, b_1) ::: John Anderton resolves to recover the minority report."
      ],
      "premises": [
        "Separated(a_2, a_3) ::: John Anderton has separated from his wife Lara.",
        "DrugAddict(a_2) ::: John Anderton has become a drug addict.",
        "Auditing(a_1, d) ::: Danny Witwer is auditing the PreCrime program.",
        "GeneratesPrediction(b_1, a_2, a_4, 36) ::: The Precogs generate a prediction that Anderton will murder a man named Leo Crow in 36 hours.",
        "Flees(a_2, c_0) ::: John Anderton flees the area.",
        "SeeksAdvice(a_2, a_5) ::: John Anderton seeks the advice of Dr. Iris Hineman.",
        "Reveals(a_5, b_1) ::: Dr. Iris Hineman reveals information about the Precogs.",
        "HasDifferentVision(b_1, a_6) ::: One of the Precogs, usually Agatha, has a different vision than the other two.",
        "KeepsSecret(b_1) ::: The existence of the minority report is kept a secret.",
        "Resolves(a_2, b_1) ::: John Anderton resolves to recover the minority report to prove his innocence."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "615": [
    {
      "id": 615,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 4,
      "paragraph": "Witwer, studying Crow's death, suspects Anderton is being framed. He examines the footage of Lively's murder and finds there were two attempts on her life, the first having been stopped by PreCrime but the second, occurring minutes later, having succeeded. Witwer reports this to the director and founder of PreCrime, Lamar Burgess, but Burgess responds by killing Witwer using Anderton's gun. With the Precogs still offline, the murder is not detected.",
      "question_template": "[[CANDIDATE_ANSWER]] affected Nordau's view of this degeneration.",
      "candidate_answers": [
        "Lamar Burgess",
        "Burgess responds by killing Witwer using Anderton's gun"
      ],
      "predicates": [
        "Framed(x) ::: x is being framed.",
        "Suspects(x, y) ::: x suspects y.",
        "Examines(x, y) ::: x examines y.",
        "Reports(x, y) ::: x reports y to y.",
        "Kills(x, y) ::: x kills y.",
        "Detected(x) ::: x is detected.",
        "Offline(x) ::: x is offline."
      ],
      "premises": [
        "Suspects(witwer, anderton) ::: Witwer suspects Anderton is being framed.",
        "Examines(witwer, footageOfLivelysMurder) ::: Witwer examines the footage of Lively's murder.",
        "Reports(witwer, burgess) ::: Witwer reports this to Lamar Burgess.",
        "Kills(burgess, witwer) ::: Burgess kills Witwer using Anderton's gun.",
        "Offline(precogs) ::: The Precogs are offline.",
        "¬Detected(kills(witwer)) ::: Witwer's murder is not detected due to the Precogs being offline."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "616": [
    {
      "id": 616,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 2,
      "paragraph": "Anderton goes to a black market doctor for a risky eye transplant so as to avoid the city-wide optical recognition system. He returns to PreCrime and kidnaps Agatha, shutting down the system, as the Precogs operate as a group mind. Anderton takes Agatha to a hacker to extract the minority report of Leo Crow, but none exists; instead, Agatha shows him an image of the murder of Ann Lively, a woman who was drowned by a hooded figure in 2049.",
      "question_template": "The societies of [[CANDIDATE_ANSWER]] were specifically criticized by Nordau.",
      "candidate_answers": [
        "A woman who was drowned by a hooded figure in 2049"
      ],
      "predicates": [
        "GoesTo(x, y) ::: x goes to y.",
        "Kidnaps(x, y) ::: x kidnaps y.",
        "ShutsDown(x, y) ::: x shuts down y.",
        "OperatesAsGroupMind(x) ::: x operates as a group mind.",
        "Extracts(x, y, z) ::: x extracts y from z.",
        "Shows(x, y) ::: x shows y.",
        "Exists(x) ::: x exists.",
        "Murder(x, y) ::: x is the murder of y.",
        "DrownedBy(x, y) ::: x is drowned by y."
      ],
      "premises": [
        "GoesTo(anderton, blackMarketDoctor) ::: Anderton goes to a black market doctor for a risky eye transplant.",
        "ShutsDown(anderton, PreCrime) ::: Anderton shuts down the PreCrime system.",
        "OperatesAsGroupMind(precogs) ::: The Precogs operate as a group mind.",
        "Kidnaps(anderton, agatha) ::: Anderton kidnaps Agatha.",
        "Extracts(anderton, minorityReport, hacker) ::: Anderton takes Agatha to a hacker to extract the minority report of Leo Crow.",
        "¬Exists(minorityReport) ::: None exists; instead, Agatha shows him an image of the murder of Ann Lively.",
        "Shows(agatha, murderOfAnnLively) ::: Agatha shows him an image of the murder of Ann Lively.",
        "Murder(murderOfAnnLively, annLively) ::: The murder is of Ann Lively.",
        "DrownedBy(annLively, hoodedFigure) ::: Ann Lively was drowned by a hooded figure in 2049."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 616,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 3,
      "paragraph": "Anderton and Agatha go to Crow's apartment as the 36-hour time nears, finding numerous photos of children, including Sean's. Crow arrives and Anderton prepares to kill him, accusing him to be a serial child killer. Agatha talks Anderton out of shooting Crow by telling him that he has the ability to choose his future now that he is aware of it. Crow however begs to be killed, having been hired to plant the photos and be killed in exchange for his family's financial well being. Crow grabs Anderton's gun and pushes the trigger, killing himself. Anderton and Agatha flee to Lara's house outside the city for refuge. There they learn Lively was Agatha's drug-addicted mother who sold her to PreCrime. Lively had sobered up and attempted to reclaim Agatha, but was murdered. Anderton realizes he is being targeted for knowing about Lively's existence and her connection to Agatha.",
      "question_template": "The societies of [[CANDIDATE_ANSWER]] were specifically criticized by Nordau.",
      "candidate_answers": [
        "Lively was Agatha's drug-addicted mother who sold her to PreCrime.",
        "Lively had sobered up and attempted to reclaim Agatha, but was murdered."
      ],
      "predicates": [
        "Aware(x) ::: x is aware of their future.",
        "ChooseFuture(x) ::: x has the ability to choose their future.",
        "Targeted(x) ::: x is targeted for knowing about Lively's existence and her connection to Agatha.",
        "Killed(x) ::: x is killed.",
        "HiredToPlantPhotos(x) ::: x is hired to plant the photos.",
        "Flee(x, y) ::: x flees to location y.",
        "Mother(x, y) ::: x is the mother of y.",
        "Sold(x, y) ::: x sold y.",
        "SoberedUp(x) ::: x has sobered up.",
        "Murdered(x) ::: x is murdered."
      ],
      "premises": [
        "ChooseFuture(a_2) ∧ Aware(a_2) ::: Anderton has the ability to choose his future now that he is aware of it.",
        "Targeted(a_2) ::: Anderton is targeted for knowing about Lively's existence and her connection to Agatha.",
        "Killed(a_1) ∧ HiredToPlantPhotos(a_1) ::: Crow is killed and was hired to plant the photos.",
        "Flee(a_2, a_3) ::: Anderton flees to Lara's house for refuge.",
        "Mother(a_1, a_2) ∧ Sold(a_1, a_2) ∧ SoberedUp(a_1) ∧ Murdered(a_1) ::: Lively was Agatha's drug-addicted mother who sold her to PreCrime, had sobered up, and was murdered."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 616,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 6,
      "paragraph": "Agatha is reconnected to the PreCrime system. While attempting to comfort Lara, Burgess accidentally reveals himself as Lively's murderer. Lara frees Anderton from stasis, and Anderton exposes Burgess at a PreCrime celebratory banquet by playing the full video of Agatha's vision of Burgess killing Lively. A new report is generated at PreCrime: Burgess will kill Anderton. Burgess corners Anderton, and explains that as he could not afford to let Lively take Agatha back without impacting PreCrime, he arranged to kill Lively following an actual attempt on her life, so that the murder would appear as an echo to the technician within PreCrime and be ignored. Anderton points out Burgess's dilemma: If Burgess kills Anderton, he will be imprisoned for life, but PreCrime will be validated; if he spares Anderton, PreCrime will be discredited and shut down. Anderton reveals the ultimate flaw of the system: once people are aware of their future, they are able to change it. Burgess shoots himself.",
      "question_template": "The societies of [[CANDIDATE_ANSWER]] were specifically criticized by Nordau.",
      "candidate_answers": [
        "Lively's murderer",
        "Agatha is reconnected to the PreCrime system",
        "Burgess arranged to kill Lively"
      ],
      "predicates": [
        "Reconnected(a_1) ::: Burgess is reconnected to the PreCrime system.",
        "Murderer(a_1, a_2) ::: Burgess is the murderer of Lively.",
        "Freed(a_3, a_2) ::: Lara frees Anderton from stasis.",
        "Exposes(a_2, a_1) ::: Anderton exposes Burgess.",
        "GeneratedReport(d, a_1) ::: A new report is generated at PreCrime stating that Burgess will kill Anderton.",
        "Corners(a_1, a_2) ::: Burgess corners Anderton.",
        "Explains(a_1, a_2) ::: Burgess explains his actions to Anderton.",
        "Dilemma(a_1) ::: Burgess faces a moral dilemma.",
        "Imprisoned(a_1) ::: Burgess will be imprisoned for life if he kills Anderton.",
        "Validated(d) ::: PreCrime will be validated if Burgess kills Anderton.",
        "Discredited(d) ::: PreCrime will be discredited if Burgess spares Anderton.",
        "Flaw(d) ::: There is a flaw in the PreCrime system.",
        "Aware(a_0, f) ::: People are aware of their future.",
        "ChangeFuture(a_0) ::: People are able to change their future.",
        "Shoots(a_1) ::: Burgess shoots himself."
      ],
      "premises": [
        "Reconnected(burgess) ::: Agatha is reconnected to the PreCrime system.",
        "Murderer(burgess, lively) ::: Burgess accidentally reveals himself as Lively's murderer.",
        "Freed(lara, anderton) ::: Lara frees Anderton from stasis.",
        "Exposes(anderton, burgess) ::: Anderton exposes Burgess at a PreCrime celebratory banquet by playing the full video of Agatha's vision of Burgess killing Lively.",
        "GeneratedReport(d, burgess) ::: A new report is generated at PreCrime: Burgess will kill Anderton.",
        "Corners(burgess, anderton) ::: Burgess corners Anderton.",
        "Explains(burgess, anderton) ::: Burgess explains his actions to Anderton.",
        "Dilemma(burgess) ::: Burgess faces a moral dilemma regarding the lives of others.",
        "Imprisoned(burgess) → Validated(d) ::: If Burgess kills Anderton, he will be imprisoned for life, but PreCrime will be validated.",
        "Spared(burgess) → Discredited(d) ::: If Burgess spares Anderton, PreCrime will be discredited and shut down.",
        "Flaw(d) ::: Anderton reveals the ultimate flaw of the system: once people are aware of their future, they are able to change it.",
        "Shoots(burgess) ::: Burgess shoots himself.",
        "Conclusion:",
        "Dilemma(burgess) ::: Burgess's actions are driven by the need to protect the PreCrime system, leading to a moral dilemma regarding the lives of others."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "617": [
    {
      "id": 617,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 5,
      "paragraph": "Lara calls Burgess to reveal that Anderton is with her, and Anderton is captured, accused of both murders, and fitted with the brain device that puts him permanently into a dreamlike sleep. As his body is deposited into the prison, the warden tells him, \"that all your dreams come true.â",
      "question_template": "Nordau believes that people in fashionable society seek most [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Anderton is captured, accused of both murders, and fitted with the brain device that puts him permanently into a dreamlike sleep.",
        "His body is deposited into the prison."
      ],
      "predicates": [
        "Calls(x, y) ::: x calls y.",
        "Reveals(x, y) ::: x reveals y.",
        "Captured(x) ::: x is captured.",
        "Accused(x, y) ::: x is accused of y.",
        "FittedWithDevice(x) ::: x is fitted with a brain device.",
        "Deposited(x, y) ::: x is deposited into y.",
        "Tells(x, y) ::: x tells y.",
        "DreamsComeTrue(x) ::: x's dreams come true."
      ],
      "premises": [
        "Calls(lara, burgess) ::: Lara calls Burgess to reveal that Anderton is with her.",
        "Reveals(lara, anderton) ::: Lara reveals that Anderton is with her.",
        "Captured(anderton) ::: Anderton is captured.",
        "Accused(anderton, murders) ::: Anderton is accused of both murders.",
        "FittedWithDevice(anderton) ::: Anderton is fitted with the brain device that puts him permanently into a dreamlike sleep.",
        "Deposited(anderton, prison) ::: Anderton's body is deposited into the prison.",
        "Tells(warden, anderton) ::: The warden tells Anderton.",
        "DreamsComeTrue(anderton) ::: The warden tells him that all his dreams come true."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "618": [
    {
      "id": 618,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 6,
      "paragraph": "Agatha is reconnected to the PreCrime system. While attempting to comfort Lara, Burgess accidentally reveals himself as Lively's murderer. Lara frees Anderton from stasis, and Anderton exposes Burgess at a PreCrime celebratory banquet by playing the full video of Agatha's vision of Burgess killing Lively. A new report is generated at PreCrime: Burgess will kill Anderton. Burgess corners Anderton, and explains that as he could not afford to let Lively take Agatha back without impacting PreCrime, he arranged to kill Lively following an actual attempt on her life, so that the murder would appear as an echo to the technician within PreCrime and be ignored. Anderton points out Burgess's dilemma: If Burgess kills Anderton, he will be imprisoned for life, but PreCrime will be validated; if he spares Anderton, PreCrime will be discredited and shut down. Anderton reveals the ultimate flaw of the system: once people are aware of their future, they are able to change it. Burgess shoots himself.",
      "question_template": "The phrase that describes the symptoms of a sick society, according to Nordau, is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Lara and Anderton"
      ],
      "predicates": [
        "Reconnected(a_1) ::: Burgess is reconnected to the PreCrime system.",
        "Murderer(a_1, a_2) ::: Burgess is the murderer of Lively.",
        "Freed(a_3, a_2) ::: Lara frees Anderton from stasis.",
        "Exposes(a_2, a_1) ::: Anderton exposes Burgess.",
        "GeneratedReport(d, a_1) ::: A new report is generated at PreCrime stating that Burgess will kill Anderton.",
        "Corners(a_1, a_2) ::: Burgess corners Anderton.",
        "Explains(a_1, a_2) ::: Burgess explains his actions to Anderton.",
        "Dilemma(a_1) ::: Burgess faces a moral dilemma.",
        "Imprisoned(a_1) ::: Burgess will be imprisoned for life if he kills Anderton.",
        "Validated(d) ::: PreCrime will be validated if Burgess kills Anderton.",
        "Discredited(d) ::: PreCrime will be discredited if Burgess spares Anderton.",
        "Flaw(d) ::: There is a flaw in the PreCrime system.",
        "Aware(a_0, f) ::: People are aware of their future.",
        "ChangeFuture(a_0) ::: People are able to change their future.",
        "Shoots(a_1) ::: Burgess shoots himself."
      ],
      "premises": [
        "Reconnected(burgess) ::: Agatha is reconnected to the PreCrime system.",
        "Murderer(burgess, lively) ::: Burgess accidentally reveals himself as Lively's murderer.",
        "Freed(lara, anderton) ::: Lara frees Anderton from stasis.",
        "Exposes(anderton, burgess) ::: Anderton exposes Burgess at a PreCrime celebratory banquet by playing the full video of Agatha's vision of Burgess killing Lively.",
        "GeneratedReport(d, burgess) ::: A new report is generated at PreCrime: Burgess will kill Anderton.",
        "Corners(burgess, anderton) ::: Burgess corners Anderton.",
        "Explains(burgess, anderton) ::: Burgess explains his actions to Anderton.",
        "Dilemma(burgess) ::: Burgess faces a moral dilemma regarding the lives of others.",
        "Imprisoned(burgess) → Validated(d) ::: If Burgess kills Anderton, he will be imprisoned for life, but PreCrime will be validated.",
        "Spared(burgess) → Discredited(d) ::: If Burgess spares Anderton, PreCrime will be discredited and shut down.",
        "Flaw(d) ::: Anderton reveals the ultimate flaw of the system: once people are aware of their future, they are able to change it.",
        "Shoots(burgess) ::: Burgess shoots himself.",
        "Conclusion:",
        "Dilemma(burgess) ::: Burgess's actions are driven by the need to protect the PreCrime system, leading to a moral dilemma regarding the lives of others."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "619": [
    {
      "id": 619,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 1,
      "paragraph": "Since the disappearance of his son Sean, PreCrime Captain John Anderton has separated from his wife Lara and becomes a drug addict. While United States Department of Justice agent Danny Witwer is auditing the program, the Precogs generate a new prediction, saying Anderton will murder a man named Leo Crow in 36 hours. Anderton does not know Crow, but flees the area as Witwer begins a manhunt. Anderton seeks the advice of Dr. Iris Hineman, the creator of PreCrime technology. She reveals that sometimes, one of the Precogs, usually Agatha, has a different vision than the other two, a \"minority report\" of a possible alternate future; this has been kept a secret as it would damage the system's credibility. Anderton resolves to recover the minority report to prove his innocence.",
      "question_template": "Nordau diagnoses [[CANDIDATE_ANSWER]] from the tastes of fashionable society.",
      "candidate_answers": [
        "- The Precogs generate a new prediction",
        "- Anderton seeks the advice of Dr. Iris Hineman, the creator of PreCrime technology",
        "- One of the Precogs, usually Agatha, has a different vision than the other two, a \"minority report\" of a possible alternate future",
        "- This has been kept a secret as it would damage the system's credibility",
        "- Anderton resolves to recover the minority report to prove his innocence"
      ],
      "predicates": [
        "Separated(a_2, a_3) ::: John Anderton has separated from his wife Lara.",
        "DrugAddict(a_2) ::: John Anderton has become a drug addict.",
        "Auditing(a_1, d) ::: Danny Witwer is auditing the PreCrime program.",
        "GeneratesPrediction(b_1, a_2, a_4, t) ::: The Precogs generate a prediction that Anderton will murder a man named Leo Crow in 36 hours.",
        "Flees(a_2, c_0) ::: John Anderton flees the area.",
        "SeeksAdvice(a_2, a_5) ::: John Anderton seeks the advice of Dr. Iris Hineman.",
        "Reveals(a_5, b_1) ::: Dr. Iris Hineman reveals information about the Precogs.",
        "HasDifferentVision(b_1, a_6) ::: One of the Precogs, usually Agatha, has a different vision than the other two.",
        "KeepsSecret(b_1) ::: The existence of the minority report is kept a secret.",
        "Resolves(a_2, b_1) ::: John Anderton resolves to recover the minority report."
      ],
      "premises": [
        "Separated(a_2, a_3) ::: John Anderton has separated from his wife Lara.",
        "DrugAddict(a_2) ::: John Anderton has become a drug addict.",
        "Auditing(a_1, d) ::: Danny Witwer is auditing the PreCrime program.",
        "GeneratesPrediction(b_1, a_2, a_4, 36) ::: The Precogs generate a prediction that Anderton will murder a man named Leo Crow in 36 hours.",
        "Flees(a_2, c_0) ::: John Anderton flees the area.",
        "SeeksAdvice(a_2, a_5) ::: John Anderton seeks the advice of Dr. Iris Hineman.",
        "Reveals(a_5, b_1) ::: Dr. Iris Hineman reveals information about the Precogs.",
        "HasDifferentVision(b_1, a_6) ::: One of the Precogs, usually Agatha, has a different vision than the other two.",
        "KeepsSecret(b_1) ::: The existence of the minority report is kept a secret.",
        "Resolves(a_2, b_1) ::: John Anderton resolves to recover the minority report to prove his innocence."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 619,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 2,
      "paragraph": "Anderton goes to a black market doctor for a risky eye transplant so as to avoid the city-wide optical recognition system. He returns to PreCrime and kidnaps Agatha, shutting down the system, as the Precogs operate as a group mind. Anderton takes Agatha to a hacker to extract the minority report of Leo Crow, but none exists; instead, Agatha shows him an image of the murder of Ann Lively, a woman who was drowned by a hooded figure in 2049.",
      "question_template": "Nordau diagnoses [[CANDIDATE_ANSWER]] from the tastes of fashionable society.",
      "candidate_answers": [
        "- A black market doctor for a risky eye transplant",
        "- The city-wide optical recognition system",
        "- The Precogs operate as a group mind"
      ],
      "predicates": [
        "GoesTo(x, y) ::: x goes to y.",
        "Kidnaps(x, y) ::: x kidnaps y.",
        "ShutsDown(x, y) ::: x shuts down y.",
        "OperatesAsGroupMind(x) ::: x operates as a group mind.",
        "Extracts(x, y, z) ::: x extracts y from z.",
        "Shows(x, y) ::: x shows y.",
        "Exists(x) ::: x exists.",
        "Murder(x, y) ::: x is the murder of y.",
        "DrownedBy(x, y) ::: x is drowned by y."
      ],
      "premises": [
        "GoesTo(anderton, blackMarketDoctor) ::: Anderton goes to a black market doctor for a risky eye transplant.",
        "ShutsDown(anderton, PreCrime) ::: Anderton shuts down the PreCrime system.",
        "OperatesAsGroupMind(precogs) ::: The Precogs operate as a group mind.",
        "Kidnaps(anderton, agatha) ::: Anderton kidnaps Agatha.",
        "Extracts(anderton, minorityReport, hacker) ::: Anderton takes Agatha to a hacker to extract the minority report of Leo Crow.",
        "¬Exists(minorityReport) ::: None exists; instead, Agatha shows him an image of the murder of Ann Lively.",
        "Shows(agatha, murderOfAnnLively) ::: Agatha shows him an image of the murder of Ann Lively.",
        "Murder(murderOfAnnLively, annLively) ::: The murder is of Ann Lively.",
        "DrownedBy(annLively, hoodedFigure) ::: Ann Lively was drowned by a hooded figure in 2049."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 619,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 4,
      "paragraph": "Witwer, studying Crow's death, suspects Anderton is being framed. He examines the footage of Lively's murder and finds there were two attempts on her life, the first having been stopped by PreCrime but the second, occurring minutes later, having succeeded. Witwer reports this to the director and founder of PreCrime, Lamar Burgess, but Burgess responds by killing Witwer using Anderton's gun. With the Precogs still offline, the murder is not detected.",
      "question_template": "Nordau diagnoses [[CANDIDATE_ANSWER]] from the tastes of fashionable society.",
      "candidate_answers": [
        "- PreCrime",
        "- The first having been stopped by PreCrime",
        "- The Precogs still offline"
      ],
      "predicates": [
        "Framed(x) ::: x is being framed.",
        "Suspects(x, y) ::: x suspects y.",
        "Examines(x, y) ::: x examines y.",
        "Reports(x, y) ::: x reports y to y.",
        "Kills(x, y) ::: x kills y.",
        "Detected(x) ::: x is detected.",
        "Offline(x) ::: x is offline."
      ],
      "premises": [
        "Suspects(witwer, anderton) ::: Witwer suspects Anderton is being framed.",
        "Examines(witwer, footageOfLivelysMurder) ::: Witwer examines the footage of Lively's murder.",
        "Reports(witwer, burgess) ::: Witwer reports this to Lamar Burgess.",
        "Kills(burgess, witwer) ::: Burgess kills Witwer using Anderton's gun.",
        "Offline(precogs) ::: The Precogs are offline.",
        "¬Detected(kills(witwer)) ::: Witwer's murder is not detected due to the Precogs being offline."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 619,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 6,
      "paragraph": "Agatha is reconnected to the PreCrime system. While attempting to comfort Lara, Burgess accidentally reveals himself as Lively's murderer. Lara frees Anderton from stasis, and Anderton exposes Burgess at a PreCrime celebratory banquet by playing the full video of Agatha's vision of Burgess killing Lively. A new report is generated at PreCrime: Burgess will kill Anderton. Burgess corners Anderton, and explains that as he could not afford to let Lively take Agatha back without impacting PreCrime, he arranged to kill Lively following an actual attempt on her life, so that the murder would appear as an echo to the technician within PreCrime and be ignored. Anderton points out Burgess's dilemma: If Burgess kills Anderton, he will be imprisoned for life, but PreCrime will be validated; if he spares Anderton, PreCrime will be discredited and shut down. Anderton reveals the ultimate flaw of the system: once people are aware of their future, they are able to change it. Burgess shoots himself.",
      "question_template": "Nordau diagnoses [[CANDIDATE_ANSWER]] from the tastes of fashionable society.",
      "candidate_answers": [
        "- PreCrime system",
        "- Agatha's vision of Burgess killing Lively",
        "- Burgess arranged to kill Lively following an actual attempt on her life",
        "- If Burgess kills Anderton, he will be imprisoned for life, but PreCrime will be validated",
        "- If he spares Anderton, PreCrime will be discredited and shut down",
        "- Once people are aware of their future, they are able to change it"
      ],
      "predicates": [
        "Reconnected(a_1) ::: Burgess is reconnected to the PreCrime system.",
        "Murderer(a_1, a_2) ::: Burgess is the murderer of Lively.",
        "Freed(a_3, a_2) ::: Lara frees Anderton from stasis.",
        "Exposes(a_2, a_1) ::: Anderton exposes Burgess.",
        "GeneratedReport(d, a_1) ::: A new report is generated at PreCrime stating that Burgess will kill Anderton.",
        "Corners(a_1, a_2) ::: Burgess corners Anderton.",
        "Explains(a_1, a_2) ::: Burgess explains his actions to Anderton.",
        "Dilemma(a_1) ::: Burgess faces a moral dilemma.",
        "Imprisoned(a_1) ::: Burgess will be imprisoned for life if he kills Anderton.",
        "Validated(d) ::: PreCrime will be validated if Burgess kills Anderton.",
        "Discredited(d) ::: PreCrime will be discredited if Burgess spares Anderton.",
        "Flaw(d) ::: There is a flaw in the PreCrime system.",
        "Aware(a_0, f) ::: People are aware of their future.",
        "ChangeFuture(a_0) ::: People are able to change their future.",
        "Shoots(a_1) ::: Burgess shoots himself."
      ],
      "premises": [
        "Reconnected(burgess) ::: Agatha is reconnected to the PreCrime system.",
        "Murderer(burgess, lively) ::: Burgess accidentally reveals himself as Lively's murderer.",
        "Freed(lara, anderton) ::: Lara frees Anderton from stasis.",
        "Exposes(anderton, burgess) ::: Anderton exposes Burgess at a PreCrime celebratory banquet by playing the full video of Agatha's vision of Burgess killing Lively.",
        "GeneratedReport(d, burgess) ::: A new report is generated at PreCrime: Burgess will kill Anderton.",
        "Corners(burgess, anderton) ::: Burgess corners Anderton.",
        "Explains(burgess, anderton) ::: Burgess explains his actions to Anderton.",
        "Dilemma(burgess) ::: Burgess faces a moral dilemma regarding the lives of others.",
        "Imprisoned(burgess) → Validated(d) ::: If Burgess kills Anderton, he will be imprisoned for life, but PreCrime will be validated.",
        "Spared(burgess) → Discredited(d) ::: If Burgess spares Anderton, PreCrime will be discredited and shut down.",
        "Flaw(d) ::: Anderton reveals the ultimate flaw of the system: once people are aware of their future, they are able to change it.",
        "Shoots(burgess) ::: Burgess shoots himself.",
        "Conclusion:",
        "Dilemma(burgess) ::: Burgess's actions are driven by the need to protect the PreCrime system, leading to a moral dilemma regarding the lives of others."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "620": [
    {
      "id": 620,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 1,
      "paragraph": "Since the disappearance of his son Sean, PreCrime Captain John Anderton has separated from his wife Lara and becomes a drug addict. While United States Department of Justice agent Danny Witwer is auditing the program, the Precogs generate a new prediction, saying Anderton will murder a man named Leo Crow in 36 hours. Anderton does not know Crow, but flees the area as Witwer begins a manhunt. Anderton seeks the advice of Dr. Iris Hineman, the creator of PreCrime technology. She reveals that sometimes, one of the Precogs, usually Agatha, has a different vision than the other two, a \"minority report\" of a possible alternate future; this has been kept a secret as it would damage the system's credibility. Anderton resolves to recover the minority report to prove his innocence.",
      "question_template": "[[CANDIDATE_ANSWER]] might agree with Nordau that society is in decline.",
      "candidate_answers": [
        "Leo Crow"
      ],
      "predicates": [
        "Separated(a_2, a_3) ::: John Anderton has separated from his wife Lara.",
        "DrugAddict(a_2) ::: John Anderton has become a drug addict.",
        "Auditing(a_1, d) ::: Danny Witwer is auditing the PreCrime program.",
        "GeneratesPrediction(b_1, a_2, a_4, t) ::: The Precogs generate a prediction that Anderton will murder a man named Leo Crow in 36 hours.",
        "Flees(a_2, c_0) ::: John Anderton flees the area.",
        "SeeksAdvice(a_2, a_5) ::: John Anderton seeks the advice of Dr. Iris Hineman.",
        "Reveals(a_5, b_1) ::: Dr. Iris Hineman reveals information about the Precogs.",
        "HasDifferentVision(b_1, a_6) ::: One of the Precogs, usually Agatha, has a different vision than the other two.",
        "KeepsSecret(b_1) ::: The existence of the minority report is kept a secret.",
        "Resolves(a_2, b_1) ::: John Anderton resolves to recover the minority report."
      ],
      "premises": [
        "Separated(a_2, a_3) ::: John Anderton has separated from his wife Lara.",
        "DrugAddict(a_2) ::: John Anderton has become a drug addict.",
        "Auditing(a_1, d) ::: Danny Witwer is auditing the PreCrime program.",
        "GeneratesPrediction(b_1, a_2, a_4, 36) ::: The Precogs generate a prediction that Anderton will murder a man named Leo Crow in 36 hours.",
        "Flees(a_2, c_0) ::: John Anderton flees the area.",
        "SeeksAdvice(a_2, a_5) ::: John Anderton seeks the advice of Dr. Iris Hineman.",
        "Reveals(a_5, b_1) ::: Dr. Iris Hineman reveals information about the Precogs.",
        "HasDifferentVision(b_1, a_6) ::: One of the Precogs, usually Agatha, has a different vision than the other two.",
        "KeepsSecret(b_1) ::: The existence of the minority report is kept a secret.",
        "Resolves(a_2, b_1) ::: John Anderton resolves to recover the minority report to prove his innocence."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 620,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 6,
      "paragraph": "Agatha is reconnected to the PreCrime system. While attempting to comfort Lara, Burgess accidentally reveals himself as Lively's murderer. Lara frees Anderton from stasis, and Anderton exposes Burgess at a PreCrime celebratory banquet by playing the full video of Agatha's vision of Burgess killing Lively. A new report is generated at PreCrime: Burgess will kill Anderton. Burgess corners Anderton, and explains that as he could not afford to let Lively take Agatha back without impacting PreCrime, he arranged to kill Lively following an actual attempt on her life, so that the murder would appear as an echo to the technician within PreCrime and be ignored. Anderton points out Burgess's dilemma: If Burgess kills Anderton, he will be imprisoned for life, but PreCrime will be validated; if he spares Anderton, PreCrime will be discredited and shut down. Anderton reveals the ultimate flaw of the system: once people are aware of their future, they are able to change it. Burgess shoots himself.",
      "question_template": "[[CANDIDATE_ANSWER]] might agree with Nordau that society is in decline.",
      "candidate_answers": [
        "Burgess will kill Anderton"
      ],
      "predicates": [
        "Reconnected(a_1) ::: Burgess is reconnected to the PreCrime system.",
        "Murderer(a_1, a_2) ::: Burgess is the murderer of Lively.",
        "Freed(a_3, a_2) ::: Lara frees Anderton from stasis.",
        "Exposes(a_2, a_1) ::: Anderton exposes Burgess.",
        "GeneratedReport(d, a_1) ::: A new report is generated at PreCrime stating that Burgess will kill Anderton.",
        "Corners(a_1, a_2) ::: Burgess corners Anderton.",
        "Explains(a_1, a_2) ::: Burgess explains his actions to Anderton.",
        "Dilemma(a_1) ::: Burgess faces a moral dilemma.",
        "Imprisoned(a_1) ::: Burgess will be imprisoned for life if he kills Anderton.",
        "Validated(d) ::: PreCrime will be validated if Burgess kills Anderton.",
        "Discredited(d) ::: PreCrime will be discredited if Burgess spares Anderton.",
        "Flaw(d) ::: There is a flaw in the PreCrime system.",
        "Aware(a_0, f) ::: People are aware of their future.",
        "ChangeFuture(a_0) ::: People are able to change their future.",
        "Shoots(a_1) ::: Burgess shoots himself."
      ],
      "premises": [
        "Reconnected(burgess) ::: Agatha is reconnected to the PreCrime system.",
        "Murderer(burgess, lively) ::: Burgess accidentally reveals himself as Lively's murderer.",
        "Freed(lara, anderton) ::: Lara frees Anderton from stasis.",
        "Exposes(anderton, burgess) ::: Anderton exposes Burgess at a PreCrime celebratory banquet by playing the full video of Agatha's vision of Burgess killing Lively.",
        "GeneratedReport(d, burgess) ::: A new report is generated at PreCrime: Burgess will kill Anderton.",
        "Corners(burgess, anderton) ::: Burgess corners Anderton.",
        "Explains(burgess, anderton) ::: Burgess explains his actions to Anderton.",
        "Dilemma(burgess) ::: Burgess faces a moral dilemma regarding the lives of others.",
        "Imprisoned(burgess) → Validated(d) ::: If Burgess kills Anderton, he will be imprisoned for life, but PreCrime will be validated.",
        "Spared(burgess) → Discredited(d) ::: If Burgess spares Anderton, PreCrime will be discredited and shut down.",
        "Flaw(d) ::: Anderton reveals the ultimate flaw of the system: once people are aware of their future, they are able to change it.",
        "Shoots(burgess) ::: Burgess shoots himself.",
        "Conclusion:",
        "Dilemma(burgess) ::: Burgess's actions are driven by the need to protect the PreCrime system, leading to a moral dilemma regarding the lives of others."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "621": [
    {
      "id": 621,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 1,
      "paragraph": "Since the disappearance of his son Sean, PreCrime Captain John Anderton has separated from his wife Lara and becomes a drug addict. While United States Department of Justice agent Danny Witwer is auditing the program, the Precogs generate a new prediction, saying Anderton will murder a man named Leo Crow in 36 hours. Anderton does not know Crow, but flees the area as Witwer begins a manhunt. Anderton seeks the advice of Dr. Iris Hineman, the creator of PreCrime technology. She reveals that sometimes, one of the Precogs, usually Agatha, has a different vision than the other two, a \"minority report\" of a possible alternate future; this has been kept a secret as it would damage the system's credibility. Anderton resolves to recover the minority report to prove his innocence.",
      "question_template": "Nordau believes that [[CANDIDATE_ANSWER]] is affected by the fin-de-siècle disposition in Europe.",
      "candidate_answers": [
        "Anderton flees the area as Witwer begins a manhunt.",
        "Anderton seeks the advice of Dr. Iris Hineman."
      ],
      "predicates": [
        "Separated(a_2, a_3) ::: John Anderton has separated from his wife Lara.",
        "DrugAddict(a_2) ::: John Anderton has become a drug addict.",
        "Auditing(a_1, d) ::: Danny Witwer is auditing the PreCrime program.",
        "GeneratesPrediction(b_1, a_2, a_4, t) ::: The Precogs generate a prediction that Anderton will murder a man named Leo Crow in 36 hours.",
        "Flees(a_2, c_0) ::: John Anderton flees the area.",
        "SeeksAdvice(a_2, a_5) ::: John Anderton seeks the advice of Dr. Iris Hineman.",
        "Reveals(a_5, b_1) ::: Dr. Iris Hineman reveals information about the Precogs.",
        "HasDifferentVision(b_1, a_6) ::: One of the Precogs, usually Agatha, has a different vision than the other two.",
        "KeepsSecret(b_1) ::: The existence of the minority report is kept a secret.",
        "Resolves(a_2, b_1) ::: John Anderton resolves to recover the minority report."
      ],
      "premises": [
        "Separated(a_2, a_3) ::: John Anderton has separated from his wife Lara.",
        "DrugAddict(a_2) ::: John Anderton has become a drug addict.",
        "Auditing(a_1, d) ::: Danny Witwer is auditing the PreCrime program.",
        "GeneratesPrediction(b_1, a_2, a_4, 36) ::: The Precogs generate a prediction that Anderton will murder a man named Leo Crow in 36 hours.",
        "Flees(a_2, c_0) ::: John Anderton flees the area.",
        "SeeksAdvice(a_2, a_5) ::: John Anderton seeks the advice of Dr. Iris Hineman.",
        "Reveals(a_5, b_1) ::: Dr. Iris Hineman reveals information about the Precogs.",
        "HasDifferentVision(b_1, a_6) ::: One of the Precogs, usually Agatha, has a different vision than the other two.",
        "KeepsSecret(b_1) ::: The existence of the minority report is kept a secret.",
        "Resolves(a_2, b_1) ::: John Anderton resolves to recover the minority report to prove his innocence."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "622": [
    {
      "id": 622,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 1,
      "paragraph": "Since the disappearance of his son Sean, PreCrime Captain John Anderton has separated from his wife Lara and becomes a drug addict. While United States Department of Justice agent Danny Witwer is auditing the program, the Precogs generate a new prediction, saying Anderton will murder a man named Leo Crow in 36 hours. Anderton does not know Crow, but flees the area as Witwer begins a manhunt. Anderton seeks the advice of Dr. Iris Hineman, the creator of PreCrime technology. She reveals that sometimes, one of the Precogs, usually Agatha, has a different vision than the other two, a \"minority report\" of a possible alternate future; this has been kept a secret as it would damage the system's credibility. Anderton resolves to recover the minority report to prove his innocence.",
      "question_template": "It is important to Arendt and Nordau that polite society embraced [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Dr. Iris Hineman",
        "The Precogs",
        "Agatha"
      ],
      "predicates": [
        "Separated(a_2, a_3) ::: John Anderton has separated from his wife Lara.",
        "DrugAddict(a_2) ::: John Anderton has become a drug addict.",
        "Auditing(a_1, d) ::: Danny Witwer is auditing the PreCrime program.",
        "GeneratesPrediction(b_1, a_2, a_4, t) ::: The Precogs generate a prediction that Anderton will murder a man named Leo Crow in 36 hours.",
        "Flees(a_2, c_0) ::: John Anderton flees the area.",
        "SeeksAdvice(a_2, a_5) ::: John Anderton seeks the advice of Dr. Iris Hineman.",
        "Reveals(a_5, b_1) ::: Dr. Iris Hineman reveals information about the Precogs.",
        "HasDifferentVision(b_1, a_6) ::: One of the Precogs, usually Agatha, has a different vision than the other two.",
        "KeepsSecret(b_1) ::: The existence of the minority report is kept a secret.",
        "Resolves(a_2, b_1) ::: John Anderton resolves to recover the minority report."
      ],
      "premises": [
        "Separated(a_2, a_3) ::: John Anderton has separated from his wife Lara.",
        "DrugAddict(a_2) ::: John Anderton has become a drug addict.",
        "Auditing(a_1, d) ::: Danny Witwer is auditing the PreCrime program.",
        "GeneratesPrediction(b_1, a_2, a_4, 36) ::: The Precogs generate a prediction that Anderton will murder a man named Leo Crow in 36 hours.",
        "Flees(a_2, c_0) ::: John Anderton flees the area.",
        "SeeksAdvice(a_2, a_5) ::: John Anderton seeks the advice of Dr. Iris Hineman.",
        "Reveals(a_5, b_1) ::: Dr. Iris Hineman reveals information about the Precogs.",
        "HasDifferentVision(b_1, a_6) ::: One of the Precogs, usually Agatha, has a different vision than the other two.",
        "KeepsSecret(b_1) ::: The existence of the minority report is kept a secret.",
        "Resolves(a_2, b_1) ::: John Anderton resolves to recover the minority report to prove his innocence."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 622,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 6,
      "paragraph": "Agatha is reconnected to the PreCrime system. While attempting to comfort Lara, Burgess accidentally reveals himself as Lively's murderer. Lara frees Anderton from stasis, and Anderton exposes Burgess at a PreCrime celebratory banquet by playing the full video of Agatha's vision of Burgess killing Lively. A new report is generated at PreCrime: Burgess will kill Anderton. Burgess corners Anderton, and explains that as he could not afford to let Lively take Agatha back without impacting PreCrime, he arranged to kill Lively following an actual attempt on her life, so that the murder would appear as an echo to the technician within PreCrime and be ignored. Anderton points out Burgess's dilemma: If Burgess kills Anderton, he will be imprisoned for life, but PreCrime will be validated; if he spares Anderton, PreCrime will be discredited and shut down. Anderton reveals the ultimate flaw of the system: once people are aware of their future, they are able to change it. Burgess shoots himself.",
      "question_template": "It is important to Arendt and Nordau that polite society embraced [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Lara",
        "Agatha"
      ],
      "predicates": [
        "Reconnected(a_1) ::: Burgess is reconnected to the PreCrime system.",
        "Murderer(a_1, a_2) ::: Burgess is the murderer of Lively.",
        "Freed(a_3, a_2) ::: Lara frees Anderton from stasis.",
        "Exposes(a_2, a_1) ::: Anderton exposes Burgess.",
        "GeneratedReport(d, a_1) ::: A new report is generated at PreCrime stating that Burgess will kill Anderton.",
        "Corners(a_1, a_2) ::: Burgess corners Anderton.",
        "Explains(a_1, a_2) ::: Burgess explains his actions to Anderton.",
        "Dilemma(a_1) ::: Burgess faces a moral dilemma.",
        "Imprisoned(a_1) ::: Burgess will be imprisoned for life if he kills Anderton.",
        "Validated(d) ::: PreCrime will be validated if Burgess kills Anderton.",
        "Discredited(d) ::: PreCrime will be discredited if Burgess spares Anderton.",
        "Flaw(d) ::: There is a flaw in the PreCrime system.",
        "Aware(a_0, f) ::: People are aware of their future.",
        "ChangeFuture(a_0) ::: People are able to change their future.",
        "Shoots(a_1) ::: Burgess shoots himself."
      ],
      "premises": [
        "Reconnected(burgess) ::: Agatha is reconnected to the PreCrime system.",
        "Murderer(burgess, lively) ::: Burgess accidentally reveals himself as Lively's murderer.",
        "Freed(lara, anderton) ::: Lara frees Anderton from stasis.",
        "Exposes(anderton, burgess) ::: Anderton exposes Burgess at a PreCrime celebratory banquet by playing the full video of Agatha's vision of Burgess killing Lively.",
        "GeneratedReport(d, burgess) ::: A new report is generated at PreCrime: Burgess will kill Anderton.",
        "Corners(burgess, anderton) ::: Burgess corners Anderton.",
        "Explains(burgess, anderton) ::: Burgess explains his actions to Anderton.",
        "Dilemma(burgess) ::: Burgess faces a moral dilemma regarding the lives of others.",
        "Imprisoned(burgess) → Validated(d) ::: If Burgess kills Anderton, he will be imprisoned for life, but PreCrime will be validated.",
        "Spared(burgess) → Discredited(d) ::: If Burgess spares Anderton, PreCrime will be discredited and shut down.",
        "Flaw(d) ::: Anderton reveals the ultimate flaw of the system: once people are aware of their future, they are able to change it.",
        "Shoots(burgess) ::: Burgess shoots himself.",
        "Conclusion:",
        "Dilemma(burgess) ::: Burgess's actions are driven by the need to protect the PreCrime system, leading to a moral dilemma regarding the lives of others."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "624": [
    {
      "id": 624,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 3,
      "paragraph": "Anderton and Agatha go to Crow's apartment as the 36-hour time nears, finding numerous photos of children, including Sean's. Crow arrives and Anderton prepares to kill him, accusing him to be a serial child killer. Agatha talks Anderton out of shooting Crow by telling him that he has the ability to choose his future now that he is aware of it. Crow however begs to be killed, having been hired to plant the photos and be killed in exchange for his family's financial well being. Crow grabs Anderton's gun and pushes the trigger, killing himself. Anderton and Agatha flee to Lara's house outside the city for refuge. There they learn Lively was Agatha's drug-addicted mother who sold her to PreCrime. Lively had sobered up and attempted to reclaim Agatha, but was murdered. Anderton realizes he is being targeted for knowing about Lively's existence and her connection to Agatha.",
      "question_template": "Nordau primarily critiques society from the perspective of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Crow grabs Anderton's gun and pushes the trigger, killing himself."
      ],
      "predicates": [
        "Aware(x) ::: x is aware of their future.",
        "ChooseFuture(x) ::: x has the ability to choose their future.",
        "Targeted(x) ::: x is targeted for knowing about Lively's existence and her connection to Agatha.",
        "Killed(x) ::: x is killed.",
        "HiredToPlantPhotos(x) ::: x is hired to plant the photos.",
        "Flee(x, y) ::: x flees to location y.",
        "Mother(x, y) ::: x is the mother of y.",
        "Sold(x, y) ::: x sold y.",
        "SoberedUp(x) ::: x has sobered up.",
        "Murdered(x) ::: x is murdered."
      ],
      "premises": [
        "ChooseFuture(a_2) ∧ Aware(a_2) ::: Anderton has the ability to choose his future now that he is aware of it.",
        "Targeted(a_2) ::: Anderton is targeted for knowing about Lively's existence and her connection to Agatha.",
        "Killed(a_1) ∧ HiredToPlantPhotos(a_1) ::: Crow is killed and was hired to plant the photos.",
        "Flee(a_2, a_3) ::: Anderton flees to Lara's house for refuge.",
        "Mother(a_1, a_2) ∧ Sold(a_1, a_2) ∧ SoberedUp(a_1) ∧ Murdered(a_1) ::: Lively was Agatha's drug-addicted mother who sold her to PreCrime, had sobered up, and was murdered."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 624,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 4,
      "paragraph": "Witwer, studying Crow's death, suspects Anderton is being framed. He examines the footage of Lively's murder and finds there were two attempts on her life, the first having been stopped by PreCrime but the second, occurring minutes later, having succeeded. Witwer reports this to the director and founder of PreCrime, Lamar Burgess, but Burgess responds by killing Witwer using Anderton's gun. With the Precogs still offline, the murder is not detected.",
      "question_template": "Nordau primarily critiques society from the perspective of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Lamar Burgess"
      ],
      "predicates": [
        "Framed(x) ::: x is being framed.",
        "Suspects(x, y) ::: x suspects y.",
        "Examines(x, y) ::: x examines y.",
        "Reports(x, y) ::: x reports y to y.",
        "Kills(x, y) ::: x kills y.",
        "Detected(x) ::: x is detected.",
        "Offline(x) ::: x is offline."
      ],
      "premises": [
        "Suspects(witwer, anderton) ::: Witwer suspects Anderton is being framed.",
        "Examines(witwer, footageOfLivelysMurder) ::: Witwer examines the footage of Lively's murder.",
        "Reports(witwer, burgess) ::: Witwer reports this to Lamar Burgess.",
        "Kills(burgess, witwer) ::: Burgess kills Witwer using Anderton's gun.",
        "Offline(precogs) ::: The Precogs are offline.",
        "¬Detected(kills(witwer)) ::: Witwer's murder is not detected due to the Precogs being offline."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 624,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 6,
      "paragraph": "Agatha is reconnected to the PreCrime system. While attempting to comfort Lara, Burgess accidentally reveals himself as Lively's murderer. Lara frees Anderton from stasis, and Anderton exposes Burgess at a PreCrime celebratory banquet by playing the full video of Agatha's vision of Burgess killing Lively. A new report is generated at PreCrime: Burgess will kill Anderton. Burgess corners Anderton, and explains that as he could not afford to let Lively take Agatha back without impacting PreCrime, he arranged to kill Lively following an actual attempt on her life, so that the murder would appear as an echo to the technician within PreCrime and be ignored. Anderton points out Burgess's dilemma: If Burgess kills Anderton, he will be imprisoned for life, but PreCrime will be validated; if he spares Anderton, PreCrime will be discredited and shut down. Anderton reveals the ultimate flaw of the system: once people are aware of their future, they are able to change it. Burgess shoots himself.",
      "question_template": "Nordau primarily critiques society from the perspective of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Burgess",
        "Lively's murderer",
        "Burgess will kill Anderton"
      ],
      "predicates": [
        "Reconnected(a_1) ::: Burgess is reconnected to the PreCrime system.",
        "Murderer(a_1, a_2) ::: Burgess is the murderer of Lively.",
        "Freed(a_3, a_2) ::: Lara frees Anderton from stasis.",
        "Exposes(a_2, a_1) ::: Anderton exposes Burgess.",
        "GeneratedReport(d, a_1) ::: A new report is generated at PreCrime stating that Burgess will kill Anderton.",
        "Corners(a_1, a_2) ::: Burgess corners Anderton.",
        "Explains(a_1, a_2) ::: Burgess explains his actions to Anderton.",
        "Dilemma(a_1) ::: Burgess faces a moral dilemma.",
        "Imprisoned(a_1) ::: Burgess will be imprisoned for life if he kills Anderton.",
        "Validated(d) ::: PreCrime will be validated if Burgess kills Anderton.",
        "Discredited(d) ::: PreCrime will be discredited if Burgess spares Anderton.",
        "Flaw(d) ::: There is a flaw in the PreCrime system.",
        "Aware(a_0, f) ::: People are aware of their future.",
        "ChangeFuture(a_0) ::: People are able to change their future.",
        "Shoots(a_1) ::: Burgess shoots himself."
      ],
      "premises": [
        "Reconnected(burgess) ::: Agatha is reconnected to the PreCrime system.",
        "Murderer(burgess, lively) ::: Burgess accidentally reveals himself as Lively's murderer.",
        "Freed(lara, anderton) ::: Lara frees Anderton from stasis.",
        "Exposes(anderton, burgess) ::: Anderton exposes Burgess at a PreCrime celebratory banquet by playing the full video of Agatha's vision of Burgess killing Lively.",
        "GeneratedReport(d, burgess) ::: A new report is generated at PreCrime: Burgess will kill Anderton.",
        "Corners(burgess, anderton) ::: Burgess corners Anderton.",
        "Explains(burgess, anderton) ::: Burgess explains his actions to Anderton.",
        "Dilemma(burgess) ::: Burgess faces a moral dilemma regarding the lives of others.",
        "Imprisoned(burgess) → Validated(d) ::: If Burgess kills Anderton, he will be imprisoned for life, but PreCrime will be validated.",
        "Spared(burgess) → Discredited(d) ::: If Burgess spares Anderton, PreCrime will be discredited and shut down.",
        "Flaw(d) ::: Anderton reveals the ultimate flaw of the system: once people are aware of their future, they are able to change it.",
        "Shoots(burgess) ::: Burgess shoots himself.",
        "Conclusion:",
        "Dilemma(burgess) ::: Burgess's actions are driven by the need to protect the PreCrime system, leading to a moral dilemma regarding the lives of others."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "626": [
    {
      "id": 626,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 6,
      "paragraph": "Agatha is reconnected to the PreCrime system. While attempting to comfort Lara, Burgess accidentally reveals himself as Lively's murderer. Lara frees Anderton from stasis, and Anderton exposes Burgess at a PreCrime celebratory banquet by playing the full video of Agatha's vision of Burgess killing Lively. A new report is generated at PreCrime: Burgess will kill Anderton. Burgess corners Anderton, and explains that as he could not afford to let Lively take Agatha back without impacting PreCrime, he arranged to kill Lively following an actual attempt on her life, so that the murder would appear as an echo to the technician within PreCrime and be ignored. Anderton points out Burgess's dilemma: If Burgess kills Anderton, he will be imprisoned for life, but PreCrime will be validated; if he spares Anderton, PreCrime will be discredited and shut down. Anderton reveals the ultimate flaw of the system: once people are aware of their future, they are able to change it. Burgess shoots himself.",
      "question_template": "Nordau thinks it is bad that people imitate what they see in art because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Burgess",
        "Lively's murderer",
        "Burgess arranged to kill Lively"
      ],
      "predicates": [
        "Reconnected(a_1) ::: Burgess is reconnected to the PreCrime system.",
        "Murderer(a_1, a_2) ::: Burgess is the murderer of Lively.",
        "Freed(a_3, a_2) ::: Lara frees Anderton from stasis.",
        "Exposes(a_2, a_1) ::: Anderton exposes Burgess.",
        "GeneratedReport(d, a_1) ::: A new report is generated at PreCrime stating that Burgess will kill Anderton.",
        "Corners(a_1, a_2) ::: Burgess corners Anderton.",
        "Explains(a_1, a_2) ::: Burgess explains his actions to Anderton.",
        "Dilemma(a_1) ::: Burgess faces a moral dilemma.",
        "Imprisoned(a_1) ::: Burgess will be imprisoned for life if he kills Anderton.",
        "Validated(d) ::: PreCrime will be validated if Burgess kills Anderton.",
        "Discredited(d) ::: PreCrime will be discredited if Burgess spares Anderton.",
        "Flaw(d) ::: There is a flaw in the PreCrime system.",
        "Aware(a_0, f) ::: People are aware of their future.",
        "ChangeFuture(a_0) ::: People are able to change their future.",
        "Shoots(a_1) ::: Burgess shoots himself."
      ],
      "premises": [
        "Reconnected(burgess) ::: Agatha is reconnected to the PreCrime system.",
        "Murderer(burgess, lively) ::: Burgess accidentally reveals himself as Lively's murderer.",
        "Freed(lara, anderton) ::: Lara frees Anderton from stasis.",
        "Exposes(anderton, burgess) ::: Anderton exposes Burgess at a PreCrime celebratory banquet by playing the full video of Agatha's vision of Burgess killing Lively.",
        "GeneratedReport(d, burgess) ::: A new report is generated at PreCrime: Burgess will kill Anderton.",
        "Corners(burgess, anderton) ::: Burgess corners Anderton.",
        "Explains(burgess, anderton) ::: Burgess explains his actions to Anderton.",
        "Dilemma(burgess) ::: Burgess faces a moral dilemma regarding the lives of others.",
        "Imprisoned(burgess) → Validated(d) ::: If Burgess kills Anderton, he will be imprisoned for life, but PreCrime will be validated.",
        "Spared(burgess) → Discredited(d) ::: If Burgess spares Anderton, PreCrime will be discredited and shut down.",
        "Flaw(d) ::: Anderton reveals the ultimate flaw of the system: once people are aware of their future, they are able to change it.",
        "Shoots(burgess) ::: Burgess shoots himself.",
        "Conclusion:",
        "Dilemma(burgess) ::: Burgess's actions are driven by the need to protect the PreCrime system, leading to a moral dilemma regarding the lives of others."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "627": [
    {
      "id": 627,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 1,
      "paragraph": "Since the disappearance of his son Sean, PreCrime Captain John Anderton has separated from his wife Lara and becomes a drug addict. While United States Department of Justice agent Danny Witwer is auditing the program, the Precogs generate a new prediction, saying Anderton will murder a man named Leo Crow in 36 hours. Anderton does not know Crow, but flees the area as Witwer begins a manhunt. Anderton seeks the advice of Dr. Iris Hineman, the creator of PreCrime technology. She reveals that sometimes, one of the Precogs, usually Agatha, has a different vision than the other two, a \"minority report\" of a possible alternate future; this has been kept a secret as it would damage the system's credibility. Anderton resolves to recover the minority report to prove his innocence.",
      "question_template": "[[CANDIDATE_ANSWER]] became a drug addict.",
      "candidate_answers": [
        "Lara"
      ],
      "predicates": [
        "Separated(a_2, a_3) ::: John Anderton has separated from his wife Lara.",
        "DrugAddict(a_2) ::: John Anderton has become a drug addict.",
        "Auditing(a_1, d) ::: Danny Witwer is auditing the PreCrime program.",
        "GeneratesPrediction(b_1, a_2, a_4, t) ::: The Precogs generate a prediction that Anderton will murder a man named Leo Crow in 36 hours.",
        "Flees(a_2, c_0) ::: John Anderton flees the area.",
        "SeeksAdvice(a_2, a_5) ::: John Anderton seeks the advice of Dr. Iris Hineman.",
        "Reveals(a_5, b_1) ::: Dr. Iris Hineman reveals information about the Precogs.",
        "HasDifferentVision(b_1, a_6) ::: One of the Precogs, usually Agatha, has a different vision than the other two.",
        "KeepsSecret(b_1) ::: The existence of the minority report is kept a secret.",
        "Resolves(a_2, b_1) ::: John Anderton resolves to recover the minority report."
      ],
      "premises": [
        "Separated(a_2, a_3) ::: John Anderton has separated from his wife Lara.",
        "DrugAddict(a_2) ::: John Anderton has become a drug addict.",
        "Auditing(a_1, d) ::: Danny Witwer is auditing the PreCrime program.",
        "GeneratesPrediction(b_1, a_2, a_4, 36) ::: The Precogs generate a prediction that Anderton will murder a man named Leo Crow in 36 hours.",
        "Flees(a_2, c_0) ::: John Anderton flees the area.",
        "SeeksAdvice(a_2, a_5) ::: John Anderton seeks the advice of Dr. Iris Hineman.",
        "Reveals(a_5, b_1) ::: Dr. Iris Hineman reveals information about the Precogs.",
        "HasDifferentVision(b_1, a_6) ::: One of the Precogs, usually Agatha, has a different vision than the other two.",
        "KeepsSecret(b_1) ::: The existence of the minority report is kept a secret.",
        "Resolves(a_2, b_1) ::: John Anderton resolves to recover the minority report to prove his innocence."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 627,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 5,
      "paragraph": "Lara calls Burgess to reveal that Anderton is with her, and Anderton is captured, accused of both murders, and fitted with the brain device that puts him permanently into a dreamlike sleep. As his body is deposited into the prison, the warden tells him, \"that all your dreams come true.â",
      "question_template": "[[CANDIDATE_ANSWER]] became a drug addict.",
      "candidate_answers": [
        "Lara"
      ],
      "predicates": [
        "Calls(x, y) ::: x calls y.",
        "Reveals(x, y) ::: x reveals y.",
        "Captured(x) ::: x is captured.",
        "Accused(x, y) ::: x is accused of y.",
        "FittedWithDevice(x) ::: x is fitted with a brain device.",
        "Deposited(x, y) ::: x is deposited into y.",
        "Tells(x, y) ::: x tells y.",
        "DreamsComeTrue(x) ::: x's dreams come true."
      ],
      "premises": [
        "Calls(lara, burgess) ::: Lara calls Burgess to reveal that Anderton is with her.",
        "Reveals(lara, anderton) ::: Lara reveals that Anderton is with her.",
        "Captured(anderton) ::: Anderton is captured.",
        "Accused(anderton, murders) ::: Anderton is accused of both murders.",
        "FittedWithDevice(anderton) ::: Anderton is fitted with the brain device that puts him permanently into a dreamlike sleep.",
        "Deposited(anderton, prison) ::: Anderton's body is deposited into the prison.",
        "Tells(warden, anderton) ::: The warden tells Anderton.",
        "DreamsComeTrue(anderton) ::: The warden tells him that all his dreams come true."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 627,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 7,
      "paragraph": "After Burgess's death, the PreCrime system is shut down and all prisoners pardoned. Anderton and Lara are soon to have a new child together. The Precogs are sent to an isolated island to live their lives in peace.",
      "question_template": "[[CANDIDATE_ANSWER]] became a drug addict.",
      "candidate_answers": [
        "Lara"
      ],
      "predicates": [
        "Pardoned(x) ::: x is a pardoned prisoner.",
        "ShutDown(d) ::: the PreCrime system is shut down.",
        "NewChild(x, y) ::: x and y are having a new child together.",
        "SentTo(x, y) ::: x is sent to y.",
        "LiveInPeace(x) ::: x lives in peace."
      ],
      "premises": [
        "Pardoned(e) ::: All prisoners are pardoned after Burgess's death.",
        "ShutDown(d) ::: The PreCrime system is shut down after Burgess's death.",
        "NewChild(a_2, a_3) ::: Anderton and Lara are soon to have a new child together.",
        "SentTo(b_1, c_1) ::: The Precogs are sent to an isolated island.",
        "LiveInPeace(b_1) ::: The Precogs live their lives in peace on the isolated island."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "628": [
    {
      "id": 628,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 0,
      "paragraph": " In April 2054, Washington, D.C.'s PreCrime police stops murderers before they act, reducing the murder rate to zero. Murders are predicted using three mutated humans, called \"Precogs\", who \"previsualize\" crimes by receiving visions of the future. Would-be murderers are imprisoned in their own happy virtual reality. The Federal government is on the verge of adopting the controversial program.",
      "question_template": "The PreCog says that [[CANDIDATE_ANSWER]] will be murdered by Anderton.",
      "candidate_answers": [
        "In their own happy virtual reality"
      ],
      "predicates": [
        "Predicted(murder) ::: A murder is predicted.",
        "ImprisonedInVirtualReality(x) ::: x is imprisoned in their own happy virtual reality.",
        "PreCrimeSystem(x) ::: x is the PreCrime police system.",
        "Precogs(x) ::: x refers to the mutated humans who previsualize crimes.",
        "MurderRateZero() ::: The murder rate is reduced to zero.",
        "Adopts(x) ::: x is adopted by the Federal government."
      ],
      "premises": [
        "Predicted(murder) → ImprisonedInVirtualReality(wouldBeMurderer) ::: If a murder is predicted, then the would-be murderer is imprisoned in a happy virtual reality.",
        "PreCrimeSystem(d) ∧ Precogs(b_1) ∧ MurderRateZero() ::: Washington, D.C.'s PreCrime police stops murderers before they act, reducing the murder rate to zero.",
        "Adopts(FederalGovernment) ∧ PreCrimeSystem(d) ::: The Federal government is on the verge of adopting the controversial PreCrime program."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 628,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 5,
      "paragraph": "Lara calls Burgess to reveal that Anderton is with her, and Anderton is captured, accused of both murders, and fitted with the brain device that puts him permanently into a dreamlike sleep. As his body is deposited into the prison, the warden tells him, \"that all your dreams come true.â",
      "question_template": "The PreCog says that [[CANDIDATE_ANSWER]] will be murdered by Anderton.",
      "candidate_answers": [
        "the prison"
      ],
      "predicates": [
        "Calls(x, y) ::: x calls y.",
        "Reveals(x, y) ::: x reveals y.",
        "Captured(x) ::: x is captured.",
        "Accused(x, y) ::: x is accused of y.",
        "FittedWithDevice(x) ::: x is fitted with a brain device.",
        "Deposited(x, y) ::: x is deposited into y.",
        "Tells(x, y) ::: x tells y.",
        "DreamsComeTrue(x) ::: x's dreams come true."
      ],
      "premises": [
        "Calls(lara, burgess) ::: Lara calls Burgess to reveal that Anderton is with her.",
        "Reveals(lara, anderton) ::: Lara reveals that Anderton is with her.",
        "Captured(anderton) ::: Anderton is captured.",
        "Accused(anderton, murders) ::: Anderton is accused of both murders.",
        "FittedWithDevice(anderton) ::: Anderton is fitted with the brain device that puts him permanently into a dreamlike sleep.",
        "Deposited(anderton, prison) ::: Anderton's body is deposited into the prison.",
        "Tells(warden, anderton) ::: The warden tells Anderton.",
        "DreamsComeTrue(anderton) ::: The warden tells him that all his dreams come true."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 628,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 6,
      "paragraph": "Agatha is reconnected to the PreCrime system. While attempting to comfort Lara, Burgess accidentally reveals himself as Lively's murderer. Lara frees Anderton from stasis, and Anderton exposes Burgess at a PreCrime celebratory banquet by playing the full video of Agatha's vision of Burgess killing Lively. A new report is generated at PreCrime: Burgess will kill Anderton. Burgess corners Anderton, and explains that as he could not afford to let Lively take Agatha back without impacting PreCrime, he arranged to kill Lively following an actual attempt on her life, so that the murder would appear as an echo to the technician within PreCrime and be ignored. Anderton points out Burgess's dilemma: If Burgess kills Anderton, he will be imprisoned for life, but PreCrime will be validated; if he spares Anderton, PreCrime will be discredited and shut down. Anderton reveals the ultimate flaw of the system: once people are aware of their future, they are able to change it. Burgess shoots himself.",
      "question_template": "The PreCog says that [[CANDIDATE_ANSWER]] will be murdered by Anderton.",
      "candidate_answers": [
        "PreCrime"
      ],
      "predicates": [
        "Reconnected(a_1) ::: Burgess is reconnected to the PreCrime system.",
        "Murderer(a_1, a_2) ::: Burgess is the murderer of Lively.",
        "Freed(a_3, a_2) ::: Lara frees Anderton from stasis.",
        "Exposes(a_2, a_1) ::: Anderton exposes Burgess.",
        "GeneratedReport(d, a_1) ::: A new report is generated at PreCrime stating that Burgess will kill Anderton.",
        "Corners(a_1, a_2) ::: Burgess corners Anderton.",
        "Explains(a_1, a_2) ::: Burgess explains his actions to Anderton.",
        "Dilemma(a_1) ::: Burgess faces a moral dilemma.",
        "Imprisoned(a_1) ::: Burgess will be imprisoned for life if he kills Anderton.",
        "Validated(d) ::: PreCrime will be validated if Burgess kills Anderton.",
        "Discredited(d) ::: PreCrime will be discredited if Burgess spares Anderton.",
        "Flaw(d) ::: There is a flaw in the PreCrime system.",
        "Aware(a_0, f) ::: People are aware of their future.",
        "ChangeFuture(a_0) ::: People are able to change their future.",
        "Shoots(a_1) ::: Burgess shoots himself."
      ],
      "premises": [
        "Reconnected(burgess) ::: Agatha is reconnected to the PreCrime system.",
        "Murderer(burgess, lively) ::: Burgess accidentally reveals himself as Lively's murderer.",
        "Freed(lara, anderton) ::: Lara frees Anderton from stasis.",
        "Exposes(anderton, burgess) ::: Anderton exposes Burgess at a PreCrime celebratory banquet by playing the full video of Agatha's vision of Burgess killing Lively.",
        "GeneratedReport(d, burgess) ::: A new report is generated at PreCrime: Burgess will kill Anderton.",
        "Corners(burgess, anderton) ::: Burgess corners Anderton.",
        "Explains(burgess, anderton) ::: Burgess explains his actions to Anderton.",
        "Dilemma(burgess) ::: Burgess faces a moral dilemma regarding the lives of others.",
        "Imprisoned(burgess) → Validated(d) ::: If Burgess kills Anderton, he will be imprisoned for life, but PreCrime will be validated.",
        "Spared(burgess) → Discredited(d) ::: If Burgess spares Anderton, PreCrime will be discredited and shut down.",
        "Flaw(d) ::: Anderton reveals the ultimate flaw of the system: once people are aware of their future, they are able to change it.",
        "Shoots(burgess) ::: Burgess shoots himself.",
        "Conclusion:",
        "Dilemma(burgess) ::: Burgess's actions are driven by the need to protect the PreCrime system, leading to a moral dilemma regarding the lives of others."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "629": [
    {
      "id": 629,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 1,
      "paragraph": "Since the disappearance of his son Sean, PreCrime Captain John Anderton has separated from his wife Lara and becomes a drug addict. While United States Department of Justice agent Danny Witwer is auditing the program, the Precogs generate a new prediction, saying Anderton will murder a man named Leo Crow in 36 hours. Anderton does not know Crow, but flees the area as Witwer begins a manhunt. Anderton seeks the advice of Dr. Iris Hineman, the creator of PreCrime technology. She reveals that sometimes, one of the Precogs, usually Agatha, has a different vision than the other two, a \"minority report\" of a possible alternate future; this has been kept a secret as it would damage the system's credibility. Anderton resolves to recover the minority report to prove his innocence.",
      "question_template": "[[CANDIDATE_ANSWER]] is the founder of PreCrime.",
      "candidate_answers": [
        "- He becomes a drug addict.",
        "- The Precogs generate a new prediction, saying Anderton will murder a man named Leo Crow in 36 hours.",
        "- Anderton flees the area as Witwer begins a manhunt.",
        "- Anderton seeks the advice of Dr. Iris Hineman."
      ],
      "predicates": [
        "Separated(a_2, a_3) ::: John Anderton has separated from his wife Lara.",
        "DrugAddict(a_2) ::: John Anderton has become a drug addict.",
        "Auditing(a_1, d) ::: Danny Witwer is auditing the PreCrime program.",
        "GeneratesPrediction(b_1, a_2, a_4, t) ::: The Precogs generate a prediction that Anderton will murder a man named Leo Crow in 36 hours.",
        "Flees(a_2, c_0) ::: John Anderton flees the area.",
        "SeeksAdvice(a_2, a_5) ::: John Anderton seeks the advice of Dr. Iris Hineman.",
        "Reveals(a_5, b_1) ::: Dr. Iris Hineman reveals information about the Precogs.",
        "HasDifferentVision(b_1, a_6) ::: One of the Precogs, usually Agatha, has a different vision than the other two.",
        "KeepsSecret(b_1) ::: The existence of the minority report is kept a secret.",
        "Resolves(a_2, b_1) ::: John Anderton resolves to recover the minority report."
      ],
      "premises": [
        "Separated(a_2, a_3) ::: John Anderton has separated from his wife Lara.",
        "DrugAddict(a_2) ::: John Anderton has become a drug addict.",
        "Auditing(a_1, d) ::: Danny Witwer is auditing the PreCrime program.",
        "GeneratesPrediction(b_1, a_2, a_4, 36) ::: The Precogs generate a prediction that Anderton will murder a man named Leo Crow in 36 hours.",
        "Flees(a_2, c_0) ::: John Anderton flees the area.",
        "SeeksAdvice(a_2, a_5) ::: John Anderton seeks the advice of Dr. Iris Hineman.",
        "Reveals(a_5, b_1) ::: Dr. Iris Hineman reveals information about the Precogs.",
        "HasDifferentVision(b_1, a_6) ::: One of the Precogs, usually Agatha, has a different vision than the other two.",
        "KeepsSecret(b_1) ::: The existence of the minority report is kept a secret.",
        "Resolves(a_2, b_1) ::: John Anderton resolves to recover the minority report to prove his innocence."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 629,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 3,
      "paragraph": "Anderton and Agatha go to Crow's apartment as the 36-hour time nears, finding numerous photos of children, including Sean's. Crow arrives and Anderton prepares to kill him, accusing him to be a serial child killer. Agatha talks Anderton out of shooting Crow by telling him that he has the ability to choose his future now that he is aware of it. Crow however begs to be killed, having been hired to plant the photos and be killed in exchange for his family's financial well being. Crow grabs Anderton's gun and pushes the trigger, killing himself. Anderton and Agatha flee to Lara's house outside the city for refuge. There they learn Lively was Agatha's drug-addicted mother who sold her to PreCrime. Lively had sobered up and attempted to reclaim Agatha, but was murdered. Anderton realizes he is being targeted for knowing about Lively's existence and her connection to Agatha.",
      "question_template": "[[CANDIDATE_ANSWER]] is the founder of PreCrime.",
      "candidate_answers": [
        "- Anderton prepares to kill Crow",
        "- Agatha talks Anderton out of shooting Crow",
        "- Anderton and Agatha flee to Lara's house outside the city for refuge",
        "- Anderton realizes he is being targeted for knowing about Lively's existence and her connection to Agatha"
      ],
      "predicates": [
        "Aware(x) ::: x is aware of their future.",
        "ChooseFuture(x) ::: x has the ability to choose their future.",
        "Targeted(x) ::: x is targeted for knowing about Lively's existence and her connection to Agatha.",
        "Killed(x) ::: x is killed.",
        "HiredToPlantPhotos(x) ::: x is hired to plant the photos.",
        "Flee(x, y) ::: x flees to location y.",
        "Mother(x, y) ::: x is the mother of y.",
        "Sold(x, y) ::: x sold y.",
        "SoberedUp(x) ::: x has sobered up.",
        "Murdered(x) ::: x is murdered."
      ],
      "premises": [
        "ChooseFuture(a_2) ∧ Aware(a_2) ::: Anderton has the ability to choose his future now that he is aware of it.",
        "Targeted(a_2) ::: Anderton is targeted for knowing about Lively's existence and her connection to Agatha.",
        "Killed(a_1) ∧ HiredToPlantPhotos(a_1) ::: Crow is killed and was hired to plant the photos.",
        "Flee(a_2, a_3) ::: Anderton flees to Lara's house for refuge.",
        "Mother(a_1, a_2) ∧ Sold(a_1, a_2) ∧ SoberedUp(a_1) ∧ Murdered(a_1) ::: Lively was Agatha's drug-addicted mother who sold her to PreCrime, had sobered up, and was murdered."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 629,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 5,
      "paragraph": "Lara calls Burgess to reveal that Anderton is with her, and Anderton is captured, accused of both murders, and fitted with the brain device that puts him permanently into a dreamlike sleep. As his body is deposited into the prison, the warden tells him, \"that all your dreams come true.â",
      "question_template": "[[CANDIDATE_ANSWER]] is the founder of PreCrime.",
      "candidate_answers": [
        "Anderton is captured",
        "Accused of both murders",
        "Fitted with the brain device that puts him permanently into a dreamlike sleep",
        "His body is deposited into the prison"
      ],
      "predicates": [
        "Calls(x, y) ::: x calls y.",
        "Reveals(x, y) ::: x reveals y.",
        "Captured(x) ::: x is captured.",
        "Accused(x, y) ::: x is accused of y.",
        "FittedWithDevice(x) ::: x is fitted with a brain device.",
        "Deposited(x, y) ::: x is deposited into y.",
        "Tells(x, y) ::: x tells y.",
        "DreamsComeTrue(x) ::: x's dreams come true."
      ],
      "premises": [
        "Calls(lara, burgess) ::: Lara calls Burgess to reveal that Anderton is with her.",
        "Reveals(lara, anderton) ::: Lara reveals that Anderton is with her.",
        "Captured(anderton) ::: Anderton is captured.",
        "Accused(anderton, murders) ::: Anderton is accused of both murders.",
        "FittedWithDevice(anderton) ::: Anderton is fitted with the brain device that puts him permanently into a dreamlike sleep.",
        "Deposited(anderton, prison) ::: Anderton's body is deposited into the prison.",
        "Tells(warden, anderton) ::: The warden tells Anderton.",
        "DreamsComeTrue(anderton) ::: The warden tells him that all his dreams come true."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 629,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 6,
      "paragraph": "Agatha is reconnected to the PreCrime system. While attempting to comfort Lara, Burgess accidentally reveals himself as Lively's murderer. Lara frees Anderton from stasis, and Anderton exposes Burgess at a PreCrime celebratory banquet by playing the full video of Agatha's vision of Burgess killing Lively. A new report is generated at PreCrime: Burgess will kill Anderton. Burgess corners Anderton, and explains that as he could not afford to let Lively take Agatha back without impacting PreCrime, he arranged to kill Lively following an actual attempt on her life, so that the murder would appear as an echo to the technician within PreCrime and be ignored. Anderton points out Burgess's dilemma: If Burgess kills Anderton, he will be imprisoned for life, but PreCrime will be validated; if he spares Anderton, PreCrime will be discredited and shut down. Anderton reveals the ultimate flaw of the system: once people are aware of their future, they are able to change it. Burgess shoots himself.",
      "question_template": "[[CANDIDATE_ANSWER]] is the founder of PreCrime.",
      "candidate_answers": [
        "- Anderton exposes Burgess at a PreCrime celebratory banquet by playing the full video of Agatha's vision of Burgess killing Lively.",
        "- Anderton points out Burgess's dilemma: If Burgess kills Anderton, he will be imprisoned for life, but PreCrime will be validated; if he spares Anderton, PreCrime will be discredited and shut down.",
        "- Anderton reveals the ultimate flaw of the system: once people are aware of their future, they are able to change it."
      ],
      "predicates": [
        "Reconnected(a_1) ::: Burgess is reconnected to the PreCrime system.",
        "Murderer(a_1, a_2) ::: Burgess is the murderer of Lively.",
        "Freed(a_3, a_2) ::: Lara frees Anderton from stasis.",
        "Exposes(a_2, a_1) ::: Anderton exposes Burgess.",
        "GeneratedReport(d, a_1) ::: A new report is generated at PreCrime stating that Burgess will kill Anderton.",
        "Corners(a_1, a_2) ::: Burgess corners Anderton.",
        "Explains(a_1, a_2) ::: Burgess explains his actions to Anderton.",
        "Dilemma(a_1) ::: Burgess faces a moral dilemma.",
        "Imprisoned(a_1) ::: Burgess will be imprisoned for life if he kills Anderton.",
        "Validated(d) ::: PreCrime will be validated if Burgess kills Anderton.",
        "Discredited(d) ::: PreCrime will be discredited if Burgess spares Anderton.",
        "Flaw(d) ::: There is a flaw in the PreCrime system.",
        "Aware(a_0, f) ::: People are aware of their future.",
        "ChangeFuture(a_0) ::: People are able to change their future.",
        "Shoots(a_1) ::: Burgess shoots himself."
      ],
      "premises": [
        "Reconnected(burgess) ::: Agatha is reconnected to the PreCrime system.",
        "Murderer(burgess, lively) ::: Burgess accidentally reveals himself as Lively's murderer.",
        "Freed(lara, anderton) ::: Lara frees Anderton from stasis.",
        "Exposes(anderton, burgess) ::: Anderton exposes Burgess at a PreCrime celebratory banquet by playing the full video of Agatha's vision of Burgess killing Lively.",
        "GeneratedReport(d, burgess) ::: A new report is generated at PreCrime: Burgess will kill Anderton.",
        "Corners(burgess, anderton) ::: Burgess corners Anderton.",
        "Explains(burgess, anderton) ::: Burgess explains his actions to Anderton.",
        "Dilemma(burgess) ::: Burgess faces a moral dilemma regarding the lives of others.",
        "Imprisoned(burgess) → Validated(d) ::: If Burgess kills Anderton, he will be imprisoned for life, but PreCrime will be validated.",
        "Spared(burgess) → Discredited(d) ::: If Burgess spares Anderton, PreCrime will be discredited and shut down.",
        "Flaw(d) ::: Anderton reveals the ultimate flaw of the system: once people are aware of their future, they are able to change it.",
        "Shoots(burgess) ::: Burgess shoots himself.",
        "Conclusion:",
        "Dilemma(burgess) ::: Burgess's actions are driven by the need to protect the PreCrime system, leading to a moral dilemma regarding the lives of others."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 629,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 7,
      "paragraph": "After Burgess's death, the PreCrime system is shut down and all prisoners pardoned. Anderton and Lara are soon to have a new child together. The Precogs are sent to an isolated island to live their lives in peace.",
      "question_template": "[[CANDIDATE_ANSWER]] is the founder of PreCrime.",
      "candidate_answers": [
        "Anderton and Lara are soon to have a new child together."
      ],
      "predicates": [
        "Pardoned(x) ::: x is a pardoned prisoner.",
        "ShutDown(d) ::: the PreCrime system is shut down.",
        "NewChild(x, y) ::: x and y are having a new child together.",
        "SentTo(x, y) ::: x is sent to y.",
        "LiveInPeace(x) ::: x lives in peace."
      ],
      "premises": [
        "Pardoned(e) ::: All prisoners are pardoned after Burgess's death.",
        "ShutDown(d) ::: The PreCrime system is shut down after Burgess's death.",
        "NewChild(a_2, a_3) ::: Anderton and Lara are soon to have a new child together.",
        "SentTo(b_1, c_1) ::: The Precogs are sent to an isolated island.",
        "LiveInPeace(b_1) ::: The Precogs live their lives in peace on the isolated island."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "630": [
    {
      "id": 630,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 0,
      "paragraph": " In April 2054, Washington, D.C.'s PreCrime police stops murderers before they act, reducing the murder rate to zero. Murders are predicted using three mutated humans, called \"Precogs\", who \"previsualize\" crimes by receiving visions of the future. Would-be murderers are imprisoned in their own happy virtual reality. The Federal government is on the verge of adopting the controversial program.",
      "question_template": "[[CANDIDATE_ANSWER]] often has alternative visions.",
      "candidate_answers": [
        "No relevant information found in the paragraph."
      ],
      "predicates": [
        "Predicted(murder) ::: A murder is predicted.",
        "ImprisonedInVirtualReality(x) ::: x is imprisoned in their own happy virtual reality.",
        "PreCrimeSystem(x) ::: x is the PreCrime police system.",
        "Precogs(x) ::: x refers to the mutated humans who previsualize crimes.",
        "MurderRateZero() ::: The murder rate is reduced to zero.",
        "Adopts(x) ::: x is adopted by the Federal government."
      ],
      "premises": [
        "Predicted(murder) → ImprisonedInVirtualReality(wouldBeMurderer) ::: If a murder is predicted, then the would-be murderer is imprisoned in a happy virtual reality.",
        "PreCrimeSystem(d) ∧ Precogs(b_1) ∧ MurderRateZero() ::: Washington, D.C.'s PreCrime police stops murderers before they act, reducing the murder rate to zero.",
        "Adopts(FederalGovernment) ∧ PreCrimeSystem(d) ::: The Federal government is on the verge of adopting the controversial PreCrime program."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 630,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 6,
      "paragraph": "Agatha is reconnected to the PreCrime system. While attempting to comfort Lara, Burgess accidentally reveals himself as Lively's murderer. Lara frees Anderton from stasis, and Anderton exposes Burgess at a PreCrime celebratory banquet by playing the full video of Agatha's vision of Burgess killing Lively. A new report is generated at PreCrime: Burgess will kill Anderton. Burgess corners Anderton, and explains that as he could not afford to let Lively take Agatha back without impacting PreCrime, he arranged to kill Lively following an actual attempt on her life, so that the murder would appear as an echo to the technician within PreCrime and be ignored. Anderton points out Burgess's dilemma: If Burgess kills Anderton, he will be imprisoned for life, but PreCrime will be validated; if he spares Anderton, PreCrime will be discredited and shut down. Anderton reveals the ultimate flaw of the system: once people are aware of their future, they are able to change it. Burgess shoots himself.",
      "question_template": "[[CANDIDATE_ANSWER]] often has alternative visions.",
      "candidate_answers": [
        "- Burgess arranged to kill Lively following an actual attempt on her life, so that the murder would appear as an echo to the technician within PreCrime and be ignored.",
        "- If Burgess kills Anderton, he will be imprisoned for life, but PreCrime will be validated; if he spares Anderton, PreCrime will be discredited and shut down.",
        "- Anderton reveals the ultimate flaw of the system: once people are aware of their future, they are able to change it."
      ],
      "predicates": [
        "Reconnected(a_1) ::: Burgess is reconnected to the PreCrime system.",
        "Murderer(a_1, a_2) ::: Burgess is the murderer of Lively.",
        "Freed(a_3, a_2) ::: Lara frees Anderton from stasis.",
        "Exposes(a_2, a_1) ::: Anderton exposes Burgess.",
        "GeneratedReport(d, a_1) ::: A new report is generated at PreCrime stating that Burgess will kill Anderton.",
        "Corners(a_1, a_2) ::: Burgess corners Anderton.",
        "Explains(a_1, a_2) ::: Burgess explains his actions to Anderton.",
        "Dilemma(a_1) ::: Burgess faces a moral dilemma.",
        "Imprisoned(a_1) ::: Burgess will be imprisoned for life if he kills Anderton.",
        "Validated(d) ::: PreCrime will be validated if Burgess kills Anderton.",
        "Discredited(d) ::: PreCrime will be discredited if Burgess spares Anderton.",
        "Flaw(d) ::: There is a flaw in the PreCrime system.",
        "Aware(a_0, f) ::: People are aware of their future.",
        "ChangeFuture(a_0) ::: People are able to change their future.",
        "Shoots(a_1) ::: Burgess shoots himself."
      ],
      "premises": [
        "Reconnected(burgess) ::: Agatha is reconnected to the PreCrime system.",
        "Murderer(burgess, lively) ::: Burgess accidentally reveals himself as Lively's murderer.",
        "Freed(lara, anderton) ::: Lara frees Anderton from stasis.",
        "Exposes(anderton, burgess) ::: Anderton exposes Burgess at a PreCrime celebratory banquet by playing the full video of Agatha's vision of Burgess killing Lively.",
        "GeneratedReport(d, burgess) ::: A new report is generated at PreCrime: Burgess will kill Anderton.",
        "Corners(burgess, anderton) ::: Burgess corners Anderton.",
        "Explains(burgess, anderton) ::: Burgess explains his actions to Anderton.",
        "Dilemma(burgess) ::: Burgess faces a moral dilemma regarding the lives of others.",
        "Imprisoned(burgess) → Validated(d) ::: If Burgess kills Anderton, he will be imprisoned for life, but PreCrime will be validated.",
        "Spared(burgess) → Discredited(d) ::: If Burgess spares Anderton, PreCrime will be discredited and shut down.",
        "Flaw(d) ::: Anderton reveals the ultimate flaw of the system: once people are aware of their future, they are able to change it.",
        "Shoots(burgess) ::: Burgess shoots himself.",
        "Conclusion:",
        "Dilemma(burgess) ::: Burgess's actions are driven by the need to protect the PreCrime system, leading to a moral dilemma regarding the lives of others."
      ],
      "conclusions": [
        "None",
        "Imprisoned(burgess) → Validated(d) ∧ Spared(burgess) → Discredited(d)",
        "None"
      ]
    }
  ],
  "631": [
    {
      "id": 631,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 2,
      "paragraph": "Anderton goes to a black market doctor for a risky eye transplant so as to avoid the city-wide optical recognition system. He returns to PreCrime and kidnaps Agatha, shutting down the system, as the Precogs operate as a group mind. Anderton takes Agatha to a hacker to extract the minority report of Leo Crow, but none exists; instead, Agatha shows him an image of the murder of Ann Lively, a woman who was drowned by a hooded figure in 2049.",
      "question_template": "Anderton avoids the optical recognition program by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "A woman who was drowned by a hooded figure in 2049"
      ],
      "predicates": [
        "GoesTo(x, y) ::: x goes to y.",
        "Kidnaps(x, y) ::: x kidnaps y.",
        "ShutsDown(x, y) ::: x shuts down y.",
        "OperatesAsGroupMind(x) ::: x operates as a group mind.",
        "Extracts(x, y, z) ::: x extracts y from z.",
        "Shows(x, y) ::: x shows y.",
        "Exists(x) ::: x exists.",
        "Murder(x, y) ::: x is the murder of y.",
        "DrownedBy(x, y) ::: x is drowned by y."
      ],
      "premises": [
        "GoesTo(anderton, blackMarketDoctor) ::: Anderton goes to a black market doctor for a risky eye transplant.",
        "ShutsDown(anderton, PreCrime) ::: Anderton shuts down the PreCrime system.",
        "OperatesAsGroupMind(precogs) ::: The Precogs operate as a group mind.",
        "Kidnaps(anderton, agatha) ::: Anderton kidnaps Agatha.",
        "Extracts(anderton, minorityReport, hacker) ::: Anderton takes Agatha to a hacker to extract the minority report of Leo Crow.",
        "¬Exists(minorityReport) ::: None exists; instead, Agatha shows him an image of the murder of Ann Lively.",
        "Shows(agatha, murderOfAnnLively) ::: Agatha shows him an image of the murder of Ann Lively.",
        "Murder(murderOfAnnLively, annLively) ::: The murder is of Ann Lively.",
        "DrownedBy(annLively, hoodedFigure) ::: Ann Lively was drowned by a hooded figure in 2049."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 631,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 4,
      "paragraph": "Witwer, studying Crow's death, suspects Anderton is being framed. He examines the footage of Lively's murder and finds there were two attempts on her life, the first having been stopped by PreCrime but the second, occurring minutes later, having succeeded. Witwer reports this to the director and founder of PreCrime, Lamar Burgess, but Burgess responds by killing Witwer using Anderton's gun. With the Precogs still offline, the murder is not detected.",
      "question_template": "Anderton avoids the optical recognition program by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- The second [attempt on her life] having succeeded",
        "- Witwer examines the footage of Lively's murder",
        "- There were two attempts on her life"
      ],
      "predicates": [
        "Framed(x) ::: x is being framed.",
        "Suspects(x, y) ::: x suspects y.",
        "Examines(x, y) ::: x examines y.",
        "Reports(x, y) ::: x reports y to y.",
        "Kills(x, y) ::: x kills y.",
        "Detected(x) ::: x is detected.",
        "Offline(x) ::: x is offline."
      ],
      "premises": [
        "Suspects(witwer, anderton) ::: Witwer suspects Anderton is being framed.",
        "Examines(witwer, footageOfLivelysMurder) ::: Witwer examines the footage of Lively's murder.",
        "Reports(witwer, burgess) ::: Witwer reports this to Lamar Burgess.",
        "Kills(burgess, witwer) ::: Burgess kills Witwer using Anderton's gun.",
        "Offline(precogs) ::: The Precogs are offline.",
        "¬Detected(kills(witwer)) ::: Witwer's murder is not detected due to the Precogs being offline."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 631,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 6,
      "paragraph": "Agatha is reconnected to the PreCrime system. While attempting to comfort Lara, Burgess accidentally reveals himself as Lively's murderer. Lara frees Anderton from stasis, and Anderton exposes Burgess at a PreCrime celebratory banquet by playing the full video of Agatha's vision of Burgess killing Lively. A new report is generated at PreCrime: Burgess will kill Anderton. Burgess corners Anderton, and explains that as he could not afford to let Lively take Agatha back without impacting PreCrime, he arranged to kill Lively following an actual attempt on her life, so that the murder would appear as an echo to the technician within PreCrime and be ignored. Anderton points out Burgess's dilemma: If Burgess kills Anderton, he will be imprisoned for life, but PreCrime will be validated; if he spares Anderton, PreCrime will be discredited and shut down. Anderton reveals the ultimate flaw of the system: once people are aware of their future, they are able to change it. Burgess shoots himself.",
      "question_template": "Anderton avoids the optical recognition program by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Burgess arranged to kill Lively following an actual attempt on her life",
        "- Burgess explains that he could not afford to let Lively take Agatha back without impacting PreCrime"
      ],
      "predicates": [
        "Reconnected(a_1) ::: Burgess is reconnected to the PreCrime system.",
        "Murderer(a_1, a_2) ::: Burgess is the murderer of Lively.",
        "Freed(a_3, a_2) ::: Lara frees Anderton from stasis.",
        "Exposes(a_2, a_1) ::: Anderton exposes Burgess.",
        "GeneratedReport(d, a_1) ::: A new report is generated at PreCrime stating that Burgess will kill Anderton.",
        "Corners(a_1, a_2) ::: Burgess corners Anderton.",
        "Explains(a_1, a_2) ::: Burgess explains his actions to Anderton.",
        "Dilemma(a_1) ::: Burgess faces a moral dilemma.",
        "Imprisoned(a_1) ::: Burgess will be imprisoned for life if he kills Anderton.",
        "Validated(d) ::: PreCrime will be validated if Burgess kills Anderton.",
        "Discredited(d) ::: PreCrime will be discredited if Burgess spares Anderton.",
        "Flaw(d) ::: There is a flaw in the PreCrime system.",
        "Aware(a_0, f) ::: People are aware of their future.",
        "ChangeFuture(a_0) ::: People are able to change their future.",
        "Shoots(a_1) ::: Burgess shoots himself."
      ],
      "premises": [
        "Reconnected(burgess) ::: Agatha is reconnected to the PreCrime system.",
        "Murderer(burgess, lively) ::: Burgess accidentally reveals himself as Lively's murderer.",
        "Freed(lara, anderton) ::: Lara frees Anderton from stasis.",
        "Exposes(anderton, burgess) ::: Anderton exposes Burgess at a PreCrime celebratory banquet by playing the full video of Agatha's vision of Burgess killing Lively.",
        "GeneratedReport(d, burgess) ::: A new report is generated at PreCrime: Burgess will kill Anderton.",
        "Corners(burgess, anderton) ::: Burgess corners Anderton.",
        "Explains(burgess, anderton) ::: Burgess explains his actions to Anderton.",
        "Dilemma(burgess) ::: Burgess faces a moral dilemma regarding the lives of others.",
        "Imprisoned(burgess) → Validated(d) ::: If Burgess kills Anderton, he will be imprisoned for life, but PreCrime will be validated.",
        "Spared(burgess) → Discredited(d) ::: If Burgess spares Anderton, PreCrime will be discredited and shut down.",
        "Flaw(d) ::: Anderton reveals the ultimate flaw of the system: once people are aware of their future, they are able to change it.",
        "Shoots(burgess) ::: Burgess shoots himself.",
        "Conclusion:",
        "Dilemma(burgess) ::: Burgess's actions are driven by the need to protect the PreCrime system, leading to a moral dilemma regarding the lives of others."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "633": [
    {
      "id": 633,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 2,
      "paragraph": "Anderton goes to a black market doctor for a risky eye transplant so as to avoid the city-wide optical recognition system. He returns to PreCrime and kidnaps Agatha, shutting down the system, as the Precogs operate as a group mind. Anderton takes Agatha to a hacker to extract the minority report of Leo Crow, but none exists; instead, Agatha shows him an image of the murder of Ann Lively, a woman who was drowned by a hooded figure in 2049.",
      "question_template": "[[CANDIDATE_ANSWER]] kills Witwer.",
      "candidate_answers": [
        "Ann Lively"
      ],
      "predicates": [
        "GoesTo(x, y) ::: x goes to y.",
        "Kidnaps(x, y) ::: x kidnaps y.",
        "ShutsDown(x, y) ::: x shuts down y.",
        "OperatesAsGroupMind(x) ::: x operates as a group mind.",
        "Extracts(x, y, z) ::: x extracts y from z.",
        "Shows(x, y) ::: x shows y.",
        "Exists(x) ::: x exists.",
        "Murder(x, y) ::: x is the murder of y.",
        "DrownedBy(x, y) ::: x is drowned by y."
      ],
      "premises": [
        "GoesTo(anderton, blackMarketDoctor) ::: Anderton goes to a black market doctor for a risky eye transplant.",
        "ShutsDown(anderton, PreCrime) ::: Anderton shuts down the PreCrime system.",
        "OperatesAsGroupMind(precogs) ::: The Precogs operate as a group mind.",
        "Kidnaps(anderton, agatha) ::: Anderton kidnaps Agatha.",
        "Extracts(anderton, minorityReport, hacker) ::: Anderton takes Agatha to a hacker to extract the minority report of Leo Crow.",
        "¬Exists(minorityReport) ::: None exists; instead, Agatha shows him an image of the murder of Ann Lively.",
        "Shows(agatha, murderOfAnnLively) ::: Agatha shows him an image of the murder of Ann Lively.",
        "Murder(murderOfAnnLively, annLively) ::: The murder is of Ann Lively.",
        "DrownedBy(annLively, hoodedFigure) ::: Ann Lively was drowned by a hooded figure in 2049."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 633,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 3,
      "paragraph": "Anderton and Agatha go to Crow's apartment as the 36-hour time nears, finding numerous photos of children, including Sean's. Crow arrives and Anderton prepares to kill him, accusing him to be a serial child killer. Agatha talks Anderton out of shooting Crow by telling him that he has the ability to choose his future now that he is aware of it. Crow however begs to be killed, having been hired to plant the photos and be killed in exchange for his family's financial well being. Crow grabs Anderton's gun and pushes the trigger, killing himself. Anderton and Agatha flee to Lara's house outside the city for refuge. There they learn Lively was Agatha's drug-addicted mother who sold her to PreCrime. Lively had sobered up and attempted to reclaim Agatha, but was murdered. Anderton realizes he is being targeted for knowing about Lively's existence and her connection to Agatha.",
      "question_template": "[[CANDIDATE_ANSWER]] kills Witwer.",
      "candidate_answers": [
        "Lively",
        "Agatha's drug-addicted mother"
      ],
      "predicates": [
        "Aware(x) ::: x is aware of their future.",
        "ChooseFuture(x) ::: x has the ability to choose their future.",
        "Targeted(x) ::: x is targeted for knowing about Lively's existence and her connection to Agatha.",
        "Killed(x) ::: x is killed.",
        "HiredToPlantPhotos(x) ::: x is hired to plant the photos.",
        "Flee(x, y) ::: x flees to location y.",
        "Mother(x, y) ::: x is the mother of y.",
        "Sold(x, y) ::: x sold y.",
        "SoberedUp(x) ::: x has sobered up.",
        "Murdered(x) ::: x is murdered."
      ],
      "premises": [
        "ChooseFuture(a_2) ∧ Aware(a_2) ::: Anderton has the ability to choose his future now that he is aware of it.",
        "Targeted(a_2) ::: Anderton is targeted for knowing about Lively's existence and her connection to Agatha.",
        "Killed(a_1) ∧ HiredToPlantPhotos(a_1) ::: Crow is killed and was hired to plant the photos.",
        "Flee(a_2, a_3) ::: Anderton flees to Lara's house for refuge.",
        "Mother(a_1, a_2) ∧ Sold(a_1, a_2) ∧ SoberedUp(a_1) ∧ Murdered(a_1) ::: Lively was Agatha's drug-addicted mother who sold her to PreCrime, had sobered up, and was murdered."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "634": [
    {
      "id": 634,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 4,
      "paragraph": "Witwer, studying Crow's death, suspects Anderton is being framed. He examines the footage of Lively's murder and finds there were two attempts on her life, the first having been stopped by PreCrime but the second, occurring minutes later, having succeeded. Witwer reports this to the director and founder of PreCrime, Lamar Burgess, but Burgess responds by killing Witwer using Anderton's gun. With the Precogs still offline, the murder is not detected.",
      "question_template": "[[CANDIDATE_ANSWER]] is Ann Lively.",
      "candidate_answers": [
        "Lamar Burgess kills Witwer using Anderton's gun."
      ],
      "predicates": [
        "Framed(x) ::: x is being framed.",
        "Suspects(x, y) ::: x suspects y.",
        "Examines(x, y) ::: x examines y.",
        "Reports(x, y) ::: x reports y to y.",
        "Kills(x, y) ::: x kills y.",
        "Detected(x) ::: x is detected.",
        "Offline(x) ::: x is offline."
      ],
      "premises": [
        "Suspects(witwer, anderton) ::: Witwer suspects Anderton is being framed.",
        "Examines(witwer, footageOfLivelysMurder) ::: Witwer examines the footage of Lively's murder.",
        "Reports(witwer, burgess) ::: Witwer reports this to Lamar Burgess.",
        "Kills(burgess, witwer) ::: Burgess kills Witwer using Anderton's gun.",
        "Offline(precogs) ::: The Precogs are offline.",
        "¬Detected(kills(witwer)) ::: Witwer's murder is not detected due to the Precogs being offline."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 634,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 6,
      "paragraph": "Agatha is reconnected to the PreCrime system. While attempting to comfort Lara, Burgess accidentally reveals himself as Lively's murderer. Lara frees Anderton from stasis, and Anderton exposes Burgess at a PreCrime celebratory banquet by playing the full video of Agatha's vision of Burgess killing Lively. A new report is generated at PreCrime: Burgess will kill Anderton. Burgess corners Anderton, and explains that as he could not afford to let Lively take Agatha back without impacting PreCrime, he arranged to kill Lively following an actual attempt on her life, so that the murder would appear as an echo to the technician within PreCrime and be ignored. Anderton points out Burgess's dilemma: If Burgess kills Anderton, he will be imprisoned for life, but PreCrime will be validated; if he spares Anderton, PreCrime will be discredited and shut down. Anderton reveals the ultimate flaw of the system: once people are aware of their future, they are able to change it. Burgess shoots himself.",
      "question_template": "[[CANDIDATE_ANSWER]] is Ann Lively.",
      "candidate_answers": [
        "- Burgess accidentally reveals himself as Lively's murderer.",
        "- He arranged to kill Lively following an actual attempt on her life."
      ],
      "predicates": [
        "Reconnected(a_1) ::: Burgess is reconnected to the PreCrime system.",
        "Murderer(a_1, a_2) ::: Burgess is the murderer of Lively.",
        "Freed(a_3, a_2) ::: Lara frees Anderton from stasis.",
        "Exposes(a_2, a_1) ::: Anderton exposes Burgess.",
        "GeneratedReport(d, a_1) ::: A new report is generated at PreCrime stating that Burgess will kill Anderton.",
        "Corners(a_1, a_2) ::: Burgess corners Anderton.",
        "Explains(a_1, a_2) ::: Burgess explains his actions to Anderton.",
        "Dilemma(a_1) ::: Burgess faces a moral dilemma.",
        "Imprisoned(a_1) ::: Burgess will be imprisoned for life if he kills Anderton.",
        "Validated(d) ::: PreCrime will be validated if Burgess kills Anderton.",
        "Discredited(d) ::: PreCrime will be discredited if Burgess spares Anderton.",
        "Flaw(d) ::: There is a flaw in the PreCrime system.",
        "Aware(a_0, f) ::: People are aware of their future.",
        "ChangeFuture(a_0) ::: People are able to change their future.",
        "Shoots(a_1) ::: Burgess shoots himself."
      ],
      "premises": [
        "Reconnected(burgess) ::: Agatha is reconnected to the PreCrime system.",
        "Murderer(burgess, lively) ::: Burgess accidentally reveals himself as Lively's murderer.",
        "Freed(lara, anderton) ::: Lara frees Anderton from stasis.",
        "Exposes(anderton, burgess) ::: Anderton exposes Burgess at a PreCrime celebratory banquet by playing the full video of Agatha's vision of Burgess killing Lively.",
        "GeneratedReport(d, burgess) ::: A new report is generated at PreCrime: Burgess will kill Anderton.",
        "Corners(burgess, anderton) ::: Burgess corners Anderton.",
        "Explains(burgess, anderton) ::: Burgess explains his actions to Anderton.",
        "Dilemma(burgess) ::: Burgess faces a moral dilemma regarding the lives of others.",
        "Imprisoned(burgess) → Validated(d) ::: If Burgess kills Anderton, he will be imprisoned for life, but PreCrime will be validated.",
        "Spared(burgess) → Discredited(d) ::: If Burgess spares Anderton, PreCrime will be discredited and shut down.",
        "Flaw(d) ::: Anderton reveals the ultimate flaw of the system: once people are aware of their future, they are able to change it.",
        "Shoots(burgess) ::: Burgess shoots himself.",
        "Conclusion:",
        "Dilemma(burgess) ::: Burgess's actions are driven by the need to protect the PreCrime system, leading to a moral dilemma regarding the lives of others."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "635": [
    {
      "id": 635,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 5,
      "paragraph": "Lara calls Burgess to reveal that Anderton is with her, and Anderton is captured, accused of both murders, and fitted with the brain device that puts him permanently into a dreamlike sleep. As his body is deposited into the prison, the warden tells him, \"that all your dreams come true.â",
      "question_template": "The PreCrime prisoners are affected by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "the warden"
      ],
      "predicates": [
        "Calls(x, y) ::: x calls y.",
        "Reveals(x, y) ::: x reveals y.",
        "Captured(x) ::: x is captured.",
        "Accused(x, y) ::: x is accused of y.",
        "FittedWithDevice(x) ::: x is fitted with a brain device.",
        "Deposited(x, y) ::: x is deposited into y.",
        "Tells(x, y) ::: x tells y.",
        "DreamsComeTrue(x) ::: x's dreams come true."
      ],
      "premises": [
        "Calls(lara, burgess) ::: Lara calls Burgess to reveal that Anderton is with her.",
        "Reveals(lara, anderton) ::: Lara reveals that Anderton is with her.",
        "Captured(anderton) ::: Anderton is captured.",
        "Accused(anderton, murders) ::: Anderton is accused of both murders.",
        "FittedWithDevice(anderton) ::: Anderton is fitted with the brain device that puts him permanently into a dreamlike sleep.",
        "Deposited(anderton, prison) ::: Anderton's body is deposited into the prison.",
        "Tells(warden, anderton) ::: The warden tells Anderton.",
        "DreamsComeTrue(anderton) ::: The warden tells him that all his dreams come true."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "637": [
    {
      "id": 637,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 7,
      "paragraph": "After Burgess's death, the PreCrime system is shut down and all prisoners pardoned. Anderton and Lara are soon to have a new child together. The Precogs are sent to an isolated island to live their lives in peace.",
      "question_template": "Murders in Washington, D.C. 2054 are predicted and stopped by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "An isolated island"
      ],
      "predicates": [
        "Pardoned(x) ::: x is a pardoned prisoner.",
        "ShutDown(d) ::: the PreCrime system is shut down.",
        "NewChild(x, y) ::: x and y are having a new child together.",
        "SentTo(x, y) ::: x is sent to y.",
        "LiveInPeace(x) ::: x lives in peace."
      ],
      "premises": [
        "Pardoned(e) ::: All prisoners are pardoned after Burgess's death.",
        "ShutDown(d) ::: The PreCrime system is shut down after Burgess's death.",
        "NewChild(a_2, a_3) ::: Anderton and Lara are soon to have a new child together.",
        "SentTo(b_1, c_1) ::: The Precogs are sent to an isolated island.",
        "LiveInPeace(b_1) ::: The Precogs live their lives in peace on the isolated island."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "638": [
    {
      "id": 638,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 0,
      "paragraph": " McTeague is a dentist of limited intellect from a poor miner's family, who has opened a dentist shop on Polk Street in San Francisco. (His first name is never revealed; other characters in the novel call him simply \"Mac\".) His best friend, Marcus Schouler, brings his cousin, Trina Sieppe, whom he is courting, to McTeague's parlor for dental work. McTeague becomes infatuated with her while working on her teeth, and Marcus graciously steps aside. McTeague successfully woos Trina. Shortly after McTeague and Trina have kissed and declared their love for each other, Trina discovers that she has won $15,000 from a lottery ticket. In the ensuing celebration Trina's mother, Mrs Sieppe, announces that McTeague and Trina are to marry. Marcus becomes jealous of McTeague, and claims that he has been cheated out of money that would have been rightfully his if he had married Trina.",
      "question_template": "The Pecogs predict that [[CANDIDATE_ANSWER]] will be killed in 36 hours.",
      "candidate_answers": [
        "- A dentist of limited intellect from a poor miner's family",
        "- His best friend, Marcus Schouler",
        "- Trina Sieppe, whom he is courting",
        "- McTeague becomes infatuated with her while working on her teeth",
        "- McTeague successfully woos Trina"
      ],
      "predicates": [
        "Dentist(x) ::: x is a dentist.",
        "LimitedIntellect(x) ::: x has limited intellect.",
        "FromPoorFamily(x) ::: x is from a poor miner's family.",
        "OpenedShop(x, y) ::: x opened a shop at location y.",
        "BestFriend(x, y) ::: x is the best friend of y.",
        "Courting(x, y) ::: x is courting y.",
        "InfatuatedWith(x, y) ::: x is infatuated with y.",
        "Woos(x, y) ::: x woos y.",
        "Kissed(x, y) ::: x kissed y.",
        "DeclaredLove(x, y) ::: x declared love for y.",
        "WonLottery(x, y) ::: x won y from a lottery ticket.",
        "Announces(x, y) ::: x announces y.",
        "JealousOf(x, y) ::: x is jealous of y.",
        "ClaimsCheated(x, y) ::: x claims to have been cheated out of y."
      ],
      "premises": [
        "Dentist(a_1) ∧ LimitedIntellect(a_1) ∧ FromPoorFamily(a_1) ∧ OpenedShop(a_1, b_0) ::: McTeague is a dentist of limited intellect from a poor miner's family, who has opened a dentist shop on Polk Street in San Francisco.",
        "BestFriend(a_2, a_1) ∧ Courting(a_2, a_3) ::: Marcus Schouler is McTeague's best friend and is courting Trina Sieppe.",
        "InfatuatedWith(a_1, a_3) ::: McTeague becomes infatuated with Trina while working on her teeth.",
        "Woos(a_1, a_3) ::: McTeague successfully woos Trina.",
        "Kissed(a_1, a_3) ∧ DeclaredLove(a_1, a_3) ::: McTeague and Trina kissed and declared their love for each other.",
        "WonLottery(a_3, $15,000) ::: Trina discovers that she has won $15,000 from a lottery ticket.",
        "Announces(a_3, \"McTeague and Trina are to marry\") ::: Trina's mother announces that McTeague and Trina are to marry.",
        "JealousOf(a_2, a_1) ∧ ClaimsCheated(a_2, $15,000) ::: Marcus becomes jealous of McTeague and claims that he has been cheated out of money that would have been rightfully his if he had married Trina."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 638,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 1,
      "paragraph": "The marriage takes place, and Mrs Sieppe, along with the rest of Trina's family, move away from San Francisco, leaving her alone with McTeague. Trina proves to be a parsimonious wife; she refuses to touch the principal of her $15,000, which she invests with her uncle. She insists that she and McTeague must live on the earnings from McTeague's dental practice, the small income from the $15,000 investment, and the bit of money she earns from carving small wooden figures of Noah's animals and his Ark for sale in her uncle's shop. Secretly, she accumulates penny-pinched savings in a locked trunk. Though the couple are happy, the friendship between Marcus and Mac deteriorates. More than once the two men come to grips; each time McTeague's immense physical strength prevails, and eventually he breaks Marcus' arm in a fight. When Marcus recovers, he goes south, intending to become a rancher; before he leaves, he visits the McTeagues, and he and Mac part apparently as friends.",
      "question_template": "The Pecogs predict that [[CANDIDATE_ANSWER]] will be killed in 36 hours.",
      "candidate_answers": [
        "McTeague",
        "A dentist",
        "Trina's husband"
      ],
      "predicates": [
        "Parsimonious(x) ::: x is a parsimonious person.",
        "RefusesToTouchPrincipal(x, y) ::: x refuses to touch the principal of y.",
        "Invests(x, y) ::: x invests with y.",
        "LivesOnEarnings(x) ::: x lives on the earnings from McTeague's dental practice.",
        "AccumulatesSavings(x) ::: x accumulates savings.",
        "DeterioratesFriendship(x, y) ::: The friendship between x and y deteriorates.",
        "PrevailsInFight(x, y) ::: x prevails in a fight against y.",
        "BreaksArm(x, y) ::: x breaks y's arm.",
        "PartAsFriends(x, y) ::: x and y part as friends."
      ],
      "premises": [
        "RefusesToTouchPrincipal(a_3, $15,000) ∧ Parsimonious(a_3) ∧ LivesOnEarnings(a_1) ::: Trina's refusal to touch the principal of her $15,000 leads to a parsimonious lifestyle for her and McTeague.",
        "PrevailsInFight(a_1, a_2) ∧ BreaksArm(a_1, a_2) ::: McTeague's immense physical strength leads to the deterioration of the friendship with Marcus.",
        "DeterioratesFriendship(a_2, a_1) ::: The friendship between Marcus and McTeague deteriorates.",
        "AccumulatesSavings(a_3) ::: Trina secretly accumulates penny-pinched savings in a locked trunk.",
        "PartAsFriends(a_2, a_1) ::: Marcus and McTeague part apparently as friends before Marcus leaves."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 638,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 2,
      "paragraph": "Catastrophe strikes when McTeague is debarred from practising dentistry by the authorities; it becomes clear that before leaving, Marcus has taken revenge on Mac by informing city hall that he has no license or degree. McTeague loses his practice and the couple are forced to move into successively poorer quarters as Trina becomes more and more miserly. Their life together deteriorates until McTeague takes all Trina's domestic savings (amounting to $400 or roughly $10,000 in 2010 values) and abandons her. Meanwhile, Trina falls completely under the spell of money and withdraws the principal of her prior winnings in gold from her uncle's firm so she can admire and handle the coins in her room, at one point spreading them over her bed and rolling around in them.",
      "question_template": "The Pecogs predict that [[CANDIDATE_ANSWER]] will be killed in 36 hours.",
      "candidate_answers": [
        "McTeague",
        "A dentist",
        "Debarred from practising dentistry by the authorities"
      ],
      "predicates": [
        "Debarred(a_1) ::: McTeague is debarred from practicing dentistry.",
        "Informed(a_2, cityHall) ::: Marcus informed city hall about McTeague's lack of license or degree.",
        "LosesPractice(a_1) ::: McTeague loses his dental practice.",
        "MovesIntoPoorQuarters(a_1, a_3) ::: McTeague and Trina move into successively poorer quarters.",
        "Miserly(a_3) ::: Trina becomes more miserly.",
        "Deteriorates(a_1, a_3) ::: The life of McTeague and Trina deteriorates.",
        "TakesSavings(a_1, a_3) ::: McTeague takes Trina's domestic savings.",
        "Abandons(a_1, a_3) ::: McTeague abandons Trina.",
        "FallsUnderSpell(a_3, c) ::: Trina falls completely under the spell of money.",
        "WithdrawsWinnings(a_3) ::: Trina withdraws the principal of her prior winnings in gold.",
        "HandlesCoins(a_3) ::: Trina admires and handles the coins in her room.",
        "SpreadsCoins(a_3) ::: Trina spreads the coins over her bed."
      ],
      "premises": [
        "Debarred(a_1) ∧ Informed(a_2, cityHall) ∧ LosesPractice(a_1) ∧ MovesIntoPoorQuarters(a_1, a_3) ∧ Miserly(a_3) ∧ Deteriorates(a_1, a_3) ::: McTeague is debarred from practicing dentistry, Marcus informs city hall about McTeague's lack of license or degree, McTeague loses his practice, and they move into poorer quarters as Trina becomes more miserly, leading to the deterioration of their life together.",
        "TakesSavings(a_1, a_3) ∧ Abandons(a_1, a_3) ::: McTeague takes Trina's domestic savings and abandons her.",
        "FallsUnderSpell(a_3, c) ∧ WithdrawsWinnings(a_3) ∧ HandlesCoins(a_3) ∧ SpreadsCoins(a_3) ::: Trina falls under the spell of money, withdraws her winnings in gold, admires and handles the coins, and spreads them over her bed."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "639": [
    {
      "id": 639,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 0,
      "paragraph": " McTeague is a dentist of limited intellect from a poor miner's family, who has opened a dentist shop on Polk Street in San Francisco. (His first name is never revealed; other characters in the novel call him simply \"Mac\".) His best friend, Marcus Schouler, brings his cousin, Trina Sieppe, whom he is courting, to McTeague's parlor for dental work. McTeague becomes infatuated with her while working on her teeth, and Marcus graciously steps aside. McTeague successfully woos Trina. Shortly after McTeague and Trina have kissed and declared their love for each other, Trina discovers that she has won $15,000 from a lottery ticket. In the ensuing celebration Trina's mother, Mrs Sieppe, announces that McTeague and Trina are to marry. Marcus becomes jealous of McTeague, and claims that he has been cheated out of money that would have been rightfully his if he had married Trina.",
      "question_template": "Anderton does [[CANDIDATE_ANSWER]] to keep from being recognized by the city wide optical recognition program.",
      "candidate_answers": [
        "Marcus Schouler",
        "McTeague's best friend",
        "Brings his cousin, Trina Sieppe, to McTeague's parlor for dental work",
        "Becomes jealous of McTeague"
      ],
      "predicates": [
        "Dentist(x) ::: x is a dentist.",
        "LimitedIntellect(x) ::: x has limited intellect.",
        "FromPoorFamily(x) ::: x is from a poor miner's family.",
        "OpenedShop(x, y) ::: x opened a shop at location y.",
        "BestFriend(x, y) ::: x is the best friend of y.",
        "Courting(x, y) ::: x is courting y.",
        "InfatuatedWith(x, y) ::: x is infatuated with y.",
        "Woos(x, y) ::: x woos y.",
        "Kissed(x, y) ::: x kissed y.",
        "DeclaredLove(x, y) ::: x declared love for y.",
        "WonLottery(x, y) ::: x won y from a lottery ticket.",
        "Announces(x, y) ::: x announces y.",
        "JealousOf(x, y) ::: x is jealous of y.",
        "ClaimsCheated(x, y) ::: x claims to have been cheated out of y."
      ],
      "premises": [
        "Dentist(a_1) ∧ LimitedIntellect(a_1) ∧ FromPoorFamily(a_1) ∧ OpenedShop(a_1, b_0) ::: McTeague is a dentist of limited intellect from a poor miner's family, who has opened a dentist shop on Polk Street in San Francisco.",
        "BestFriend(a_2, a_1) ∧ Courting(a_2, a_3) ::: Marcus Schouler is McTeague's best friend and is courting Trina Sieppe.",
        "InfatuatedWith(a_1, a_3) ::: McTeague becomes infatuated with Trina while working on her teeth.",
        "Woos(a_1, a_3) ::: McTeague successfully woos Trina.",
        "Kissed(a_1, a_3) ∧ DeclaredLove(a_1, a_3) ::: McTeague and Trina kissed and declared their love for each other.",
        "WonLottery(a_3, $15,000) ::: Trina discovers that she has won $15,000 from a lottery ticket.",
        "Announces(a_3, \"McTeague and Trina are to marry\") ::: Trina's mother announces that McTeague and Trina are to marry.",
        "JealousOf(a_2, a_1) ∧ ClaimsCheated(a_2, $15,000) ::: Marcus becomes jealous of McTeague and claims that he has been cheated out of money that would have been rightfully his if he had married Trina."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 639,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 1,
      "paragraph": "The marriage takes place, and Mrs Sieppe, along with the rest of Trina's family, move away from San Francisco, leaving her alone with McTeague. Trina proves to be a parsimonious wife; she refuses to touch the principal of her $15,000, which she invests with her uncle. She insists that she and McTeague must live on the earnings from McTeague's dental practice, the small income from the $15,000 investment, and the bit of money she earns from carving small wooden figures of Noah's animals and his Ark for sale in her uncle's shop. Secretly, she accumulates penny-pinched savings in a locked trunk. Though the couple are happy, the friendship between Marcus and Mac deteriorates. More than once the two men come to grips; each time McTeague's immense physical strength prevails, and eventually he breaks Marcus' arm in a fight. When Marcus recovers, he goes south, intending to become a rancher; before he leaves, he visits the McTeagues, and he and Mac part apparently as friends.",
      "question_template": "Anderton does [[CANDIDATE_ANSWER]] to keep from being recognized by the city wide optical recognition program.",
      "candidate_answers": [
        "Marcus is a friend of McTeague",
        "Marcus goes south, intending to become a rancher",
        "He visits the McTeagues before leaving"
      ],
      "predicates": [
        "Parsimonious(x) ::: x is a parsimonious person.",
        "RefusesToTouchPrincipal(x, y) ::: x refuses to touch the principal of y.",
        "Invests(x, y) ::: x invests with y.",
        "LivesOnEarnings(x) ::: x lives on the earnings from McTeague's dental practice.",
        "AccumulatesSavings(x) ::: x accumulates savings.",
        "DeterioratesFriendship(x, y) ::: The friendship between x and y deteriorates.",
        "PrevailsInFight(x, y) ::: x prevails in a fight against y.",
        "BreaksArm(x, y) ::: x breaks y's arm.",
        "PartAsFriends(x, y) ::: x and y part as friends."
      ],
      "premises": [
        "RefusesToTouchPrincipal(a_3, $15,000) ∧ Parsimonious(a_3) ∧ LivesOnEarnings(a_1) ::: Trina's refusal to touch the principal of her $15,000 leads to a parsimonious lifestyle for her and McTeague.",
        "PrevailsInFight(a_1, a_2) ∧ BreaksArm(a_1, a_2) ::: McTeague's immense physical strength leads to the deterioration of the friendship with Marcus.",
        "DeterioratesFriendship(a_2, a_1) ::: The friendship between Marcus and McTeague deteriorates.",
        "AccumulatesSavings(a_3) ::: Trina secretly accumulates penny-pinched savings in a locked trunk.",
        "PartAsFriends(a_2, a_1) ::: Marcus and McTeague part apparently as friends before Marcus leaves."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 639,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 2,
      "paragraph": "Catastrophe strikes when McTeague is debarred from practising dentistry by the authorities; it becomes clear that before leaving, Marcus has taken revenge on Mac by informing city hall that he has no license or degree. McTeague loses his practice and the couple are forced to move into successively poorer quarters as Trina becomes more and more miserly. Their life together deteriorates until McTeague takes all Trina's domestic savings (amounting to $400 or roughly $10,000 in 2010 values) and abandons her. Meanwhile, Trina falls completely under the spell of money and withdraws the principal of her prior winnings in gold from her uncle's firm so she can admire and handle the coins in her room, at one point spreading them over her bed and rolling around in them.",
      "question_template": "Anderton does [[CANDIDATE_ANSWER]] to keep from being recognized by the city wide optical recognition program.",
      "candidate_answers": [
        "Marcus has taken revenge on Mac by informing city hall that he has no license or degree."
      ],
      "predicates": [
        "Debarred(a_1) ::: McTeague is debarred from practicing dentistry.",
        "Informed(a_2, cityHall) ::: Marcus informed city hall about McTeague's lack of license or degree.",
        "LosesPractice(a_1) ::: McTeague loses his dental practice.",
        "MovesIntoPoorQuarters(a_1, a_3) ::: McTeague and Trina move into successively poorer quarters.",
        "Miserly(a_3) ::: Trina becomes more miserly.",
        "Deteriorates(a_1, a_3) ::: The life of McTeague and Trina deteriorates.",
        "TakesSavings(a_1, a_3) ::: McTeague takes Trina's domestic savings.",
        "Abandons(a_1, a_3) ::: McTeague abandons Trina.",
        "FallsUnderSpell(a_3, c) ::: Trina falls completely under the spell of money.",
        "WithdrawsWinnings(a_3) ::: Trina withdraws the principal of her prior winnings in gold.",
        "HandlesCoins(a_3) ::: Trina admires and handles the coins in her room.",
        "SpreadsCoins(a_3) ::: Trina spreads the coins over her bed."
      ],
      "premises": [
        "Debarred(a_1) ∧ Informed(a_2, cityHall) ∧ LosesPractice(a_1) ∧ MovesIntoPoorQuarters(a_1, a_3) ∧ Miserly(a_3) ∧ Deteriorates(a_1, a_3) ::: McTeague is debarred from practicing dentistry, Marcus informs city hall about McTeague's lack of license or degree, McTeague loses his practice, and they move into poorer quarters as Trina becomes more miserly, leading to the deterioration of their life together.",
        "TakesSavings(a_1, a_3) ∧ Abandons(a_1, a_3) ::: McTeague takes Trina's domestic savings and abandons her.",
        "FallsUnderSpell(a_3, c) ∧ WithdrawsWinnings(a_3) ∧ HandlesCoins(a_3) ∧ SpreadsCoins(a_3) ::: Trina falls under the spell of money, withdraws her winnings in gold, admires and handles the coins, and spreads them over her bed."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "640": [
    {
      "id": 640,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 1,
      "paragraph": "The marriage takes place, and Mrs Sieppe, along with the rest of Trina's family, move away from San Francisco, leaving her alone with McTeague. Trina proves to be a parsimonious wife; she refuses to touch the principal of her $15,000, which she invests with her uncle. She insists that she and McTeague must live on the earnings from McTeague's dental practice, the small income from the $15,000 investment, and the bit of money she earns from carving small wooden figures of Noah's animals and his Ark for sale in her uncle's shop. Secretly, she accumulates penny-pinched savings in a locked trunk. Though the couple are happy, the friendship between Marcus and Mac deteriorates. More than once the two men come to grips; each time McTeague's immense physical strength prevails, and eventually he breaks Marcus' arm in a fight. When Marcus recovers, he goes south, intending to become a rancher; before he leaves, he visits the McTeagues, and he and Mac part apparently as friends.",
      "question_template": "[[CANDIDATE_ANSWER]] is the person Anderton kidnaps from Precrime.",
      "candidate_answers": [
        "He goes south, intending to become a rancher"
      ],
      "predicates": [
        "Parsimonious(x) ::: x is a parsimonious person.",
        "RefusesToTouchPrincipal(x, y) ::: x refuses to touch the principal of y.",
        "Invests(x, y) ::: x invests with y.",
        "LivesOnEarnings(x) ::: x lives on the earnings from McTeague's dental practice.",
        "AccumulatesSavings(x) ::: x accumulates savings.",
        "DeterioratesFriendship(x, y) ::: The friendship between x and y deteriorates.",
        "PrevailsInFight(x, y) ::: x prevails in a fight against y.",
        "BreaksArm(x, y) ::: x breaks y's arm.",
        "PartAsFriends(x, y) ::: x and y part as friends."
      ],
      "premises": [
        "RefusesToTouchPrincipal(a_3, $15,000) ∧ Parsimonious(a_3) ∧ LivesOnEarnings(a_1) ::: Trina's refusal to touch the principal of her $15,000 leads to a parsimonious lifestyle for her and McTeague.",
        "PrevailsInFight(a_1, a_2) ∧ BreaksArm(a_1, a_2) ::: McTeague's immense physical strength leads to the deterioration of the friendship with Marcus.",
        "DeterioratesFriendship(a_2, a_1) ::: The friendship between Marcus and McTeague deteriorates.",
        "AccumulatesSavings(a_3) ::: Trina secretly accumulates penny-pinched savings in a locked trunk.",
        "PartAsFriends(a_2, a_1) ::: Marcus and McTeague part apparently as friends before Marcus leaves."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "641": [
    {
      "id": 641,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 0,
      "paragraph": " McTeague is a dentist of limited intellect from a poor miner's family, who has opened a dentist shop on Polk Street in San Francisco. (His first name is never revealed; other characters in the novel call him simply \"Mac\".) His best friend, Marcus Schouler, brings his cousin, Trina Sieppe, whom he is courting, to McTeague's parlor for dental work. McTeague becomes infatuated with her while working on her teeth, and Marcus graciously steps aside. McTeague successfully woos Trina. Shortly after McTeague and Trina have kissed and declared their love for each other, Trina discovers that she has won $15,000 from a lottery ticket. In the ensuing celebration Trina's mother, Mrs Sieppe, announces that McTeague and Trina are to marry. Marcus becomes jealous of McTeague, and claims that he has been cheated out of money that would have been rightfully his if he had married Trina.",
      "question_template": "Anderton and Agatha find [[CANDIDATE_ANSWER]] at Crow's apartment.",
      "candidate_answers": [
        "Marcus becomes jealous of McTeague",
        "Claims that he has been cheated out of money that would have been rightfully his if he had married Trina"
      ],
      "predicates": [
        "Dentist(x) ::: x is a dentist.",
        "LimitedIntellect(x) ::: x has limited intellect.",
        "FromPoorFamily(x) ::: x is from a poor miner's family.",
        "OpenedShop(x, y) ::: x opened a shop at location y.",
        "BestFriend(x, y) ::: x is the best friend of y.",
        "Courting(x, y) ::: x is courting y.",
        "InfatuatedWith(x, y) ::: x is infatuated with y.",
        "Woos(x, y) ::: x woos y.",
        "Kissed(x, y) ::: x kissed y.",
        "DeclaredLove(x, y) ::: x declared love for y.",
        "WonLottery(x, y) ::: x won y from a lottery ticket.",
        "Announces(x, y) ::: x announces y.",
        "JealousOf(x, y) ::: x is jealous of y.",
        "ClaimsCheated(x, y) ::: x claims to have been cheated out of y."
      ],
      "premises": [
        "Dentist(a_1) ∧ LimitedIntellect(a_1) ∧ FromPoorFamily(a_1) ∧ OpenedShop(a_1, b_0) ::: McTeague is a dentist of limited intellect from a poor miner's family, who has opened a dentist shop on Polk Street in San Francisco.",
        "BestFriend(a_2, a_1) ∧ Courting(a_2, a_3) ::: Marcus Schouler is McTeague's best friend and is courting Trina Sieppe.",
        "InfatuatedWith(a_1, a_3) ::: McTeague becomes infatuated with Trina while working on her teeth.",
        "Woos(a_1, a_3) ::: McTeague successfully woos Trina.",
        "Kissed(a_1, a_3) ∧ DeclaredLove(a_1, a_3) ::: McTeague and Trina kissed and declared their love for each other.",
        "WonLottery(a_3, $15,000) ::: Trina discovers that she has won $15,000 from a lottery ticket.",
        "Announces(a_3, \"McTeague and Trina are to marry\") ::: Trina's mother announces that McTeague and Trina are to marry.",
        "JealousOf(a_2, a_1) ∧ ClaimsCheated(a_2, $15,000) ::: Marcus becomes jealous of McTeague and claims that he has been cheated out of money that would have been rightfully his if he had married Trina."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 641,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 1,
      "paragraph": "The marriage takes place, and Mrs Sieppe, along with the rest of Trina's family, move away from San Francisco, leaving her alone with McTeague. Trina proves to be a parsimonious wife; she refuses to touch the principal of her $15,000, which she invests with her uncle. She insists that she and McTeague must live on the earnings from McTeague's dental practice, the small income from the $15,000 investment, and the bit of money she earns from carving small wooden figures of Noah's animals and his Ark for sale in her uncle's shop. Secretly, she accumulates penny-pinched savings in a locked trunk. Though the couple are happy, the friendship between Marcus and Mac deteriorates. More than once the two men come to grips; each time McTeague's immense physical strength prevails, and eventually he breaks Marcus' arm in a fight. When Marcus recovers, he goes south, intending to become a rancher; before he leaves, he visits the McTeagues, and he and Mac part apparently as friends.",
      "question_template": "Anderton and Agatha find [[CANDIDATE_ANSWER]] at Crow's apartment.",
      "candidate_answers": [
        "He breaks Marcus' arm in a fight."
      ],
      "predicates": [
        "Parsimonious(x) ::: x is a parsimonious person.",
        "RefusesToTouchPrincipal(x, y) ::: x refuses to touch the principal of y.",
        "Invests(x, y) ::: x invests with y.",
        "LivesOnEarnings(x) ::: x lives on the earnings from McTeague's dental practice.",
        "AccumulatesSavings(x) ::: x accumulates savings.",
        "DeterioratesFriendship(x, y) ::: The friendship between x and y deteriorates.",
        "PrevailsInFight(x, y) ::: x prevails in a fight against y.",
        "BreaksArm(x, y) ::: x breaks y's arm.",
        "PartAsFriends(x, y) ::: x and y part as friends."
      ],
      "premises": [
        "RefusesToTouchPrincipal(a_3, $15,000) ∧ Parsimonious(a_3) ∧ LivesOnEarnings(a_1) ::: Trina's refusal to touch the principal of her $15,000 leads to a parsimonious lifestyle for her and McTeague.",
        "PrevailsInFight(a_1, a_2) ∧ BreaksArm(a_1, a_2) ::: McTeague's immense physical strength leads to the deterioration of the friendship with Marcus.",
        "DeterioratesFriendship(a_2, a_1) ::: The friendship between Marcus and McTeague deteriorates.",
        "AccumulatesSavings(a_3) ::: Trina secretly accumulates penny-pinched savings in a locked trunk.",
        "PartAsFriends(a_2, a_1) ::: Marcus and McTeague part apparently as friends before Marcus leaves."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "642": [
    {
      "id": 642,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 1,
      "paragraph": "The marriage takes place, and Mrs Sieppe, along with the rest of Trina's family, move away from San Francisco, leaving her alone with McTeague. Trina proves to be a parsimonious wife; she refuses to touch the principal of her $15,000, which she invests with her uncle. She insists that she and McTeague must live on the earnings from McTeague's dental practice, the small income from the $15,000 investment, and the bit of money she earns from carving small wooden figures of Noah's animals and his Ark for sale in her uncle's shop. Secretly, she accumulates penny-pinched savings in a locked trunk. Though the couple are happy, the friendship between Marcus and Mac deteriorates. More than once the two men come to grips; each time McTeague's immense physical strength prevails, and eventually he breaks Marcus' arm in a fight. When Marcus recovers, he goes south, intending to become a rancher; before he leaves, he visits the McTeagues, and he and Mac part apparently as friends.",
      "question_template": "[[CANDIDATE_ANSWER]] murders Witwer using Anderton's gun.",
      "candidate_answers": [
        "$15,000"
      ],
      "predicates": [
        "Parsimonious(x) ::: x is a parsimonious person.",
        "RefusesToTouchPrincipal(x, y) ::: x refuses to touch the principal of y.",
        "Invests(x, y) ::: x invests with y.",
        "LivesOnEarnings(x) ::: x lives on the earnings from McTeague's dental practice.",
        "AccumulatesSavings(x) ::: x accumulates savings.",
        "DeterioratesFriendship(x, y) ::: The friendship between x and y deteriorates.",
        "PrevailsInFight(x, y) ::: x prevails in a fight against y.",
        "BreaksArm(x, y) ::: x breaks y's arm.",
        "PartAsFriends(x, y) ::: x and y part as friends."
      ],
      "premises": [
        "RefusesToTouchPrincipal(a_3, $15,000) ∧ Parsimonious(a_3) ∧ LivesOnEarnings(a_1) ::: Trina's refusal to touch the principal of her $15,000 leads to a parsimonious lifestyle for her and McTeague.",
        "PrevailsInFight(a_1, a_2) ∧ BreaksArm(a_1, a_2) ::: McTeague's immense physical strength leads to the deterioration of the friendship with Marcus.",
        "DeterioratesFriendship(a_2, a_1) ::: The friendship between Marcus and McTeague deteriorates.",
        "AccumulatesSavings(a_3) ::: Trina secretly accumulates penny-pinched savings in a locked trunk.",
        "PartAsFriends(a_2, a_1) ::: Marcus and McTeague part apparently as friends before Marcus leaves."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 642,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 2,
      "paragraph": "Catastrophe strikes when McTeague is debarred from practising dentistry by the authorities; it becomes clear that before leaving, Marcus has taken revenge on Mac by informing city hall that he has no license or degree. McTeague loses his practice and the couple are forced to move into successively poorer quarters as Trina becomes more and more miserly. Their life together deteriorates until McTeague takes all Trina's domestic savings (amounting to $400 or roughly $10,000 in 2010 values) and abandons her. Meanwhile, Trina falls completely under the spell of money and withdraws the principal of her prior winnings in gold from her uncle's firm so she can admire and handle the coins in her room, at one point spreading them over her bed and rolling around in them.",
      "question_template": "[[CANDIDATE_ANSWER]] murders Witwer using Anderton's gun.",
      "candidate_answers": [
        "$400 or roughly $10,000 in 2010 values",
        "The principal of her prior winnings in gold"
      ],
      "predicates": [
        "Debarred(a_1) ::: McTeague is debarred from practicing dentistry.",
        "Informed(a_2, cityHall) ::: Marcus informed city hall about McTeague's lack of license or degree.",
        "LosesPractice(a_1) ::: McTeague loses his dental practice.",
        "MovesIntoPoorQuarters(a_1, a_3) ::: McTeague and Trina move into successively poorer quarters.",
        "Miserly(a_3) ::: Trina becomes more miserly.",
        "Deteriorates(a_1, a_3) ::: The life of McTeague and Trina deteriorates.",
        "TakesSavings(a_1, a_3) ::: McTeague takes Trina's domestic savings.",
        "Abandons(a_1, a_3) ::: McTeague abandons Trina.",
        "FallsUnderSpell(a_3, c) ::: Trina falls completely under the spell of money.",
        "WithdrawsWinnings(a_3) ::: Trina withdraws the principal of her prior winnings in gold.",
        "HandlesCoins(a_3) ::: Trina admires and handles the coins in her room.",
        "SpreadsCoins(a_3) ::: Trina spreads the coins over her bed."
      ],
      "premises": [
        "Debarred(a_1) ∧ Informed(a_2, cityHall) ∧ LosesPractice(a_1) ∧ MovesIntoPoorQuarters(a_1, a_3) ∧ Miserly(a_3) ∧ Deteriorates(a_1, a_3) ::: McTeague is debarred from practicing dentistry, Marcus informs city hall about McTeague's lack of license or degree, McTeague loses his practice, and they move into poorer quarters as Trina becomes more miserly, leading to the deterioration of their life together.",
        "TakesSavings(a_1, a_3) ∧ Abandons(a_1, a_3) ::: McTeague takes Trina's domestic savings and abandons her.",
        "FallsUnderSpell(a_3, c) ∧ WithdrawsWinnings(a_3) ∧ HandlesCoins(a_3) ∧ SpreadsCoins(a_3) ::: Trina falls under the spell of money, withdraws her winnings in gold, admires and handles the coins, and spreads them over her bed."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 642,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 3,
      "paragraph": "When McTeague returns, destitute once more, she refuses to give him money even for food. Aggravated and made violent by whisky, McTeague beats her to death. He takes the entire hoard of gold and heads out to a mining community that he had left years before. Sensing pursuit, he makes his way south towards Mexico; meanwhile, Marcus hears of the murder and joins the hunt for McTeague, finally catching him in Death Valley. In the middle of the desert Marcus and McTeague fight over McTeague's remaining water and, when that is lost and they are already doomed, over Trina's $15,000. McTeague kills Marcus, but as he dies, Marcus handcuffs himself to McTeague. The final, dramatic image of the novel is one of McTeague stranded, alone and helpless. He is left with only the company of Marcus's corpse, to whom he is handcuffed, in the desolate, arid waste of Death Valley.",
      "question_template": "[[CANDIDATE_ANSWER]] murders Witwer using Anderton's gun.",
      "candidate_answers": [
        "$15,000"
      ],
      "predicates": [
        "Destitute(a_1) ::: McTeague is destitute.",
        "Refuses(a_3, a_1, e) ::: Trina refuses to give McTeague money for food.",
        "Aggravated(a_1) ::: McTeague is aggravated by whisky.",
        "Violent(a_1) ::: McTeague becomes violent due to whisky.",
        "Beats(a_1, a_3) ::: McTeague beats Trina.",
        "Dead(a_3) ::: Trina is dead.",
        "Takes(a_1, c) ::: McTeague takes the entire hoard of gold.",
        "HeadsOut(a_1, b_2) ::: McTeague heads out to a mining community.",
        "SensesPursuit(a_1) ::: McTeague senses pursuit.",
        "MakesWay(a_1, b_3) ::: McTeague makes his way towards Mexico.",
        "Hears(a_2, a_3) ::: Marcus hears of Trina's murder.",
        "JoinsHunt(a_2, a_1) ::: Marcus joins the hunt for McTeague.",
        "Catches(a_2, a_1) ::: Marcus catches McTeague in Death Valley.",
        "Fights(a_1, a_2) ::: McTeague fights Marcus.",
        "OverWater(a_1, a_2) ::: They fight over McTeague's remaining water.",
        "OverGold(a_1, a_2) ::: They fight over Trina's $15,000.",
        "Kills(a_1, a_2) ::: McTeague kills Marcus.",
        "Handcuffs(a_2, a_1) ::: Marcus handcuffs himself to McTeague.",
        "Stranded(a_1) ::: McTeague is stranded.",
        "Alone(a_1) ::: McTeague is alone.",
        "Helpless(a_1) ::: McTeague is helpless.",
        "WithCorpse(a_1, a_2) ::: McTeague is left with Marcus's corpse.",
        "InDesolateWaste(a_1, b_1) ::: McTeague is in the desolate, arid waste of Death Valley."
      ],
      "premises": [
        "Destitute(a_1) ∧ Refuses(a_3, a_1, e) ∧ Aggravated(a_1) ∧ Violent(a_1) ∧ Beats(a_1, a_3) ∧ Dead(a_3) ::: McTeague is destitute, Trina refuses to give him money for food, McTeague is aggravated and violent due to whisky, and he beats Trina to death.",
        "Takes(a_1, c) ∧ HeadsOut(a_1, b_2) ::: McTeague takes the entire hoard of gold and heads out to a mining community.",
        "SensesPursuit(a_1) ∧ MakesWay(a_1, b_3) ::: McTeague senses pursuit and makes his way towards Mexico.",
        "Hears(a_2, a_3) ∧ JoinsHunt(a_2, a_1) ∧ Catches(a_2, a_1) ::: Marcus hears of the murder, joins the hunt for McTeague, and catches him in Death Valley.",
        "Fights(a_1, a_2) ∧ OverWater(a_1, a_2) ∧ OverGold(a_1, a_2) ::: McTeague and Marcus fight over McTeague's remaining water and Trina's $15,000.",
        "Kills(a_1, a_2) ∧ Handcuffs(a_2, a_1) ::: McTeague kills Marcus, but Marcus handcuffs himself to McTeague.",
        "Stranded(a_1) ∧ Alone(a_1) ∧ Helpless(a_1) ∧ WithCorpse(a_1, a_2) ∧ InDesolateWaste(a_1, b_1) ::: McTeague is stranded, alone, and helpless with Marcus's corpse in the desolate, arid waste of Death Valley.",
        "Conclusion:",
        "McTeague's actions lead to his isolation and helplessness in Death Valley."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "643": [
    {
      "id": 643,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 1,
      "paragraph": "The marriage takes place, and Mrs Sieppe, along with the rest of Trina's family, move away from San Francisco, leaving her alone with McTeague. Trina proves to be a parsimonious wife; she refuses to touch the principal of her $15,000, which she invests with her uncle. She insists that she and McTeague must live on the earnings from McTeague's dental practice, the small income from the $15,000 investment, and the bit of money she earns from carving small wooden figures of Noah's animals and his Ark for sale in her uncle's shop. Secretly, she accumulates penny-pinched savings in a locked trunk. Though the couple are happy, the friendship between Marcus and Mac deteriorates. More than once the two men come to grips; each time McTeague's immense physical strength prevails, and eventually he breaks Marcus' arm in a fight. When Marcus recovers, he goes south, intending to become a rancher; before he leaves, he visits the McTeagues, and he and Mac part apparently as friends.",
      "question_template": "The warden tells Anderton [[CANDIDATE_ANSWER]] as he puts him in prison.",
      "candidate_answers": [
        "Marcus goes south, intending to become a rancher",
        "He visits the McTeagues, and he and Mac part apparently as friends"
      ],
      "predicates": [
        "Parsimonious(x) ::: x is a parsimonious person.",
        "RefusesToTouchPrincipal(x, y) ::: x refuses to touch the principal of y.",
        "Invests(x, y) ::: x invests with y.",
        "LivesOnEarnings(x) ::: x lives on the earnings from McTeague's dental practice.",
        "AccumulatesSavings(x) ::: x accumulates savings.",
        "DeterioratesFriendship(x, y) ::: The friendship between x and y deteriorates.",
        "PrevailsInFight(x, y) ::: x prevails in a fight against y.",
        "BreaksArm(x, y) ::: x breaks y's arm.",
        "PartAsFriends(x, y) ::: x and y part as friends."
      ],
      "premises": [
        "RefusesToTouchPrincipal(a_3, $15,000) ∧ Parsimonious(a_3) ∧ LivesOnEarnings(a_1) ::: Trina's refusal to touch the principal of her $15,000 leads to a parsimonious lifestyle for her and McTeague.",
        "PrevailsInFight(a_1, a_2) ∧ BreaksArm(a_1, a_2) ::: McTeague's immense physical strength leads to the deterioration of the friendship with Marcus.",
        "DeterioratesFriendship(a_2, a_1) ::: The friendship between Marcus and McTeague deteriorates.",
        "AccumulatesSavings(a_3) ::: Trina secretly accumulates penny-pinched savings in a locked trunk.",
        "PartAsFriends(a_2, a_1) ::: Marcus and McTeague part apparently as friends before Marcus leaves."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 643,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 3,
      "paragraph": "When McTeague returns, destitute once more, she refuses to give him money even for food. Aggravated and made violent by whisky, McTeague beats her to death. He takes the entire hoard of gold and heads out to a mining community that he had left years before. Sensing pursuit, he makes his way south towards Mexico; meanwhile, Marcus hears of the murder and joins the hunt for McTeague, finally catching him in Death Valley. In the middle of the desert Marcus and McTeague fight over McTeague's remaining water and, when that is lost and they are already doomed, over Trina's $15,000. McTeague kills Marcus, but as he dies, Marcus handcuffs himself to McTeague. The final, dramatic image of the novel is one of McTeague stranded, alone and helpless. He is left with only the company of Marcus's corpse, to whom he is handcuffed, in the desolate, arid waste of Death Valley.",
      "question_template": "The warden tells Anderton [[CANDIDATE_ANSWER]] as he puts him in prison.",
      "candidate_answers": [
        "Marcus hears of the murder and joins the hunt for McTeague",
        "Marcus and McTeague fight over McTeague's remaining water",
        "Marcus handcuffs himself to McTeague"
      ],
      "predicates": [
        "Destitute(a_1) ::: McTeague is destitute.",
        "Refuses(a_3, a_1, e) ::: Trina refuses to give McTeague money for food.",
        "Aggravated(a_1) ::: McTeague is aggravated by whisky.",
        "Violent(a_1) ::: McTeague becomes violent due to whisky.",
        "Beats(a_1, a_3) ::: McTeague beats Trina.",
        "Dead(a_3) ::: Trina is dead.",
        "Takes(a_1, c) ::: McTeague takes the entire hoard of gold.",
        "HeadsOut(a_1, b_2) ::: McTeague heads out to a mining community.",
        "SensesPursuit(a_1) ::: McTeague senses pursuit.",
        "MakesWay(a_1, b_3) ::: McTeague makes his way towards Mexico.",
        "Hears(a_2, a_3) ::: Marcus hears of Trina's murder.",
        "JoinsHunt(a_2, a_1) ::: Marcus joins the hunt for McTeague.",
        "Catches(a_2, a_1) ::: Marcus catches McTeague in Death Valley.",
        "Fights(a_1, a_2) ::: McTeague fights Marcus.",
        "OverWater(a_1, a_2) ::: They fight over McTeague's remaining water.",
        "OverGold(a_1, a_2) ::: They fight over Trina's $15,000.",
        "Kills(a_1, a_2) ::: McTeague kills Marcus.",
        "Handcuffs(a_2, a_1) ::: Marcus handcuffs himself to McTeague.",
        "Stranded(a_1) ::: McTeague is stranded.",
        "Alone(a_1) ::: McTeague is alone.",
        "Helpless(a_1) ::: McTeague is helpless.",
        "WithCorpse(a_1, a_2) ::: McTeague is left with Marcus's corpse.",
        "InDesolateWaste(a_1, b_1) ::: McTeague is in the desolate, arid waste of Death Valley."
      ],
      "premises": [
        "Destitute(a_1) ∧ Refuses(a_3, a_1, e) ∧ Aggravated(a_1) ∧ Violent(a_1) ∧ Beats(a_1, a_3) ∧ Dead(a_3) ::: McTeague is destitute, Trina refuses to give him money for food, McTeague is aggravated and violent due to whisky, and he beats Trina to death.",
        "Takes(a_1, c) ∧ HeadsOut(a_1, b_2) ::: McTeague takes the entire hoard of gold and heads out to a mining community.",
        "SensesPursuit(a_1) ∧ MakesWay(a_1, b_3) ::: McTeague senses pursuit and makes his way towards Mexico.",
        "Hears(a_2, a_3) ∧ JoinsHunt(a_2, a_1) ∧ Catches(a_2, a_1) ::: Marcus hears of the murder, joins the hunt for McTeague, and catches him in Death Valley.",
        "Fights(a_1, a_2) ∧ OverWater(a_1, a_2) ∧ OverGold(a_1, a_2) ::: McTeague and Marcus fight over McTeague's remaining water and Trina's $15,000.",
        "Kills(a_1, a_2) ∧ Handcuffs(a_2, a_1) ::: McTeague kills Marcus, but Marcus handcuffs himself to McTeague.",
        "Stranded(a_1) ∧ Alone(a_1) ∧ Helpless(a_1) ∧ WithCorpse(a_1, a_2) ∧ InDesolateWaste(a_1, b_1) ::: McTeague is stranded, alone, and helpless with Marcus's corpse in the desolate, arid waste of Death Valley.",
        "Conclusion:",
        "McTeague's actions lead to his isolation and helplessness in Death Valley."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "644": [
    {
      "id": 644,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 1,
      "paragraph": "The marriage takes place, and Mrs Sieppe, along with the rest of Trina's family, move away from San Francisco, leaving her alone with McTeague. Trina proves to be a parsimonious wife; she refuses to touch the principal of her $15,000, which she invests with her uncle. She insists that she and McTeague must live on the earnings from McTeague's dental practice, the small income from the $15,000 investment, and the bit of money she earns from carving small wooden figures of Noah's animals and his Ark for sale in her uncle's shop. Secretly, she accumulates penny-pinched savings in a locked trunk. Though the couple are happy, the friendship between Marcus and Mac deteriorates. More than once the two men come to grips; each time McTeague's immense physical strength prevails, and eventually he breaks Marcus' arm in a fight. When Marcus recovers, he goes south, intending to become a rancher; before he leaves, he visits the McTeagues, and he and Mac part apparently as friends.",
      "question_template": "[[CANDIDATE_ANSWER]] killed Agatha's mother and set up Anderton.",
      "candidate_answers": [
        "Marcus and Mac part apparently as friends."
      ],
      "predicates": [
        "Parsimonious(x) ::: x is a parsimonious person.",
        "RefusesToTouchPrincipal(x, y) ::: x refuses to touch the principal of y.",
        "Invests(x, y) ::: x invests with y.",
        "LivesOnEarnings(x) ::: x lives on the earnings from McTeague's dental practice.",
        "AccumulatesSavings(x) ::: x accumulates savings.",
        "DeterioratesFriendship(x, y) ::: The friendship between x and y deteriorates.",
        "PrevailsInFight(x, y) ::: x prevails in a fight against y.",
        "BreaksArm(x, y) ::: x breaks y's arm.",
        "PartAsFriends(x, y) ::: x and y part as friends."
      ],
      "premises": [
        "RefusesToTouchPrincipal(a_3, $15,000) ∧ Parsimonious(a_3) ∧ LivesOnEarnings(a_1) ::: Trina's refusal to touch the principal of her $15,000 leads to a parsimonious lifestyle for her and McTeague.",
        "PrevailsInFight(a_1, a_2) ∧ BreaksArm(a_1, a_2) ::: McTeague's immense physical strength leads to the deterioration of the friendship with Marcus.",
        "DeterioratesFriendship(a_2, a_1) ::: The friendship between Marcus and McTeague deteriorates.",
        "AccumulatesSavings(a_3) ::: Trina secretly accumulates penny-pinched savings in a locked trunk.",
        "PartAsFriends(a_2, a_1) ::: Marcus and McTeague part apparently as friends before Marcus leaves."
      ],
      "conclusions": [
        "PartAsFriends(a_2, a_1)"
      ]
    }
  ],
  "645": [
    {
      "id": 645,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 2,
      "paragraph": "Catastrophe strikes when McTeague is debarred from practising dentistry by the authorities; it becomes clear that before leaving, Marcus has taken revenge on Mac by informing city hall that he has no license or degree. McTeague loses his practice and the couple are forced to move into successively poorer quarters as Trina becomes more and more miserly. Their life together deteriorates until McTeague takes all Trina's domestic savings (amounting to $400 or roughly $10,000 in 2010 values) and abandons her. Meanwhile, Trina falls completely under the spell of money and withdraws the principal of her prior winnings in gold from her uncle's firm so she can admire and handle the coins in her room, at one point spreading them over her bed and rolling around in them.",
      "question_template": "[[CANDIDATE_ANSWER]] is expecting a baby with Anderton.",
      "candidate_answers": [
        "Her room",
        "In her room",
        "Coins spread over her bed"
      ],
      "predicates": [
        "Debarred(a_1) ::: McTeague is debarred from practicing dentistry.",
        "Informed(a_2, cityHall) ::: Marcus informed city hall about McTeague's lack of license or degree.",
        "LosesPractice(a_1) ::: McTeague loses his dental practice.",
        "MovesIntoPoorQuarters(a_1, a_3) ::: McTeague and Trina move into successively poorer quarters.",
        "Miserly(a_3) ::: Trina becomes more miserly.",
        "Deteriorates(a_1, a_3) ::: The life of McTeague and Trina deteriorates.",
        "TakesSavings(a_1, a_3) ::: McTeague takes Trina's domestic savings.",
        "Abandons(a_1, a_3) ::: McTeague abandons Trina.",
        "FallsUnderSpell(a_3, c) ::: Trina falls completely under the spell of money.",
        "WithdrawsWinnings(a_3) ::: Trina withdraws the principal of her prior winnings in gold.",
        "HandlesCoins(a_3) ::: Trina admires and handles the coins in her room.",
        "SpreadsCoins(a_3) ::: Trina spreads the coins over her bed."
      ],
      "premises": [
        "Debarred(a_1) ∧ Informed(a_2, cityHall) ∧ LosesPractice(a_1) ∧ MovesIntoPoorQuarters(a_1, a_3) ∧ Miserly(a_3) ∧ Deteriorates(a_1, a_3) ::: McTeague is debarred from practicing dentistry, Marcus informs city hall about McTeague's lack of license or degree, McTeague loses his practice, and they move into poorer quarters as Trina becomes more miserly, leading to the deterioration of their life together.",
        "TakesSavings(a_1, a_3) ∧ Abandons(a_1, a_3) ::: McTeague takes Trina's domestic savings and abandons her.",
        "FallsUnderSpell(a_3, c) ∧ WithdrawsWinnings(a_3) ∧ HandlesCoins(a_3) ∧ SpreadsCoins(a_3) ::: Trina falls under the spell of money, withdraws her winnings in gold, admires and handles the coins, and spreads them over her bed."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "647": [
    {
      "id": 647,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 0,
      "paragraph": " McTeague is a dentist of limited intellect from a poor miner's family, who has opened a dentist shop on Polk Street in San Francisco. (His first name is never revealed; other characters in the novel call him simply \"Mac\".) His best friend, Marcus Schouler, brings his cousin, Trina Sieppe, whom he is courting, to McTeague's parlor for dental work. McTeague becomes infatuated with her while working on her teeth, and Marcus graciously steps aside. McTeague successfully woos Trina. Shortly after McTeague and Trina have kissed and declared their love for each other, Trina discovers that she has won $15,000 from a lottery ticket. In the ensuing celebration Trina's mother, Mrs Sieppe, announces that McTeague and Trina are to marry. Marcus becomes jealous of McTeague, and claims that he has been cheated out of money that would have been rightfully his if he had married Trina.",
      "question_template": "Anderton's fate after his separation from Lara is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Marcus Schouler",
        "Claims that he has been cheated out of money that would have been rightfully his if he had married Trina"
      ],
      "predicates": [
        "Dentist(x) ::: x is a dentist.",
        "LimitedIntellect(x) ::: x has limited intellect.",
        "FromPoorFamily(x) ::: x is from a poor miner's family.",
        "OpenedShop(x, y) ::: x opened a shop at location y.",
        "BestFriend(x, y) ::: x is the best friend of y.",
        "Courting(x, y) ::: x is courting y.",
        "InfatuatedWith(x, y) ::: x is infatuated with y.",
        "Woos(x, y) ::: x woos y.",
        "Kissed(x, y) ::: x kissed y.",
        "DeclaredLove(x, y) ::: x declared love for y.",
        "WonLottery(x, y) ::: x won y from a lottery ticket.",
        "Announces(x, y) ::: x announces y.",
        "JealousOf(x, y) ::: x is jealous of y.",
        "ClaimsCheated(x, y) ::: x claims to have been cheated out of y."
      ],
      "premises": [
        "Dentist(a_1) ∧ LimitedIntellect(a_1) ∧ FromPoorFamily(a_1) ∧ OpenedShop(a_1, b_0) ::: McTeague is a dentist of limited intellect from a poor miner's family, who has opened a dentist shop on Polk Street in San Francisco.",
        "BestFriend(a_2, a_1) ∧ Courting(a_2, a_3) ::: Marcus Schouler is McTeague's best friend and is courting Trina Sieppe.",
        "InfatuatedWith(a_1, a_3) ::: McTeague becomes infatuated with Trina while working on her teeth.",
        "Woos(a_1, a_3) ::: McTeague successfully woos Trina.",
        "Kissed(a_1, a_3) ∧ DeclaredLove(a_1, a_3) ::: McTeague and Trina kissed and declared their love for each other.",
        "WonLottery(a_3, $15,000) ::: Trina discovers that she has won $15,000 from a lottery ticket.",
        "Announces(a_3, \"McTeague and Trina are to marry\") ::: Trina's mother announces that McTeague and Trina are to marry.",
        "JealousOf(a_2, a_1) ∧ ClaimsCheated(a_2, $15,000) ::: Marcus becomes jealous of McTeague and claims that he has been cheated out of money that would have been rightfully his if he had married Trina."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 647,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 1,
      "paragraph": "The marriage takes place, and Mrs Sieppe, along with the rest of Trina's family, move away from San Francisco, leaving her alone with McTeague. Trina proves to be a parsimonious wife; she refuses to touch the principal of her $15,000, which she invests with her uncle. She insists that she and McTeague must live on the earnings from McTeague's dental practice, the small income from the $15,000 investment, and the bit of money she earns from carving small wooden figures of Noah's animals and his Ark for sale in her uncle's shop. Secretly, she accumulates penny-pinched savings in a locked trunk. Though the couple are happy, the friendship between Marcus and Mac deteriorates. More than once the two men come to grips; each time McTeague's immense physical strength prevails, and eventually he breaks Marcus' arm in a fight. When Marcus recovers, he goes south, intending to become a rancher; before he leaves, he visits the McTeagues, and he and Mac part apparently as friends.",
      "question_template": "Anderton's fate after his separation from Lara is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Become a rancher"
      ],
      "predicates": [
        "Parsimonious(x) ::: x is a parsimonious person.",
        "RefusesToTouchPrincipal(x, y) ::: x refuses to touch the principal of y.",
        "Invests(x, y) ::: x invests with y.",
        "LivesOnEarnings(x) ::: x lives on the earnings from McTeague's dental practice.",
        "AccumulatesSavings(x) ::: x accumulates savings.",
        "DeterioratesFriendship(x, y) ::: The friendship between x and y deteriorates.",
        "PrevailsInFight(x, y) ::: x prevails in a fight against y.",
        "BreaksArm(x, y) ::: x breaks y's arm.",
        "PartAsFriends(x, y) ::: x and y part as friends."
      ],
      "premises": [
        "RefusesToTouchPrincipal(a_3, $15,000) ∧ Parsimonious(a_3) ∧ LivesOnEarnings(a_1) ::: Trina's refusal to touch the principal of her $15,000 leads to a parsimonious lifestyle for her and McTeague.",
        "PrevailsInFight(a_1, a_2) ∧ BreaksArm(a_1, a_2) ::: McTeague's immense physical strength leads to the deterioration of the friendship with Marcus.",
        "DeterioratesFriendship(a_2, a_1) ::: The friendship between Marcus and McTeague deteriorates.",
        "AccumulatesSavings(a_3) ::: Trina secretly accumulates penny-pinched savings in a locked trunk.",
        "PartAsFriends(a_2, a_1) ::: Marcus and McTeague part apparently as friends before Marcus leaves."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 647,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 2,
      "paragraph": "Catastrophe strikes when McTeague is debarred from practising dentistry by the authorities; it becomes clear that before leaving, Marcus has taken revenge on Mac by informing city hall that he has no license or degree. McTeague loses his practice and the couple are forced to move into successively poorer quarters as Trina becomes more and more miserly. Their life together deteriorates until McTeague takes all Trina's domestic savings (amounting to $400 or roughly $10,000 in 2010 values) and abandons her. Meanwhile, Trina falls completely under the spell of money and withdraws the principal of her prior winnings in gold from her uncle's firm so she can admire and handle the coins in her room, at one point spreading them over her bed and rolling around in them.",
      "question_template": "Anderton's fate after his separation from Lara is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Marcus has taken revenge on Mac by informing city hall that he has no license or degree."
      ],
      "predicates": [
        "Debarred(a_1) ::: McTeague is debarred from practicing dentistry.",
        "Informed(a_2, cityHall) ::: Marcus informed city hall about McTeague's lack of license or degree.",
        "LosesPractice(a_1) ::: McTeague loses his dental practice.",
        "MovesIntoPoorQuarters(a_1, a_3) ::: McTeague and Trina move into successively poorer quarters.",
        "Miserly(a_3) ::: Trina becomes more miserly.",
        "Deteriorates(a_1, a_3) ::: The life of McTeague and Trina deteriorates.",
        "TakesSavings(a_1, a_3) ::: McTeague takes Trina's domestic savings.",
        "Abandons(a_1, a_3) ::: McTeague abandons Trina.",
        "FallsUnderSpell(a_3, c) ::: Trina falls completely under the spell of money.",
        "WithdrawsWinnings(a_3) ::: Trina withdraws the principal of her prior winnings in gold.",
        "HandlesCoins(a_3) ::: Trina admires and handles the coins in her room.",
        "SpreadsCoins(a_3) ::: Trina spreads the coins over her bed."
      ],
      "premises": [
        "Debarred(a_1) ∧ Informed(a_2, cityHall) ∧ LosesPractice(a_1) ∧ MovesIntoPoorQuarters(a_1, a_3) ∧ Miserly(a_3) ∧ Deteriorates(a_1, a_3) ::: McTeague is debarred from practicing dentistry, Marcus informs city hall about McTeague's lack of license or degree, McTeague loses his practice, and they move into poorer quarters as Trina becomes more miserly, leading to the deterioration of their life together.",
        "TakesSavings(a_1, a_3) ∧ Abandons(a_1, a_3) ::: McTeague takes Trina's domestic savings and abandons her.",
        "FallsUnderSpell(a_3, c) ∧ WithdrawsWinnings(a_3) ∧ HandlesCoins(a_3) ∧ SpreadsCoins(a_3) ::: Trina falls under the spell of money, withdraws her winnings in gold, admires and handles the coins, and spreads them over her bed."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 647,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 3,
      "paragraph": "When McTeague returns, destitute once more, she refuses to give him money even for food. Aggravated and made violent by whisky, McTeague beats her to death. He takes the entire hoard of gold and heads out to a mining community that he had left years before. Sensing pursuit, he makes his way south towards Mexico; meanwhile, Marcus hears of the murder and joins the hunt for McTeague, finally catching him in Death Valley. In the middle of the desert Marcus and McTeague fight over McTeague's remaining water and, when that is lost and they are already doomed, over Trina's $15,000. McTeague kills Marcus, but as he dies, Marcus handcuffs himself to McTeague. The final, dramatic image of the novel is one of McTeague stranded, alone and helpless. He is left with only the company of Marcus's corpse, to whom he is handcuffed, in the desolate, arid waste of Death Valley.",
      "question_template": "Anderton's fate after his separation from Lara is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Marcus hears of the murder and joins the hunt for McTeague",
        "Marcus and McTeague fight over McTeague's remaining water",
        "Marcus handcuffs himself to McTeague"
      ],
      "predicates": [
        "Destitute(a_1) ::: McTeague is destitute.",
        "Refuses(a_3, a_1, e) ::: Trina refuses to give McTeague money for food.",
        "Aggravated(a_1) ::: McTeague is aggravated by whisky.",
        "Violent(a_1) ::: McTeague becomes violent due to whisky.",
        "Beats(a_1, a_3) ::: McTeague beats Trina.",
        "Dead(a_3) ::: Trina is dead.",
        "Takes(a_1, c) ::: McTeague takes the entire hoard of gold.",
        "HeadsOut(a_1, b_2) ::: McTeague heads out to a mining community.",
        "SensesPursuit(a_1) ::: McTeague senses pursuit.",
        "MakesWay(a_1, b_3) ::: McTeague makes his way towards Mexico.",
        "Hears(a_2, a_3) ::: Marcus hears of Trina's murder.",
        "JoinsHunt(a_2, a_1) ::: Marcus joins the hunt for McTeague.",
        "Catches(a_2, a_1) ::: Marcus catches McTeague in Death Valley.",
        "Fights(a_1, a_2) ::: McTeague fights Marcus.",
        "OverWater(a_1, a_2) ::: They fight over McTeague's remaining water.",
        "OverGold(a_1, a_2) ::: They fight over Trina's $15,000.",
        "Kills(a_1, a_2) ::: McTeague kills Marcus.",
        "Handcuffs(a_2, a_1) ::: Marcus handcuffs himself to McTeague.",
        "Stranded(a_1) ::: McTeague is stranded.",
        "Alone(a_1) ::: McTeague is alone.",
        "Helpless(a_1) ::: McTeague is helpless.",
        "WithCorpse(a_1, a_2) ::: McTeague is left with Marcus's corpse.",
        "InDesolateWaste(a_1, b_1) ::: McTeague is in the desolate, arid waste of Death Valley."
      ],
      "premises": [
        "Destitute(a_1) ∧ Refuses(a_3, a_1, e) ∧ Aggravated(a_1) ∧ Violent(a_1) ∧ Beats(a_1, a_3) ∧ Dead(a_3) ::: McTeague is destitute, Trina refuses to give him money for food, McTeague is aggravated and violent due to whisky, and he beats Trina to death.",
        "Takes(a_1, c) ∧ HeadsOut(a_1, b_2) ::: McTeague takes the entire hoard of gold and heads out to a mining community.",
        "SensesPursuit(a_1) ∧ MakesWay(a_1, b_3) ::: McTeague senses pursuit and makes his way towards Mexico.",
        "Hears(a_2, a_3) ∧ JoinsHunt(a_2, a_1) ∧ Catches(a_2, a_1) ::: Marcus hears of the murder, joins the hunt for McTeague, and catches him in Death Valley.",
        "Fights(a_1, a_2) ∧ OverWater(a_1, a_2) ∧ OverGold(a_1, a_2) ::: McTeague and Marcus fight over McTeague's remaining water and Trina's $15,000.",
        "Kills(a_1, a_2) ∧ Handcuffs(a_2, a_1) ::: McTeague kills Marcus, but Marcus handcuffs himself to McTeague.",
        "Stranded(a_1) ∧ Alone(a_1) ∧ Helpless(a_1) ∧ WithCorpse(a_1, a_2) ∧ InDesolateWaste(a_1, b_1) ::: McTeague is stranded, alone, and helpless with Marcus's corpse in the desolate, arid waste of Death Valley.",
        "Conclusion:",
        "McTeague's actions lead to his isolation and helplessness in Death Valley."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "648": [
    {
      "id": 648,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 2,
      "paragraph": "Catastrophe strikes when McTeague is debarred from practising dentistry by the authorities; it becomes clear that before leaving, Marcus has taken revenge on Mac by informing city hall that he has no license or degree. McTeague loses his practice and the couple are forced to move into successively poorer quarters as Trina becomes more and more miserly. Their life together deteriorates until McTeague takes all Trina's domestic savings (amounting to $400 or roughly $10,000 in 2010 values) and abandons her. Meanwhile, Trina falls completely under the spell of money and withdraws the principal of her prior winnings in gold from her uncle's firm so she can admire and handle the coins in her room, at one point spreading them over her bed and rolling around in them.",
      "question_template": "Dr. Iris Hineman keeps the alternate future reports a secret because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Dentistry"
      ],
      "predicates": [
        "Debarred(a_1) ::: McTeague is debarred from practicing dentistry.",
        "Informed(a_2, cityHall) ::: Marcus informed city hall about McTeague's lack of license or degree.",
        "LosesPractice(a_1) ::: McTeague loses his dental practice.",
        "MovesIntoPoorQuarters(a_1, a_3) ::: McTeague and Trina move into successively poorer quarters.",
        "Miserly(a_3) ::: Trina becomes more miserly.",
        "Deteriorates(a_1, a_3) ::: The life of McTeague and Trina deteriorates.",
        "TakesSavings(a_1, a_3) ::: McTeague takes Trina's domestic savings.",
        "Abandons(a_1, a_3) ::: McTeague abandons Trina.",
        "FallsUnderSpell(a_3, c) ::: Trina falls completely under the spell of money.",
        "WithdrawsWinnings(a_3) ::: Trina withdraws the principal of her prior winnings in gold.",
        "HandlesCoins(a_3) ::: Trina admires and handles the coins in her room.",
        "SpreadsCoins(a_3) ::: Trina spreads the coins over her bed."
      ],
      "premises": [
        "Debarred(a_1) ∧ Informed(a_2, cityHall) ∧ LosesPractice(a_1) ∧ MovesIntoPoorQuarters(a_1, a_3) ∧ Miserly(a_3) ∧ Deteriorates(a_1, a_3) ::: McTeague is debarred from practicing dentistry, Marcus informs city hall about McTeague's lack of license or degree, McTeague loses his practice, and they move into poorer quarters as Trina becomes more miserly, leading to the deterioration of their life together.",
        "TakesSavings(a_1, a_3) ∧ Abandons(a_1, a_3) ::: McTeague takes Trina's domestic savings and abandons her.",
        "FallsUnderSpell(a_3, c) ∧ WithdrawsWinnings(a_3) ∧ HandlesCoins(a_3) ∧ SpreadsCoins(a_3) ::: Trina falls under the spell of money, withdraws her winnings in gold, admires and handles the coins, and spreads them over her bed."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "649": [
    {
      "id": 649,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 2,
      "paragraph": "Catastrophe strikes when McTeague is debarred from practising dentistry by the authorities; it becomes clear that before leaving, Marcus has taken revenge on Mac by informing city hall that he has no license or degree. McTeague loses his practice and the couple are forced to move into successively poorer quarters as Trina becomes more and more miserly. Their life together deteriorates until McTeague takes all Trina's domestic savings (amounting to $400 or roughly $10,000 in 2010 values) and abandons her. Meanwhile, Trina falls completely under the spell of money and withdraws the principal of her prior winnings in gold from her uncle's firm so she can admire and handle the coins in her room, at one point spreading them over her bed and rolling around in them.",
      "question_template": "Ann Lively was killed by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Marcus has taken revenge on Mac by informing city hall that he has no license or degree.",
        "Trina falls completely under the spell of money and withdraws the principal of her prior winnings in gold from her uncle's firm."
      ],
      "predicates": [
        "Debarred(a_1) ::: McTeague is debarred from practicing dentistry.",
        "Informed(a_2, cityHall) ::: Marcus informed city hall about McTeague's lack of license or degree.",
        "LosesPractice(a_1) ::: McTeague loses his dental practice.",
        "MovesIntoPoorQuarters(a_1, a_3) ::: McTeague and Trina move into successively poorer quarters.",
        "Miserly(a_3) ::: Trina becomes more miserly.",
        "Deteriorates(a_1, a_3) ::: The life of McTeague and Trina deteriorates.",
        "TakesSavings(a_1, a_3) ::: McTeague takes Trina's domestic savings.",
        "Abandons(a_1, a_3) ::: McTeague abandons Trina.",
        "FallsUnderSpell(a_3, c) ::: Trina falls completely under the spell of money.",
        "WithdrawsWinnings(a_3) ::: Trina withdraws the principal of her prior winnings in gold.",
        "HandlesCoins(a_3) ::: Trina admires and handles the coins in her room.",
        "SpreadsCoins(a_3) ::: Trina spreads the coins over her bed."
      ],
      "premises": [
        "Debarred(a_1) ∧ Informed(a_2, cityHall) ∧ LosesPractice(a_1) ∧ MovesIntoPoorQuarters(a_1, a_3) ∧ Miserly(a_3) ∧ Deteriorates(a_1, a_3) ::: McTeague is debarred from practicing dentistry, Marcus informs city hall about McTeague's lack of license or degree, McTeague loses his practice, and they move into poorer quarters as Trina becomes more miserly, leading to the deterioration of their life together.",
        "TakesSavings(a_1, a_3) ∧ Abandons(a_1, a_3) ::: McTeague takes Trina's domestic savings and abandons her.",
        "FallsUnderSpell(a_3, c) ∧ WithdrawsWinnings(a_3) ∧ HandlesCoins(a_3) ∧ SpreadsCoins(a_3) ::: Trina falls under the spell of money, withdraws her winnings in gold, admires and handles the coins, and spreads them over her bed."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "650": [
    {
      "id": 650,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 1,
      "paragraph": "The marriage takes place, and Mrs Sieppe, along with the rest of Trina's family, move away from San Francisco, leaving her alone with McTeague. Trina proves to be a parsimonious wife; she refuses to touch the principal of her $15,000, which she invests with her uncle. She insists that she and McTeague must live on the earnings from McTeague's dental practice, the small income from the $15,000 investment, and the bit of money she earns from carving small wooden figures of Noah's animals and his Ark for sale in her uncle's shop. Secretly, she accumulates penny-pinched savings in a locked trunk. Though the couple are happy, the friendship between Marcus and Mac deteriorates. More than once the two men come to grips; each time McTeague's immense physical strength prevails, and eventually he breaks Marcus' arm in a fight. When Marcus recovers, he goes south, intending to become a rancher; before he leaves, he visits the McTeagues, and he and Mac part apparently as friends.",
      "question_template": "Crow agreed to plant photos and be killed because of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- She invests with her uncle.",
        "- She insists that she and McTeague must live on the earnings from McTeague's dental practice, the small income from the $15,000 investment, and the bit of money she earns from carving small wooden figures of Noah's animals and his Ark for sale in her uncle's shop."
      ],
      "predicates": [
        "Parsimonious(x) ::: x is a parsimonious person.",
        "RefusesToTouchPrincipal(x, y) ::: x refuses to touch the principal of y.",
        "Invests(x, y) ::: x invests with y.",
        "LivesOnEarnings(x) ::: x lives on the earnings from McTeague's dental practice.",
        "AccumulatesSavings(x) ::: x accumulates savings.",
        "DeterioratesFriendship(x, y) ::: The friendship between x and y deteriorates.",
        "PrevailsInFight(x, y) ::: x prevails in a fight against y.",
        "BreaksArm(x, y) ::: x breaks y's arm.",
        "PartAsFriends(x, y) ::: x and y part as friends."
      ],
      "premises": [
        "RefusesToTouchPrincipal(a_3, $15,000) ∧ Parsimonious(a_3) ∧ LivesOnEarnings(a_1) ::: Trina's refusal to touch the principal of her $15,000 leads to a parsimonious lifestyle for her and McTeague.",
        "PrevailsInFight(a_1, a_2) ∧ BreaksArm(a_1, a_2) ::: McTeague's immense physical strength leads to the deterioration of the friendship with Marcus.",
        "DeterioratesFriendship(a_2, a_1) ::: The friendship between Marcus and McTeague deteriorates.",
        "AccumulatesSavings(a_3) ::: Trina secretly accumulates penny-pinched savings in a locked trunk.",
        "PartAsFriends(a_2, a_1) ::: Marcus and McTeague part apparently as friends before Marcus leaves."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 650,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 2,
      "paragraph": "Catastrophe strikes when McTeague is debarred from practising dentistry by the authorities; it becomes clear that before leaving, Marcus has taken revenge on Mac by informing city hall that he has no license or degree. McTeague loses his practice and the couple are forced to move into successively poorer quarters as Trina becomes more and more miserly. Their life together deteriorates until McTeague takes all Trina's domestic savings (amounting to $400 or roughly $10,000 in 2010 values) and abandons her. Meanwhile, Trina falls completely under the spell of money and withdraws the principal of her prior winnings in gold from her uncle's firm so she can admire and handle the coins in her room, at one point spreading them over her bed and rolling around in them.",
      "question_template": "Crow agreed to plant photos and be killed because of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- The principal of her prior winnings in gold from her uncle's firm",
        "- Admiring and handling the coins in her room",
        "- Spreading them over her bed and rolling around in them"
      ],
      "predicates": [
        "Debarred(a_1) ::: McTeague is debarred from practicing dentistry.",
        "Informed(a_2, cityHall) ::: Marcus informed city hall about McTeague's lack of license or degree.",
        "LosesPractice(a_1) ::: McTeague loses his dental practice.",
        "MovesIntoPoorQuarters(a_1, a_3) ::: McTeague and Trina move into successively poorer quarters.",
        "Miserly(a_3) ::: Trina becomes more miserly.",
        "Deteriorates(a_1, a_3) ::: The life of McTeague and Trina deteriorates.",
        "TakesSavings(a_1, a_3) ::: McTeague takes Trina's domestic savings.",
        "Abandons(a_1, a_3) ::: McTeague abandons Trina.",
        "FallsUnderSpell(a_3, c) ::: Trina falls completely under the spell of money.",
        "WithdrawsWinnings(a_3) ::: Trina withdraws the principal of her prior winnings in gold.",
        "HandlesCoins(a_3) ::: Trina admires and handles the coins in her room.",
        "SpreadsCoins(a_3) ::: Trina spreads the coins over her bed."
      ],
      "premises": [
        "Debarred(a_1) ∧ Informed(a_2, cityHall) ∧ LosesPractice(a_1) ∧ MovesIntoPoorQuarters(a_1, a_3) ∧ Miserly(a_3) ∧ Deteriorates(a_1, a_3) ::: McTeague is debarred from practicing dentistry, Marcus informs city hall about McTeague's lack of license or degree, McTeague loses his practice, and they move into poorer quarters as Trina becomes more miserly, leading to the deterioration of their life together.",
        "TakesSavings(a_1, a_3) ∧ Abandons(a_1, a_3) ::: McTeague takes Trina's domestic savings and abandons her.",
        "FallsUnderSpell(a_3, c) ∧ WithdrawsWinnings(a_3) ∧ HandlesCoins(a_3) ∧ SpreadsCoins(a_3) ::: Trina falls under the spell of money, withdraws her winnings in gold, admires and handles the coins, and spreads them over her bed."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "651": [
    {
      "id": 651,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 0,
      "paragraph": " McTeague is a dentist of limited intellect from a poor miner's family, who has opened a dentist shop on Polk Street in San Francisco. (His first name is never revealed; other characters in the novel call him simply \"Mac\".) His best friend, Marcus Schouler, brings his cousin, Trina Sieppe, whom he is courting, to McTeague's parlor for dental work. McTeague becomes infatuated with her while working on her teeth, and Marcus graciously steps aside. McTeague successfully woos Trina. Shortly after McTeague and Trina have kissed and declared their love for each other, Trina discovers that she has won $15,000 from a lottery ticket. In the ensuing celebration Trina's mother, Mrs Sieppe, announces that McTeague and Trina are to marry. Marcus becomes jealous of McTeague, and claims that he has been cheated out of money that would have been rightfully his if he had married Trina.",
      "question_template": "Agatha finds out that [[CANDIDATE_ANSWER]] was her mother.",
      "candidate_answers": [
        "- Trina discovers that she has won $15,000 from a lottery ticket.",
        "- In the ensuing celebration Trina's mother, Mrs Sieppe, announces that McTeague and Trina are to marry."
      ],
      "predicates": [
        "Dentist(x) ::: x is a dentist.",
        "LimitedIntellect(x) ::: x has limited intellect.",
        "FromPoorFamily(x) ::: x is from a poor miner's family.",
        "OpenedShop(x, y) ::: x opened a shop at location y.",
        "BestFriend(x, y) ::: x is the best friend of y.",
        "Courting(x, y) ::: x is courting y.",
        "InfatuatedWith(x, y) ::: x is infatuated with y.",
        "Woos(x, y) ::: x woos y.",
        "Kissed(x, y) ::: x kissed y.",
        "DeclaredLove(x, y) ::: x declared love for y.",
        "WonLottery(x, y) ::: x won y from a lottery ticket.",
        "Announces(x, y) ::: x announces y.",
        "JealousOf(x, y) ::: x is jealous of y.",
        "ClaimsCheated(x, y) ::: x claims to have been cheated out of y."
      ],
      "premises": [
        "Dentist(a_1) ∧ LimitedIntellect(a_1) ∧ FromPoorFamily(a_1) ∧ OpenedShop(a_1, b_0) ::: McTeague is a dentist of limited intellect from a poor miner's family, who has opened a dentist shop on Polk Street in San Francisco.",
        "BestFriend(a_2, a_1) ∧ Courting(a_2, a_3) ::: Marcus Schouler is McTeague's best friend and is courting Trina Sieppe.",
        "InfatuatedWith(a_1, a_3) ::: McTeague becomes infatuated with Trina while working on her teeth.",
        "Woos(a_1, a_3) ::: McTeague successfully woos Trina.",
        "Kissed(a_1, a_3) ∧ DeclaredLove(a_1, a_3) ::: McTeague and Trina kissed and declared their love for each other.",
        "WonLottery(a_3, $15,000) ::: Trina discovers that she has won $15,000 from a lottery ticket.",
        "Announces(a_3, \"McTeague and Trina are to marry\") ::: Trina's mother announces that McTeague and Trina are to marry.",
        "JealousOf(a_2, a_1) ∧ ClaimsCheated(a_2, $15,000) ::: Marcus becomes jealous of McTeague and claims that he has been cheated out of money that would have been rightfully his if he had married Trina."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 651,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 1,
      "paragraph": "The marriage takes place, and Mrs Sieppe, along with the rest of Trina's family, move away from San Francisco, leaving her alone with McTeague. Trina proves to be a parsimonious wife; she refuses to touch the principal of her $15,000, which she invests with her uncle. She insists that she and McTeague must live on the earnings from McTeague's dental practice, the small income from the $15,000 investment, and the bit of money she earns from carving small wooden figures of Noah's animals and his Ark for sale in her uncle's shop. Secretly, she accumulates penny-pinched savings in a locked trunk. Though the couple are happy, the friendship between Marcus and Mac deteriorates. More than once the two men come to grips; each time McTeague's immense physical strength prevails, and eventually he breaks Marcus' arm in a fight. When Marcus recovers, he goes south, intending to become a rancher; before he leaves, he visits the McTeagues, and he and Mac part apparently as friends.",
      "question_template": "Agatha finds out that [[CANDIDATE_ANSWER]] was her mother.",
      "candidate_answers": [
        "She refuses to touch the principal of her $15,000",
        "She insists that she and McTeague must live on the earnings from McTeague's dental practice, the small income from the $15,000 investment, and the bit of money she earns from carving small wooden figures of Noah's animals and his Ark for sale in her uncle's shop.",
        "Secretly, she accumulates penny-pinched savings in a locked trunk."
      ],
      "predicates": [
        "Parsimonious(x) ::: x is a parsimonious person.",
        "RefusesToTouchPrincipal(x, y) ::: x refuses to touch the principal of y.",
        "Invests(x, y) ::: x invests with y.",
        "LivesOnEarnings(x) ::: x lives on the earnings from McTeague's dental practice.",
        "AccumulatesSavings(x) ::: x accumulates savings.",
        "DeterioratesFriendship(x, y) ::: The friendship between x and y deteriorates.",
        "PrevailsInFight(x, y) ::: x prevails in a fight against y.",
        "BreaksArm(x, y) ::: x breaks y's arm.",
        "PartAsFriends(x, y) ::: x and y part as friends."
      ],
      "premises": [
        "RefusesToTouchPrincipal(a_3, $15,000) ∧ Parsimonious(a_3) ∧ LivesOnEarnings(a_1) ::: Trina's refusal to touch the principal of her $15,000 leads to a parsimonious lifestyle for her and McTeague.",
        "PrevailsInFight(a_1, a_2) ∧ BreaksArm(a_1, a_2) ::: McTeague's immense physical strength leads to the deterioration of the friendship with Marcus.",
        "DeterioratesFriendship(a_2, a_1) ::: The friendship between Marcus and McTeague deteriorates.",
        "AccumulatesSavings(a_3) ::: Trina secretly accumulates penny-pinched savings in a locked trunk.",
        "PartAsFriends(a_2, a_1) ::: Marcus and McTeague part apparently as friends before Marcus leaves."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 651,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 2,
      "paragraph": "Catastrophe strikes when McTeague is debarred from practising dentistry by the authorities; it becomes clear that before leaving, Marcus has taken revenge on Mac by informing city hall that he has no license or degree. McTeague loses his practice and the couple are forced to move into successively poorer quarters as Trina becomes more and more miserly. Their life together deteriorates until McTeague takes all Trina's domestic savings (amounting to $400 or roughly $10,000 in 2010 values) and abandons her. Meanwhile, Trina falls completely under the spell of money and withdraws the principal of her prior winnings in gold from her uncle's firm so she can admire and handle the coins in her room, at one point spreading them over her bed and rolling around in them.",
      "question_template": "Agatha finds out that [[CANDIDATE_ANSWER]] was her mother.",
      "candidate_answers": [
        "- Withdraw the principal of her prior winnings in gold from her uncle's firm",
        "- Admire and handle the coins in her room",
        "- Spread them over her bed and roll around in them"
      ],
      "predicates": [
        "Debarred(a_1) ::: McTeague is debarred from practicing dentistry.",
        "Informed(a_2, cityHall) ::: Marcus informed city hall about McTeague's lack of license or degree.",
        "LosesPractice(a_1) ::: McTeague loses his dental practice.",
        "MovesIntoPoorQuarters(a_1, a_3) ::: McTeague and Trina move into successively poorer quarters.",
        "Miserly(a_3) ::: Trina becomes more miserly.",
        "Deteriorates(a_1, a_3) ::: The life of McTeague and Trina deteriorates.",
        "TakesSavings(a_1, a_3) ::: McTeague takes Trina's domestic savings.",
        "Abandons(a_1, a_3) ::: McTeague abandons Trina.",
        "FallsUnderSpell(a_3, c) ::: Trina falls completely under the spell of money.",
        "WithdrawsWinnings(a_3) ::: Trina withdraws the principal of her prior winnings in gold.",
        "HandlesCoins(a_3) ::: Trina admires and handles the coins in her room.",
        "SpreadsCoins(a_3) ::: Trina spreads the coins over her bed."
      ],
      "premises": [
        "Debarred(a_1) ∧ Informed(a_2, cityHall) ∧ LosesPractice(a_1) ∧ MovesIntoPoorQuarters(a_1, a_3) ∧ Miserly(a_3) ∧ Deteriorates(a_1, a_3) ::: McTeague is debarred from practicing dentistry, Marcus informs city hall about McTeague's lack of license or degree, McTeague loses his practice, and they move into poorer quarters as Trina becomes more miserly, leading to the deterioration of their life together.",
        "TakesSavings(a_1, a_3) ∧ Abandons(a_1, a_3) ::: McTeague takes Trina's domestic savings and abandons her.",
        "FallsUnderSpell(a_3, c) ∧ WithdrawsWinnings(a_3) ∧ HandlesCoins(a_3) ∧ SpreadsCoins(a_3) ::: Trina falls under the spell of money, withdraws her winnings in gold, admires and handles the coins, and spreads them over her bed."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "652": [
    {
      "id": 652,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 1,
      "paragraph": "The marriage takes place, and Mrs Sieppe, along with the rest of Trina's family, move away from San Francisco, leaving her alone with McTeague. Trina proves to be a parsimonious wife; she refuses to touch the principal of her $15,000, which she invests with her uncle. She insists that she and McTeague must live on the earnings from McTeague's dental practice, the small income from the $15,000 investment, and the bit of money she earns from carving small wooden figures of Noah's animals and his Ark for sale in her uncle's shop. Secretly, she accumulates penny-pinched savings in a locked trunk. Though the couple are happy, the friendship between Marcus and Mac deteriorates. More than once the two men come to grips; each time McTeague's immense physical strength prevails, and eventually he breaks Marcus' arm in a fight. When Marcus recovers, he goes south, intending to become a rancher; before he leaves, he visits the McTeagues, and he and Mac part apparently as friends.",
      "question_template": "Burgess does [[CANDIDATE_ANSWER]] when Witwer reports the two attempts on Lively's life.",
      "candidate_answers": [
        "- McTeague's immense physical strength prevails",
        "- He breaks Marcus' arm in a fight"
      ],
      "predicates": [
        "Parsimonious(x) ::: x is a parsimonious person.",
        "RefusesToTouchPrincipal(x, y) ::: x refuses to touch the principal of y.",
        "Invests(x, y) ::: x invests with y.",
        "LivesOnEarnings(x) ::: x lives on the earnings from McTeague's dental practice.",
        "AccumulatesSavings(x) ::: x accumulates savings.",
        "DeterioratesFriendship(x, y) ::: The friendship between x and y deteriorates.",
        "PrevailsInFight(x, y) ::: x prevails in a fight against y.",
        "BreaksArm(x, y) ::: x breaks y's arm.",
        "PartAsFriends(x, y) ::: x and y part as friends."
      ],
      "premises": [
        "RefusesToTouchPrincipal(a_3, $15,000) ∧ Parsimonious(a_3) ∧ LivesOnEarnings(a_1) ::: Trina's refusal to touch the principal of her $15,000 leads to a parsimonious lifestyle for her and McTeague.",
        "PrevailsInFight(a_1, a_2) ∧ BreaksArm(a_1, a_2) ::: McTeague's immense physical strength leads to the deterioration of the friendship with Marcus.",
        "DeterioratesFriendship(a_2, a_1) ::: The friendship between Marcus and McTeague deteriorates.",
        "AccumulatesSavings(a_3) ::: Trina secretly accumulates penny-pinched savings in a locked trunk.",
        "PartAsFriends(a_2, a_1) ::: Marcus and McTeague part apparently as friends before Marcus leaves."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "653": [
    {
      "id": 653,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 0,
      "paragraph": " McTeague is a dentist of limited intellect from a poor miner's family, who has opened a dentist shop on Polk Street in San Francisco. (His first name is never revealed; other characters in the novel call him simply \"Mac\".) His best friend, Marcus Schouler, brings his cousin, Trina Sieppe, whom he is courting, to McTeague's parlor for dental work. McTeague becomes infatuated with her while working on her teeth, and Marcus graciously steps aside. McTeague successfully woos Trina. Shortly after McTeague and Trina have kissed and declared their love for each other, Trina discovers that she has won $15,000 from a lottery ticket. In the ensuing celebration Trina's mother, Mrs Sieppe, announces that McTeague and Trina are to marry. Marcus becomes jealous of McTeague, and claims that he has been cheated out of money that would have been rightfully his if he had married Trina.",
      "question_template": "[[CANDIDATE_ANSWER]] tells Anderton that \"all your dreams come true.\"",
      "candidate_answers": [
        "Marcus becomes jealous of McTeague",
        "Claims that he has been cheated out of money that would have been rightfully his if he had married Trina"
      ],
      "predicates": [
        "Dentist(x) ::: x is a dentist.",
        "LimitedIntellect(x) ::: x has limited intellect.",
        "FromPoorFamily(x) ::: x is from a poor miner's family.",
        "OpenedShop(x, y) ::: x opened a shop at location y.",
        "BestFriend(x, y) ::: x is the best friend of y.",
        "Courting(x, y) ::: x is courting y.",
        "InfatuatedWith(x, y) ::: x is infatuated with y.",
        "Woos(x, y) ::: x woos y.",
        "Kissed(x, y) ::: x kissed y.",
        "DeclaredLove(x, y) ::: x declared love for y.",
        "WonLottery(x, y) ::: x won y from a lottery ticket.",
        "Announces(x, y) ::: x announces y.",
        "JealousOf(x, y) ::: x is jealous of y.",
        "ClaimsCheated(x, y) ::: x claims to have been cheated out of y."
      ],
      "premises": [
        "Dentist(a_1) ∧ LimitedIntellect(a_1) ∧ FromPoorFamily(a_1) ∧ OpenedShop(a_1, b_0) ::: McTeague is a dentist of limited intellect from a poor miner's family, who has opened a dentist shop on Polk Street in San Francisco.",
        "BestFriend(a_2, a_1) ∧ Courting(a_2, a_3) ::: Marcus Schouler is McTeague's best friend and is courting Trina Sieppe.",
        "InfatuatedWith(a_1, a_3) ::: McTeague becomes infatuated with Trina while working on her teeth.",
        "Woos(a_1, a_3) ::: McTeague successfully woos Trina.",
        "Kissed(a_1, a_3) ∧ DeclaredLove(a_1, a_3) ::: McTeague and Trina kissed and declared their love for each other.",
        "WonLottery(a_3, $15,000) ::: Trina discovers that she has won $15,000 from a lottery ticket.",
        "Announces(a_3, \"McTeague and Trina are to marry\") ::: Trina's mother announces that McTeague and Trina are to marry.",
        "JealousOf(a_2, a_1) ∧ ClaimsCheated(a_2, $15,000) ::: Marcus becomes jealous of McTeague and claims that he has been cheated out of money that would have been rightfully his if he had married Trina."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 653,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 1,
      "paragraph": "The marriage takes place, and Mrs Sieppe, along with the rest of Trina's family, move away from San Francisco, leaving her alone with McTeague. Trina proves to be a parsimonious wife; she refuses to touch the principal of her $15,000, which she invests with her uncle. She insists that she and McTeague must live on the earnings from McTeague's dental practice, the small income from the $15,000 investment, and the bit of money she earns from carving small wooden figures of Noah's animals and his Ark for sale in her uncle's shop. Secretly, she accumulates penny-pinched savings in a locked trunk. Though the couple are happy, the friendship between Marcus and Mac deteriorates. More than once the two men come to grips; each time McTeague's immense physical strength prevails, and eventually he breaks Marcus' arm in a fight. When Marcus recovers, he goes south, intending to become a rancher; before he leaves, he visits the McTeagues, and he and Mac part apparently as friends.",
      "question_template": "[[CANDIDATE_ANSWER]] tells Anderton that \"all your dreams come true.\"",
      "candidate_answers": [
        "Marcus",
        "He and Mac part apparently as friends"
      ],
      "predicates": [
        "Parsimonious(x) ::: x is a parsimonious person.",
        "RefusesToTouchPrincipal(x, y) ::: x refuses to touch the principal of y.",
        "Invests(x, y) ::: x invests with y.",
        "LivesOnEarnings(x) ::: x lives on the earnings from McTeague's dental practice.",
        "AccumulatesSavings(x) ::: x accumulates savings.",
        "DeterioratesFriendship(x, y) ::: The friendship between x and y deteriorates.",
        "PrevailsInFight(x, y) ::: x prevails in a fight against y.",
        "BreaksArm(x, y) ::: x breaks y's arm.",
        "PartAsFriends(x, y) ::: x and y part as friends."
      ],
      "premises": [
        "RefusesToTouchPrincipal(a_3, $15,000) ∧ Parsimonious(a_3) ∧ LivesOnEarnings(a_1) ::: Trina's refusal to touch the principal of her $15,000 leads to a parsimonious lifestyle for her and McTeague.",
        "PrevailsInFight(a_1, a_2) ∧ BreaksArm(a_1, a_2) ::: McTeague's immense physical strength leads to the deterioration of the friendship with Marcus.",
        "DeterioratesFriendship(a_2, a_1) ::: The friendship between Marcus and McTeague deteriorates.",
        "AccumulatesSavings(a_3) ::: Trina secretly accumulates penny-pinched savings in a locked trunk.",
        "PartAsFriends(a_2, a_1) ::: Marcus and McTeague part apparently as friends before Marcus leaves."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "655": [
    {
      "id": 655,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 3,
      "paragraph": "When McTeague returns, destitute once more, she refuses to give him money even for food. Aggravated and made violent by whisky, McTeague beats her to death. He takes the entire hoard of gold and heads out to a mining community that he had left years before. Sensing pursuit, he makes his way south towards Mexico; meanwhile, Marcus hears of the murder and joins the hunt for McTeague, finally catching him in Death Valley. In the middle of the desert Marcus and McTeague fight over McTeague's remaining water and, when that is lost and they are already doomed, over Trina's $15,000. McTeague kills Marcus, but as he dies, Marcus handcuffs himself to McTeague. The final, dramatic image of the novel is one of McTeague stranded, alone and helpless. He is left with only the company of Marcus's corpse, to whom he is handcuffed, in the desolate, arid waste of Death Valley.",
      "question_template": "The Precogs are sent to [[CANDIDATE_ANSWER]] when they are shut down.",
      "candidate_answers": [
        "She refuses to give him money even for food.",
        "McTeague beats her to death."
      ],
      "predicates": [
        "Destitute(a_1) ::: McTeague is destitute.",
        "Refuses(a_3, a_1, e) ::: Trina refuses to give McTeague money for food.",
        "Aggravated(a_1) ::: McTeague is aggravated by whisky.",
        "Violent(a_1) ::: McTeague becomes violent due to whisky.",
        "Beats(a_1, a_3) ::: McTeague beats Trina.",
        "Dead(a_3) ::: Trina is dead.",
        "Takes(a_1, c) ::: McTeague takes the entire hoard of gold.",
        "HeadsOut(a_1, b_2) ::: McTeague heads out to a mining community.",
        "SensesPursuit(a_1) ::: McTeague senses pursuit.",
        "MakesWay(a_1, b_3) ::: McTeague makes his way towards Mexico.",
        "Hears(a_2, a_3) ::: Marcus hears of Trina's murder.",
        "JoinsHunt(a_2, a_1) ::: Marcus joins the hunt for McTeague.",
        "Catches(a_2, a_1) ::: Marcus catches McTeague in Death Valley.",
        "Fights(a_1, a_2) ::: McTeague fights Marcus.",
        "OverWater(a_1, a_2) ::: They fight over McTeague's remaining water.",
        "OverGold(a_1, a_2) ::: They fight over Trina's $15,000.",
        "Kills(a_1, a_2) ::: McTeague kills Marcus.",
        "Handcuffs(a_2, a_1) ::: Marcus handcuffs himself to McTeague.",
        "Stranded(a_1) ::: McTeague is stranded.",
        "Alone(a_1) ::: McTeague is alone.",
        "Helpless(a_1) ::: McTeague is helpless.",
        "WithCorpse(a_1, a_2) ::: McTeague is left with Marcus's corpse.",
        "InDesolateWaste(a_1, b_1) ::: McTeague is in the desolate, arid waste of Death Valley."
      ],
      "premises": [
        "Destitute(a_1) ∧ Refuses(a_3, a_1, e) ∧ Aggravated(a_1) ∧ Violent(a_1) ∧ Beats(a_1, a_3) ∧ Dead(a_3) ::: McTeague is destitute, Trina refuses to give him money for food, McTeague is aggravated and violent due to whisky, and he beats Trina to death.",
        "Takes(a_1, c) ∧ HeadsOut(a_1, b_2) ::: McTeague takes the entire hoard of gold and heads out to a mining community.",
        "SensesPursuit(a_1) ∧ MakesWay(a_1, b_3) ::: McTeague senses pursuit and makes his way towards Mexico.",
        "Hears(a_2, a_3) ∧ JoinsHunt(a_2, a_1) ∧ Catches(a_2, a_1) ::: Marcus hears of the murder, joins the hunt for McTeague, and catches him in Death Valley.",
        "Fights(a_1, a_2) ∧ OverWater(a_1, a_2) ∧ OverGold(a_1, a_2) ::: McTeague and Marcus fight over McTeague's remaining water and Trina's $15,000.",
        "Kills(a_1, a_2) ∧ Handcuffs(a_2, a_1) ::: McTeague kills Marcus, but Marcus handcuffs himself to McTeague.",
        "Stranded(a_1) ∧ Alone(a_1) ∧ Helpless(a_1) ∧ WithCorpse(a_1, a_2) ∧ InDesolateWaste(a_1, b_1) ::: McTeague is stranded, alone, and helpless with Marcus's corpse in the desolate, arid waste of Death Valley.",
        "Conclusion:",
        "McTeague's actions lead to his isolation and helplessness in Death Valley."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "657": [
    {
      "id": 657,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 0,
      "paragraph": " McTeague is a dentist of limited intellect from a poor miner's family, who has opened a dentist shop on Polk Street in San Francisco. (His first name is never revealed; other characters in the novel call him simply \"Mac\".) His best friend, Marcus Schouler, brings his cousin, Trina Sieppe, whom he is courting, to McTeague's parlor for dental work. McTeague becomes infatuated with her while working on her teeth, and Marcus graciously steps aside. McTeague successfully woos Trina. Shortly after McTeague and Trina have kissed and declared their love for each other, Trina discovers that she has won $15,000 from a lottery ticket. In the ensuing celebration Trina's mother, Mrs Sieppe, announces that McTeague and Trina are to marry. Marcus becomes jealous of McTeague, and claims that he has been cheated out of money that would have been rightfully his if he had married Trina.",
      "question_template": "Marcus is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Marcus becomes jealous of McTeague",
        "Claims that he has been cheated out of money that would have been rightfully his if he had married Trina"
      ],
      "predicates": [
        "Dentist(x) ::: x is a dentist.",
        "LimitedIntellect(x) ::: x has limited intellect.",
        "FromPoorFamily(x) ::: x is from a poor miner's family.",
        "OpenedShop(x, y) ::: x opened a shop at location y.",
        "BestFriend(x, y) ::: x is the best friend of y.",
        "Courting(x, y) ::: x is courting y.",
        "InfatuatedWith(x, y) ::: x is infatuated with y.",
        "Woos(x, y) ::: x woos y.",
        "Kissed(x, y) ::: x kissed y.",
        "DeclaredLove(x, y) ::: x declared love for y.",
        "WonLottery(x, y) ::: x won y from a lottery ticket.",
        "Announces(x, y) ::: x announces y.",
        "JealousOf(x, y) ::: x is jealous of y.",
        "ClaimsCheated(x, y) ::: x claims to have been cheated out of y."
      ],
      "premises": [
        "Dentist(a_1) ∧ LimitedIntellect(a_1) ∧ FromPoorFamily(a_1) ∧ OpenedShop(a_1, b_0) ::: McTeague is a dentist of limited intellect from a poor miner's family, who has opened a dentist shop on Polk Street in San Francisco.",
        "BestFriend(a_2, a_1) ∧ Courting(a_2, a_3) ::: Marcus Schouler is McTeague's best friend and is courting Trina Sieppe.",
        "InfatuatedWith(a_1, a_3) ::: McTeague becomes infatuated with Trina while working on her teeth.",
        "Woos(a_1, a_3) ::: McTeague successfully woos Trina.",
        "Kissed(a_1, a_3) ∧ DeclaredLove(a_1, a_3) ::: McTeague and Trina kissed and declared their love for each other.",
        "WonLottery(a_3, $15,000) ::: Trina discovers that she has won $15,000 from a lottery ticket.",
        "Announces(a_3, \"McTeague and Trina are to marry\") ::: Trina's mother announces that McTeague and Trina are to marry.",
        "JealousOf(a_2, a_1) ∧ ClaimsCheated(a_2, $15,000) ::: Marcus becomes jealous of McTeague and claims that he has been cheated out of money that would have been rightfully his if he had married Trina."
      ],
      "conclusions": [
        "JealousOf(marcus, mc_teague)",
        "ClaimsCheated(a_2, $15,000)"
      ]
    },
    {
      "id": 657,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 1,
      "paragraph": "The marriage takes place, and Mrs Sieppe, along with the rest of Trina's family, move away from San Francisco, leaving her alone with McTeague. Trina proves to be a parsimonious wife; she refuses to touch the principal of her $15,000, which she invests with her uncle. She insists that she and McTeague must live on the earnings from McTeague's dental practice, the small income from the $15,000 investment, and the bit of money she earns from carving small wooden figures of Noah's animals and his Ark for sale in her uncle's shop. Secretly, she accumulates penny-pinched savings in a locked trunk. Though the couple are happy, the friendship between Marcus and Mac deteriorates. More than once the two men come to grips; each time McTeague's immense physical strength prevails, and eventually he breaks Marcus' arm in a fight. When Marcus recovers, he goes south, intending to become a rancher; before he leaves, he visits the McTeagues, and he and Mac part apparently as friends.",
      "question_template": "Marcus is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- More than once the two men come to grips; each time McTeague's immense physical strength prevails, and eventually he breaks Marcus' arm in a fight.",
        "- He goes south, intending to become a rancher; before he leaves, he visits the McTeagues, and he and Mac part apparently as friends."
      ],
      "predicates": [
        "Parsimonious(x) ::: x is a parsimonious person.",
        "RefusesToTouchPrincipal(x, y) ::: x refuses to touch the principal of y.",
        "Invests(x, y) ::: x invests with y.",
        "LivesOnEarnings(x) ::: x lives on the earnings from McTeague's dental practice.",
        "AccumulatesSavings(x) ::: x accumulates savings.",
        "DeterioratesFriendship(x, y) ::: The friendship between x and y deteriorates.",
        "PrevailsInFight(x, y) ::: x prevails in a fight against y.",
        "BreaksArm(x, y) ::: x breaks y's arm.",
        "PartAsFriends(x, y) ::: x and y part as friends."
      ],
      "premises": [
        "RefusesToTouchPrincipal(a_3, $15,000) ∧ Parsimonious(a_3) ∧ LivesOnEarnings(a_1) ::: Trina's refusal to touch the principal of her $15,000 leads to a parsimonious lifestyle for her and McTeague.",
        "PrevailsInFight(a_1, a_2) ∧ BreaksArm(a_1, a_2) ::: McTeague's immense physical strength leads to the deterioration of the friendship with Marcus.",
        "DeterioratesFriendship(a_2, a_1) ::: The friendship between Marcus and McTeague deteriorates.",
        "AccumulatesSavings(a_3) ::: Trina secretly accumulates penny-pinched savings in a locked trunk.",
        "PartAsFriends(a_2, a_1) ::: Marcus and McTeague part apparently as friends before Marcus leaves."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 657,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 2,
      "paragraph": "Catastrophe strikes when McTeague is debarred from practising dentistry by the authorities; it becomes clear that before leaving, Marcus has taken revenge on Mac by informing city hall that he has no license or degree. McTeague loses his practice and the couple are forced to move into successively poorer quarters as Trina becomes more and more miserly. Their life together deteriorates until McTeague takes all Trina's domestic savings (amounting to $400 or roughly $10,000 in 2010 values) and abandons her. Meanwhile, Trina falls completely under the spell of money and withdraws the principal of her prior winnings in gold from her uncle's firm so she can admire and handle the coins in her room, at one point spreading them over her bed and rolling around in them.",
      "question_template": "Marcus is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Marcus has taken revenge on Mac by informing city hall that he has no license or degree."
      ],
      "predicates": [
        "Debarred(a_1) ::: McTeague is debarred from practicing dentistry.",
        "Informed(a_2, cityHall) ::: Marcus informed city hall about McTeague's lack of license or degree.",
        "LosesPractice(a_1) ::: McTeague loses his dental practice.",
        "MovesIntoPoorQuarters(a_1, a_3) ::: McTeague and Trina move into successively poorer quarters.",
        "Miserly(a_3) ::: Trina becomes more miserly.",
        "Deteriorates(a_1, a_3) ::: The life of McTeague and Trina deteriorates.",
        "TakesSavings(a_1, a_3) ::: McTeague takes Trina's domestic savings.",
        "Abandons(a_1, a_3) ::: McTeague abandons Trina.",
        "FallsUnderSpell(a_3, c) ::: Trina falls completely under the spell of money.",
        "WithdrawsWinnings(a_3) ::: Trina withdraws the principal of her prior winnings in gold.",
        "HandlesCoins(a_3) ::: Trina admires and handles the coins in her room.",
        "SpreadsCoins(a_3) ::: Trina spreads the coins over her bed."
      ],
      "premises": [
        "Debarred(a_1) ∧ Informed(a_2, cityHall) ∧ LosesPractice(a_1) ∧ MovesIntoPoorQuarters(a_1, a_3) ∧ Miserly(a_3) ∧ Deteriorates(a_1, a_3) ::: McTeague is debarred from practicing dentistry, Marcus informs city hall about McTeague's lack of license or degree, McTeague loses his practice, and they move into poorer quarters as Trina becomes more miserly, leading to the deterioration of their life together.",
        "TakesSavings(a_1, a_3) ∧ Abandons(a_1, a_3) ::: McTeague takes Trina's domestic savings and abandons her.",
        "FallsUnderSpell(a_3, c) ∧ WithdrawsWinnings(a_3) ∧ HandlesCoins(a_3) ∧ SpreadsCoins(a_3) ::: Trina falls under the spell of money, withdraws her winnings in gold, admires and handles the coins, and spreads them over her bed."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 657,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 3,
      "paragraph": "When McTeague returns, destitute once more, she refuses to give him money even for food. Aggravated and made violent by whisky, McTeague beats her to death. He takes the entire hoard of gold and heads out to a mining community that he had left years before. Sensing pursuit, he makes his way south towards Mexico; meanwhile, Marcus hears of the murder and joins the hunt for McTeague, finally catching him in Death Valley. In the middle of the desert Marcus and McTeague fight over McTeague's remaining water and, when that is lost and they are already doomed, over Trina's $15,000. McTeague kills Marcus, but as he dies, Marcus handcuffs himself to McTeague. The final, dramatic image of the novel is one of McTeague stranded, alone and helpless. He is left with only the company of Marcus's corpse, to whom he is handcuffed, in the desolate, arid waste of Death Valley.",
      "question_template": "Marcus is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Marcus handcuffs himself to McTeague",
        "Marcus hears of the murder and joins the hunt for McTeague",
        "Marcus and McTeague fight over McTeague's remaining water and, when that is lost and they are already doomed, over Trina's $15,000"
      ],
      "predicates": [
        "Destitute(a_1) ::: McTeague is destitute.",
        "Refuses(a_3, a_1, e) ::: Trina refuses to give McTeague money for food.",
        "Aggravated(a_1) ::: McTeague is aggravated by whisky.",
        "Violent(a_1) ::: McTeague becomes violent due to whisky.",
        "Beats(a_1, a_3) ::: McTeague beats Trina.",
        "Dead(a_3) ::: Trina is dead.",
        "Takes(a_1, c) ::: McTeague takes the entire hoard of gold.",
        "HeadsOut(a_1, b_2) ::: McTeague heads out to a mining community.",
        "SensesPursuit(a_1) ::: McTeague senses pursuit.",
        "MakesWay(a_1, b_3) ::: McTeague makes his way towards Mexico.",
        "Hears(a_2, a_3) ::: Marcus hears of Trina's murder.",
        "JoinsHunt(a_2, a_1) ::: Marcus joins the hunt for McTeague.",
        "Catches(a_2, a_1) ::: Marcus catches McTeague in Death Valley.",
        "Fights(a_1, a_2) ::: McTeague fights Marcus.",
        "OverWater(a_1, a_2) ::: They fight over McTeague's remaining water.",
        "OverGold(a_1, a_2) ::: They fight over Trina's $15,000.",
        "Kills(a_1, a_2) ::: McTeague kills Marcus.",
        "Handcuffs(a_2, a_1) ::: Marcus handcuffs himself to McTeague.",
        "Stranded(a_1) ::: McTeague is stranded.",
        "Alone(a_1) ::: McTeague is alone.",
        "Helpless(a_1) ::: McTeague is helpless.",
        "WithCorpse(a_1, a_2) ::: McTeague is left with Marcus's corpse.",
        "InDesolateWaste(a_1, b_1) ::: McTeague is in the desolate, arid waste of Death Valley."
      ],
      "premises": [
        "Destitute(a_1) ∧ Refuses(a_3, a_1, e) ∧ Aggravated(a_1) ∧ Violent(a_1) ∧ Beats(a_1, a_3) ∧ Dead(a_3) ::: McTeague is destitute, Trina refuses to give him money for food, McTeague is aggravated and violent due to whisky, and he beats Trina to death.",
        "Takes(a_1, c) ∧ HeadsOut(a_1, b_2) ::: McTeague takes the entire hoard of gold and heads out to a mining community.",
        "SensesPursuit(a_1) ∧ MakesWay(a_1, b_3) ::: McTeague senses pursuit and makes his way towards Mexico.",
        "Hears(a_2, a_3) ∧ JoinsHunt(a_2, a_1) ∧ Catches(a_2, a_1) ::: Marcus hears of the murder, joins the hunt for McTeague, and catches him in Death Valley.",
        "Fights(a_1, a_2) ∧ OverWater(a_1, a_2) ∧ OverGold(a_1, a_2) ::: McTeague and Marcus fight over McTeague's remaining water and Trina's $15,000.",
        "Kills(a_1, a_2) ∧ Handcuffs(a_2, a_1) ::: McTeague kills Marcus, but Marcus handcuffs himself to McTeague.",
        "Stranded(a_1) ∧ Alone(a_1) ∧ Helpless(a_1) ∧ WithCorpse(a_1, a_2) ∧ InDesolateWaste(a_1, b_1) ::: McTeague is stranded, alone, and helpless with Marcus's corpse in the desolate, arid waste of Death Valley.",
        "Conclusion:",
        "McTeague's actions lead to his isolation and helplessness in Death Valley."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "658": [
    {
      "id": 658,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 0,
      "paragraph": " McTeague is a dentist of limited intellect from a poor miner's family, who has opened a dentist shop on Polk Street in San Francisco. (His first name is never revealed; other characters in the novel call him simply \"Mac\".) His best friend, Marcus Schouler, brings his cousin, Trina Sieppe, whom he is courting, to McTeague's parlor for dental work. McTeague becomes infatuated with her while working on her teeth, and Marcus graciously steps aside. McTeague successfully woos Trina. Shortly after McTeague and Trina have kissed and declared their love for each other, Trina discovers that she has won $15,000 from a lottery ticket. In the ensuing celebration Trina's mother, Mrs Sieppe, announces that McTeague and Trina are to marry. Marcus becomes jealous of McTeague, and claims that he has been cheated out of money that would have been rightfully his if he had married Trina.",
      "question_template": "Marcus goes [[CANDIDATE_ANSWER]] when he recovers.",
      "candidate_answers": [
        "Marcus Schouler brings his cousin, Trina Sieppe, whom he is courting, to McTeague's parlor for dental work.",
        "Marcus graciously steps aside.",
        "Trina discovers that she has won $15,000 from a lottery ticket."
      ],
      "predicates": [
        "Dentist(x) ::: x is a dentist.",
        "LimitedIntellect(x) ::: x has limited intellect.",
        "FromPoorFamily(x) ::: x is from a poor miner's family.",
        "OpenedShop(x, y) ::: x opened a shop at location y.",
        "BestFriend(x, y) ::: x is the best friend of y.",
        "Courting(x, y) ::: x is courting y.",
        "InfatuatedWith(x, y) ::: x is infatuated with y.",
        "Woos(x, y) ::: x woos y.",
        "Kissed(x, y) ::: x kissed y.",
        "DeclaredLove(x, y) ::: x declared love for y.",
        "WonLottery(x, y) ::: x won y from a lottery ticket.",
        "Announces(x, y) ::: x announces y.",
        "JealousOf(x, y) ::: x is jealous of y.",
        "ClaimsCheated(x, y) ::: x claims to have been cheated out of y."
      ],
      "premises": [
        "Dentist(a_1) ∧ LimitedIntellect(a_1) ∧ FromPoorFamily(a_1) ∧ OpenedShop(a_1, b_0) ::: McTeague is a dentist of limited intellect from a poor miner's family, who has opened a dentist shop on Polk Street in San Francisco.",
        "BestFriend(a_2, a_1) ∧ Courting(a_2, a_3) ::: Marcus Schouler is McTeague's best friend and is courting Trina Sieppe.",
        "InfatuatedWith(a_1, a_3) ::: McTeague becomes infatuated with Trina while working on her teeth.",
        "Woos(a_1, a_3) ::: McTeague successfully woos Trina.",
        "Kissed(a_1, a_3) ∧ DeclaredLove(a_1, a_3) ::: McTeague and Trina kissed and declared their love for each other.",
        "WonLottery(a_3, $15,000) ::: Trina discovers that she has won $15,000 from a lottery ticket.",
        "Announces(a_3, \"McTeague and Trina are to marry\") ::: Trina's mother announces that McTeague and Trina are to marry.",
        "JealousOf(a_2, a_1) ∧ ClaimsCheated(a_2, $15,000) ::: Marcus becomes jealous of McTeague and claims that he has been cheated out of money that would have been rightfully his if he had married Trina."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 658,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 1,
      "paragraph": "The marriage takes place, and Mrs Sieppe, along with the rest of Trina's family, move away from San Francisco, leaving her alone with McTeague. Trina proves to be a parsimonious wife; she refuses to touch the principal of her $15,000, which she invests with her uncle. She insists that she and McTeague must live on the earnings from McTeague's dental practice, the small income from the $15,000 investment, and the bit of money she earns from carving small wooden figures of Noah's animals and his Ark for sale in her uncle's shop. Secretly, she accumulates penny-pinched savings in a locked trunk. Though the couple are happy, the friendship between Marcus and Mac deteriorates. More than once the two men come to grips; each time McTeague's immense physical strength prevails, and eventually he breaks Marcus' arm in a fight. When Marcus recovers, he goes south, intending to become a rancher; before he leaves, he visits the McTeagues, and he and Mac part apparently as friends.",
      "question_template": "Marcus goes [[CANDIDATE_ANSWER]] when he recovers.",
      "candidate_answers": [
        "Mrs. Sieppe",
        "Trina's family",
        "Trina"
      ],
      "predicates": [
        "Parsimonious(x) ::: x is a parsimonious person.",
        "RefusesToTouchPrincipal(x, y) ::: x refuses to touch the principal of y.",
        "Invests(x, y) ::: x invests with y.",
        "LivesOnEarnings(x) ::: x lives on the earnings from McTeague's dental practice.",
        "AccumulatesSavings(x) ::: x accumulates savings.",
        "DeterioratesFriendship(x, y) ::: The friendship between x and y deteriorates.",
        "PrevailsInFight(x, y) ::: x prevails in a fight against y.",
        "BreaksArm(x, y) ::: x breaks y's arm.",
        "PartAsFriends(x, y) ::: x and y part as friends."
      ],
      "premises": [
        "RefusesToTouchPrincipal(a_3, $15,000) ∧ Parsimonious(a_3) ∧ LivesOnEarnings(a_1) ::: Trina's refusal to touch the principal of her $15,000 leads to a parsimonious lifestyle for her and McTeague.",
        "PrevailsInFight(a_1, a_2) ∧ BreaksArm(a_1, a_2) ::: McTeague's immense physical strength leads to the deterioration of the friendship with Marcus.",
        "DeterioratesFriendship(a_2, a_1) ::: The friendship between Marcus and McTeague deteriorates.",
        "AccumulatesSavings(a_3) ::: Trina secretly accumulates penny-pinched savings in a locked trunk.",
        "PartAsFriends(a_2, a_1) ::: Marcus and McTeague part apparently as friends before Marcus leaves."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 658,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 2,
      "paragraph": "Catastrophe strikes when McTeague is debarred from practising dentistry by the authorities; it becomes clear that before leaving, Marcus has taken revenge on Mac by informing city hall that he has no license or degree. McTeague loses his practice and the couple are forced to move into successively poorer quarters as Trina becomes more and more miserly. Their life together deteriorates until McTeague takes all Trina's domestic savings (amounting to $400 or roughly $10,000 in 2010 values) and abandons her. Meanwhile, Trina falls completely under the spell of money and withdraws the principal of her prior winnings in gold from her uncle's firm so she can admire and handle the coins in her room, at one point spreading them over her bed and rolling around in them.",
      "question_template": "Marcus goes [[CANDIDATE_ANSWER]] when he recovers.",
      "candidate_answers": [
        "Marcus has taken revenge on Mac by informing city hall that he has no license or degree.",
        "Trina falls completely under the spell of money and withdraws the principal of her prior winnings in gold from her uncle's firm."
      ],
      "predicates": [
        "Debarred(a_1) ::: McTeague is debarred from practicing dentistry.",
        "Informed(a_2, cityHall) ::: Marcus informed city hall about McTeague's lack of license or degree.",
        "LosesPractice(a_1) ::: McTeague loses his dental practice.",
        "MovesIntoPoorQuarters(a_1, a_3) ::: McTeague and Trina move into successively poorer quarters.",
        "Miserly(a_3) ::: Trina becomes more miserly.",
        "Deteriorates(a_1, a_3) ::: The life of McTeague and Trina deteriorates.",
        "TakesSavings(a_1, a_3) ::: McTeague takes Trina's domestic savings.",
        "Abandons(a_1, a_3) ::: McTeague abandons Trina.",
        "FallsUnderSpell(a_3, c) ::: Trina falls completely under the spell of money.",
        "WithdrawsWinnings(a_3) ::: Trina withdraws the principal of her prior winnings in gold.",
        "HandlesCoins(a_3) ::: Trina admires and handles the coins in her room.",
        "SpreadsCoins(a_3) ::: Trina spreads the coins over her bed."
      ],
      "premises": [
        "Debarred(a_1) ∧ Informed(a_2, cityHall) ∧ LosesPractice(a_1) ∧ MovesIntoPoorQuarters(a_1, a_3) ∧ Miserly(a_3) ∧ Deteriorates(a_1, a_3) ::: McTeague is debarred from practicing dentistry, Marcus informs city hall about McTeague's lack of license or degree, McTeague loses his practice, and they move into poorer quarters as Trina becomes more miserly, leading to the deterioration of their life together.",
        "TakesSavings(a_1, a_3) ∧ Abandons(a_1, a_3) ::: McTeague takes Trina's domestic savings and abandons her.",
        "FallsUnderSpell(a_3, c) ∧ WithdrawsWinnings(a_3) ∧ HandlesCoins(a_3) ∧ SpreadsCoins(a_3) ::: Trina falls under the spell of money, withdraws her winnings in gold, admires and handles the coins, and spreads them over her bed."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "659": [
    {
      "id": 659,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 1,
      "paragraph": "The marriage takes place, and Mrs Sieppe, along with the rest of Trina's family, move away from San Francisco, leaving her alone with McTeague. Trina proves to be a parsimonious wife; she refuses to touch the principal of her $15,000, which she invests with her uncle. She insists that she and McTeague must live on the earnings from McTeague's dental practice, the small income from the $15,000 investment, and the bit of money she earns from carving small wooden figures of Noah's animals and his Ark for sale in her uncle's shop. Secretly, she accumulates penny-pinched savings in a locked trunk. Though the couple are happy, the friendship between Marcus and Mac deteriorates. More than once the two men come to grips; each time McTeague's immense physical strength prevails, and eventually he breaks Marcus' arm in a fight. When Marcus recovers, he goes south, intending to become a rancher; before he leaves, he visits the McTeagues, and he and Mac part apparently as friends.",
      "question_template": "[[CANDIDATE_ANSWER]] breaks Marcus' arm in a fight.",
      "candidate_answers": [
        "- The friendship between Marcus and Mac deteriorates.",
        "- Each time McTeague's immense physical strength prevails.",
        "- He breaks Marcus' arm in a fight."
      ],
      "predicates": [
        "Parsimonious(x) ::: x is a parsimonious person.",
        "RefusesToTouchPrincipal(x, y) ::: x refuses to touch the principal of y.",
        "Invests(x, y) ::: x invests with y.",
        "LivesOnEarnings(x) ::: x lives on the earnings from McTeague's dental practice.",
        "AccumulatesSavings(x) ::: x accumulates savings.",
        "DeterioratesFriendship(x, y) ::: The friendship between x and y deteriorates.",
        "PrevailsInFight(x, y) ::: x prevails in a fight against y.",
        "BreaksArm(x, y) ::: x breaks y's arm.",
        "PartAsFriends(x, y) ::: x and y part as friends."
      ],
      "premises": [
        "RefusesToTouchPrincipal(a_3, $15,000) ∧ Parsimonious(a_3) ∧ LivesOnEarnings(a_1) ::: Trina's refusal to touch the principal of her $15,000 leads to a parsimonious lifestyle for her and McTeague.",
        "PrevailsInFight(a_1, a_2) ∧ BreaksArm(a_1, a_2) ::: McTeague's immense physical strength leads to the deterioration of the friendship with Marcus.",
        "DeterioratesFriendship(a_2, a_1) ::: The friendship between Marcus and McTeague deteriorates.",
        "AccumulatesSavings(a_3) ::: Trina secretly accumulates penny-pinched savings in a locked trunk.",
        "PartAsFriends(a_2, a_1) ::: Marcus and McTeague part apparently as friends before Marcus leaves."
      ],
      "conclusions": [
        "DeterioratesFriendship(a_2, a_1) ∧ PrevailsInFight(a_1, a_2) ∧ BreaksArm(a_1, a_2)",
        "PrevailsInFight(a_1, a_2) ∧ BreaksArm(a_1, a_2)",
        "BreaksArm(a_1, a_2)"
      ]
    },
    {
      "id": 659,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 2,
      "paragraph": "Catastrophe strikes when McTeague is debarred from practising dentistry by the authorities; it becomes clear that before leaving, Marcus has taken revenge on Mac by informing city hall that he has no license or degree. McTeague loses his practice and the couple are forced to move into successively poorer quarters as Trina becomes more and more miserly. Their life together deteriorates until McTeague takes all Trina's domestic savings (amounting to $400 or roughly $10,000 in 2010 values) and abandons her. Meanwhile, Trina falls completely under the spell of money and withdraws the principal of her prior winnings in gold from her uncle's firm so she can admire and handle the coins in her room, at one point spreading them over her bed and rolling around in them.",
      "question_template": "[[CANDIDATE_ANSWER]] breaks Marcus' arm in a fight.",
      "candidate_answers": [
        "Marcus has taken revenge on Mac by informing city hall that he has no license or degree.",
        "McTeague loses his practice and the couple are forced to move into successively poorer quarters as Trina becomes more and more miserly.",
        "Their life together deteriorates until McTeague takes all Trina's domestic savings and abandons her.",
        "Trina falls completely under the spell of money and withdraws the principal of her prior winnings in gold from her uncle's firm."
      ],
      "predicates": [
        "Debarred(a_1) ::: McTeague is debarred from practicing dentistry.",
        "Informed(a_2, cityHall) ::: Marcus informed city hall about McTeague's lack of license or degree.",
        "LosesPractice(a_1) ::: McTeague loses his dental practice.",
        "MovesIntoPoorQuarters(a_1, a_3) ::: McTeague and Trina move into successively poorer quarters.",
        "Miserly(a_3) ::: Trina becomes more miserly.",
        "Deteriorates(a_1, a_3) ::: The life of McTeague and Trina deteriorates.",
        "TakesSavings(a_1, a_3) ::: McTeague takes Trina's domestic savings.",
        "Abandons(a_1, a_3) ::: McTeague abandons Trina.",
        "FallsUnderSpell(a_3, c) ::: Trina falls completely under the spell of money.",
        "WithdrawsWinnings(a_3) ::: Trina withdraws the principal of her prior winnings in gold.",
        "HandlesCoins(a_3) ::: Trina admires and handles the coins in her room.",
        "SpreadsCoins(a_3) ::: Trina spreads the coins over her bed."
      ],
      "premises": [
        "Debarred(a_1) ∧ Informed(a_2, cityHall) ∧ LosesPractice(a_1) ∧ MovesIntoPoorQuarters(a_1, a_3) ∧ Miserly(a_3) ∧ Deteriorates(a_1, a_3) ::: McTeague is debarred from practicing dentistry, Marcus informs city hall about McTeague's lack of license or degree, McTeague loses his practice, and they move into poorer quarters as Trina becomes more miserly, leading to the deterioration of their life together.",
        "TakesSavings(a_1, a_3) ∧ Abandons(a_1, a_3) ::: McTeague takes Trina's domestic savings and abandons her.",
        "FallsUnderSpell(a_3, c) ∧ WithdrawsWinnings(a_3) ∧ HandlesCoins(a_3) ∧ SpreadsCoins(a_3) ::: Trina falls under the spell of money, withdraws her winnings in gold, admires and handles the coins, and spreads them over her bed."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 659,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 3,
      "paragraph": "When McTeague returns, destitute once more, she refuses to give him money even for food. Aggravated and made violent by whisky, McTeague beats her to death. He takes the entire hoard of gold and heads out to a mining community that he had left years before. Sensing pursuit, he makes his way south towards Mexico; meanwhile, Marcus hears of the murder and joins the hunt for McTeague, finally catching him in Death Valley. In the middle of the desert Marcus and McTeague fight over McTeague's remaining water and, when that is lost and they are already doomed, over Trina's $15,000. McTeague kills Marcus, but as he dies, Marcus handcuffs himself to McTeague. The final, dramatic image of the novel is one of McTeague stranded, alone and helpless. He is left with only the company of Marcus's corpse, to whom he is handcuffed, in the desolate, arid waste of Death Valley.",
      "question_template": "[[CANDIDATE_ANSWER]] breaks Marcus' arm in a fight.",
      "candidate_answers": [
        "- He takes the entire hoard of gold and heads out to a mining community that he had left years before.",
        "- Marcus hears of the murder and joins the hunt for McTeague.",
        "- McTeague kills Marcus, but as he dies, Marcus handcuffs himself to McTeague."
      ],
      "predicates": [
        "Destitute(a_1) ::: McTeague is destitute.",
        "Refuses(a_3, a_1, e) ::: Trina refuses to give McTeague money for food.",
        "Aggravated(a_1) ::: McTeague is aggravated by whisky.",
        "Violent(a_1) ::: McTeague becomes violent due to whisky.",
        "Beats(a_1, a_3) ::: McTeague beats Trina.",
        "Dead(a_3) ::: Trina is dead.",
        "Takes(a_1, c) ::: McTeague takes the entire hoard of gold.",
        "HeadsOut(a_1, b_2) ::: McTeague heads out to a mining community.",
        "SensesPursuit(a_1) ::: McTeague senses pursuit.",
        "MakesWay(a_1, b_3) ::: McTeague makes his way towards Mexico.",
        "Hears(a_2, a_3) ::: Marcus hears of Trina's murder.",
        "JoinsHunt(a_2, a_1) ::: Marcus joins the hunt for McTeague.",
        "Catches(a_2, a_1) ::: Marcus catches McTeague in Death Valley.",
        "Fights(a_1, a_2) ::: McTeague fights Marcus.",
        "OverWater(a_1, a_2) ::: They fight over McTeague's remaining water.",
        "OverGold(a_1, a_2) ::: They fight over Trina's $15,000.",
        "Kills(a_1, a_2) ::: McTeague kills Marcus.",
        "Handcuffs(a_2, a_1) ::: Marcus handcuffs himself to McTeague.",
        "Stranded(a_1) ::: McTeague is stranded.",
        "Alone(a_1) ::: McTeague is alone.",
        "Helpless(a_1) ::: McTeague is helpless.",
        "WithCorpse(a_1, a_2) ::: McTeague is left with Marcus's corpse.",
        "InDesolateWaste(a_1, b_1) ::: McTeague is in the desolate, arid waste of Death Valley."
      ],
      "premises": [
        "Destitute(a_1) ∧ Refuses(a_3, a_1, e) ∧ Aggravated(a_1) ∧ Violent(a_1) ∧ Beats(a_1, a_3) ∧ Dead(a_3) ::: McTeague is destitute, Trina refuses to give him money for food, McTeague is aggravated and violent due to whisky, and he beats Trina to death.",
        "Takes(a_1, c) ∧ HeadsOut(a_1, b_2) ::: McTeague takes the entire hoard of gold and heads out to a mining community.",
        "SensesPursuit(a_1) ∧ MakesWay(a_1, b_3) ::: McTeague senses pursuit and makes his way towards Mexico.",
        "Hears(a_2, a_3) ∧ JoinsHunt(a_2, a_1) ∧ Catches(a_2, a_1) ::: Marcus hears of the murder, joins the hunt for McTeague, and catches him in Death Valley.",
        "Fights(a_1, a_2) ∧ OverWater(a_1, a_2) ∧ OverGold(a_1, a_2) ::: McTeague and Marcus fight over McTeague's remaining water and Trina's $15,000.",
        "Kills(a_1, a_2) ∧ Handcuffs(a_2, a_1) ::: McTeague kills Marcus, but Marcus handcuffs himself to McTeague.",
        "Stranded(a_1) ∧ Alone(a_1) ∧ Helpless(a_1) ∧ WithCorpse(a_1, a_2) ∧ InDesolateWaste(a_1, b_1) ::: McTeague is stranded, alone, and helpless with Marcus's corpse in the desolate, arid waste of Death Valley.",
        "Conclusion:",
        "McTeague's actions lead to his isolation and helplessness in Death Valley."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "660": [
    {
      "id": 660,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 0,
      "paragraph": " McTeague is a dentist of limited intellect from a poor miner's family, who has opened a dentist shop on Polk Street in San Francisco. (His first name is never revealed; other characters in the novel call him simply \"Mac\".) His best friend, Marcus Schouler, brings his cousin, Trina Sieppe, whom he is courting, to McTeague's parlor for dental work. McTeague becomes infatuated with her while working on her teeth, and Marcus graciously steps aside. McTeague successfully woos Trina. Shortly after McTeague and Trina have kissed and declared their love for each other, Trina discovers that she has won $15,000 from a lottery ticket. In the ensuing celebration Trina's mother, Mrs Sieppe, announces that McTeague and Trina are to marry. Marcus becomes jealous of McTeague, and claims that he has been cheated out of money that would have been rightfully his if he had married Trina.",
      "question_template": "Trina wins [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Trina discovers that she has won $15,000 from a lottery ticket."
      ],
      "predicates": [
        "Dentist(x) ::: x is a dentist.",
        "LimitedIntellect(x) ::: x has limited intellect.",
        "FromPoorFamily(x) ::: x is from a poor miner's family.",
        "OpenedShop(x, y) ::: x opened a shop at location y.",
        "BestFriend(x, y) ::: x is the best friend of y.",
        "Courting(x, y) ::: x is courting y.",
        "InfatuatedWith(x, y) ::: x is infatuated with y.",
        "Woos(x, y) ::: x woos y.",
        "Kissed(x, y) ::: x kissed y.",
        "DeclaredLove(x, y) ::: x declared love for y.",
        "WonLottery(x, y) ::: x won y from a lottery ticket.",
        "Announces(x, y) ::: x announces y.",
        "JealousOf(x, y) ::: x is jealous of y.",
        "ClaimsCheated(x, y) ::: x claims to have been cheated out of y."
      ],
      "premises": [
        "Dentist(a_1) ∧ LimitedIntellect(a_1) ∧ FromPoorFamily(a_1) ∧ OpenedShop(a_1, b_0) ::: McTeague is a dentist of limited intellect from a poor miner's family, who has opened a dentist shop on Polk Street in San Francisco.",
        "BestFriend(a_2, a_1) ∧ Courting(a_2, a_3) ::: Marcus Schouler is McTeague's best friend and is courting Trina Sieppe.",
        "InfatuatedWith(a_1, a_3) ::: McTeague becomes infatuated with Trina while working on her teeth.",
        "Woos(a_1, a_3) ::: McTeague successfully woos Trina.",
        "Kissed(a_1, a_3) ∧ DeclaredLove(a_1, a_3) ::: McTeague and Trina kissed and declared their love for each other.",
        "WonLottery(a_3, $15,000) ::: Trina discovers that she has won $15,000 from a lottery ticket.",
        "Announces(a_3, \"McTeague and Trina are to marry\") ::: Trina's mother announces that McTeague and Trina are to marry.",
        "JealousOf(a_2, a_1) ∧ ClaimsCheated(a_2, $15,000) ::: Marcus becomes jealous of McTeague and claims that he has been cheated out of money that would have been rightfully his if he had married Trina."
      ],
      "conclusions": [
        "WonLottery(a_3, $15,000)"
      ]
    },
    {
      "id": 660,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 1,
      "paragraph": "The marriage takes place, and Mrs Sieppe, along with the rest of Trina's family, move away from San Francisco, leaving her alone with McTeague. Trina proves to be a parsimonious wife; she refuses to touch the principal of her $15,000, which she invests with her uncle. She insists that she and McTeague must live on the earnings from McTeague's dental practice, the small income from the $15,000 investment, and the bit of money she earns from carving small wooden figures of Noah's animals and his Ark for sale in her uncle's shop. Secretly, she accumulates penny-pinched savings in a locked trunk. Though the couple are happy, the friendship between Marcus and Mac deteriorates. More than once the two men come to grips; each time McTeague's immense physical strength prevails, and eventually he breaks Marcus' arm in a fight. When Marcus recovers, he goes south, intending to become a rancher; before he leaves, he visits the McTeagues, and he and Mac part apparently as friends.",
      "question_template": "Trina wins [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- The small income from the $15,000 investment",
        "- The bit of money she earns from carving small wooden figures of Noah's animals and his Ark for sale in her uncle's shop",
        "- She insists that she and McTeague must live on the earnings from McTeague's dental practice"
      ],
      "predicates": [
        "Parsimonious(x) ::: x is a parsimonious person.",
        "RefusesToTouchPrincipal(x, y) ::: x refuses to touch the principal of y.",
        "Invests(x, y) ::: x invests with y.",
        "LivesOnEarnings(x) ::: x lives on the earnings from McTeague's dental practice.",
        "AccumulatesSavings(x) ::: x accumulates savings.",
        "DeterioratesFriendship(x, y) ::: The friendship between x and y deteriorates.",
        "PrevailsInFight(x, y) ::: x prevails in a fight against y.",
        "BreaksArm(x, y) ::: x breaks y's arm.",
        "PartAsFriends(x, y) ::: x and y part as friends."
      ],
      "premises": [
        "RefusesToTouchPrincipal(a_3, $15,000) ∧ Parsimonious(a_3) ∧ LivesOnEarnings(a_1) ::: Trina's refusal to touch the principal of her $15,000 leads to a parsimonious lifestyle for her and McTeague.",
        "PrevailsInFight(a_1, a_2) ∧ BreaksArm(a_1, a_2) ::: McTeague's immense physical strength leads to the deterioration of the friendship with Marcus.",
        "DeterioratesFriendship(a_2, a_1) ::: The friendship between Marcus and McTeague deteriorates.",
        "AccumulatesSavings(a_3) ::: Trina secretly accumulates penny-pinched savings in a locked trunk.",
        "PartAsFriends(a_2, a_1) ::: Marcus and McTeague part apparently as friends before Marcus leaves."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 660,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 2,
      "paragraph": "Catastrophe strikes when McTeague is debarred from practising dentistry by the authorities; it becomes clear that before leaving, Marcus has taken revenge on Mac by informing city hall that he has no license or degree. McTeague loses his practice and the couple are forced to move into successively poorer quarters as Trina becomes more and more miserly. Their life together deteriorates until McTeague takes all Trina's domestic savings (amounting to $400 or roughly $10,000 in 2010 values) and abandons her. Meanwhile, Trina falls completely under the spell of money and withdraws the principal of her prior winnings in gold from her uncle's firm so she can admire and handle the coins in her room, at one point spreading them over her bed and rolling around in them.",
      "question_template": "Trina wins [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Withdraws the principal of her prior winnings in gold from her uncle's firm",
        "- Admiring and handling the coins in her room",
        "- Spreading them over her bed and rolling around in them"
      ],
      "predicates": [
        "Debarred(a_1) ::: McTeague is debarred from practicing dentistry.",
        "Informed(a_2, cityHall) ::: Marcus informed city hall about McTeague's lack of license or degree.",
        "LosesPractice(a_1) ::: McTeague loses his dental practice.",
        "MovesIntoPoorQuarters(a_1, a_3) ::: McTeague and Trina move into successively poorer quarters.",
        "Miserly(a_3) ::: Trina becomes more miserly.",
        "Deteriorates(a_1, a_3) ::: The life of McTeague and Trina deteriorates.",
        "TakesSavings(a_1, a_3) ::: McTeague takes Trina's domestic savings.",
        "Abandons(a_1, a_3) ::: McTeague abandons Trina.",
        "FallsUnderSpell(a_3, c) ::: Trina falls completely under the spell of money.",
        "WithdrawsWinnings(a_3) ::: Trina withdraws the principal of her prior winnings in gold.",
        "HandlesCoins(a_3) ::: Trina admires and handles the coins in her room.",
        "SpreadsCoins(a_3) ::: Trina spreads the coins over her bed."
      ],
      "premises": [
        "Debarred(a_1) ∧ Informed(a_2, cityHall) ∧ LosesPractice(a_1) ∧ MovesIntoPoorQuarters(a_1, a_3) ∧ Miserly(a_3) ∧ Deteriorates(a_1, a_3) ::: McTeague is debarred from practicing dentistry, Marcus informs city hall about McTeague's lack of license or degree, McTeague loses his practice, and they move into poorer quarters as Trina becomes more miserly, leading to the deterioration of their life together.",
        "TakesSavings(a_1, a_3) ∧ Abandons(a_1, a_3) ::: McTeague takes Trina's domestic savings and abandons her.",
        "FallsUnderSpell(a_3, c) ∧ WithdrawsWinnings(a_3) ∧ HandlesCoins(a_3) ∧ SpreadsCoins(a_3) ::: Trina falls under the spell of money, withdraws her winnings in gold, admires and handles the coins, and spreads them over her bed."
      ],
      "conclusions": [
        "WithdrawsWinnings(a_3)",
        "None",
        "None"
      ]
    }
  ],
  "661": [
    {
      "id": 661,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 0,
      "paragraph": " McTeague is a dentist of limited intellect from a poor miner's family, who has opened a dentist shop on Polk Street in San Francisco. (His first name is never revealed; other characters in the novel call him simply \"Mac\".) His best friend, Marcus Schouler, brings his cousin, Trina Sieppe, whom he is courting, to McTeague's parlor for dental work. McTeague becomes infatuated with her while working on her teeth, and Marcus graciously steps aside. McTeague successfully woos Trina. Shortly after McTeague and Trina have kissed and declared their love for each other, Trina discovers that she has won $15,000 from a lottery ticket. In the ensuing celebration Trina's mother, Mrs Sieppe, announces that McTeague and Trina are to marry. Marcus becomes jealous of McTeague, and claims that he has been cheated out of money that would have been rightfully his if he had married Trina.",
      "question_template": "While he is dying, Marcus [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- McTeague is a dentist of limited intellect",
        "- Marcus becomes jealous of McTeague",
        "- Claims that he has been cheated out of money that would have been rightfully his if he had married Trina"
      ],
      "predicates": [
        "Dentist(x) ::: x is a dentist.",
        "LimitedIntellect(x) ::: x has limited intellect.",
        "FromPoorFamily(x) ::: x is from a poor miner's family.",
        "OpenedShop(x, y) ::: x opened a shop at location y.",
        "BestFriend(x, y) ::: x is the best friend of y.",
        "Courting(x, y) ::: x is courting y.",
        "InfatuatedWith(x, y) ::: x is infatuated with y.",
        "Woos(x, y) ::: x woos y.",
        "Kissed(x, y) ::: x kissed y.",
        "DeclaredLove(x, y) ::: x declared love for y.",
        "WonLottery(x, y) ::: x won y from a lottery ticket.",
        "Announces(x, y) ::: x announces y.",
        "JealousOf(x, y) ::: x is jealous of y.",
        "ClaimsCheated(x, y) ::: x claims to have been cheated out of y."
      ],
      "premises": [
        "Dentist(a_1) ∧ LimitedIntellect(a_1) ∧ FromPoorFamily(a_1) ∧ OpenedShop(a_1, b_0) ::: McTeague is a dentist of limited intellect from a poor miner's family, who has opened a dentist shop on Polk Street in San Francisco.",
        "BestFriend(a_2, a_1) ∧ Courting(a_2, a_3) ::: Marcus Schouler is McTeague's best friend and is courting Trina Sieppe.",
        "InfatuatedWith(a_1, a_3) ::: McTeague becomes infatuated with Trina while working on her teeth.",
        "Woos(a_1, a_3) ::: McTeague successfully woos Trina.",
        "Kissed(a_1, a_3) ∧ DeclaredLove(a_1, a_3) ::: McTeague and Trina kissed and declared their love for each other.",
        "WonLottery(a_3, $15,000) ::: Trina discovers that she has won $15,000 from a lottery ticket.",
        "Announces(a_3, \"McTeague and Trina are to marry\") ::: Trina's mother announces that McTeague and Trina are to marry.",
        "JealousOf(a_2, a_1) ∧ ClaimsCheated(a_2, $15,000) ::: Marcus becomes jealous of McTeague and claims that he has been cheated out of money that would have been rightfully his if he had married Trina."
      ],
      "conclusions": [
        "None",
        "JealousOf(marcus, mc_teague)",
        "ClaimsCheated(a_2, $15,000)"
      ]
    },
    {
      "id": 661,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 1,
      "paragraph": "The marriage takes place, and Mrs Sieppe, along with the rest of Trina's family, move away from San Francisco, leaving her alone with McTeague. Trina proves to be a parsimonious wife; she refuses to touch the principal of her $15,000, which she invests with her uncle. She insists that she and McTeague must live on the earnings from McTeague's dental practice, the small income from the $15,000 investment, and the bit of money she earns from carving small wooden figures of Noah's animals and his Ark for sale in her uncle's shop. Secretly, she accumulates penny-pinched savings in a locked trunk. Though the couple are happy, the friendship between Marcus and Mac deteriorates. More than once the two men come to grips; each time McTeague's immense physical strength prevails, and eventually he breaks Marcus' arm in a fight. When Marcus recovers, he goes south, intending to become a rancher; before he leaves, he visits the McTeagues, and he and Mac part apparently as friends.",
      "question_template": "While he is dying, Marcus [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Trina proves to be a parsimonious wife",
        "- She insists that she and McTeague must live on the earnings from McTeague's dental practice",
        "- The small income from the $15,000 investment",
        "- The bit of money she earns from carving small wooden figures of Noah's animals and his Ark for sale in her uncle's shop",
        "- Secretly, she accumulates penny-pinched savings in a locked trunk",
        "- The friendship between Marcus and Mac deteriorates",
        "- More than once the two men come to grips; each time McTeague's immense physical strength prevails",
        "- Eventually he breaks Marcus' arm in a fight"
      ],
      "predicates": [
        "Parsimonious(x) ::: x is a parsimonious person.",
        "RefusesToTouchPrincipal(x, y) ::: x refuses to touch the principal of y.",
        "Invests(x, y) ::: x invests with y.",
        "LivesOnEarnings(x) ::: x lives on the earnings from McTeague's dental practice.",
        "AccumulatesSavings(x) ::: x accumulates savings.",
        "DeterioratesFriendship(x, y) ::: The friendship between x and y deteriorates.",
        "PrevailsInFight(x, y) ::: x prevails in a fight against y.",
        "BreaksArm(x, y) ::: x breaks y's arm.",
        "PartAsFriends(x, y) ::: x and y part as friends."
      ],
      "premises": [
        "RefusesToTouchPrincipal(a_3, $15,000) ∧ Parsimonious(a_3) ∧ LivesOnEarnings(a_1) ::: Trina's refusal to touch the principal of her $15,000 leads to a parsimonious lifestyle for her and McTeague.",
        "PrevailsInFight(a_1, a_2) ∧ BreaksArm(a_1, a_2) ::: McTeague's immense physical strength leads to the deterioration of the friendship with Marcus.",
        "DeterioratesFriendship(a_2, a_1) ::: The friendship between Marcus and McTeague deteriorates.",
        "AccumulatesSavings(a_3) ::: Trina secretly accumulates penny-pinched savings in a locked trunk.",
        "PartAsFriends(a_2, a_1) ::: Marcus and McTeague part apparently as friends before Marcus leaves."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "662": [
    {
      "id": 662,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 0,
      "paragraph": " McTeague is a dentist of limited intellect from a poor miner's family, who has opened a dentist shop on Polk Street in San Francisco. (His first name is never revealed; other characters in the novel call him simply \"Mac\".) His best friend, Marcus Schouler, brings his cousin, Trina Sieppe, whom he is courting, to McTeague's parlor for dental work. McTeague becomes infatuated with her while working on her teeth, and Marcus graciously steps aside. McTeague successfully woos Trina. Shortly after McTeague and Trina have kissed and declared their love for each other, Trina discovers that she has won $15,000 from a lottery ticket. In the ensuing celebration Trina's mother, Mrs Sieppe, announces that McTeague and Trina are to marry. Marcus becomes jealous of McTeague, and claims that he has been cheated out of money that would have been rightfully his if he had married Trina.",
      "question_template": "McTeague catches McTeague [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Marcus becomes jealous of McTeague",
        "Claims that he has been cheated out of money that would have been rightfully his if he had married Trina"
      ],
      "predicates": [
        "Dentist(x) ::: x is a dentist.",
        "LimitedIntellect(x) ::: x has limited intellect.",
        "FromPoorFamily(x) ::: x is from a poor miner's family.",
        "OpenedShop(x, y) ::: x opened a shop at location y.",
        "BestFriend(x, y) ::: x is the best friend of y.",
        "Courting(x, y) ::: x is courting y.",
        "InfatuatedWith(x, y) ::: x is infatuated with y.",
        "Woos(x, y) ::: x woos y.",
        "Kissed(x, y) ::: x kissed y.",
        "DeclaredLove(x, y) ::: x declared love for y.",
        "WonLottery(x, y) ::: x won y from a lottery ticket.",
        "Announces(x, y) ::: x announces y.",
        "JealousOf(x, y) ::: x is jealous of y.",
        "ClaimsCheated(x, y) ::: x claims to have been cheated out of y."
      ],
      "premises": [
        "Dentist(a_1) ∧ LimitedIntellect(a_1) ∧ FromPoorFamily(a_1) ∧ OpenedShop(a_1, b_0) ::: McTeague is a dentist of limited intellect from a poor miner's family, who has opened a dentist shop on Polk Street in San Francisco.",
        "BestFriend(a_2, a_1) ∧ Courting(a_2, a_3) ::: Marcus Schouler is McTeague's best friend and is courting Trina Sieppe.",
        "InfatuatedWith(a_1, a_3) ::: McTeague becomes infatuated with Trina while working on her teeth.",
        "Woos(a_1, a_3) ::: McTeague successfully woos Trina.",
        "Kissed(a_1, a_3) ∧ DeclaredLove(a_1, a_3) ::: McTeague and Trina kissed and declared their love for each other.",
        "WonLottery(a_3, $15,000) ::: Trina discovers that she has won $15,000 from a lottery ticket.",
        "Announces(a_3, \"McTeague and Trina are to marry\") ::: Trina's mother announces that McTeague and Trina are to marry.",
        "JealousOf(a_2, a_1) ∧ ClaimsCheated(a_2, $15,000) ::: Marcus becomes jealous of McTeague and claims that he has been cheated out of money that would have been rightfully his if he had married Trina."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 662,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 1,
      "paragraph": "The marriage takes place, and Mrs Sieppe, along with the rest of Trina's family, move away from San Francisco, leaving her alone with McTeague. Trina proves to be a parsimonious wife; she refuses to touch the principal of her $15,000, which she invests with her uncle. She insists that she and McTeague must live on the earnings from McTeague's dental practice, the small income from the $15,000 investment, and the bit of money she earns from carving small wooden figures of Noah's animals and his Ark for sale in her uncle's shop. Secretly, she accumulates penny-pinched savings in a locked trunk. Though the couple are happy, the friendship between Marcus and Mac deteriorates. More than once the two men come to grips; each time McTeague's immense physical strength prevails, and eventually he breaks Marcus' arm in a fight. When Marcus recovers, he goes south, intending to become a rancher; before he leaves, he visits the McTeagues, and he and Mac part apparently as friends.",
      "question_template": "McTeague catches McTeague [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Intending to become a rancher"
      ],
      "predicates": [
        "Parsimonious(x) ::: x is a parsimonious person.",
        "RefusesToTouchPrincipal(x, y) ::: x refuses to touch the principal of y.",
        "Invests(x, y) ::: x invests with y.",
        "LivesOnEarnings(x) ::: x lives on the earnings from McTeague's dental practice.",
        "AccumulatesSavings(x) ::: x accumulates savings.",
        "DeterioratesFriendship(x, y) ::: The friendship between x and y deteriorates.",
        "PrevailsInFight(x, y) ::: x prevails in a fight against y.",
        "BreaksArm(x, y) ::: x breaks y's arm.",
        "PartAsFriends(x, y) ::: x and y part as friends."
      ],
      "premises": [
        "RefusesToTouchPrincipal(a_3, $15,000) ∧ Parsimonious(a_3) ∧ LivesOnEarnings(a_1) ::: Trina's refusal to touch the principal of her $15,000 leads to a parsimonious lifestyle for her and McTeague.",
        "PrevailsInFight(a_1, a_2) ∧ BreaksArm(a_1, a_2) ::: McTeague's immense physical strength leads to the deterioration of the friendship with Marcus.",
        "DeterioratesFriendship(a_2, a_1) ::: The friendship between Marcus and McTeague deteriorates.",
        "AccumulatesSavings(a_3) ::: Trina secretly accumulates penny-pinched savings in a locked trunk.",
        "PartAsFriends(a_2, a_1) ::: Marcus and McTeague part apparently as friends before Marcus leaves."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 662,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 2,
      "paragraph": "Catastrophe strikes when McTeague is debarred from practising dentistry by the authorities; it becomes clear that before leaving, Marcus has taken revenge on Mac by informing city hall that he has no license or degree. McTeague loses his practice and the couple are forced to move into successively poorer quarters as Trina becomes more and more miserly. Their life together deteriorates until McTeague takes all Trina's domestic savings (amounting to $400 or roughly $10,000 in 2010 values) and abandons her. Meanwhile, Trina falls completely under the spell of money and withdraws the principal of her prior winnings in gold from her uncle's firm so she can admire and handle the coins in her room, at one point spreading them over her bed and rolling around in them.",
      "question_template": "McTeague catches McTeague [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Marcus has taken revenge on Mac by informing city hall that he has no license or degree."
      ],
      "predicates": [
        "Debarred(a_1) ::: McTeague is debarred from practicing dentistry.",
        "Informed(a_2, cityHall) ::: Marcus informed city hall about McTeague's lack of license or degree.",
        "LosesPractice(a_1) ::: McTeague loses his dental practice.",
        "MovesIntoPoorQuarters(a_1, a_3) ::: McTeague and Trina move into successively poorer quarters.",
        "Miserly(a_3) ::: Trina becomes more miserly.",
        "Deteriorates(a_1, a_3) ::: The life of McTeague and Trina deteriorates.",
        "TakesSavings(a_1, a_3) ::: McTeague takes Trina's domestic savings.",
        "Abandons(a_1, a_3) ::: McTeague abandons Trina.",
        "FallsUnderSpell(a_3, c) ::: Trina falls completely under the spell of money.",
        "WithdrawsWinnings(a_3) ::: Trina withdraws the principal of her prior winnings in gold.",
        "HandlesCoins(a_3) ::: Trina admires and handles the coins in her room.",
        "SpreadsCoins(a_3) ::: Trina spreads the coins over her bed."
      ],
      "premises": [
        "Debarred(a_1) ∧ Informed(a_2, cityHall) ∧ LosesPractice(a_1) ∧ MovesIntoPoorQuarters(a_1, a_3) ∧ Miserly(a_3) ∧ Deteriorates(a_1, a_3) ::: McTeague is debarred from practicing dentistry, Marcus informs city hall about McTeague's lack of license or degree, McTeague loses his practice, and they move into poorer quarters as Trina becomes more miserly, leading to the deterioration of their life together.",
        "TakesSavings(a_1, a_3) ∧ Abandons(a_1, a_3) ::: McTeague takes Trina's domestic savings and abandons her.",
        "FallsUnderSpell(a_3, c) ∧ WithdrawsWinnings(a_3) ∧ HandlesCoins(a_3) ∧ SpreadsCoins(a_3) ::: Trina falls under the spell of money, withdraws her winnings in gold, admires and handles the coins, and spreads them over her bed."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 662,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 3,
      "paragraph": "When McTeague returns, destitute once more, she refuses to give him money even for food. Aggravated and made violent by whisky, McTeague beats her to death. He takes the entire hoard of gold and heads out to a mining community that he had left years before. Sensing pursuit, he makes his way south towards Mexico; meanwhile, Marcus hears of the murder and joins the hunt for McTeague, finally catching him in Death Valley. In the middle of the desert Marcus and McTeague fight over McTeague's remaining water and, when that is lost and they are already doomed, over Trina's $15,000. McTeague kills Marcus, but as he dies, Marcus handcuffs himself to McTeague. The final, dramatic image of the novel is one of McTeague stranded, alone and helpless. He is left with only the company of Marcus's corpse, to whom he is handcuffed, in the desolate, arid waste of Death Valley.",
      "question_template": "McTeague catches McTeague [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Marcus hears of the murder and joins the hunt for McTeague",
        "Finally catching him in Death Valley"
      ],
      "predicates": [
        "Destitute(a_1) ::: McTeague is destitute.",
        "Refuses(a_3, a_1, e) ::: Trina refuses to give McTeague money for food.",
        "Aggravated(a_1) ::: McTeague is aggravated by whisky.",
        "Violent(a_1) ::: McTeague becomes violent due to whisky.",
        "Beats(a_1, a_3) ::: McTeague beats Trina.",
        "Dead(a_3) ::: Trina is dead.",
        "Takes(a_1, c) ::: McTeague takes the entire hoard of gold.",
        "HeadsOut(a_1, b_2) ::: McTeague heads out to a mining community.",
        "SensesPursuit(a_1) ::: McTeague senses pursuit.",
        "MakesWay(a_1, b_3) ::: McTeague makes his way towards Mexico.",
        "Hears(a_2, a_3) ::: Marcus hears of Trina's murder.",
        "JoinsHunt(a_2, a_1) ::: Marcus joins the hunt for McTeague.",
        "Catches(a_2, a_1) ::: Marcus catches McTeague in Death Valley.",
        "Fights(a_1, a_2) ::: McTeague fights Marcus.",
        "OverWater(a_1, a_2) ::: They fight over McTeague's remaining water.",
        "OverGold(a_1, a_2) ::: They fight over Trina's $15,000.",
        "Kills(a_1, a_2) ::: McTeague kills Marcus.",
        "Handcuffs(a_2, a_1) ::: Marcus handcuffs himself to McTeague.",
        "Stranded(a_1) ::: McTeague is stranded.",
        "Alone(a_1) ::: McTeague is alone.",
        "Helpless(a_1) ::: McTeague is helpless.",
        "WithCorpse(a_1, a_2) ::: McTeague is left with Marcus's corpse.",
        "InDesolateWaste(a_1, b_1) ::: McTeague is in the desolate, arid waste of Death Valley."
      ],
      "premises": [
        "Destitute(a_1) ∧ Refuses(a_3, a_1, e) ∧ Aggravated(a_1) ∧ Violent(a_1) ∧ Beats(a_1, a_3) ∧ Dead(a_3) ::: McTeague is destitute, Trina refuses to give him money for food, McTeague is aggravated and violent due to whisky, and he beats Trina to death.",
        "Takes(a_1, c) ∧ HeadsOut(a_1, b_2) ::: McTeague takes the entire hoard of gold and heads out to a mining community.",
        "SensesPursuit(a_1) ∧ MakesWay(a_1, b_3) ::: McTeague senses pursuit and makes his way towards Mexico.",
        "Hears(a_2, a_3) ∧ JoinsHunt(a_2, a_1) ∧ Catches(a_2, a_1) ::: Marcus hears of the murder, joins the hunt for McTeague, and catches him in Death Valley.",
        "Fights(a_1, a_2) ∧ OverWater(a_1, a_2) ∧ OverGold(a_1, a_2) ::: McTeague and Marcus fight over McTeague's remaining water and Trina's $15,000.",
        "Kills(a_1, a_2) ∧ Handcuffs(a_2, a_1) ::: McTeague kills Marcus, but Marcus handcuffs himself to McTeague.",
        "Stranded(a_1) ∧ Alone(a_1) ∧ Helpless(a_1) ∧ WithCorpse(a_1, a_2) ∧ InDesolateWaste(a_1, b_1) ::: McTeague is stranded, alone, and helpless with Marcus's corpse in the desolate, arid waste of Death Valley.",
        "Conclusion:",
        "McTeague's actions lead to his isolation and helplessness in Death Valley."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "663": [
    {
      "id": 663,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 1,
      "paragraph": "The marriage takes place, and Mrs Sieppe, along with the rest of Trina's family, move away from San Francisco, leaving her alone with McTeague. Trina proves to be a parsimonious wife; she refuses to touch the principal of her $15,000, which she invests with her uncle. She insists that she and McTeague must live on the earnings from McTeague's dental practice, the small income from the $15,000 investment, and the bit of money she earns from carving small wooden figures of Noah's animals and his Ark for sale in her uncle's shop. Secretly, she accumulates penny-pinched savings in a locked trunk. Though the couple are happy, the friendship between Marcus and Mac deteriorates. More than once the two men come to grips; each time McTeague's immense physical strength prevails, and eventually he breaks Marcus' arm in a fight. When Marcus recovers, he goes south, intending to become a rancher; before he leaves, he visits the McTeagues, and he and Mac part apparently as friends.",
      "question_template": "Trina keeps her penny-pinched savings [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Trina proves to be a parsimonious wife",
        "- She insists that she and McTeague must live on the earnings from McTeague's dental practice",
        "- The friendship between Marcus and Mac deteriorates",
        "- Each time McTeague's immense physical strength prevails",
        "- He breaks Marcus' arm in a fight"
      ],
      "predicates": [
        "Parsimonious(x) ::: x is a parsimonious person.",
        "RefusesToTouchPrincipal(x, y) ::: x refuses to touch the principal of y.",
        "Invests(x, y) ::: x invests with y.",
        "LivesOnEarnings(x) ::: x lives on the earnings from McTeague's dental practice.",
        "AccumulatesSavings(x) ::: x accumulates savings.",
        "DeterioratesFriendship(x, y) ::: The friendship between x and y deteriorates.",
        "PrevailsInFight(x, y) ::: x prevails in a fight against y.",
        "BreaksArm(x, y) ::: x breaks y's arm.",
        "PartAsFriends(x, y) ::: x and y part as friends."
      ],
      "premises": [
        "RefusesToTouchPrincipal(a_3, $15,000) ∧ Parsimonious(a_3) ∧ LivesOnEarnings(a_1) ::: Trina's refusal to touch the principal of her $15,000 leads to a parsimonious lifestyle for her and McTeague.",
        "PrevailsInFight(a_1, a_2) ∧ BreaksArm(a_1, a_2) ::: McTeague's immense physical strength leads to the deterioration of the friendship with Marcus.",
        "DeterioratesFriendship(a_2, a_1) ::: The friendship between Marcus and McTeague deteriorates.",
        "AccumulatesSavings(a_3) ::: Trina secretly accumulates penny-pinched savings in a locked trunk.",
        "PartAsFriends(a_2, a_1) ::: Marcus and McTeague part apparently as friends before Marcus leaves."
      ],
      "conclusions": [
        "AccumulatesSavings(a_3) ∧ Parsimonious(a_3)",
        "AccumulatesSavings(a_3) ∧ LivesOnEarnings(a_1)",
        "AccumulatesSavings(trina) ∧ DeterioratesFriendship(marcus, mc_teague)",
        "None",
        "None"
      ]
    },
    {
      "id": 663,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 2,
      "paragraph": "Catastrophe strikes when McTeague is debarred from practising dentistry by the authorities; it becomes clear that before leaving, Marcus has taken revenge on Mac by informing city hall that he has no license or degree. McTeague loses his practice and the couple are forced to move into successively poorer quarters as Trina becomes more and more miserly. Their life together deteriorates until McTeague takes all Trina's domestic savings (amounting to $400 or roughly $10,000 in 2010 values) and abandons her. Meanwhile, Trina falls completely under the spell of money and withdraws the principal of her prior winnings in gold from her uncle's firm so she can admire and handle the coins in her room, at one point spreading them over her bed and rolling around in them.",
      "question_template": "Trina keeps her penny-pinched savings [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- McTeague is debarred from practising dentistry by the authorities",
        "- Marcus has taken revenge on Mac by informing city hall that he has no license or degree",
        "- McTeague loses his practice",
        "- The couple are forced to move into successively poorer quarters",
        "- Trina becomes more and more miserly",
        "- McTeague takes all Trina's domestic savings and abandons her",
        "- Trina falls completely under the spell of money"
      ],
      "predicates": [
        "Debarred(a_1) ::: McTeague is debarred from practicing dentistry.",
        "Informed(a_2, cityHall) ::: Marcus informed city hall about McTeague's lack of license or degree.",
        "LosesPractice(a_1) ::: McTeague loses his dental practice.",
        "MovesIntoPoorQuarters(a_1, a_3) ::: McTeague and Trina move into successively poorer quarters.",
        "Miserly(a_3) ::: Trina becomes more miserly.",
        "Deteriorates(a_1, a_3) ::: The life of McTeague and Trina deteriorates.",
        "TakesSavings(a_1, a_3) ::: McTeague takes Trina's domestic savings.",
        "Abandons(a_1, a_3) ::: McTeague abandons Trina.",
        "FallsUnderSpell(a_3, c) ::: Trina falls completely under the spell of money.",
        "WithdrawsWinnings(a_3) ::: Trina withdraws the principal of her prior winnings in gold.",
        "HandlesCoins(a_3) ::: Trina admires and handles the coins in her room.",
        "SpreadsCoins(a_3) ::: Trina spreads the coins over her bed."
      ],
      "premises": [
        "Debarred(a_1) ∧ Informed(a_2, cityHall) ∧ LosesPractice(a_1) ∧ MovesIntoPoorQuarters(a_1, a_3) ∧ Miserly(a_3) ∧ Deteriorates(a_1, a_3) ::: McTeague is debarred from practicing dentistry, Marcus informs city hall about McTeague's lack of license or degree, McTeague loses his practice, and they move into poorer quarters as Trina becomes more miserly, leading to the deterioration of their life together.",
        "TakesSavings(a_1, a_3) ∧ Abandons(a_1, a_3) ::: McTeague takes Trina's domestic savings and abandons her.",
        "FallsUnderSpell(a_3, c) ∧ WithdrawsWinnings(a_3) ∧ HandlesCoins(a_3) ∧ SpreadsCoins(a_3) ::: Trina falls under the spell of money, withdraws her winnings in gold, admires and handles the coins, and spreads them over her bed."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "TakesSavings(a_1, a_3) ∧ Abandons(a_1, a_3)",
        "FallsUnderSpell(a_3, c) ∧ TakesSavings(a_1, a_3)"
      ]
    }
  ],
  "664": [
    {
      "id": 664,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 1,
      "paragraph": "The marriage takes place, and Mrs Sieppe, along with the rest of Trina's family, move away from San Francisco, leaving her alone with McTeague. Trina proves to be a parsimonious wife; she refuses to touch the principal of her $15,000, which she invests with her uncle. She insists that she and McTeague must live on the earnings from McTeague's dental practice, the small income from the $15,000 investment, and the bit of money she earns from carving small wooden figures of Noah's animals and his Ark for sale in her uncle's shop. Secretly, she accumulates penny-pinched savings in a locked trunk. Though the couple are happy, the friendship between Marcus and Mac deteriorates. More than once the two men come to grips; each time McTeague's immense physical strength prevails, and eventually he breaks Marcus' arm in a fight. When Marcus recovers, he goes south, intending to become a rancher; before he leaves, he visits the McTeagues, and he and Mac part apparently as friends.",
      "question_template": "McTeague carves [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- She invests with her uncle.",
        "- She insists that she and McTeague must live on the earnings from McTeague's dental practice, the small income from the $15,000 investment."
      ],
      "predicates": [
        "Parsimonious(x) ::: x is a parsimonious person.",
        "RefusesToTouchPrincipal(x, y) ::: x refuses to touch the principal of y.",
        "Invests(x, y) ::: x invests with y.",
        "LivesOnEarnings(x) ::: x lives on the earnings from McTeague's dental practice.",
        "AccumulatesSavings(x) ::: x accumulates savings.",
        "DeterioratesFriendship(x, y) ::: The friendship between x and y deteriorates.",
        "PrevailsInFight(x, y) ::: x prevails in a fight against y.",
        "BreaksArm(x, y) ::: x breaks y's arm.",
        "PartAsFriends(x, y) ::: x and y part as friends."
      ],
      "premises": [
        "RefusesToTouchPrincipal(a_3, $15,000) ∧ Parsimonious(a_3) ∧ LivesOnEarnings(a_1) ::: Trina's refusal to touch the principal of her $15,000 leads to a parsimonious lifestyle for her and McTeague.",
        "PrevailsInFight(a_1, a_2) ∧ BreaksArm(a_1, a_2) ::: McTeague's immense physical strength leads to the deterioration of the friendship with Marcus.",
        "DeterioratesFriendship(a_2, a_1) ::: The friendship between Marcus and McTeague deteriorates.",
        "AccumulatesSavings(a_3) ::: Trina secretly accumulates penny-pinched savings in a locked trunk.",
        "PartAsFriends(a_2, a_1) ::: Marcus and McTeague part apparently as friends before Marcus leaves."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 664,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 2,
      "paragraph": "Catastrophe strikes when McTeague is debarred from practising dentistry by the authorities; it becomes clear that before leaving, Marcus has taken revenge on Mac by informing city hall that he has no license or degree. McTeague loses his practice and the couple are forced to move into successively poorer quarters as Trina becomes more and more miserly. Their life together deteriorates until McTeague takes all Trina's domestic savings (amounting to $400 or roughly $10,000 in 2010 values) and abandons her. Meanwhile, Trina falls completely under the spell of money and withdraws the principal of her prior winnings in gold from her uncle's firm so she can admire and handle the coins in her room, at one point spreading them over her bed and rolling around in them.",
      "question_template": "McTeague carves [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Trina falls completely under the spell of money and withdraws the principal of her prior winnings in gold from her uncle's firm so she can admire and handle the coins in her room"
      ],
      "predicates": [
        "Debarred(a_1) ::: McTeague is debarred from practicing dentistry.",
        "Informed(a_2, cityHall) ::: Marcus informed city hall about McTeague's lack of license or degree.",
        "LosesPractice(a_1) ::: McTeague loses his dental practice.",
        "MovesIntoPoorQuarters(a_1, a_3) ::: McTeague and Trina move into successively poorer quarters.",
        "Miserly(a_3) ::: Trina becomes more miserly.",
        "Deteriorates(a_1, a_3) ::: The life of McTeague and Trina deteriorates.",
        "TakesSavings(a_1, a_3) ::: McTeague takes Trina's domestic savings.",
        "Abandons(a_1, a_3) ::: McTeague abandons Trina.",
        "FallsUnderSpell(a_3, c) ::: Trina falls completely under the spell of money.",
        "WithdrawsWinnings(a_3) ::: Trina withdraws the principal of her prior winnings in gold.",
        "HandlesCoins(a_3) ::: Trina admires and handles the coins in her room.",
        "SpreadsCoins(a_3) ::: Trina spreads the coins over her bed."
      ],
      "premises": [
        "Debarred(a_1) ∧ Informed(a_2, cityHall) ∧ LosesPractice(a_1) ∧ MovesIntoPoorQuarters(a_1, a_3) ∧ Miserly(a_3) ∧ Deteriorates(a_1, a_3) ::: McTeague is debarred from practicing dentistry, Marcus informs city hall about McTeague's lack of license or degree, McTeague loses his practice, and they move into poorer quarters as Trina becomes more miserly, leading to the deterioration of their life together.",
        "TakesSavings(a_1, a_3) ∧ Abandons(a_1, a_3) ::: McTeague takes Trina's domestic savings and abandons her.",
        "FallsUnderSpell(a_3, c) ∧ WithdrawsWinnings(a_3) ∧ HandlesCoins(a_3) ∧ SpreadsCoins(a_3) ::: Trina falls under the spell of money, withdraws her winnings in gold, admires and handles the coins, and spreads them over her bed."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "665": [
    {
      "id": 665,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 2,
      "paragraph": "Catastrophe strikes when McTeague is debarred from practising dentistry by the authorities; it becomes clear that before leaving, Marcus has taken revenge on Mac by informing city hall that he has no license or degree. McTeague loses his practice and the couple are forced to move into successively poorer quarters as Trina becomes more and more miserly. Their life together deteriorates until McTeague takes all Trina's domestic savings (amounting to $400 or roughly $10,000 in 2010 values) and abandons her. Meanwhile, Trina falls completely under the spell of money and withdraws the principal of her prior winnings in gold from her uncle's firm so she can admire and handle the coins in her room, at one point spreading them over her bed and rolling around in them.",
      "question_template": "Marcus intends to become [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Falls completely under the spell of money",
        "- Withdraws the principal of her prior winnings in gold from her uncle's firm",
        "- Admires and handles the coins in her room",
        "- Spreads them over her bed and rolls around in them"
      ],
      "predicates": [
        "Debarred(a_1) ::: McTeague is debarred from practicing dentistry.",
        "Informed(a_2, cityHall) ::: Marcus informed city hall about McTeague's lack of license or degree.",
        "LosesPractice(a_1) ::: McTeague loses his dental practice.",
        "MovesIntoPoorQuarters(a_1, a_3) ::: McTeague and Trina move into successively poorer quarters.",
        "Miserly(a_3) ::: Trina becomes more miserly.",
        "Deteriorates(a_1, a_3) ::: The life of McTeague and Trina deteriorates.",
        "TakesSavings(a_1, a_3) ::: McTeague takes Trina's domestic savings.",
        "Abandons(a_1, a_3) ::: McTeague abandons Trina.",
        "FallsUnderSpell(a_3, c) ::: Trina falls completely under the spell of money.",
        "WithdrawsWinnings(a_3) ::: Trina withdraws the principal of her prior winnings in gold.",
        "HandlesCoins(a_3) ::: Trina admires and handles the coins in her room.",
        "SpreadsCoins(a_3) ::: Trina spreads the coins over her bed."
      ],
      "premises": [
        "Debarred(a_1) ∧ Informed(a_2, cityHall) ∧ LosesPractice(a_1) ∧ MovesIntoPoorQuarters(a_1, a_3) ∧ Miserly(a_3) ∧ Deteriorates(a_1, a_3) ::: McTeague is debarred from practicing dentistry, Marcus informs city hall about McTeague's lack of license or degree, McTeague loses his practice, and they move into poorer quarters as Trina becomes more miserly, leading to the deterioration of their life together.",
        "TakesSavings(a_1, a_3) ∧ Abandons(a_1, a_3) ::: McTeague takes Trina's domestic savings and abandons her.",
        "FallsUnderSpell(a_3, c) ∧ WithdrawsWinnings(a_3) ∧ HandlesCoins(a_3) ∧ SpreadsCoins(a_3) ::: Trina falls under the spell of money, withdraws her winnings in gold, admires and handles the coins, and spreads them over her bed."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "666": [
    {
      "id": 666,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 1,
      "paragraph": "The marriage takes place, and Mrs Sieppe, along with the rest of Trina's family, move away from San Francisco, leaving her alone with McTeague. Trina proves to be a parsimonious wife; she refuses to touch the principal of her $15,000, which she invests with her uncle. She insists that she and McTeague must live on the earnings from McTeague's dental practice, the small income from the $15,000 investment, and the bit of money she earns from carving small wooden figures of Noah's animals and his Ark for sale in her uncle's shop. Secretly, she accumulates penny-pinched savings in a locked trunk. Though the couple are happy, the friendship between Marcus and Mac deteriorates. More than once the two men come to grips; each time McTeague's immense physical strength prevails, and eventually he breaks Marcus' arm in a fight. When Marcus recovers, he goes south, intending to become a rancher; before he leaves, he visits the McTeagues, and he and Mac part apparently as friends.",
      "question_template": "McTeague operates a [[CANDIDATE_ANSWER]] in San Francisco.",
      "candidate_answers": [
        "- The friendship between Marcus and Mac deteriorates",
        "- Each time McTeague's immense physical strength prevails",
        "- He breaks Marcus' arm in a fight",
        "- Before he leaves, he visits the McTeagues, and he and Mac part apparently as friends"
      ],
      "predicates": [
        "Parsimonious(x) ::: x is a parsimonious person.",
        "RefusesToTouchPrincipal(x, y) ::: x refuses to touch the principal of y.",
        "Invests(x, y) ::: x invests with y.",
        "LivesOnEarnings(x) ::: x lives on the earnings from McTeague's dental practice.",
        "AccumulatesSavings(x) ::: x accumulates savings.",
        "DeterioratesFriendship(x, y) ::: The friendship between x and y deteriorates.",
        "PrevailsInFight(x, y) ::: x prevails in a fight against y.",
        "BreaksArm(x, y) ::: x breaks y's arm.",
        "PartAsFriends(x, y) ::: x and y part as friends."
      ],
      "premises": [
        "RefusesToTouchPrincipal(a_3, $15,000) ∧ Parsimonious(a_3) ∧ LivesOnEarnings(a_1) ::: Trina's refusal to touch the principal of her $15,000 leads to a parsimonious lifestyle for her and McTeague.",
        "PrevailsInFight(a_1, a_2) ∧ BreaksArm(a_1, a_2) ::: McTeague's immense physical strength leads to the deterioration of the friendship with Marcus.",
        "DeterioratesFriendship(a_2, a_1) ::: The friendship between Marcus and McTeague deteriorates.",
        "AccumulatesSavings(a_3) ::: Trina secretly accumulates penny-pinched savings in a locked trunk.",
        "PartAsFriends(a_2, a_1) ::: Marcus and McTeague part apparently as friends before Marcus leaves."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 666,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 2,
      "paragraph": "Catastrophe strikes when McTeague is debarred from practising dentistry by the authorities; it becomes clear that before leaving, Marcus has taken revenge on Mac by informing city hall that he has no license or degree. McTeague loses his practice and the couple are forced to move into successively poorer quarters as Trina becomes more and more miserly. Their life together deteriorates until McTeague takes all Trina's domestic savings (amounting to $400 or roughly $10,000 in 2010 values) and abandons her. Meanwhile, Trina falls completely under the spell of money and withdraws the principal of her prior winnings in gold from her uncle's firm so she can admire and handle the coins in her room, at one point spreading them over her bed and rolling around in them.",
      "question_template": "McTeague operates a [[CANDIDATE_ANSWER]] in San Francisco.",
      "candidate_answers": [
        "Marcus has taken revenge on Mac by informing city hall that he has no license or degree."
      ],
      "predicates": [
        "Debarred(a_1) ::: McTeague is debarred from practicing dentistry.",
        "Informed(a_2, cityHall) ::: Marcus informed city hall about McTeague's lack of license or degree.",
        "LosesPractice(a_1) ::: McTeague loses his dental practice.",
        "MovesIntoPoorQuarters(a_1, a_3) ::: McTeague and Trina move into successively poorer quarters.",
        "Miserly(a_3) ::: Trina becomes more miserly.",
        "Deteriorates(a_1, a_3) ::: The life of McTeague and Trina deteriorates.",
        "TakesSavings(a_1, a_3) ::: McTeague takes Trina's domestic savings.",
        "Abandons(a_1, a_3) ::: McTeague abandons Trina.",
        "FallsUnderSpell(a_3, c) ::: Trina falls completely under the spell of money.",
        "WithdrawsWinnings(a_3) ::: Trina withdraws the principal of her prior winnings in gold.",
        "HandlesCoins(a_3) ::: Trina admires and handles the coins in her room.",
        "SpreadsCoins(a_3) ::: Trina spreads the coins over her bed."
      ],
      "premises": [
        "Debarred(a_1) ∧ Informed(a_2, cityHall) ∧ LosesPractice(a_1) ∧ MovesIntoPoorQuarters(a_1, a_3) ∧ Miserly(a_3) ∧ Deteriorates(a_1, a_3) ::: McTeague is debarred from practicing dentistry, Marcus informs city hall about McTeague's lack of license or degree, McTeague loses his practice, and they move into poorer quarters as Trina becomes more miserly, leading to the deterioration of their life together.",
        "TakesSavings(a_1, a_3) ∧ Abandons(a_1, a_3) ::: McTeague takes Trina's domestic savings and abandons her.",
        "FallsUnderSpell(a_3, c) ∧ WithdrawsWinnings(a_3) ∧ HandlesCoins(a_3) ∧ SpreadsCoins(a_3) ::: Trina falls under the spell of money, withdraws her winnings in gold, admires and handles the coins, and spreads them over her bed."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "667": [
    {
      "id": 667,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 0,
      "paragraph": " McTeague is a dentist of limited intellect from a poor miner's family, who has opened a dentist shop on Polk Street in San Francisco. (His first name is never revealed; other characters in the novel call him simply \"Mac\".) His best friend, Marcus Schouler, brings his cousin, Trina Sieppe, whom he is courting, to McTeague's parlor for dental work. McTeague becomes infatuated with her while working on her teeth, and Marcus graciously steps aside. McTeague successfully woos Trina. Shortly after McTeague and Trina have kissed and declared their love for each other, Trina discovers that she has won $15,000 from a lottery ticket. In the ensuing celebration Trina's mother, Mrs Sieppe, announces that McTeague and Trina are to marry. Marcus becomes jealous of McTeague, and claims that he has been cheated out of money that would have been rightfully his if he had married Trina.",
      "question_template": "[[CANDIDATE_ANSWER]] introduces McTeague to his love interest, Trina Sieppe.",
      "candidate_answers": [
        "Marcus becomes jealous of McTeague",
        "Claims that he has been cheated out of money that would have been rightfully his if he had married Trina"
      ],
      "predicates": [
        "Dentist(x) ::: x is a dentist.",
        "LimitedIntellect(x) ::: x has limited intellect.",
        "FromPoorFamily(x) ::: x is from a poor miner's family.",
        "OpenedShop(x, y) ::: x opened a shop at location y.",
        "BestFriend(x, y) ::: x is the best friend of y.",
        "Courting(x, y) ::: x is courting y.",
        "InfatuatedWith(x, y) ::: x is infatuated with y.",
        "Woos(x, y) ::: x woos y.",
        "Kissed(x, y) ::: x kissed y.",
        "DeclaredLove(x, y) ::: x declared love for y.",
        "WonLottery(x, y) ::: x won y from a lottery ticket.",
        "Announces(x, y) ::: x announces y.",
        "JealousOf(x, y) ::: x is jealous of y.",
        "ClaimsCheated(x, y) ::: x claims to have been cheated out of y."
      ],
      "premises": [
        "Dentist(a_1) ∧ LimitedIntellect(a_1) ∧ FromPoorFamily(a_1) ∧ OpenedShop(a_1, b_0) ::: McTeague is a dentist of limited intellect from a poor miner's family, who has opened a dentist shop on Polk Street in San Francisco.",
        "BestFriend(a_2, a_1) ∧ Courting(a_2, a_3) ::: Marcus Schouler is McTeague's best friend and is courting Trina Sieppe.",
        "InfatuatedWith(a_1, a_3) ::: McTeague becomes infatuated with Trina while working on her teeth.",
        "Woos(a_1, a_3) ::: McTeague successfully woos Trina.",
        "Kissed(a_1, a_3) ∧ DeclaredLove(a_1, a_3) ::: McTeague and Trina kissed and declared their love for each other.",
        "WonLottery(a_3, $15,000) ::: Trina discovers that she has won $15,000 from a lottery ticket.",
        "Announces(a_3, \"McTeague and Trina are to marry\") ::: Trina's mother announces that McTeague and Trina are to marry.",
        "JealousOf(a_2, a_1) ∧ ClaimsCheated(a_2, $15,000) ::: Marcus becomes jealous of McTeague and claims that he has been cheated out of money that would have been rightfully his if he had married Trina."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 667,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 1,
      "paragraph": "The marriage takes place, and Mrs Sieppe, along with the rest of Trina's family, move away from San Francisco, leaving her alone with McTeague. Trina proves to be a parsimonious wife; she refuses to touch the principal of her $15,000, which she invests with her uncle. She insists that she and McTeague must live on the earnings from McTeague's dental practice, the small income from the $15,000 investment, and the bit of money she earns from carving small wooden figures of Noah's animals and his Ark for sale in her uncle's shop. Secretly, she accumulates penny-pinched savings in a locked trunk. Though the couple are happy, the friendship between Marcus and Mac deteriorates. More than once the two men come to grips; each time McTeague's immense physical strength prevails, and eventually he breaks Marcus' arm in a fight. When Marcus recovers, he goes south, intending to become a rancher; before he leaves, he visits the McTeagues, and he and Mac part apparently as friends.",
      "question_template": "[[CANDIDATE_ANSWER]] introduces McTeague to his love interest, Trina Sieppe.",
      "candidate_answers": [
        "Marcus and Mac part apparently as friends",
        "More than once the two men come to grips; each time McTeague's immense physical strength prevails, and eventually he breaks Marcus' arm in a fight"
      ],
      "predicates": [
        "Parsimonious(x) ::: x is a parsimonious person.",
        "RefusesToTouchPrincipal(x, y) ::: x refuses to touch the principal of y.",
        "Invests(x, y) ::: x invests with y.",
        "LivesOnEarnings(x) ::: x lives on the earnings from McTeague's dental practice.",
        "AccumulatesSavings(x) ::: x accumulates savings.",
        "DeterioratesFriendship(x, y) ::: The friendship between x and y deteriorates.",
        "PrevailsInFight(x, y) ::: x prevails in a fight against y.",
        "BreaksArm(x, y) ::: x breaks y's arm.",
        "PartAsFriends(x, y) ::: x and y part as friends."
      ],
      "premises": [
        "RefusesToTouchPrincipal(a_3, $15,000) ∧ Parsimonious(a_3) ∧ LivesOnEarnings(a_1) ::: Trina's refusal to touch the principal of her $15,000 leads to a parsimonious lifestyle for her and McTeague.",
        "PrevailsInFight(a_1, a_2) ∧ BreaksArm(a_1, a_2) ::: McTeague's immense physical strength leads to the deterioration of the friendship with Marcus.",
        "DeterioratesFriendship(a_2, a_1) ::: The friendship between Marcus and McTeague deteriorates.",
        "AccumulatesSavings(a_3) ::: Trina secretly accumulates penny-pinched savings in a locked trunk.",
        "PartAsFriends(a_2, a_1) ::: Marcus and McTeague part apparently as friends before Marcus leaves."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 667,
      "context_id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 2,
      "paragraph": "Catastrophe strikes when McTeague is debarred from practising dentistry by the authorities; it becomes clear that before leaving, Marcus has taken revenge on Mac by informing city hall that he has no license or degree. McTeague loses his practice and the couple are forced to move into successively poorer quarters as Trina becomes more and more miserly. Their life together deteriorates until McTeague takes all Trina's domestic savings (amounting to $400 or roughly $10,000 in 2010 values) and abandons her. Meanwhile, Trina falls completely under the spell of money and withdraws the principal of her prior winnings in gold from her uncle's firm so she can admire and handle the coins in her room, at one point spreading them over her bed and rolling around in them.",
      "question_template": "[[CANDIDATE_ANSWER]] introduces McTeague to his love interest, Trina Sieppe.",
      "candidate_answers": [
        "- Informing city hall that he has no license or degree"
      ],
      "predicates": [
        "Debarred(a_1) ::: McTeague is debarred from practicing dentistry.",
        "Informed(a_2, cityHall) ::: Marcus informed city hall about McTeague's lack of license or degree.",
        "LosesPractice(a_1) ::: McTeague loses his dental practice.",
        "MovesIntoPoorQuarters(a_1, a_3) ::: McTeague and Trina move into successively poorer quarters.",
        "Miserly(a_3) ::: Trina becomes more miserly.",
        "Deteriorates(a_1, a_3) ::: The life of McTeague and Trina deteriorates.",
        "TakesSavings(a_1, a_3) ::: McTeague takes Trina's domestic savings.",
        "Abandons(a_1, a_3) ::: McTeague abandons Trina.",
        "FallsUnderSpell(a_3, c) ::: Trina falls completely under the spell of money.",
        "WithdrawsWinnings(a_3) ::: Trina withdraws the principal of her prior winnings in gold.",
        "HandlesCoins(a_3) ::: Trina admires and handles the coins in her room.",
        "SpreadsCoins(a_3) ::: Trina spreads the coins over her bed."
      ],
      "premises": [
        "Debarred(a_1) ∧ Informed(a_2, cityHall) ∧ LosesPractice(a_1) ∧ MovesIntoPoorQuarters(a_1, a_3) ∧ Miserly(a_3) ∧ Deteriorates(a_1, a_3) ::: McTeague is debarred from practicing dentistry, Marcus informs city hall about McTeague's lack of license or degree, McTeague loses his practice, and they move into poorer quarters as Trina becomes more miserly, leading to the deterioration of their life together.",
        "TakesSavings(a_1, a_3) ∧ Abandons(a_1, a_3) ::: McTeague takes Trina's domestic savings and abandons her.",
        "FallsUnderSpell(a_3, c) ∧ WithdrawsWinnings(a_3) ∧ HandlesCoins(a_3) ∧ SpreadsCoins(a_3) ::: Trina falls under the spell of money, withdraws her winnings in gold, admires and handles the coins, and spreads them over her bed."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "668": [
    {
      "id": 668,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 0,
      "paragraph": " The book's protagonist is an English scientist and gentleman inventor living in Richmond, Surrey, in Victorian England, and identified by a narrator simply as the Time Traveller. The narrator recounts the Traveller's lecture to his weekly dinner guests that time is simply a fourth dimension, and his demonstration of a tabletop model machine for travelling through it. He reveals that he has built a machine capable of carrying a person through time, and returns at dinner the following week to recount a remarkable tale, becoming the new narrator.",
      "question_template": "Trina comes into her $15,000 fortune by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "an English scientist and gentleman inventor living in Richmond, Surrey, in Victorian England"
      ],
      "predicates": [
        "EnglishScientist(x) ::: x is an English scientist.",
        "GentlemanInventor(x) ::: x is a gentleman inventor.",
        "LivesIn(x, y) ::: x lives in location y.",
        "TimeTraveller(x) ::: x is the Time Traveller.",
        "Lecture(x, y) ::: x gives a lecture on topic y.",
        "Demonstrates(x, y) ::: x demonstrates item y.",
        "Built(x, y) ::: x built item y.",
        "Machine(x) ::: x is a machine.",
        "CarriesThroughTime(x, y) ::: x can carry person y through time.",
        "Narrator(x) ::: x is a narrator.",
        "RemarkableTale(x) ::: x is a remarkable tale."
      ],
      "premises": [
        "EnglishScientist(timeTraveller) ∧ GentlemanInventor(timeTraveller) ∧ LivesIn(timeTraveller, richmond) ∧ LivesIn(timeTraveller, surrey) ∧ LivesIn(timeTraveller, victorianTime) ::: The Time Traveller is an English scientist and gentleman inventor living in Richmond, Surrey, in Victorian England.",
        "Lecture(timeTraveller, fourthDimension) ::: The Time Traveller gives a lecture that time is simply a fourth dimension.",
        "Demonstrates(timeTraveller, tabletopModelMachine) ::: The Time Traveller demonstrates a tabletop model machine for travelling through time.",
        "Built(timeTraveller, timeMachine) ::: The Time Traveller built a machine capable of carrying a person through time.",
        "Narrator(originalNarrator) ∧ Narrator(timeTraveller) ::: The original narrator recounts the Time Traveller's lecture and becomes the new narrator after the Time Traveller returns at dinner the following week to recount a remarkable tale.",
        "RemarkableTale(timeTraveller) ::: The Time Traveller recounts a remarkable tale.",
        "Conclusion:",
        "CarriesThroughTime(timeMachine, timeTraveller) ::: The machine built by the Time Traveller can carry him through time."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 668,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 2,
      "paragraph": "Returning to the site where he arrived, the Time Traveller is shocked to find his time machine missing, and eventually concludes that it has been dragged by some unknown party into a nearby structure with heavy doors, locked from the inside, which resembles a Sphinx. Luckily, he had removed the machine's levers before leaving it. Later in the dark, he is approached menacingly by the Morlocks, ape-like troglodytes who live in darkness underground and surface only at night. Within their dwellings he discovers the machinery and industry that makes the above-ground paradise possible. He alters his theory, speculating that the human race has evolved into two species: the leisured classes have become the ineffectual Eloi, and the downtrodden working classes have become the brutal light-fearing Morlocks. Deducing that the Morlocks have taken his time machine, he explores the Morlock tunnels, learning that due to a lack of any other means of sustenance, they feed on the Eloi. His revised analysis is that their relationship is not one of lords and servants, but of livestock and ranchers. The Time Traveller theorizes that intelligence is the result of and response to danger; with no real challenges facing the Eloi, they have lost the spirit, intelligence, and physical fitness of humanity at its peak.",
      "question_template": "Trina comes into her $15,000 fortune by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- The above-ground paradise",
        "- The Morlock tunnels",
        "- The Eloi"
      ],
      "predicates": [
        "Missing(x) ::: x is missing.",
        "Shocked(x) ::: x is shocked to find something missing.",
        "Dragged(x, y) ::: x has been dragged by y.",
        "Resembles(x, y) ::: x resembles y.",
        "RemovedLevers(x) ::: x has removed the levers from the time machine.",
        "Approached(x, y) ::: x is approached by y.",
        "Discover(x, y) ::: x discovers y.",
        "AlterTheory(x, y) ::: x alters his theory about y.",
        "Evolved(x, y) ::: x has evolved into y.",
        "FeedOn(x, y) ::: x feeds on y.",
        "Relationship(x, y, z) ::: x has a relationship of type z with y.",
        "Theorizes(x, y) ::: x theorizes about y.",
        "Lost(x, y) ::: x has lost y."
      ],
      "premises": [
        "Missing(timeMachine) ∧ Shocked(timeTraveller) ::: The Time Traveller is shocked to find his time machine missing.",
        "Dragged(timeMachine, unknownParty) ::: The time machine has been dragged by some unknown party.",
        "Resembles(timeMachine, sphinx) ::: The structure resembles a Sphinx.",
        "RemovedLevers(timeTraveller) ::: The Time Traveller had removed the machine's levers before leaving it.",
        "Approached(timeTraveller, morlocks) ::: The Time Traveller is approached menacingly by the Morlocks.",
        "Discover(timeTraveller, machinery) ∧ Discover(timeTraveller, industry) ::: The Time Traveller discovers the machinery and industry that makes the above-ground paradise possible.",
        "AlterTheory(timeTraveller, species) ::: The Time Traveller alters his theory about the human race evolving into two species.",
        "Evolved(humanRace, (elois, morlocks)) ::: The human race has evolved into the Eloi and Morlocks.",
        "FeedOn(morlocks, eloi) ::: The Morlocks feed on the Eloi.",
        "Relationship(morlocks, eloi, livestockAndRanchers) ::: The relationship between Morlocks and Eloi is one of livestock and ranchers.",
        "Theorizes(timeTraveller, intelligence) ::: The Time Traveller theorizes that intelligence is the result of and response to danger.",
        "Lost(eloi, spirit) ∧ Lost(eloi, intelligence) ∧ Lost(eloi, physicalFitness) ::: The Eloi have lost the spirit, intelligence, and physical fitness of humanity at its peak."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 668,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 4,
      "paragraph": "The Morlocks open the Sphinx and use the time machine as bait to capture the Traveller, not understanding that he will use it to escape. He reattaches the levers before he travels further ahead to roughly 30 million years from his own time. There he sees some of the last living things on a dying Earth: menacing reddish crab-like creatures slowly wandering the blood-red beaches chasing enormous butterflies in a world covered in simple lichenous vegetation. He continues to make short jumps through time, seeing Earth's rotation gradually cease and the sun grow larger, redder, and dimmer, and the world falling silent and freezing as the last degenerate living things die out.",
      "question_template": "Trina comes into her $15,000 fortune by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The Traveller",
        "30 million years from his own time",
        "Earth"
      ],
      "predicates": [
        "Open(x, y) ::: x opens y.",
        "Use(x, y) ::: x uses y.",
        "Capture(x, y) ::: x captures y.",
        "Reattach(x, y) ::: x reattaches y.",
        "Travel(x, y) ::: x travels to y.",
        "See(x, y) ::: x sees y.",
        "Wander(x, y) ::: x wanders y.",
        "Chase(x, y) ::: x chases y.",
        "GrowLarger(x) ::: x grows larger.",
        "GrowRedder(x) ::: x grows redder.",
        "GrowDimmer(x) ::: x grows dimmer.",
        "FallSilent(x) ::: x falls silent.",
        "Freeze(x) ::: x freezes.",
        "DieOut(x) ::: x dies out."
      ],
      "premises": [
        "Open(morlocks, sphinx) ::: The Morlocks open the Sphinx.",
        "Use(morlocks, timeMachine) ::: The Morlocks use the time machine as bait.",
        "Capture(morlocks, traveller) ::: The Morlocks capture the Traveller.",
        "¬Understand(morlocks, escape(traveller)) ::: The Morlocks do not understand that the Traveller will use it to escape.",
        "Reattach(traveller, levers) ::: The Traveller reattaches the levers.",
        "Travel(traveller, 30MillionYears) ::: The Traveller travels roughly 30 million years from his own time.",
        "See(traveller, lastLivingThings) ::: The Traveller sees some of the last living things on a dying Earth.",
        "Wander(crabLikeCreatures, bloodRedBeaches) ::: Menacing reddish crab-like creatures wander the blood-red beaches.",
        "Chase(crabLikeCreatures, enormousButterflies) ::: Crab-like creatures chase enormous butterflies.",
        "Cover(world, simpleLichenousVegetation) ::: The world is covered in simple lichenous vegetation.",
        "Continue(traveller) ::: The Traveller continues to make short jumps through time.",
        "Cease(EarthRotation) ::: Earth's rotation gradually ceases.",
        "GrowLarger(sun) ::: The sun grows larger.",
        "GrowRedder(sun) ::: The sun grows redder.",
        "GrowDimmer(sun) ::: The sun grows dimmer.",
        "FallSilent(world) ::: The world falls silent.",
        "Freeze(world) ::: The world freezes.",
        "DieOut(lastDegenerateLivingThings) ::: The last degenerate living things die out.",
        "Conclusion:",
        "Experience(traveller, dyingEarth) ::: The Traveller experiences a dying Earth as he travels through time."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 668,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 5,
      "paragraph": "Overwhelmed, he goes back to the machine and returns to Victorian time, arriving at his laboratory just three hours after he originally left. Interrupting dinner, he relates his adventures to his disbelieving visitors, producing as evidence two strange white flowers Weena had put in his pocket. The original narrator then takes over and relates that he returned to the Time Traveller's house the next day, finding him preparing for another journey. After promising to return in a short period of time, the narrator reveals that after 3 years of waiting, the Time Traveller has never returned.",
      "question_template": "Trina comes into her $15,000 fortune by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The Time Traveller's house"
      ],
      "predicates": [
        "Overwhelmed(x) ::: x is overwhelmed.",
        "GoesBack(x, y) ::: x goes back to location y.",
        "ArrivesAt(x, y) ::: x arrives at location y.",
        "RelatesAdventures(x, y) ::: x relates his adventures to person y.",
        "ProducesEvidence(x, y) ::: x produces evidence of item y.",
        "PreparesForJourney(x) ::: x prepares for another journey.",
        "PromisesToReturn(x, y) ::: x promises to return in a short period of time.",
        "NeverReturned(x) ::: x has never returned."
      ],
      "premises": [
        "Overwhelmed(timeTraveller) ::: The Time Traveller is overwhelmed.",
        "GoesBack(timeTraveller, machine) ::: The Time Traveller goes back to the machine.",
        "ArrivesAt(timeTraveller, laboratory) ::: The Time Traveller arrives at his laboratory.",
        "RelatesAdventures(timeTraveller, visitors) ::: The Time Traveller relates his adventures to his disbelieving visitors.",
        "ProducesEvidence(timeTraveller, strangeWhiteFlowers) ::: The Time Traveller produces as evidence the strange white flowers.",
        "ArrivesAt(originalNarrator, house) ::: The original narrator arrives at the Time Traveller's house the next day.",
        "PreparesForJourney(timeTraveller) ::: The Time Traveller is preparing for another journey.",
        "PromisesToReturn(originalNarrator, timeTraveller) ::: The original narrator promises to return in a short period of time.",
        "NeverReturned(timeTraveller) ::: The Time Traveller has never returned after 3 years of waiting."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "669": [
    {
      "id": 669,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 1,
      "paragraph": "In the new narrative, the Time Traveller tests his device with a journey that takes him to A.D. 802,701, where he meets the Eloi, a society of small, elegant, childlike adults. They live in small communities within large and futuristic yet slowly deteriorating buildings, doing no work and having a frugivorous diet. His efforts to communicate with them are hampered by their lack of curiosity or discipline, and he speculates that they are a peaceful, communist society, the result of humanity conquering nature with technology, and subsequently evolving to adapt to an environment in which strength and intellect are no longer advantageous to survival.",
      "question_template": "Trina decides to [[CANDIDATE_ANSWER]] with her lottery winnings.",
      "candidate_answers": [
        "the Eloi",
        "a society of small, elegant, childlike adults"
      ],
      "predicates": [
        "Eloi(x) ::: x is an Eloi.",
        "TimeTraveller(x) ::: x is the Time Traveller.",
        "Curious(x) ::: x is curious.",
        "Disciplined(x) ::: x is disciplined.",
        "Frugivorous(x) ::: x has a frugivorous diet.",
        "CommunicatesWith(x, y) ::: x communicates with y.",
        "LivesIn(x, y) ::: x lives in location y.",
        "Work(x) ::: x does work.",
        "Peaceful(x) ::: x is peaceful.",
        "CommunistSociety(x) ::: x is a communist society.",
        "TechnologicallyAdvanced(x) ::: x is technologically advanced.",
        "AdaptsToEnvironment(x) ::: x adapts to the environment.",
        "StrengthAdvantageous(x) ::: x has strength advantageous for survival.",
        "IntellectAdvantageous(x) ::: x has intellect advantageous for survival."
      ],
      "premises": [
        "Eloi(x) → (Frugivorous(x) ∧ ¬Work(x) ∧ ¬Curious(x) ∧ ¬Disciplined(x)) ::: The Eloi live a frugivorous lifestyle, do no work, and lack curiosity and discipline.",
        "TimeTraveller(a_3) ∧ LivesIn(a_3, b_0) ∧ CommunicatesWith(a_3, Eloi) ::: The Time Traveller tests his device and communicates with the Eloi in A.D. 802,701.",
        "Eloi(x) → (Peaceful(x) ∧ CommunistSociety(x)) ::: The Eloi are a peaceful, communist society.",
        "TechnologicallyAdvanced(humanity) ∧ AdaptsToEnvironment(Eloi) ∧ ¬(StrengthAdvantageous(Eloi) ∧ IntellectAdvantageous(Eloi)) ::: The Eloi are a result of humanity's evolution in a technologically advanced environment, where strength and intellect are no longer advantageous for survival."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 669,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 3,
      "paragraph": "Meanwhile, he saves an Eloi named Weena from drowning as none of the other Eloi take any notice of her plight, and they develop an innocently affectionate relationship over the course of several days. He takes Weena with him on an expedition to a distant structure that turns out to be the remains of a museum, where he finds a fresh supply of matches and fashions a crude weapon against Morlocks, whom he must fight to get back his machine. He plans to take Weena back to his own time. Because the long and tiring journey back to Weena's home is too much for them, they stop in the forest, and they are then overcome by Morlocks in the night, and Weena faints. The Traveller escapes when a small fire he had left behind them to distract the Morlocks catches up to them as a forest fire; Weena and the pursuing Morlocks are lost in the fire, and the Time Traveler is devastated over his loss.",
      "question_template": "Trina decides to [[CANDIDATE_ANSWER]] with her lottery winnings.",
      "candidate_answers": [
        "Eloi",
        "Weena"
      ],
      "predicates": [
        "Saves(x, y) ::: x saves y from danger.",
        "DevelopsAffectionateRelationship(x, y) ::: x develops an affectionate relationship with y.",
        "Takes(x, y, z) ::: x takes y with him on an expedition to z.",
        "Finds(x, y) ::: x finds y.",
        "Fights(x, y) ::: x fights y.",
        "Plans(x, y) ::: x plans to take y back to his own time.",
        "OvercomeBy(x, y) ::: x is overcome by y.",
        "Faints(x) ::: x faints.",
        "Escapes(x) ::: x escapes from danger.",
        "Devastated(x, y) ::: x is devastated over the loss of y."
      ],
      "premises": [
        "Saves(a_3, a_1) ::: The Time Traveller saves Weena from drowning.",
        "DevelopsAffectionateRelationship(a_3, a_1) ::: The Time Traveller develops an affectionate relationship with Weena.",
        "Takes(a_3, a_1, b_0) ::: The Time Traveller takes Weena with him on an expedition to a distant structure.",
        "Finds(a_3, c_0) ::: The Time Traveller finds a fresh supply of matches.",
        "Fights(a_3, Morlocks) ::: The Time Traveller fights Morlocks to retrieve his machine.",
        "Plans(a_3, a_1) ::: The Time Traveller plans to take Weena back to his own time.",
        "OvercomeBy(a_1, Morlocks) ::: Weena is overcome by Morlocks in the night.",
        "Faints(a_1) ::: Weena faints.",
        "Escapes(a_3) ::: The Time Traveller escapes when a small fire he had left behind catches up to them.",
        "Devastated(a_3, a_1) ::: The Time Traveller is devastated over the loss of Weena.",
        "Conclusion:",
        "Devastated(a_3, a_1) ::: The Time Traveller is devastated over the loss of Weena."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "670": [
    {
      "id": 670,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 3,
      "paragraph": "Meanwhile, he saves an Eloi named Weena from drowning as none of the other Eloi take any notice of her plight, and they develop an innocently affectionate relationship over the course of several days. He takes Weena with him on an expedition to a distant structure that turns out to be the remains of a museum, where he finds a fresh supply of matches and fashions a crude weapon against Morlocks, whom he must fight to get back his machine. He plans to take Weena back to his own time. Because the long and tiring journey back to Weena's home is too much for them, they stop in the forest, and they are then overcome by Morlocks in the night, and Weena faints. The Traveller escapes when a small fire he had left behind them to distract the Morlocks catches up to them as a forest fire; Weena and the pursuing Morlocks are lost in the fire, and the Time Traveler is devastated over his loss.",
      "question_template": "Marcus breaks his arm because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Morlocks"
      ],
      "predicates": [
        "Saves(x, y) ::: x saves y from danger.",
        "DevelopsAffectionateRelationship(x, y) ::: x develops an affectionate relationship with y.",
        "Takes(x, y, z) ::: x takes y with him on an expedition to z.",
        "Finds(x, y) ::: x finds y.",
        "Fights(x, y) ::: x fights y.",
        "Plans(x, y) ::: x plans to take y back to his own time.",
        "OvercomeBy(x, y) ::: x is overcome by y.",
        "Faints(x) ::: x faints.",
        "Escapes(x) ::: x escapes from danger.",
        "Devastated(x, y) ::: x is devastated over the loss of y."
      ],
      "premises": [
        "Saves(a_3, a_1) ::: The Time Traveller saves Weena from drowning.",
        "DevelopsAffectionateRelationship(a_3, a_1) ::: The Time Traveller develops an affectionate relationship with Weena.",
        "Takes(a_3, a_1, b_0) ::: The Time Traveller takes Weena with him on an expedition to a distant structure.",
        "Finds(a_3, c_0) ::: The Time Traveller finds a fresh supply of matches.",
        "Fights(a_3, Morlocks) ::: The Time Traveller fights Morlocks to retrieve his machine.",
        "Plans(a_3, a_1) ::: The Time Traveller plans to take Weena back to his own time.",
        "OvercomeBy(a_1, Morlocks) ::: Weena is overcome by Morlocks in the night.",
        "Faints(a_1) ::: Weena faints.",
        "Escapes(a_3) ::: The Time Traveller escapes when a small fire he had left behind catches up to them.",
        "Devastated(a_3, a_1) ::: The Time Traveller is devastated over the loss of Weena.",
        "Conclusion:",
        "Devastated(a_3, a_1) ::: The Time Traveller is devastated over the loss of Weena."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "673": [
    {
      "id": 673,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 0,
      "paragraph": " The book's protagonist is an English scientist and gentleman inventor living in Richmond, Surrey, in Victorian England, and identified by a narrator simply as the Time Traveller. The narrator recounts the Traveller's lecture to his weekly dinner guests that time is simply a fourth dimension, and his demonstration of a tabletop model machine for travelling through it. He reveals that he has built a machine capable of carrying a person through time, and returns at dinner the following week to recount a remarkable tale, becoming the new narrator.",
      "question_template": "Trina dies because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The Time Traveller's machine",
        "A tabletop model machine for travelling through it",
        "A machine capable of carrying a person through time"
      ],
      "predicates": [
        "EnglishScientist(x) ::: x is an English scientist.",
        "GentlemanInventor(x) ::: x is a gentleman inventor.",
        "LivesIn(x, y) ::: x lives in location y.",
        "TimeTraveller(x) ::: x is the Time Traveller.",
        "Lecture(x, y) ::: x gives a lecture on topic y.",
        "Demonstrates(x, y) ::: x demonstrates item y.",
        "Built(x, y) ::: x built item y.",
        "Machine(x) ::: x is a machine.",
        "CarriesThroughTime(x, y) ::: x can carry person y through time.",
        "Narrator(x) ::: x is a narrator.",
        "RemarkableTale(x) ::: x is a remarkable tale."
      ],
      "premises": [
        "EnglishScientist(timeTraveller) ∧ GentlemanInventor(timeTraveller) ∧ LivesIn(timeTraveller, richmond) ∧ LivesIn(timeTraveller, surrey) ∧ LivesIn(timeTraveller, victorianTime) ::: The Time Traveller is an English scientist and gentleman inventor living in Richmond, Surrey, in Victorian England.",
        "Lecture(timeTraveller, fourthDimension) ::: The Time Traveller gives a lecture that time is simply a fourth dimension.",
        "Demonstrates(timeTraveller, tabletopModelMachine) ::: The Time Traveller demonstrates a tabletop model machine for travelling through time.",
        "Built(timeTraveller, timeMachine) ::: The Time Traveller built a machine capable of carrying a person through time.",
        "Narrator(originalNarrator) ∧ Narrator(timeTraveller) ::: The original narrator recounts the Time Traveller's lecture and becomes the new narrator after the Time Traveller returns at dinner the following week to recount a remarkable tale.",
        "RemarkableTale(timeTraveller) ::: The Time Traveller recounts a remarkable tale.",
        "Conclusion:",
        "CarriesThroughTime(timeMachine, timeTraveller) ::: The machine built by the Time Traveller can carry him through time."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 673,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 1,
      "paragraph": "In the new narrative, the Time Traveller tests his device with a journey that takes him to A.D. 802,701, where he meets the Eloi, a society of small, elegant, childlike adults. They live in small communities within large and futuristic yet slowly deteriorating buildings, doing no work and having a frugivorous diet. His efforts to communicate with them are hampered by their lack of curiosity or discipline, and he speculates that they are a peaceful, communist society, the result of humanity conquering nature with technology, and subsequently evolving to adapt to an environment in which strength and intellect are no longer advantageous to survival.",
      "question_template": "Trina dies because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "large and futuristic yet slowly deteriorating buildings"
      ],
      "predicates": [
        "Eloi(x) ::: x is an Eloi.",
        "TimeTraveller(x) ::: x is the Time Traveller.",
        "Curious(x) ::: x is curious.",
        "Disciplined(x) ::: x is disciplined.",
        "Frugivorous(x) ::: x has a frugivorous diet.",
        "CommunicatesWith(x, y) ::: x communicates with y.",
        "LivesIn(x, y) ::: x lives in location y.",
        "Work(x) ::: x does work.",
        "Peaceful(x) ::: x is peaceful.",
        "CommunistSociety(x) ::: x is a communist society.",
        "TechnologicallyAdvanced(x) ::: x is technologically advanced.",
        "AdaptsToEnvironment(x) ::: x adapts to the environment.",
        "StrengthAdvantageous(x) ::: x has strength advantageous for survival.",
        "IntellectAdvantageous(x) ::: x has intellect advantageous for survival."
      ],
      "premises": [
        "Eloi(x) → (Frugivorous(x) ∧ ¬Work(x) ∧ ¬Curious(x) ∧ ¬Disciplined(x)) ::: The Eloi live a frugivorous lifestyle, do no work, and lack curiosity and discipline.",
        "TimeTraveller(a_3) ∧ LivesIn(a_3, b_0) ∧ CommunicatesWith(a_3, Eloi) ::: The Time Traveller tests his device and communicates with the Eloi in A.D. 802,701.",
        "Eloi(x) → (Peaceful(x) ∧ CommunistSociety(x)) ::: The Eloi are a peaceful, communist society.",
        "TechnologicallyAdvanced(humanity) ∧ AdaptsToEnvironment(Eloi) ∧ ¬(StrengthAdvantageous(Eloi) ∧ IntellectAdvantageous(Eloi)) ::: The Eloi are a result of humanity's evolution in a technologically advanced environment, where strength and intellect are no longer advantageous for survival."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 673,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 3,
      "paragraph": "Meanwhile, he saves an Eloi named Weena from drowning as none of the other Eloi take any notice of her plight, and they develop an innocently affectionate relationship over the course of several days. He takes Weena with him on an expedition to a distant structure that turns out to be the remains of a museum, where he finds a fresh supply of matches and fashions a crude weapon against Morlocks, whom he must fight to get back his machine. He plans to take Weena back to his own time. Because the long and tiring journey back to Weena's home is too much for them, they stop in the forest, and they are then overcome by Morlocks in the night, and Weena faints. The Traveller escapes when a small fire he had left behind them to distract the Morlocks catches up to them as a forest fire; Weena and the pursuing Morlocks are lost in the fire, and the Time Traveler is devastated over his loss.",
      "question_template": "Trina dies because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The remains of a museum"
      ],
      "predicates": [
        "Saves(x, y) ::: x saves y from danger.",
        "DevelopsAffectionateRelationship(x, y) ::: x develops an affectionate relationship with y.",
        "Takes(x, y, z) ::: x takes y with him on an expedition to z.",
        "Finds(x, y) ::: x finds y.",
        "Fights(x, y) ::: x fights y.",
        "Plans(x, y) ::: x plans to take y back to his own time.",
        "OvercomeBy(x, y) ::: x is overcome by y.",
        "Faints(x) ::: x faints.",
        "Escapes(x) ::: x escapes from danger.",
        "Devastated(x, y) ::: x is devastated over the loss of y."
      ],
      "premises": [
        "Saves(a_3, a_1) ::: The Time Traveller saves Weena from drowning.",
        "DevelopsAffectionateRelationship(a_3, a_1) ::: The Time Traveller develops an affectionate relationship with Weena.",
        "Takes(a_3, a_1, b_0) ::: The Time Traveller takes Weena with him on an expedition to a distant structure.",
        "Finds(a_3, c_0) ::: The Time Traveller finds a fresh supply of matches.",
        "Fights(a_3, Morlocks) ::: The Time Traveller fights Morlocks to retrieve his machine.",
        "Plans(a_3, a_1) ::: The Time Traveller plans to take Weena back to his own time.",
        "OvercomeBy(a_1, Morlocks) ::: Weena is overcome by Morlocks in the night.",
        "Faints(a_1) ::: Weena faints.",
        "Escapes(a_3) ::: The Time Traveller escapes when a small fire he had left behind catches up to them.",
        "Devastated(a_3, a_1) ::: The Time Traveller is devastated over the loss of Weena.",
        "Conclusion:",
        "Devastated(a_3, a_1) ::: The Time Traveller is devastated over the loss of Weena."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "674": [
    {
      "id": 674,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 5,
      "paragraph": "Overwhelmed, he goes back to the machine and returns to Victorian time, arriving at his laboratory just three hours after he originally left. Interrupting dinner, he relates his adventures to his disbelieving visitors, producing as evidence two strange white flowers Weena had put in his pocket. The original narrator then takes over and relates that he returned to the Time Traveller's house the next day, finding him preparing for another journey. After promising to return in a short period of time, the narrator reveals that after 3 years of waiting, the Time Traveller has never returned.",
      "question_template": "McTeague gets caught following Trina's death by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "No relevant information found in the paragraph."
      ],
      "predicates": [
        "Overwhelmed(x) ::: x is overwhelmed.",
        "GoesBack(x, y) ::: x goes back to location y.",
        "ArrivesAt(x, y) ::: x arrives at location y.",
        "RelatesAdventures(x, y) ::: x relates his adventures to person y.",
        "ProducesEvidence(x, y) ::: x produces evidence of item y.",
        "PreparesForJourney(x) ::: x prepares for another journey.",
        "PromisesToReturn(x, y) ::: x promises to return in a short period of time.",
        "NeverReturned(x) ::: x has never returned."
      ],
      "premises": [
        "Overwhelmed(timeTraveller) ::: The Time Traveller is overwhelmed.",
        "GoesBack(timeTraveller, machine) ::: The Time Traveller goes back to the machine.",
        "ArrivesAt(timeTraveller, laboratory) ::: The Time Traveller arrives at his laboratory.",
        "RelatesAdventures(timeTraveller, visitors) ::: The Time Traveller relates his adventures to his disbelieving visitors.",
        "ProducesEvidence(timeTraveller, strangeWhiteFlowers) ::: The Time Traveller produces as evidence the strange white flowers.",
        "ArrivesAt(originalNarrator, house) ::: The original narrator arrives at the Time Traveller's house the next day.",
        "PreparesForJourney(timeTraveller) ::: The Time Traveller is preparing for another journey.",
        "PromisesToReturn(originalNarrator, timeTraveller) ::: The original narrator promises to return in a short period of time.",
        "NeverReturned(timeTraveller) ::: The Time Traveller has never returned after 3 years of waiting."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "675": [
    {
      "id": 675,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 3,
      "paragraph": "Meanwhile, he saves an Eloi named Weena from drowning as none of the other Eloi take any notice of her plight, and they develop an innocently affectionate relationship over the course of several days. He takes Weena with him on an expedition to a distant structure that turns out to be the remains of a museum, where he finds a fresh supply of matches and fashions a crude weapon against Morlocks, whom he must fight to get back his machine. He plans to take Weena back to his own time. Because the long and tiring journey back to Weena's home is too much for them, they stop in the forest, and they are then overcome by Morlocks in the night, and Weena faints. The Traveller escapes when a small fire he had left behind them to distract the Morlocks catches up to them as a forest fire; Weena and the pursuing Morlocks are lost in the fire, and the Time Traveler is devastated over his loss.",
      "question_template": "Marcus takes a final act of desperation against McTeague by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Weena faints",
        "Weena and the pursuing Morlocks are lost in the fire"
      ],
      "predicates": [
        "Saves(x, y) ::: x saves y from danger.",
        "DevelopsAffectionateRelationship(x, y) ::: x develops an affectionate relationship with y.",
        "Takes(x, y, z) ::: x takes y with him on an expedition to z.",
        "Finds(x, y) ::: x finds y.",
        "Fights(x, y) ::: x fights y.",
        "Plans(x, y) ::: x plans to take y back to his own time.",
        "OvercomeBy(x, y) ::: x is overcome by y.",
        "Faints(x) ::: x faints.",
        "Escapes(x) ::: x escapes from danger.",
        "Devastated(x, y) ::: x is devastated over the loss of y."
      ],
      "premises": [
        "Saves(a_3, a_1) ::: The Time Traveller saves Weena from drowning.",
        "DevelopsAffectionateRelationship(a_3, a_1) ::: The Time Traveller develops an affectionate relationship with Weena.",
        "Takes(a_3, a_1, b_0) ::: The Time Traveller takes Weena with him on an expedition to a distant structure.",
        "Finds(a_3, c_0) ::: The Time Traveller finds a fresh supply of matches.",
        "Fights(a_3, Morlocks) ::: The Time Traveller fights Morlocks to retrieve his machine.",
        "Plans(a_3, a_1) ::: The Time Traveller plans to take Weena back to his own time.",
        "OvercomeBy(a_1, Morlocks) ::: Weena is overcome by Morlocks in the night.",
        "Faints(a_1) ::: Weena faints.",
        "Escapes(a_3) ::: The Time Traveller escapes when a small fire he had left behind catches up to them.",
        "Devastated(a_3, a_1) ::: The Time Traveller is devastated over the loss of Weena.",
        "Conclusion:",
        "Devastated(a_3, a_1) ::: The Time Traveller is devastated over the loss of Weena."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "676": [
    {
      "id": 676,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 2,
      "paragraph": "Returning to the site where he arrived, the Time Traveller is shocked to find his time machine missing, and eventually concludes that it has been dragged by some unknown party into a nearby structure with heavy doors, locked from the inside, which resembles a Sphinx. Luckily, he had removed the machine's levers before leaving it. Later in the dark, he is approached menacingly by the Morlocks, ape-like troglodytes who live in darkness underground and surface only at night. Within their dwellings he discovers the machinery and industry that makes the above-ground paradise possible. He alters his theory, speculating that the human race has evolved into two species: the leisured classes have become the ineffectual Eloi, and the downtrodden working classes have become the brutal light-fearing Morlocks. Deducing that the Morlocks have taken his time machine, he explores the Morlock tunnels, learning that due to a lack of any other means of sustenance, they feed on the Eloi. His revised analysis is that their relationship is not one of lords and servants, but of livestock and ranchers. The Time Traveller theorizes that intelligence is the result of and response to danger; with no real challenges facing the Eloi, they have lost the spirit, intelligence, and physical fitness of humanity at its peak.",
      "question_template": "[[CANDIDATE_ANSWER]] is responsible for the meeting of McTeague and his wife.",
      "candidate_answers": [
        "- His time machine missing",
        "- He had removed the machine's levers before leaving it",
        "- The machinery and industry that makes the above-ground paradise possible",
        "- His revised analysis is that their relationship is not one of lords and servants, but of livestock and ranchers"
      ],
      "predicates": [
        "Missing(x) ::: x is missing.",
        "Shocked(x) ::: x is shocked to find something missing.",
        "Dragged(x, y) ::: x has been dragged by y.",
        "Resembles(x, y) ::: x resembles y.",
        "RemovedLevers(x) ::: x has removed the levers from the time machine.",
        "Approached(x, y) ::: x is approached by y.",
        "Discover(x, y) ::: x discovers y.",
        "AlterTheory(x, y) ::: x alters his theory about y.",
        "Evolved(x, y) ::: x has evolved into y.",
        "FeedOn(x, y) ::: x feeds on y.",
        "Relationship(x, y, z) ::: x has a relationship of type z with y.",
        "Theorizes(x, y) ::: x theorizes about y.",
        "Lost(x, y) ::: x has lost y."
      ],
      "premises": [
        "Missing(timeMachine) ∧ Shocked(timeTraveller) ::: The Time Traveller is shocked to find his time machine missing.",
        "Dragged(timeMachine, unknownParty) ::: The time machine has been dragged by some unknown party.",
        "Resembles(timeMachine, sphinx) ::: The structure resembles a Sphinx.",
        "RemovedLevers(timeTraveller) ::: The Time Traveller had removed the machine's levers before leaving it.",
        "Approached(timeTraveller, morlocks) ::: The Time Traveller is approached menacingly by the Morlocks.",
        "Discover(timeTraveller, machinery) ∧ Discover(timeTraveller, industry) ::: The Time Traveller discovers the machinery and industry that makes the above-ground paradise possible.",
        "AlterTheory(timeTraveller, species) ::: The Time Traveller alters his theory about the human race evolving into two species.",
        "Evolved(humanRace, (elois, morlocks)) ::: The human race has evolved into the Eloi and Morlocks.",
        "FeedOn(morlocks, eloi) ::: The Morlocks feed on the Eloi.",
        "Relationship(morlocks, eloi, livestockAndRanchers) ::: The relationship between Morlocks and Eloi is one of livestock and ranchers.",
        "Theorizes(timeTraveller, intelligence) ::: The Time Traveller theorizes that intelligence is the result of and response to danger.",
        "Lost(eloi, spirit) ∧ Lost(eloi, intelligence) ∧ Lost(eloi, physicalFitness) ::: The Eloi have lost the spirit, intelligence, and physical fitness of humanity at its peak."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 676,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 5,
      "paragraph": "Overwhelmed, he goes back to the machine and returns to Victorian time, arriving at his laboratory just three hours after he originally left. Interrupting dinner, he relates his adventures to his disbelieving visitors, producing as evidence two strange white flowers Weena had put in his pocket. The original narrator then takes over and relates that he returned to the Time Traveller's house the next day, finding him preparing for another journey. After promising to return in a short period of time, the narrator reveals that after 3 years of waiting, the Time Traveller has never returned.",
      "question_template": "[[CANDIDATE_ANSWER]] is responsible for the meeting of McTeague and his wife.",
      "candidate_answers": [
        "Two strange white flowers Weena had put in his pocket"
      ],
      "predicates": [
        "Overwhelmed(x) ::: x is overwhelmed.",
        "GoesBack(x, y) ::: x goes back to location y.",
        "ArrivesAt(x, y) ::: x arrives at location y.",
        "RelatesAdventures(x, y) ::: x relates his adventures to person y.",
        "ProducesEvidence(x, y) ::: x produces evidence of item y.",
        "PreparesForJourney(x) ::: x prepares for another journey.",
        "PromisesToReturn(x, y) ::: x promises to return in a short period of time.",
        "NeverReturned(x) ::: x has never returned."
      ],
      "premises": [
        "Overwhelmed(timeTraveller) ::: The Time Traveller is overwhelmed.",
        "GoesBack(timeTraveller, machine) ::: The Time Traveller goes back to the machine.",
        "ArrivesAt(timeTraveller, laboratory) ::: The Time Traveller arrives at his laboratory.",
        "RelatesAdventures(timeTraveller, visitors) ::: The Time Traveller relates his adventures to his disbelieving visitors.",
        "ProducesEvidence(timeTraveller, strangeWhiteFlowers) ::: The Time Traveller produces as evidence the strange white flowers.",
        "ArrivesAt(originalNarrator, house) ::: The original narrator arrives at the Time Traveller's house the next day.",
        "PreparesForJourney(timeTraveller) ::: The Time Traveller is preparing for another journey.",
        "PromisesToReturn(originalNarrator, timeTraveller) ::: The original narrator promises to return in a short period of time.",
        "NeverReturned(timeTraveller) ::: The Time Traveller has never returned after 3 years of waiting."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "677": [
    {
      "id": 677,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 5,
      "paragraph": "Overwhelmed, he goes back to the machine and returns to Victorian time, arriving at his laboratory just three hours after he originally left. Interrupting dinner, he relates his adventures to his disbelieving visitors, producing as evidence two strange white flowers Weena had put in his pocket. The original narrator then takes over and relates that he returned to the Time Traveller's house the next day, finding him preparing for another journey. After promising to return in a short period of time, the narrator reveals that after 3 years of waiting, the Time Traveller has never returned.",
      "question_template": "Marcus becomes jealous of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Three hours after he originally left",
        "After 3 years of waiting, the Time Traveller has never returned"
      ],
      "predicates": [
        "Overwhelmed(x) ::: x is overwhelmed.",
        "GoesBack(x, y) ::: x goes back to location y.",
        "ArrivesAt(x, y) ::: x arrives at location y.",
        "RelatesAdventures(x, y) ::: x relates his adventures to person y.",
        "ProducesEvidence(x, y) ::: x produces evidence of item y.",
        "PreparesForJourney(x) ::: x prepares for another journey.",
        "PromisesToReturn(x, y) ::: x promises to return in a short period of time.",
        "NeverReturned(x) ::: x has never returned."
      ],
      "premises": [
        "Overwhelmed(timeTraveller) ::: The Time Traveller is overwhelmed.",
        "GoesBack(timeTraveller, machine) ::: The Time Traveller goes back to the machine.",
        "ArrivesAt(timeTraveller, laboratory) ::: The Time Traveller arrives at his laboratory.",
        "RelatesAdventures(timeTraveller, visitors) ::: The Time Traveller relates his adventures to his disbelieving visitors.",
        "ProducesEvidence(timeTraveller, strangeWhiteFlowers) ::: The Time Traveller produces as evidence the strange white flowers.",
        "ArrivesAt(originalNarrator, house) ::: The original narrator arrives at the Time Traveller's house the next day.",
        "PreparesForJourney(timeTraveller) ::: The Time Traveller is preparing for another journey.",
        "PromisesToReturn(originalNarrator, timeTraveller) ::: The original narrator promises to return in a short period of time.",
        "NeverReturned(timeTraveller) ::: The Time Traveller has never returned after 3 years of waiting."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "678": [
    {
      "id": 678,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 1,
      "paragraph": "In the new narrative, the Time Traveller tests his device with a journey that takes him to A.D. 802,701, where he meets the Eloi, a society of small, elegant, childlike adults. They live in small communities within large and futuristic yet slowly deteriorating buildings, doing no work and having a frugivorous diet. His efforts to communicate with them are hampered by their lack of curiosity or discipline, and he speculates that they are a peaceful, communist society, the result of humanity conquering nature with technology, and subsequently evolving to adapt to an environment in which strength and intellect are no longer advantageous to survival.",
      "question_template": "Trina supplements her and her husband's income by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "His device",
        "A journey that takes him to A.D. 802,701"
      ],
      "predicates": [
        "Eloi(x) ::: x is an Eloi.",
        "TimeTraveller(x) ::: x is the Time Traveller.",
        "Curious(x) ::: x is curious.",
        "Disciplined(x) ::: x is disciplined.",
        "Frugivorous(x) ::: x has a frugivorous diet.",
        "CommunicatesWith(x, y) ::: x communicates with y.",
        "LivesIn(x, y) ::: x lives in location y.",
        "Work(x) ::: x does work.",
        "Peaceful(x) ::: x is peaceful.",
        "CommunistSociety(x) ::: x is a communist society.",
        "TechnologicallyAdvanced(x) ::: x is technologically advanced.",
        "AdaptsToEnvironment(x) ::: x adapts to the environment.",
        "StrengthAdvantageous(x) ::: x has strength advantageous for survival.",
        "IntellectAdvantageous(x) ::: x has intellect advantageous for survival."
      ],
      "premises": [
        "Eloi(x) → (Frugivorous(x) ∧ ¬Work(x) ∧ ¬Curious(x) ∧ ¬Disciplined(x)) ::: The Eloi live a frugivorous lifestyle, do no work, and lack curiosity and discipline.",
        "TimeTraveller(a_3) ∧ LivesIn(a_3, b_0) ∧ CommunicatesWith(a_3, Eloi) ::: The Time Traveller tests his device and communicates with the Eloi in A.D. 802,701.",
        "Eloi(x) → (Peaceful(x) ∧ CommunistSociety(x)) ::: The Eloi are a peaceful, communist society.",
        "TechnologicallyAdvanced(humanity) ∧ AdaptsToEnvironment(Eloi) ∧ ¬(StrengthAdvantageous(Eloi) ∧ IntellectAdvantageous(Eloi)) ::: The Eloi are a result of humanity's evolution in a technologically advanced environment, where strength and intellect are no longer advantageous for survival."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 678,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 2,
      "paragraph": "Returning to the site where he arrived, the Time Traveller is shocked to find his time machine missing, and eventually concludes that it has been dragged by some unknown party into a nearby structure with heavy doors, locked from the inside, which resembles a Sphinx. Luckily, he had removed the machine's levers before leaving it. Later in the dark, he is approached menacingly by the Morlocks, ape-like troglodytes who live in darkness underground and surface only at night. Within their dwellings he discovers the machinery and industry that makes the above-ground paradise possible. He alters his theory, speculating that the human race has evolved into two species: the leisured classes have become the ineffectual Eloi, and the downtrodden working classes have become the brutal light-fearing Morlocks. Deducing that the Morlocks have taken his time machine, he explores the Morlock tunnels, learning that due to a lack of any other means of sustenance, they feed on the Eloi. His revised analysis is that their relationship is not one of lords and servants, but of livestock and ranchers. The Time Traveller theorizes that intelligence is the result of and response to danger; with no real challenges facing the Eloi, they have lost the spirit, intelligence, and physical fitness of humanity at its peak.",
      "question_template": "Trina supplements her and her husband's income by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- His time machine",
        "- Machinery and industry that makes the above-ground paradise possible"
      ],
      "predicates": [
        "Missing(x) ::: x is missing.",
        "Shocked(x) ::: x is shocked to find something missing.",
        "Dragged(x, y) ::: x has been dragged by y.",
        "Resembles(x, y) ::: x resembles y.",
        "RemovedLevers(x) ::: x has removed the levers from the time machine.",
        "Approached(x, y) ::: x is approached by y.",
        "Discover(x, y) ::: x discovers y.",
        "AlterTheory(x, y) ::: x alters his theory about y.",
        "Evolved(x, y) ::: x has evolved into y.",
        "FeedOn(x, y) ::: x feeds on y.",
        "Relationship(x, y, z) ::: x has a relationship of type z with y.",
        "Theorizes(x, y) ::: x theorizes about y.",
        "Lost(x, y) ::: x has lost y."
      ],
      "premises": [
        "Missing(timeMachine) ∧ Shocked(timeTraveller) ::: The Time Traveller is shocked to find his time machine missing.",
        "Dragged(timeMachine, unknownParty) ::: The time machine has been dragged by some unknown party.",
        "Resembles(timeMachine, sphinx) ::: The structure resembles a Sphinx.",
        "RemovedLevers(timeTraveller) ::: The Time Traveller had removed the machine's levers before leaving it.",
        "Approached(timeTraveller, morlocks) ::: The Time Traveller is approached menacingly by the Morlocks.",
        "Discover(timeTraveller, machinery) ∧ Discover(timeTraveller, industry) ::: The Time Traveller discovers the machinery and industry that makes the above-ground paradise possible.",
        "AlterTheory(timeTraveller, species) ::: The Time Traveller alters his theory about the human race evolving into two species.",
        "Evolved(humanRace, (elois, morlocks)) ::: The human race has evolved into the Eloi and Morlocks.",
        "FeedOn(morlocks, eloi) ::: The Morlocks feed on the Eloi.",
        "Relationship(morlocks, eloi, livestockAndRanchers) ::: The relationship between Morlocks and Eloi is one of livestock and ranchers.",
        "Theorizes(timeTraveller, intelligence) ::: The Time Traveller theorizes that intelligence is the result of and response to danger.",
        "Lost(eloi, spirit) ∧ Lost(eloi, intelligence) ∧ Lost(eloi, physicalFitness) ::: The Eloi have lost the spirit, intelligence, and physical fitness of humanity at its peak."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 678,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 5,
      "paragraph": "Overwhelmed, he goes back to the machine and returns to Victorian time, arriving at his laboratory just three hours after he originally left. Interrupting dinner, he relates his adventures to his disbelieving visitors, producing as evidence two strange white flowers Weena had put in his pocket. The original narrator then takes over and relates that he returned to the Time Traveller's house the next day, finding him preparing for another journey. After promising to return in a short period of time, the narrator reveals that after 3 years of waiting, the Time Traveller has never returned.",
      "question_template": "Trina supplements her and her husband's income by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The Time Traveller's house",
        "Preparing for another journey"
      ],
      "predicates": [
        "Overwhelmed(x) ::: x is overwhelmed.",
        "GoesBack(x, y) ::: x goes back to location y.",
        "ArrivesAt(x, y) ::: x arrives at location y.",
        "RelatesAdventures(x, y) ::: x relates his adventures to person y.",
        "ProducesEvidence(x, y) ::: x produces evidence of item y.",
        "PreparesForJourney(x) ::: x prepares for another journey.",
        "PromisesToReturn(x, y) ::: x promises to return in a short period of time.",
        "NeverReturned(x) ::: x has never returned."
      ],
      "premises": [
        "Overwhelmed(timeTraveller) ::: The Time Traveller is overwhelmed.",
        "GoesBack(timeTraveller, machine) ::: The Time Traveller goes back to the machine.",
        "ArrivesAt(timeTraveller, laboratory) ::: The Time Traveller arrives at his laboratory.",
        "RelatesAdventures(timeTraveller, visitors) ::: The Time Traveller relates his adventures to his disbelieving visitors.",
        "ProducesEvidence(timeTraveller, strangeWhiteFlowers) ::: The Time Traveller produces as evidence the strange white flowers.",
        "ArrivesAt(originalNarrator, house) ::: The original narrator arrives at the Time Traveller's house the next day.",
        "PreparesForJourney(timeTraveller) ::: The Time Traveller is preparing for another journey.",
        "PromisesToReturn(originalNarrator, timeTraveller) ::: The original narrator promises to return in a short period of time.",
        "NeverReturned(timeTraveller) ::: The Time Traveller has never returned after 3 years of waiting."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "679": [
    {
      "id": 679,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 1,
      "paragraph": "In the new narrative, the Time Traveller tests his device with a journey that takes him to A.D. 802,701, where he meets the Eloi, a society of small, elegant, childlike adults. They live in small communities within large and futuristic yet slowly deteriorating buildings, doing no work and having a frugivorous diet. His efforts to communicate with them are hampered by their lack of curiosity or discipline, and he speculates that they are a peaceful, communist society, the result of humanity conquering nature with technology, and subsequently evolving to adapt to an environment in which strength and intellect are no longer advantageous to survival.",
      "question_template": "The cause of McTeague's Dentistry business failure is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Eloi",
        "A society of small, elegant, childlike adults",
        "They live in small communities within large and futuristic yet slowly deteriorating buildings"
      ],
      "predicates": [
        "Eloi(x) ::: x is an Eloi.",
        "TimeTraveller(x) ::: x is the Time Traveller.",
        "Curious(x) ::: x is curious.",
        "Disciplined(x) ::: x is disciplined.",
        "Frugivorous(x) ::: x has a frugivorous diet.",
        "CommunicatesWith(x, y) ::: x communicates with y.",
        "LivesIn(x, y) ::: x lives in location y.",
        "Work(x) ::: x does work.",
        "Peaceful(x) ::: x is peaceful.",
        "CommunistSociety(x) ::: x is a communist society.",
        "TechnologicallyAdvanced(x) ::: x is technologically advanced.",
        "AdaptsToEnvironment(x) ::: x adapts to the environment.",
        "StrengthAdvantageous(x) ::: x has strength advantageous for survival.",
        "IntellectAdvantageous(x) ::: x has intellect advantageous for survival."
      ],
      "premises": [
        "Eloi(x) → (Frugivorous(x) ∧ ¬Work(x) ∧ ¬Curious(x) ∧ ¬Disciplined(x)) ::: The Eloi live a frugivorous lifestyle, do no work, and lack curiosity and discipline.",
        "TimeTraveller(a_3) ∧ LivesIn(a_3, b_0) ∧ CommunicatesWith(a_3, Eloi) ::: The Time Traveller tests his device and communicates with the Eloi in A.D. 802,701.",
        "Eloi(x) → (Peaceful(x) ∧ CommunistSociety(x)) ::: The Eloi are a peaceful, communist society.",
        "TechnologicallyAdvanced(humanity) ∧ AdaptsToEnvironment(Eloi) ∧ ¬(StrengthAdvantageous(Eloi) ∧ IntellectAdvantageous(Eloi)) ::: The Eloi are a result of humanity's evolution in a technologically advanced environment, where strength and intellect are no longer advantageous for survival."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 679,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 3,
      "paragraph": "Meanwhile, he saves an Eloi named Weena from drowning as none of the other Eloi take any notice of her plight, and they develop an innocently affectionate relationship over the course of several days. He takes Weena with him on an expedition to a distant structure that turns out to be the remains of a museum, where he finds a fresh supply of matches and fashions a crude weapon against Morlocks, whom he must fight to get back his machine. He plans to take Weena back to his own time. Because the long and tiring journey back to Weena's home is too much for them, they stop in the forest, and they are then overcome by Morlocks in the night, and Weena faints. The Traveller escapes when a small fire he had left behind them to distract the Morlocks catches up to them as a forest fire; Weena and the pursuing Morlocks are lost in the fire, and the Time Traveler is devastated over his loss.",
      "question_template": "The cause of McTeague's Dentistry business failure is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Eloi",
        "Morlocks"
      ],
      "predicates": [
        "Saves(x, y) ::: x saves y from danger.",
        "DevelopsAffectionateRelationship(x, y) ::: x develops an affectionate relationship with y.",
        "Takes(x, y, z) ::: x takes y with him on an expedition to z.",
        "Finds(x, y) ::: x finds y.",
        "Fights(x, y) ::: x fights y.",
        "Plans(x, y) ::: x plans to take y back to his own time.",
        "OvercomeBy(x, y) ::: x is overcome by y.",
        "Faints(x) ::: x faints.",
        "Escapes(x) ::: x escapes from danger.",
        "Devastated(x, y) ::: x is devastated over the loss of y."
      ],
      "premises": [
        "Saves(a_3, a_1) ::: The Time Traveller saves Weena from drowning.",
        "DevelopsAffectionateRelationship(a_3, a_1) ::: The Time Traveller develops an affectionate relationship with Weena.",
        "Takes(a_3, a_1, b_0) ::: The Time Traveller takes Weena with him on an expedition to a distant structure.",
        "Finds(a_3, c_0) ::: The Time Traveller finds a fresh supply of matches.",
        "Fights(a_3, Morlocks) ::: The Time Traveller fights Morlocks to retrieve his machine.",
        "Plans(a_3, a_1) ::: The Time Traveller plans to take Weena back to his own time.",
        "OvercomeBy(a_1, Morlocks) ::: Weena is overcome by Morlocks in the night.",
        "Faints(a_1) ::: Weena faints.",
        "Escapes(a_3) ::: The Time Traveller escapes when a small fire he had left behind catches up to them.",
        "Devastated(a_3, a_1) ::: The Time Traveller is devastated over the loss of Weena.",
        "Conclusion:",
        "Devastated(a_3, a_1) ::: The Time Traveller is devastated over the loss of Weena."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 679,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 5,
      "paragraph": "Overwhelmed, he goes back to the machine and returns to Victorian time, arriving at his laboratory just three hours after he originally left. Interrupting dinner, he relates his adventures to his disbelieving visitors, producing as evidence two strange white flowers Weena had put in his pocket. The original narrator then takes over and relates that he returned to the Time Traveller's house the next day, finding him preparing for another journey. After promising to return in a short period of time, the narrator reveals that after 3 years of waiting, the Time Traveller has never returned.",
      "question_template": "The cause of McTeague's Dentistry business failure is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Weena",
        "The Time Traveller's house",
        "Victorian time"
      ],
      "predicates": [
        "Overwhelmed(x) ::: x is overwhelmed.",
        "GoesBack(x, y) ::: x goes back to location y.",
        "ArrivesAt(x, y) ::: x arrives at location y.",
        "RelatesAdventures(x, y) ::: x relates his adventures to person y.",
        "ProducesEvidence(x, y) ::: x produces evidence of item y.",
        "PreparesForJourney(x) ::: x prepares for another journey.",
        "PromisesToReturn(x, y) ::: x promises to return in a short period of time.",
        "NeverReturned(x) ::: x has never returned."
      ],
      "premises": [
        "Overwhelmed(timeTraveller) ::: The Time Traveller is overwhelmed.",
        "GoesBack(timeTraveller, machine) ::: The Time Traveller goes back to the machine.",
        "ArrivesAt(timeTraveller, laboratory) ::: The Time Traveller arrives at his laboratory.",
        "RelatesAdventures(timeTraveller, visitors) ::: The Time Traveller relates his adventures to his disbelieving visitors.",
        "ProducesEvidence(timeTraveller, strangeWhiteFlowers) ::: The Time Traveller produces as evidence the strange white flowers.",
        "ArrivesAt(originalNarrator, house) ::: The original narrator arrives at the Time Traveller's house the next day.",
        "PreparesForJourney(timeTraveller) ::: The Time Traveller is preparing for another journey.",
        "PromisesToReturn(originalNarrator, timeTraveller) ::: The original narrator promises to return in a short period of time.",
        "NeverReturned(timeTraveller) ::: The Time Traveller has never returned after 3 years of waiting."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "680": [
    {
      "id": 680,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 5,
      "paragraph": "Overwhelmed, he goes back to the machine and returns to Victorian time, arriving at his laboratory just three hours after he originally left. Interrupting dinner, he relates his adventures to his disbelieving visitors, producing as evidence two strange white flowers Weena had put in his pocket. The original narrator then takes over and relates that he returned to the Time Traveller's house the next day, finding him preparing for another journey. After promising to return in a short period of time, the narrator reveals that after 3 years of waiting, the Time Traveller has never returned.",
      "question_template": "Marcus's intent when moving South is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The Time Traveller has never returned."
      ],
      "predicates": [
        "Overwhelmed(x) ::: x is overwhelmed.",
        "GoesBack(x, y) ::: x goes back to location y.",
        "ArrivesAt(x, y) ::: x arrives at location y.",
        "RelatesAdventures(x, y) ::: x relates his adventures to person y.",
        "ProducesEvidence(x, y) ::: x produces evidence of item y.",
        "PreparesForJourney(x) ::: x prepares for another journey.",
        "PromisesToReturn(x, y) ::: x promises to return in a short period of time.",
        "NeverReturned(x) ::: x has never returned."
      ],
      "premises": [
        "Overwhelmed(timeTraveller) ::: The Time Traveller is overwhelmed.",
        "GoesBack(timeTraveller, machine) ::: The Time Traveller goes back to the machine.",
        "ArrivesAt(timeTraveller, laboratory) ::: The Time Traveller arrives at his laboratory.",
        "RelatesAdventures(timeTraveller, visitors) ::: The Time Traveller relates his adventures to his disbelieving visitors.",
        "ProducesEvidence(timeTraveller, strangeWhiteFlowers) ::: The Time Traveller produces as evidence the strange white flowers.",
        "ArrivesAt(originalNarrator, house) ::: The original narrator arrives at the Time Traveller's house the next day.",
        "PreparesForJourney(timeTraveller) ::: The Time Traveller is preparing for another journey.",
        "PromisesToReturn(originalNarrator, timeTraveller) ::: The original narrator promises to return in a short period of time.",
        "NeverReturned(timeTraveller) ::: The Time Traveller has never returned after 3 years of waiting."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "683": [
    {
      "id": 683,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 5,
      "paragraph": "Overwhelmed, he goes back to the machine and returns to Victorian time, arriving at his laboratory just three hours after he originally left. Interrupting dinner, he relates his adventures to his disbelieving visitors, producing as evidence two strange white flowers Weena had put in his pocket. The original narrator then takes over and relates that he returned to the Time Traveller's house the next day, finding him preparing for another journey. After promising to return in a short period of time, the narrator reveals that after 3 years of waiting, the Time Traveller has never returned.",
      "question_template": "Trina does [[CANDIDATE_ANSWER]] with her lottery winnings after withdrawing them from the firm.",
      "candidate_answers": [
        "Weena"
      ],
      "predicates": [
        "Overwhelmed(x) ::: x is overwhelmed.",
        "GoesBack(x, y) ::: x goes back to location y.",
        "ArrivesAt(x, y) ::: x arrives at location y.",
        "RelatesAdventures(x, y) ::: x relates his adventures to person y.",
        "ProducesEvidence(x, y) ::: x produces evidence of item y.",
        "PreparesForJourney(x) ::: x prepares for another journey.",
        "PromisesToReturn(x, y) ::: x promises to return in a short period of time.",
        "NeverReturned(x) ::: x has never returned."
      ],
      "premises": [
        "Overwhelmed(timeTraveller) ::: The Time Traveller is overwhelmed.",
        "GoesBack(timeTraveller, machine) ::: The Time Traveller goes back to the machine.",
        "ArrivesAt(timeTraveller, laboratory) ::: The Time Traveller arrives at his laboratory.",
        "RelatesAdventures(timeTraveller, visitors) ::: The Time Traveller relates his adventures to his disbelieving visitors.",
        "ProducesEvidence(timeTraveller, strangeWhiteFlowers) ::: The Time Traveller produces as evidence the strange white flowers.",
        "ArrivesAt(originalNarrator, house) ::: The original narrator arrives at the Time Traveller's house the next day.",
        "PreparesForJourney(timeTraveller) ::: The Time Traveller is preparing for another journey.",
        "PromisesToReturn(originalNarrator, timeTraveller) ::: The original narrator promises to return in a short period of time.",
        "NeverReturned(timeTraveller) ::: The Time Traveller has never returned after 3 years of waiting."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "684": [
    {
      "id": 684,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 2,
      "paragraph": "Returning to the site where he arrived, the Time Traveller is shocked to find his time machine missing, and eventually concludes that it has been dragged by some unknown party into a nearby structure with heavy doors, locked from the inside, which resembles a Sphinx. Luckily, he had removed the machine's levers before leaving it. Later in the dark, he is approached menacingly by the Morlocks, ape-like troglodytes who live in darkness underground and surface only at night. Within their dwellings he discovers the machinery and industry that makes the above-ground paradise possible. He alters his theory, speculating that the human race has evolved into two species: the leisured classes have become the ineffectual Eloi, and the downtrodden working classes have become the brutal light-fearing Morlocks. Deducing that the Morlocks have taken his time machine, he explores the Morlock tunnels, learning that due to a lack of any other means of sustenance, they feed on the Eloi. His revised analysis is that their relationship is not one of lords and servants, but of livestock and ranchers. The Time Traveller theorizes that intelligence is the result of and response to danger; with no real challenges facing the Eloi, they have lost the spirit, intelligence, and physical fitness of humanity at its peak.",
      "question_template": "Marcus searches for McTeague because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- They feed on the Eloi",
        "- The Morlocks have taken his time machine"
      ],
      "predicates": [
        "Missing(x) ::: x is missing.",
        "Shocked(x) ::: x is shocked to find something missing.",
        "Dragged(x, y) ::: x has been dragged by y.",
        "Resembles(x, y) ::: x resembles y.",
        "RemovedLevers(x) ::: x has removed the levers from the time machine.",
        "Approached(x, y) ::: x is approached by y.",
        "Discover(x, y) ::: x discovers y.",
        "AlterTheory(x, y) ::: x alters his theory about y.",
        "Evolved(x, y) ::: x has evolved into y.",
        "FeedOn(x, y) ::: x feeds on y.",
        "Relationship(x, y, z) ::: x has a relationship of type z with y.",
        "Theorizes(x, y) ::: x theorizes about y.",
        "Lost(x, y) ::: x has lost y."
      ],
      "premises": [
        "Missing(timeMachine) ∧ Shocked(timeTraveller) ::: The Time Traveller is shocked to find his time machine missing.",
        "Dragged(timeMachine, unknownParty) ::: The time machine has been dragged by some unknown party.",
        "Resembles(timeMachine, sphinx) ::: The structure resembles a Sphinx.",
        "RemovedLevers(timeTraveller) ::: The Time Traveller had removed the machine's levers before leaving it.",
        "Approached(timeTraveller, morlocks) ::: The Time Traveller is approached menacingly by the Morlocks.",
        "Discover(timeTraveller, machinery) ∧ Discover(timeTraveller, industry) ::: The Time Traveller discovers the machinery and industry that makes the above-ground paradise possible.",
        "AlterTheory(timeTraveller, species) ::: The Time Traveller alters his theory about the human race evolving into two species.",
        "Evolved(humanRace, (elois, morlocks)) ::: The human race has evolved into the Eloi and Morlocks.",
        "FeedOn(morlocks, eloi) ::: The Morlocks feed on the Eloi.",
        "Relationship(morlocks, eloi, livestockAndRanchers) ::: The relationship between Morlocks and Eloi is one of livestock and ranchers.",
        "Theorizes(timeTraveller, intelligence) ::: The Time Traveller theorizes that intelligence is the result of and response to danger.",
        "Lost(eloi, spirit) ∧ Lost(eloi, intelligence) ∧ Lost(eloi, physicalFitness) ::: The Eloi have lost the spirit, intelligence, and physical fitness of humanity at its peak."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 684,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 3,
      "paragraph": "Meanwhile, he saves an Eloi named Weena from drowning as none of the other Eloi take any notice of her plight, and they develop an innocently affectionate relationship over the course of several days. He takes Weena with him on an expedition to a distant structure that turns out to be the remains of a museum, where he finds a fresh supply of matches and fashions a crude weapon against Morlocks, whom he must fight to get back his machine. He plans to take Weena back to his own time. Because the long and tiring journey back to Weena's home is too much for them, they stop in the forest, and they are then overcome by Morlocks in the night, and Weena faints. The Traveller escapes when a small fire he had left behind them to distract the Morlocks catches up to them as a forest fire; Weena and the pursuing Morlocks are lost in the fire, and the Time Traveler is devastated over his loss.",
      "question_template": "Marcus searches for McTeague because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Weena faints",
        "They are then overcome by Morlocks in the night",
        "Weena and the pursuing Morlocks are lost in the fire"
      ],
      "predicates": [
        "Saves(x, y) ::: x saves y from danger.",
        "DevelopsAffectionateRelationship(x, y) ::: x develops an affectionate relationship with y.",
        "Takes(x, y, z) ::: x takes y with him on an expedition to z.",
        "Finds(x, y) ::: x finds y.",
        "Fights(x, y) ::: x fights y.",
        "Plans(x, y) ::: x plans to take y back to his own time.",
        "OvercomeBy(x, y) ::: x is overcome by y.",
        "Faints(x) ::: x faints.",
        "Escapes(x) ::: x escapes from danger.",
        "Devastated(x, y) ::: x is devastated over the loss of y."
      ],
      "premises": [
        "Saves(a_3, a_1) ::: The Time Traveller saves Weena from drowning.",
        "DevelopsAffectionateRelationship(a_3, a_1) ::: The Time Traveller develops an affectionate relationship with Weena.",
        "Takes(a_3, a_1, b_0) ::: The Time Traveller takes Weena with him on an expedition to a distant structure.",
        "Finds(a_3, c_0) ::: The Time Traveller finds a fresh supply of matches.",
        "Fights(a_3, Morlocks) ::: The Time Traveller fights Morlocks to retrieve his machine.",
        "Plans(a_3, a_1) ::: The Time Traveller plans to take Weena back to his own time.",
        "OvercomeBy(a_1, Morlocks) ::: Weena is overcome by Morlocks in the night.",
        "Faints(a_1) ::: Weena faints.",
        "Escapes(a_3) ::: The Time Traveller escapes when a small fire he had left behind catches up to them.",
        "Devastated(a_3, a_1) ::: The Time Traveller is devastated over the loss of Weena.",
        "Conclusion:",
        "Devastated(a_3, a_1) ::: The Time Traveller is devastated over the loss of Weena."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "685": [
    {
      "id": 685,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 4,
      "paragraph": "The Morlocks open the Sphinx and use the time machine as bait to capture the Traveller, not understanding that he will use it to escape. He reattaches the levers before he travels further ahead to roughly 30 million years from his own time. There he sees some of the last living things on a dying Earth: menacing reddish crab-like creatures slowly wandering the blood-red beaches chasing enormous butterflies in a world covered in simple lichenous vegetation. He continues to make short jumps through time, seeing Earth's rotation gradually cease and the sun grow larger, redder, and dimmer, and the world falling silent and freezing as the last degenerate living things die out.",
      "question_template": "Marcus's final assault on McTeague is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Some of the last living things on a dying Earth",
        "The world falling silent and freezing as the last degenerate living things die out"
      ],
      "predicates": [
        "Open(x, y) ::: x opens y.",
        "Use(x, y) ::: x uses y.",
        "Capture(x, y) ::: x captures y.",
        "Reattach(x, y) ::: x reattaches y.",
        "Travel(x, y) ::: x travels to y.",
        "See(x, y) ::: x sees y.",
        "Wander(x, y) ::: x wanders y.",
        "Chase(x, y) ::: x chases y.",
        "GrowLarger(x) ::: x grows larger.",
        "GrowRedder(x) ::: x grows redder.",
        "GrowDimmer(x) ::: x grows dimmer.",
        "FallSilent(x) ::: x falls silent.",
        "Freeze(x) ::: x freezes.",
        "DieOut(x) ::: x dies out."
      ],
      "premises": [
        "Open(morlocks, sphinx) ::: The Morlocks open the Sphinx.",
        "Use(morlocks, timeMachine) ::: The Morlocks use the time machine as bait.",
        "Capture(morlocks, traveller) ::: The Morlocks capture the Traveller.",
        "¬Understand(morlocks, escape(traveller)) ::: The Morlocks do not understand that the Traveller will use it to escape.",
        "Reattach(traveller, levers) ::: The Traveller reattaches the levers.",
        "Travel(traveller, 30MillionYears) ::: The Traveller travels roughly 30 million years from his own time.",
        "See(traveller, lastLivingThings) ::: The Traveller sees some of the last living things on a dying Earth.",
        "Wander(crabLikeCreatures, bloodRedBeaches) ::: Menacing reddish crab-like creatures wander the blood-red beaches.",
        "Chase(crabLikeCreatures, enormousButterflies) ::: Crab-like creatures chase enormous butterflies.",
        "Cover(world, simpleLichenousVegetation) ::: The world is covered in simple lichenous vegetation.",
        "Continue(traveller) ::: The Traveller continues to make short jumps through time.",
        "Cease(EarthRotation) ::: Earth's rotation gradually ceases.",
        "GrowLarger(sun) ::: The sun grows larger.",
        "GrowRedder(sun) ::: The sun grows redder.",
        "GrowDimmer(sun) ::: The sun grows dimmer.",
        "FallSilent(world) ::: The world falls silent.",
        "Freeze(world) ::: The world freezes.",
        "DieOut(lastDegenerateLivingThings) ::: The last degenerate living things die out.",
        "Conclusion:",
        "Experience(traveller, dyingEarth) ::: The Traveller experiences a dying Earth as he travels through time."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 685,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 5,
      "paragraph": "Overwhelmed, he goes back to the machine and returns to Victorian time, arriving at his laboratory just three hours after he originally left. Interrupting dinner, he relates his adventures to his disbelieving visitors, producing as evidence two strange white flowers Weena had put in his pocket. The original narrator then takes over and relates that he returned to the Time Traveller's house the next day, finding him preparing for another journey. After promising to return in a short period of time, the narrator reveals that after 3 years of waiting, the Time Traveller has never returned.",
      "question_template": "Marcus's final assault on McTeague is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "No relevant information found in the paragraph."
      ],
      "predicates": [
        "Overwhelmed(x) ::: x is overwhelmed.",
        "GoesBack(x, y) ::: x goes back to location y.",
        "ArrivesAt(x, y) ::: x arrives at location y.",
        "RelatesAdventures(x, y) ::: x relates his adventures to person y.",
        "ProducesEvidence(x, y) ::: x produces evidence of item y.",
        "PreparesForJourney(x) ::: x prepares for another journey.",
        "PromisesToReturn(x, y) ::: x promises to return in a short period of time.",
        "NeverReturned(x) ::: x has never returned."
      ],
      "premises": [
        "Overwhelmed(timeTraveller) ::: The Time Traveller is overwhelmed.",
        "GoesBack(timeTraveller, machine) ::: The Time Traveller goes back to the machine.",
        "ArrivesAt(timeTraveller, laboratory) ::: The Time Traveller arrives at his laboratory.",
        "RelatesAdventures(timeTraveller, visitors) ::: The Time Traveller relates his adventures to his disbelieving visitors.",
        "ProducesEvidence(timeTraveller, strangeWhiteFlowers) ::: The Time Traveller produces as evidence the strange white flowers.",
        "ArrivesAt(originalNarrator, house) ::: The original narrator arrives at the Time Traveller's house the next day.",
        "PreparesForJourney(timeTraveller) ::: The Time Traveller is preparing for another journey.",
        "PromisesToReturn(originalNarrator, timeTraveller) ::: The original narrator promises to return in a short period of time.",
        "NeverReturned(timeTraveller) ::: The Time Traveller has never returned after 3 years of waiting."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "686": [
    {
      "id": 686,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 5,
      "paragraph": "Overwhelmed, he goes back to the machine and returns to Victorian time, arriving at his laboratory just three hours after he originally left. Interrupting dinner, he relates his adventures to his disbelieving visitors, producing as evidence two strange white flowers Weena had put in his pocket. The original narrator then takes over and relates that he returned to the Time Traveller's house the next day, finding him preparing for another journey. After promising to return in a short period of time, the narrator reveals that after 3 years of waiting, the Time Traveller has never returned.",
      "question_template": "The Time Traveller lives [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Two strange white flowers"
      ],
      "predicates": [
        "Overwhelmed(x) ::: x is overwhelmed.",
        "GoesBack(x, y) ::: x goes back to location y.",
        "ArrivesAt(x, y) ::: x arrives at location y.",
        "RelatesAdventures(x, y) ::: x relates his adventures to person y.",
        "ProducesEvidence(x, y) ::: x produces evidence of item y.",
        "PreparesForJourney(x) ::: x prepares for another journey.",
        "PromisesToReturn(x, y) ::: x promises to return in a short period of time.",
        "NeverReturned(x) ::: x has never returned."
      ],
      "premises": [
        "Overwhelmed(timeTraveller) ::: The Time Traveller is overwhelmed.",
        "GoesBack(timeTraveller, machine) ::: The Time Traveller goes back to the machine.",
        "ArrivesAt(timeTraveller, laboratory) ::: The Time Traveller arrives at his laboratory.",
        "RelatesAdventures(timeTraveller, visitors) ::: The Time Traveller relates his adventures to his disbelieving visitors.",
        "ProducesEvidence(timeTraveller, strangeWhiteFlowers) ::: The Time Traveller produces as evidence the strange white flowers.",
        "ArrivesAt(originalNarrator, house) ::: The original narrator arrives at the Time Traveller's house the next day.",
        "PreparesForJourney(timeTraveller) ::: The Time Traveller is preparing for another journey.",
        "PromisesToReturn(originalNarrator, timeTraveller) ::: The original narrator promises to return in a short period of time.",
        "NeverReturned(timeTraveller) ::: The Time Traveller has never returned after 3 years of waiting."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "687": [
    {
      "id": 687,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 1,
      "paragraph": "In the new narrative, the Time Traveller tests his device with a journey that takes him to A.D. 802,701, where he meets the Eloi, a society of small, elegant, childlike adults. They live in small communities within large and futuristic yet slowly deteriorating buildings, doing no work and having a frugivorous diet. His efforts to communicate with them are hampered by their lack of curiosity or discipline, and he speculates that they are a peaceful, communist society, the result of humanity conquering nature with technology, and subsequently evolving to adapt to an environment in which strength and intellect are no longer advantageous to survival.",
      "question_template": "[[CANDIDATE_ANSWER]] are the small, elegant, childlike adults.",
      "candidate_answers": [
        "a frugivorous diet"
      ],
      "predicates": [
        "Eloi(x) ::: x is an Eloi.",
        "TimeTraveller(x) ::: x is the Time Traveller.",
        "Curious(x) ::: x is curious.",
        "Disciplined(x) ::: x is disciplined.",
        "Frugivorous(x) ::: x has a frugivorous diet.",
        "CommunicatesWith(x, y) ::: x communicates with y.",
        "LivesIn(x, y) ::: x lives in location y.",
        "Work(x) ::: x does work.",
        "Peaceful(x) ::: x is peaceful.",
        "CommunistSociety(x) ::: x is a communist society.",
        "TechnologicallyAdvanced(x) ::: x is technologically advanced.",
        "AdaptsToEnvironment(x) ::: x adapts to the environment.",
        "StrengthAdvantageous(x) ::: x has strength advantageous for survival.",
        "IntellectAdvantageous(x) ::: x has intellect advantageous for survival."
      ],
      "premises": [
        "Eloi(x) → (Frugivorous(x) ∧ ¬Work(x) ∧ ¬Curious(x) ∧ ¬Disciplined(x)) ::: The Eloi live a frugivorous lifestyle, do no work, and lack curiosity and discipline.",
        "TimeTraveller(a_3) ∧ LivesIn(a_3, b_0) ∧ CommunicatesWith(a_3, Eloi) ::: The Time Traveller tests his device and communicates with the Eloi in A.D. 802,701.",
        "Eloi(x) → (Peaceful(x) ∧ CommunistSociety(x)) ::: The Eloi are a peaceful, communist society.",
        "TechnologicallyAdvanced(humanity) ∧ AdaptsToEnvironment(Eloi) ∧ ¬(StrengthAdvantageous(Eloi) ∧ IntellectAdvantageous(Eloi)) ::: The Eloi are a result of humanity's evolution in a technologically advanced environment, where strength and intellect are no longer advantageous for survival."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 687,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 2,
      "paragraph": "Returning to the site where he arrived, the Time Traveller is shocked to find his time machine missing, and eventually concludes that it has been dragged by some unknown party into a nearby structure with heavy doors, locked from the inside, which resembles a Sphinx. Luckily, he had removed the machine's levers before leaving it. Later in the dark, he is approached menacingly by the Morlocks, ape-like troglodytes who live in darkness underground and surface only at night. Within their dwellings he discovers the machinery and industry that makes the above-ground paradise possible. He alters his theory, speculating that the human race has evolved into two species: the leisured classes have become the ineffectual Eloi, and the downtrodden working classes have become the brutal light-fearing Morlocks. Deducing that the Morlocks have taken his time machine, he explores the Morlock tunnels, learning that due to a lack of any other means of sustenance, they feed on the Eloi. His revised analysis is that their relationship is not one of lords and servants, but of livestock and ranchers. The Time Traveller theorizes that intelligence is the result of and response to danger; with no real challenges facing the Eloi, they have lost the spirit, intelligence, and physical fitness of humanity at its peak.",
      "question_template": "[[CANDIDATE_ANSWER]] are the small, elegant, childlike adults.",
      "candidate_answers": [
        "The leisured classes have become the ineffectual Eloi",
        "The Morlocks feed on the Eloi",
        "Their relationship is not one of lords and servants, but of livestock and ranchers"
      ],
      "predicates": [
        "Missing(x) ::: x is missing.",
        "Shocked(x) ::: x is shocked to find something missing.",
        "Dragged(x, y) ::: x has been dragged by y.",
        "Resembles(x, y) ::: x resembles y.",
        "RemovedLevers(x) ::: x has removed the levers from the time machine.",
        "Approached(x, y) ::: x is approached by y.",
        "Discover(x, y) ::: x discovers y.",
        "AlterTheory(x, y) ::: x alters his theory about y.",
        "Evolved(x, y) ::: x has evolved into y.",
        "FeedOn(x, y) ::: x feeds on y.",
        "Relationship(x, y, z) ::: x has a relationship of type z with y.",
        "Theorizes(x, y) ::: x theorizes about y.",
        "Lost(x, y) ::: x has lost y."
      ],
      "premises": [
        "Missing(timeMachine) ∧ Shocked(timeTraveller) ::: The Time Traveller is shocked to find his time machine missing.",
        "Dragged(timeMachine, unknownParty) ::: The time machine has been dragged by some unknown party.",
        "Resembles(timeMachine, sphinx) ::: The structure resembles a Sphinx.",
        "RemovedLevers(timeTraveller) ::: The Time Traveller had removed the machine's levers before leaving it.",
        "Approached(timeTraveller, morlocks) ::: The Time Traveller is approached menacingly by the Morlocks.",
        "Discover(timeTraveller, machinery) ∧ Discover(timeTraveller, industry) ::: The Time Traveller discovers the machinery and industry that makes the above-ground paradise possible.",
        "AlterTheory(timeTraveller, species) ::: The Time Traveller alters his theory about the human race evolving into two species.",
        "Evolved(humanRace, (elois, morlocks)) ::: The human race has evolved into the Eloi and Morlocks.",
        "FeedOn(morlocks, eloi) ::: The Morlocks feed on the Eloi.",
        "Relationship(morlocks, eloi, livestockAndRanchers) ::: The relationship between Morlocks and Eloi is one of livestock and ranchers.",
        "Theorizes(timeTraveller, intelligence) ::: The Time Traveller theorizes that intelligence is the result of and response to danger.",
        "Lost(eloi, spirit) ∧ Lost(eloi, intelligence) ∧ Lost(eloi, physicalFitness) ::: The Eloi have lost the spirit, intelligence, and physical fitness of humanity at its peak."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "688": [
    {
      "id": 688,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 2,
      "paragraph": "Returning to the site where he arrived, the Time Traveller is shocked to find his time machine missing, and eventually concludes that it has been dragged by some unknown party into a nearby structure with heavy doors, locked from the inside, which resembles a Sphinx. Luckily, he had removed the machine's levers before leaving it. Later in the dark, he is approached menacingly by the Morlocks, ape-like troglodytes who live in darkness underground and surface only at night. Within their dwellings he discovers the machinery and industry that makes the above-ground paradise possible. He alters his theory, speculating that the human race has evolved into two species: the leisured classes have become the ineffectual Eloi, and the downtrodden working classes have become the brutal light-fearing Morlocks. Deducing that the Morlocks have taken his time machine, he explores the Morlock tunnels, learning that due to a lack of any other means of sustenance, they feed on the Eloi. His revised analysis is that their relationship is not one of lords and servants, but of livestock and ranchers. The Time Traveller theorizes that intelligence is the result of and response to danger; with no real challenges facing the Eloi, they have lost the spirit, intelligence, and physical fitness of humanity at its peak.",
      "question_template": "[[CANDIDATE_ANSWER]] are the ape-like troglodytes that live in the underground cave.",
      "candidate_answers": [
        "- ape-like troglodytes who live in darkness underground",
        "- Morlock tunnels",
        "- within their dwellings"
      ],
      "predicates": [
        "Missing(x) ::: x is missing.",
        "Shocked(x) ::: x is shocked to find something missing.",
        "Dragged(x, y) ::: x has been dragged by y.",
        "Resembles(x, y) ::: x resembles y.",
        "RemovedLevers(x) ::: x has removed the levers from the time machine.",
        "Approached(x, y) ::: x is approached by y.",
        "Discover(x, y) ::: x discovers y.",
        "AlterTheory(x, y) ::: x alters his theory about y.",
        "Evolved(x, y) ::: x has evolved into y.",
        "FeedOn(x, y) ::: x feeds on y.",
        "Relationship(x, y, z) ::: x has a relationship of type z with y.",
        "Theorizes(x, y) ::: x theorizes about y.",
        "Lost(x, y) ::: x has lost y."
      ],
      "premises": [
        "Missing(timeMachine) ∧ Shocked(timeTraveller) ::: The Time Traveller is shocked to find his time machine missing.",
        "Dragged(timeMachine, unknownParty) ::: The time machine has been dragged by some unknown party.",
        "Resembles(timeMachine, sphinx) ::: The structure resembles a Sphinx.",
        "RemovedLevers(timeTraveller) ::: The Time Traveller had removed the machine's levers before leaving it.",
        "Approached(timeTraveller, morlocks) ::: The Time Traveller is approached menacingly by the Morlocks.",
        "Discover(timeTraveller, machinery) ∧ Discover(timeTraveller, industry) ::: The Time Traveller discovers the machinery and industry that makes the above-ground paradise possible.",
        "AlterTheory(timeTraveller, species) ::: The Time Traveller alters his theory about the human race evolving into two species.",
        "Evolved(humanRace, (elois, morlocks)) ::: The human race has evolved into the Eloi and Morlocks.",
        "FeedOn(morlocks, eloi) ::: The Morlocks feed on the Eloi.",
        "Relationship(morlocks, eloi, livestockAndRanchers) ::: The relationship between Morlocks and Eloi is one of livestock and ranchers.",
        "Theorizes(timeTraveller, intelligence) ::: The Time Traveller theorizes that intelligence is the result of and response to danger.",
        "Lost(eloi, spirit) ∧ Lost(eloi, intelligence) ∧ Lost(eloi, physicalFitness) ::: The Eloi have lost the spirit, intelligence, and physical fitness of humanity at its peak."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 688,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 4,
      "paragraph": "The Morlocks open the Sphinx and use the time machine as bait to capture the Traveller, not understanding that he will use it to escape. He reattaches the levers before he travels further ahead to roughly 30 million years from his own time. There he sees some of the last living things on a dying Earth: menacing reddish crab-like creatures slowly wandering the blood-red beaches chasing enormous butterflies in a world covered in simple lichenous vegetation. He continues to make short jumps through time, seeing Earth's rotation gradually cease and the sun grow larger, redder, and dimmer, and the world falling silent and freezing as the last degenerate living things die out.",
      "question_template": "[[CANDIDATE_ANSWER]] are the ape-like troglodytes that live in the underground cave.",
      "candidate_answers": [
        "The Morlocks",
        "The Sphinx"
      ],
      "predicates": [
        "Open(x, y) ::: x opens y.",
        "Use(x, y) ::: x uses y.",
        "Capture(x, y) ::: x captures y.",
        "Reattach(x, y) ::: x reattaches y.",
        "Travel(x, y) ::: x travels to y.",
        "See(x, y) ::: x sees y.",
        "Wander(x, y) ::: x wanders y.",
        "Chase(x, y) ::: x chases y.",
        "GrowLarger(x) ::: x grows larger.",
        "GrowRedder(x) ::: x grows redder.",
        "GrowDimmer(x) ::: x grows dimmer.",
        "FallSilent(x) ::: x falls silent.",
        "Freeze(x) ::: x freezes.",
        "DieOut(x) ::: x dies out."
      ],
      "premises": [
        "Open(morlocks, sphinx) ::: The Morlocks open the Sphinx.",
        "Use(morlocks, timeMachine) ::: The Morlocks use the time machine as bait.",
        "Capture(morlocks, traveller) ::: The Morlocks capture the Traveller.",
        "¬Understand(morlocks, escape(traveller)) ::: The Morlocks do not understand that the Traveller will use it to escape.",
        "Reattach(traveller, levers) ::: The Traveller reattaches the levers.",
        "Travel(traveller, 30MillionYears) ::: The Traveller travels roughly 30 million years from his own time.",
        "See(traveller, lastLivingThings) ::: The Traveller sees some of the last living things on a dying Earth.",
        "Wander(crabLikeCreatures, bloodRedBeaches) ::: Menacing reddish crab-like creatures wander the blood-red beaches.",
        "Chase(crabLikeCreatures, enormousButterflies) ::: Crab-like creatures chase enormous butterflies.",
        "Cover(world, simpleLichenousVegetation) ::: The world is covered in simple lichenous vegetation.",
        "Continue(traveller) ::: The Traveller continues to make short jumps through time.",
        "Cease(EarthRotation) ::: Earth's rotation gradually ceases.",
        "GrowLarger(sun) ::: The sun grows larger.",
        "GrowRedder(sun) ::: The sun grows redder.",
        "GrowDimmer(sun) ::: The sun grows dimmer.",
        "FallSilent(world) ::: The world falls silent.",
        "Freeze(world) ::: The world freezes.",
        "DieOut(lastDegenerateLivingThings) ::: The last degenerate living things die out.",
        "Conclusion:",
        "Experience(traveller, dyingEarth) ::: The Traveller experiences a dying Earth as he travels through time."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "689": [
    {
      "id": 689,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 1,
      "paragraph": "In the new narrative, the Time Traveller tests his device with a journey that takes him to A.D. 802,701, where he meets the Eloi, a society of small, elegant, childlike adults. They live in small communities within large and futuristic yet slowly deteriorating buildings, doing no work and having a frugivorous diet. His efforts to communicate with them are hampered by their lack of curiosity or discipline, and he speculates that they are a peaceful, communist society, the result of humanity conquering nature with technology, and subsequently evolving to adapt to an environment in which strength and intellect are no longer advantageous to survival.",
      "question_template": "The Morlocks eat [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The Eloi, a society of small, elegant, childlike adults",
        "They live in small communities within large and futuristic yet slowly deteriorating buildings",
        "Doing no work and having a frugivorous diet",
        "Speculates that they are a peaceful, communist society",
        "Humanity conquering nature with technology",
        "Subsequently evolving to adapt to an environment in which strength and intellect are no longer advantageous to survival"
      ],
      "predicates": [
        "Eloi(x) ::: x is an Eloi.",
        "TimeTraveller(x) ::: x is the Time Traveller.",
        "Curious(x) ::: x is curious.",
        "Disciplined(x) ::: x is disciplined.",
        "Frugivorous(x) ::: x has a frugivorous diet.",
        "CommunicatesWith(x, y) ::: x communicates with y.",
        "LivesIn(x, y) ::: x lives in location y.",
        "Work(x) ::: x does work.",
        "Peaceful(x) ::: x is peaceful.",
        "CommunistSociety(x) ::: x is a communist society.",
        "TechnologicallyAdvanced(x) ::: x is technologically advanced.",
        "AdaptsToEnvironment(x) ::: x adapts to the environment.",
        "StrengthAdvantageous(x) ::: x has strength advantageous for survival.",
        "IntellectAdvantageous(x) ::: x has intellect advantageous for survival."
      ],
      "premises": [
        "Eloi(x) → (Frugivorous(x) ∧ ¬Work(x) ∧ ¬Curious(x) ∧ ¬Disciplined(x)) ::: The Eloi live a frugivorous lifestyle, do no work, and lack curiosity and discipline.",
        "TimeTraveller(a_3) ∧ LivesIn(a_3, b_0) ∧ CommunicatesWith(a_3, Eloi) ::: The Time Traveller tests his device and communicates with the Eloi in A.D. 802,701.",
        "Eloi(x) → (Peaceful(x) ∧ CommunistSociety(x)) ::: The Eloi are a peaceful, communist society.",
        "TechnologicallyAdvanced(humanity) ∧ AdaptsToEnvironment(Eloi) ∧ ¬(StrengthAdvantageous(Eloi) ∧ IntellectAdvantageous(Eloi)) ::: The Eloi are a result of humanity's evolution in a technologically advanced environment, where strength and intellect are no longer advantageous for survival."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "691": [
    {
      "id": 691,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 1,
      "paragraph": "In the new narrative, the Time Traveller tests his device with a journey that takes him to A.D. 802,701, where he meets the Eloi, a society of small, elegant, childlike adults. They live in small communities within large and futuristic yet slowly deteriorating buildings, doing no work and having a frugivorous diet. His efforts to communicate with them are hampered by their lack of curiosity or discipline, and he speculates that they are a peaceful, communist society, the result of humanity conquering nature with technology, and subsequently evolving to adapt to an environment in which strength and intellect are no longer advantageous to survival.",
      "question_template": "The structure where the Time Machine looks like [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "A.D. 802,701",
        "The Time Traveller tests his device with a journey"
      ],
      "predicates": [
        "Eloi(x) ::: x is an Eloi.",
        "TimeTraveller(x) ::: x is the Time Traveller.",
        "Curious(x) ::: x is curious.",
        "Disciplined(x) ::: x is disciplined.",
        "Frugivorous(x) ::: x has a frugivorous diet.",
        "CommunicatesWith(x, y) ::: x communicates with y.",
        "LivesIn(x, y) ::: x lives in location y.",
        "Work(x) ::: x does work.",
        "Peaceful(x) ::: x is peaceful.",
        "CommunistSociety(x) ::: x is a communist society.",
        "TechnologicallyAdvanced(x) ::: x is technologically advanced.",
        "AdaptsToEnvironment(x) ::: x adapts to the environment.",
        "StrengthAdvantageous(x) ::: x has strength advantageous for survival.",
        "IntellectAdvantageous(x) ::: x has intellect advantageous for survival."
      ],
      "premises": [
        "Eloi(x) → (Frugivorous(x) ∧ ¬Work(x) ∧ ¬Curious(x) ∧ ¬Disciplined(x)) ::: The Eloi live a frugivorous lifestyle, do no work, and lack curiosity and discipline.",
        "TimeTraveller(a_3) ∧ LivesIn(a_3, b_0) ∧ CommunicatesWith(a_3, Eloi) ::: The Time Traveller tests his device and communicates with the Eloi in A.D. 802,701.",
        "Eloi(x) → (Peaceful(x) ∧ CommunistSociety(x)) ::: The Eloi are a peaceful, communist society.",
        "TechnologicallyAdvanced(humanity) ∧ AdaptsToEnvironment(Eloi) ∧ ¬(StrengthAdvantageous(Eloi) ∧ IntellectAdvantageous(Eloi)) ::: The Eloi are a result of humanity's evolution in a technologically advanced environment, where strength and intellect are no longer advantageous for survival."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 691,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 4,
      "paragraph": "The Morlocks open the Sphinx and use the time machine as bait to capture the Traveller, not understanding that he will use it to escape. He reattaches the levers before he travels further ahead to roughly 30 million years from his own time. There he sees some of the last living things on a dying Earth: menacing reddish crab-like creatures slowly wandering the blood-red beaches chasing enormous butterflies in a world covered in simple lichenous vegetation. He continues to make short jumps through time, seeing Earth's rotation gradually cease and the sun grow larger, redder, and dimmer, and the world falling silent and freezing as the last degenerate living things die out.",
      "question_template": "The structure where the Time Machine looks like [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The Morlocks open the Sphinx and use the time machine as bait to capture the Traveller",
        "He reattaches the levers before he travels further ahead to roughly 30 million years from his own time"
      ],
      "predicates": [
        "Open(x, y) ::: x opens y.",
        "Use(x, y) ::: x uses y.",
        "Capture(x, y) ::: x captures y.",
        "Reattach(x, y) ::: x reattaches y.",
        "Travel(x, y) ::: x travels to y.",
        "See(x, y) ::: x sees y.",
        "Wander(x, y) ::: x wanders y.",
        "Chase(x, y) ::: x chases y.",
        "GrowLarger(x) ::: x grows larger.",
        "GrowRedder(x) ::: x grows redder.",
        "GrowDimmer(x) ::: x grows dimmer.",
        "FallSilent(x) ::: x falls silent.",
        "Freeze(x) ::: x freezes.",
        "DieOut(x) ::: x dies out."
      ],
      "premises": [
        "Open(morlocks, sphinx) ::: The Morlocks open the Sphinx.",
        "Use(morlocks, timeMachine) ::: The Morlocks use the time machine as bait.",
        "Capture(morlocks, traveller) ::: The Morlocks capture the Traveller.",
        "¬Understand(morlocks, escape(traveller)) ::: The Morlocks do not understand that the Traveller will use it to escape.",
        "Reattach(traveller, levers) ::: The Traveller reattaches the levers.",
        "Travel(traveller, 30MillionYears) ::: The Traveller travels roughly 30 million years from his own time.",
        "See(traveller, lastLivingThings) ::: The Traveller sees some of the last living things on a dying Earth.",
        "Wander(crabLikeCreatures, bloodRedBeaches) ::: Menacing reddish crab-like creatures wander the blood-red beaches.",
        "Chase(crabLikeCreatures, enormousButterflies) ::: Crab-like creatures chase enormous butterflies.",
        "Cover(world, simpleLichenousVegetation) ::: The world is covered in simple lichenous vegetation.",
        "Continue(traveller) ::: The Traveller continues to make short jumps through time.",
        "Cease(EarthRotation) ::: Earth's rotation gradually ceases.",
        "GrowLarger(sun) ::: The sun grows larger.",
        "GrowRedder(sun) ::: The sun grows redder.",
        "GrowDimmer(sun) ::: The sun grows dimmer.",
        "FallSilent(world) ::: The world falls silent.",
        "Freeze(world) ::: The world freezes.",
        "DieOut(lastDegenerateLivingThings) ::: The last degenerate living things die out.",
        "Conclusion:",
        "Experience(traveller, dyingEarth) ::: The Traveller experiences a dying Earth as he travels through time."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 691,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 5,
      "paragraph": "Overwhelmed, he goes back to the machine and returns to Victorian time, arriving at his laboratory just three hours after he originally left. Interrupting dinner, he relates his adventures to his disbelieving visitors, producing as evidence two strange white flowers Weena had put in his pocket. The original narrator then takes over and relates that he returned to the Time Traveller's house the next day, finding him preparing for another journey. After promising to return in a short period of time, the narrator reveals that after 3 years of waiting, the Time Traveller has never returned.",
      "question_template": "The structure where the Time Machine looks like [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Victorian time"
      ],
      "predicates": [
        "Overwhelmed(x) ::: x is overwhelmed.",
        "GoesBack(x, y) ::: x goes back to location y.",
        "ArrivesAt(x, y) ::: x arrives at location y.",
        "RelatesAdventures(x, y) ::: x relates his adventures to person y.",
        "ProducesEvidence(x, y) ::: x produces evidence of item y.",
        "PreparesForJourney(x) ::: x prepares for another journey.",
        "PromisesToReturn(x, y) ::: x promises to return in a short period of time.",
        "NeverReturned(x) ::: x has never returned."
      ],
      "premises": [
        "Overwhelmed(timeTraveller) ::: The Time Traveller is overwhelmed.",
        "GoesBack(timeTraveller, machine) ::: The Time Traveller goes back to the machine.",
        "ArrivesAt(timeTraveller, laboratory) ::: The Time Traveller arrives at his laboratory.",
        "RelatesAdventures(timeTraveller, visitors) ::: The Time Traveller relates his adventures to his disbelieving visitors.",
        "ProducesEvidence(timeTraveller, strangeWhiteFlowers) ::: The Time Traveller produces as evidence the strange white flowers.",
        "ArrivesAt(originalNarrator, house) ::: The original narrator arrives at the Time Traveller's house the next day.",
        "PreparesForJourney(timeTraveller) ::: The Time Traveller is preparing for another journey.",
        "PromisesToReturn(originalNarrator, timeTraveller) ::: The original narrator promises to return in a short period of time.",
        "NeverReturned(timeTraveller) ::: The Time Traveller has never returned after 3 years of waiting."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "692": [
    {
      "id": 692,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 0,
      "paragraph": " The book's protagonist is an English scientist and gentleman inventor living in Richmond, Surrey, in Victorian England, and identified by a narrator simply as the Time Traveller. The narrator recounts the Traveller's lecture to his weekly dinner guests that time is simply a fourth dimension, and his demonstration of a tabletop model machine for travelling through it. He reveals that he has built a machine capable of carrying a person through time, and returns at dinner the following week to recount a remarkable tale, becoming the new narrator.",
      "question_template": "The Time Traveller took [[CANDIDATE_ANSWER]] from the time machine to stop anyone from using it.",
      "candidate_answers": [
        "Weena",
        "Hides in the Traveller's pocket"
      ],
      "predicates": [
        "EnglishScientist(x) ::: x is an English scientist.",
        "GentlemanInventor(x) ::: x is a gentleman inventor.",
        "LivesIn(x, y) ::: x lives in location y.",
        "TimeTraveller(x) ::: x is the Time Traveller.",
        "Lecture(x, y) ::: x gives a lecture on topic y.",
        "Demonstrates(x, y) ::: x demonstrates item y.",
        "Built(x, y) ::: x built item y.",
        "Machine(x) ::: x is a machine.",
        "CarriesThroughTime(x, y) ::: x can carry person y through time.",
        "Narrator(x) ::: x is a narrator.",
        "RemarkableTale(x) ::: x is a remarkable tale."
      ],
      "premises": [
        "EnglishScientist(timeTraveller) ∧ GentlemanInventor(timeTraveller) ∧ LivesIn(timeTraveller, richmond) ∧ LivesIn(timeTraveller, surrey) ∧ LivesIn(timeTraveller, victorianTime) ::: The Time Traveller is an English scientist and gentleman inventor living in Richmond, Surrey, in Victorian England.",
        "Lecture(timeTraveller, fourthDimension) ::: The Time Traveller gives a lecture that time is simply a fourth dimension.",
        "Demonstrates(timeTraveller, tabletopModelMachine) ::: The Time Traveller demonstrates a tabletop model machine for travelling through time.",
        "Built(timeTraveller, timeMachine) ::: The Time Traveller built a machine capable of carrying a person through time.",
        "Narrator(originalNarrator) ∧ Narrator(timeTraveller) ::: The original narrator recounts the Time Traveller's lecture and becomes the new narrator after the Time Traveller returns at dinner the following week to recount a remarkable tale.",
        "RemarkableTale(timeTraveller) ::: The Time Traveller recounts a remarkable tale.",
        "Conclusion:",
        "CarriesThroughTime(timeMachine, timeTraveller) ::: The machine built by the Time Traveller can carry him through time."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 692,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 5,
      "paragraph": "Overwhelmed, he goes back to the machine and returns to Victorian time, arriving at his laboratory just three hours after he originally left. Interrupting dinner, he relates his adventures to his disbelieving visitors, producing as evidence two strange white flowers Weena had put in his pocket. The original narrator then takes over and relates that he returned to the Time Traveller's house the next day, finding him preparing for another journey. After promising to return in a short period of time, the narrator reveals that after 3 years of waiting, the Time Traveller has never returned.",
      "question_template": "The Time Traveller took [[CANDIDATE_ANSWER]] from the time machine to stop anyone from using it.",
      "candidate_answers": [
        "two strange white flowers"
      ],
      "predicates": [
        "Overwhelmed(x) ::: x is overwhelmed.",
        "GoesBack(x, y) ::: x goes back to location y.",
        "ArrivesAt(x, y) ::: x arrives at location y.",
        "RelatesAdventures(x, y) ::: x relates his adventures to person y.",
        "ProducesEvidence(x, y) ::: x produces evidence of item y.",
        "PreparesForJourney(x) ::: x prepares for another journey.",
        "PromisesToReturn(x, y) ::: x promises to return in a short period of time.",
        "NeverReturned(x) ::: x has never returned."
      ],
      "premises": [
        "Overwhelmed(timeTraveller) ::: The Time Traveller is overwhelmed.",
        "GoesBack(timeTraveller, machine) ::: The Time Traveller goes back to the machine.",
        "ArrivesAt(timeTraveller, laboratory) ::: The Time Traveller arrives at his laboratory.",
        "RelatesAdventures(timeTraveller, visitors) ::: The Time Traveller relates his adventures to his disbelieving visitors.",
        "ProducesEvidence(timeTraveller, strangeWhiteFlowers) ::: The Time Traveller produces as evidence the strange white flowers.",
        "ArrivesAt(originalNarrator, house) ::: The original narrator arrives at the Time Traveller's house the next day.",
        "PreparesForJourney(timeTraveller) ::: The Time Traveller is preparing for another journey.",
        "PromisesToReturn(originalNarrator, timeTraveller) ::: The original narrator promises to return in a short period of time.",
        "NeverReturned(timeTraveller) ::: The Time Traveller has never returned after 3 years of waiting."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "694": [
    {
      "id": 694,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 0,
      "paragraph": " The book's protagonist is an English scientist and gentleman inventor living in Richmond, Surrey, in Victorian England, and identified by a narrator simply as the Time Traveller. The narrator recounts the Traveller's lecture to his weekly dinner guests that time is simply a fourth dimension, and his demonstration of a tabletop model machine for travelling through it. He reveals that he has built a machine capable of carrying a person through time, and returns at dinner the following week to recount a remarkable tale, becoming the new narrator.",
      "question_template": "The Time Traveller shows [[CANDIDATE_ANSWER]] as proof of his journey.",
      "candidate_answers": [
        "Richmond, Surrey"
      ],
      "predicates": [
        "EnglishScientist(x) ::: x is an English scientist.",
        "GentlemanInventor(x) ::: x is a gentleman inventor.",
        "LivesIn(x, y) ::: x lives in location y.",
        "TimeTraveller(x) ::: x is the Time Traveller.",
        "Lecture(x, y) ::: x gives a lecture on topic y.",
        "Demonstrates(x, y) ::: x demonstrates item y.",
        "Built(x, y) ::: x built item y.",
        "Machine(x) ::: x is a machine.",
        "CarriesThroughTime(x, y) ::: x can carry person y through time.",
        "Narrator(x) ::: x is a narrator.",
        "RemarkableTale(x) ::: x is a remarkable tale."
      ],
      "premises": [
        "EnglishScientist(timeTraveller) ∧ GentlemanInventor(timeTraveller) ∧ LivesIn(timeTraveller, richmond) ∧ LivesIn(timeTraveller, surrey) ∧ LivesIn(timeTraveller, victorianTime) ::: The Time Traveller is an English scientist and gentleman inventor living in Richmond, Surrey, in Victorian England.",
        "Lecture(timeTraveller, fourthDimension) ::: The Time Traveller gives a lecture that time is simply a fourth dimension.",
        "Demonstrates(timeTraveller, tabletopModelMachine) ::: The Time Traveller demonstrates a tabletop model machine for travelling through time.",
        "Built(timeTraveller, timeMachine) ::: The Time Traveller built a machine capable of carrying a person through time.",
        "Narrator(originalNarrator) ∧ Narrator(timeTraveller) ::: The original narrator recounts the Time Traveller's lecture and becomes the new narrator after the Time Traveller returns at dinner the following week to recount a remarkable tale.",
        "RemarkableTale(timeTraveller) ::: The Time Traveller recounts a remarkable tale.",
        "Conclusion:",
        "CarriesThroughTime(timeMachine, timeTraveller) ::: The machine built by the Time Traveller can carry him through time."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 694,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 5,
      "paragraph": "Overwhelmed, he goes back to the machine and returns to Victorian time, arriving at his laboratory just three hours after he originally left. Interrupting dinner, he relates his adventures to his disbelieving visitors, producing as evidence two strange white flowers Weena had put in his pocket. The original narrator then takes over and relates that he returned to the Time Traveller's house the next day, finding him preparing for another journey. After promising to return in a short period of time, the narrator reveals that after 3 years of waiting, the Time Traveller has never returned.",
      "question_template": "The Time Traveller shows [[CANDIDATE_ANSWER]] as proof of his journey.",
      "candidate_answers": [
        "The Time Traveller's house"
      ],
      "predicates": [
        "Overwhelmed(x) ::: x is overwhelmed.",
        "GoesBack(x, y) ::: x goes back to location y.",
        "ArrivesAt(x, y) ::: x arrives at location y.",
        "RelatesAdventures(x, y) ::: x relates his adventures to person y.",
        "ProducesEvidence(x, y) ::: x produces evidence of item y.",
        "PreparesForJourney(x) ::: x prepares for another journey.",
        "PromisesToReturn(x, y) ::: x promises to return in a short period of time.",
        "NeverReturned(x) ::: x has never returned."
      ],
      "premises": [
        "Overwhelmed(timeTraveller) ::: The Time Traveller is overwhelmed.",
        "GoesBack(timeTraveller, machine) ::: The Time Traveller goes back to the machine.",
        "ArrivesAt(timeTraveller, laboratory) ::: The Time Traveller arrives at his laboratory.",
        "RelatesAdventures(timeTraveller, visitors) ::: The Time Traveller relates his adventures to his disbelieving visitors.",
        "ProducesEvidence(timeTraveller, strangeWhiteFlowers) ::: The Time Traveller produces as evidence the strange white flowers.",
        "ArrivesAt(originalNarrator, house) ::: The original narrator arrives at the Time Traveller's house the next day.",
        "PreparesForJourney(timeTraveller) ::: The Time Traveller is preparing for another journey.",
        "PromisesToReturn(originalNarrator, timeTraveller) ::: The original narrator promises to return in a short period of time.",
        "NeverReturned(timeTraveller) ::: The Time Traveller has never returned after 3 years of waiting."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "695": [
    {
      "id": 695,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 0,
      "paragraph": " The book's protagonist is an English scientist and gentleman inventor living in Richmond, Surrey, in Victorian England, and identified by a narrator simply as the Time Traveller. The narrator recounts the Traveller's lecture to his weekly dinner guests that time is simply a fourth dimension, and his demonstration of a tabletop model machine for travelling through it. He reveals that he has built a machine capable of carrying a person through time, and returns at dinner the following week to recount a remarkable tale, becoming the new narrator.",
      "question_template": "It took the Time Traveller [[CANDIDATE_ANSWER]] to return from his first trip.",
      "candidate_answers": [
        "time is simply a fourth dimension"
      ],
      "predicates": [
        "EnglishScientist(x) ::: x is an English scientist.",
        "GentlemanInventor(x) ::: x is a gentleman inventor.",
        "LivesIn(x, y) ::: x lives in location y.",
        "TimeTraveller(x) ::: x is the Time Traveller.",
        "Lecture(x, y) ::: x gives a lecture on topic y.",
        "Demonstrates(x, y) ::: x demonstrates item y.",
        "Built(x, y) ::: x built item y.",
        "Machine(x) ::: x is a machine.",
        "CarriesThroughTime(x, y) ::: x can carry person y through time.",
        "Narrator(x) ::: x is a narrator.",
        "RemarkableTale(x) ::: x is a remarkable tale."
      ],
      "premises": [
        "EnglishScientist(timeTraveller) ∧ GentlemanInventor(timeTraveller) ∧ LivesIn(timeTraveller, richmond) ∧ LivesIn(timeTraveller, surrey) ∧ LivesIn(timeTraveller, victorianTime) ::: The Time Traveller is an English scientist and gentleman inventor living in Richmond, Surrey, in Victorian England.",
        "Lecture(timeTraveller, fourthDimension) ::: The Time Traveller gives a lecture that time is simply a fourth dimension.",
        "Demonstrates(timeTraveller, tabletopModelMachine) ::: The Time Traveller demonstrates a tabletop model machine for travelling through time.",
        "Built(timeTraveller, timeMachine) ::: The Time Traveller built a machine capable of carrying a person through time.",
        "Narrator(originalNarrator) ∧ Narrator(timeTraveller) ::: The original narrator recounts the Time Traveller's lecture and becomes the new narrator after the Time Traveller returns at dinner the following week to recount a remarkable tale.",
        "RemarkableTale(timeTraveller) ::: The Time Traveller recounts a remarkable tale.",
        "Conclusion:",
        "CarriesThroughTime(timeMachine, timeTraveller) ::: The machine built by the Time Traveller can carry him through time."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "696": [
    {
      "id": 696,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 2,
      "paragraph": "Returning to the site where he arrived, the Time Traveller is shocked to find his time machine missing, and eventually concludes that it has been dragged by some unknown party into a nearby structure with heavy doors, locked from the inside, which resembles a Sphinx. Luckily, he had removed the machine's levers before leaving it. Later in the dark, he is approached menacingly by the Morlocks, ape-like troglodytes who live in darkness underground and surface only at night. Within their dwellings he discovers the machinery and industry that makes the above-ground paradise possible. He alters his theory, speculating that the human race has evolved into two species: the leisured classes have become the ineffectual Eloi, and the downtrodden working classes have become the brutal light-fearing Morlocks. Deducing that the Morlocks have taken his time machine, he explores the Morlock tunnels, learning that due to a lack of any other means of sustenance, they feed on the Eloi. His revised analysis is that their relationship is not one of lords and servants, but of livestock and ranchers. The Time Traveller theorizes that intelligence is the result of and response to danger; with no real challenges facing the Eloi, they have lost the spirit, intelligence, and physical fitness of humanity at its peak.",
      "question_template": "The traveler reveals he has built [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- The Morlocks have taken his time machine",
        "- They feed on the Eloi"
      ],
      "predicates": [
        "Missing(x) ::: x is missing.",
        "Shocked(x) ::: x is shocked to find something missing.",
        "Dragged(x, y) ::: x has been dragged by y.",
        "Resembles(x, y) ::: x resembles y.",
        "RemovedLevers(x) ::: x has removed the levers from the time machine.",
        "Approached(x, y) ::: x is approached by y.",
        "Discover(x, y) ::: x discovers y.",
        "AlterTheory(x, y) ::: x alters his theory about y.",
        "Evolved(x, y) ::: x has evolved into y.",
        "FeedOn(x, y) ::: x feeds on y.",
        "Relationship(x, y, z) ::: x has a relationship of type z with y.",
        "Theorizes(x, y) ::: x theorizes about y.",
        "Lost(x, y) ::: x has lost y."
      ],
      "premises": [
        "Missing(timeMachine) ∧ Shocked(timeTraveller) ::: The Time Traveller is shocked to find his time machine missing.",
        "Dragged(timeMachine, unknownParty) ::: The time machine has been dragged by some unknown party.",
        "Resembles(timeMachine, sphinx) ::: The structure resembles a Sphinx.",
        "RemovedLevers(timeTraveller) ::: The Time Traveller had removed the machine's levers before leaving it.",
        "Approached(timeTraveller, morlocks) ::: The Time Traveller is approached menacingly by the Morlocks.",
        "Discover(timeTraveller, machinery) ∧ Discover(timeTraveller, industry) ::: The Time Traveller discovers the machinery and industry that makes the above-ground paradise possible.",
        "AlterTheory(timeTraveller, species) ::: The Time Traveller alters his theory about the human race evolving into two species.",
        "Evolved(humanRace, (elois, morlocks)) ::: The human race has evolved into the Eloi and Morlocks.",
        "FeedOn(morlocks, eloi) ::: The Morlocks feed on the Eloi.",
        "Relationship(morlocks, eloi, livestockAndRanchers) ::: The relationship between Morlocks and Eloi is one of livestock and ranchers.",
        "Theorizes(timeTraveller, intelligence) ::: The Time Traveller theorizes that intelligence is the result of and response to danger.",
        "Lost(eloi, spirit) ∧ Lost(eloi, intelligence) ∧ Lost(eloi, physicalFitness) ::: The Eloi have lost the spirit, intelligence, and physical fitness of humanity at its peak."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 696,
      "context_id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 4,
      "paragraph": "The Morlocks open the Sphinx and use the time machine as bait to capture the Traveller, not understanding that he will use it to escape. He reattaches the levers before he travels further ahead to roughly 30 million years from his own time. There he sees some of the last living things on a dying Earth: menacing reddish crab-like creatures slowly wandering the blood-red beaches chasing enormous butterflies in a world covered in simple lichenous vegetation. He continues to make short jumps through time, seeing Earth's rotation gradually cease and the sun grow larger, redder, and dimmer, and the world falling silent and freezing as the last degenerate living things die out.",
      "question_template": "The traveler reveals he has built [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The Morlocks open the Sphinx and use the time machine as bait to capture the Traveller"
      ],
      "predicates": [
        "Open(x, y) ::: x opens y.",
        "Use(x, y) ::: x uses y.",
        "Capture(x, y) ::: x captures y.",
        "Reattach(x, y) ::: x reattaches y.",
        "Travel(x, y) ::: x travels to y.",
        "See(x, y) ::: x sees y.",
        "Wander(x, y) ::: x wanders y.",
        "Chase(x, y) ::: x chases y.",
        "GrowLarger(x) ::: x grows larger.",
        "GrowRedder(x) ::: x grows redder.",
        "GrowDimmer(x) ::: x grows dimmer.",
        "FallSilent(x) ::: x falls silent.",
        "Freeze(x) ::: x freezes.",
        "DieOut(x) ::: x dies out."
      ],
      "premises": [
        "Open(morlocks, sphinx) ::: The Morlocks open the Sphinx.",
        "Use(morlocks, timeMachine) ::: The Morlocks use the time machine as bait.",
        "Capture(morlocks, traveller) ::: The Morlocks capture the Traveller.",
        "¬Understand(morlocks, escape(traveller)) ::: The Morlocks do not understand that the Traveller will use it to escape.",
        "Reattach(traveller, levers) ::: The Traveller reattaches the levers.",
        "Travel(traveller, 30MillionYears) ::: The Traveller travels roughly 30 million years from his own time.",
        "See(traveller, lastLivingThings) ::: The Traveller sees some of the last living things on a dying Earth.",
        "Wander(crabLikeCreatures, bloodRedBeaches) ::: Menacing reddish crab-like creatures wander the blood-red beaches.",
        "Chase(crabLikeCreatures, enormousButterflies) ::: Crab-like creatures chase enormous butterflies.",
        "Cover(world, simpleLichenousVegetation) ::: The world is covered in simple lichenous vegetation.",
        "Continue(traveller) ::: The Traveller continues to make short jumps through time.",
        "Cease(EarthRotation) ::: Earth's rotation gradually ceases.",
        "GrowLarger(sun) ::: The sun grows larger.",
        "GrowRedder(sun) ::: The sun grows redder.",
        "GrowDimmer(sun) ::: The sun grows dimmer.",
        "FallSilent(world) ::: The world falls silent.",
        "Freeze(world) ::: The world freezes.",
        "DieOut(lastDegenerateLivingThings) ::: The last degenerate living things die out.",
        "Conclusion:",
        "Experience(traveller, dyingEarth) ::: The Traveller experiences a dying Earth as he travels through time."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "698": [
    {
      "id": 698,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 1,
      "paragraph": "Guy meets with Miriam. Pregnant by someone else, she now refuses to give Guy a divorce and threatens to cause a scandal. Guy relays the bad news to Anne, metaphorically commenting that he would like to \"strangle\" Miriam. Meanwhile, Bruno stalks Miriam through an amusement park and fatally strangles her on the \"Magic Isle\". Bruno then informs Guy that Miriam is dead, and expects him to follow through on murdering Bruno's father. Bruno sends Guy his house key, a map to his father's bedroom, and a pistol.",
      "question_template": "The traveller finds [[CANDIDATE_ANSWER]] missing upon his return to the site.",
      "candidate_answers": [
        "Miriam",
        "Anne"
      ],
      "predicates": [
        "Meets(x, y) ::: x meets with y.",
        "Pregnant(x) ::: x is pregnant.",
        "RefusesToDivorce(x, y) ::: x refuses to give y a divorce.",
        "Threatens(x, y) ::: x threatens y.",
        "Relays(x, y, z) ::: x relays information about y to z.",
        "Comment(x, y) ::: x makes a comment about y.",
        "Stalks(x, y) ::: x stalks y.",
        "Strangles(x, y) ::: x strangles y.",
        "Informs(x, y) ::: x informs y about something.",
        "Expects(x, y) ::: x expects y to do something.",
        "Sends(x, y, z) ::: x sends y to z."
      ],
      "premises": [
        "Meets(guy, miriam) ::: Guy meets with Miriam.",
        "Pregnant(miriam) ::: Miriam is pregnant.",
        "RefusesToDivorce(miriam, guy) ::: Miriam refuses to give Guy a divorce.",
        "Threatens(miriam, scandal) ::: Miriam threatens to cause a scandal.",
        "Relays(guy, badNews, anne) ::: Guy relays the bad news to Anne.",
        "Comment(guy, \"strangle miriam\") ::: Guy metaphorically comments that he would like to \"strangle\" Miriam.",
        "Stalks(bruno, miriam) ::: Bruno stalks Miriam.",
        "Strangles(bruno, miriam) ::: Bruno fatally strangles Miriam.",
        "Informs(bruno, guy) ::: Bruno informs Guy that Miriam is dead.",
        "Expects(bruno, murder(guy, bruno'sFather)) ::: Bruno expects Guy to follow through on murdering Bruno's father.",
        "Sends(bruno, houseKey, guy) ::: Bruno sends Guy his house key.",
        "Sends(bruno, map, guy) ::: Bruno sends Guy a map to his father's bedroom.",
        "Sends(bruno, pistol, guy) ::: Bruno sends Guy a pistol."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 698,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 3,
      "paragraph": "To pressure Guy into fulfilling his obligation, Bruno introduces himself to Anne and meets Anne's younger sister, Barbara (Patricia Hitchcock), who physically resembles Miriam. Soon after, Bruno appears uninvited at a party at Senator Morton's house. To amuse another guest, Bruno demonstrates how to fatally strangle someone. His gaze happens to fall upon Barbara, and her resemblance to Miriam triggers a flashback. He begins strangling the woman but he blacks out before harming her. An upset Barbara tells Anne that, \"His hands were on her throat, but he was strangling me.\" Anne confronts Guy, who confesses the truth about Bruno's crazy scheme.",
      "question_template": "The traveller finds [[CANDIDATE_ANSWER]] missing upon his return to the site.",
      "candidate_answers": [
        "Anne",
        "Barbara"
      ],
      "predicates": [
        "Introduces(x, y) ::: x introduces himself to y.",
        "Resembles(x, y) ::: x physically resembles y.",
        "Demonstrates(x, y) ::: x demonstrates how to y.",
        "Strangles(x, y) ::: x strangles y.",
        "BlacksOut(x) ::: x blacks out.",
        "Upset(x) ::: x is upset.",
        "Confronts(x, y) ::: x confronts y.",
        "Confesses(x, y) ::: x confesses the truth about y."
      ],
      "premises": [
        "Introduces(bruno, anne) ::: Bruno introduces himself to Anne.",
        "Introduces(bruno, barbara) ::: Bruno meets Anne's younger sister, Barbara.",
        "Resembles(barbara, miriam) ::: Barbara physically resembles Miriam.",
        "Demonstrates(bruno, fatallyStrangle) ::: Bruno demonstrates how to fatally strangle someone.",
        "GazeFalls(bruno, barbara) ::: Bruno's gaze happens to fall upon Barbara.",
        "TriggersFlashback(bruno, barbara) ::: Barbara's resemblance to Miriam triggers a flashback for Bruno.",
        "Strangles(bruno, woman) ∧ BlacksOut(bruno) ::: Bruno begins strangling the woman but blacks out before harming her.",
        "Upset(barbara) ::: An upset Barbara tells Anne that, \"His hands were on her throat, but he was strangling me.\"",
        "Confronts(anne, guy) ::: Anne confronts Guy.",
        "Confesses(guy, brunoScheme) ::: Guy confesses the truth about Bruno's crazy scheme.",
        "Conclusion:",
        "Influenced(bruno, barbara) ::: Bruno's actions are influenced by his flashback triggered by Barbara's resemblance to Miriam."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 698,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 4,
      "paragraph": "Pretending to agree to Bruno's original plan, Guy sneaks into Mr. Anthony's bedroom intending to warn him of his son's murderous intent. It is Bruno who is waiting there, however. Guy tries to convince Bruno to seek psychiatric help. When Guy refuses to follow through with Bruno's plan, Bruno threatens to frame Guy for Miriam's murder.",
      "question_template": "The traveller finds [[CANDIDATE_ANSWER]] missing upon his return to the site.",
      "candidate_answers": [
        "Miriam"
      ],
      "predicates": [
        "MurderousIntent(x) ::: x has a murderous intent.",
        "Threatens(x, y) ::: x threatens y to achieve his goals.",
        "Agrees(x, y) ::: x pretends to agree with y.",
        "SneaksInto(x, y) ::: x sneaks into y's location.",
        "Warns(x, y) ::: x warns y of a danger.",
        "Refuses(x, y) ::: x refuses to follow through with y's plan.",
        "SeeksHelp(x) ::: x seeks psychiatric help."
      ],
      "premises": [
        "Agrees(a_1, plan) ::: Guy pretends to agree to Bruno's original plan.",
        "SneaksInto(a_1, bedroom) ::: Guy sneaks into Mr. Anthony's bedroom.",
        "Warns(a_1, a_2) ::: Guy intends to warn Mr. Anthony of his son's murderous intent.",
        "MurderousIntent(a_2) ::: Bruno has a murderous intent.",
        "Threatens(a_2, a_1) ::: Bruno threatens Guy to frame him for Miriam's murder.",
        "Refuses(a_1, plan) ::: Guy refuses to follow through with Bruno's plan.",
        "SeeksHelp(a_1) ::: Guy tries to convince Bruno to seek psychiatric help."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 698,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 5,
      "paragraph": "Anne visits Bruno's mother (Marion Lorne) to tell her that her son committed a murder, but the befuddled woman discounts it. Bruno appears and informs Anne that he intends to incriminate Guy by planting the stolen cigarette lighter at the amusement park. Anne and Guy devise a plan for Guy to finish his tennis match, evade the police, and reach the amusement park to prevent Bruno from planting the lighter.",
      "question_template": "The traveller finds [[CANDIDATE_ANSWER]] missing upon his return to the site.",
      "candidate_answers": [
        "Anne",
        "Bruno's mother"
      ],
      "predicates": [
        "Visits(x, y) ::: x visits y.",
        "Informs(x, y, z) ::: x informs y about z.",
        "Intends(x, y) ::: x intends to do y.",
        "Plans(x, y) ::: x plans to do y.",
        "Incriminate(x, y) ::: x incriminates y.",
        "Plant(x, y, z) ::: x plants y at z.",
        "Evade(x, y) ::: x evades y.",
        "FinishMatch(x) ::: x finishes his tennis match.",
        "Reach(x, y) ::: x reaches y."
      ],
      "premises": [
        "Visits(anne, marion) ::: Anne visits Bruno's mother, Marion Lorne, to tell her that her son committed a murder.",
        "¬Informs(marion, anne, murder) ::: The befuddled woman discounts the information about the murder.",
        "Intends(bruno, Incriminate(guy)) ::: Bruno intends to incriminate Guy by planting the stolen cigarette lighter.",
        "Plant(bruno, lighter, amusementPark) ::: Bruno plans to plant the stolen lighter at the amusement park.",
        "Plans(anne, Evade(guy, police)) ::: Anne and Guy devise a plan for Guy to evade the police.",
        "FinishMatch(guy) ::: Guy is to finish his tennis match.",
        "Reach(guy, amusementPark) ::: Guy is to reach the amusement park to prevent Bruno from planting the lighter."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "699": [
    {
      "id": 699,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 1,
      "paragraph": "Guy meets with Miriam. Pregnant by someone else, she now refuses to give Guy a divorce and threatens to cause a scandal. Guy relays the bad news to Anne, metaphorically commenting that he would like to \"strangle\" Miriam. Meanwhile, Bruno stalks Miriam through an amusement park and fatally strangles her on the \"Magic Isle\". Bruno then informs Guy that Miriam is dead, and expects him to follow through on murdering Bruno's father. Bruno sends Guy his house key, a map to his father's bedroom, and a pistol.",
      "question_template": "[[CANDIDATE_ANSWER]] approaches the traveller in the dark.",
      "candidate_answers": [
        "Miriam is pregnant by someone else",
        "She now refuses to give Guy a divorce",
        "Threatens to cause a scandal"
      ],
      "predicates": [
        "Meets(x, y) ::: x meets with y.",
        "Pregnant(x) ::: x is pregnant.",
        "RefusesToDivorce(x, y) ::: x refuses to give y a divorce.",
        "Threatens(x, y) ::: x threatens y.",
        "Relays(x, y, z) ::: x relays information about y to z.",
        "Comment(x, y) ::: x makes a comment about y.",
        "Stalks(x, y) ::: x stalks y.",
        "Strangles(x, y) ::: x strangles y.",
        "Informs(x, y) ::: x informs y about something.",
        "Expects(x, y) ::: x expects y to do something.",
        "Sends(x, y, z) ::: x sends y to z."
      ],
      "premises": [
        "Meets(guy, miriam) ::: Guy meets with Miriam.",
        "Pregnant(miriam) ::: Miriam is pregnant.",
        "RefusesToDivorce(miriam, guy) ::: Miriam refuses to give Guy a divorce.",
        "Threatens(miriam, scandal) ::: Miriam threatens to cause a scandal.",
        "Relays(guy, badNews, anne) ::: Guy relays the bad news to Anne.",
        "Comment(guy, \"strangle miriam\") ::: Guy metaphorically comments that he would like to \"strangle\" Miriam.",
        "Stalks(bruno, miriam) ::: Bruno stalks Miriam.",
        "Strangles(bruno, miriam) ::: Bruno fatally strangles Miriam.",
        "Informs(bruno, guy) ::: Bruno informs Guy that Miriam is dead.",
        "Expects(bruno, murder(guy, bruno'sFather)) ::: Bruno expects Guy to follow through on murdering Bruno's father.",
        "Sends(bruno, houseKey, guy) ::: Bruno sends Guy his house key.",
        "Sends(bruno, map, guy) ::: Bruno sends Guy a map to his father's bedroom.",
        "Sends(bruno, pistol, guy) ::: Bruno sends Guy a pistol."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 699,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 3,
      "paragraph": "To pressure Guy into fulfilling his obligation, Bruno introduces himself to Anne and meets Anne's younger sister, Barbara (Patricia Hitchcock), who physically resembles Miriam. Soon after, Bruno appears uninvited at a party at Senator Morton's house. To amuse another guest, Bruno demonstrates how to fatally strangle someone. His gaze happens to fall upon Barbara, and her resemblance to Miriam triggers a flashback. He begins strangling the woman but he blacks out before harming her. An upset Barbara tells Anne that, \"His hands were on her throat, but he was strangling me.\" Anne confronts Guy, who confesses the truth about Bruno's crazy scheme.",
      "question_template": "[[CANDIDATE_ANSWER]] approaches the traveller in the dark.",
      "candidate_answers": [
        "- To pressure Guy into fulfilling his obligation",
        "- Bruno's crazy scheme"
      ],
      "predicates": [
        "Introduces(x, y) ::: x introduces himself to y.",
        "Resembles(x, y) ::: x physically resembles y.",
        "Demonstrates(x, y) ::: x demonstrates how to y.",
        "Strangles(x, y) ::: x strangles y.",
        "BlacksOut(x) ::: x blacks out.",
        "Upset(x) ::: x is upset.",
        "Confronts(x, y) ::: x confronts y.",
        "Confesses(x, y) ::: x confesses the truth about y."
      ],
      "premises": [
        "Introduces(bruno, anne) ::: Bruno introduces himself to Anne.",
        "Introduces(bruno, barbara) ::: Bruno meets Anne's younger sister, Barbara.",
        "Resembles(barbara, miriam) ::: Barbara physically resembles Miriam.",
        "Demonstrates(bruno, fatallyStrangle) ::: Bruno demonstrates how to fatally strangle someone.",
        "GazeFalls(bruno, barbara) ::: Bruno's gaze happens to fall upon Barbara.",
        "TriggersFlashback(bruno, barbara) ::: Barbara's resemblance to Miriam triggers a flashback for Bruno.",
        "Strangles(bruno, woman) ∧ BlacksOut(bruno) ::: Bruno begins strangling the woman but blacks out before harming her.",
        "Upset(barbara) ::: An upset Barbara tells Anne that, \"His hands were on her throat, but he was strangling me.\"",
        "Confronts(anne, guy) ::: Anne confronts Guy.",
        "Confesses(guy, brunoScheme) ::: Guy confesses the truth about Bruno's crazy scheme.",
        "Conclusion:",
        "Influenced(bruno, barbara) ::: Bruno's actions are influenced by his flashback triggered by Barbara's resemblance to Miriam."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "700": [
    {
      "id": 700,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 0,
      "paragraph": " Amateur tennis star Guy Haines (Farley Granger) wants to marry Anne Morton (Ruth Roman), the daughter of a senator, and pursue a political career. First, he must divorce his vulgar and promiscuous wife Miriam (Laura Elliott). On a train, Bruno Anthony (Robert Walker) recognizes Guy and knows about his marital situation from the gossip pages. Bruno introduces himself, then proposes an idea for the perfect homicide: he and Guy should \"swap murders\". Bruno will murder Miriam, and in exchange Guy will kill Bruno's despised father. Each would be killing a stranger. Having no identifiable motive for the crimes, neither would be suspects. Guy humors Bruno's absurd murder plot by pretending to find it amusing. Bruno interprets this as agreement to the scheme. Bruno then borrows Guy's monogrammed cigarette lighter and slips it into his own pocket.",
      "question_template": "[[CANDIDATE_ANSWER]] feeds on the Eloi.",
      "candidate_answers": [
        "- An idea for the perfect homicide: he and Guy should \"swap murders\"",
        "- Bruno will murder Miriam, and in exchange Guy will kill Bruno's despised father",
        "- Each would be killing a stranger"
      ],
      "predicates": [
        "WantsToMarry(x, y) ::: x wants to marry y.",
        "Divorces(x, y) ::: x divorces y.",
        "Recognizes(x, y) ::: x recognizes y.",
        "KnowsAbout(x, y) ::: x knows about y.",
        "Proposes(x, y) ::: x proposes y.",
        "Murders(x, y) ::: x murders y.",
        "Agrees(x, y) ::: x agrees to y.",
        "Humors(x, y) ::: x humors y.",
        "Borrows(x, y) ::: x borrows y.",
        "SlipsIntoPocket(x, y) ::: x slips y into his pocket."
      ],
      "premises": [
        "WantsToMarry(a_1, a_0) ::: Guy Haines wants to marry Anne Morton.",
        "Divorces(a_1, a_4) ::: Guy Haines must divorce his wife Miriam.",
        "Recognizes(a_2, a_1) ::: Bruno Anthony recognizes Guy Haines.",
        "KnowsAbout(a_2, gossipPages) ::: Bruno knows about Guy's marital situation from the gossip pages.",
        "Proposes(a_2, murderScheme) ::: Bruno proposes the idea for the perfect homicide.",
        "Murders(a_2, a_4) ::: Bruno will murder Miriam.",
        "Murders(a_1, a_3) ::: Guy will kill Bruno's despised father.",
        "Agrees(a_1, murderScheme) ::: Guy humors Bruno's absurd murder plot by pretending to find it amusing.",
        "Borrows(a_2, d_1) ::: Bruno borrows Guy's monogrammed cigarette lighter.",
        "SlipsIntoPocket(a_2, d_1) ::: Bruno slips the lighter into his own pocket.",
        "Conclusion:",
        "¬(IdentifiableMotive(a_1, c_2) ∧ IdentifiableMotive(a_2, c_2)) ::: Neither Guy nor Bruno would have identifiable motives for the murders."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 700,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 1,
      "paragraph": "Guy meets with Miriam. Pregnant by someone else, she now refuses to give Guy a divorce and threatens to cause a scandal. Guy relays the bad news to Anne, metaphorically commenting that he would like to \"strangle\" Miriam. Meanwhile, Bruno stalks Miriam through an amusement park and fatally strangles her on the \"Magic Isle\". Bruno then informs Guy that Miriam is dead, and expects him to follow through on murdering Bruno's father. Bruno sends Guy his house key, a map to his father's bedroom, and a pistol.",
      "question_template": "[[CANDIDATE_ANSWER]] feeds on the Eloi.",
      "candidate_answers": [
        "- Expecting Guy to follow through on murdering Bruno's father",
        "- Sends Guy his house key, a map to his father's bedroom, and a pistol"
      ],
      "predicates": [
        "Meets(x, y) ::: x meets with y.",
        "Pregnant(x) ::: x is pregnant.",
        "RefusesToDivorce(x, y) ::: x refuses to give y a divorce.",
        "Threatens(x, y) ::: x threatens y.",
        "Relays(x, y, z) ::: x relays information about y to z.",
        "Comment(x, y) ::: x makes a comment about y.",
        "Stalks(x, y) ::: x stalks y.",
        "Strangles(x, y) ::: x strangles y.",
        "Informs(x, y) ::: x informs y about something.",
        "Expects(x, y) ::: x expects y to do something.",
        "Sends(x, y, z) ::: x sends y to z."
      ],
      "premises": [
        "Meets(guy, miriam) ::: Guy meets with Miriam.",
        "Pregnant(miriam) ::: Miriam is pregnant.",
        "RefusesToDivorce(miriam, guy) ::: Miriam refuses to give Guy a divorce.",
        "Threatens(miriam, scandal) ::: Miriam threatens to cause a scandal.",
        "Relays(guy, badNews, anne) ::: Guy relays the bad news to Anne.",
        "Comment(guy, \"strangle miriam\") ::: Guy metaphorically comments that he would like to \"strangle\" Miriam.",
        "Stalks(bruno, miriam) ::: Bruno stalks Miriam.",
        "Strangles(bruno, miriam) ::: Bruno fatally strangles Miriam.",
        "Informs(bruno, guy) ::: Bruno informs Guy that Miriam is dead.",
        "Expects(bruno, murder(guy, bruno'sFather)) ::: Bruno expects Guy to follow through on murdering Bruno's father.",
        "Sends(bruno, houseKey, guy) ::: Bruno sends Guy his house key.",
        "Sends(bruno, map, guy) ::: Bruno sends Guy a map to his father's bedroom.",
        "Sends(bruno, pistol, guy) ::: Bruno sends Guy a pistol."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 700,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 3,
      "paragraph": "To pressure Guy into fulfilling his obligation, Bruno introduces himself to Anne and meets Anne's younger sister, Barbara (Patricia Hitchcock), who physically resembles Miriam. Soon after, Bruno appears uninvited at a party at Senator Morton's house. To amuse another guest, Bruno demonstrates how to fatally strangle someone. His gaze happens to fall upon Barbara, and her resemblance to Miriam triggers a flashback. He begins strangling the woman but he blacks out before harming her. An upset Barbara tells Anne that, \"His hands were on her throat, but he was strangling me.\" Anne confronts Guy, who confesses the truth about Bruno's crazy scheme.",
      "question_template": "[[CANDIDATE_ANSWER]] feeds on the Eloi.",
      "candidate_answers": [
        "To pressure Guy into fulfilling his obligation",
        "Bruno demonstrates how to fatally strangle someone",
        "His crazy scheme"
      ],
      "predicates": [
        "Introduces(x, y) ::: x introduces himself to y.",
        "Resembles(x, y) ::: x physically resembles y.",
        "Demonstrates(x, y) ::: x demonstrates how to y.",
        "Strangles(x, y) ::: x strangles y.",
        "BlacksOut(x) ::: x blacks out.",
        "Upset(x) ::: x is upset.",
        "Confronts(x, y) ::: x confronts y.",
        "Confesses(x, y) ::: x confesses the truth about y."
      ],
      "premises": [
        "Introduces(bruno, anne) ::: Bruno introduces himself to Anne.",
        "Introduces(bruno, barbara) ::: Bruno meets Anne's younger sister, Barbara.",
        "Resembles(barbara, miriam) ::: Barbara physically resembles Miriam.",
        "Demonstrates(bruno, fatallyStrangle) ::: Bruno demonstrates how to fatally strangle someone.",
        "GazeFalls(bruno, barbara) ::: Bruno's gaze happens to fall upon Barbara.",
        "TriggersFlashback(bruno, barbara) ::: Barbara's resemblance to Miriam triggers a flashback for Bruno.",
        "Strangles(bruno, woman) ∧ BlacksOut(bruno) ::: Bruno begins strangling the woman but blacks out before harming her.",
        "Upset(barbara) ::: An upset Barbara tells Anne that, \"His hands were on her throat, but he was strangling me.\"",
        "Confronts(anne, guy) ::: Anne confronts Guy.",
        "Confesses(guy, brunoScheme) ::: Guy confesses the truth about Bruno's crazy scheme.",
        "Conclusion:",
        "Influenced(bruno, barbara) ::: Bruno's actions are influenced by his flashback triggered by Barbara's resemblance to Miriam."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 700,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 5,
      "paragraph": "Anne visits Bruno's mother (Marion Lorne) to tell her that her son committed a murder, but the befuddled woman discounts it. Bruno appears and informs Anne that he intends to incriminate Guy by planting the stolen cigarette lighter at the amusement park. Anne and Guy devise a plan for Guy to finish his tennis match, evade the police, and reach the amusement park to prevent Bruno from planting the lighter.",
      "question_template": "[[CANDIDATE_ANSWER]] feeds on the Eloi.",
      "candidate_answers": [
        "- Incriminate Guy by planting the stolen cigarette lighter at the amusement park"
      ],
      "predicates": [
        "Visits(x, y) ::: x visits y.",
        "Informs(x, y, z) ::: x informs y about z.",
        "Intends(x, y) ::: x intends to do y.",
        "Plans(x, y) ::: x plans to do y.",
        "Incriminate(x, y) ::: x incriminates y.",
        "Plant(x, y, z) ::: x plants y at z.",
        "Evade(x, y) ::: x evades y.",
        "FinishMatch(x) ::: x finishes his tennis match.",
        "Reach(x, y) ::: x reaches y."
      ],
      "premises": [
        "Visits(anne, marion) ::: Anne visits Bruno's mother, Marion Lorne, to tell her that her son committed a murder.",
        "¬Informs(marion, anne, murder) ::: The befuddled woman discounts the information about the murder.",
        "Intends(bruno, Incriminate(guy)) ::: Bruno intends to incriminate Guy by planting the stolen cigarette lighter.",
        "Plant(bruno, lighter, amusementPark) ::: Bruno plans to plant the stolen lighter at the amusement park.",
        "Plans(anne, Evade(guy, police)) ::: Anne and Guy devise a plan for Guy to evade the police.",
        "FinishMatch(guy) ::: Guy is to finish his tennis match.",
        "Reach(guy, amusementPark) ::: Guy is to reach the amusement park to prevent Bruno from planting the lighter."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 700,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 6,
      "paragraph": "Guy eventually wins the long match at Forest Hills, then, eluding the police, heads for the amusement park. Bruno is also delayed when he accidentally drops Guy's lighter down a storm drain and has to recover it. Guy arrives at the amusement park. Bruno stays out of sight until sunset when he can plant the lighter on the \"Magic Isle\". A worker recognizes Bruno from the night of the murder and informs the police. Guy catches up to Bruno, and they fight on the park's carousel. Thinking Guy is trying to escape, a police officer shoots at him, but his shot misses and kills the carousel operator instead. The dead man falls onto the control panel, and the carousel spins wildly out of control and crashes. The worker who recognized Bruno tells the police that Guy is innocent, and the mortally injured Bruno is the man he saw that night. Guy tells the police that Bruno was attempting to plant Guy's lighter at the murder scene. Bruno refuses to clear Guy, but as he dies, his fingers open to reveal Guy's lighter.",
      "question_template": "[[CANDIDATE_ANSWER]] feeds on the Eloi.",
      "candidate_answers": [
        "- Plant the lighter on the \"Magic Isle\"",
        "- Bruno was attempting to plant Guy's lighter at the murder scene"
      ],
      "predicates": [
        "Innocent(x) ::: x is innocent of the murder.",
        "MortallyInjured(x) ::: x is mortally injured.",
        "Reveals(x, y) ::: x reveals y.",
        "Plant(x, y, z) ::: x attempts to plant y at location z.",
        "Recognizes(x, y) ::: x recognizes y.",
        "Fights(x, y) ::: x fights y.",
        "Shoots(x, y) ::: x shoots at y.",
        "Misses(x, y) ::: x misses y.",
        "Kills(x, y) ::: x kills y.",
        "FallsOn(x, y) ::: x falls onto y.",
        "SpinsOutOfControl(x) ::: x spins wildly out of control.",
        "Crashes(x) ::: x crashes.",
        "Tells(x, y, z) ::: x tells y that z."
      ],
      "premises": [
        "MortallyInjured(a_2) ∧ Reveals(a_2, d_1) ::: Bruno is mortally injured and reveals Guy's lighter before dying.",
        "Innocent(a_1) ::: Guy is innocent of the murder.",
        "∀a_4 (Recognizes(a_4, a_2) ∧ Tells(a_4, police, Innocent(a_1))) ::: The worker who recognized Bruno tells the police that Guy is innocent.",
        "Fights(a_1, a_2) ::: Guy catches up to Bruno, and they fight on the park's carousel.",
        "Shoots(police_officer, a_1) ∧ Misses(police_officer, a_1) ∧ Kills(police_officer, a_3) ::: A police officer shoots at Guy, but his shot misses and kills the carousel operator instead.",
        "FallsOn(a_3, control_panel) ∧ SpinsOutOfControl(carousel) ∧ Crashes(carousel) ::: The dead man falls onto the control panel, and the carousel spins wildly out of control and crashes.",
        "Plant(a_2, d_1, b_3) ::: Bruno attempts to plant Guy's lighter at the Magic Isle.",
        "Reveals(a_2, d_1) ::: Bruno reveals Guy's lighter before dying.",
        "Conclusion:",
        "Innocent(a_1) ::: Guy is innocent of the murder.",
        "Reveals(a_2, d_1) ::: Bruno reveals Guy's lighter before dying."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "701": [
    {
      "id": 701,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 1,
      "paragraph": "Guy meets with Miriam. Pregnant by someone else, she now refuses to give Guy a divorce and threatens to cause a scandal. Guy relays the bad news to Anne, metaphorically commenting that he would like to \"strangle\" Miriam. Meanwhile, Bruno stalks Miriam through an amusement park and fatally strangles her on the \"Magic Isle\". Bruno then informs Guy that Miriam is dead, and expects him to follow through on murdering Bruno's father. Bruno sends Guy his house key, a map to his father's bedroom, and a pistol.",
      "question_template": "The Traveller saves [[CANDIDATE_ANSWER]] from drowning.",
      "candidate_answers": [
        "Fatally strangles her on the \"Magic Isle\""
      ],
      "predicates": [
        "Meets(x, y) ::: x meets with y.",
        "Pregnant(x) ::: x is pregnant.",
        "RefusesToDivorce(x, y) ::: x refuses to give y a divorce.",
        "Threatens(x, y) ::: x threatens y.",
        "Relays(x, y, z) ::: x relays information about y to z.",
        "Comment(x, y) ::: x makes a comment about y.",
        "Stalks(x, y) ::: x stalks y.",
        "Strangles(x, y) ::: x strangles y.",
        "Informs(x, y) ::: x informs y about something.",
        "Expects(x, y) ::: x expects y to do something.",
        "Sends(x, y, z) ::: x sends y to z."
      ],
      "premises": [
        "Meets(guy, miriam) ::: Guy meets with Miriam.",
        "Pregnant(miriam) ::: Miriam is pregnant.",
        "RefusesToDivorce(miriam, guy) ::: Miriam refuses to give Guy a divorce.",
        "Threatens(miriam, scandal) ::: Miriam threatens to cause a scandal.",
        "Relays(guy, badNews, anne) ::: Guy relays the bad news to Anne.",
        "Comment(guy, \"strangle miriam\") ::: Guy metaphorically comments that he would like to \"strangle\" Miriam.",
        "Stalks(bruno, miriam) ::: Bruno stalks Miriam.",
        "Strangles(bruno, miriam) ::: Bruno fatally strangles Miriam.",
        "Informs(bruno, guy) ::: Bruno informs Guy that Miriam is dead.",
        "Expects(bruno, murder(guy, bruno'sFather)) ::: Bruno expects Guy to follow through on murdering Bruno's father.",
        "Sends(bruno, houseKey, guy) ::: Bruno sends Guy his house key.",
        "Sends(bruno, map, guy) ::: Bruno sends Guy a map to his father's bedroom.",
        "Sends(bruno, pistol, guy) ::: Bruno sends Guy a pistol."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 701,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 3,
      "paragraph": "To pressure Guy into fulfilling his obligation, Bruno introduces himself to Anne and meets Anne's younger sister, Barbara (Patricia Hitchcock), who physically resembles Miriam. Soon after, Bruno appears uninvited at a party at Senator Morton's house. To amuse another guest, Bruno demonstrates how to fatally strangle someone. His gaze happens to fall upon Barbara, and her resemblance to Miriam triggers a flashback. He begins strangling the woman but he blacks out before harming her. An upset Barbara tells Anne that, \"His hands were on her throat, but he was strangling me.\" Anne confronts Guy, who confesses the truth about Bruno's crazy scheme.",
      "question_template": "The Traveller saves [[CANDIDATE_ANSWER]] from drowning.",
      "candidate_answers": [
        "- Demonstrates how to fatally strangle someone",
        "- Begins strangling the woman but blacks out before harming her"
      ],
      "predicates": [
        "Introduces(x, y) ::: x introduces himself to y.",
        "Resembles(x, y) ::: x physically resembles y.",
        "Demonstrates(x, y) ::: x demonstrates how to y.",
        "Strangles(x, y) ::: x strangles y.",
        "BlacksOut(x) ::: x blacks out.",
        "Upset(x) ::: x is upset.",
        "Confronts(x, y) ::: x confronts y.",
        "Confesses(x, y) ::: x confesses the truth about y."
      ],
      "premises": [
        "Introduces(bruno, anne) ::: Bruno introduces himself to Anne.",
        "Introduces(bruno, barbara) ::: Bruno meets Anne's younger sister, Barbara.",
        "Resembles(barbara, miriam) ::: Barbara physically resembles Miriam.",
        "Demonstrates(bruno, fatallyStrangle) ::: Bruno demonstrates how to fatally strangle someone.",
        "GazeFalls(bruno, barbara) ::: Bruno's gaze happens to fall upon Barbara.",
        "TriggersFlashback(bruno, barbara) ::: Barbara's resemblance to Miriam triggers a flashback for Bruno.",
        "Strangles(bruno, woman) ∧ BlacksOut(bruno) ::: Bruno begins strangling the woman but blacks out before harming her.",
        "Upset(barbara) ::: An upset Barbara tells Anne that, \"His hands were on her throat, but he was strangling me.\"",
        "Confronts(anne, guy) ::: Anne confronts Guy.",
        "Confesses(guy, brunoScheme) ::: Guy confesses the truth about Bruno's crazy scheme.",
        "Conclusion:",
        "Influenced(bruno, barbara) ::: Bruno's actions are influenced by his flashback triggered by Barbara's resemblance to Miriam."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 701,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 6,
      "paragraph": "Guy eventually wins the long match at Forest Hills, then, eluding the police, heads for the amusement park. Bruno is also delayed when he accidentally drops Guy's lighter down a storm drain and has to recover it. Guy arrives at the amusement park. Bruno stays out of sight until sunset when he can plant the lighter on the \"Magic Isle\". A worker recognizes Bruno from the night of the murder and informs the police. Guy catches up to Bruno, and they fight on the park's carousel. Thinking Guy is trying to escape, a police officer shoots at him, but his shot misses and kills the carousel operator instead. The dead man falls onto the control panel, and the carousel spins wildly out of control and crashes. The worker who recognized Bruno tells the police that Guy is innocent, and the mortally injured Bruno is the man he saw that night. Guy tells the police that Bruno was attempting to plant Guy's lighter at the murder scene. Bruno refuses to clear Guy, but as he dies, his fingers open to reveal Guy's lighter.",
      "question_template": "The Traveller saves [[CANDIDATE_ANSWER]] from drowning.",
      "candidate_answers": [
        "- The dead man falls onto the control panel, and the carousel spins wildly out of control and crashes.",
        "- Bruno is the man he saw that night.",
        "- Bruno refuses to clear Guy, but as he dies, his fingers open to reveal Guy's lighter."
      ],
      "predicates": [
        "Innocent(x) ::: x is innocent of the murder.",
        "MortallyInjured(x) ::: x is mortally injured.",
        "Reveals(x, y) ::: x reveals y.",
        "Plant(x, y, z) ::: x attempts to plant y at location z.",
        "Recognizes(x, y) ::: x recognizes y.",
        "Fights(x, y) ::: x fights y.",
        "Shoots(x, y) ::: x shoots at y.",
        "Misses(x, y) ::: x misses y.",
        "Kills(x, y) ::: x kills y.",
        "FallsOn(x, y) ::: x falls onto y.",
        "SpinsOutOfControl(x) ::: x spins wildly out of control.",
        "Crashes(x) ::: x crashes.",
        "Tells(x, y, z) ::: x tells y that z."
      ],
      "premises": [
        "MortallyInjured(a_2) ∧ Reveals(a_2, d_1) ::: Bruno is mortally injured and reveals Guy's lighter before dying.",
        "Innocent(a_1) ::: Guy is innocent of the murder.",
        "∀a_4 (Recognizes(a_4, a_2) ∧ Tells(a_4, police, Innocent(a_1))) ::: The worker who recognized Bruno tells the police that Guy is innocent.",
        "Fights(a_1, a_2) ::: Guy catches up to Bruno, and they fight on the park's carousel.",
        "Shoots(police_officer, a_1) ∧ Misses(police_officer, a_1) ∧ Kills(police_officer, a_3) ::: A police officer shoots at Guy, but his shot misses and kills the carousel operator instead.",
        "FallsOn(a_3, control_panel) ∧ SpinsOutOfControl(carousel) ∧ Crashes(carousel) ::: The dead man falls onto the control panel, and the carousel spins wildly out of control and crashes.",
        "Plant(a_2, d_1, b_3) ::: Bruno attempts to plant Guy's lighter at the Magic Isle.",
        "Reveals(a_2, d_1) ::: Bruno reveals Guy's lighter before dying.",
        "Conclusion:",
        "Innocent(a_1) ::: Guy is innocent of the murder.",
        "Reveals(a_2, d_1) ::: Bruno reveals Guy's lighter before dying."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "702": [
    {
      "id": 702,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 0,
      "paragraph": " Amateur tennis star Guy Haines (Farley Granger) wants to marry Anne Morton (Ruth Roman), the daughter of a senator, and pursue a political career. First, he must divorce his vulgar and promiscuous wife Miriam (Laura Elliott). On a train, Bruno Anthony (Robert Walker) recognizes Guy and knows about his marital situation from the gossip pages. Bruno introduces himself, then proposes an idea for the perfect homicide: he and Guy should \"swap murders\". Bruno will murder Miriam, and in exchange Guy will kill Bruno's despised father. Each would be killing a stranger. Having no identifiable motive for the crimes, neither would be suspects. Guy humors Bruno's absurd murder plot by pretending to find it amusing. Bruno interprets this as agreement to the scheme. Bruno then borrows Guy's monogrammed cigarette lighter and slips it into his own pocket.",
      "question_template": "[[CANDIDATE_ANSWER]] kills Weena.",
      "candidate_answers": [
        "On a train",
        "Bruno will murder Miriam"
      ],
      "predicates": [
        "WantsToMarry(x, y) ::: x wants to marry y.",
        "Divorces(x, y) ::: x divorces y.",
        "Recognizes(x, y) ::: x recognizes y.",
        "KnowsAbout(x, y) ::: x knows about y.",
        "Proposes(x, y) ::: x proposes y.",
        "Murders(x, y) ::: x murders y.",
        "Agrees(x, y) ::: x agrees to y.",
        "Humors(x, y) ::: x humors y.",
        "Borrows(x, y) ::: x borrows y.",
        "SlipsIntoPocket(x, y) ::: x slips y into his pocket."
      ],
      "premises": [
        "WantsToMarry(a_1, a_0) ::: Guy Haines wants to marry Anne Morton.",
        "Divorces(a_1, a_4) ::: Guy Haines must divorce his wife Miriam.",
        "Recognizes(a_2, a_1) ::: Bruno Anthony recognizes Guy Haines.",
        "KnowsAbout(a_2, gossipPages) ::: Bruno knows about Guy's marital situation from the gossip pages.",
        "Proposes(a_2, murderScheme) ::: Bruno proposes the idea for the perfect homicide.",
        "Murders(a_2, a_4) ::: Bruno will murder Miriam.",
        "Murders(a_1, a_3) ::: Guy will kill Bruno's despised father.",
        "Agrees(a_1, murderScheme) ::: Guy humors Bruno's absurd murder plot by pretending to find it amusing.",
        "Borrows(a_2, d_1) ::: Bruno borrows Guy's monogrammed cigarette lighter.",
        "SlipsIntoPocket(a_2, d_1) ::: Bruno slips the lighter into his own pocket.",
        "Conclusion:",
        "¬(IdentifiableMotive(a_1, c_2) ∧ IdentifiableMotive(a_2, c_2)) ::: Neither Guy nor Bruno would have identifiable motives for the murders."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 702,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 1,
      "paragraph": "Guy meets with Miriam. Pregnant by someone else, she now refuses to give Guy a divorce and threatens to cause a scandal. Guy relays the bad news to Anne, metaphorically commenting that he would like to \"strangle\" Miriam. Meanwhile, Bruno stalks Miriam through an amusement park and fatally strangles her on the \"Magic Isle\". Bruno then informs Guy that Miriam is dead, and expects him to follow through on murdering Bruno's father. Bruno sends Guy his house key, a map to his father's bedroom, and a pistol.",
      "question_template": "[[CANDIDATE_ANSWER]] kills Weena.",
      "candidate_answers": [
        "Fatally strangles her on the \"Magic Isle\"",
        "Amusement park"
      ],
      "predicates": [
        "Meets(x, y) ::: x meets with y.",
        "Pregnant(x) ::: x is pregnant.",
        "RefusesToDivorce(x, y) ::: x refuses to give y a divorce.",
        "Threatens(x, y) ::: x threatens y.",
        "Relays(x, y, z) ::: x relays information about y to z.",
        "Comment(x, y) ::: x makes a comment about y.",
        "Stalks(x, y) ::: x stalks y.",
        "Strangles(x, y) ::: x strangles y.",
        "Informs(x, y) ::: x informs y about something.",
        "Expects(x, y) ::: x expects y to do something.",
        "Sends(x, y, z) ::: x sends y to z."
      ],
      "premises": [
        "Meets(guy, miriam) ::: Guy meets with Miriam.",
        "Pregnant(miriam) ::: Miriam is pregnant.",
        "RefusesToDivorce(miriam, guy) ::: Miriam refuses to give Guy a divorce.",
        "Threatens(miriam, scandal) ::: Miriam threatens to cause a scandal.",
        "Relays(guy, badNews, anne) ::: Guy relays the bad news to Anne.",
        "Comment(guy, \"strangle miriam\") ::: Guy metaphorically comments that he would like to \"strangle\" Miriam.",
        "Stalks(bruno, miriam) ::: Bruno stalks Miriam.",
        "Strangles(bruno, miriam) ::: Bruno fatally strangles Miriam.",
        "Informs(bruno, guy) ::: Bruno informs Guy that Miriam is dead.",
        "Expects(bruno, murder(guy, bruno'sFather)) ::: Bruno expects Guy to follow through on murdering Bruno's father.",
        "Sends(bruno, houseKey, guy) ::: Bruno sends Guy his house key.",
        "Sends(bruno, map, guy) ::: Bruno sends Guy a map to his father's bedroom.",
        "Sends(bruno, pistol, guy) ::: Bruno sends Guy a pistol."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 702,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 2,
      "paragraph": "When the police question Guy about Miriam's death, he claims he was on a train at the time of the murder. The police determine his alibi is inconclusive because he could have left the train in time to commit the murder and continued his trip on another train. Guy is not arrested, but the police assign an officer to trail him to ensure he does not flee while they investigate.",
      "question_template": "[[CANDIDATE_ANSWER]] kills Weena.",
      "candidate_answers": [
        "Miriam's death",
        "On a train"
      ],
      "predicates": [
        "OnTrain(x) ::: x is on a train.",
        "Claims(x, y) ::: x claims y.",
        "AlibiInconclusive(x) ::: x's alibi is inconclusive.",
        "CouldLeaveTrain(x) ::: x could leave the train in time to commit the murder.",
        "AssignedOfficer(x) ::: an officer is assigned to x.",
        "Trails(x) ::: x is being trailed by an officer.",
        "Flee(x) ::: x flees."
      ],
      "premises": [
        "Claims(a_1, OnTrain(a_1)) ::: Guy claims he was on a train at the time of the murder.",
        "AlibiInconclusive(a_1) ::: The police determine Guy's alibi is inconclusive.",
        "CouldLeaveTrain(a_1) ::: Guy could have left the train in time to commit the murder.",
        "¬Arrested(a_1) ::: Guy is not arrested.",
        "AssignedOfficer(a_1) ∧ Trails(a_1) ::: The police assign an officer to trail Guy to ensure he does not flee while they investigate."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 702,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 3,
      "paragraph": "To pressure Guy into fulfilling his obligation, Bruno introduces himself to Anne and meets Anne's younger sister, Barbara (Patricia Hitchcock), who physically resembles Miriam. Soon after, Bruno appears uninvited at a party at Senator Morton's house. To amuse another guest, Bruno demonstrates how to fatally strangle someone. His gaze happens to fall upon Barbara, and her resemblance to Miriam triggers a flashback. He begins strangling the woman but he blacks out before harming her. An upset Barbara tells Anne that, \"His hands were on her throat, but he was strangling me.\" Anne confronts Guy, who confesses the truth about Bruno's crazy scheme.",
      "question_template": "[[CANDIDATE_ANSWER]] kills Weena.",
      "candidate_answers": [
        "- At a party at Senator Morton's house",
        "- He begins strangling the woman but he blacks out before harming her"
      ],
      "predicates": [
        "Introduces(x, y) ::: x introduces himself to y.",
        "Resembles(x, y) ::: x physically resembles y.",
        "Demonstrates(x, y) ::: x demonstrates how to y.",
        "Strangles(x, y) ::: x strangles y.",
        "BlacksOut(x) ::: x blacks out.",
        "Upset(x) ::: x is upset.",
        "Confronts(x, y) ::: x confronts y.",
        "Confesses(x, y) ::: x confesses the truth about y."
      ],
      "premises": [
        "Introduces(bruno, anne) ::: Bruno introduces himself to Anne.",
        "Introduces(bruno, barbara) ::: Bruno meets Anne's younger sister, Barbara.",
        "Resembles(barbara, miriam) ::: Barbara physically resembles Miriam.",
        "Demonstrates(bruno, fatallyStrangle) ::: Bruno demonstrates how to fatally strangle someone.",
        "GazeFalls(bruno, barbara) ::: Bruno's gaze happens to fall upon Barbara.",
        "TriggersFlashback(bruno, barbara) ::: Barbara's resemblance to Miriam triggers a flashback for Bruno.",
        "Strangles(bruno, woman) ∧ BlacksOut(bruno) ::: Bruno begins strangling the woman but blacks out before harming her.",
        "Upset(barbara) ::: An upset Barbara tells Anne that, \"His hands were on her throat, but he was strangling me.\"",
        "Confronts(anne, guy) ::: Anne confronts Guy.",
        "Confesses(guy, brunoScheme) ::: Guy confesses the truth about Bruno's crazy scheme.",
        "Conclusion:",
        "Influenced(bruno, barbara) ::: Bruno's actions are influenced by his flashback triggered by Barbara's resemblance to Miriam."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 702,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 4,
      "paragraph": "Pretending to agree to Bruno's original plan, Guy sneaks into Mr. Anthony's bedroom intending to warn him of his son's murderous intent. It is Bruno who is waiting there, however. Guy tries to convince Bruno to seek psychiatric help. When Guy refuses to follow through with Bruno's plan, Bruno threatens to frame Guy for Miriam's murder.",
      "question_template": "[[CANDIDATE_ANSWER]] kills Weena.",
      "candidate_answers": [
        "Mr. Anthony's bedroom"
      ],
      "predicates": [
        "MurderousIntent(x) ::: x has a murderous intent.",
        "Threatens(x, y) ::: x threatens y to achieve his goals.",
        "Agrees(x, y) ::: x pretends to agree with y.",
        "SneaksInto(x, y) ::: x sneaks into y's location.",
        "Warns(x, y) ::: x warns y of a danger.",
        "Refuses(x, y) ::: x refuses to follow through with y's plan.",
        "SeeksHelp(x) ::: x seeks psychiatric help."
      ],
      "premises": [
        "Agrees(a_1, plan) ::: Guy pretends to agree to Bruno's original plan.",
        "SneaksInto(a_1, bedroom) ::: Guy sneaks into Mr. Anthony's bedroom.",
        "Warns(a_1, a_2) ::: Guy intends to warn Mr. Anthony of his son's murderous intent.",
        "MurderousIntent(a_2) ::: Bruno has a murderous intent.",
        "Threatens(a_2, a_1) ::: Bruno threatens Guy to frame him for Miriam's murder.",
        "Refuses(a_1, plan) ::: Guy refuses to follow through with Bruno's plan.",
        "SeeksHelp(a_1) ::: Guy tries to convince Bruno to seek psychiatric help."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 702,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 6,
      "paragraph": "Guy eventually wins the long match at Forest Hills, then, eluding the police, heads for the amusement park. Bruno is also delayed when he accidentally drops Guy's lighter down a storm drain and has to recover it. Guy arrives at the amusement park. Bruno stays out of sight until sunset when he can plant the lighter on the \"Magic Isle\". A worker recognizes Bruno from the night of the murder and informs the police. Guy catches up to Bruno, and they fight on the park's carousel. Thinking Guy is trying to escape, a police officer shoots at him, but his shot misses and kills the carousel operator instead. The dead man falls onto the control panel, and the carousel spins wildly out of control and crashes. The worker who recognized Bruno tells the police that Guy is innocent, and the mortally injured Bruno is the man he saw that night. Guy tells the police that Bruno was attempting to plant Guy's lighter at the murder scene. Bruno refuses to clear Guy, but as he dies, his fingers open to reveal Guy's lighter.",
      "question_template": "[[CANDIDATE_ANSWER]] kills Weena.",
      "candidate_answers": [
        "The \"Magic Isle\"",
        "Forest Hills"
      ],
      "predicates": [
        "Innocent(x) ::: x is innocent of the murder.",
        "MortallyInjured(x) ::: x is mortally injured.",
        "Reveals(x, y) ::: x reveals y.",
        "Plant(x, y, z) ::: x attempts to plant y at location z.",
        "Recognizes(x, y) ::: x recognizes y.",
        "Fights(x, y) ::: x fights y.",
        "Shoots(x, y) ::: x shoots at y.",
        "Misses(x, y) ::: x misses y.",
        "Kills(x, y) ::: x kills y.",
        "FallsOn(x, y) ::: x falls onto y.",
        "SpinsOutOfControl(x) ::: x spins wildly out of control.",
        "Crashes(x) ::: x crashes.",
        "Tells(x, y, z) ::: x tells y that z."
      ],
      "premises": [
        "MortallyInjured(a_2) ∧ Reveals(a_2, d_1) ::: Bruno is mortally injured and reveals Guy's lighter before dying.",
        "Innocent(a_1) ::: Guy is innocent of the murder.",
        "∀a_4 (Recognizes(a_4, a_2) ∧ Tells(a_4, police, Innocent(a_1))) ::: The worker who recognized Bruno tells the police that Guy is innocent.",
        "Fights(a_1, a_2) ::: Guy catches up to Bruno, and they fight on the park's carousel.",
        "Shoots(police_officer, a_1) ∧ Misses(police_officer, a_1) ∧ Kills(police_officer, a_3) ::: A police officer shoots at Guy, but his shot misses and kills the carousel operator instead.",
        "FallsOn(a_3, control_panel) ∧ SpinsOutOfControl(carousel) ∧ Crashes(carousel) ::: The dead man falls onto the control panel, and the carousel spins wildly out of control and crashes.",
        "Plant(a_2, d_1, b_3) ::: Bruno attempts to plant Guy's lighter at the Magic Isle.",
        "Reveals(a_2, d_1) ::: Bruno reveals Guy's lighter before dying.",
        "Conclusion:",
        "Innocent(a_1) ::: Guy is innocent of the murder.",
        "Reveals(a_2, d_1) ::: Bruno reveals Guy's lighter before dying."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "703": [
    {
      "id": 703,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 0,
      "paragraph": " Amateur tennis star Guy Haines (Farley Granger) wants to marry Anne Morton (Ruth Roman), the daughter of a senator, and pursue a political career. First, he must divorce his vulgar and promiscuous wife Miriam (Laura Elliott). On a train, Bruno Anthony (Robert Walker) recognizes Guy and knows about his marital situation from the gossip pages. Bruno introduces himself, then proposes an idea for the perfect homicide: he and Guy should \"swap murders\". Bruno will murder Miriam, and in exchange Guy will kill Bruno's despised father. Each would be killing a stranger. Having no identifiable motive for the crimes, neither would be suspects. Guy humors Bruno's absurd murder plot by pretending to find it amusing. Bruno interprets this as agreement to the scheme. Bruno then borrows Guy's monogrammed cigarette lighter and slips it into his own pocket.",
      "question_template": "The Traveller sees [[CANDIDATE_ANSWER]] freezing.",
      "candidate_answers": [
        "- Bruno proposes an idea for the perfect homicide: he and Guy should \"swap murders\".",
        "- Bruno will murder Miriam, and in exchange Guy will kill Bruno's despised father.",
        "- Each would be killing a stranger.",
        "- Guy humors Bruno's absurd murder plot by pretending to find it amusing."
      ],
      "predicates": [
        "WantsToMarry(x, y) ::: x wants to marry y.",
        "Divorces(x, y) ::: x divorces y.",
        "Recognizes(x, y) ::: x recognizes y.",
        "KnowsAbout(x, y) ::: x knows about y.",
        "Proposes(x, y) ::: x proposes y.",
        "Murders(x, y) ::: x murders y.",
        "Agrees(x, y) ::: x agrees to y.",
        "Humors(x, y) ::: x humors y.",
        "Borrows(x, y) ::: x borrows y.",
        "SlipsIntoPocket(x, y) ::: x slips y into his pocket."
      ],
      "premises": [
        "WantsToMarry(a_1, a_0) ::: Guy Haines wants to marry Anne Morton.",
        "Divorces(a_1, a_4) ::: Guy Haines must divorce his wife Miriam.",
        "Recognizes(a_2, a_1) ::: Bruno Anthony recognizes Guy Haines.",
        "KnowsAbout(a_2, gossipPages) ::: Bruno knows about Guy's marital situation from the gossip pages.",
        "Proposes(a_2, murderScheme) ::: Bruno proposes the idea for the perfect homicide.",
        "Murders(a_2, a_4) ::: Bruno will murder Miriam.",
        "Murders(a_1, a_3) ::: Guy will kill Bruno's despised father.",
        "Agrees(a_1, murderScheme) ::: Guy humors Bruno's absurd murder plot by pretending to find it amusing.",
        "Borrows(a_2, d_1) ::: Bruno borrows Guy's monogrammed cigarette lighter.",
        "SlipsIntoPocket(a_2, d_1) ::: Bruno slips the lighter into his own pocket.",
        "Conclusion:",
        "¬(IdentifiableMotive(a_1, c_2) ∧ IdentifiableMotive(a_2, c_2)) ::: Neither Guy nor Bruno would have identifiable motives for the murders."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 703,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 1,
      "paragraph": "Guy meets with Miriam. Pregnant by someone else, she now refuses to give Guy a divorce and threatens to cause a scandal. Guy relays the bad news to Anne, metaphorically commenting that he would like to \"strangle\" Miriam. Meanwhile, Bruno stalks Miriam through an amusement park and fatally strangles her on the \"Magic Isle\". Bruno then informs Guy that Miriam is dead, and expects him to follow through on murdering Bruno's father. Bruno sends Guy his house key, a map to his father's bedroom, and a pistol.",
      "question_template": "The Traveller sees [[CANDIDATE_ANSWER]] freezing.",
      "candidate_answers": [
        "- A pistol",
        "- A map to his father's bedroom"
      ],
      "predicates": [
        "Meets(x, y) ::: x meets with y.",
        "Pregnant(x) ::: x is pregnant.",
        "RefusesToDivorce(x, y) ::: x refuses to give y a divorce.",
        "Threatens(x, y) ::: x threatens y.",
        "Relays(x, y, z) ::: x relays information about y to z.",
        "Comment(x, y) ::: x makes a comment about y.",
        "Stalks(x, y) ::: x stalks y.",
        "Strangles(x, y) ::: x strangles y.",
        "Informs(x, y) ::: x informs y about something.",
        "Expects(x, y) ::: x expects y to do something.",
        "Sends(x, y, z) ::: x sends y to z."
      ],
      "premises": [
        "Meets(guy, miriam) ::: Guy meets with Miriam.",
        "Pregnant(miriam) ::: Miriam is pregnant.",
        "RefusesToDivorce(miriam, guy) ::: Miriam refuses to give Guy a divorce.",
        "Threatens(miriam, scandal) ::: Miriam threatens to cause a scandal.",
        "Relays(guy, badNews, anne) ::: Guy relays the bad news to Anne.",
        "Comment(guy, \"strangle miriam\") ::: Guy metaphorically comments that he would like to \"strangle\" Miriam.",
        "Stalks(bruno, miriam) ::: Bruno stalks Miriam.",
        "Strangles(bruno, miriam) ::: Bruno fatally strangles Miriam.",
        "Informs(bruno, guy) ::: Bruno informs Guy that Miriam is dead.",
        "Expects(bruno, murder(guy, bruno'sFather)) ::: Bruno expects Guy to follow through on murdering Bruno's father.",
        "Sends(bruno, houseKey, guy) ::: Bruno sends Guy his house key.",
        "Sends(bruno, map, guy) ::: Bruno sends Guy a map to his father's bedroom.",
        "Sends(bruno, pistol, guy) ::: Bruno sends Guy a pistol."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "704": [
    {
      "id": 704,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 0,
      "paragraph": " Amateur tennis star Guy Haines (Farley Granger) wants to marry Anne Morton (Ruth Roman), the daughter of a senator, and pursue a political career. First, he must divorce his vulgar and promiscuous wife Miriam (Laura Elliott). On a train, Bruno Anthony (Robert Walker) recognizes Guy and knows about his marital situation from the gossip pages. Bruno introduces himself, then proposes an idea for the perfect homicide: he and Guy should \"swap murders\". Bruno will murder Miriam, and in exchange Guy will kill Bruno's despised father. Each would be killing a stranger. Having no identifiable motive for the crimes, neither would be suspects. Guy humors Bruno's absurd murder plot by pretending to find it amusing. Bruno interprets this as agreement to the scheme. Bruno then borrows Guy's monogrammed cigarette lighter and slips it into his own pocket.",
      "question_template": "Weena had put [[CANDIDATE_ANSWER]] in his pocket.",
      "candidate_answers": [
        "- Proposes an idea for the perfect homicide: he and Guy should \"swap murders\"",
        "- Having no identifiable motive for the crimes, neither would be suspects"
      ],
      "predicates": [
        "WantsToMarry(x, y) ::: x wants to marry y.",
        "Divorces(x, y) ::: x divorces y.",
        "Recognizes(x, y) ::: x recognizes y.",
        "KnowsAbout(x, y) ::: x knows about y.",
        "Proposes(x, y) ::: x proposes y.",
        "Murders(x, y) ::: x murders y.",
        "Agrees(x, y) ::: x agrees to y.",
        "Humors(x, y) ::: x humors y.",
        "Borrows(x, y) ::: x borrows y.",
        "SlipsIntoPocket(x, y) ::: x slips y into his pocket."
      ],
      "premises": [
        "WantsToMarry(a_1, a_0) ::: Guy Haines wants to marry Anne Morton.",
        "Divorces(a_1, a_4) ::: Guy Haines must divorce his wife Miriam.",
        "Recognizes(a_2, a_1) ::: Bruno Anthony recognizes Guy Haines.",
        "KnowsAbout(a_2, gossipPages) ::: Bruno knows about Guy's marital situation from the gossip pages.",
        "Proposes(a_2, murderScheme) ::: Bruno proposes the idea for the perfect homicide.",
        "Murders(a_2, a_4) ::: Bruno will murder Miriam.",
        "Murders(a_1, a_3) ::: Guy will kill Bruno's despised father.",
        "Agrees(a_1, murderScheme) ::: Guy humors Bruno's absurd murder plot by pretending to find it amusing.",
        "Borrows(a_2, d_1) ::: Bruno borrows Guy's monogrammed cigarette lighter.",
        "SlipsIntoPocket(a_2, d_1) ::: Bruno slips the lighter into his own pocket.",
        "Conclusion:",
        "¬(IdentifiableMotive(a_1, c_2) ∧ IdentifiableMotive(a_2, c_2)) ::: Neither Guy nor Bruno would have identifiable motives for the murders."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 704,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 3,
      "paragraph": "To pressure Guy into fulfilling his obligation, Bruno introduces himself to Anne and meets Anne's younger sister, Barbara (Patricia Hitchcock), who physically resembles Miriam. Soon after, Bruno appears uninvited at a party at Senator Morton's house. To amuse another guest, Bruno demonstrates how to fatally strangle someone. His gaze happens to fall upon Barbara, and her resemblance to Miriam triggers a flashback. He begins strangling the woman but he blacks out before harming her. An upset Barbara tells Anne that, \"His hands were on her throat, but he was strangling me.\" Anne confronts Guy, who confesses the truth about Bruno's crazy scheme.",
      "question_template": "Weena had put [[CANDIDATE_ANSWER]] in his pocket.",
      "candidate_answers": [
        "- Bruno demonstrates how to fatally strangle someone.",
        "- His gaze happens to fall upon Barbara, and her resemblance to Miriam triggers a flashback.",
        "- He begins strangling the woman but he blacks out before harming her.",
        "- An upset Barbara tells Anne that, \"His hands were on her throat, but he was strangling me.\"",
        "- Anne confronts Guy, who confesses the truth about Bruno's crazy scheme."
      ],
      "predicates": [
        "Introduces(x, y) ::: x introduces himself to y.",
        "Resembles(x, y) ::: x physically resembles y.",
        "Demonstrates(x, y) ::: x demonstrates how to y.",
        "Strangles(x, y) ::: x strangles y.",
        "BlacksOut(x) ::: x blacks out.",
        "Upset(x) ::: x is upset.",
        "Confronts(x, y) ::: x confronts y.",
        "Confesses(x, y) ::: x confesses the truth about y."
      ],
      "premises": [
        "Introduces(bruno, anne) ::: Bruno introduces himself to Anne.",
        "Introduces(bruno, barbara) ::: Bruno meets Anne's younger sister, Barbara.",
        "Resembles(barbara, miriam) ::: Barbara physically resembles Miriam.",
        "Demonstrates(bruno, fatallyStrangle) ::: Bruno demonstrates how to fatally strangle someone.",
        "GazeFalls(bruno, barbara) ::: Bruno's gaze happens to fall upon Barbara.",
        "TriggersFlashback(bruno, barbara) ::: Barbara's resemblance to Miriam triggers a flashback for Bruno.",
        "Strangles(bruno, woman) ∧ BlacksOut(bruno) ::: Bruno begins strangling the woman but blacks out before harming her.",
        "Upset(barbara) ::: An upset Barbara tells Anne that, \"His hands were on her throat, but he was strangling me.\"",
        "Confronts(anne, guy) ::: Anne confronts Guy.",
        "Confesses(guy, brunoScheme) ::: Guy confesses the truth about Bruno's crazy scheme.",
        "Conclusion:",
        "Influenced(bruno, barbara) ::: Bruno's actions are influenced by his flashback triggered by Barbara's resemblance to Miriam."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 704,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 4,
      "paragraph": "Pretending to agree to Bruno's original plan, Guy sneaks into Mr. Anthony's bedroom intending to warn him of his son's murderous intent. It is Bruno who is waiting there, however. Guy tries to convince Bruno to seek psychiatric help. When Guy refuses to follow through with Bruno's plan, Bruno threatens to frame Guy for Miriam's murder.",
      "question_template": "Weena had put [[CANDIDATE_ANSWER]] in his pocket.",
      "candidate_answers": [
        "Threatens to frame Guy for Miriam's murder"
      ],
      "predicates": [
        "MurderousIntent(x) ::: x has a murderous intent.",
        "Threatens(x, y) ::: x threatens y to achieve his goals.",
        "Agrees(x, y) ::: x pretends to agree with y.",
        "SneaksInto(x, y) ::: x sneaks into y's location.",
        "Warns(x, y) ::: x warns y of a danger.",
        "Refuses(x, y) ::: x refuses to follow through with y's plan.",
        "SeeksHelp(x) ::: x seeks psychiatric help."
      ],
      "premises": [
        "Agrees(a_1, plan) ::: Guy pretends to agree to Bruno's original plan.",
        "SneaksInto(a_1, bedroom) ::: Guy sneaks into Mr. Anthony's bedroom.",
        "Warns(a_1, a_2) ::: Guy intends to warn Mr. Anthony of his son's murderous intent.",
        "MurderousIntent(a_2) ::: Bruno has a murderous intent.",
        "Threatens(a_2, a_1) ::: Bruno threatens Guy to frame him for Miriam's murder.",
        "Refuses(a_1, plan) ::: Guy refuses to follow through with Bruno's plan.",
        "SeeksHelp(a_1) ::: Guy tries to convince Bruno to seek psychiatric help."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "705": [
    {
      "id": 705,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 1,
      "paragraph": "Guy meets with Miriam. Pregnant by someone else, she now refuses to give Guy a divorce and threatens to cause a scandal. Guy relays the bad news to Anne, metaphorically commenting that he would like to \"strangle\" Miriam. Meanwhile, Bruno stalks Miriam through an amusement park and fatally strangles her on the \"Magic Isle\". Bruno then informs Guy that Miriam is dead, and expects him to follow through on murdering Bruno's father. Bruno sends Guy his house key, a map to his father's bedroom, and a pistol.",
      "question_template": "The Eloi have [[CANDIDATE_ANSWER]] diet.",
      "candidate_answers": [
        "Bruno",
        "Miriam"
      ],
      "predicates": [
        "Meets(x, y) ::: x meets with y.",
        "Pregnant(x) ::: x is pregnant.",
        "RefusesToDivorce(x, y) ::: x refuses to give y a divorce.",
        "Threatens(x, y) ::: x threatens y.",
        "Relays(x, y, z) ::: x relays information about y to z.",
        "Comment(x, y) ::: x makes a comment about y.",
        "Stalks(x, y) ::: x stalks y.",
        "Strangles(x, y) ::: x strangles y.",
        "Informs(x, y) ::: x informs y about something.",
        "Expects(x, y) ::: x expects y to do something.",
        "Sends(x, y, z) ::: x sends y to z."
      ],
      "premises": [
        "Meets(guy, miriam) ::: Guy meets with Miriam.",
        "Pregnant(miriam) ::: Miriam is pregnant.",
        "RefusesToDivorce(miriam, guy) ::: Miriam refuses to give Guy a divorce.",
        "Threatens(miriam, scandal) ::: Miriam threatens to cause a scandal.",
        "Relays(guy, badNews, anne) ::: Guy relays the bad news to Anne.",
        "Comment(guy, \"strangle miriam\") ::: Guy metaphorically comments that he would like to \"strangle\" Miriam.",
        "Stalks(bruno, miriam) ::: Bruno stalks Miriam.",
        "Strangles(bruno, miriam) ::: Bruno fatally strangles Miriam.",
        "Informs(bruno, guy) ::: Bruno informs Guy that Miriam is dead.",
        "Expects(bruno, murder(guy, bruno'sFather)) ::: Bruno expects Guy to follow through on murdering Bruno's father.",
        "Sends(bruno, houseKey, guy) ::: Bruno sends Guy his house key.",
        "Sends(bruno, map, guy) ::: Bruno sends Guy a map to his father's bedroom.",
        "Sends(bruno, pistol, guy) ::: Bruno sends Guy a pistol."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "706": [
    {
      "id": 706,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 0,
      "paragraph": " Amateur tennis star Guy Haines (Farley Granger) wants to marry Anne Morton (Ruth Roman), the daughter of a senator, and pursue a political career. First, he must divorce his vulgar and promiscuous wife Miriam (Laura Elliott). On a train, Bruno Anthony (Robert Walker) recognizes Guy and knows about his marital situation from the gossip pages. Bruno introduces himself, then proposes an idea for the perfect homicide: he and Guy should \"swap murders\". Bruno will murder Miriam, and in exchange Guy will kill Bruno's despised father. Each would be killing a stranger. Having no identifiable motive for the crimes, neither would be suspects. Guy humors Bruno's absurd murder plot by pretending to find it amusing. Bruno interprets this as agreement to the scheme. Bruno then borrows Guy's monogrammed cigarette lighter and slips it into his own pocket.",
      "question_template": "The Morlocks live in [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Bruno borrows Guy's monogrammed cigarette lighter and slips it into his own pocket."
      ],
      "predicates": [
        "WantsToMarry(x, y) ::: x wants to marry y.",
        "Divorces(x, y) ::: x divorces y.",
        "Recognizes(x, y) ::: x recognizes y.",
        "KnowsAbout(x, y) ::: x knows about y.",
        "Proposes(x, y) ::: x proposes y.",
        "Murders(x, y) ::: x murders y.",
        "Agrees(x, y) ::: x agrees to y.",
        "Humors(x, y) ::: x humors y.",
        "Borrows(x, y) ::: x borrows y.",
        "SlipsIntoPocket(x, y) ::: x slips y into his pocket."
      ],
      "premises": [
        "WantsToMarry(a_1, a_0) ::: Guy Haines wants to marry Anne Morton.",
        "Divorces(a_1, a_4) ::: Guy Haines must divorce his wife Miriam.",
        "Recognizes(a_2, a_1) ::: Bruno Anthony recognizes Guy Haines.",
        "KnowsAbout(a_2, gossipPages) ::: Bruno knows about Guy's marital situation from the gossip pages.",
        "Proposes(a_2, murderScheme) ::: Bruno proposes the idea for the perfect homicide.",
        "Murders(a_2, a_4) ::: Bruno will murder Miriam.",
        "Murders(a_1, a_3) ::: Guy will kill Bruno's despised father.",
        "Agrees(a_1, murderScheme) ::: Guy humors Bruno's absurd murder plot by pretending to find it amusing.",
        "Borrows(a_2, d_1) ::: Bruno borrows Guy's monogrammed cigarette lighter.",
        "SlipsIntoPocket(a_2, d_1) ::: Bruno slips the lighter into his own pocket.",
        "Conclusion:",
        "¬(IdentifiableMotive(a_1, c_2) ∧ IdentifiableMotive(a_2, c_2)) ::: Neither Guy nor Bruno would have identifiable motives for the murders."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 706,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 1,
      "paragraph": "Guy meets with Miriam. Pregnant by someone else, she now refuses to give Guy a divorce and threatens to cause a scandal. Guy relays the bad news to Anne, metaphorically commenting that he would like to \"strangle\" Miriam. Meanwhile, Bruno stalks Miriam through an amusement park and fatally strangles her on the \"Magic Isle\". Bruno then informs Guy that Miriam is dead, and expects him to follow through on murdering Bruno's father. Bruno sends Guy his house key, a map to his father's bedroom, and a pistol.",
      "question_template": "The Morlocks live in [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "A pistol",
        "A map to his father's bedroom",
        "His house key"
      ],
      "predicates": [
        "Meets(x, y) ::: x meets with y.",
        "Pregnant(x) ::: x is pregnant.",
        "RefusesToDivorce(x, y) ::: x refuses to give y a divorce.",
        "Threatens(x, y) ::: x threatens y.",
        "Relays(x, y, z) ::: x relays information about y to z.",
        "Comment(x, y) ::: x makes a comment about y.",
        "Stalks(x, y) ::: x stalks y.",
        "Strangles(x, y) ::: x strangles y.",
        "Informs(x, y) ::: x informs y about something.",
        "Expects(x, y) ::: x expects y to do something.",
        "Sends(x, y, z) ::: x sends y to z."
      ],
      "premises": [
        "Meets(guy, miriam) ::: Guy meets with Miriam.",
        "Pregnant(miriam) ::: Miriam is pregnant.",
        "RefusesToDivorce(miriam, guy) ::: Miriam refuses to give Guy a divorce.",
        "Threatens(miriam, scandal) ::: Miriam threatens to cause a scandal.",
        "Relays(guy, badNews, anne) ::: Guy relays the bad news to Anne.",
        "Comment(guy, \"strangle miriam\") ::: Guy metaphorically comments that he would like to \"strangle\" Miriam.",
        "Stalks(bruno, miriam) ::: Bruno stalks Miriam.",
        "Strangles(bruno, miriam) ::: Bruno fatally strangles Miriam.",
        "Informs(bruno, guy) ::: Bruno informs Guy that Miriam is dead.",
        "Expects(bruno, murder(guy, bruno'sFather)) ::: Bruno expects Guy to follow through on murdering Bruno's father.",
        "Sends(bruno, houseKey, guy) ::: Bruno sends Guy his house key.",
        "Sends(bruno, map, guy) ::: Bruno sends Guy a map to his father's bedroom.",
        "Sends(bruno, pistol, guy) ::: Bruno sends Guy a pistol."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 706,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 4,
      "paragraph": "Pretending to agree to Bruno's original plan, Guy sneaks into Mr. Anthony's bedroom intending to warn him of his son's murderous intent. It is Bruno who is waiting there, however. Guy tries to convince Bruno to seek psychiatric help. When Guy refuses to follow through with Bruno's plan, Bruno threatens to frame Guy for Miriam's murder.",
      "question_template": "The Morlocks live in [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Frame Guy for Miriam's murder"
      ],
      "predicates": [
        "MurderousIntent(x) ::: x has a murderous intent.",
        "Threatens(x, y) ::: x threatens y to achieve his goals.",
        "Agrees(x, y) ::: x pretends to agree with y.",
        "SneaksInto(x, y) ::: x sneaks into y's location.",
        "Warns(x, y) ::: x warns y of a danger.",
        "Refuses(x, y) ::: x refuses to follow through with y's plan.",
        "SeeksHelp(x) ::: x seeks psychiatric help."
      ],
      "premises": [
        "Agrees(a_1, plan) ::: Guy pretends to agree to Bruno's original plan.",
        "SneaksInto(a_1, bedroom) ::: Guy sneaks into Mr. Anthony's bedroom.",
        "Warns(a_1, a_2) ::: Guy intends to warn Mr. Anthony of his son's murderous intent.",
        "MurderousIntent(a_2) ::: Bruno has a murderous intent.",
        "Threatens(a_2, a_1) ::: Bruno threatens Guy to frame him for Miriam's murder.",
        "Refuses(a_1, plan) ::: Guy refuses to follow through with Bruno's plan.",
        "SeeksHelp(a_1) ::: Guy tries to convince Bruno to seek psychiatric help."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "707": [
    {
      "id": 707,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 1,
      "paragraph": "Guy meets with Miriam. Pregnant by someone else, she now refuses to give Guy a divorce and threatens to cause a scandal. Guy relays the bad news to Anne, metaphorically commenting that he would like to \"strangle\" Miriam. Meanwhile, Bruno stalks Miriam through an amusement park and fatally strangles her on the \"Magic Isle\". Bruno then informs Guy that Miriam is dead, and expects him to follow through on murdering Bruno's father. Bruno sends Guy his house key, a map to his father's bedroom, and a pistol.",
      "question_template": "The Morlocks feed on [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Magic Isle"
      ],
      "predicates": [
        "Meets(x, y) ::: x meets with y.",
        "Pregnant(x) ::: x is pregnant.",
        "RefusesToDivorce(x, y) ::: x refuses to give y a divorce.",
        "Threatens(x, y) ::: x threatens y.",
        "Relays(x, y, z) ::: x relays information about y to z.",
        "Comment(x, y) ::: x makes a comment about y.",
        "Stalks(x, y) ::: x stalks y.",
        "Strangles(x, y) ::: x strangles y.",
        "Informs(x, y) ::: x informs y about something.",
        "Expects(x, y) ::: x expects y to do something.",
        "Sends(x, y, z) ::: x sends y to z."
      ],
      "premises": [
        "Meets(guy, miriam) ::: Guy meets with Miriam.",
        "Pregnant(miriam) ::: Miriam is pregnant.",
        "RefusesToDivorce(miriam, guy) ::: Miriam refuses to give Guy a divorce.",
        "Threatens(miriam, scandal) ::: Miriam threatens to cause a scandal.",
        "Relays(guy, badNews, anne) ::: Guy relays the bad news to Anne.",
        "Comment(guy, \"strangle miriam\") ::: Guy metaphorically comments that he would like to \"strangle\" Miriam.",
        "Stalks(bruno, miriam) ::: Bruno stalks Miriam.",
        "Strangles(bruno, miriam) ::: Bruno fatally strangles Miriam.",
        "Informs(bruno, guy) ::: Bruno informs Guy that Miriam is dead.",
        "Expects(bruno, murder(guy, bruno'sFather)) ::: Bruno expects Guy to follow through on murdering Bruno's father.",
        "Sends(bruno, houseKey, guy) ::: Bruno sends Guy his house key.",
        "Sends(bruno, map, guy) ::: Bruno sends Guy a map to his father's bedroom.",
        "Sends(bruno, pistol, guy) ::: Bruno sends Guy a pistol."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "708": [
    {
      "id": 708,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 0,
      "paragraph": " Amateur tennis star Guy Haines (Farley Granger) wants to marry Anne Morton (Ruth Roman), the daughter of a senator, and pursue a political career. First, he must divorce his vulgar and promiscuous wife Miriam (Laura Elliott). On a train, Bruno Anthony (Robert Walker) recognizes Guy and knows about his marital situation from the gossip pages. Bruno introduces himself, then proposes an idea for the perfect homicide: he and Guy should \"swap murders\". Bruno will murder Miriam, and in exchange Guy will kill Bruno's despised father. Each would be killing a stranger. Having no identifiable motive for the crimes, neither would be suspects. Guy humors Bruno's absurd murder plot by pretending to find it amusing. Bruno interprets this as agreement to the scheme. Bruno then borrows Guy's monogrammed cigarette lighter and slips it into his own pocket.",
      "question_template": "The Time Traveller saves [[CANDIDATE_ANSWER]] from drowning.",
      "candidate_answers": [
        "- Wants to marry Anne Morton",
        "- Pursue a political career"
      ],
      "predicates": [
        "WantsToMarry(x, y) ::: x wants to marry y.",
        "Divorces(x, y) ::: x divorces y.",
        "Recognizes(x, y) ::: x recognizes y.",
        "KnowsAbout(x, y) ::: x knows about y.",
        "Proposes(x, y) ::: x proposes y.",
        "Murders(x, y) ::: x murders y.",
        "Agrees(x, y) ::: x agrees to y.",
        "Humors(x, y) ::: x humors y.",
        "Borrows(x, y) ::: x borrows y.",
        "SlipsIntoPocket(x, y) ::: x slips y into his pocket."
      ],
      "premises": [
        "WantsToMarry(a_1, a_0) ::: Guy Haines wants to marry Anne Morton.",
        "Divorces(a_1, a_4) ::: Guy Haines must divorce his wife Miriam.",
        "Recognizes(a_2, a_1) ::: Bruno Anthony recognizes Guy Haines.",
        "KnowsAbout(a_2, gossipPages) ::: Bruno knows about Guy's marital situation from the gossip pages.",
        "Proposes(a_2, murderScheme) ::: Bruno proposes the idea for the perfect homicide.",
        "Murders(a_2, a_4) ::: Bruno will murder Miriam.",
        "Murders(a_1, a_3) ::: Guy will kill Bruno's despised father.",
        "Agrees(a_1, murderScheme) ::: Guy humors Bruno's absurd murder plot by pretending to find it amusing.",
        "Borrows(a_2, d_1) ::: Bruno borrows Guy's monogrammed cigarette lighter.",
        "SlipsIntoPocket(a_2, d_1) ::: Bruno slips the lighter into his own pocket.",
        "Conclusion:",
        "¬(IdentifiableMotive(a_1, c_2) ∧ IdentifiableMotive(a_2, c_2)) ::: Neither Guy nor Bruno would have identifiable motives for the murders."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 708,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 1,
      "paragraph": "Guy meets with Miriam. Pregnant by someone else, she now refuses to give Guy a divorce and threatens to cause a scandal. Guy relays the bad news to Anne, metaphorically commenting that he would like to \"strangle\" Miriam. Meanwhile, Bruno stalks Miriam through an amusement park and fatally strangles her on the \"Magic Isle\". Bruno then informs Guy that Miriam is dead, and expects him to follow through on murdering Bruno's father. Bruno sends Guy his house key, a map to his father's bedroom, and a pistol.",
      "question_template": "The Time Traveller saves [[CANDIDATE_ANSWER]] from drowning.",
      "candidate_answers": [
        "- He would like to \"strangle\" Miriam",
        "- Bruno expects him to follow through on murdering Bruno's father"
      ],
      "predicates": [
        "Meets(x, y) ::: x meets with y.",
        "Pregnant(x) ::: x is pregnant.",
        "RefusesToDivorce(x, y) ::: x refuses to give y a divorce.",
        "Threatens(x, y) ::: x threatens y.",
        "Relays(x, y, z) ::: x relays information about y to z.",
        "Comment(x, y) ::: x makes a comment about y.",
        "Stalks(x, y) ::: x stalks y.",
        "Strangles(x, y) ::: x strangles y.",
        "Informs(x, y) ::: x informs y about something.",
        "Expects(x, y) ::: x expects y to do something.",
        "Sends(x, y, z) ::: x sends y to z."
      ],
      "premises": [
        "Meets(guy, miriam) ::: Guy meets with Miriam.",
        "Pregnant(miriam) ::: Miriam is pregnant.",
        "RefusesToDivorce(miriam, guy) ::: Miriam refuses to give Guy a divorce.",
        "Threatens(miriam, scandal) ::: Miriam threatens to cause a scandal.",
        "Relays(guy, badNews, anne) ::: Guy relays the bad news to Anne.",
        "Comment(guy, \"strangle miriam\") ::: Guy metaphorically comments that he would like to \"strangle\" Miriam.",
        "Stalks(bruno, miriam) ::: Bruno stalks Miriam.",
        "Strangles(bruno, miriam) ::: Bruno fatally strangles Miriam.",
        "Informs(bruno, guy) ::: Bruno informs Guy that Miriam is dead.",
        "Expects(bruno, murder(guy, bruno'sFather)) ::: Bruno expects Guy to follow through on murdering Bruno's father.",
        "Sends(bruno, houseKey, guy) ::: Bruno sends Guy his house key.",
        "Sends(bruno, map, guy) ::: Bruno sends Guy a map to his father's bedroom.",
        "Sends(bruno, pistol, guy) ::: Bruno sends Guy a pistol."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 708,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 3,
      "paragraph": "To pressure Guy into fulfilling his obligation, Bruno introduces himself to Anne and meets Anne's younger sister, Barbara (Patricia Hitchcock), who physically resembles Miriam. Soon after, Bruno appears uninvited at a party at Senator Morton's house. To amuse another guest, Bruno demonstrates how to fatally strangle someone. His gaze happens to fall upon Barbara, and her resemblance to Miriam triggers a flashback. He begins strangling the woman but he blacks out before harming her. An upset Barbara tells Anne that, \"His hands were on her throat, but he was strangling me.\" Anne confronts Guy, who confesses the truth about Bruno's crazy scheme.",
      "question_template": "The Time Traveller saves [[CANDIDATE_ANSWER]] from drowning.",
      "candidate_answers": [
        "To pressure Guy into fulfilling his obligation",
        "Bruno's crazy scheme"
      ],
      "predicates": [
        "Introduces(x, y) ::: x introduces himself to y.",
        "Resembles(x, y) ::: x physically resembles y.",
        "Demonstrates(x, y) ::: x demonstrates how to y.",
        "Strangles(x, y) ::: x strangles y.",
        "BlacksOut(x) ::: x blacks out.",
        "Upset(x) ::: x is upset.",
        "Confronts(x, y) ::: x confronts y.",
        "Confesses(x, y) ::: x confesses the truth about y."
      ],
      "premises": [
        "Introduces(bruno, anne) ::: Bruno introduces himself to Anne.",
        "Introduces(bruno, barbara) ::: Bruno meets Anne's younger sister, Barbara.",
        "Resembles(barbara, miriam) ::: Barbara physically resembles Miriam.",
        "Demonstrates(bruno, fatallyStrangle) ::: Bruno demonstrates how to fatally strangle someone.",
        "GazeFalls(bruno, barbara) ::: Bruno's gaze happens to fall upon Barbara.",
        "TriggersFlashback(bruno, barbara) ::: Barbara's resemblance to Miriam triggers a flashback for Bruno.",
        "Strangles(bruno, woman) ∧ BlacksOut(bruno) ::: Bruno begins strangling the woman but blacks out before harming her.",
        "Upset(barbara) ::: An upset Barbara tells Anne that, \"His hands were on her throat, but he was strangling me.\"",
        "Confronts(anne, guy) ::: Anne confronts Guy.",
        "Confesses(guy, brunoScheme) ::: Guy confesses the truth about Bruno's crazy scheme.",
        "Conclusion:",
        "Influenced(bruno, barbara) ::: Bruno's actions are influenced by his flashback triggered by Barbara's resemblance to Miriam."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "709": [
    {
      "id": 709,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 1,
      "paragraph": "Guy meets with Miriam. Pregnant by someone else, she now refuses to give Guy a divorce and threatens to cause a scandal. Guy relays the bad news to Anne, metaphorically commenting that he would like to \"strangle\" Miriam. Meanwhile, Bruno stalks Miriam through an amusement park and fatally strangles her on the \"Magic Isle\". Bruno then informs Guy that Miriam is dead, and expects him to follow through on murdering Bruno's father. Bruno sends Guy his house key, a map to his father's bedroom, and a pistol.",
      "question_template": "The Traveller originates from [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Magic Isle"
      ],
      "predicates": [
        "Meets(x, y) ::: x meets with y.",
        "Pregnant(x) ::: x is pregnant.",
        "RefusesToDivorce(x, y) ::: x refuses to give y a divorce.",
        "Threatens(x, y) ::: x threatens y.",
        "Relays(x, y, z) ::: x relays information about y to z.",
        "Comment(x, y) ::: x makes a comment about y.",
        "Stalks(x, y) ::: x stalks y.",
        "Strangles(x, y) ::: x strangles y.",
        "Informs(x, y) ::: x informs y about something.",
        "Expects(x, y) ::: x expects y to do something.",
        "Sends(x, y, z) ::: x sends y to z."
      ],
      "premises": [
        "Meets(guy, miriam) ::: Guy meets with Miriam.",
        "Pregnant(miriam) ::: Miriam is pregnant.",
        "RefusesToDivorce(miriam, guy) ::: Miriam refuses to give Guy a divorce.",
        "Threatens(miriam, scandal) ::: Miriam threatens to cause a scandal.",
        "Relays(guy, badNews, anne) ::: Guy relays the bad news to Anne.",
        "Comment(guy, \"strangle miriam\") ::: Guy metaphorically comments that he would like to \"strangle\" Miriam.",
        "Stalks(bruno, miriam) ::: Bruno stalks Miriam.",
        "Strangles(bruno, miriam) ::: Bruno fatally strangles Miriam.",
        "Informs(bruno, guy) ::: Bruno informs Guy that Miriam is dead.",
        "Expects(bruno, murder(guy, bruno'sFather)) ::: Bruno expects Guy to follow through on murdering Bruno's father.",
        "Sends(bruno, houseKey, guy) ::: Bruno sends Guy his house key.",
        "Sends(bruno, map, guy) ::: Bruno sends Guy a map to his father's bedroom.",
        "Sends(bruno, pistol, guy) ::: Bruno sends Guy a pistol."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "710": [
    {
      "id": 710,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 1,
      "paragraph": "Guy meets with Miriam. Pregnant by someone else, she now refuses to give Guy a divorce and threatens to cause a scandal. Guy relays the bad news to Anne, metaphorically commenting that he would like to \"strangle\" Miriam. Meanwhile, Bruno stalks Miriam through an amusement park and fatally strangles her on the \"Magic Isle\". Bruno then informs Guy that Miriam is dead, and expects him to follow through on murdering Bruno's father. Bruno sends Guy his house key, a map to his father's bedroom, and a pistol.",
      "question_template": "Weena hides [[CANDIDATE_ANSWER]] in the Traveller's pocket.",
      "candidate_answers": [
        "Amusement park",
        "On the \"Magic Isle\""
      ],
      "predicates": [
        "Meets(x, y) ::: x meets with y.",
        "Pregnant(x) ::: x is pregnant.",
        "RefusesToDivorce(x, y) ::: x refuses to give y a divorce.",
        "Threatens(x, y) ::: x threatens y.",
        "Relays(x, y, z) ::: x relays information about y to z.",
        "Comment(x, y) ::: x makes a comment about y.",
        "Stalks(x, y) ::: x stalks y.",
        "Strangles(x, y) ::: x strangles y.",
        "Informs(x, y) ::: x informs y about something.",
        "Expects(x, y) ::: x expects y to do something.",
        "Sends(x, y, z) ::: x sends y to z."
      ],
      "premises": [
        "Meets(guy, miriam) ::: Guy meets with Miriam.",
        "Pregnant(miriam) ::: Miriam is pregnant.",
        "RefusesToDivorce(miriam, guy) ::: Miriam refuses to give Guy a divorce.",
        "Threatens(miriam, scandal) ::: Miriam threatens to cause a scandal.",
        "Relays(guy, badNews, anne) ::: Guy relays the bad news to Anne.",
        "Comment(guy, \"strangle miriam\") ::: Guy metaphorically comments that he would like to \"strangle\" Miriam.",
        "Stalks(bruno, miriam) ::: Bruno stalks Miriam.",
        "Strangles(bruno, miriam) ::: Bruno fatally strangles Miriam.",
        "Informs(bruno, guy) ::: Bruno informs Guy that Miriam is dead.",
        "Expects(bruno, murder(guy, bruno'sFather)) ::: Bruno expects Guy to follow through on murdering Bruno's father.",
        "Sends(bruno, houseKey, guy) ::: Bruno sends Guy his house key.",
        "Sends(bruno, map, guy) ::: Bruno sends Guy a map to his father's bedroom.",
        "Sends(bruno, pistol, guy) ::: Bruno sends Guy a pistol."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "711": [
    {
      "id": 711,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 1,
      "paragraph": "Guy meets with Miriam. Pregnant by someone else, she now refuses to give Guy a divorce and threatens to cause a scandal. Guy relays the bad news to Anne, metaphorically commenting that he would like to \"strangle\" Miriam. Meanwhile, Bruno stalks Miriam through an amusement park and fatally strangles her on the \"Magic Isle\". Bruno then informs Guy that Miriam is dead, and expects him to follow through on murdering Bruno's father. Bruno sends Guy his house key, a map to his father's bedroom, and a pistol.",
      "question_template": "The flowers that Weena places into a pocket are [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- To follow through on murdering Bruno's father",
        "- Bruno sends Guy his house key, a map to his father's bedroom, and a pistol"
      ],
      "predicates": [
        "Meets(x, y) ::: x meets with y.",
        "Pregnant(x) ::: x is pregnant.",
        "RefusesToDivorce(x, y) ::: x refuses to give y a divorce.",
        "Threatens(x, y) ::: x threatens y.",
        "Relays(x, y, z) ::: x relays information about y to z.",
        "Comment(x, y) ::: x makes a comment about y.",
        "Stalks(x, y) ::: x stalks y.",
        "Strangles(x, y) ::: x strangles y.",
        "Informs(x, y) ::: x informs y about something.",
        "Expects(x, y) ::: x expects y to do something.",
        "Sends(x, y, z) ::: x sends y to z."
      ],
      "premises": [
        "Meets(guy, miriam) ::: Guy meets with Miriam.",
        "Pregnant(miriam) ::: Miriam is pregnant.",
        "RefusesToDivorce(miriam, guy) ::: Miriam refuses to give Guy a divorce.",
        "Threatens(miriam, scandal) ::: Miriam threatens to cause a scandal.",
        "Relays(guy, badNews, anne) ::: Guy relays the bad news to Anne.",
        "Comment(guy, \"strangle miriam\") ::: Guy metaphorically comments that he would like to \"strangle\" Miriam.",
        "Stalks(bruno, miriam) ::: Bruno stalks Miriam.",
        "Strangles(bruno, miriam) ::: Bruno fatally strangles Miriam.",
        "Informs(bruno, guy) ::: Bruno informs Guy that Miriam is dead.",
        "Expects(bruno, murder(guy, bruno'sFather)) ::: Bruno expects Guy to follow through on murdering Bruno's father.",
        "Sends(bruno, houseKey, guy) ::: Bruno sends Guy his house key.",
        "Sends(bruno, map, guy) ::: Bruno sends Guy a map to his father's bedroom.",
        "Sends(bruno, pistol, guy) ::: Bruno sends Guy a pistol."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 711,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 4,
      "paragraph": "Pretending to agree to Bruno's original plan, Guy sneaks into Mr. Anthony's bedroom intending to warn him of his son's murderous intent. It is Bruno who is waiting there, however. Guy tries to convince Bruno to seek psychiatric help. When Guy refuses to follow through with Bruno's plan, Bruno threatens to frame Guy for Miriam's murder.",
      "question_template": "The flowers that Weena places into a pocket are [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Pretending to agree to Bruno's original plan",
        "- Intending to warn him of his son's murderous intent"
      ],
      "predicates": [
        "MurderousIntent(x) ::: x has a murderous intent.",
        "Threatens(x, y) ::: x threatens y to achieve his goals.",
        "Agrees(x, y) ::: x pretends to agree with y.",
        "SneaksInto(x, y) ::: x sneaks into y's location.",
        "Warns(x, y) ::: x warns y of a danger.",
        "Refuses(x, y) ::: x refuses to follow through with y's plan.",
        "SeeksHelp(x) ::: x seeks psychiatric help."
      ],
      "premises": [
        "Agrees(a_1, plan) ::: Guy pretends to agree to Bruno's original plan.",
        "SneaksInto(a_1, bedroom) ::: Guy sneaks into Mr. Anthony's bedroom.",
        "Warns(a_1, a_2) ::: Guy intends to warn Mr. Anthony of his son's murderous intent.",
        "MurderousIntent(a_2) ::: Bruno has a murderous intent.",
        "Threatens(a_2, a_1) ::: Bruno threatens Guy to frame him for Miriam's murder.",
        "Refuses(a_1, plan) ::: Guy refuses to follow through with Bruno's plan.",
        "SeeksHelp(a_1) ::: Guy tries to convince Bruno to seek psychiatric help."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "712": [
    {
      "id": 712,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 6,
      "paragraph": "Guy eventually wins the long match at Forest Hills, then, eluding the police, heads for the amusement park. Bruno is also delayed when he accidentally drops Guy's lighter down a storm drain and has to recover it. Guy arrives at the amusement park. Bruno stays out of sight until sunset when he can plant the lighter on the \"Magic Isle\". A worker recognizes Bruno from the night of the murder and informs the police. Guy catches up to Bruno, and they fight on the park's carousel. Thinking Guy is trying to escape, a police officer shoots at him, but his shot misses and kills the carousel operator instead. The dead man falls onto the control panel, and the carousel spins wildly out of control and crashes. The worker who recognized Bruno tells the police that Guy is innocent, and the mortally injured Bruno is the man he saw that night. Guy tells the police that Bruno was attempting to plant Guy's lighter at the murder scene. Bruno refuses to clear Guy, but as he dies, his fingers open to reveal Guy's lighter.",
      "question_template": "The Time Traveller resides in [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The worker who recognized Bruno tells the police that Guy is innocent",
        "Bruno refuses to clear Guy"
      ],
      "predicates": [
        "Innocent(x) ::: x is innocent of the murder.",
        "MortallyInjured(x) ::: x is mortally injured.",
        "Reveals(x, y) ::: x reveals y.",
        "Plant(x, y, z) ::: x attempts to plant y at location z.",
        "Recognizes(x, y) ::: x recognizes y.",
        "Fights(x, y) ::: x fights y.",
        "Shoots(x, y) ::: x shoots at y.",
        "Misses(x, y) ::: x misses y.",
        "Kills(x, y) ::: x kills y.",
        "FallsOn(x, y) ::: x falls onto y.",
        "SpinsOutOfControl(x) ::: x spins wildly out of control.",
        "Crashes(x) ::: x crashes.",
        "Tells(x, y, z) ::: x tells y that z."
      ],
      "premises": [
        "MortallyInjured(a_2) ∧ Reveals(a_2, d_1) ::: Bruno is mortally injured and reveals Guy's lighter before dying.",
        "Innocent(a_1) ::: Guy is innocent of the murder.",
        "∀a_4 (Recognizes(a_4, a_2) ∧ Tells(a_4, police, Innocent(a_1))) ::: The worker who recognized Bruno tells the police that Guy is innocent.",
        "Fights(a_1, a_2) ::: Guy catches up to Bruno, and they fight on the park's carousel.",
        "Shoots(police_officer, a_1) ∧ Misses(police_officer, a_1) ∧ Kills(police_officer, a_3) ::: A police officer shoots at Guy, but his shot misses and kills the carousel operator instead.",
        "FallsOn(a_3, control_panel) ∧ SpinsOutOfControl(carousel) ∧ Crashes(carousel) ::: The dead man falls onto the control panel, and the carousel spins wildly out of control and crashes.",
        "Plant(a_2, d_1, b_3) ::: Bruno attempts to plant Guy's lighter at the Magic Isle.",
        "Reveals(a_2, d_1) ::: Bruno reveals Guy's lighter before dying.",
        "Conclusion:",
        "Innocent(a_1) ::: Guy is innocent of the murder.",
        "Reveals(a_2, d_1) ::: Bruno reveals Guy's lighter before dying."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "715": [
    {
      "id": 715,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 5,
      "paragraph": "Anne visits Bruno's mother (Marion Lorne) to tell her that her son committed a murder, but the befuddled woman discounts it. Bruno appears and informs Anne that he intends to incriminate Guy by planting the stolen cigarette lighter at the amusement park. Anne and Guy devise a plan for Guy to finish his tennis match, evade the police, and reach the amusement park to prevent Bruno from planting the lighter.",
      "question_template": "[[CANDIDATE_ANSWER]] is Guy Haine's profession.",
      "candidate_answers": [
        "Tennis player"
      ],
      "predicates": [
        "Visits(x, y) ::: x visits y.",
        "Informs(x, y, z) ::: x informs y about z.",
        "Intends(x, y) ::: x intends to do y.",
        "Plans(x, y) ::: x plans to do y.",
        "Incriminate(x, y) ::: x incriminates y.",
        "Plant(x, y, z) ::: x plants y at z.",
        "Evade(x, y) ::: x evades y.",
        "FinishMatch(x) ::: x finishes his tennis match.",
        "Reach(x, y) ::: x reaches y."
      ],
      "premises": [
        "Visits(anne, marion) ::: Anne visits Bruno's mother, Marion Lorne, to tell her that her son committed a murder.",
        "¬Informs(marion, anne, murder) ::: The befuddled woman discounts the information about the murder.",
        "Intends(bruno, Incriminate(guy)) ::: Bruno intends to incriminate Guy by planting the stolen cigarette lighter.",
        "Plant(bruno, lighter, amusementPark) ::: Bruno plans to plant the stolen lighter at the amusement park.",
        "Plans(anne, Evade(guy, police)) ::: Anne and Guy devise a plan for Guy to evade the police.",
        "FinishMatch(guy) ::: Guy is to finish his tennis match.",
        "Reach(guy, amusementPark) ::: Guy is to reach the amusement park to prevent Bruno from planting the lighter."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "716": [
    {
      "id": 716,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 3,
      "paragraph": "To pressure Guy into fulfilling his obligation, Bruno introduces himself to Anne and meets Anne's younger sister, Barbara (Patricia Hitchcock), who physically resembles Miriam. Soon after, Bruno appears uninvited at a party at Senator Morton's house. To amuse another guest, Bruno demonstrates how to fatally strangle someone. His gaze happens to fall upon Barbara, and her resemblance to Miriam triggers a flashback. He begins strangling the woman but he blacks out before harming her. An upset Barbara tells Anne that, \"His hands were on her throat, but he was strangling me.\" Anne confronts Guy, who confesses the truth about Bruno's crazy scheme.",
      "question_template": "Guy wants to marry [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Senator Morton"
      ],
      "predicates": [
        "Introduces(x, y) ::: x introduces himself to y.",
        "Resembles(x, y) ::: x physically resembles y.",
        "Demonstrates(x, y) ::: x demonstrates how to y.",
        "Strangles(x, y) ::: x strangles y.",
        "BlacksOut(x) ::: x blacks out.",
        "Upset(x) ::: x is upset.",
        "Confronts(x, y) ::: x confronts y.",
        "Confesses(x, y) ::: x confesses the truth about y."
      ],
      "premises": [
        "Introduces(bruno, anne) ::: Bruno introduces himself to Anne.",
        "Introduces(bruno, barbara) ::: Bruno meets Anne's younger sister, Barbara.",
        "Resembles(barbara, miriam) ::: Barbara physically resembles Miriam.",
        "Demonstrates(bruno, fatallyStrangle) ::: Bruno demonstrates how to fatally strangle someone.",
        "GazeFalls(bruno, barbara) ::: Bruno's gaze happens to fall upon Barbara.",
        "TriggersFlashback(bruno, barbara) ::: Barbara's resemblance to Miriam triggers a flashback for Bruno.",
        "Strangles(bruno, woman) ∧ BlacksOut(bruno) ::: Bruno begins strangling the woman but blacks out before harming her.",
        "Upset(barbara) ::: An upset Barbara tells Anne that, \"His hands were on her throat, but he was strangling me.\"",
        "Confronts(anne, guy) ::: Anne confronts Guy.",
        "Confesses(guy, brunoScheme) ::: Guy confesses the truth about Bruno's crazy scheme.",
        "Conclusion:",
        "Influenced(bruno, barbara) ::: Bruno's actions are influenced by his flashback triggered by Barbara's resemblance to Miriam."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "717": [
    {
      "id": 717,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 0,
      "paragraph": " Amateur tennis star Guy Haines (Farley Granger) wants to marry Anne Morton (Ruth Roman), the daughter of a senator, and pursue a political career. First, he must divorce his vulgar and promiscuous wife Miriam (Laura Elliott). On a train, Bruno Anthony (Robert Walker) recognizes Guy and knows about his marital situation from the gossip pages. Bruno introduces himself, then proposes an idea for the perfect homicide: he and Guy should \"swap murders\". Bruno will murder Miriam, and in exchange Guy will kill Bruno's despised father. Each would be killing a stranger. Having no identifiable motive for the crimes, neither would be suspects. Guy humors Bruno's absurd murder plot by pretending to find it amusing. Bruno interprets this as agreement to the scheme. Bruno then borrows Guy's monogrammed cigarette lighter and slips it into his own pocket.",
      "question_template": "[[CANDIDATE_ANSWER]] is the reason Guy can't marry her.",
      "candidate_answers": [
        "pursue a political career"
      ],
      "predicates": [
        "WantsToMarry(x, y) ::: x wants to marry y.",
        "Divorces(x, y) ::: x divorces y.",
        "Recognizes(x, y) ::: x recognizes y.",
        "KnowsAbout(x, y) ::: x knows about y.",
        "Proposes(x, y) ::: x proposes y.",
        "Murders(x, y) ::: x murders y.",
        "Agrees(x, y) ::: x agrees to y.",
        "Humors(x, y) ::: x humors y.",
        "Borrows(x, y) ::: x borrows y.",
        "SlipsIntoPocket(x, y) ::: x slips y into his pocket."
      ],
      "premises": [
        "WantsToMarry(a_1, a_0) ::: Guy Haines wants to marry Anne Morton.",
        "Divorces(a_1, a_4) ::: Guy Haines must divorce his wife Miriam.",
        "Recognizes(a_2, a_1) ::: Bruno Anthony recognizes Guy Haines.",
        "KnowsAbout(a_2, gossipPages) ::: Bruno knows about Guy's marital situation from the gossip pages.",
        "Proposes(a_2, murderScheme) ::: Bruno proposes the idea for the perfect homicide.",
        "Murders(a_2, a_4) ::: Bruno will murder Miriam.",
        "Murders(a_1, a_3) ::: Guy will kill Bruno's despised father.",
        "Agrees(a_1, murderScheme) ::: Guy humors Bruno's absurd murder plot by pretending to find it amusing.",
        "Borrows(a_2, d_1) ::: Bruno borrows Guy's monogrammed cigarette lighter.",
        "SlipsIntoPocket(a_2, d_1) ::: Bruno slips the lighter into his own pocket.",
        "Conclusion:",
        "¬(IdentifiableMotive(a_1, c_2) ∧ IdentifiableMotive(a_2, c_2)) ::: Neither Guy nor Bruno would have identifiable motives for the murders."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 717,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 1,
      "paragraph": "Guy meets with Miriam. Pregnant by someone else, she now refuses to give Guy a divorce and threatens to cause a scandal. Guy relays the bad news to Anne, metaphorically commenting that he would like to \"strangle\" Miriam. Meanwhile, Bruno stalks Miriam through an amusement park and fatally strangles her on the \"Magic Isle\". Bruno then informs Guy that Miriam is dead, and expects him to follow through on murdering Bruno's father. Bruno sends Guy his house key, a map to his father's bedroom, and a pistol.",
      "question_template": "[[CANDIDATE_ANSWER]] is the reason Guy can't marry her.",
      "candidate_answers": [
        "- \"Guy relays the bad news to Anne\"",
        "- \"he would like to 'strangle' Miriam\"",
        "- \"expects him to follow through on murdering Bruno's father\""
      ],
      "predicates": [
        "Meets(x, y) ::: x meets with y.",
        "Pregnant(x) ::: x is pregnant.",
        "RefusesToDivorce(x, y) ::: x refuses to give y a divorce.",
        "Threatens(x, y) ::: x threatens y.",
        "Relays(x, y, z) ::: x relays information about y to z.",
        "Comment(x, y) ::: x makes a comment about y.",
        "Stalks(x, y) ::: x stalks y.",
        "Strangles(x, y) ::: x strangles y.",
        "Informs(x, y) ::: x informs y about something.",
        "Expects(x, y) ::: x expects y to do something.",
        "Sends(x, y, z) ::: x sends y to z."
      ],
      "premises": [
        "Meets(guy, miriam) ::: Guy meets with Miriam.",
        "Pregnant(miriam) ::: Miriam is pregnant.",
        "RefusesToDivorce(miriam, guy) ::: Miriam refuses to give Guy a divorce.",
        "Threatens(miriam, scandal) ::: Miriam threatens to cause a scandal.",
        "Relays(guy, badNews, anne) ::: Guy relays the bad news to Anne.",
        "Comment(guy, \"strangle miriam\") ::: Guy metaphorically comments that he would like to \"strangle\" Miriam.",
        "Stalks(bruno, miriam) ::: Bruno stalks Miriam.",
        "Strangles(bruno, miriam) ::: Bruno fatally strangles Miriam.",
        "Informs(bruno, guy) ::: Bruno informs Guy that Miriam is dead.",
        "Expects(bruno, murder(guy, bruno'sFather)) ::: Bruno expects Guy to follow through on murdering Bruno's father.",
        "Sends(bruno, houseKey, guy) ::: Bruno sends Guy his house key.",
        "Sends(bruno, map, guy) ::: Bruno sends Guy a map to his father's bedroom.",
        "Sends(bruno, pistol, guy) ::: Bruno sends Guy a pistol."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 717,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 3,
      "paragraph": "To pressure Guy into fulfilling his obligation, Bruno introduces himself to Anne and meets Anne's younger sister, Barbara (Patricia Hitchcock), who physically resembles Miriam. Soon after, Bruno appears uninvited at a party at Senator Morton's house. To amuse another guest, Bruno demonstrates how to fatally strangle someone. His gaze happens to fall upon Barbara, and her resemblance to Miriam triggers a flashback. He begins strangling the woman but he blacks out before harming her. An upset Barbara tells Anne that, \"His hands were on her throat, but he was strangling me.\" Anne confronts Guy, who confesses the truth about Bruno's crazy scheme.",
      "question_template": "[[CANDIDATE_ANSWER]] is the reason Guy can't marry her.",
      "candidate_answers": [
        "No relevant information found in the paragraph."
      ],
      "predicates": [
        "Introduces(x, y) ::: x introduces himself to y.",
        "Resembles(x, y) ::: x physically resembles y.",
        "Demonstrates(x, y) ::: x demonstrates how to y.",
        "Strangles(x, y) ::: x strangles y.",
        "BlacksOut(x) ::: x blacks out.",
        "Upset(x) ::: x is upset.",
        "Confronts(x, y) ::: x confronts y.",
        "Confesses(x, y) ::: x confesses the truth about y."
      ],
      "premises": [
        "Introduces(bruno, anne) ::: Bruno introduces himself to Anne.",
        "Introduces(bruno, barbara) ::: Bruno meets Anne's younger sister, Barbara.",
        "Resembles(barbara, miriam) ::: Barbara physically resembles Miriam.",
        "Demonstrates(bruno, fatallyStrangle) ::: Bruno demonstrates how to fatally strangle someone.",
        "GazeFalls(bruno, barbara) ::: Bruno's gaze happens to fall upon Barbara.",
        "TriggersFlashback(bruno, barbara) ::: Barbara's resemblance to Miriam triggers a flashback for Bruno.",
        "Strangles(bruno, woman) ∧ BlacksOut(bruno) ::: Bruno begins strangling the woman but blacks out before harming her.",
        "Upset(barbara) ::: An upset Barbara tells Anne that, \"His hands were on her throat, but he was strangling me.\"",
        "Confronts(anne, guy) ::: Anne confronts Guy.",
        "Confesses(guy, brunoScheme) ::: Guy confesses the truth about Bruno's crazy scheme.",
        "Conclusion:",
        "Influenced(bruno, barbara) ::: Bruno's actions are influenced by his flashback triggered by Barbara's resemblance to Miriam."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "718": [
    {
      "id": 718,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 1,
      "paragraph": "Guy meets with Miriam. Pregnant by someone else, she now refuses to give Guy a divorce and threatens to cause a scandal. Guy relays the bad news to Anne, metaphorically commenting that he would like to \"strangle\" Miriam. Meanwhile, Bruno stalks Miriam through an amusement park and fatally strangles her on the \"Magic Isle\". Bruno then informs Guy that Miriam is dead, and expects him to follow through on murdering Bruno's father. Bruno sends Guy his house key, a map to his father's bedroom, and a pistol.",
      "question_template": "Bruno proposes [[CANDIDATE_ANSWER]] to Guy.",
      "candidate_answers": [
        "Miriam refuses to give Guy a divorce",
        "Pregnant by someone else",
        "Threatens to cause a scandal"
      ],
      "predicates": [
        "Meets(x, y) ::: x meets with y.",
        "Pregnant(x) ::: x is pregnant.",
        "RefusesToDivorce(x, y) ::: x refuses to give y a divorce.",
        "Threatens(x, y) ::: x threatens y.",
        "Relays(x, y, z) ::: x relays information about y to z.",
        "Comment(x, y) ::: x makes a comment about y.",
        "Stalks(x, y) ::: x stalks y.",
        "Strangles(x, y) ::: x strangles y.",
        "Informs(x, y) ::: x informs y about something.",
        "Expects(x, y) ::: x expects y to do something.",
        "Sends(x, y, z) ::: x sends y to z."
      ],
      "premises": [
        "Meets(guy, miriam) ::: Guy meets with Miriam.",
        "Pregnant(miriam) ::: Miriam is pregnant.",
        "RefusesToDivorce(miriam, guy) ::: Miriam refuses to give Guy a divorce.",
        "Threatens(miriam, scandal) ::: Miriam threatens to cause a scandal.",
        "Relays(guy, badNews, anne) ::: Guy relays the bad news to Anne.",
        "Comment(guy, \"strangle miriam\") ::: Guy metaphorically comments that he would like to \"strangle\" Miriam.",
        "Stalks(bruno, miriam) ::: Bruno stalks Miriam.",
        "Strangles(bruno, miriam) ::: Bruno fatally strangles Miriam.",
        "Informs(bruno, guy) ::: Bruno informs Guy that Miriam is dead.",
        "Expects(bruno, murder(guy, bruno'sFather)) ::: Bruno expects Guy to follow through on murdering Bruno's father.",
        "Sends(bruno, houseKey, guy) ::: Bruno sends Guy his house key.",
        "Sends(bruno, map, guy) ::: Bruno sends Guy a map to his father's bedroom.",
        "Sends(bruno, pistol, guy) ::: Bruno sends Guy a pistol."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 718,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 3,
      "paragraph": "To pressure Guy into fulfilling his obligation, Bruno introduces himself to Anne and meets Anne's younger sister, Barbara (Patricia Hitchcock), who physically resembles Miriam. Soon after, Bruno appears uninvited at a party at Senator Morton's house. To amuse another guest, Bruno demonstrates how to fatally strangle someone. His gaze happens to fall upon Barbara, and her resemblance to Miriam triggers a flashback. He begins strangling the woman but he blacks out before harming her. An upset Barbara tells Anne that, \"His hands were on her throat, but he was strangling me.\" Anne confronts Guy, who confesses the truth about Bruno's crazy scheme.",
      "question_template": "Bruno proposes [[CANDIDATE_ANSWER]] to Guy.",
      "candidate_answers": [
        "- To pressure Guy into fulfilling his obligation",
        "- Bruno introduces himself to Anne",
        "- Bruno appears uninvited at a party at Senator Morton's house",
        "- Bruno demonstrates how to fatally strangle someone",
        "- His gaze happens to fall upon Barbara",
        "- Her resemblance to Miriam triggers a flashback",
        "- He begins strangling the woman but blacks out before harming her",
        "- An upset Barbara tells Anne that, \"His hands were on her throat, but he was strangling me.\"",
        "- Anne confronts Guy, who confesses the truth about Bruno's crazy scheme"
      ],
      "predicates": [
        "Introduces(x, y) ::: x introduces himself to y.",
        "Resembles(x, y) ::: x physically resembles y.",
        "Demonstrates(x, y) ::: x demonstrates how to y.",
        "Strangles(x, y) ::: x strangles y.",
        "BlacksOut(x) ::: x blacks out.",
        "Upset(x) ::: x is upset.",
        "Confronts(x, y) ::: x confronts y.",
        "Confesses(x, y) ::: x confesses the truth about y."
      ],
      "premises": [
        "Introduces(bruno, anne) ::: Bruno introduces himself to Anne.",
        "Introduces(bruno, barbara) ::: Bruno meets Anne's younger sister, Barbara.",
        "Resembles(barbara, miriam) ::: Barbara physically resembles Miriam.",
        "Demonstrates(bruno, fatallyStrangle) ::: Bruno demonstrates how to fatally strangle someone.",
        "GazeFalls(bruno, barbara) ::: Bruno's gaze happens to fall upon Barbara.",
        "TriggersFlashback(bruno, barbara) ::: Barbara's resemblance to Miriam triggers a flashback for Bruno.",
        "Strangles(bruno, woman) ∧ BlacksOut(bruno) ::: Bruno begins strangling the woman but blacks out before harming her.",
        "Upset(barbara) ::: An upset Barbara tells Anne that, \"His hands were on her throat, but he was strangling me.\"",
        "Confronts(anne, guy) ::: Anne confronts Guy.",
        "Confesses(guy, brunoScheme) ::: Guy confesses the truth about Bruno's crazy scheme.",
        "Conclusion:",
        "Influenced(bruno, barbara) ::: Bruno's actions are influenced by his flashback triggered by Barbara's resemblance to Miriam."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 718,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 5,
      "paragraph": "Anne visits Bruno's mother (Marion Lorne) to tell her that her son committed a murder, but the befuddled woman discounts it. Bruno appears and informs Anne that he intends to incriminate Guy by planting the stolen cigarette lighter at the amusement park. Anne and Guy devise a plan for Guy to finish his tennis match, evade the police, and reach the amusement park to prevent Bruno from planting the lighter.",
      "question_template": "Bruno proposes [[CANDIDATE_ANSWER]] to Guy.",
      "candidate_answers": [
        "Anne visits Bruno's mother to tell her that her son committed a murder",
        "Bruno intends to incriminate Guy by planting the stolen cigarette lighter",
        "Anne and Guy devise a plan for Guy to finish his tennis match, evade the police, and reach the amusement park"
      ],
      "predicates": [
        "Visits(x, y) ::: x visits y.",
        "Informs(x, y, z) ::: x informs y about z.",
        "Intends(x, y) ::: x intends to do y.",
        "Plans(x, y) ::: x plans to do y.",
        "Incriminate(x, y) ::: x incriminates y.",
        "Plant(x, y, z) ::: x plants y at z.",
        "Evade(x, y) ::: x evades y.",
        "FinishMatch(x) ::: x finishes his tennis match.",
        "Reach(x, y) ::: x reaches y."
      ],
      "premises": [
        "Visits(anne, marion) ::: Anne visits Bruno's mother, Marion Lorne, to tell her that her son committed a murder.",
        "¬Informs(marion, anne, murder) ::: The befuddled woman discounts the information about the murder.",
        "Intends(bruno, Incriminate(guy)) ::: Bruno intends to incriminate Guy by planting the stolen cigarette lighter.",
        "Plant(bruno, lighter, amusementPark) ::: Bruno plans to plant the stolen lighter at the amusement park.",
        "Plans(anne, Evade(guy, police)) ::: Anne and Guy devise a plan for Guy to evade the police.",
        "FinishMatch(guy) ::: Guy is to finish his tennis match.",
        "Reach(guy, amusementPark) ::: Guy is to reach the amusement park to prevent Bruno from planting the lighter."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "719": [
    {
      "id": 719,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 0,
      "paragraph": " Amateur tennis star Guy Haines (Farley Granger) wants to marry Anne Morton (Ruth Roman), the daughter of a senator, and pursue a political career. First, he must divorce his vulgar and promiscuous wife Miriam (Laura Elliott). On a train, Bruno Anthony (Robert Walker) recognizes Guy and knows about his marital situation from the gossip pages. Bruno introduces himself, then proposes an idea for the perfect homicide: he and Guy should \"swap murders\". Bruno will murder Miriam, and in exchange Guy will kill Bruno's despised father. Each would be killing a stranger. Having no identifiable motive for the crimes, neither would be suspects. Guy humors Bruno's absurd murder plot by pretending to find it amusing. Bruno interprets this as agreement to the scheme. Bruno then borrows Guy's monogrammed cigarette lighter and slips it into his own pocket.",
      "question_template": "Bruno murders Miriam by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- \"He and Guy should 'swap murders'.\"",
        "- \"Bruno will murder Miriam, and in exchange Guy will kill Bruno's despised father.\""
      ],
      "predicates": [
        "WantsToMarry(x, y) ::: x wants to marry y.",
        "Divorces(x, y) ::: x divorces y.",
        "Recognizes(x, y) ::: x recognizes y.",
        "KnowsAbout(x, y) ::: x knows about y.",
        "Proposes(x, y) ::: x proposes y.",
        "Murders(x, y) ::: x murders y.",
        "Agrees(x, y) ::: x agrees to y.",
        "Humors(x, y) ::: x humors y.",
        "Borrows(x, y) ::: x borrows y.",
        "SlipsIntoPocket(x, y) ::: x slips y into his pocket."
      ],
      "premises": [
        "WantsToMarry(a_1, a_0) ::: Guy Haines wants to marry Anne Morton.",
        "Divorces(a_1, a_4) ::: Guy Haines must divorce his wife Miriam.",
        "Recognizes(a_2, a_1) ::: Bruno Anthony recognizes Guy Haines.",
        "KnowsAbout(a_2, gossipPages) ::: Bruno knows about Guy's marital situation from the gossip pages.",
        "Proposes(a_2, murderScheme) ::: Bruno proposes the idea for the perfect homicide.",
        "Murders(a_2, a_4) ::: Bruno will murder Miriam.",
        "Murders(a_1, a_3) ::: Guy will kill Bruno's despised father.",
        "Agrees(a_1, murderScheme) ::: Guy humors Bruno's absurd murder plot by pretending to find it amusing.",
        "Borrows(a_2, d_1) ::: Bruno borrows Guy's monogrammed cigarette lighter.",
        "SlipsIntoPocket(a_2, d_1) ::: Bruno slips the lighter into his own pocket.",
        "Conclusion:",
        "¬(IdentifiableMotive(a_1, c_2) ∧ IdentifiableMotive(a_2, c_2)) ::: Neither Guy nor Bruno would have identifiable motives for the murders."
      ],
      "conclusions": [
        "None",
        "Murders(bruno, miriam)"
      ]
    },
    {
      "id": 719,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 1,
      "paragraph": "Guy meets with Miriam. Pregnant by someone else, she now refuses to give Guy a divorce and threatens to cause a scandal. Guy relays the bad news to Anne, metaphorically commenting that he would like to \"strangle\" Miriam. Meanwhile, Bruno stalks Miriam through an amusement park and fatally strangles her on the \"Magic Isle\". Bruno then informs Guy that Miriam is dead, and expects him to follow through on murdering Bruno's father. Bruno sends Guy his house key, a map to his father's bedroom, and a pistol.",
      "question_template": "Bruno murders Miriam by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Expecting him to follow through on murdering Bruno's father",
        "- Sends Guy his house key, a map to his father's bedroom, and a pistol"
      ],
      "predicates": [
        "Meets(x, y) ::: x meets with y.",
        "Pregnant(x) ::: x is pregnant.",
        "RefusesToDivorce(x, y) ::: x refuses to give y a divorce.",
        "Threatens(x, y) ::: x threatens y.",
        "Relays(x, y, z) ::: x relays information about y to z.",
        "Comment(x, y) ::: x makes a comment about y.",
        "Stalks(x, y) ::: x stalks y.",
        "Strangles(x, y) ::: x strangles y.",
        "Informs(x, y) ::: x informs y about something.",
        "Expects(x, y) ::: x expects y to do something.",
        "Sends(x, y, z) ::: x sends y to z."
      ],
      "premises": [
        "Meets(guy, miriam) ::: Guy meets with Miriam.",
        "Pregnant(miriam) ::: Miriam is pregnant.",
        "RefusesToDivorce(miriam, guy) ::: Miriam refuses to give Guy a divorce.",
        "Threatens(miriam, scandal) ::: Miriam threatens to cause a scandal.",
        "Relays(guy, badNews, anne) ::: Guy relays the bad news to Anne.",
        "Comment(guy, \"strangle miriam\") ::: Guy metaphorically comments that he would like to \"strangle\" Miriam.",
        "Stalks(bruno, miriam) ::: Bruno stalks Miriam.",
        "Strangles(bruno, miriam) ::: Bruno fatally strangles Miriam.",
        "Informs(bruno, guy) ::: Bruno informs Guy that Miriam is dead.",
        "Expects(bruno, murder(guy, bruno'sFather)) ::: Bruno expects Guy to follow through on murdering Bruno's father.",
        "Sends(bruno, houseKey, guy) ::: Bruno sends Guy his house key.",
        "Sends(bruno, map, guy) ::: Bruno sends Guy a map to his father's bedroom.",
        "Sends(bruno, pistol, guy) ::: Bruno sends Guy a pistol."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 719,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 3,
      "paragraph": "To pressure Guy into fulfilling his obligation, Bruno introduces himself to Anne and meets Anne's younger sister, Barbara (Patricia Hitchcock), who physically resembles Miriam. Soon after, Bruno appears uninvited at a party at Senator Morton's house. To amuse another guest, Bruno demonstrates how to fatally strangle someone. His gaze happens to fall upon Barbara, and her resemblance to Miriam triggers a flashback. He begins strangling the woman but he blacks out before harming her. An upset Barbara tells Anne that, \"His hands were on her throat, but he was strangling me.\" Anne confronts Guy, who confesses the truth about Bruno's crazy scheme.",
      "question_template": "Bruno murders Miriam by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "To pressure Guy into fulfilling his obligation",
        "Bruno demonstrates how to fatally strangle someone",
        "His gaze happens to fall upon Barbara, and her resemblance to Miriam triggers a flashback",
        "He begins strangling the woman but he blacks out before harming her",
        "Anne confronts Guy, who confesses the truth about Bruno's crazy scheme"
      ],
      "predicates": [
        "Introduces(x, y) ::: x introduces himself to y.",
        "Resembles(x, y) ::: x physically resembles y.",
        "Demonstrates(x, y) ::: x demonstrates how to y.",
        "Strangles(x, y) ::: x strangles y.",
        "BlacksOut(x) ::: x blacks out.",
        "Upset(x) ::: x is upset.",
        "Confronts(x, y) ::: x confronts y.",
        "Confesses(x, y) ::: x confesses the truth about y."
      ],
      "premises": [
        "Introduces(bruno, anne) ::: Bruno introduces himself to Anne.",
        "Introduces(bruno, barbara) ::: Bruno meets Anne's younger sister, Barbara.",
        "Resembles(barbara, miriam) ::: Barbara physically resembles Miriam.",
        "Demonstrates(bruno, fatallyStrangle) ::: Bruno demonstrates how to fatally strangle someone.",
        "GazeFalls(bruno, barbara) ::: Bruno's gaze happens to fall upon Barbara.",
        "TriggersFlashback(bruno, barbara) ::: Barbara's resemblance to Miriam triggers a flashback for Bruno.",
        "Strangles(bruno, woman) ∧ BlacksOut(bruno) ::: Bruno begins strangling the woman but blacks out before harming her.",
        "Upset(barbara) ::: An upset Barbara tells Anne that, \"His hands were on her throat, but he was strangling me.\"",
        "Confronts(anne, guy) ::: Anne confronts Guy.",
        "Confesses(guy, brunoScheme) ::: Guy confesses the truth about Bruno's crazy scheme.",
        "Conclusion:",
        "Influenced(bruno, barbara) ::: Bruno's actions are influenced by his flashback triggered by Barbara's resemblance to Miriam."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 719,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 4,
      "paragraph": "Pretending to agree to Bruno's original plan, Guy sneaks into Mr. Anthony's bedroom intending to warn him of his son's murderous intent. It is Bruno who is waiting there, however. Guy tries to convince Bruno to seek psychiatric help. When Guy refuses to follow through with Bruno's plan, Bruno threatens to frame Guy for Miriam's murder.",
      "question_template": "Bruno murders Miriam by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Bruno's original plan",
        "Frame Guy for Miriam's murder"
      ],
      "predicates": [
        "MurderousIntent(x) ::: x has a murderous intent.",
        "Threatens(x, y) ::: x threatens y to achieve his goals.",
        "Agrees(x, y) ::: x pretends to agree with y.",
        "SneaksInto(x, y) ::: x sneaks into y's location.",
        "Warns(x, y) ::: x warns y of a danger.",
        "Refuses(x, y) ::: x refuses to follow through with y's plan.",
        "SeeksHelp(x) ::: x seeks psychiatric help."
      ],
      "premises": [
        "Agrees(a_1, plan) ::: Guy pretends to agree to Bruno's original plan.",
        "SneaksInto(a_1, bedroom) ::: Guy sneaks into Mr. Anthony's bedroom.",
        "Warns(a_1, a_2) ::: Guy intends to warn Mr. Anthony of his son's murderous intent.",
        "MurderousIntent(a_2) ::: Bruno has a murderous intent.",
        "Threatens(a_2, a_1) ::: Bruno threatens Guy to frame him for Miriam's murder.",
        "Refuses(a_1, plan) ::: Guy refuses to follow through with Bruno's plan.",
        "SeeksHelp(a_1) ::: Guy tries to convince Bruno to seek psychiatric help."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 719,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 5,
      "paragraph": "Anne visits Bruno's mother (Marion Lorne) to tell her that her son committed a murder, but the befuddled woman discounts it. Bruno appears and informs Anne that he intends to incriminate Guy by planting the stolen cigarette lighter at the amusement park. Anne and Guy devise a plan for Guy to finish his tennis match, evade the police, and reach the amusement park to prevent Bruno from planting the lighter.",
      "question_template": "Bruno murders Miriam by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Incriminate Guy by planting the stolen cigarette lighter at the amusement park"
      ],
      "predicates": [
        "Visits(x, y) ::: x visits y.",
        "Informs(x, y, z) ::: x informs y about z.",
        "Intends(x, y) ::: x intends to do y.",
        "Plans(x, y) ::: x plans to do y.",
        "Incriminate(x, y) ::: x incriminates y.",
        "Plant(x, y, z) ::: x plants y at z.",
        "Evade(x, y) ::: x evades y.",
        "FinishMatch(x) ::: x finishes his tennis match.",
        "Reach(x, y) ::: x reaches y."
      ],
      "premises": [
        "Visits(anne, marion) ::: Anne visits Bruno's mother, Marion Lorne, to tell her that her son committed a murder.",
        "¬Informs(marion, anne, murder) ::: The befuddled woman discounts the information about the murder.",
        "Intends(bruno, Incriminate(guy)) ::: Bruno intends to incriminate Guy by planting the stolen cigarette lighter.",
        "Plant(bruno, lighter, amusementPark) ::: Bruno plans to plant the stolen lighter at the amusement park.",
        "Plans(anne, Evade(guy, police)) ::: Anne and Guy devise a plan for Guy to evade the police.",
        "FinishMatch(guy) ::: Guy is to finish his tennis match.",
        "Reach(guy, amusementPark) ::: Guy is to reach the amusement park to prevent Bruno from planting the lighter."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 719,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 6,
      "paragraph": "Guy eventually wins the long match at Forest Hills, then, eluding the police, heads for the amusement park. Bruno is also delayed when he accidentally drops Guy's lighter down a storm drain and has to recover it. Guy arrives at the amusement park. Bruno stays out of sight until sunset when he can plant the lighter on the \"Magic Isle\". A worker recognizes Bruno from the night of the murder and informs the police. Guy catches up to Bruno, and they fight on the park's carousel. Thinking Guy is trying to escape, a police officer shoots at him, but his shot misses and kills the carousel operator instead. The dead man falls onto the control panel, and the carousel spins wildly out of control and crashes. The worker who recognized Bruno tells the police that Guy is innocent, and the mortally injured Bruno is the man he saw that night. Guy tells the police that Bruno was attempting to plant Guy's lighter at the murder scene. Bruno refuses to clear Guy, but as he dies, his fingers open to reveal Guy's lighter.",
      "question_template": "Bruno murders Miriam by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Bruno wants Guy Haines to kill his father",
        "Bruno refuses to clear Guy"
      ],
      "predicates": [
        "Innocent(x) ::: x is innocent of the murder.",
        "MortallyInjured(x) ::: x is mortally injured.",
        "Reveals(x, y) ::: x reveals y.",
        "Plant(x, y, z) ::: x attempts to plant y at location z.",
        "Recognizes(x, y) ::: x recognizes y.",
        "Fights(x, y) ::: x fights y.",
        "Shoots(x, y) ::: x shoots at y.",
        "Misses(x, y) ::: x misses y.",
        "Kills(x, y) ::: x kills y.",
        "FallsOn(x, y) ::: x falls onto y.",
        "SpinsOutOfControl(x) ::: x spins wildly out of control.",
        "Crashes(x) ::: x crashes.",
        "Tells(x, y, z) ::: x tells y that z."
      ],
      "premises": [
        "MortallyInjured(a_2) ∧ Reveals(a_2, d_1) ::: Bruno is mortally injured and reveals Guy's lighter before dying.",
        "Innocent(a_1) ::: Guy is innocent of the murder.",
        "∀a_4 (Recognizes(a_4, a_2) ∧ Tells(a_4, police, Innocent(a_1))) ::: The worker who recognized Bruno tells the police that Guy is innocent.",
        "Fights(a_1, a_2) ::: Guy catches up to Bruno, and they fight on the park's carousel.",
        "Shoots(police_officer, a_1) ∧ Misses(police_officer, a_1) ∧ Kills(police_officer, a_3) ::: A police officer shoots at Guy, but his shot misses and kills the carousel operator instead.",
        "FallsOn(a_3, control_panel) ∧ SpinsOutOfControl(carousel) ∧ Crashes(carousel) ::: The dead man falls onto the control panel, and the carousel spins wildly out of control and crashes.",
        "Plant(a_2, d_1, b_3) ::: Bruno attempts to plant Guy's lighter at the Magic Isle.",
        "Reveals(a_2, d_1) ::: Bruno reveals Guy's lighter before dying.",
        "Conclusion:",
        "Innocent(a_1) ::: Guy is innocent of the murder.",
        "Reveals(a_2, d_1) ::: Bruno reveals Guy's lighter before dying."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "720": [
    {
      "id": 720,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 0,
      "paragraph": " Amateur tennis star Guy Haines (Farley Granger) wants to marry Anne Morton (Ruth Roman), the daughter of a senator, and pursue a political career. First, he must divorce his vulgar and promiscuous wife Miriam (Laura Elliott). On a train, Bruno Anthony (Robert Walker) recognizes Guy and knows about his marital situation from the gossip pages. Bruno introduces himself, then proposes an idea for the perfect homicide: he and Guy should \"swap murders\". Bruno will murder Miriam, and in exchange Guy will kill Bruno's despised father. Each would be killing a stranger. Having no identifiable motive for the crimes, neither would be suspects. Guy humors Bruno's absurd murder plot by pretending to find it amusing. Bruno interprets this as agreement to the scheme. Bruno then borrows Guy's monogrammed cigarette lighter and slips it into his own pocket.",
      "question_template": "The murder takes place [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Guy's monogrammed cigarette lighter"
      ],
      "predicates": [
        "WantsToMarry(x, y) ::: x wants to marry y.",
        "Divorces(x, y) ::: x divorces y.",
        "Recognizes(x, y) ::: x recognizes y.",
        "KnowsAbout(x, y) ::: x knows about y.",
        "Proposes(x, y) ::: x proposes y.",
        "Murders(x, y) ::: x murders y.",
        "Agrees(x, y) ::: x agrees to y.",
        "Humors(x, y) ::: x humors y.",
        "Borrows(x, y) ::: x borrows y.",
        "SlipsIntoPocket(x, y) ::: x slips y into his pocket."
      ],
      "premises": [
        "WantsToMarry(a_1, a_0) ::: Guy Haines wants to marry Anne Morton.",
        "Divorces(a_1, a_4) ::: Guy Haines must divorce his wife Miriam.",
        "Recognizes(a_2, a_1) ::: Bruno Anthony recognizes Guy Haines.",
        "KnowsAbout(a_2, gossipPages) ::: Bruno knows about Guy's marital situation from the gossip pages.",
        "Proposes(a_2, murderScheme) ::: Bruno proposes the idea for the perfect homicide.",
        "Murders(a_2, a_4) ::: Bruno will murder Miriam.",
        "Murders(a_1, a_3) ::: Guy will kill Bruno's despised father.",
        "Agrees(a_1, murderScheme) ::: Guy humors Bruno's absurd murder plot by pretending to find it amusing.",
        "Borrows(a_2, d_1) ::: Bruno borrows Guy's monogrammed cigarette lighter.",
        "SlipsIntoPocket(a_2, d_1) ::: Bruno slips the lighter into his own pocket.",
        "Conclusion:",
        "¬(IdentifiableMotive(a_1, c_2) ∧ IdentifiableMotive(a_2, c_2)) ::: Neither Guy nor Bruno would have identifiable motives for the murders."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 720,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 6,
      "paragraph": "Guy eventually wins the long match at Forest Hills, then, eluding the police, heads for the amusement park. Bruno is also delayed when he accidentally drops Guy's lighter down a storm drain and has to recover it. Guy arrives at the amusement park. Bruno stays out of sight until sunset when he can plant the lighter on the \"Magic Isle\". A worker recognizes Bruno from the night of the murder and informs the police. Guy catches up to Bruno, and they fight on the park's carousel. Thinking Guy is trying to escape, a police officer shoots at him, but his shot misses and kills the carousel operator instead. The dead man falls onto the control panel, and the carousel spins wildly out of control and crashes. The worker who recognized Bruno tells the police that Guy is innocent, and the mortally injured Bruno is the man he saw that night. Guy tells the police that Bruno was attempting to plant Guy's lighter at the murder scene. Bruno refuses to clear Guy, but as he dies, his fingers open to reveal Guy's lighter.",
      "question_template": "The murder takes place [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Guy's lighter"
      ],
      "predicates": [
        "Innocent(x) ::: x is innocent of the murder.",
        "MortallyInjured(x) ::: x is mortally injured.",
        "Reveals(x, y) ::: x reveals y.",
        "Plant(x, y, z) ::: x attempts to plant y at location z.",
        "Recognizes(x, y) ::: x recognizes y.",
        "Fights(x, y) ::: x fights y.",
        "Shoots(x, y) ::: x shoots at y.",
        "Misses(x, y) ::: x misses y.",
        "Kills(x, y) ::: x kills y.",
        "FallsOn(x, y) ::: x falls onto y.",
        "SpinsOutOfControl(x) ::: x spins wildly out of control.",
        "Crashes(x) ::: x crashes.",
        "Tells(x, y, z) ::: x tells y that z."
      ],
      "premises": [
        "MortallyInjured(a_2) ∧ Reveals(a_2, d_1) ::: Bruno is mortally injured and reveals Guy's lighter before dying.",
        "Innocent(a_1) ::: Guy is innocent of the murder.",
        "∀a_4 (Recognizes(a_4, a_2) ∧ Tells(a_4, police, Innocent(a_1))) ::: The worker who recognized Bruno tells the police that Guy is innocent.",
        "Fights(a_1, a_2) ::: Guy catches up to Bruno, and they fight on the park's carousel.",
        "Shoots(police_officer, a_1) ∧ Misses(police_officer, a_1) ∧ Kills(police_officer, a_3) ::: A police officer shoots at Guy, but his shot misses and kills the carousel operator instead.",
        "FallsOn(a_3, control_panel) ∧ SpinsOutOfControl(carousel) ∧ Crashes(carousel) ::: The dead man falls onto the control panel, and the carousel spins wildly out of control and crashes.",
        "Plant(a_2, d_1, b_3) ::: Bruno attempts to plant Guy's lighter at the Magic Isle.",
        "Reveals(a_2, d_1) ::: Bruno reveals Guy's lighter before dying.",
        "Conclusion:",
        "Innocent(a_1) ::: Guy is innocent of the murder.",
        "Reveals(a_2, d_1) ::: Bruno reveals Guy's lighter before dying."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "721": [
    {
      "id": 721,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 0,
      "paragraph": " Amateur tennis star Guy Haines (Farley Granger) wants to marry Anne Morton (Ruth Roman), the daughter of a senator, and pursue a political career. First, he must divorce his vulgar and promiscuous wife Miriam (Laura Elliott). On a train, Bruno Anthony (Robert Walker) recognizes Guy and knows about his marital situation from the gossip pages. Bruno introduces himself, then proposes an idea for the perfect homicide: he and Guy should \"swap murders\". Bruno will murder Miriam, and in exchange Guy will kill Bruno's despised father. Each would be killing a stranger. Having no identifiable motive for the crimes, neither would be suspects. Guy humors Bruno's absurd murder plot by pretending to find it amusing. Bruno interprets this as agreement to the scheme. Bruno then borrows Guy's monogrammed cigarette lighter and slips it into his own pocket.",
      "question_template": "Guy murders Bruno's father by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The train",
        "On a train"
      ],
      "predicates": [
        "WantsToMarry(x, y) ::: x wants to marry y.",
        "Divorces(x, y) ::: x divorces y.",
        "Recognizes(x, y) ::: x recognizes y.",
        "KnowsAbout(x, y) ::: x knows about y.",
        "Proposes(x, y) ::: x proposes y.",
        "Murders(x, y) ::: x murders y.",
        "Agrees(x, y) ::: x agrees to y.",
        "Humors(x, y) ::: x humors y.",
        "Borrows(x, y) ::: x borrows y.",
        "SlipsIntoPocket(x, y) ::: x slips y into his pocket."
      ],
      "premises": [
        "WantsToMarry(a_1, a_0) ::: Guy Haines wants to marry Anne Morton.",
        "Divorces(a_1, a_4) ::: Guy Haines must divorce his wife Miriam.",
        "Recognizes(a_2, a_1) ::: Bruno Anthony recognizes Guy Haines.",
        "KnowsAbout(a_2, gossipPages) ::: Bruno knows about Guy's marital situation from the gossip pages.",
        "Proposes(a_2, murderScheme) ::: Bruno proposes the idea for the perfect homicide.",
        "Murders(a_2, a_4) ::: Bruno will murder Miriam.",
        "Murders(a_1, a_3) ::: Guy will kill Bruno's despised father.",
        "Agrees(a_1, murderScheme) ::: Guy humors Bruno's absurd murder plot by pretending to find it amusing.",
        "Borrows(a_2, d_1) ::: Bruno borrows Guy's monogrammed cigarette lighter.",
        "SlipsIntoPocket(a_2, d_1) ::: Bruno slips the lighter into his own pocket.",
        "Conclusion:",
        "¬(IdentifiableMotive(a_1, c_2) ∧ IdentifiableMotive(a_2, c_2)) ::: Neither Guy nor Bruno would have identifiable motives for the murders."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 721,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 1,
      "paragraph": "Guy meets with Miriam. Pregnant by someone else, she now refuses to give Guy a divorce and threatens to cause a scandal. Guy relays the bad news to Anne, metaphorically commenting that he would like to \"strangle\" Miriam. Meanwhile, Bruno stalks Miriam through an amusement park and fatally strangles her on the \"Magic Isle\". Bruno then informs Guy that Miriam is dead, and expects him to follow through on murdering Bruno's father. Bruno sends Guy his house key, a map to his father's bedroom, and a pistol.",
      "question_template": "Guy murders Bruno's father by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Fatally strangles her on the \"Magic Isle\""
      ],
      "predicates": [
        "Meets(x, y) ::: x meets with y.",
        "Pregnant(x) ::: x is pregnant.",
        "RefusesToDivorce(x, y) ::: x refuses to give y a divorce.",
        "Threatens(x, y) ::: x threatens y.",
        "Relays(x, y, z) ::: x relays information about y to z.",
        "Comment(x, y) ::: x makes a comment about y.",
        "Stalks(x, y) ::: x stalks y.",
        "Strangles(x, y) ::: x strangles y.",
        "Informs(x, y) ::: x informs y about something.",
        "Expects(x, y) ::: x expects y to do something.",
        "Sends(x, y, z) ::: x sends y to z."
      ],
      "premises": [
        "Meets(guy, miriam) ::: Guy meets with Miriam.",
        "Pregnant(miriam) ::: Miriam is pregnant.",
        "RefusesToDivorce(miriam, guy) ::: Miriam refuses to give Guy a divorce.",
        "Threatens(miriam, scandal) ::: Miriam threatens to cause a scandal.",
        "Relays(guy, badNews, anne) ::: Guy relays the bad news to Anne.",
        "Comment(guy, \"strangle miriam\") ::: Guy metaphorically comments that he would like to \"strangle\" Miriam.",
        "Stalks(bruno, miriam) ::: Bruno stalks Miriam.",
        "Strangles(bruno, miriam) ::: Bruno fatally strangles Miriam.",
        "Informs(bruno, guy) ::: Bruno informs Guy that Miriam is dead.",
        "Expects(bruno, murder(guy, bruno'sFather)) ::: Bruno expects Guy to follow through on murdering Bruno's father.",
        "Sends(bruno, houseKey, guy) ::: Bruno sends Guy his house key.",
        "Sends(bruno, map, guy) ::: Bruno sends Guy a map to his father's bedroom.",
        "Sends(bruno, pistol, guy) ::: Bruno sends Guy a pistol."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 721,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 3,
      "paragraph": "To pressure Guy into fulfilling his obligation, Bruno introduces himself to Anne and meets Anne's younger sister, Barbara (Patricia Hitchcock), who physically resembles Miriam. Soon after, Bruno appears uninvited at a party at Senator Morton's house. To amuse another guest, Bruno demonstrates how to fatally strangle someone. His gaze happens to fall upon Barbara, and her resemblance to Miriam triggers a flashback. He begins strangling the woman but he blacks out before harming her. An upset Barbara tells Anne that, \"His hands were on her throat, but he was strangling me.\" Anne confronts Guy, who confesses the truth about Bruno's crazy scheme.",
      "question_template": "Guy murders Bruno's father by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "No relevant information found in the paragraph."
      ],
      "predicates": [
        "Introduces(x, y) ::: x introduces himself to y.",
        "Resembles(x, y) ::: x physically resembles y.",
        "Demonstrates(x, y) ::: x demonstrates how to y.",
        "Strangles(x, y) ::: x strangles y.",
        "BlacksOut(x) ::: x blacks out.",
        "Upset(x) ::: x is upset.",
        "Confronts(x, y) ::: x confronts y.",
        "Confesses(x, y) ::: x confesses the truth about y."
      ],
      "premises": [
        "Introduces(bruno, anne) ::: Bruno introduces himself to Anne.",
        "Introduces(bruno, barbara) ::: Bruno meets Anne's younger sister, Barbara.",
        "Resembles(barbara, miriam) ::: Barbara physically resembles Miriam.",
        "Demonstrates(bruno, fatallyStrangle) ::: Bruno demonstrates how to fatally strangle someone.",
        "GazeFalls(bruno, barbara) ::: Bruno's gaze happens to fall upon Barbara.",
        "TriggersFlashback(bruno, barbara) ::: Barbara's resemblance to Miriam triggers a flashback for Bruno.",
        "Strangles(bruno, woman) ∧ BlacksOut(bruno) ::: Bruno begins strangling the woman but blacks out before harming her.",
        "Upset(barbara) ::: An upset Barbara tells Anne that, \"His hands were on her throat, but he was strangling me.\"",
        "Confronts(anne, guy) ::: Anne confronts Guy.",
        "Confesses(guy, brunoScheme) ::: Guy confesses the truth about Bruno's crazy scheme.",
        "Conclusion:",
        "Influenced(bruno, barbara) ::: Bruno's actions are influenced by his flashback triggered by Barbara's resemblance to Miriam."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "722": [
    {
      "id": 722,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 1,
      "paragraph": "Guy meets with Miriam. Pregnant by someone else, she now refuses to give Guy a divorce and threatens to cause a scandal. Guy relays the bad news to Anne, metaphorically commenting that he would like to \"strangle\" Miriam. Meanwhile, Bruno stalks Miriam through an amusement park and fatally strangles her on the \"Magic Isle\". Bruno then informs Guy that Miriam is dead, and expects him to follow through on murdering Bruno's father. Bruno sends Guy his house key, a map to his father's bedroom, and a pistol.",
      "question_template": "Bruno can frame Guy for Miriam's murder by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Fatally strangles her on the \"Magic Isle\""
      ],
      "predicates": [
        "Meets(x, y) ::: x meets with y.",
        "Pregnant(x) ::: x is pregnant.",
        "RefusesToDivorce(x, y) ::: x refuses to give y a divorce.",
        "Threatens(x, y) ::: x threatens y.",
        "Relays(x, y, z) ::: x relays information about y to z.",
        "Comment(x, y) ::: x makes a comment about y.",
        "Stalks(x, y) ::: x stalks y.",
        "Strangles(x, y) ::: x strangles y.",
        "Informs(x, y) ::: x informs y about something.",
        "Expects(x, y) ::: x expects y to do something.",
        "Sends(x, y, z) ::: x sends y to z."
      ],
      "premises": [
        "Meets(guy, miriam) ::: Guy meets with Miriam.",
        "Pregnant(miriam) ::: Miriam is pregnant.",
        "RefusesToDivorce(miriam, guy) ::: Miriam refuses to give Guy a divorce.",
        "Threatens(miriam, scandal) ::: Miriam threatens to cause a scandal.",
        "Relays(guy, badNews, anne) ::: Guy relays the bad news to Anne.",
        "Comment(guy, \"strangle miriam\") ::: Guy metaphorically comments that he would like to \"strangle\" Miriam.",
        "Stalks(bruno, miriam) ::: Bruno stalks Miriam.",
        "Strangles(bruno, miriam) ::: Bruno fatally strangles Miriam.",
        "Informs(bruno, guy) ::: Bruno informs Guy that Miriam is dead.",
        "Expects(bruno, murder(guy, bruno'sFather)) ::: Bruno expects Guy to follow through on murdering Bruno's father.",
        "Sends(bruno, houseKey, guy) ::: Bruno sends Guy his house key.",
        "Sends(bruno, map, guy) ::: Bruno sends Guy a map to his father's bedroom.",
        "Sends(bruno, pistol, guy) ::: Bruno sends Guy a pistol."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 722,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 3,
      "paragraph": "To pressure Guy into fulfilling his obligation, Bruno introduces himself to Anne and meets Anne's younger sister, Barbara (Patricia Hitchcock), who physically resembles Miriam. Soon after, Bruno appears uninvited at a party at Senator Morton's house. To amuse another guest, Bruno demonstrates how to fatally strangle someone. His gaze happens to fall upon Barbara, and her resemblance to Miriam triggers a flashback. He begins strangling the woman but he blacks out before harming her. An upset Barbara tells Anne that, \"His hands were on her throat, but he was strangling me.\" Anne confronts Guy, who confesses the truth about Bruno's crazy scheme.",
      "question_template": "Bruno can frame Guy for Miriam's murder by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Demonstrates how to fatally strangle someone",
        "- Begins strangling the woman but he blacks out before harming her"
      ],
      "predicates": [
        "Introduces(x, y) ::: x introduces himself to y.",
        "Resembles(x, y) ::: x physically resembles y.",
        "Demonstrates(x, y) ::: x demonstrates how to y.",
        "Strangles(x, y) ::: x strangles y.",
        "BlacksOut(x) ::: x blacks out.",
        "Upset(x) ::: x is upset.",
        "Confronts(x, y) ::: x confronts y.",
        "Confesses(x, y) ::: x confesses the truth about y."
      ],
      "premises": [
        "Introduces(bruno, anne) ::: Bruno introduces himself to Anne.",
        "Introduces(bruno, barbara) ::: Bruno meets Anne's younger sister, Barbara.",
        "Resembles(barbara, miriam) ::: Barbara physically resembles Miriam.",
        "Demonstrates(bruno, fatallyStrangle) ::: Bruno demonstrates how to fatally strangle someone.",
        "GazeFalls(bruno, barbara) ::: Bruno's gaze happens to fall upon Barbara.",
        "TriggersFlashback(bruno, barbara) ::: Barbara's resemblance to Miriam triggers a flashback for Bruno.",
        "Strangles(bruno, woman) ∧ BlacksOut(bruno) ::: Bruno begins strangling the woman but blacks out before harming her.",
        "Upset(barbara) ::: An upset Barbara tells Anne that, \"His hands were on her throat, but he was strangling me.\"",
        "Confronts(anne, guy) ::: Anne confronts Guy.",
        "Confesses(guy, brunoScheme) ::: Guy confesses the truth about Bruno's crazy scheme.",
        "Conclusion:",
        "Influenced(bruno, barbara) ::: Bruno's actions are influenced by his flashback triggered by Barbara's resemblance to Miriam."
      ],
      "conclusions": [
        "Demonstrates(bruno, fatallyStrangle)",
        "None"
      ]
    }
  ],
  "723": [
    {
      "id": 723,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 2,
      "paragraph": "When the police question Guy about Miriam's death, he claims he was on a train at the time of the murder. The police determine his alibi is inconclusive because he could have left the train in time to commit the murder and continued his trip on another train. Guy is not arrested, but the police assign an officer to trail him to ensure he does not flee while they investigate.",
      "question_template": "[[CANDIDATE_ANSWER]] is killed by the police at the end of the story.",
      "candidate_answers": [
        "on a train"
      ],
      "predicates": [
        "OnTrain(x) ::: x is on a train.",
        "Claims(x, y) ::: x claims y.",
        "AlibiInconclusive(x) ::: x's alibi is inconclusive.",
        "CouldLeaveTrain(x) ::: x could leave the train in time to commit the murder.",
        "AssignedOfficer(x) ::: an officer is assigned to x.",
        "Trails(x) ::: x is being trailed by an officer.",
        "Flee(x) ::: x flees."
      ],
      "premises": [
        "Claims(a_1, OnTrain(a_1)) ::: Guy claims he was on a train at the time of the murder.",
        "AlibiInconclusive(a_1) ::: The police determine Guy's alibi is inconclusive.",
        "CouldLeaveTrain(a_1) ::: Guy could have left the train in time to commit the murder.",
        "¬Arrested(a_1) ::: Guy is not arrested.",
        "AssignedOfficer(a_1) ∧ Trails(a_1) ::: The police assign an officer to trail Guy to ensure he does not flee while they investigate."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 723,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 6,
      "paragraph": "Guy eventually wins the long match at Forest Hills, then, eluding the police, heads for the amusement park. Bruno is also delayed when he accidentally drops Guy's lighter down a storm drain and has to recover it. Guy arrives at the amusement park. Bruno stays out of sight until sunset when he can plant the lighter on the \"Magic Isle\". A worker recognizes Bruno from the night of the murder and informs the police. Guy catches up to Bruno, and they fight on the park's carousel. Thinking Guy is trying to escape, a police officer shoots at him, but his shot misses and kills the carousel operator instead. The dead man falls onto the control panel, and the carousel spins wildly out of control and crashes. The worker who recognized Bruno tells the police that Guy is innocent, and the mortally injured Bruno is the man he saw that night. Guy tells the police that Bruno was attempting to plant Guy's lighter at the murder scene. Bruno refuses to clear Guy, but as he dies, his fingers open to reveal Guy's lighter.",
      "question_template": "[[CANDIDATE_ANSWER]] is killed by the police at the end of the story.",
      "candidate_answers": [
        "- Guy eventually wins the long match at Forest Hills",
        "- Heads for the amusement park",
        "- Catches up to Bruno",
        "- Fights on the park's carousel",
        "- Tells the police that Bruno was attempting to plant Guy's lighter at the murder scene"
      ],
      "predicates": [
        "Innocent(x) ::: x is innocent of the murder.",
        "MortallyInjured(x) ::: x is mortally injured.",
        "Reveals(x, y) ::: x reveals y.",
        "Plant(x, y, z) ::: x attempts to plant y at location z.",
        "Recognizes(x, y) ::: x recognizes y.",
        "Fights(x, y) ::: x fights y.",
        "Shoots(x, y) ::: x shoots at y.",
        "Misses(x, y) ::: x misses y.",
        "Kills(x, y) ::: x kills y.",
        "FallsOn(x, y) ::: x falls onto y.",
        "SpinsOutOfControl(x) ::: x spins wildly out of control.",
        "Crashes(x) ::: x crashes.",
        "Tells(x, y, z) ::: x tells y that z."
      ],
      "premises": [
        "MortallyInjured(a_2) ∧ Reveals(a_2, d_1) ::: Bruno is mortally injured and reveals Guy's lighter before dying.",
        "Innocent(a_1) ::: Guy is innocent of the murder.",
        "∀a_4 (Recognizes(a_4, a_2) ∧ Tells(a_4, police, Innocent(a_1))) ::: The worker who recognized Bruno tells the police that Guy is innocent.",
        "Fights(a_1, a_2) ::: Guy catches up to Bruno, and they fight on the park's carousel.",
        "Shoots(police_officer, a_1) ∧ Misses(police_officer, a_1) ∧ Kills(police_officer, a_3) ::: A police officer shoots at Guy, but his shot misses and kills the carousel operator instead.",
        "FallsOn(a_3, control_panel) ∧ SpinsOutOfControl(carousel) ∧ Crashes(carousel) ::: The dead man falls onto the control panel, and the carousel spins wildly out of control and crashes.",
        "Plant(a_2, d_1, b_3) ::: Bruno attempts to plant Guy's lighter at the Magic Isle.",
        "Reveals(a_2, d_1) ::: Bruno reveals Guy's lighter before dying.",
        "Conclusion:",
        "Innocent(a_1) ::: Guy is innocent of the murder.",
        "Reveals(a_2, d_1) ::: Bruno reveals Guy's lighter before dying."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "725": [
    {
      "id": 725,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 0,
      "paragraph": " Amateur tennis star Guy Haines (Farley Granger) wants to marry Anne Morton (Ruth Roman), the daughter of a senator, and pursue a political career. First, he must divorce his vulgar and promiscuous wife Miriam (Laura Elliott). On a train, Bruno Anthony (Robert Walker) recognizes Guy and knows about his marital situation from the gossip pages. Bruno introduces himself, then proposes an idea for the perfect homicide: he and Guy should \"swap murders\". Bruno will murder Miriam, and in exchange Guy will kill Bruno's despised father. Each would be killing a stranger. Having no identifiable motive for the crimes, neither would be suspects. Guy humors Bruno's absurd murder plot by pretending to find it amusing. Bruno interprets this as agreement to the scheme. Bruno then borrows Guy's monogrammed cigarette lighter and slips it into his own pocket.",
      "question_template": "[[CANDIDATE_ANSWER]] is the ride that Miriam died on.",
      "candidate_answers": [
        "- Bruno proposes an idea for the perfect homicide: he and Guy should \"swap murders\".",
        "- Bruno will murder Miriam, and in exchange Guy will kill Bruno's despised father.",
        "- Each would be killing a stranger. Having no identifiable motive for the crimes, neither would be suspects.",
        "- Bruno borrows Guy's monogrammed cigarette lighter and slips it into his own pocket."
      ],
      "predicates": [
        "WantsToMarry(x, y) ::: x wants to marry y.",
        "Divorces(x, y) ::: x divorces y.",
        "Recognizes(x, y) ::: x recognizes y.",
        "KnowsAbout(x, y) ::: x knows about y.",
        "Proposes(x, y) ::: x proposes y.",
        "Murders(x, y) ::: x murders y.",
        "Agrees(x, y) ::: x agrees to y.",
        "Humors(x, y) ::: x humors y.",
        "Borrows(x, y) ::: x borrows y.",
        "SlipsIntoPocket(x, y) ::: x slips y into his pocket."
      ],
      "premises": [
        "WantsToMarry(a_1, a_0) ::: Guy Haines wants to marry Anne Morton.",
        "Divorces(a_1, a_4) ::: Guy Haines must divorce his wife Miriam.",
        "Recognizes(a_2, a_1) ::: Bruno Anthony recognizes Guy Haines.",
        "KnowsAbout(a_2, gossipPages) ::: Bruno knows about Guy's marital situation from the gossip pages.",
        "Proposes(a_2, murderScheme) ::: Bruno proposes the idea for the perfect homicide.",
        "Murders(a_2, a_4) ::: Bruno will murder Miriam.",
        "Murders(a_1, a_3) ::: Guy will kill Bruno's despised father.",
        "Agrees(a_1, murderScheme) ::: Guy humors Bruno's absurd murder plot by pretending to find it amusing.",
        "Borrows(a_2, d_1) ::: Bruno borrows Guy's monogrammed cigarette lighter.",
        "SlipsIntoPocket(a_2, d_1) ::: Bruno slips the lighter into his own pocket.",
        "Conclusion:",
        "¬(IdentifiableMotive(a_1, c_2) ∧ IdentifiableMotive(a_2, c_2)) ::: Neither Guy nor Bruno would have identifiable motives for the murders."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 725,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 3,
      "paragraph": "To pressure Guy into fulfilling his obligation, Bruno introduces himself to Anne and meets Anne's younger sister, Barbara (Patricia Hitchcock), who physically resembles Miriam. Soon after, Bruno appears uninvited at a party at Senator Morton's house. To amuse another guest, Bruno demonstrates how to fatally strangle someone. His gaze happens to fall upon Barbara, and her resemblance to Miriam triggers a flashback. He begins strangling the woman but he blacks out before harming her. An upset Barbara tells Anne that, \"His hands were on her throat, but he was strangling me.\" Anne confronts Guy, who confesses the truth about Bruno's crazy scheme.",
      "question_template": "[[CANDIDATE_ANSWER]] is the ride that Miriam died on.",
      "candidate_answers": [
        "- Introduces himself to Anne and meets Anne's younger sister, Barbara",
        "- Demonstrates how to fatally strangle someone",
        "- Begins strangling the woman but blacks out before harming her",
        "- His hands were on her throat, but he was strangling me",
        "- Confronts Guy, who confesses the truth about Bruno's crazy scheme"
      ],
      "predicates": [
        "Introduces(x, y) ::: x introduces himself to y.",
        "Resembles(x, y) ::: x physically resembles y.",
        "Demonstrates(x, y) ::: x demonstrates how to y.",
        "Strangles(x, y) ::: x strangles y.",
        "BlacksOut(x) ::: x blacks out.",
        "Upset(x) ::: x is upset.",
        "Confronts(x, y) ::: x confronts y.",
        "Confesses(x, y) ::: x confesses the truth about y."
      ],
      "premises": [
        "Introduces(bruno, anne) ::: Bruno introduces himself to Anne.",
        "Introduces(bruno, barbara) ::: Bruno meets Anne's younger sister, Barbara.",
        "Resembles(barbara, miriam) ::: Barbara physically resembles Miriam.",
        "Demonstrates(bruno, fatallyStrangle) ::: Bruno demonstrates how to fatally strangle someone.",
        "GazeFalls(bruno, barbara) ::: Bruno's gaze happens to fall upon Barbara.",
        "TriggersFlashback(bruno, barbara) ::: Barbara's resemblance to Miriam triggers a flashback for Bruno.",
        "Strangles(bruno, woman) ∧ BlacksOut(bruno) ::: Bruno begins strangling the woman but blacks out before harming her.",
        "Upset(barbara) ::: An upset Barbara tells Anne that, \"His hands were on her throat, but he was strangling me.\"",
        "Confronts(anne, guy) ::: Anne confronts Guy.",
        "Confesses(guy, brunoScheme) ::: Guy confesses the truth about Bruno's crazy scheme.",
        "Conclusion:",
        "Influenced(bruno, barbara) ::: Bruno's actions are influenced by his flashback triggered by Barbara's resemblance to Miriam."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 725,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 4,
      "paragraph": "Pretending to agree to Bruno's original plan, Guy sneaks into Mr. Anthony's bedroom intending to warn him of his son's murderous intent. It is Bruno who is waiting there, however. Guy tries to convince Bruno to seek psychiatric help. When Guy refuses to follow through with Bruno's plan, Bruno threatens to frame Guy for Miriam's murder.",
      "question_template": "[[CANDIDATE_ANSWER]] is the ride that Miriam died on.",
      "candidate_answers": [
        "Threatens to frame Guy for Miriam's murder"
      ],
      "predicates": [
        "MurderousIntent(x) ::: x has a murderous intent.",
        "Threatens(x, y) ::: x threatens y to achieve his goals.",
        "Agrees(x, y) ::: x pretends to agree with y.",
        "SneaksInto(x, y) ::: x sneaks into y's location.",
        "Warns(x, y) ::: x warns y of a danger.",
        "Refuses(x, y) ::: x refuses to follow through with y's plan.",
        "SeeksHelp(x) ::: x seeks psychiatric help."
      ],
      "premises": [
        "Agrees(a_1, plan) ::: Guy pretends to agree to Bruno's original plan.",
        "SneaksInto(a_1, bedroom) ::: Guy sneaks into Mr. Anthony's bedroom.",
        "Warns(a_1, a_2) ::: Guy intends to warn Mr. Anthony of his son's murderous intent.",
        "MurderousIntent(a_2) ::: Bruno has a murderous intent.",
        "Threatens(a_2, a_1) ::: Bruno threatens Guy to frame him for Miriam's murder.",
        "Refuses(a_1, plan) ::: Guy refuses to follow through with Bruno's plan.",
        "SeeksHelp(a_1) ::: Guy tries to convince Bruno to seek psychiatric help."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 725,
      "context_id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 5,
      "paragraph": "Anne visits Bruno's mother (Marion Lorne) to tell her that her son committed a murder, but the befuddled woman discounts it. Bruno appears and informs Anne that he intends to incriminate Guy by planting the stolen cigarette lighter at the amusement park. Anne and Guy devise a plan for Guy to finish his tennis match, evade the police, and reach the amusement park to prevent Bruno from planting the lighter.",
      "question_template": "[[CANDIDATE_ANSWER]] is the ride that Miriam died on.",
      "candidate_answers": [
        "- Incriminate Guy by planting the stolen cigarette lighter at the amusement park"
      ],
      "predicates": [
        "Visits(x, y) ::: x visits y.",
        "Informs(x, y, z) ::: x informs y about z.",
        "Intends(x, y) ::: x intends to do y.",
        "Plans(x, y) ::: x plans to do y.",
        "Incriminate(x, y) ::: x incriminates y.",
        "Plant(x, y, z) ::: x plants y at z.",
        "Evade(x, y) ::: x evades y.",
        "FinishMatch(x) ::: x finishes his tennis match.",
        "Reach(x, y) ::: x reaches y."
      ],
      "premises": [
        "Visits(anne, marion) ::: Anne visits Bruno's mother, Marion Lorne, to tell her that her son committed a murder.",
        "¬Informs(marion, anne, murder) ::: The befuddled woman discounts the information about the murder.",
        "Intends(bruno, Incriminate(guy)) ::: Bruno intends to incriminate Guy by planting the stolen cigarette lighter.",
        "Plant(bruno, lighter, amusementPark) ::: Bruno plans to plant the stolen lighter at the amusement park.",
        "Plans(anne, Evade(guy, police)) ::: Anne and Guy devise a plan for Guy to evade the police.",
        "FinishMatch(guy) ::: Guy is to finish his tennis match.",
        "Reach(guy, amusementPark) ::: Guy is to reach the amusement park to prevent Bruno from planting the lighter."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "726": [
    {
      "id": 726,
      "context_id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 0,
      "paragraph": " The plot concerns the children of the Duke of Omnium, Plantagenet Palliser, and his late wife, Lady Glencora. When Lady Glencora dies unexpectedly, the Duke is left to deal with his grownup children, with whom he has a somewhat distant relationship. As the government in which he is Prime Minister has also fallen, the Duke is left bereft of both his beloved wife and his political position.",
      "question_template": "Guy's ambition in marrying Anne was [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Lady Glencora"
      ],
      "predicates": [
        "Duke(x) ::: x is the Duke of Omnium.",
        "Child(x) ::: x is a child of the Duke of Omnium.",
        "GrownUp(x) ::: x is a grown-up child.",
        "DistantRelationship(x, y) ::: x has a somewhat distant relationship with y.",
        "PrimeMinister(x) ::: x is the Prime Minister.",
        "Bereft(x, y) ::: x is bereft of y."
      ],
      "premises": [
        "Duke(a_1) ::: The Duke of Omnium is represented by a_1.",
        "∀x (Child(x) → (Duke(a_1) ∧ GrownUp(x))) ::: All children of the Duke of Omnium are grown-up.",
        "DistantRelationship(a_1, b_0) ::: The Duke has a somewhat distant relationship with his children.",
        "PrimeMinister(a_1) ::: The Duke is the Prime Minister.",
        "Bereft(a_1, Lady Glencora) ∧ Bereft(a_1, c_0) ::: The Duke is bereft of his beloved wife, Lady Glencora, and his political position.",
        "Conclusion:",
        "∃x (Child(x) ∧ DistantRelationship(a_1, x)) ::: There exists a child of the Duke with whom he has a distant relationship."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 726,
      "context_id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 1,
      "paragraph": "Before her death, Lady Glencora had imprudently given her secret blessing to her daughter Mary's courtship by a poor gentleman, Frank Tregear, a friend of Lord Silverbridge, the Duke's older son and heir. Mrs. Finn, Lady Glencora's dearest confidante, somewhat uneasily remains after the funeral as a companion and unofficial chaperone for Mary at the Duke's request. Once she becomes aware of the seriousness of the relationship between Mary and Frank, Mrs. Finn insists that the Duke be informed.",
      "question_template": "Guy's ambition in marrying Anne was [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Lady Glencora"
      ],
      "predicates": [
        "Blessing(x, y) ::: x gives a secret blessing to y.",
        "Courtship(x, y) ::: x is courting y.",
        "Friend(x, y) ::: x is a friend of y.",
        "Companion(x, y) ::: x is a companion to y.",
        "Chaperone(x, y) ::: x is an unofficial chaperone for y.",
        "Insist(x, y) ::: x insists that y be informed.",
        "Aware(x, y) ::: x is aware of y.",
        "SeriousRelationship(x, y) ::: x and y are in a serious relationship."
      ],
      "premises": [
        "Blessing(LadyGlencora, Courtship(Mary, FrankTregear)) ::: Lady Glencora had given her secret blessing to Mary's courtship by Frank Tregear.",
        "Friend(FrankTregear, LordSilverbridge) ::: Frank Tregear is a friend of Lord Silverbridge.",
        "Companion(MrsFinn, Mary) ∧ Chaperone(MrsFinn, Mary) ::: Mrs. Finn remains as a companion and unofficial chaperone for Mary.",
        "Insist(MrsFinn, Inform(Duke)) ::: Mrs. Finn insists that the Duke be informed of the seriousness of the relationship.",
        "Aware(MrsFinn, SeriousRelationship(Mary, FrankTregear)) ::: Mrs. Finn becomes aware of the seriousness of the relationship between Mary and Frank.",
        "Conclusion:",
        "¬(Insist(MrsFinn, Inform(Duke)) ∧ Aware(MrsFinn, SeriousRelationship(Mary, FrankTregear))) ::: If Mrs. Finn is not aware of the seriousness of the relationship, she will not insist that the Duke be informed."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "727": [
    {
      "id": 727,
      "context_id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 0,
      "paragraph": " The plot concerns the children of the Duke of Omnium, Plantagenet Palliser, and his late wife, Lady Glencora. When Lady Glencora dies unexpectedly, the Duke is left to deal with his grownup children, with whom he has a somewhat distant relationship. As the government in which he is Prime Minister has also fallen, the Duke is left bereft of both his beloved wife and his political position.",
      "question_template": "Guy and Bruno fought on [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "His grownup children",
        "His beloved wife",
        "His political position"
      ],
      "predicates": [
        "Duke(x) ::: x is the Duke of Omnium.",
        "Child(x) ::: x is a child of the Duke of Omnium.",
        "GrownUp(x) ::: x is a grown-up child.",
        "DistantRelationship(x, y) ::: x has a somewhat distant relationship with y.",
        "PrimeMinister(x) ::: x is the Prime Minister.",
        "Bereft(x, y) ::: x is bereft of y."
      ],
      "premises": [
        "Duke(a_1) ::: The Duke of Omnium is represented by a_1.",
        "∀x (Child(x) → (Duke(a_1) ∧ GrownUp(x))) ::: All children of the Duke of Omnium are grown-up.",
        "DistantRelationship(a_1, b_0) ::: The Duke has a somewhat distant relationship with his children.",
        "PrimeMinister(a_1) ::: The Duke is the Prime Minister.",
        "Bereft(a_1, Lady Glencora) ∧ Bereft(a_1, c_0) ::: The Duke is bereft of his beloved wife, Lady Glencora, and his political position.",
        "Conclusion:",
        "∃x (Child(x) ∧ DistantRelationship(a_1, x)) ::: There exists a child of the Duke with whom he has a distant relationship."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 727,
      "context_id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 1,
      "paragraph": "Before her death, Lady Glencora had imprudently given her secret blessing to her daughter Mary's courtship by a poor gentleman, Frank Tregear, a friend of Lord Silverbridge, the Duke's older son and heir. Mrs. Finn, Lady Glencora's dearest confidante, somewhat uneasily remains after the funeral as a companion and unofficial chaperone for Mary at the Duke's request. Once she becomes aware of the seriousness of the relationship between Mary and Frank, Mrs. Finn insists that the Duke be informed.",
      "question_template": "Guy and Bruno fought on [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The Duke's older son and heir",
        "Mary's courtship by a poor gentleman, Frank Tregear",
        "Mrs. Finn insists that the Duke be informed"
      ],
      "predicates": [
        "Blessing(x, y) ::: x gives a secret blessing to y.",
        "Courtship(x, y) ::: x is courting y.",
        "Friend(x, y) ::: x is a friend of y.",
        "Companion(x, y) ::: x is a companion to y.",
        "Chaperone(x, y) ::: x is an unofficial chaperone for y.",
        "Insist(x, y) ::: x insists that y be informed.",
        "Aware(x, y) ::: x is aware of y.",
        "SeriousRelationship(x, y) ::: x and y are in a serious relationship."
      ],
      "premises": [
        "Blessing(LadyGlencora, Courtship(Mary, FrankTregear)) ::: Lady Glencora had given her secret blessing to Mary's courtship by Frank Tregear.",
        "Friend(FrankTregear, LordSilverbridge) ::: Frank Tregear is a friend of Lord Silverbridge.",
        "Companion(MrsFinn, Mary) ∧ Chaperone(MrsFinn, Mary) ::: Mrs. Finn remains as a companion and unofficial chaperone for Mary.",
        "Insist(MrsFinn, Inform(Duke)) ::: Mrs. Finn insists that the Duke be informed of the seriousness of the relationship.",
        "Aware(MrsFinn, SeriousRelationship(Mary, FrankTregear)) ::: Mrs. Finn becomes aware of the seriousness of the relationship between Mary and Frank.",
        "Conclusion:",
        "¬(Insist(MrsFinn, Inform(Duke)) ∧ Aware(MrsFinn, SeriousRelationship(Mary, FrankTregear))) ::: If Mrs. Finn is not aware of the seriousness of the relationship, she will not insist that the Duke be informed."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "728": [
    {
      "id": 728,
      "context_id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 0,
      "paragraph": " The plot concerns the children of the Duke of Omnium, Plantagenet Palliser, and his late wife, Lady Glencora. When Lady Glencora dies unexpectedly, the Duke is left to deal with his grownup children, with whom he has a somewhat distant relationship. As the government in which he is Prime Minister has also fallen, the Duke is left bereft of both his beloved wife and his political position.",
      "question_template": "Bruno demonstrated strangling to someone [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The Duke of Omnium, Plantagenet Palliser, and his late wife, Lady Glencora",
        "The Duke is left to deal with his grownup children",
        "The government in which he is Prime Minister has also fallen"
      ],
      "predicates": [
        "Duke(x) ::: x is the Duke of Omnium.",
        "Child(x) ::: x is a child of the Duke of Omnium.",
        "GrownUp(x) ::: x is a grown-up child.",
        "DistantRelationship(x, y) ::: x has a somewhat distant relationship with y.",
        "PrimeMinister(x) ::: x is the Prime Minister.",
        "Bereft(x, y) ::: x is bereft of y."
      ],
      "premises": [
        "Duke(a_1) ::: The Duke of Omnium is represented by a_1.",
        "∀x (Child(x) → (Duke(a_1) ∧ GrownUp(x))) ::: All children of the Duke of Omnium are grown-up.",
        "DistantRelationship(a_1, b_0) ::: The Duke has a somewhat distant relationship with his children.",
        "PrimeMinister(a_1) ::: The Duke is the Prime Minister.",
        "Bereft(a_1, Lady Glencora) ∧ Bereft(a_1, c_0) ::: The Duke is bereft of his beloved wife, Lady Glencora, and his political position.",
        "Conclusion:",
        "∃x (Child(x) ∧ DistantRelationship(a_1, x)) ::: There exists a child of the Duke with whom he has a distant relationship."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 728,
      "context_id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 1,
      "paragraph": "Before her death, Lady Glencora had imprudently given her secret blessing to her daughter Mary's courtship by a poor gentleman, Frank Tregear, a friend of Lord Silverbridge, the Duke's older son and heir. Mrs. Finn, Lady Glencora's dearest confidante, somewhat uneasily remains after the funeral as a companion and unofficial chaperone for Mary at the Duke's request. Once she becomes aware of the seriousness of the relationship between Mary and Frank, Mrs. Finn insists that the Duke be informed.",
      "question_template": "Bruno demonstrated strangling to someone [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Lady Glencora had imprudently given her secret blessing to her daughter Mary's courtship by a poor gentleman, Frank Tregear."
      ],
      "predicates": [
        "Blessing(x, y) ::: x gives a secret blessing to y.",
        "Courtship(x, y) ::: x is courting y.",
        "Friend(x, y) ::: x is a friend of y.",
        "Companion(x, y) ::: x is a companion to y.",
        "Chaperone(x, y) ::: x is an unofficial chaperone for y.",
        "Insist(x, y) ::: x insists that y be informed.",
        "Aware(x, y) ::: x is aware of y.",
        "SeriousRelationship(x, y) ::: x and y are in a serious relationship."
      ],
      "premises": [
        "Blessing(LadyGlencora, Courtship(Mary, FrankTregear)) ::: Lady Glencora had given her secret blessing to Mary's courtship by Frank Tregear.",
        "Friend(FrankTregear, LordSilverbridge) ::: Frank Tregear is a friend of Lord Silverbridge.",
        "Companion(MrsFinn, Mary) ∧ Chaperone(MrsFinn, Mary) ::: Mrs. Finn remains as a companion and unofficial chaperone for Mary.",
        "Insist(MrsFinn, Inform(Duke)) ::: Mrs. Finn insists that the Duke be informed of the seriousness of the relationship.",
        "Aware(MrsFinn, SeriousRelationship(Mary, FrankTregear)) ::: Mrs. Finn becomes aware of the seriousness of the relationship between Mary and Frank.",
        "Conclusion:",
        "¬(Insist(MrsFinn, Inform(Duke)) ∧ Aware(MrsFinn, SeriousRelationship(Mary, FrankTregear))) ::: If Mrs. Finn is not aware of the seriousness of the relationship, she will not insist that the Duke be informed."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "730": [
    {
      "id": 730,
      "context_id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 1,
      "paragraph": "Before her death, Lady Glencora had imprudently given her secret blessing to her daughter Mary's courtship by a poor gentleman, Frank Tregear, a friend of Lord Silverbridge, the Duke's older son and heir. Mrs. Finn, Lady Glencora's dearest confidante, somewhat uneasily remains after the funeral as a companion and unofficial chaperone for Mary at the Duke's request. Once she becomes aware of the seriousness of the relationship between Mary and Frank, Mrs. Finn insists that the Duke be informed.",
      "question_template": "The police took the action of [[CANDIDATE_ANSWER]] after hearing Guy's alibi for Miriam's murder.",
      "candidate_answers": [
        "- Lady Glencora had imprudently given her secret blessing to her daughter Mary's courtship by a poor gentleman, Frank Tregear",
        "- Mrs. Finn insists that the Duke be informed"
      ],
      "predicates": [
        "Blessing(x, y) ::: x gives a secret blessing to y.",
        "Courtship(x, y) ::: x is courting y.",
        "Friend(x, y) ::: x is a friend of y.",
        "Companion(x, y) ::: x is a companion to y.",
        "Chaperone(x, y) ::: x is an unofficial chaperone for y.",
        "Insist(x, y) ::: x insists that y be informed.",
        "Aware(x, y) ::: x is aware of y.",
        "SeriousRelationship(x, y) ::: x and y are in a serious relationship."
      ],
      "premises": [
        "Blessing(LadyGlencora, Courtship(Mary, FrankTregear)) ::: Lady Glencora had given her secret blessing to Mary's courtship by Frank Tregear.",
        "Friend(FrankTregear, LordSilverbridge) ::: Frank Tregear is a friend of Lord Silverbridge.",
        "Companion(MrsFinn, Mary) ∧ Chaperone(MrsFinn, Mary) ::: Mrs. Finn remains as a companion and unofficial chaperone for Mary.",
        "Insist(MrsFinn, Inform(Duke)) ::: Mrs. Finn insists that the Duke be informed of the seriousness of the relationship.",
        "Aware(MrsFinn, SeriousRelationship(Mary, FrankTregear)) ::: Mrs. Finn becomes aware of the seriousness of the relationship between Mary and Frank.",
        "Conclusion:",
        "¬(Insist(MrsFinn, Inform(Duke)) ∧ Aware(MrsFinn, SeriousRelationship(Mary, FrankTregear))) ::: If Mrs. Finn is not aware of the seriousness of the relationship, she will not insist that the Duke be informed."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 730,
      "context_id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 2,
      "paragraph": "The Duke's two sons also prove burdensome. Lord Silverbridge follows the wishes of his father by entering Parliament. He had proposed to Lady Mabel Grex, whom he has known all his life. She turned him down, although with an indication of a more welcoming answer another time. However, Lord Silverbridge becomes enamoured with American heiress Isabel Boncassen. She agrees to marry him, but only if the Duke is willing to welcome her into the family. At first, the Duke disapproves; and he disapproves even more of his daughter's suitor. To add to his troubles, Gerald, the younger son, gets himself expelled from Cambridge after attending the Derby without permission.",
      "question_template": "The police took the action of [[CANDIDATE_ANSWER]] after hearing Guy's alibi for Miriam's murder.",
      "candidate_answers": [
        "Entering Parliament"
      ],
      "predicates": [
        "BurdenSome(x) ::: x is burdensome.",
        "EntersParliament(x) ::: x enters Parliament.",
        "Proposes(x, y) ::: x proposes to y.",
        "TurnsDown(x, y) ::: x turns down y.",
        "Welcomes(x, y) ::: x welcomes y.",
        "BecomesEnamoured(x, y) ::: x becomes enamoured with y.",
        "AgreesToMarry(x, y) ::: x agrees to marry y.",
        "Disapproves(x, y) ::: x disapproves of y.",
        "Expelled(x) ::: x is expelled from Cambridge.",
        "AttendedDerby(x) ::: x attended the Derby."
      ],
      "premises": [
        "BurdenSome(Children) ::: The Duke's two sons prove burdensome.",
        "EntersParliament(LordSilverbridge) ::: Lord Silverbridge follows the wishes of his father by entering Parliament.",
        "Proposes(LordSilverbridge, LadyMabelGrex) ::: Lord Silverbridge proposed to Lady Mabel Grex, whom he has known all his life.",
        "TurnsDown(LadyMabelGrex, LordSilverbridge) ::: Lady Mabel Grex turned down Lord Silverbridge.",
        "AgreesToMarry(IsabelBoncassen, LordSilverbridge) ::: Isabel Boncassen agrees to marry Lord Silverbridge.",
        "Welcomes(a_1, IsabelBoncassen) → AgreesToMarry(IsabelBoncassen, LordSilverbridge) ::: Lord Silverbridge's marriage to Isabel Boncassen is contingent upon the Duke's acceptance of Isabel Boncassen into the family.",
        "Disapproves(a_1, IsabelBoncassen) ::: At first, the Duke disapproves of Isabel Boncassen.",
        "Disapproves(a_1, Daughter'sSuitor) ::: The Duke disapproves even more of his daughter's suitor.",
        "Expelled(gerald) ∧ AttendedDerby(gerald) ::: Gerald, the younger son, gets himself expelled from Cambridge after attending the Derby without permission."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "732": [
    {
      "id": 732,
      "context_id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 2,
      "paragraph": "The Duke's two sons also prove burdensome. Lord Silverbridge follows the wishes of his father by entering Parliament. He had proposed to Lady Mabel Grex, whom he has known all his life. She turned him down, although with an indication of a more welcoming answer another time. However, Lord Silverbridge becomes enamoured with American heiress Isabel Boncassen. She agrees to marry him, but only if the Duke is willing to welcome her into the family. At first, the Duke disapproves; and he disapproves even more of his daughter's suitor. To add to his troubles, Gerald, the younger son, gets himself expelled from Cambridge after attending the Derby without permission.",
      "question_template": "Barbara at the party reminded Bruno of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "American heiress Isabel Boncassen"
      ],
      "predicates": [
        "BurdenSome(x) ::: x is burdensome.",
        "EntersParliament(x) ::: x enters Parliament.",
        "Proposes(x, y) ::: x proposes to y.",
        "TurnsDown(x, y) ::: x turns down y.",
        "Welcomes(x, y) ::: x welcomes y.",
        "BecomesEnamoured(x, y) ::: x becomes enamoured with y.",
        "AgreesToMarry(x, y) ::: x agrees to marry y.",
        "Disapproves(x, y) ::: x disapproves of y.",
        "Expelled(x) ::: x is expelled from Cambridge.",
        "AttendedDerby(x) ::: x attended the Derby."
      ],
      "premises": [
        "BurdenSome(Children) ::: The Duke's two sons prove burdensome.",
        "EntersParliament(LordSilverbridge) ::: Lord Silverbridge follows the wishes of his father by entering Parliament.",
        "Proposes(LordSilverbridge, LadyMabelGrex) ::: Lord Silverbridge proposed to Lady Mabel Grex, whom he has known all his life.",
        "TurnsDown(LadyMabelGrex, LordSilverbridge) ::: Lady Mabel Grex turned down Lord Silverbridge.",
        "AgreesToMarry(IsabelBoncassen, LordSilverbridge) ::: Isabel Boncassen agrees to marry Lord Silverbridge.",
        "Welcomes(a_1, IsabelBoncassen) → AgreesToMarry(IsabelBoncassen, LordSilverbridge) ::: Lord Silverbridge's marriage to Isabel Boncassen is contingent upon the Duke's acceptance of Isabel Boncassen into the family.",
        "Disapproves(a_1, IsabelBoncassen) ::: At first, the Duke disapproves of Isabel Boncassen.",
        "Disapproves(a_1, Daughter'sSuitor) ::: The Duke disapproves even more of his daughter's suitor.",
        "Expelled(gerald) ∧ AttendedDerby(gerald) ::: Gerald, the younger son, gets himself expelled from Cambridge after attending the Derby without permission."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "734": [
    {
      "id": 734,
      "context_id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 2,
      "paragraph": "The Duke's two sons also prove burdensome. Lord Silverbridge follows the wishes of his father by entering Parliament. He had proposed to Lady Mabel Grex, whom he has known all his life. She turned him down, although with an indication of a more welcoming answer another time. However, Lord Silverbridge becomes enamoured with American heiress Isabel Boncassen. She agrees to marry him, but only if the Duke is willing to welcome her into the family. At first, the Duke disapproves; and he disapproves even more of his daughter's suitor. To add to his troubles, Gerald, the younger son, gets himself expelled from Cambridge after attending the Derby without permission.",
      "question_template": "[[CANDIDATE_ANSWER]] is the profession of Anne Morton's father.",
      "candidate_answers": [
        "Gerald, the younger son, gets himself expelled from Cambridge after attending the Derby without permission."
      ],
      "predicates": [
        "BurdenSome(x) ::: x is burdensome.",
        "EntersParliament(x) ::: x enters Parliament.",
        "Proposes(x, y) ::: x proposes to y.",
        "TurnsDown(x, y) ::: x turns down y.",
        "Welcomes(x, y) ::: x welcomes y.",
        "BecomesEnamoured(x, y) ::: x becomes enamoured with y.",
        "AgreesToMarry(x, y) ::: x agrees to marry y.",
        "Disapproves(x, y) ::: x disapproves of y.",
        "Expelled(x) ::: x is expelled from Cambridge.",
        "AttendedDerby(x) ::: x attended the Derby."
      ],
      "premises": [
        "BurdenSome(Children) ::: The Duke's two sons prove burdensome.",
        "EntersParliament(LordSilverbridge) ::: Lord Silverbridge follows the wishes of his father by entering Parliament.",
        "Proposes(LordSilverbridge, LadyMabelGrex) ::: Lord Silverbridge proposed to Lady Mabel Grex, whom he has known all his life.",
        "TurnsDown(LadyMabelGrex, LordSilverbridge) ::: Lady Mabel Grex turned down Lord Silverbridge.",
        "AgreesToMarry(IsabelBoncassen, LordSilverbridge) ::: Isabel Boncassen agrees to marry Lord Silverbridge.",
        "Welcomes(a_1, IsabelBoncassen) → AgreesToMarry(IsabelBoncassen, LordSilverbridge) ::: Lord Silverbridge's marriage to Isabel Boncassen is contingent upon the Duke's acceptance of Isabel Boncassen into the family.",
        "Disapproves(a_1, IsabelBoncassen) ::: At first, the Duke disapproves of Isabel Boncassen.",
        "Disapproves(a_1, Daughter'sSuitor) ::: The Duke disapproves even more of his daughter's suitor.",
        "Expelled(gerald) ∧ AttendedDerby(gerald) ::: Gerald, the younger son, gets himself expelled from Cambridge after attending the Derby without permission."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 734,
      "context_id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 3,
      "paragraph": "However, by the end of the book, the Duke grows closer to all three of his children; he allows the engagements of both son and daughter, and he is invited once more to take a part in the government.",
      "question_template": "[[CANDIDATE_ANSWER]] is the profession of Anne Morton's father.",
      "candidate_answers": [
        "Gerald, the youngest son of the Duke",
        "The engagements of both son and daughter"
      ],
      "predicates": [
        "Closer(a_1, a_0) ::: The Duke grows closer to his children.",
        "Engaged(a_2) ::: The son is engaged.",
        "Engaged(a_3) ::: The daughter is engaged.",
        "Invited(a_1, c_0) ::: The Duke is invited to take part in the government."
      ],
      "premises": [
        "Closer(a_1, b_1) ::: The Duke grows closer to all three of his children.",
        "Engaged(a_2) ::: The Duke allows the engagement of his son.",
        "Engaged(a_3) ::: The Duke allows the engagement of his daughter.",
        "Invited(a_1, c_0) ::: The Duke is invited once more to take a part in the government."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "735": [
    {
      "id": 735,
      "context_id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 0,
      "paragraph": " The plot concerns the children of the Duke of Omnium, Plantagenet Palliser, and his late wife, Lady Glencora. When Lady Glencora dies unexpectedly, the Duke is left to deal with his grownup children, with whom he has a somewhat distant relationship. As the government in which he is Prime Minister has also fallen, the Duke is left bereft of both his beloved wife and his political position.",
      "question_template": "[[CANDIDATE_ANSWER]] is what Guy Haines wants to do after he marries Anne Morton.",
      "candidate_answers": [
        "The Duke is left to deal with his grownup children",
        "The Duke is left bereft of both his beloved wife and his political position"
      ],
      "predicates": [
        "Duke(x) ::: x is the Duke of Omnium.",
        "Child(x) ::: x is a child of the Duke of Omnium.",
        "GrownUp(x) ::: x is a grown-up child.",
        "DistantRelationship(x, y) ::: x has a somewhat distant relationship with y.",
        "PrimeMinister(x) ::: x is the Prime Minister.",
        "Bereft(x, y) ::: x is bereft of y."
      ],
      "premises": [
        "Duke(a_1) ::: The Duke of Omnium is represented by a_1.",
        "∀x (Child(x) → (Duke(a_1) ∧ GrownUp(x))) ::: All children of the Duke of Omnium are grown-up.",
        "DistantRelationship(a_1, b_0) ::: The Duke has a somewhat distant relationship with his children.",
        "PrimeMinister(a_1) ::: The Duke is the Prime Minister.",
        "Bereft(a_1, Lady Glencora) ∧ Bereft(a_1, c_0) ::: The Duke is bereft of his beloved wife, Lady Glencora, and his political position.",
        "Conclusion:",
        "∃x (Child(x) ∧ DistantRelationship(a_1, x)) ::: There exists a child of the Duke with whom he has a distant relationship."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 735,
      "context_id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 1,
      "paragraph": "Before her death, Lady Glencora had imprudently given her secret blessing to her daughter Mary's courtship by a poor gentleman, Frank Tregear, a friend of Lord Silverbridge, the Duke's older son and heir. Mrs. Finn, Lady Glencora's dearest confidante, somewhat uneasily remains after the funeral as a companion and unofficial chaperone for Mary at the Duke's request. Once she becomes aware of the seriousness of the relationship between Mary and Frank, Mrs. Finn insists that the Duke be informed.",
      "question_template": "[[CANDIDATE_ANSWER]] is what Guy Haines wants to do after he marries Anne Morton.",
      "candidate_answers": [
        "Lady Glencora had imprudently given her secret blessing to her daughter Mary's courtship by a poor gentleman, Frank Tregear",
        "Mrs. Finn insists that the Duke be informed"
      ],
      "predicates": [
        "Blessing(x, y) ::: x gives a secret blessing to y.",
        "Courtship(x, y) ::: x is courting y.",
        "Friend(x, y) ::: x is a friend of y.",
        "Companion(x, y) ::: x is a companion to y.",
        "Chaperone(x, y) ::: x is an unofficial chaperone for y.",
        "Insist(x, y) ::: x insists that y be informed.",
        "Aware(x, y) ::: x is aware of y.",
        "SeriousRelationship(x, y) ::: x and y are in a serious relationship."
      ],
      "premises": [
        "Blessing(LadyGlencora, Courtship(Mary, FrankTregear)) ::: Lady Glencora had given her secret blessing to Mary's courtship by Frank Tregear.",
        "Friend(FrankTregear, LordSilverbridge) ::: Frank Tregear is a friend of Lord Silverbridge.",
        "Companion(MrsFinn, Mary) ∧ Chaperone(MrsFinn, Mary) ::: Mrs. Finn remains as a companion and unofficial chaperone for Mary.",
        "Insist(MrsFinn, Inform(Duke)) ::: Mrs. Finn insists that the Duke be informed of the seriousness of the relationship.",
        "Aware(MrsFinn, SeriousRelationship(Mary, FrankTregear)) ::: Mrs. Finn becomes aware of the seriousness of the relationship between Mary and Frank.",
        "Conclusion:",
        "¬(Insist(MrsFinn, Inform(Duke)) ∧ Aware(MrsFinn, SeriousRelationship(Mary, FrankTregear))) ::: If Mrs. Finn is not aware of the seriousness of the relationship, she will not insist that the Duke be informed."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 735,
      "context_id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 3,
      "paragraph": "However, by the end of the book, the Duke grows closer to all three of his children; he allows the engagements of both son and daughter, and he is invited once more to take a part in the government.",
      "question_template": "[[CANDIDATE_ANSWER]] is what Guy Haines wants to do after he marries Anne Morton.",
      "candidate_answers": [
        "The engagements of both son and daughter"
      ],
      "predicates": [
        "Closer(a_1, a_0) ::: The Duke grows closer to his children.",
        "Engaged(a_2) ::: The son is engaged.",
        "Engaged(a_3) ::: The daughter is engaged.",
        "Invited(a_1, c_0) ::: The Duke is invited to take part in the government."
      ],
      "premises": [
        "Closer(a_1, b_1) ::: The Duke grows closer to all three of his children.",
        "Engaged(a_2) ::: The Duke allows the engagement of his son.",
        "Engaged(a_3) ::: The Duke allows the engagement of his daughter.",
        "Invited(a_1, c_0) ::: The Duke is invited once more to take a part in the government."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "736": [
    {
      "id": 736,
      "context_id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 1,
      "paragraph": "Before her death, Lady Glencora had imprudently given her secret blessing to her daughter Mary's courtship by a poor gentleman, Frank Tregear, a friend of Lord Silverbridge, the Duke's older son and heir. Mrs. Finn, Lady Glencora's dearest confidante, somewhat uneasily remains after the funeral as a companion and unofficial chaperone for Mary at the Duke's request. Once she becomes aware of the seriousness of the relationship between Mary and Frank, Mrs. Finn insists that the Duke be informed.",
      "question_template": "[[CANDIDATE_ANSWER]] is the reason Guy Haines can't marry Anne Morton.",
      "candidate_answers": [
        "The Duke",
        "Duke's older son and heir"
      ],
      "predicates": [
        "Blessing(x, y) ::: x gives a secret blessing to y.",
        "Courtship(x, y) ::: x is courting y.",
        "Friend(x, y) ::: x is a friend of y.",
        "Companion(x, y) ::: x is a companion to y.",
        "Chaperone(x, y) ::: x is an unofficial chaperone for y.",
        "Insist(x, y) ::: x insists that y be informed.",
        "Aware(x, y) ::: x is aware of y.",
        "SeriousRelationship(x, y) ::: x and y are in a serious relationship."
      ],
      "premises": [
        "Blessing(LadyGlencora, Courtship(Mary, FrankTregear)) ::: Lady Glencora had given her secret blessing to Mary's courtship by Frank Tregear.",
        "Friend(FrankTregear, LordSilverbridge) ::: Frank Tregear is a friend of Lord Silverbridge.",
        "Companion(MrsFinn, Mary) ∧ Chaperone(MrsFinn, Mary) ::: Mrs. Finn remains as a companion and unofficial chaperone for Mary.",
        "Insist(MrsFinn, Inform(Duke)) ::: Mrs. Finn insists that the Duke be informed of the seriousness of the relationship.",
        "Aware(MrsFinn, SeriousRelationship(Mary, FrankTregear)) ::: Mrs. Finn becomes aware of the seriousness of the relationship between Mary and Frank.",
        "Conclusion:",
        "¬(Insist(MrsFinn, Inform(Duke)) ∧ Aware(MrsFinn, SeriousRelationship(Mary, FrankTregear))) ::: If Mrs. Finn is not aware of the seriousness of the relationship, she will not insist that the Duke be informed."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "737": [
    {
      "id": 737,
      "context_id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 0,
      "paragraph": " The plot concerns the children of the Duke of Omnium, Plantagenet Palliser, and his late wife, Lady Glencora. When Lady Glencora dies unexpectedly, the Duke is left to deal with his grownup children, with whom he has a somewhat distant relationship. As the government in which he is Prime Minister has also fallen, the Duke is left bereft of both his beloved wife and his political position.",
      "question_template": "Bruno Anthony wants Guy Haines to [[CANDIDATE_ANSWER]] in exchange for his murdering Haines' wife Miriam.",
      "candidate_answers": [
        "Prime Minister"
      ],
      "predicates": [
        "Duke(x) ::: x is the Duke of Omnium.",
        "Child(x) ::: x is a child of the Duke of Omnium.",
        "GrownUp(x) ::: x is a grown-up child.",
        "DistantRelationship(x, y) ::: x has a somewhat distant relationship with y.",
        "PrimeMinister(x) ::: x is the Prime Minister.",
        "Bereft(x, y) ::: x is bereft of y."
      ],
      "premises": [
        "Duke(a_1) ::: The Duke of Omnium is represented by a_1.",
        "∀x (Child(x) → (Duke(a_1) ∧ GrownUp(x))) ::: All children of the Duke of Omnium are grown-up.",
        "DistantRelationship(a_1, b_0) ::: The Duke has a somewhat distant relationship with his children.",
        "PrimeMinister(a_1) ::: The Duke is the Prime Minister.",
        "Bereft(a_1, Lady Glencora) ∧ Bereft(a_1, c_0) ::: The Duke is bereft of his beloved wife, Lady Glencora, and his political position.",
        "Conclusion:",
        "∃x (Child(x) ∧ DistantRelationship(a_1, x)) ::: There exists a child of the Duke with whom he has a distant relationship."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 737,
      "context_id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 2,
      "paragraph": "The Duke's two sons also prove burdensome. Lord Silverbridge follows the wishes of his father by entering Parliament. He had proposed to Lady Mabel Grex, whom he has known all his life. She turned him down, although with an indication of a more welcoming answer another time. However, Lord Silverbridge becomes enamoured with American heiress Isabel Boncassen. She agrees to marry him, but only if the Duke is willing to welcome her into the family. At first, the Duke disapproves; and he disapproves even more of his daughter's suitor. To add to his troubles, Gerald, the younger son, gets himself expelled from Cambridge after attending the Derby without permission.",
      "question_template": "Bruno Anthony wants Guy Haines to [[CANDIDATE_ANSWER]] in exchange for his murdering Haines' wife Miriam.",
      "candidate_answers": [
        "The Duke's two sons also prove burdensome.",
        "Lord Silverbridge follows the wishes of his father by entering Parliament."
      ],
      "predicates": [
        "BurdenSome(x) ::: x is burdensome.",
        "EntersParliament(x) ::: x enters Parliament.",
        "Proposes(x, y) ::: x proposes to y.",
        "TurnsDown(x, y) ::: x turns down y.",
        "Welcomes(x, y) ::: x welcomes y.",
        "BecomesEnamoured(x, y) ::: x becomes enamoured with y.",
        "AgreesToMarry(x, y) ::: x agrees to marry y.",
        "Disapproves(x, y) ::: x disapproves of y.",
        "Expelled(x) ::: x is expelled from Cambridge.",
        "AttendedDerby(x) ::: x attended the Derby."
      ],
      "premises": [
        "BurdenSome(Children) ::: The Duke's two sons prove burdensome.",
        "EntersParliament(LordSilverbridge) ::: Lord Silverbridge follows the wishes of his father by entering Parliament.",
        "Proposes(LordSilverbridge, LadyMabelGrex) ::: Lord Silverbridge proposed to Lady Mabel Grex, whom he has known all his life.",
        "TurnsDown(LadyMabelGrex, LordSilverbridge) ::: Lady Mabel Grex turned down Lord Silverbridge.",
        "AgreesToMarry(IsabelBoncassen, LordSilverbridge) ::: Isabel Boncassen agrees to marry Lord Silverbridge.",
        "Welcomes(a_1, IsabelBoncassen) → AgreesToMarry(IsabelBoncassen, LordSilverbridge) ::: Lord Silverbridge's marriage to Isabel Boncassen is contingent upon the Duke's acceptance of Isabel Boncassen into the family.",
        "Disapproves(a_1, IsabelBoncassen) ::: At first, the Duke disapproves of Isabel Boncassen.",
        "Disapproves(a_1, Daughter'sSuitor) ::: The Duke disapproves even more of his daughter's suitor.",
        "Expelled(gerald) ∧ AttendedDerby(gerald) ::: Gerald, the younger son, gets himself expelled from Cambridge after attending the Derby without permission."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "740": [
    {
      "id": 740,
      "context_id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 1,
      "paragraph": "Before her death, Lady Glencora had imprudently given her secret blessing to her daughter Mary's courtship by a poor gentleman, Frank Tregear, a friend of Lord Silverbridge, the Duke's older son and heir. Mrs. Finn, Lady Glencora's dearest confidante, somewhat uneasily remains after the funeral as a companion and unofficial chaperone for Mary at the Duke's request. Once she becomes aware of the seriousness of the relationship between Mary and Frank, Mrs. Finn insists that the Duke be informed.",
      "question_template": "Bruno kills Miriam by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "her daughter Mary's courtship by a poor gentleman, Frank Tregear",
        "Lady Glencora"
      ],
      "predicates": [
        "Blessing(x, y) ::: x gives a secret blessing to y.",
        "Courtship(x, y) ::: x is courting y.",
        "Friend(x, y) ::: x is a friend of y.",
        "Companion(x, y) ::: x is a companion to y.",
        "Chaperone(x, y) ::: x is an unofficial chaperone for y.",
        "Insist(x, y) ::: x insists that y be informed.",
        "Aware(x, y) ::: x is aware of y.",
        "SeriousRelationship(x, y) ::: x and y are in a serious relationship."
      ],
      "premises": [
        "Blessing(LadyGlencora, Courtship(Mary, FrankTregear)) ::: Lady Glencora had given her secret blessing to Mary's courtship by Frank Tregear.",
        "Friend(FrankTregear, LordSilverbridge) ::: Frank Tregear is a friend of Lord Silverbridge.",
        "Companion(MrsFinn, Mary) ∧ Chaperone(MrsFinn, Mary) ::: Mrs. Finn remains as a companion and unofficial chaperone for Mary.",
        "Insist(MrsFinn, Inform(Duke)) ::: Mrs. Finn insists that the Duke be informed of the seriousness of the relationship.",
        "Aware(MrsFinn, SeriousRelationship(Mary, FrankTregear)) ::: Mrs. Finn becomes aware of the seriousness of the relationship between Mary and Frank.",
        "Conclusion:",
        "¬(Insist(MrsFinn, Inform(Duke)) ∧ Aware(MrsFinn, SeriousRelationship(Mary, FrankTregear))) ::: If Mrs. Finn is not aware of the seriousness of the relationship, she will not insist that the Duke be informed."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "744": [
    {
      "id": 744,
      "context_id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 2,
      "paragraph": "The Duke's two sons also prove burdensome. Lord Silverbridge follows the wishes of his father by entering Parliament. He had proposed to Lady Mabel Grex, whom he has known all his life. She turned him down, although with an indication of a more welcoming answer another time. However, Lord Silverbridge becomes enamoured with American heiress Isabel Boncassen. She agrees to marry him, but only if the Duke is willing to welcome her into the family. At first, the Duke disapproves; and he disapproves even more of his daughter's suitor. To add to his troubles, Gerald, the younger son, gets himself expelled from Cambridge after attending the Derby without permission.",
      "question_template": "[[CANDIDATE_ANSWER]] dies unexpectedly.",
      "candidate_answers": [
        "American heiress Isabel Boncassen"
      ],
      "predicates": [
        "BurdenSome(x) ::: x is burdensome.",
        "EntersParliament(x) ::: x enters Parliament.",
        "Proposes(x, y) ::: x proposes to y.",
        "TurnsDown(x, y) ::: x turns down y.",
        "Welcomes(x, y) ::: x welcomes y.",
        "BecomesEnamoured(x, y) ::: x becomes enamoured with y.",
        "AgreesToMarry(x, y) ::: x agrees to marry y.",
        "Disapproves(x, y) ::: x disapproves of y.",
        "Expelled(x) ::: x is expelled from Cambridge.",
        "AttendedDerby(x) ::: x attended the Derby."
      ],
      "premises": [
        "BurdenSome(Children) ::: The Duke's two sons prove burdensome.",
        "EntersParliament(LordSilverbridge) ::: Lord Silverbridge follows the wishes of his father by entering Parliament.",
        "Proposes(LordSilverbridge, LadyMabelGrex) ::: Lord Silverbridge proposed to Lady Mabel Grex, whom he has known all his life.",
        "TurnsDown(LadyMabelGrex, LordSilverbridge) ::: Lady Mabel Grex turned down Lord Silverbridge.",
        "AgreesToMarry(IsabelBoncassen, LordSilverbridge) ::: Isabel Boncassen agrees to marry Lord Silverbridge.",
        "Welcomes(a_1, IsabelBoncassen) → AgreesToMarry(IsabelBoncassen, LordSilverbridge) ::: Lord Silverbridge's marriage to Isabel Boncassen is contingent upon the Duke's acceptance of Isabel Boncassen into the family.",
        "Disapproves(a_1, IsabelBoncassen) ::: At first, the Duke disapproves of Isabel Boncassen.",
        "Disapproves(a_1, Daughter'sSuitor) ::: The Duke disapproves even more of his daughter's suitor.",
        "Expelled(gerald) ∧ AttendedDerby(gerald) ::: Gerald, the younger son, gets himself expelled from Cambridge after attending the Derby without permission."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "746": [
    {
      "id": 746,
      "context_id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 0,
      "paragraph": " The plot concerns the children of the Duke of Omnium, Plantagenet Palliser, and his late wife, Lady Glencora. When Lady Glencora dies unexpectedly, the Duke is left to deal with his grownup children, with whom he has a somewhat distant relationship. As the government in which he is Prime Minister has also fallen, the Duke is left bereft of both his beloved wife and his political position.",
      "question_template": "[[CANDIDATE_ANSWER]] did something before she died.",
      "candidate_answers": [
        "Lady Glencora"
      ],
      "predicates": [
        "Duke(x) ::: x is the Duke of Omnium.",
        "Child(x) ::: x is a child of the Duke of Omnium.",
        "GrownUp(x) ::: x is a grown-up child.",
        "DistantRelationship(x, y) ::: x has a somewhat distant relationship with y.",
        "PrimeMinister(x) ::: x is the Prime Minister.",
        "Bereft(x, y) ::: x is bereft of y."
      ],
      "premises": [
        "Duke(a_1) ::: The Duke of Omnium is represented by a_1.",
        "∀x (Child(x) → (Duke(a_1) ∧ GrownUp(x))) ::: All children of the Duke of Omnium are grown-up.",
        "DistantRelationship(a_1, b_0) ::: The Duke has a somewhat distant relationship with his children.",
        "PrimeMinister(a_1) ::: The Duke is the Prime Minister.",
        "Bereft(a_1, Lady Glencora) ∧ Bereft(a_1, c_0) ::: The Duke is bereft of his beloved wife, Lady Glencora, and his political position.",
        "Conclusion:",
        "∃x (Child(x) ∧ DistantRelationship(a_1, x)) ::: There exists a child of the Duke with whom he has a distant relationship."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "747": [
    {
      "id": 747,
      "context_id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 0,
      "paragraph": " The plot concerns the children of the Duke of Omnium, Plantagenet Palliser, and his late wife, Lady Glencora. When Lady Glencora dies unexpectedly, the Duke is left to deal with his grownup children, with whom he has a somewhat distant relationship. As the government in which he is Prime Minister has also fallen, the Duke is left bereft of both his beloved wife and his political position.",
      "question_template": "[[CANDIDATE_ANSWER]] insists that the Duke be informed of Mary's courtship.",
      "candidate_answers": [
        "The government in which he is Prime Minister has also fallen"
      ],
      "predicates": [
        "Duke(x) ::: x is the Duke of Omnium.",
        "Child(x) ::: x is a child of the Duke of Omnium.",
        "GrownUp(x) ::: x is a grown-up child.",
        "DistantRelationship(x, y) ::: x has a somewhat distant relationship with y.",
        "PrimeMinister(x) ::: x is the Prime Minister.",
        "Bereft(x, y) ::: x is bereft of y."
      ],
      "premises": [
        "Duke(a_1) ::: The Duke of Omnium is represented by a_1.",
        "∀x (Child(x) → (Duke(a_1) ∧ GrownUp(x))) ::: All children of the Duke of Omnium are grown-up.",
        "DistantRelationship(a_1, b_0) ::: The Duke has a somewhat distant relationship with his children.",
        "PrimeMinister(a_1) ::: The Duke is the Prime Minister.",
        "Bereft(a_1, Lady Glencora) ∧ Bereft(a_1, c_0) ::: The Duke is bereft of his beloved wife, Lady Glencora, and his political position.",
        "Conclusion:",
        "∃x (Child(x) ∧ DistantRelationship(a_1, x)) ::: There exists a child of the Duke with whom he has a distant relationship."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 747,
      "context_id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 3,
      "paragraph": "However, by the end of the book, the Duke grows closer to all three of his children; he allows the engagements of both son and daughter, and he is invited once more to take a part in the government.",
      "question_template": "[[CANDIDATE_ANSWER]] insists that the Duke be informed of Mary's courtship.",
      "candidate_answers": [
        "The Duke grows closer to all three of his children",
        "He allows the engagements of both son and daughter",
        "He is invited once more to take a part in the government"
      ],
      "predicates": [
        "Closer(a_1, a_0) ::: The Duke grows closer to his children.",
        "Engaged(a_2) ::: The son is engaged.",
        "Engaged(a_3) ::: The daughter is engaged.",
        "Invited(a_1, c_0) ::: The Duke is invited to take part in the government."
      ],
      "premises": [
        "Closer(a_1, b_1) ::: The Duke grows closer to all three of his children.",
        "Engaged(a_2) ::: The Duke allows the engagement of his son.",
        "Engaged(a_3) ::: The Duke allows the engagement of his daughter.",
        "Invited(a_1, c_0) ::: The Duke is invited once more to take a part in the government."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "748": [
    {
      "id": 748,
      "context_id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 0,
      "paragraph": " The plot concerns the children of the Duke of Omnium, Plantagenet Palliser, and his late wife, Lady Glencora. When Lady Glencora dies unexpectedly, the Duke is left to deal with his grownup children, with whom he has a somewhat distant relationship. As the government in which he is Prime Minister has also fallen, the Duke is left bereft of both his beloved wife and his political position.",
      "question_template": "Lord Silverbridge follows the wish of his father regarding [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Plantagenet Palliser"
      ],
      "predicates": [
        "Duke(x) ::: x is the Duke of Omnium.",
        "Child(x) ::: x is a child of the Duke of Omnium.",
        "GrownUp(x) ::: x is a grown-up child.",
        "DistantRelationship(x, y) ::: x has a somewhat distant relationship with y.",
        "PrimeMinister(x) ::: x is the Prime Minister.",
        "Bereft(x, y) ::: x is bereft of y."
      ],
      "premises": [
        "Duke(a_1) ::: The Duke of Omnium is represented by a_1.",
        "∀x (Child(x) → (Duke(a_1) ∧ GrownUp(x))) ::: All children of the Duke of Omnium are grown-up.",
        "DistantRelationship(a_1, b_0) ::: The Duke has a somewhat distant relationship with his children.",
        "PrimeMinister(a_1) ::: The Duke is the Prime Minister.",
        "Bereft(a_1, Lady Glencora) ∧ Bereft(a_1, c_0) ::: The Duke is bereft of his beloved wife, Lady Glencora, and his political position.",
        "Conclusion:",
        "∃x (Child(x) ∧ DistantRelationship(a_1, x)) ::: There exists a child of the Duke with whom he has a distant relationship."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 748,
      "context_id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 1,
      "paragraph": "Before her death, Lady Glencora had imprudently given her secret blessing to her daughter Mary's courtship by a poor gentleman, Frank Tregear, a friend of Lord Silverbridge, the Duke's older son and heir. Mrs. Finn, Lady Glencora's dearest confidante, somewhat uneasily remains after the funeral as a companion and unofficial chaperone for Mary at the Duke's request. Once she becomes aware of the seriousness of the relationship between Mary and Frank, Mrs. Finn insists that the Duke be informed.",
      "question_template": "Lord Silverbridge follows the wish of his father regarding [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Lord Silverbridge"
      ],
      "predicates": [
        "Blessing(x, y) ::: x gives a secret blessing to y.",
        "Courtship(x, y) ::: x is courting y.",
        "Friend(x, y) ::: x is a friend of y.",
        "Companion(x, y) ::: x is a companion to y.",
        "Chaperone(x, y) ::: x is an unofficial chaperone for y.",
        "Insist(x, y) ::: x insists that y be informed.",
        "Aware(x, y) ::: x is aware of y.",
        "SeriousRelationship(x, y) ::: x and y are in a serious relationship."
      ],
      "premises": [
        "Blessing(LadyGlencora, Courtship(Mary, FrankTregear)) ::: Lady Glencora had given her secret blessing to Mary's courtship by Frank Tregear.",
        "Friend(FrankTregear, LordSilverbridge) ::: Frank Tregear is a friend of Lord Silverbridge.",
        "Companion(MrsFinn, Mary) ∧ Chaperone(MrsFinn, Mary) ::: Mrs. Finn remains as a companion and unofficial chaperone for Mary.",
        "Insist(MrsFinn, Inform(Duke)) ::: Mrs. Finn insists that the Duke be informed of the seriousness of the relationship.",
        "Aware(MrsFinn, SeriousRelationship(Mary, FrankTregear)) ::: Mrs. Finn becomes aware of the seriousness of the relationship between Mary and Frank.",
        "Conclusion:",
        "¬(Insist(MrsFinn, Inform(Duke)) ∧ Aware(MrsFinn, SeriousRelationship(Mary, FrankTregear))) ::: If Mrs. Finn is not aware of the seriousness of the relationship, she will not insist that the Duke be informed."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 748,
      "context_id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 2,
      "paragraph": "The Duke's two sons also prove burdensome. Lord Silverbridge follows the wishes of his father by entering Parliament. He had proposed to Lady Mabel Grex, whom he has known all his life. She turned him down, although with an indication of a more welcoming answer another time. However, Lord Silverbridge becomes enamoured with American heiress Isabel Boncassen. She agrees to marry him, but only if the Duke is willing to welcome her into the family. At first, the Duke disapproves; and he disapproves even more of his daughter's suitor. To add to his troubles, Gerald, the younger son, gets himself expelled from Cambridge after attending the Derby without permission.",
      "question_template": "Lord Silverbridge follows the wish of his father regarding [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Lord Silverbridge"
      ],
      "predicates": [
        "BurdenSome(x) ::: x is burdensome.",
        "EntersParliament(x) ::: x enters Parliament.",
        "Proposes(x, y) ::: x proposes to y.",
        "TurnsDown(x, y) ::: x turns down y.",
        "Welcomes(x, y) ::: x welcomes y.",
        "BecomesEnamoured(x, y) ::: x becomes enamoured with y.",
        "AgreesToMarry(x, y) ::: x agrees to marry y.",
        "Disapproves(x, y) ::: x disapproves of y.",
        "Expelled(x) ::: x is expelled from Cambridge.",
        "AttendedDerby(x) ::: x attended the Derby."
      ],
      "premises": [
        "BurdenSome(Children) ::: The Duke's two sons prove burdensome.",
        "EntersParliament(LordSilverbridge) ::: Lord Silverbridge follows the wishes of his father by entering Parliament.",
        "Proposes(LordSilverbridge, LadyMabelGrex) ::: Lord Silverbridge proposed to Lady Mabel Grex, whom he has known all his life.",
        "TurnsDown(LadyMabelGrex, LordSilverbridge) ::: Lady Mabel Grex turned down Lord Silverbridge.",
        "AgreesToMarry(IsabelBoncassen, LordSilverbridge) ::: Isabel Boncassen agrees to marry Lord Silverbridge.",
        "Welcomes(a_1, IsabelBoncassen) → AgreesToMarry(IsabelBoncassen, LordSilverbridge) ::: Lord Silverbridge's marriage to Isabel Boncassen is contingent upon the Duke's acceptance of Isabel Boncassen into the family.",
        "Disapproves(a_1, IsabelBoncassen) ::: At first, the Duke disapproves of Isabel Boncassen.",
        "Disapproves(a_1, Daughter'sSuitor) ::: The Duke disapproves even more of his daughter's suitor.",
        "Expelled(gerald) ∧ AttendedDerby(gerald) ::: Gerald, the younger son, gets himself expelled from Cambridge after attending the Derby without permission."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "749": [
    {
      "id": 749,
      "context_id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 1,
      "paragraph": "Before her death, Lady Glencora had imprudently given her secret blessing to her daughter Mary's courtship by a poor gentleman, Frank Tregear, a friend of Lord Silverbridge, the Duke's older son and heir. Mrs. Finn, Lady Glencora's dearest confidante, somewhat uneasily remains after the funeral as a companion and unofficial chaperone for Mary at the Duke's request. Once she becomes aware of the seriousness of the relationship between Mary and Frank, Mrs. Finn insists that the Duke be informed.",
      "question_template": "Lord Silverbridge proposed to [[CANDIDATE_ANSWER]] but was turned down by them.",
      "candidate_answers": [
        "Frank Tregear"
      ],
      "predicates": [
        "Blessing(x, y) ::: x gives a secret blessing to y.",
        "Courtship(x, y) ::: x is courting y.",
        "Friend(x, y) ::: x is a friend of y.",
        "Companion(x, y) ::: x is a companion to y.",
        "Chaperone(x, y) ::: x is an unofficial chaperone for y.",
        "Insist(x, y) ::: x insists that y be informed.",
        "Aware(x, y) ::: x is aware of y.",
        "SeriousRelationship(x, y) ::: x and y are in a serious relationship."
      ],
      "premises": [
        "Blessing(LadyGlencora, Courtship(Mary, FrankTregear)) ::: Lady Glencora had given her secret blessing to Mary's courtship by Frank Tregear.",
        "Friend(FrankTregear, LordSilverbridge) ::: Frank Tregear is a friend of Lord Silverbridge.",
        "Companion(MrsFinn, Mary) ∧ Chaperone(MrsFinn, Mary) ::: Mrs. Finn remains as a companion and unofficial chaperone for Mary.",
        "Insist(MrsFinn, Inform(Duke)) ::: Mrs. Finn insists that the Duke be informed of the seriousness of the relationship.",
        "Aware(MrsFinn, SeriousRelationship(Mary, FrankTregear)) ::: Mrs. Finn becomes aware of the seriousness of the relationship between Mary and Frank.",
        "Conclusion:",
        "¬(Insist(MrsFinn, Inform(Duke)) ∧ Aware(MrsFinn, SeriousRelationship(Mary, FrankTregear))) ::: If Mrs. Finn is not aware of the seriousness of the relationship, she will not insist that the Duke be informed."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "750": [
    {
      "id": 750,
      "context_id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 1,
      "paragraph": "Before her death, Lady Glencora had imprudently given her secret blessing to her daughter Mary's courtship by a poor gentleman, Frank Tregear, a friend of Lord Silverbridge, the Duke's older son and heir. Mrs. Finn, Lady Glencora's dearest confidante, somewhat uneasily remains after the funeral as a companion and unofficial chaperone for Mary at the Duke's request. Once she becomes aware of the seriousness of the relationship between Mary and Frank, Mrs. Finn insists that the Duke be informed.",
      "question_template": "Lord Silverbridge falls in love with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Mrs. Finn",
        "Lady Glencora's dearest confidante",
        "A companion and unofficial chaperone for Mary at the Duke's request"
      ],
      "predicates": [
        "Blessing(x, y) ::: x gives a secret blessing to y.",
        "Courtship(x, y) ::: x is courting y.",
        "Friend(x, y) ::: x is a friend of y.",
        "Companion(x, y) ::: x is a companion to y.",
        "Chaperone(x, y) ::: x is an unofficial chaperone for y.",
        "Insist(x, y) ::: x insists that y be informed.",
        "Aware(x, y) ::: x is aware of y.",
        "SeriousRelationship(x, y) ::: x and y are in a serious relationship."
      ],
      "premises": [
        "Blessing(LadyGlencora, Courtship(Mary, FrankTregear)) ::: Lady Glencora had given her secret blessing to Mary's courtship by Frank Tregear.",
        "Friend(FrankTregear, LordSilverbridge) ::: Frank Tregear is a friend of Lord Silverbridge.",
        "Companion(MrsFinn, Mary) ∧ Chaperone(MrsFinn, Mary) ::: Mrs. Finn remains as a companion and unofficial chaperone for Mary.",
        "Insist(MrsFinn, Inform(Duke)) ::: Mrs. Finn insists that the Duke be informed of the seriousness of the relationship.",
        "Aware(MrsFinn, SeriousRelationship(Mary, FrankTregear)) ::: Mrs. Finn becomes aware of the seriousness of the relationship between Mary and Frank.",
        "Conclusion:",
        "¬(Insist(MrsFinn, Inform(Duke)) ∧ Aware(MrsFinn, SeriousRelationship(Mary, FrankTregear))) ::: If Mrs. Finn is not aware of the seriousness of the relationship, she will not insist that the Duke be informed."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "752": [
    {
      "id": 752,
      "context_id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 2,
      "paragraph": "The Duke's two sons also prove burdensome. Lord Silverbridge follows the wishes of his father by entering Parliament. He had proposed to Lady Mabel Grex, whom he has known all his life. She turned him down, although with an indication of a more welcoming answer another time. However, Lord Silverbridge becomes enamoured with American heiress Isabel Boncassen. She agrees to marry him, but only if the Duke is willing to welcome her into the family. At first, the Duke disapproves; and he disapproves even more of his daughter's suitor. To add to his troubles, Gerald, the younger son, gets himself expelled from Cambridge after attending the Derby without permission.",
      "question_template": "[[CANDIDATE_ANSWER]] is what Gerald, the youngest son of the Duke does.",
      "candidate_answers": [
        "Lady Mabel Grex",
        "Isabel Boncassen"
      ],
      "predicates": [
        "BurdenSome(x) ::: x is burdensome.",
        "EntersParliament(x) ::: x enters Parliament.",
        "Proposes(x, y) ::: x proposes to y.",
        "TurnsDown(x, y) ::: x turns down y.",
        "Welcomes(x, y) ::: x welcomes y.",
        "BecomesEnamoured(x, y) ::: x becomes enamoured with y.",
        "AgreesToMarry(x, y) ::: x agrees to marry y.",
        "Disapproves(x, y) ::: x disapproves of y.",
        "Expelled(x) ::: x is expelled from Cambridge.",
        "AttendedDerby(x) ::: x attended the Derby."
      ],
      "premises": [
        "BurdenSome(Children) ::: The Duke's two sons prove burdensome.",
        "EntersParliament(LordSilverbridge) ::: Lord Silverbridge follows the wishes of his father by entering Parliament.",
        "Proposes(LordSilverbridge, LadyMabelGrex) ::: Lord Silverbridge proposed to Lady Mabel Grex, whom he has known all his life.",
        "TurnsDown(LadyMabelGrex, LordSilverbridge) ::: Lady Mabel Grex turned down Lord Silverbridge.",
        "AgreesToMarry(IsabelBoncassen, LordSilverbridge) ::: Isabel Boncassen agrees to marry Lord Silverbridge.",
        "Welcomes(a_1, IsabelBoncassen) → AgreesToMarry(IsabelBoncassen, LordSilverbridge) ::: Lord Silverbridge's marriage to Isabel Boncassen is contingent upon the Duke's acceptance of Isabel Boncassen into the family.",
        "Disapproves(a_1, IsabelBoncassen) ::: At first, the Duke disapproves of Isabel Boncassen.",
        "Disapproves(a_1, Daughter'sSuitor) ::: The Duke disapproves even more of his daughter's suitor.",
        "Expelled(gerald) ∧ AttendedDerby(gerald) ::: Gerald, the younger son, gets himself expelled from Cambridge after attending the Derby without permission."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 752,
      "context_id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 3,
      "paragraph": "However, by the end of the book, the Duke grows closer to all three of his children; he allows the engagements of both son and daughter, and he is invited once more to take a part in the government.",
      "question_template": "[[CANDIDATE_ANSWER]] is what Gerald, the youngest son of the Duke does.",
      "candidate_answers": [
        "The Duke",
        "His children",
        "The engagements of both son and daughter"
      ],
      "predicates": [
        "Closer(a_1, a_0) ::: The Duke grows closer to his children.",
        "Engaged(a_2) ::: The son is engaged.",
        "Engaged(a_3) ::: The daughter is engaged.",
        "Invited(a_1, c_0) ::: The Duke is invited to take part in the government."
      ],
      "premises": [
        "Closer(a_1, b_1) ::: The Duke grows closer to all three of his children.",
        "Engaged(a_2) ::: The Duke allows the engagement of his son.",
        "Engaged(a_3) ::: The Duke allows the engagement of his daughter.",
        "Invited(a_1, c_0) ::: The Duke is invited once more to take a part in the government."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "753": [
    {
      "id": 753,
      "context_id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 2,
      "paragraph": "The Duke's two sons also prove burdensome. Lord Silverbridge follows the wishes of his father by entering Parliament. He had proposed to Lady Mabel Grex, whom he has known all his life. She turned him down, although with an indication of a more welcoming answer another time. However, Lord Silverbridge becomes enamoured with American heiress Isabel Boncassen. She agrees to marry him, but only if the Duke is willing to welcome her into the family. At first, the Duke disapproves; and he disapproves even more of his daughter's suitor. To add to his troubles, Gerald, the younger son, gets himself expelled from Cambridge after attending the Derby without permission.",
      "question_template": "The Duke allows [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Gerald, the younger son"
      ],
      "predicates": [
        "BurdenSome(x) ::: x is burdensome.",
        "EntersParliament(x) ::: x enters Parliament.",
        "Proposes(x, y) ::: x proposes to y.",
        "TurnsDown(x, y) ::: x turns down y.",
        "Welcomes(x, y) ::: x welcomes y.",
        "BecomesEnamoured(x, y) ::: x becomes enamoured with y.",
        "AgreesToMarry(x, y) ::: x agrees to marry y.",
        "Disapproves(x, y) ::: x disapproves of y.",
        "Expelled(x) ::: x is expelled from Cambridge.",
        "AttendedDerby(x) ::: x attended the Derby."
      ],
      "premises": [
        "BurdenSome(Children) ::: The Duke's two sons prove burdensome.",
        "EntersParliament(LordSilverbridge) ::: Lord Silverbridge follows the wishes of his father by entering Parliament.",
        "Proposes(LordSilverbridge, LadyMabelGrex) ::: Lord Silverbridge proposed to Lady Mabel Grex, whom he has known all his life.",
        "TurnsDown(LadyMabelGrex, LordSilverbridge) ::: Lady Mabel Grex turned down Lord Silverbridge.",
        "AgreesToMarry(IsabelBoncassen, LordSilverbridge) ::: Isabel Boncassen agrees to marry Lord Silverbridge.",
        "Welcomes(a_1, IsabelBoncassen) → AgreesToMarry(IsabelBoncassen, LordSilverbridge) ::: Lord Silverbridge's marriage to Isabel Boncassen is contingent upon the Duke's acceptance of Isabel Boncassen into the family.",
        "Disapproves(a_1, IsabelBoncassen) ::: At first, the Duke disapproves of Isabel Boncassen.",
        "Disapproves(a_1, Daughter'sSuitor) ::: The Duke disapproves even more of his daughter's suitor.",
        "Expelled(gerald) ∧ AttendedDerby(gerald) ::: Gerald, the younger son, gets himself expelled from Cambridge after attending the Derby without permission."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "755": [
    {
      "id": 755,
      "context_id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 1,
      "paragraph": "Before her death, Lady Glencora had imprudently given her secret blessing to her daughter Mary's courtship by a poor gentleman, Frank Tregear, a friend of Lord Silverbridge, the Duke's older son and heir. Mrs. Finn, Lady Glencora's dearest confidante, somewhat uneasily remains after the funeral as a companion and unofficial chaperone for Mary at the Duke's request. Once she becomes aware of the seriousness of the relationship between Mary and Frank, Mrs. Finn insists that the Duke be informed.",
      "question_template": "[[CANDIDATE_ANSWER]] was the Duke of Omnium's political position before the government fell.",
      "candidate_answers": [
        "Mary's courtship by a poor gentleman, Frank Tregear"
      ],
      "predicates": [
        "Blessing(x, y) ::: x gives a secret blessing to y.",
        "Courtship(x, y) ::: x is courting y.",
        "Friend(x, y) ::: x is a friend of y.",
        "Companion(x, y) ::: x is a companion to y.",
        "Chaperone(x, y) ::: x is an unofficial chaperone for y.",
        "Insist(x, y) ::: x insists that y be informed.",
        "Aware(x, y) ::: x is aware of y.",
        "SeriousRelationship(x, y) ::: x and y are in a serious relationship."
      ],
      "premises": [
        "Blessing(LadyGlencora, Courtship(Mary, FrankTregear)) ::: Lady Glencora had given her secret blessing to Mary's courtship by Frank Tregear.",
        "Friend(FrankTregear, LordSilverbridge) ::: Frank Tregear is a friend of Lord Silverbridge.",
        "Companion(MrsFinn, Mary) ∧ Chaperone(MrsFinn, Mary) ::: Mrs. Finn remains as a companion and unofficial chaperone for Mary.",
        "Insist(MrsFinn, Inform(Duke)) ::: Mrs. Finn insists that the Duke be informed of the seriousness of the relationship.",
        "Aware(MrsFinn, SeriousRelationship(Mary, FrankTregear)) ::: Mrs. Finn becomes aware of the seriousness of the relationship between Mary and Frank.",
        "Conclusion:",
        "¬(Insist(MrsFinn, Inform(Duke)) ∧ Aware(MrsFinn, SeriousRelationship(Mary, FrankTregear))) ::: If Mrs. Finn is not aware of the seriousness of the relationship, she will not insist that the Duke be informed."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "756": [
    {
      "id": 756,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 0,
      "paragraph": " EDtv starts off with the television channel True TV commencing interviews for a TV show that shows a normal person's life 24/7. This idea was thought up by a TV producer named Cynthia (Ellen DeGeneres). They interview Ed Pekurny (Matthew McConaughey) and his brother, Ray (Woody Harrelson). When the producers see the interview Cynthia decides to use Ed and interviews only Ed. So now they start airing the show, which they call Ed TV. The show is a total failure at first, as only boring things happen and the main producers want to pull the plug, except for Cynthia.",
      "question_template": "The name of the Duke of Omnium's wife was [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "True TV"
      ],
      "predicates": [
        "Producer(x) ::: x is a TV producer.",
        "Interview(x, y) ::: x interviews y.",
        "Airing(x) ::: x is airing a show.",
        "Failure(x) ::: x is a total failure.",
        "BelievesIn(x, y) ::: x believes in the potential of y.",
        "Show(x) ::: x is a TV show.",
        "NormalPerson(x) ::: x is a normal person.",
        "BoringThings(x) ::: x involves boring things."
      ],
      "premises": [
        "Producer(cynthia) ::: Cynthia is a TV producer.",
        "Interview(cynthia, ed) ::: Cynthia interviews Ed Pekurny.",
        "Airing(edTV) ::: They start airing the show, which they call Ed TV.",
        "Failure(edTV) ::: The show is a total failure at first.",
        "BelievesIn(cynthia, edTV) ::: Cynthia believes in the potential of Ed TV despite its initial failure.",
        "NormalPerson(ed) ::: Ed Pekurny is a normal person.",
        "BoringThings(edTV) ::: Ed TV involves boring things.",
        "Conclusion:",
        "¬Failure(edTV) ::: Ed TV is not a total failure in the long run due to Cynthia's belief in its potential."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 756,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 2,
      "paragraph": "Ed then goes on The Tonight Show with Jay Leno and meets beautiful model/actress Jill (Elizabeth Hurley) who takes a liking to Ed. Ed then visits Shari and she tells Ed that she does not want to be with him until the Show stops airing. She then leaves town. Ed goes to the park with Ray and some friends to play football when Jill comes to talk to him, because Cynthia brought her in to earn more ratings. She invites Ed to dinner at her house. When he arrives at Jill's house, there is a massive crowd. They have a small talk, and then they kiss on top of a table. They are about to have sex, but then Ed falls off the table and squishes Jill's cat. Ed never sees Jill again.",
      "question_template": "The name of the Duke of Omnium's wife was [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The Tonight Show with Jay Leno"
      ],
      "predicates": [
        "GoesOnShow(x, y) ::: x goes on the show y.",
        "Meets(x, y) ::: x meets y.",
        "Likes(x, y) ::: x takes a liking to y.",
        "WantsToBeWith(x, y) ::: x wants to be with y.",
        "LeavesTown(x) ::: x leaves town.",
        "PlaysFootball(x) ::: x plays football.",
        "Invites(x, y) ::: x invites y to dinner.",
        "Kisses(x, y) ::: x kisses y.",
        "FallsOffTable(x) ::: x falls off the table.",
        "Squishes(x, y) ::: x squishes y.",
        "NeverSees(x, y) ::: x never sees y again."
      ],
      "premises": [
        "GoesOnShow(a_1, \"The Tonight Show with Jay Leno\") ::: Ed goes on The Tonight Show with Jay Leno.",
        "Meets(a_1, a_2) ::: Ed meets beautiful model/actress Jill (Elizabeth Hurley).",
        "Likes(a_2, a_1) ::: Jill takes a liking to Ed.",
        "WantsToBeWith(a_2, a_1) ::: Shari tells Ed that she does not want to be with him until the Show stops airing.",
        "LeavesTown(a_2) ::: Shari leaves town.",
        "PlaysFootball(a_1) ::: Ed goes to the park with Ray and some friends to play football.",
        "Invites(a_2, a_1) ::: Jill invites Ed to dinner at her house.",
        "FallsOffTable(a_1) ::: Ed falls off the table.",
        "Squishes(a_1, \"Jill's cat\") ::: Ed squishes Jill's cat.",
        "NeverSees(a_1, a_2) ::: Ed never sees Jill again.",
        "¬(Likes(a_1, a_2)) ::: Ed does not have a relationship with Jill after the incident."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "757": [
    {
      "id": 757,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 0,
      "paragraph": " EDtv starts off with the television channel True TV commencing interviews for a TV show that shows a normal person's life 24/7. This idea was thought up by a TV producer named Cynthia (Ellen DeGeneres). They interview Ed Pekurny (Matthew McConaughey) and his brother, Ray (Woody Harrelson). When the producers see the interview Cynthia decides to use Ed and interviews only Ed. So now they start airing the show, which they call Ed TV. The show is a total failure at first, as only boring things happen and the main producers want to pull the plug, except for Cynthia.",
      "question_template": "[[CANDIDATE_ANSWER]] was Lady Glencora's closest confidant.",
      "candidate_answers": [
        "A TV producer named Cynthia",
        "Cynthia"
      ],
      "predicates": [
        "Producer(x) ::: x is a TV producer.",
        "Interview(x, y) ::: x interviews y.",
        "Airing(x) ::: x is airing a show.",
        "Failure(x) ::: x is a total failure.",
        "BelievesIn(x, y) ::: x believes in the potential of y.",
        "Show(x) ::: x is a TV show.",
        "NormalPerson(x) ::: x is a normal person.",
        "BoringThings(x) ::: x involves boring things."
      ],
      "premises": [
        "Producer(cynthia) ::: Cynthia is a TV producer.",
        "Interview(cynthia, ed) ::: Cynthia interviews Ed Pekurny.",
        "Airing(edTV) ::: They start airing the show, which they call Ed TV.",
        "Failure(edTV) ::: The show is a total failure at first.",
        "BelievesIn(cynthia, edTV) ::: Cynthia believes in the potential of Ed TV despite its initial failure.",
        "NormalPerson(ed) ::: Ed Pekurny is a normal person.",
        "BoringThings(edTV) ::: Ed TV involves boring things.",
        "Conclusion:",
        "¬Failure(edTV) ::: Ed TV is not a total failure in the long run due to Cynthia's belief in its potential."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "758": [
    {
      "id": 758,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 0,
      "paragraph": " EDtv starts off with the television channel True TV commencing interviews for a TV show that shows a normal person's life 24/7. This idea was thought up by a TV producer named Cynthia (Ellen DeGeneres). They interview Ed Pekurny (Matthew McConaughey) and his brother, Ray (Woody Harrelson). When the producers see the interview Cynthia decides to use Ed and interviews only Ed. So now they start airing the show, which they call Ed TV. The show is a total failure at first, as only boring things happen and the main producers want to pull the plug, except for Cynthia.",
      "question_template": "Lady Glencora gave her blessing that her daughter could court [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The show is a total failure at first, as only boring things happen and the main producers want to pull the plug, except for Cynthia."
      ],
      "predicates": [
        "Producer(x) ::: x is a TV producer.",
        "Interview(x, y) ::: x interviews y.",
        "Airing(x) ::: x is airing a show.",
        "Failure(x) ::: x is a total failure.",
        "BelievesIn(x, y) ::: x believes in the potential of y.",
        "Show(x) ::: x is a TV show.",
        "NormalPerson(x) ::: x is a normal person.",
        "BoringThings(x) ::: x involves boring things."
      ],
      "premises": [
        "Producer(cynthia) ::: Cynthia is a TV producer.",
        "Interview(cynthia, ed) ::: Cynthia interviews Ed Pekurny.",
        "Airing(edTV) ::: They start airing the show, which they call Ed TV.",
        "Failure(edTV) ::: The show is a total failure at first.",
        "BelievesIn(cynthia, edTV) ::: Cynthia believes in the potential of Ed TV despite its initial failure.",
        "NormalPerson(ed) ::: Ed Pekurny is a normal person.",
        "BoringThings(edTV) ::: Ed TV involves boring things.",
        "Conclusion:",
        "¬Failure(edTV) ::: Ed TV is not a total failure in the long run due to Cynthia's belief in its potential."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 758,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 2,
      "paragraph": "Ed then goes on The Tonight Show with Jay Leno and meets beautiful model/actress Jill (Elizabeth Hurley) who takes a liking to Ed. Ed then visits Shari and she tells Ed that she does not want to be with him until the Show stops airing. She then leaves town. Ed goes to the park with Ray and some friends to play football when Jill comes to talk to him, because Cynthia brought her in to earn more ratings. She invites Ed to dinner at her house. When he arrives at Jill's house, there is a massive crowd. They have a small talk, and then they kiss on top of a table. They are about to have sex, but then Ed falls off the table and squishes Jill's cat. Ed never sees Jill again.",
      "question_template": "Lady Glencora gave her blessing that her daughter could court [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Ed goes on The Tonight Show with Jay Leno",
        "- Jill takes a liking to Ed",
        "- Cynthia brought Jill in to earn more ratings"
      ],
      "predicates": [
        "GoesOnShow(x, y) ::: x goes on the show y.",
        "Meets(x, y) ::: x meets y.",
        "Likes(x, y) ::: x takes a liking to y.",
        "WantsToBeWith(x, y) ::: x wants to be with y.",
        "LeavesTown(x) ::: x leaves town.",
        "PlaysFootball(x) ::: x plays football.",
        "Invites(x, y) ::: x invites y to dinner.",
        "Kisses(x, y) ::: x kisses y.",
        "FallsOffTable(x) ::: x falls off the table.",
        "Squishes(x, y) ::: x squishes y.",
        "NeverSees(x, y) ::: x never sees y again."
      ],
      "premises": [
        "GoesOnShow(a_1, \"The Tonight Show with Jay Leno\") ::: Ed goes on The Tonight Show with Jay Leno.",
        "Meets(a_1, a_2) ::: Ed meets beautiful model/actress Jill (Elizabeth Hurley).",
        "Likes(a_2, a_1) ::: Jill takes a liking to Ed.",
        "WantsToBeWith(a_2, a_1) ::: Shari tells Ed that she does not want to be with him until the Show stops airing.",
        "LeavesTown(a_2) ::: Shari leaves town.",
        "PlaysFootball(a_1) ::: Ed goes to the park with Ray and some friends to play football.",
        "Invites(a_2, a_1) ::: Jill invites Ed to dinner at her house.",
        "FallsOffTable(a_1) ::: Ed falls off the table.",
        "Squishes(a_1, \"Jill's cat\") ::: Ed squishes Jill's cat.",
        "NeverSees(a_1, a_2) ::: Ed never sees Jill again.",
        "¬(Likes(a_1, a_2)) ::: Ed does not have a relationship with Jill after the incident."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 758,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 4,
      "paragraph": "After the funeral, Ed becomes disheartened by the fact that the producers want him to stay on longer and that he cannot do anything to change their minds or he would be in breach of his contract. Ed is depressed until he catches a glimpse of Shari (in disguise wearing a wig and sunglasses). He chases her for a long time until she stops in the women's bathroom in a movie theater. She says she is staying with her brother as it is his birthday and she just wanted to see Ed. Ed vows to find a way to end the show to be with Shari. When Ed exits, one camera man stays with Shari saying that it is the producers' new idea. The main camera man tells him that all his family are being filmed, but they show the most interesting person.",
      "question_template": "Lady Glencora gave her blessing that her daughter could court [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Ed becomes disheartened by the fact that the producers want him to stay on longer",
        "- Ed is depressed until he catches a glimpse of Shari",
        "- He chases her for a long time until she stops in the women's bathroom in a movie theater",
        "- Ed vows to find a way to end the show to be with Shari",
        "- The main camera man tells him that all his family are being filmed, but they show the most interesting person"
      ],
      "predicates": [
        "Disheartened(a_1) ::: Ed is disheartened.",
        "Depressed(a_1) ::: Ed is depressed.",
        "WantsToEndShow(a_1) ::: Ed wants to end the show.",
        "With(a_1, a_2) ::: Ed is with Shari.",
        "InBathroom(a_2, b_0) ::: Shari is in the women's bathroom.",
        "Chases(a_1, a_2) ::: Ed chases Shari.",
        "StaysWith(a_2, a_0) ::: Shari stays with her brother.",
        "FamilyFilmed(a_0) ::: Ed's family is being filmed.",
        "InterestingPerson(a_0) ::: The most interesting person is being shown."
      ],
      "premises": [
        "Disheartened(a_1) ∧ Depressed(a_1) ::: Ed becomes disheartened and is depressed after the funeral.",
        "Chases(a_1, a_2) ∧ InBathroom(a_2, b_0) ::: Ed chases Shari until she stops in the women's bathroom.",
        "WantsToEndShow(a_1) ∧ With(a_1, a_2) ::: Ed wants to end the show to be with Shari.",
        "StaysWith(a_2, a_0) ::: Shari is staying with her brother for his birthday.",
        "FamilyFilmed(a_0) ∧ InterestingPerson(a_0) ::: All of Ed's family are being filmed, but they show the most interesting person.",
        "Conclusion:",
        "WantsToEndShow(a_1) ::: Ed wants to end the show to be with Shari."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 758,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 5,
      "paragraph": "Ed gets an idea on how to stop the main producer from showing the show: he says that he will give $10,000 to the person who can give him the best amount of \"dirt\" on the producers and that he will announce it live, with the desired result being they stop airing the show before he can make the announcement. As Cynthia feels sorry for Ed, she tells him a secret of the main producer. Ed announces the secret (that the man has to pump a liquid into his penis to get an erection) but before he can announce who it is they stop airing the show.",
      "question_template": "Lady Glencora gave her blessing that her daughter could court [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Ed gets an idea on how to stop the main producer from showing the show",
        "- He says that he will give $10,000 to the person who can give him the best amount of \"dirt\" on the producers",
        "- He will announce it live, with the desired result being they stop airing the show before he can make the announcement",
        "- Cynthia tells him a secret of the main producer",
        "- Ed announces the secret"
      ],
      "predicates": [
        "Gives(x, y, z) ::: x gives y to z.",
        "BestDirt(x, y) ::: x provides the best amount of \"dirt\" on y.",
        "Announces(x, y) ::: x announces y.",
        "FeelsSorryFor(x, y) ::: x feels sorry for y.",
        "Secret(x, y) ::: x is a secret of y.",
        "StopsAiring(x) ::: x stops airing the show.",
        "LiquidPump(x) ::: x pumps a liquid into his penis to get an erection."
      ],
      "premises": [
        "Gives(a_1, 10000, a_0) ::: Ed offers $10,000 to the person who can give him the best amount of \"dirt\" on the producers.",
        "BestDirt(a_0, producers) ::: The person provides the best amount of \"dirt\" on the producers.",
        "Announces(a_1, secret) ::: Ed announces the secret.",
        "FeelsSorryFor(a_2, a_1) ::: Cynthia feels sorry for Ed.",
        "Secret(secret, a_2) ::: The secret is that the main producer has to pump a liquid into his penis to get an erection.",
        "StopsAiring(show) ::: They stop airing the show before Ed can announce who it is.",
        "Conclusion:",
        "¬Announces(a_1, whoItIs) ::: Ed does not announce who it is before they stop airing the show."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "759": [
    {
      "id": 759,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 1,
      "paragraph": "However, Ed TV suddenly gets interesting on Day 3 when Ed visits Ray. Ed (along with the cameramen) discovers that Ray is cheating on his girlfriend Shari (Jenna Elfman). Ed then visits Shari to apologize to her for Ray's actions. Shari is very drunk and starts insulting Ray, by talking to the camera. She makes everyone laugh and gasp by saying \"Ray was a bad lay.\" Ed tries to comfort Shari, and he reveals he has feelings for her. She then reveals she has feelings for Ed as well. They slowly move their faces closer and finally kiss each other. Ed then locks out the camera crew and proceeds to passionately kiss Shari for a while. Ed TV suddenly becomes extremely popular. On Cynthia's insistence, Ed starts a relationship with Shari, which is short lived as Ed grows more interested in staying on TV and Shari is abused by viewers who find her unappealing.",
      "question_template": "Mrs. Finn insists that the Duke of Omnium must be told of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- He reveals he has feelings for her.",
        "- Ed starts a relationship with Shari.",
        "- Ed grows more interested in staying on TV."
      ],
      "predicates": [
        "Popular(x) ::: x is extremely popular.",
        "InRelationship(x, y) ::: x is in a relationship with y.",
        "Cheating(x, y) ::: x is cheating on y.",
        "Insulting(x, y) ::: x is insulting y.",
        "Comfort(x, y) ::: x is comforting y.",
        "HasFeelingsFor(x, y) ::: x has feelings for y.",
        "Kiss(x, y) ::: x kisses y.",
        "LocksOut(x, y) ::: x locks out y.",
        "ShortLived(x, y) ::: x and y's relationship is short-lived.",
        "GrowingInterest(x, y) ::: x is growing more interested in y.",
        "Unappealing(x) ::: x is perceived as unappealing by viewers."
      ],
      "premises": [
        "Cheating(ray, shari) ::: Ray is cheating on his girlfriend Shari.",
        "Insulting(shari, ray) ::: Shari is insulting Ray.",
        "Comfort(ed, shari) ::: Ed tries to comfort Shari.",
        "HasFeelingsFor(ed, shari) ::: Ed reveals he has feelings for Shari.",
        "HasFeelingsFor(shari, ed) ::: Shari reveals she has feelings for Ed.",
        "Kiss(ed, shari) ::: Ed and Shari kiss each other.",
        "LocksOut(ed, cameramen) ::: Ed locks out the camera crew.",
        "Popular(edTV) ::: Ed TV suddenly becomes extremely popular.",
        "InRelationship(ed, shari) ::: Ed starts a relationship with Shari.",
        "ShortLived(ed, shari) ::: Ed and Shari's relationship is short-lived.",
        "GrowingInterest(ed, stayingOnTV) ::: Ed grows more interested in staying on TV.",
        "Unappealing(shari) ::: Shari is perceived as unappealing by viewers."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 759,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 2,
      "paragraph": "Ed then goes on The Tonight Show with Jay Leno and meets beautiful model/actress Jill (Elizabeth Hurley) who takes a liking to Ed. Ed then visits Shari and she tells Ed that she does not want to be with him until the Show stops airing. She then leaves town. Ed goes to the park with Ray and some friends to play football when Jill comes to talk to him, because Cynthia brought her in to earn more ratings. She invites Ed to dinner at her house. When he arrives at Jill's house, there is a massive crowd. They have a small talk, and then they kiss on top of a table. They are about to have sex, but then Ed falls off the table and squishes Jill's cat. Ed never sees Jill again.",
      "question_template": "Mrs. Finn insists that the Duke of Omnium must be told of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Shari tells Ed that she does not want to be with him until the Show stops airing.",
        "Ed goes to the park with Ray and some friends to play football when Jill comes to talk to him.",
        "They have a small talk, and then they kiss on top of a table."
      ],
      "predicates": [
        "GoesOnShow(x, y) ::: x goes on the show y.",
        "Meets(x, y) ::: x meets y.",
        "Likes(x, y) ::: x takes a liking to y.",
        "WantsToBeWith(x, y) ::: x wants to be with y.",
        "LeavesTown(x) ::: x leaves town.",
        "PlaysFootball(x) ::: x plays football.",
        "Invites(x, y) ::: x invites y to dinner.",
        "Kisses(x, y) ::: x kisses y.",
        "FallsOffTable(x) ::: x falls off the table.",
        "Squishes(x, y) ::: x squishes y.",
        "NeverSees(x, y) ::: x never sees y again."
      ],
      "premises": [
        "GoesOnShow(a_1, \"The Tonight Show with Jay Leno\") ::: Ed goes on The Tonight Show with Jay Leno.",
        "Meets(a_1, a_2) ::: Ed meets beautiful model/actress Jill (Elizabeth Hurley).",
        "Likes(a_2, a_1) ::: Jill takes a liking to Ed.",
        "WantsToBeWith(a_2, a_1) ::: Shari tells Ed that she does not want to be with him until the Show stops airing.",
        "LeavesTown(a_2) ::: Shari leaves town.",
        "PlaysFootball(a_1) ::: Ed goes to the park with Ray and some friends to play football.",
        "Invites(a_2, a_1) ::: Jill invites Ed to dinner at her house.",
        "FallsOffTable(a_1) ::: Ed falls off the table.",
        "Squishes(a_1, \"Jill's cat\") ::: Ed squishes Jill's cat.",
        "NeverSees(a_1, a_2) ::: Ed never sees Jill again.",
        "¬(Likes(a_1, a_2)) ::: Ed does not have a relationship with Jill after the incident."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 759,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 4,
      "paragraph": "After the funeral, Ed becomes disheartened by the fact that the producers want him to stay on longer and that he cannot do anything to change their minds or he would be in breach of his contract. Ed is depressed until he catches a glimpse of Shari (in disguise wearing a wig and sunglasses). He chases her for a long time until she stops in the women's bathroom in a movie theater. She says she is staying with her brother as it is his birthday and she just wanted to see Ed. Ed vows to find a way to end the show to be with Shari. When Ed exits, one camera man stays with Shari saying that it is the producers' new idea. The main camera man tells him that all his family are being filmed, but they show the most interesting person.",
      "question_template": "Mrs. Finn insists that the Duke of Omnium must be told of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Ed becomes disheartened",
        "- Ed is depressed",
        "- Ed vows to find a way to end the show to be with Shari"
      ],
      "predicates": [
        "Disheartened(a_1) ::: Ed is disheartened.",
        "Depressed(a_1) ::: Ed is depressed.",
        "WantsToEndShow(a_1) ::: Ed wants to end the show.",
        "With(a_1, a_2) ::: Ed is with Shari.",
        "InBathroom(a_2, b_0) ::: Shari is in the women's bathroom.",
        "Chases(a_1, a_2) ::: Ed chases Shari.",
        "StaysWith(a_2, a_0) ::: Shari stays with her brother.",
        "FamilyFilmed(a_0) ::: Ed's family is being filmed.",
        "InterestingPerson(a_0) ::: The most interesting person is being shown."
      ],
      "premises": [
        "Disheartened(a_1) ∧ Depressed(a_1) ::: Ed becomes disheartened and is depressed after the funeral.",
        "Chases(a_1, a_2) ∧ InBathroom(a_2, b_0) ::: Ed chases Shari until she stops in the women's bathroom.",
        "WantsToEndShow(a_1) ∧ With(a_1, a_2) ::: Ed wants to end the show to be with Shari.",
        "StaysWith(a_2, a_0) ::: Shari is staying with her brother for his birthday.",
        "FamilyFilmed(a_0) ∧ InterestingPerson(a_0) ::: All of Ed's family are being filmed, but they show the most interesting person.",
        "Conclusion:",
        "WantsToEndShow(a_1) ::: Ed wants to end the show to be with Shari."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 759,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 6,
      "paragraph": "After the camera crew finally leaves Ed's apartment, he and Shari renew their relationship and celebrate the fact that TV news panelists predict Ed will be forgotten in a short period of time.",
      "question_template": "Mrs. Finn insists that the Duke of Omnium must be told of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "He and Shari renew their relationship"
      ],
      "predicates": [
        "RenewRelationship(x, y) ::: x and y renew their relationship.",
        "Celebrate(x) ::: x celebrates something.",
        "Predict(x, y) ::: x predicts y.",
        "Forgotten(x) ::: x is forgotten."
      ],
      "premises": [
        "RenewRelationship(a_1, a_2) ::: Ed and Shari renew their relationship.",
        "Celebrate(a_1) ::: Ed celebrates the fact that TV news panelists predict Ed will be forgotten in a short period of time.",
        "Predict(c, Forgotten(a_1)) ::: TV news panelists predict that Ed will be forgotten."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "760": [
    {
      "id": 760,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 0,
      "paragraph": " EDtv starts off with the television channel True TV commencing interviews for a TV show that shows a normal person's life 24/7. This idea was thought up by a TV producer named Cynthia (Ellen DeGeneres). They interview Ed Pekurny (Matthew McConaughey) and his brother, Ray (Woody Harrelson). When the producers see the interview Cynthia decides to use Ed and interviews only Ed. So now they start airing the show, which they call Ed TV. The show is a total failure at first, as only boring things happen and the main producers want to pull the plug, except for Cynthia.",
      "question_template": "[[CANDIDATE_ANSWER]] wished that Lord Silverbridge enter parliament.",
      "candidate_answers": [
        "Cynthia decides to use Ed and interviews only Ed",
        "The show is a total failure at first, as only boring things happen"
      ],
      "predicates": [
        "Producer(x) ::: x is a TV producer.",
        "Interview(x, y) ::: x interviews y.",
        "Airing(x) ::: x is airing a show.",
        "Failure(x) ::: x is a total failure.",
        "BelievesIn(x, y) ::: x believes in the potential of y.",
        "Show(x) ::: x is a TV show.",
        "NormalPerson(x) ::: x is a normal person.",
        "BoringThings(x) ::: x involves boring things."
      ],
      "premises": [
        "Producer(cynthia) ::: Cynthia is a TV producer.",
        "Interview(cynthia, ed) ::: Cynthia interviews Ed Pekurny.",
        "Airing(edTV) ::: They start airing the show, which they call Ed TV.",
        "Failure(edTV) ::: The show is a total failure at first.",
        "BelievesIn(cynthia, edTV) ::: Cynthia believes in the potential of Ed TV despite its initial failure.",
        "NormalPerson(ed) ::: Ed Pekurny is a normal person.",
        "BoringThings(edTV) ::: Ed TV involves boring things.",
        "Conclusion:",
        "¬Failure(edTV) ::: Ed TV is not a total failure in the long run due to Cynthia's belief in its potential."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "761": [
    {
      "id": 761,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 1,
      "paragraph": "However, Ed TV suddenly gets interesting on Day 3 when Ed visits Ray. Ed (along with the cameramen) discovers that Ray is cheating on his girlfriend Shari (Jenna Elfman). Ed then visits Shari to apologize to her for Ray's actions. Shari is very drunk and starts insulting Ray, by talking to the camera. She makes everyone laugh and gasp by saying \"Ray was a bad lay.\" Ed tries to comfort Shari, and he reveals he has feelings for her. She then reveals she has feelings for Ed as well. They slowly move their faces closer and finally kiss each other. Ed then locks out the camera crew and proceeds to passionately kiss Shari for a while. Ed TV suddenly becomes extremely popular. On Cynthia's insistence, Ed starts a relationship with Shari, which is short lived as Ed grows more interested in staying on TV and Shari is abused by viewers who find her unappealing.",
      "question_template": "[[CANDIDATE_ANSWER]] refused Lord Silverbridge's proposal.",
      "candidate_answers": [
        "Shari is abused by viewers who find her unappealing."
      ],
      "predicates": [
        "Popular(x) ::: x is extremely popular.",
        "InRelationship(x, y) ::: x is in a relationship with y.",
        "Cheating(x, y) ::: x is cheating on y.",
        "Insulting(x, y) ::: x is insulting y.",
        "Comfort(x, y) ::: x is comforting y.",
        "HasFeelingsFor(x, y) ::: x has feelings for y.",
        "Kiss(x, y) ::: x kisses y.",
        "LocksOut(x, y) ::: x locks out y.",
        "ShortLived(x, y) ::: x and y's relationship is short-lived.",
        "GrowingInterest(x, y) ::: x is growing more interested in y.",
        "Unappealing(x) ::: x is perceived as unappealing by viewers."
      ],
      "premises": [
        "Cheating(ray, shari) ::: Ray is cheating on his girlfriend Shari.",
        "Insulting(shari, ray) ::: Shari is insulting Ray.",
        "Comfort(ed, shari) ::: Ed tries to comfort Shari.",
        "HasFeelingsFor(ed, shari) ::: Ed reveals he has feelings for Shari.",
        "HasFeelingsFor(shari, ed) ::: Shari reveals she has feelings for Ed.",
        "Kiss(ed, shari) ::: Ed and Shari kiss each other.",
        "LocksOut(ed, cameramen) ::: Ed locks out the camera crew.",
        "Popular(edTV) ::: Ed TV suddenly becomes extremely popular.",
        "InRelationship(ed, shari) ::: Ed starts a relationship with Shari.",
        "ShortLived(ed, shari) ::: Ed and Shari's relationship is short-lived.",
        "GrowingInterest(ed, stayingOnTV) ::: Ed grows more interested in staying on TV.",
        "Unappealing(shari) ::: Shari is perceived as unappealing by viewers."
      ],
      "conclusions": [
        "Unappealing(shari) → AbusedByViewers(shari)"
      ]
    },
    {
      "id": 761,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 2,
      "paragraph": "Ed then goes on The Tonight Show with Jay Leno and meets beautiful model/actress Jill (Elizabeth Hurley) who takes a liking to Ed. Ed then visits Shari and she tells Ed that she does not want to be with him until the Show stops airing. She then leaves town. Ed goes to the park with Ray and some friends to play football when Jill comes to talk to him, because Cynthia brought her in to earn more ratings. She invites Ed to dinner at her house. When he arrives at Jill's house, there is a massive crowd. They have a small talk, and then they kiss on top of a table. They are about to have sex, but then Ed falls off the table and squishes Jill's cat. Ed never sees Jill again.",
      "question_template": "[[CANDIDATE_ANSWER]] refused Lord Silverbridge's proposal.",
      "candidate_answers": [
        "She does not want to be with him until the Show stops airing."
      ],
      "predicates": [
        "GoesOnShow(x, y) ::: x goes on the show y.",
        "Meets(x, y) ::: x meets y.",
        "Likes(x, y) ::: x takes a liking to y.",
        "WantsToBeWith(x, y) ::: x wants to be with y.",
        "LeavesTown(x) ::: x leaves town.",
        "PlaysFootball(x) ::: x plays football.",
        "Invites(x, y) ::: x invites y to dinner.",
        "Kisses(x, y) ::: x kisses y.",
        "FallsOffTable(x) ::: x falls off the table.",
        "Squishes(x, y) ::: x squishes y.",
        "NeverSees(x, y) ::: x never sees y again."
      ],
      "premises": [
        "GoesOnShow(a_1, \"The Tonight Show with Jay Leno\") ::: Ed goes on The Tonight Show with Jay Leno.",
        "Meets(a_1, a_2) ::: Ed meets beautiful model/actress Jill (Elizabeth Hurley).",
        "Likes(a_2, a_1) ::: Jill takes a liking to Ed.",
        "WantsToBeWith(a_2, a_1) ::: Shari tells Ed that she does not want to be with him until the Show stops airing.",
        "LeavesTown(a_2) ::: Shari leaves town.",
        "PlaysFootball(a_1) ::: Ed goes to the park with Ray and some friends to play football.",
        "Invites(a_2, a_1) ::: Jill invites Ed to dinner at her house.",
        "FallsOffTable(a_1) ::: Ed falls off the table.",
        "Squishes(a_1, \"Jill's cat\") ::: Ed squishes Jill's cat.",
        "NeverSees(a_1, a_2) ::: Ed never sees Jill again.",
        "¬(Likes(a_1, a_2)) ::: Ed does not have a relationship with Jill after the incident."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 761,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 3,
      "paragraph": "Ed's father (Dennis Hopper), who abandoned his family when Ed was 13, unexpectedly visits Ed and informs him that he left because Ed's mother was having an affair with Ed's current stepfather, Al (Martin Landau). Ed is furious with his mother and argues with her. Next, Ed gets a phone call telling him to come to the hospital. The doctor says that his father is dead and that he died making love to his wife. Ed thinks this means Al, but it actually is his real father and that Ed's mother was cheating on Al.",
      "question_template": "[[CANDIDATE_ANSWER]] refused Lord Silverbridge's proposal.",
      "candidate_answers": [
        "Ed's mother was having an affair with Ed's current stepfather, Al"
      ],
      "predicates": [
        "Abandoned(a_1) ::: Ed's father abandoned his family.",
        "Visited(a_1, a_0) ::: Ed's father unexpectedly visits Ed.",
        "Informed(a_1, a_2) ::: Ed's father informs Ed about the affair.",
        "Furious(a_1, a_2) ::: Ed is furious with his mother.",
        "Argued(a_1, a_2) ::: Ed argues with his mother.",
        "Called(a_1, b_0) ::: Ed receives a phone call telling him to come to the hospital.",
        "Dead(a_1) ::: Ed's father is dead.",
        "DiedMakingLove(a_1) ::: Ed's father died making love to his wife.",
        "Cheating(a_2, a_0) ::: Ed's mother was cheating on Al."
      ],
      "premises": [
        "Abandoned(dennis) ::: Ed's father (Dennis Hopper) abandoned his family when Ed was 13.",
        "Visited(dennis, ed) ::: Dennis Hopper unexpectedly visits Ed.",
        "Informed(dennis, shari) ::: Dennis Hopper informs Ed that he left because Shari was having an affair with Al.",
        "Furious(ed, shari) ::: Ed is furious with his mother.",
        "Argued(ed, shari) ::: Ed argues with his mother.",
        "Called(ed, hospital) ::: Ed gets a phone call telling him to come to the hospital.",
        "Dead(dennis) ::: The doctor says that Ed's father is dead.",
        "DiedMakingLove(dennis) ::: Ed's father died making love to his wife.",
        "Cheating(shari, dennis) ::: Ed's mother had an affair with Dennis Hopper while married to Al.",
        "¬(DiedMakingLove(dennis) ∧ Cheating(shari, al)) ::: Ed's perception of the situation is incorrect regarding who died."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "762": [
    {
      "id": 762,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 0,
      "paragraph": " EDtv starts off with the television channel True TV commencing interviews for a TV show that shows a normal person's life 24/7. This idea was thought up by a TV producer named Cynthia (Ellen DeGeneres). They interview Ed Pekurny (Matthew McConaughey) and his brother, Ray (Woody Harrelson). When the producers see the interview Cynthia decides to use Ed and interviews only Ed. So now they start airing the show, which they call Ed TV. The show is a total failure at first, as only boring things happen and the main producers want to pull the plug, except for Cynthia.",
      "question_template": "Lord Silverbridge fell in love with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Cynthia",
        "His brother, Ray"
      ],
      "predicates": [
        "Producer(x) ::: x is a TV producer.",
        "Interview(x, y) ::: x interviews y.",
        "Airing(x) ::: x is airing a show.",
        "Failure(x) ::: x is a total failure.",
        "BelievesIn(x, y) ::: x believes in the potential of y.",
        "Show(x) ::: x is a TV show.",
        "NormalPerson(x) ::: x is a normal person.",
        "BoringThings(x) ::: x involves boring things."
      ],
      "premises": [
        "Producer(cynthia) ::: Cynthia is a TV producer.",
        "Interview(cynthia, ed) ::: Cynthia interviews Ed Pekurny.",
        "Airing(edTV) ::: They start airing the show, which they call Ed TV.",
        "Failure(edTV) ::: The show is a total failure at first.",
        "BelievesIn(cynthia, edTV) ::: Cynthia believes in the potential of Ed TV despite its initial failure.",
        "NormalPerson(ed) ::: Ed Pekurny is a normal person.",
        "BoringThings(edTV) ::: Ed TV involves boring things.",
        "Conclusion:",
        "¬Failure(edTV) ::: Ed TV is not a total failure in the long run due to Cynthia's belief in its potential."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 762,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 1,
      "paragraph": "However, Ed TV suddenly gets interesting on Day 3 when Ed visits Ray. Ed (along with the cameramen) discovers that Ray is cheating on his girlfriend Shari (Jenna Elfman). Ed then visits Shari to apologize to her for Ray's actions. Shari is very drunk and starts insulting Ray, by talking to the camera. She makes everyone laugh and gasp by saying \"Ray was a bad lay.\" Ed tries to comfort Shari, and he reveals he has feelings for her. She then reveals she has feelings for Ed as well. They slowly move their faces closer and finally kiss each other. Ed then locks out the camera crew and proceeds to passionately kiss Shari for a while. Ed TV suddenly becomes extremely popular. On Cynthia's insistence, Ed starts a relationship with Shari, which is short lived as Ed grows more interested in staying on TV and Shari is abused by viewers who find her unappealing.",
      "question_template": "Lord Silverbridge fell in love with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Cynthia's insistence"
      ],
      "predicates": [
        "Popular(x) ::: x is extremely popular.",
        "InRelationship(x, y) ::: x is in a relationship with y.",
        "Cheating(x, y) ::: x is cheating on y.",
        "Insulting(x, y) ::: x is insulting y.",
        "Comfort(x, y) ::: x is comforting y.",
        "HasFeelingsFor(x, y) ::: x has feelings for y.",
        "Kiss(x, y) ::: x kisses y.",
        "LocksOut(x, y) ::: x locks out y.",
        "ShortLived(x, y) ::: x and y's relationship is short-lived.",
        "GrowingInterest(x, y) ::: x is growing more interested in y.",
        "Unappealing(x) ::: x is perceived as unappealing by viewers."
      ],
      "premises": [
        "Cheating(ray, shari) ::: Ray is cheating on his girlfriend Shari.",
        "Insulting(shari, ray) ::: Shari is insulting Ray.",
        "Comfort(ed, shari) ::: Ed tries to comfort Shari.",
        "HasFeelingsFor(ed, shari) ::: Ed reveals he has feelings for Shari.",
        "HasFeelingsFor(shari, ed) ::: Shari reveals she has feelings for Ed.",
        "Kiss(ed, shari) ::: Ed and Shari kiss each other.",
        "LocksOut(ed, cameramen) ::: Ed locks out the camera crew.",
        "Popular(edTV) ::: Ed TV suddenly becomes extremely popular.",
        "InRelationship(ed, shari) ::: Ed starts a relationship with Shari.",
        "ShortLived(ed, shari) ::: Ed and Shari's relationship is short-lived.",
        "GrowingInterest(ed, stayingOnTV) ::: Ed grows more interested in staying on TV.",
        "Unappealing(shari) ::: Shari is perceived as unappealing by viewers."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 762,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 2,
      "paragraph": "Ed then goes on The Tonight Show with Jay Leno and meets beautiful model/actress Jill (Elizabeth Hurley) who takes a liking to Ed. Ed then visits Shari and she tells Ed that she does not want to be with him until the Show stops airing. She then leaves town. Ed goes to the park with Ray and some friends to play football when Jill comes to talk to him, because Cynthia brought her in to earn more ratings. She invites Ed to dinner at her house. When he arrives at Jill's house, there is a massive crowd. They have a small talk, and then they kiss on top of a table. They are about to have sex, but then Ed falls off the table and squishes Jill's cat. Ed never sees Jill again.",
      "question_template": "Lord Silverbridge fell in love with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Cynthia",
        "Jill"
      ],
      "predicates": [
        "GoesOnShow(x, y) ::: x goes on the show y.",
        "Meets(x, y) ::: x meets y.",
        "Likes(x, y) ::: x takes a liking to y.",
        "WantsToBeWith(x, y) ::: x wants to be with y.",
        "LeavesTown(x) ::: x leaves town.",
        "PlaysFootball(x) ::: x plays football.",
        "Invites(x, y) ::: x invites y to dinner.",
        "Kisses(x, y) ::: x kisses y.",
        "FallsOffTable(x) ::: x falls off the table.",
        "Squishes(x, y) ::: x squishes y.",
        "NeverSees(x, y) ::: x never sees y again."
      ],
      "premises": [
        "GoesOnShow(a_1, \"The Tonight Show with Jay Leno\") ::: Ed goes on The Tonight Show with Jay Leno.",
        "Meets(a_1, a_2) ::: Ed meets beautiful model/actress Jill (Elizabeth Hurley).",
        "Likes(a_2, a_1) ::: Jill takes a liking to Ed.",
        "WantsToBeWith(a_2, a_1) ::: Shari tells Ed that she does not want to be with him until the Show stops airing.",
        "LeavesTown(a_2) ::: Shari leaves town.",
        "PlaysFootball(a_1) ::: Ed goes to the park with Ray and some friends to play football.",
        "Invites(a_2, a_1) ::: Jill invites Ed to dinner at her house.",
        "FallsOffTable(a_1) ::: Ed falls off the table.",
        "Squishes(a_1, \"Jill's cat\") ::: Ed squishes Jill's cat.",
        "NeverSees(a_1, a_2) ::: Ed never sees Jill again.",
        "¬(Likes(a_1, a_2)) ::: Ed does not have a relationship with Jill after the incident."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 762,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 4,
      "paragraph": "After the funeral, Ed becomes disheartened by the fact that the producers want him to stay on longer and that he cannot do anything to change their minds or he would be in breach of his contract. Ed is depressed until he catches a glimpse of Shari (in disguise wearing a wig and sunglasses). He chases her for a long time until she stops in the women's bathroom in a movie theater. She says she is staying with her brother as it is his birthday and she just wanted to see Ed. Ed vows to find a way to end the show to be with Shari. When Ed exits, one camera man stays with Shari saying that it is the producers' new idea. The main camera man tells him that all his family are being filmed, but they show the most interesting person.",
      "question_template": "Lord Silverbridge fell in love with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The producers",
        "The main camera man"
      ],
      "predicates": [
        "Disheartened(a_1) ::: Ed is disheartened.",
        "Depressed(a_1) ::: Ed is depressed.",
        "WantsToEndShow(a_1) ::: Ed wants to end the show.",
        "With(a_1, a_2) ::: Ed is with Shari.",
        "InBathroom(a_2, b_0) ::: Shari is in the women's bathroom.",
        "Chases(a_1, a_2) ::: Ed chases Shari.",
        "StaysWith(a_2, a_0) ::: Shari stays with her brother.",
        "FamilyFilmed(a_0) ::: Ed's family is being filmed.",
        "InterestingPerson(a_0) ::: The most interesting person is being shown."
      ],
      "premises": [
        "Disheartened(a_1) ∧ Depressed(a_1) ::: Ed becomes disheartened and is depressed after the funeral.",
        "Chases(a_1, a_2) ∧ InBathroom(a_2, b_0) ::: Ed chases Shari until she stops in the women's bathroom.",
        "WantsToEndShow(a_1) ∧ With(a_1, a_2) ::: Ed wants to end the show to be with Shari.",
        "StaysWith(a_2, a_0) ::: Shari is staying with her brother for his birthday.",
        "FamilyFilmed(a_0) ∧ InterestingPerson(a_0) ::: All of Ed's family are being filmed, but they show the most interesting person.",
        "Conclusion:",
        "WantsToEndShow(a_1) ::: Ed wants to end the show to be with Shari."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 762,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 6,
      "paragraph": "After the camera crew finally leaves Ed's apartment, he and Shari renew their relationship and celebrate the fact that TV news panelists predict Ed will be forgotten in a short period of time.",
      "question_template": "Lord Silverbridge fell in love with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Ed's apartment",
        "Shari",
        "TV news panelists"
      ],
      "predicates": [
        "RenewRelationship(x, y) ::: x and y renew their relationship.",
        "Celebrate(x) ::: x celebrates something.",
        "Predict(x, y) ::: x predicts y.",
        "Forgotten(x) ::: x is forgotten."
      ],
      "premises": [
        "RenewRelationship(a_1, a_2) ::: Ed and Shari renew their relationship.",
        "Celebrate(a_1) ::: Ed celebrates the fact that TV news panelists predict Ed will be forgotten in a short period of time.",
        "Predict(c, Forgotten(a_1)) ::: TV news panelists predict that Ed will be forgotten."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "763": [
    {
      "id": 763,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 0,
      "paragraph": " EDtv starts off with the television channel True TV commencing interviews for a TV show that shows a normal person's life 24/7. This idea was thought up by a TV producer named Cynthia (Ellen DeGeneres). They interview Ed Pekurny (Matthew McConaughey) and his brother, Ray (Woody Harrelson). When the producers see the interview Cynthia decides to use Ed and interviews only Ed. So now they start airing the show, which they call Ed TV. The show is a total failure at first, as only boring things happen and the main producers want to pull the plug, except for Cynthia.",
      "question_template": "Gerald got expelled from Cambridge because of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Ed TV"
      ],
      "predicates": [
        "Producer(x) ::: x is a TV producer.",
        "Interview(x, y) ::: x interviews y.",
        "Airing(x) ::: x is airing a show.",
        "Failure(x) ::: x is a total failure.",
        "BelievesIn(x, y) ::: x believes in the potential of y.",
        "Show(x) ::: x is a TV show.",
        "NormalPerson(x) ::: x is a normal person.",
        "BoringThings(x) ::: x involves boring things."
      ],
      "premises": [
        "Producer(cynthia) ::: Cynthia is a TV producer.",
        "Interview(cynthia, ed) ::: Cynthia interviews Ed Pekurny.",
        "Airing(edTV) ::: They start airing the show, which they call Ed TV.",
        "Failure(edTV) ::: The show is a total failure at first.",
        "BelievesIn(cynthia, edTV) ::: Cynthia believes in the potential of Ed TV despite its initial failure.",
        "NormalPerson(ed) ::: Ed Pekurny is a normal person.",
        "BoringThings(edTV) ::: Ed TV involves boring things.",
        "Conclusion:",
        "¬Failure(edTV) ::: Ed TV is not a total failure in the long run due to Cynthia's belief in its potential."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 763,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 1,
      "paragraph": "However, Ed TV suddenly gets interesting on Day 3 when Ed visits Ray. Ed (along with the cameramen) discovers that Ray is cheating on his girlfriend Shari (Jenna Elfman). Ed then visits Shari to apologize to her for Ray's actions. Shari is very drunk and starts insulting Ray, by talking to the camera. She makes everyone laugh and gasp by saying \"Ray was a bad lay.\" Ed tries to comfort Shari, and he reveals he has feelings for her. She then reveals she has feelings for Ed as well. They slowly move their faces closer and finally kiss each other. Ed then locks out the camera crew and proceeds to passionately kiss Shari for a while. Ed TV suddenly becomes extremely popular. On Cynthia's insistence, Ed starts a relationship with Shari, which is short lived as Ed grows more interested in staying on TV and Shari is abused by viewers who find her unappealing.",
      "question_template": "Gerald got expelled from Cambridge because of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Ed TV"
      ],
      "predicates": [
        "Popular(x) ::: x is extremely popular.",
        "InRelationship(x, y) ::: x is in a relationship with y.",
        "Cheating(x, y) ::: x is cheating on y.",
        "Insulting(x, y) ::: x is insulting y.",
        "Comfort(x, y) ::: x is comforting y.",
        "HasFeelingsFor(x, y) ::: x has feelings for y.",
        "Kiss(x, y) ::: x kisses y.",
        "LocksOut(x, y) ::: x locks out y.",
        "ShortLived(x, y) ::: x and y's relationship is short-lived.",
        "GrowingInterest(x, y) ::: x is growing more interested in y.",
        "Unappealing(x) ::: x is perceived as unappealing by viewers."
      ],
      "premises": [
        "Cheating(ray, shari) ::: Ray is cheating on his girlfriend Shari.",
        "Insulting(shari, ray) ::: Shari is insulting Ray.",
        "Comfort(ed, shari) ::: Ed tries to comfort Shari.",
        "HasFeelingsFor(ed, shari) ::: Ed reveals he has feelings for Shari.",
        "HasFeelingsFor(shari, ed) ::: Shari reveals she has feelings for Ed.",
        "Kiss(ed, shari) ::: Ed and Shari kiss each other.",
        "LocksOut(ed, cameramen) ::: Ed locks out the camera crew.",
        "Popular(edTV) ::: Ed TV suddenly becomes extremely popular.",
        "InRelationship(ed, shari) ::: Ed starts a relationship with Shari.",
        "ShortLived(ed, shari) ::: Ed and Shari's relationship is short-lived.",
        "GrowingInterest(ed, stayingOnTV) ::: Ed grows more interested in staying on TV.",
        "Unappealing(shari) ::: Shari is perceived as unappealing by viewers."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 763,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 2,
      "paragraph": "Ed then goes on The Tonight Show with Jay Leno and meets beautiful model/actress Jill (Elizabeth Hurley) who takes a liking to Ed. Ed then visits Shari and she tells Ed that she does not want to be with him until the Show stops airing. She then leaves town. Ed goes to the park with Ray and some friends to play football when Jill comes to talk to him, because Cynthia brought her in to earn more ratings. She invites Ed to dinner at her house. When he arrives at Jill's house, there is a massive crowd. They have a small talk, and then they kiss on top of a table. They are about to have sex, but then Ed falls off the table and squishes Jill's cat. Ed never sees Jill again.",
      "question_template": "Gerald got expelled from Cambridge because of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The Tonight Show with Jay Leno"
      ],
      "predicates": [
        "GoesOnShow(x, y) ::: x goes on the show y.",
        "Meets(x, y) ::: x meets y.",
        "Likes(x, y) ::: x takes a liking to y.",
        "WantsToBeWith(x, y) ::: x wants to be with y.",
        "LeavesTown(x) ::: x leaves town.",
        "PlaysFootball(x) ::: x plays football.",
        "Invites(x, y) ::: x invites y to dinner.",
        "Kisses(x, y) ::: x kisses y.",
        "FallsOffTable(x) ::: x falls off the table.",
        "Squishes(x, y) ::: x squishes y.",
        "NeverSees(x, y) ::: x never sees y again."
      ],
      "premises": [
        "GoesOnShow(a_1, \"The Tonight Show with Jay Leno\") ::: Ed goes on The Tonight Show with Jay Leno.",
        "Meets(a_1, a_2) ::: Ed meets beautiful model/actress Jill (Elizabeth Hurley).",
        "Likes(a_2, a_1) ::: Jill takes a liking to Ed.",
        "WantsToBeWith(a_2, a_1) ::: Shari tells Ed that she does not want to be with him until the Show stops airing.",
        "LeavesTown(a_2) ::: Shari leaves town.",
        "PlaysFootball(a_1) ::: Ed goes to the park with Ray and some friends to play football.",
        "Invites(a_2, a_1) ::: Jill invites Ed to dinner at her house.",
        "FallsOffTable(a_1) ::: Ed falls off the table.",
        "Squishes(a_1, \"Jill's cat\") ::: Ed squishes Jill's cat.",
        "NeverSees(a_1, a_2) ::: Ed never sees Jill again.",
        "¬(Likes(a_1, a_2)) ::: Ed does not have a relationship with Jill after the incident."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "764": [
    {
      "id": 764,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 2,
      "paragraph": "Ed then goes on The Tonight Show with Jay Leno and meets beautiful model/actress Jill (Elizabeth Hurley) who takes a liking to Ed. Ed then visits Shari and she tells Ed that she does not want to be with him until the Show stops airing. She then leaves town. Ed goes to the park with Ray and some friends to play football when Jill comes to talk to him, because Cynthia brought her in to earn more ratings. She invites Ed to dinner at her house. When he arrives at Jill's house, there is a massive crowd. They have a small talk, and then they kiss on top of a table. They are about to have sex, but then Ed falls off the table and squishes Jill's cat. Ed never sees Jill again.",
      "question_template": "[[CANDIDATE_ANSWER]] dies and leaves the Duke to deal with his children.",
      "candidate_answers": [
        "Jill's cat"
      ],
      "predicates": [
        "GoesOnShow(x, y) ::: x goes on the show y.",
        "Meets(x, y) ::: x meets y.",
        "Likes(x, y) ::: x takes a liking to y.",
        "WantsToBeWith(x, y) ::: x wants to be with y.",
        "LeavesTown(x) ::: x leaves town.",
        "PlaysFootball(x) ::: x plays football.",
        "Invites(x, y) ::: x invites y to dinner.",
        "Kisses(x, y) ::: x kisses y.",
        "FallsOffTable(x) ::: x falls off the table.",
        "Squishes(x, y) ::: x squishes y.",
        "NeverSees(x, y) ::: x never sees y again."
      ],
      "premises": [
        "GoesOnShow(a_1, \"The Tonight Show with Jay Leno\") ::: Ed goes on The Tonight Show with Jay Leno.",
        "Meets(a_1, a_2) ::: Ed meets beautiful model/actress Jill (Elizabeth Hurley).",
        "Likes(a_2, a_1) ::: Jill takes a liking to Ed.",
        "WantsToBeWith(a_2, a_1) ::: Shari tells Ed that she does not want to be with him until the Show stops airing.",
        "LeavesTown(a_2) ::: Shari leaves town.",
        "PlaysFootball(a_1) ::: Ed goes to the park with Ray and some friends to play football.",
        "Invites(a_2, a_1) ::: Jill invites Ed to dinner at her house.",
        "FallsOffTable(a_1) ::: Ed falls off the table.",
        "Squishes(a_1, \"Jill's cat\") ::: Ed squishes Jill's cat.",
        "NeverSees(a_1, a_2) ::: Ed never sees Jill again.",
        "¬(Likes(a_1, a_2)) ::: Ed does not have a relationship with Jill after the incident."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "765": [
    {
      "id": 765,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 0,
      "paragraph": " EDtv starts off with the television channel True TV commencing interviews for a TV show that shows a normal person's life 24/7. This idea was thought up by a TV producer named Cynthia (Ellen DeGeneres). They interview Ed Pekurny (Matthew McConaughey) and his brother, Ray (Woody Harrelson). When the producers see the interview Cynthia decides to use Ed and interviews only Ed. So now they start airing the show, which they call Ed TV. The show is a total failure at first, as only boring things happen and the main producers want to pull the plug, except for Cynthia.",
      "question_template": "The government that the Duke is a part of has been affected by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Ray",
        "Cynthia"
      ],
      "predicates": [
        "Producer(x) ::: x is a TV producer.",
        "Interview(x, y) ::: x interviews y.",
        "Airing(x) ::: x is airing a show.",
        "Failure(x) ::: x is a total failure.",
        "BelievesIn(x, y) ::: x believes in the potential of y.",
        "Show(x) ::: x is a TV show.",
        "NormalPerson(x) ::: x is a normal person.",
        "BoringThings(x) ::: x involves boring things."
      ],
      "premises": [
        "Producer(cynthia) ::: Cynthia is a TV producer.",
        "Interview(cynthia, ed) ::: Cynthia interviews Ed Pekurny.",
        "Airing(edTV) ::: They start airing the show, which they call Ed TV.",
        "Failure(edTV) ::: The show is a total failure at first.",
        "BelievesIn(cynthia, edTV) ::: Cynthia believes in the potential of Ed TV despite its initial failure.",
        "NormalPerson(ed) ::: Ed Pekurny is a normal person.",
        "BoringThings(edTV) ::: Ed TV involves boring things.",
        "Conclusion:",
        "¬Failure(edTV) ::: Ed TV is not a total failure in the long run due to Cynthia's belief in its potential."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 765,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 1,
      "paragraph": "However, Ed TV suddenly gets interesting on Day 3 when Ed visits Ray. Ed (along with the cameramen) discovers that Ray is cheating on his girlfriend Shari (Jenna Elfman). Ed then visits Shari to apologize to her for Ray's actions. Shari is very drunk and starts insulting Ray, by talking to the camera. She makes everyone laugh and gasp by saying \"Ray was a bad lay.\" Ed tries to comfort Shari, and he reveals he has feelings for her. She then reveals she has feelings for Ed as well. They slowly move their faces closer and finally kiss each other. Ed then locks out the camera crew and proceeds to passionately kiss Shari for a while. Ed TV suddenly becomes extremely popular. On Cynthia's insistence, Ed starts a relationship with Shari, which is short lived as Ed grows more interested in staying on TV and Shari is abused by viewers who find her unappealing.",
      "question_template": "The government that the Duke is a part of has been affected by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Ray"
      ],
      "predicates": [
        "Popular(x) ::: x is extremely popular.",
        "InRelationship(x, y) ::: x is in a relationship with y.",
        "Cheating(x, y) ::: x is cheating on y.",
        "Insulting(x, y) ::: x is insulting y.",
        "Comfort(x, y) ::: x is comforting y.",
        "HasFeelingsFor(x, y) ::: x has feelings for y.",
        "Kiss(x, y) ::: x kisses y.",
        "LocksOut(x, y) ::: x locks out y.",
        "ShortLived(x, y) ::: x and y's relationship is short-lived.",
        "GrowingInterest(x, y) ::: x is growing more interested in y.",
        "Unappealing(x) ::: x is perceived as unappealing by viewers."
      ],
      "premises": [
        "Cheating(ray, shari) ::: Ray is cheating on his girlfriend Shari.",
        "Insulting(shari, ray) ::: Shari is insulting Ray.",
        "Comfort(ed, shari) ::: Ed tries to comfort Shari.",
        "HasFeelingsFor(ed, shari) ::: Ed reveals he has feelings for Shari.",
        "HasFeelingsFor(shari, ed) ::: Shari reveals she has feelings for Ed.",
        "Kiss(ed, shari) ::: Ed and Shari kiss each other.",
        "LocksOut(ed, cameramen) ::: Ed locks out the camera crew.",
        "Popular(edTV) ::: Ed TV suddenly becomes extremely popular.",
        "InRelationship(ed, shari) ::: Ed starts a relationship with Shari.",
        "ShortLived(ed, shari) ::: Ed and Shari's relationship is short-lived.",
        "GrowingInterest(ed, stayingOnTV) ::: Ed grows more interested in staying on TV.",
        "Unappealing(shari) ::: Shari is perceived as unappealing by viewers."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 765,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 2,
      "paragraph": "Ed then goes on The Tonight Show with Jay Leno and meets beautiful model/actress Jill (Elizabeth Hurley) who takes a liking to Ed. Ed then visits Shari and she tells Ed that she does not want to be with him until the Show stops airing. She then leaves town. Ed goes to the park with Ray and some friends to play football when Jill comes to talk to him, because Cynthia brought her in to earn more ratings. She invites Ed to dinner at her house. When he arrives at Jill's house, there is a massive crowd. They have a small talk, and then they kiss on top of a table. They are about to have sex, but then Ed falls off the table and squishes Jill's cat. Ed never sees Jill again.",
      "question_template": "The government that the Duke is a part of has been affected by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Shari",
        "Cynthia"
      ],
      "predicates": [
        "GoesOnShow(x, y) ::: x goes on the show y.",
        "Meets(x, y) ::: x meets y.",
        "Likes(x, y) ::: x takes a liking to y.",
        "WantsToBeWith(x, y) ::: x wants to be with y.",
        "LeavesTown(x) ::: x leaves town.",
        "PlaysFootball(x) ::: x plays football.",
        "Invites(x, y) ::: x invites y to dinner.",
        "Kisses(x, y) ::: x kisses y.",
        "FallsOffTable(x) ::: x falls off the table.",
        "Squishes(x, y) ::: x squishes y.",
        "NeverSees(x, y) ::: x never sees y again."
      ],
      "premises": [
        "GoesOnShow(a_1, \"The Tonight Show with Jay Leno\") ::: Ed goes on The Tonight Show with Jay Leno.",
        "Meets(a_1, a_2) ::: Ed meets beautiful model/actress Jill (Elizabeth Hurley).",
        "Likes(a_2, a_1) ::: Jill takes a liking to Ed.",
        "WantsToBeWith(a_2, a_1) ::: Shari tells Ed that she does not want to be with him until the Show stops airing.",
        "LeavesTown(a_2) ::: Shari leaves town.",
        "PlaysFootball(a_1) ::: Ed goes to the park with Ray and some friends to play football.",
        "Invites(a_2, a_1) ::: Jill invites Ed to dinner at her house.",
        "FallsOffTable(a_1) ::: Ed falls off the table.",
        "Squishes(a_1, \"Jill's cat\") ::: Ed squishes Jill's cat.",
        "NeverSees(a_1, a_2) ::: Ed never sees Jill again.",
        "¬(Likes(a_1, a_2)) ::: Ed does not have a relationship with Jill after the incident."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 765,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 5,
      "paragraph": "Ed gets an idea on how to stop the main producer from showing the show: he says that he will give $10,000 to the person who can give him the best amount of \"dirt\" on the producers and that he will announce it live, with the desired result being they stop airing the show before he can make the announcement. As Cynthia feels sorry for Ed, she tells him a secret of the main producer. Ed announces the secret (that the man has to pump a liquid into his penis to get an erection) but before he can announce who it is they stop airing the show.",
      "question_template": "The government that the Duke is a part of has been affected by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Cynthia tells him a secret of the main producer",
        "The man has to pump a liquid into his penis to get an erection"
      ],
      "predicates": [
        "Gives(x, y, z) ::: x gives y to z.",
        "BestDirt(x, y) ::: x provides the best amount of \"dirt\" on y.",
        "Announces(x, y) ::: x announces y.",
        "FeelsSorryFor(x, y) ::: x feels sorry for y.",
        "Secret(x, y) ::: x is a secret of y.",
        "StopsAiring(x) ::: x stops airing the show.",
        "LiquidPump(x) ::: x pumps a liquid into his penis to get an erection."
      ],
      "premises": [
        "Gives(a_1, 10000, a_0) ::: Ed offers $10,000 to the person who can give him the best amount of \"dirt\" on the producers.",
        "BestDirt(a_0, producers) ::: The person provides the best amount of \"dirt\" on the producers.",
        "Announces(a_1, secret) ::: Ed announces the secret.",
        "FeelsSorryFor(a_2, a_1) ::: Cynthia feels sorry for Ed.",
        "Secret(secret, a_2) ::: The secret is that the main producer has to pump a liquid into his penis to get an erection.",
        "StopsAiring(show) ::: They stop airing the show before Ed can announce who it is.",
        "Conclusion:",
        "¬Announces(a_1, whoItIs) ::: Ed does not announce who it is before they stop airing the show."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "766": [
    {
      "id": 766,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 5,
      "paragraph": "Ed gets an idea on how to stop the main producer from showing the show: he says that he will give $10,000 to the person who can give him the best amount of \"dirt\" on the producers and that he will announce it live, with the desired result being they stop airing the show before he can make the announcement. As Cynthia feels sorry for Ed, she tells him a secret of the main producer. Ed announces the secret (that the man has to pump a liquid into his penis to get an erection) but before he can announce who it is they stop airing the show.",
      "question_template": "[[CANDIDATE_ANSWER]] is the Duke's older son and heir.",
      "candidate_answers": [
        "No relevant information found in the paragraph."
      ],
      "predicates": [
        "Gives(x, y, z) ::: x gives y to z.",
        "BestDirt(x, y) ::: x provides the best amount of \"dirt\" on y.",
        "Announces(x, y) ::: x announces y.",
        "FeelsSorryFor(x, y) ::: x feels sorry for y.",
        "Secret(x, y) ::: x is a secret of y.",
        "StopsAiring(x) ::: x stops airing the show.",
        "LiquidPump(x) ::: x pumps a liquid into his penis to get an erection."
      ],
      "premises": [
        "Gives(a_1, 10000, a_0) ::: Ed offers $10,000 to the person who can give him the best amount of \"dirt\" on the producers.",
        "BestDirt(a_0, producers) ::: The person provides the best amount of \"dirt\" on the producers.",
        "Announces(a_1, secret) ::: Ed announces the secret.",
        "FeelsSorryFor(a_2, a_1) ::: Cynthia feels sorry for Ed.",
        "Secret(secret, a_2) ::: The secret is that the main producer has to pump a liquid into his penis to get an erection.",
        "StopsAiring(show) ::: They stop airing the show before Ed can announce who it is.",
        "Conclusion:",
        "¬Announces(a_1, whoItIs) ::: Ed does not announce who it is before they stop airing the show."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 766,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 6,
      "paragraph": "After the camera crew finally leaves Ed's apartment, he and Shari renew their relationship and celebrate the fact that TV news panelists predict Ed will be forgotten in a short period of time.",
      "question_template": "[[CANDIDATE_ANSWER]] is the Duke's older son and heir.",
      "candidate_answers": [
        "He and Shari renew their relationship",
        "They celebrate the fact that TV news panelists predict Ed will be forgotten in a short period of time"
      ],
      "predicates": [
        "RenewRelationship(x, y) ::: x and y renew their relationship.",
        "Celebrate(x) ::: x celebrates something.",
        "Predict(x, y) ::: x predicts y.",
        "Forgotten(x) ::: x is forgotten."
      ],
      "premises": [
        "RenewRelationship(a_1, a_2) ::: Ed and Shari renew their relationship.",
        "Celebrate(a_1) ::: Ed celebrates the fact that TV news panelists predict Ed will be forgotten in a short period of time.",
        "Predict(c, Forgotten(a_1)) ::: TV news panelists predict that Ed will be forgotten."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "767": [
    {
      "id": 767,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 2,
      "paragraph": "Ed then goes on The Tonight Show with Jay Leno and meets beautiful model/actress Jill (Elizabeth Hurley) who takes a liking to Ed. Ed then visits Shari and she tells Ed that she does not want to be with him until the Show stops airing. She then leaves town. Ed goes to the park with Ray and some friends to play football when Jill comes to talk to him, because Cynthia brought her in to earn more ratings. She invites Ed to dinner at her house. When he arrives at Jill's house, there is a massive crowd. They have a small talk, and then they kiss on top of a table. They are about to have sex, but then Ed falls off the table and squishes Jill's cat. Ed never sees Jill again.",
      "question_template": "Mary was given the blessing of Lady Glencora to marry [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Jill",
        "Beautiful model/actress"
      ],
      "predicates": [
        "GoesOnShow(x, y) ::: x goes on the show y.",
        "Meets(x, y) ::: x meets y.",
        "Likes(x, y) ::: x takes a liking to y.",
        "WantsToBeWith(x, y) ::: x wants to be with y.",
        "LeavesTown(x) ::: x leaves town.",
        "PlaysFootball(x) ::: x plays football.",
        "Invites(x, y) ::: x invites y to dinner.",
        "Kisses(x, y) ::: x kisses y.",
        "FallsOffTable(x) ::: x falls off the table.",
        "Squishes(x, y) ::: x squishes y.",
        "NeverSees(x, y) ::: x never sees y again."
      ],
      "premises": [
        "GoesOnShow(a_1, \"The Tonight Show with Jay Leno\") ::: Ed goes on The Tonight Show with Jay Leno.",
        "Meets(a_1, a_2) ::: Ed meets beautiful model/actress Jill (Elizabeth Hurley).",
        "Likes(a_2, a_1) ::: Jill takes a liking to Ed.",
        "WantsToBeWith(a_2, a_1) ::: Shari tells Ed that she does not want to be with him until the Show stops airing.",
        "LeavesTown(a_2) ::: Shari leaves town.",
        "PlaysFootball(a_1) ::: Ed goes to the park with Ray and some friends to play football.",
        "Invites(a_2, a_1) ::: Jill invites Ed to dinner at her house.",
        "FallsOffTable(a_1) ::: Ed falls off the table.",
        "Squishes(a_1, \"Jill's cat\") ::: Ed squishes Jill's cat.",
        "NeverSees(a_1, a_2) ::: Ed never sees Jill again.",
        "¬(Likes(a_1, a_2)) ::: Ed does not have a relationship with Jill after the incident."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "769": [
    {
      "id": 769,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 0,
      "paragraph": " EDtv starts off with the television channel True TV commencing interviews for a TV show that shows a normal person's life 24/7. This idea was thought up by a TV producer named Cynthia (Ellen DeGeneres). They interview Ed Pekurny (Matthew McConaughey) and his brother, Ray (Woody Harrelson). When the producers see the interview Cynthia decides to use Ed and interviews only Ed. So now they start airing the show, which they call Ed TV. The show is a total failure at first, as only boring things happen and the main producers want to pull the plug, except for Cynthia.",
      "question_template": "[[CANDIDATE_ANSWER]] turned down Lord Silverbridge when he proposed.",
      "candidate_answers": [
        "The show is a total failure at first",
        "Only boring things happen",
        "The main producers want to pull the plug"
      ],
      "predicates": [
        "Producer(x) ::: x is a TV producer.",
        "Interview(x, y) ::: x interviews y.",
        "Airing(x) ::: x is airing a show.",
        "Failure(x) ::: x is a total failure.",
        "BelievesIn(x, y) ::: x believes in the potential of y.",
        "Show(x) ::: x is a TV show.",
        "NormalPerson(x) ::: x is a normal person.",
        "BoringThings(x) ::: x involves boring things."
      ],
      "premises": [
        "Producer(cynthia) ::: Cynthia is a TV producer.",
        "Interview(cynthia, ed) ::: Cynthia interviews Ed Pekurny.",
        "Airing(edTV) ::: They start airing the show, which they call Ed TV.",
        "Failure(edTV) ::: The show is a total failure at first.",
        "BelievesIn(cynthia, edTV) ::: Cynthia believes in the potential of Ed TV despite its initial failure.",
        "NormalPerson(ed) ::: Ed Pekurny is a normal person.",
        "BoringThings(edTV) ::: Ed TV involves boring things.",
        "Conclusion:",
        "¬Failure(edTV) ::: Ed TV is not a total failure in the long run due to Cynthia's belief in its potential."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 769,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 2,
      "paragraph": "Ed then goes on The Tonight Show with Jay Leno and meets beautiful model/actress Jill (Elizabeth Hurley) who takes a liking to Ed. Ed then visits Shari and she tells Ed that she does not want to be with him until the Show stops airing. She then leaves town. Ed goes to the park with Ray and some friends to play football when Jill comes to talk to him, because Cynthia brought her in to earn more ratings. She invites Ed to dinner at her house. When he arrives at Jill's house, there is a massive crowd. They have a small talk, and then they kiss on top of a table. They are about to have sex, but then Ed falls off the table and squishes Jill's cat. Ed never sees Jill again.",
      "question_template": "[[CANDIDATE_ANSWER]] turned down Lord Silverbridge when he proposed.",
      "candidate_answers": [
        "- Shari tells Ed that she does not want to be with him until the Show stops airing.",
        "- Ed never sees Jill again."
      ],
      "predicates": [
        "GoesOnShow(x, y) ::: x goes on the show y.",
        "Meets(x, y) ::: x meets y.",
        "Likes(x, y) ::: x takes a liking to y.",
        "WantsToBeWith(x, y) ::: x wants to be with y.",
        "LeavesTown(x) ::: x leaves town.",
        "PlaysFootball(x) ::: x plays football.",
        "Invites(x, y) ::: x invites y to dinner.",
        "Kisses(x, y) ::: x kisses y.",
        "FallsOffTable(x) ::: x falls off the table.",
        "Squishes(x, y) ::: x squishes y.",
        "NeverSees(x, y) ::: x never sees y again."
      ],
      "premises": [
        "GoesOnShow(a_1, \"The Tonight Show with Jay Leno\") ::: Ed goes on The Tonight Show with Jay Leno.",
        "Meets(a_1, a_2) ::: Ed meets beautiful model/actress Jill (Elizabeth Hurley).",
        "Likes(a_2, a_1) ::: Jill takes a liking to Ed.",
        "WantsToBeWith(a_2, a_1) ::: Shari tells Ed that she does not want to be with him until the Show stops airing.",
        "LeavesTown(a_2) ::: Shari leaves town.",
        "PlaysFootball(a_1) ::: Ed goes to the park with Ray and some friends to play football.",
        "Invites(a_2, a_1) ::: Jill invites Ed to dinner at her house.",
        "FallsOffTable(a_1) ::: Ed falls off the table.",
        "Squishes(a_1, \"Jill's cat\") ::: Ed squishes Jill's cat.",
        "NeverSees(a_1, a_2) ::: Ed never sees Jill again.",
        "¬(Likes(a_1, a_2)) ::: Ed does not have a relationship with Jill after the incident."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 769,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 4,
      "paragraph": "After the funeral, Ed becomes disheartened by the fact that the producers want him to stay on longer and that he cannot do anything to change their minds or he would be in breach of his contract. Ed is depressed until he catches a glimpse of Shari (in disguise wearing a wig and sunglasses). He chases her for a long time until she stops in the women's bathroom in a movie theater. She says she is staying with her brother as it is his birthday and she just wanted to see Ed. Ed vows to find a way to end the show to be with Shari. When Ed exits, one camera man stays with Shari saying that it is the producers' new idea. The main camera man tells him that all his family are being filmed, but they show the most interesting person.",
      "question_template": "[[CANDIDATE_ANSWER]] turned down Lord Silverbridge when he proposed.",
      "candidate_answers": [
        "- Ed becomes disheartened by the fact that the producers want him to stay on longer",
        "- Ed vows to find a way to end the show to be with Shari"
      ],
      "predicates": [
        "Disheartened(a_1) ::: Ed is disheartened.",
        "Depressed(a_1) ::: Ed is depressed.",
        "WantsToEndShow(a_1) ::: Ed wants to end the show.",
        "With(a_1, a_2) ::: Ed is with Shari.",
        "InBathroom(a_2, b_0) ::: Shari is in the women's bathroom.",
        "Chases(a_1, a_2) ::: Ed chases Shari.",
        "StaysWith(a_2, a_0) ::: Shari stays with her brother.",
        "FamilyFilmed(a_0) ::: Ed's family is being filmed.",
        "InterestingPerson(a_0) ::: The most interesting person is being shown."
      ],
      "premises": [
        "Disheartened(a_1) ∧ Depressed(a_1) ::: Ed becomes disheartened and is depressed after the funeral.",
        "Chases(a_1, a_2) ∧ InBathroom(a_2, b_0) ::: Ed chases Shari until she stops in the women's bathroom.",
        "WantsToEndShow(a_1) ∧ With(a_1, a_2) ::: Ed wants to end the show to be with Shari.",
        "StaysWith(a_2, a_0) ::: Shari is staying with her brother for his birthday.",
        "FamilyFilmed(a_0) ∧ InterestingPerson(a_0) ::: All of Ed's family are being filmed, but they show the most interesting person.",
        "Conclusion:",
        "WantsToEndShow(a_1) ::: Ed wants to end the show to be with Shari."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "770": [
    {
      "id": 770,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 1,
      "paragraph": "However, Ed TV suddenly gets interesting on Day 3 when Ed visits Ray. Ed (along with the cameramen) discovers that Ray is cheating on his girlfriend Shari (Jenna Elfman). Ed then visits Shari to apologize to her for Ray's actions. Shari is very drunk and starts insulting Ray, by talking to the camera. She makes everyone laugh and gasp by saying \"Ray was a bad lay.\" Ed tries to comfort Shari, and he reveals he has feelings for her. She then reveals she has feelings for Ed as well. They slowly move their faces closer and finally kiss each other. Ed then locks out the camera crew and proceeds to passionately kiss Shari for a while. Ed TV suddenly becomes extremely popular. On Cynthia's insistence, Ed starts a relationship with Shari, which is short lived as Ed grows more interested in staying on TV and Shari is abused by viewers who find her unappealing.",
      "question_template": "[[CANDIDATE_ANSWER]] accepts the proposal of Lord Silverbridge.",
      "candidate_answers": [
        "Ray",
        "Shari"
      ],
      "predicates": [
        "Popular(x) ::: x is extremely popular.",
        "InRelationship(x, y) ::: x is in a relationship with y.",
        "Cheating(x, y) ::: x is cheating on y.",
        "Insulting(x, y) ::: x is insulting y.",
        "Comfort(x, y) ::: x is comforting y.",
        "HasFeelingsFor(x, y) ::: x has feelings for y.",
        "Kiss(x, y) ::: x kisses y.",
        "LocksOut(x, y) ::: x locks out y.",
        "ShortLived(x, y) ::: x and y's relationship is short-lived.",
        "GrowingInterest(x, y) ::: x is growing more interested in y.",
        "Unappealing(x) ::: x is perceived as unappealing by viewers."
      ],
      "premises": [
        "Cheating(ray, shari) ::: Ray is cheating on his girlfriend Shari.",
        "Insulting(shari, ray) ::: Shari is insulting Ray.",
        "Comfort(ed, shari) ::: Ed tries to comfort Shari.",
        "HasFeelingsFor(ed, shari) ::: Ed reveals he has feelings for Shari.",
        "HasFeelingsFor(shari, ed) ::: Shari reveals she has feelings for Ed.",
        "Kiss(ed, shari) ::: Ed and Shari kiss each other.",
        "LocksOut(ed, cameramen) ::: Ed locks out the camera crew.",
        "Popular(edTV) ::: Ed TV suddenly becomes extremely popular.",
        "InRelationship(ed, shari) ::: Ed starts a relationship with Shari.",
        "ShortLived(ed, shari) ::: Ed and Shari's relationship is short-lived.",
        "GrowingInterest(ed, stayingOnTV) ::: Ed grows more interested in staying on TV.",
        "Unappealing(shari) ::: Shari is perceived as unappealing by viewers."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 770,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 5,
      "paragraph": "Ed gets an idea on how to stop the main producer from showing the show: he says that he will give $10,000 to the person who can give him the best amount of \"dirt\" on the producers and that he will announce it live, with the desired result being they stop airing the show before he can make the announcement. As Cynthia feels sorry for Ed, she tells him a secret of the main producer. Ed announces the secret (that the man has to pump a liquid into his penis to get an erection) but before he can announce who it is they stop airing the show.",
      "question_template": "[[CANDIDATE_ANSWER]] accepts the proposal of Lord Silverbridge.",
      "candidate_answers": [
        "Cynthia"
      ],
      "predicates": [
        "Gives(x, y, z) ::: x gives y to z.",
        "BestDirt(x, y) ::: x provides the best amount of \"dirt\" on y.",
        "Announces(x, y) ::: x announces y.",
        "FeelsSorryFor(x, y) ::: x feels sorry for y.",
        "Secret(x, y) ::: x is a secret of y.",
        "StopsAiring(x) ::: x stops airing the show.",
        "LiquidPump(x) ::: x pumps a liquid into his penis to get an erection."
      ],
      "premises": [
        "Gives(a_1, 10000, a_0) ::: Ed offers $10,000 to the person who can give him the best amount of \"dirt\" on the producers.",
        "BestDirt(a_0, producers) ::: The person provides the best amount of \"dirt\" on the producers.",
        "Announces(a_1, secret) ::: Ed announces the secret.",
        "FeelsSorryFor(a_2, a_1) ::: Cynthia feels sorry for Ed.",
        "Secret(secret, a_2) ::: The secret is that the main producer has to pump a liquid into his penis to get an erection.",
        "StopsAiring(show) ::: They stop airing the show before Ed can announce who it is.",
        "Conclusion:",
        "¬Announces(a_1, whoItIs) ::: Ed does not announce who it is before they stop airing the show."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "771": [
    {
      "id": 771,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 0,
      "paragraph": " EDtv starts off with the television channel True TV commencing interviews for a TV show that shows a normal person's life 24/7. This idea was thought up by a TV producer named Cynthia (Ellen DeGeneres). They interview Ed Pekurny (Matthew McConaughey) and his brother, Ray (Woody Harrelson). When the producers see the interview Cynthia decides to use Ed and interviews only Ed. So now they start airing the show, which they call Ed TV. The show is a total failure at first, as only boring things happen and the main producers want to pull the plug, except for Cynthia.",
      "question_template": "[[CANDIDATE_ANSWER]] was expelled from Cambridge after attending the derby.",
      "candidate_answers": [
        "- The show is a total failure at first, as only boring things happen",
        "- The main producers want to pull the plug, except for Cynthia"
      ],
      "predicates": [
        "Producer(x) ::: x is a TV producer.",
        "Interview(x, y) ::: x interviews y.",
        "Airing(x) ::: x is airing a show.",
        "Failure(x) ::: x is a total failure.",
        "BelievesIn(x, y) ::: x believes in the potential of y.",
        "Show(x) ::: x is a TV show.",
        "NormalPerson(x) ::: x is a normal person.",
        "BoringThings(x) ::: x involves boring things."
      ],
      "premises": [
        "Producer(cynthia) ::: Cynthia is a TV producer.",
        "Interview(cynthia, ed) ::: Cynthia interviews Ed Pekurny.",
        "Airing(edTV) ::: They start airing the show, which they call Ed TV.",
        "Failure(edTV) ::: The show is a total failure at first.",
        "BelievesIn(cynthia, edTV) ::: Cynthia believes in the potential of Ed TV despite its initial failure.",
        "NormalPerson(ed) ::: Ed Pekurny is a normal person.",
        "BoringThings(edTV) ::: Ed TV involves boring things.",
        "Conclusion:",
        "¬Failure(edTV) ::: Ed TV is not a total failure in the long run due to Cynthia's belief in its potential."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 771,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 1,
      "paragraph": "However, Ed TV suddenly gets interesting on Day 3 when Ed visits Ray. Ed (along with the cameramen) discovers that Ray is cheating on his girlfriend Shari (Jenna Elfman). Ed then visits Shari to apologize to her for Ray's actions. Shari is very drunk and starts insulting Ray, by talking to the camera. She makes everyone laugh and gasp by saying \"Ray was a bad lay.\" Ed tries to comfort Shari, and he reveals he has feelings for her. She then reveals she has feelings for Ed as well. They slowly move their faces closer and finally kiss each other. Ed then locks out the camera crew and proceeds to passionately kiss Shari for a while. Ed TV suddenly becomes extremely popular. On Cynthia's insistence, Ed starts a relationship with Shari, which is short lived as Ed grows more interested in staying on TV and Shari is abused by viewers who find her unappealing.",
      "question_template": "[[CANDIDATE_ANSWER]] was expelled from Cambridge after attending the derby.",
      "candidate_answers": [
        "- Ed TV suddenly becomes extremely popular.",
        "- Ed grows more interested in staying on TV."
      ],
      "predicates": [
        "Popular(x) ::: x is extremely popular.",
        "InRelationship(x, y) ::: x is in a relationship with y.",
        "Cheating(x, y) ::: x is cheating on y.",
        "Insulting(x, y) ::: x is insulting y.",
        "Comfort(x, y) ::: x is comforting y.",
        "HasFeelingsFor(x, y) ::: x has feelings for y.",
        "Kiss(x, y) ::: x kisses y.",
        "LocksOut(x, y) ::: x locks out y.",
        "ShortLived(x, y) ::: x and y's relationship is short-lived.",
        "GrowingInterest(x, y) ::: x is growing more interested in y.",
        "Unappealing(x) ::: x is perceived as unappealing by viewers."
      ],
      "premises": [
        "Cheating(ray, shari) ::: Ray is cheating on his girlfriend Shari.",
        "Insulting(shari, ray) ::: Shari is insulting Ray.",
        "Comfort(ed, shari) ::: Ed tries to comfort Shari.",
        "HasFeelingsFor(ed, shari) ::: Ed reveals he has feelings for Shari.",
        "HasFeelingsFor(shari, ed) ::: Shari reveals she has feelings for Ed.",
        "Kiss(ed, shari) ::: Ed and Shari kiss each other.",
        "LocksOut(ed, cameramen) ::: Ed locks out the camera crew.",
        "Popular(edTV) ::: Ed TV suddenly becomes extremely popular.",
        "InRelationship(ed, shari) ::: Ed starts a relationship with Shari.",
        "ShortLived(ed, shari) ::: Ed and Shari's relationship is short-lived.",
        "GrowingInterest(ed, stayingOnTV) ::: Ed grows more interested in staying on TV.",
        "Unappealing(shari) ::: Shari is perceived as unappealing by viewers."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 771,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 2,
      "paragraph": "Ed then goes on The Tonight Show with Jay Leno and meets beautiful model/actress Jill (Elizabeth Hurley) who takes a liking to Ed. Ed then visits Shari and she tells Ed that she does not want to be with him until the Show stops airing. She then leaves town. Ed goes to the park with Ray and some friends to play football when Jill comes to talk to him, because Cynthia brought her in to earn more ratings. She invites Ed to dinner at her house. When he arrives at Jill's house, there is a massive crowd. They have a small talk, and then they kiss on top of a table. They are about to have sex, but then Ed falls off the table and squishes Jill's cat. Ed never sees Jill again.",
      "question_template": "[[CANDIDATE_ANSWER]] was expelled from Cambridge after attending the derby.",
      "candidate_answers": [
        "Shari tells Ed that she does not want to be with him until the Show stops airing."
      ],
      "predicates": [
        "GoesOnShow(x, y) ::: x goes on the show y.",
        "Meets(x, y) ::: x meets y.",
        "Likes(x, y) ::: x takes a liking to y.",
        "WantsToBeWith(x, y) ::: x wants to be with y.",
        "LeavesTown(x) ::: x leaves town.",
        "PlaysFootball(x) ::: x plays football.",
        "Invites(x, y) ::: x invites y to dinner.",
        "Kisses(x, y) ::: x kisses y.",
        "FallsOffTable(x) ::: x falls off the table.",
        "Squishes(x, y) ::: x squishes y.",
        "NeverSees(x, y) ::: x never sees y again."
      ],
      "premises": [
        "GoesOnShow(a_1, \"The Tonight Show with Jay Leno\") ::: Ed goes on The Tonight Show with Jay Leno.",
        "Meets(a_1, a_2) ::: Ed meets beautiful model/actress Jill (Elizabeth Hurley).",
        "Likes(a_2, a_1) ::: Jill takes a liking to Ed.",
        "WantsToBeWith(a_2, a_1) ::: Shari tells Ed that she does not want to be with him until the Show stops airing.",
        "LeavesTown(a_2) ::: Shari leaves town.",
        "PlaysFootball(a_1) ::: Ed goes to the park with Ray and some friends to play football.",
        "Invites(a_2, a_1) ::: Jill invites Ed to dinner at her house.",
        "FallsOffTable(a_1) ::: Ed falls off the table.",
        "Squishes(a_1, \"Jill's cat\") ::: Ed squishes Jill's cat.",
        "NeverSees(a_1, a_2) ::: Ed never sees Jill again.",
        "¬(Likes(a_1, a_2)) ::: Ed does not have a relationship with Jill after the incident."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 771,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 5,
      "paragraph": "Ed gets an idea on how to stop the main producer from showing the show: he says that he will give $10,000 to the person who can give him the best amount of \"dirt\" on the producers and that he will announce it live, with the desired result being they stop airing the show before he can make the announcement. As Cynthia feels sorry for Ed, she tells him a secret of the main producer. Ed announces the secret (that the man has to pump a liquid into his penis to get an erection) but before he can announce who it is they stop airing the show.",
      "question_template": "[[CANDIDATE_ANSWER]] was expelled from Cambridge after attending the derby.",
      "candidate_answers": [
        "Cynthia feels sorry for Ed",
        "He will give $10,000 to the person who can give him the best amount of \"dirt\" on the producers",
        "He announces the secret"
      ],
      "predicates": [
        "Gives(x, y, z) ::: x gives y to z.",
        "BestDirt(x, y) ::: x provides the best amount of \"dirt\" on y.",
        "Announces(x, y) ::: x announces y.",
        "FeelsSorryFor(x, y) ::: x feels sorry for y.",
        "Secret(x, y) ::: x is a secret of y.",
        "StopsAiring(x) ::: x stops airing the show.",
        "LiquidPump(x) ::: x pumps a liquid into his penis to get an erection."
      ],
      "premises": [
        "Gives(a_1, 10000, a_0) ::: Ed offers $10,000 to the person who can give him the best amount of \"dirt\" on the producers.",
        "BestDirt(a_0, producers) ::: The person provides the best amount of \"dirt\" on the producers.",
        "Announces(a_1, secret) ::: Ed announces the secret.",
        "FeelsSorryFor(a_2, a_1) ::: Cynthia feels sorry for Ed.",
        "Secret(secret, a_2) ::: The secret is that the main producer has to pump a liquid into his penis to get an erection.",
        "StopsAiring(show) ::: They stop airing the show before Ed can announce who it is.",
        "Conclusion:",
        "¬Announces(a_1, whoItIs) ::: Ed does not announce who it is before they stop airing the show."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "772": [
    {
      "id": 772,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 0,
      "paragraph": " EDtv starts off with the television channel True TV commencing interviews for a TV show that shows a normal person's life 24/7. This idea was thought up by a TV producer named Cynthia (Ellen DeGeneres). They interview Ed Pekurny (Matthew McConaughey) and his brother, Ray (Woody Harrelson). When the producers see the interview Cynthia decides to use Ed and interviews only Ed. So now they start airing the show, which they call Ed TV. The show is a total failure at first, as only boring things happen and the main producers want to pull the plug, except for Cynthia.",
      "question_template": "[[CANDIDATE_ANSWER]] is a friend of Frank Tregear.",
      "candidate_answers": [
        "Ray"
      ],
      "predicates": [
        "Producer(x) ::: x is a TV producer.",
        "Interview(x, y) ::: x interviews y.",
        "Airing(x) ::: x is airing a show.",
        "Failure(x) ::: x is a total failure.",
        "BelievesIn(x, y) ::: x believes in the potential of y.",
        "Show(x) ::: x is a TV show.",
        "NormalPerson(x) ::: x is a normal person.",
        "BoringThings(x) ::: x involves boring things."
      ],
      "premises": [
        "Producer(cynthia) ::: Cynthia is a TV producer.",
        "Interview(cynthia, ed) ::: Cynthia interviews Ed Pekurny.",
        "Airing(edTV) ::: They start airing the show, which they call Ed TV.",
        "Failure(edTV) ::: The show is a total failure at first.",
        "BelievesIn(cynthia, edTV) ::: Cynthia believes in the potential of Ed TV despite its initial failure.",
        "NormalPerson(ed) ::: Ed Pekurny is a normal person.",
        "BoringThings(edTV) ::: Ed TV involves boring things.",
        "Conclusion:",
        "¬Failure(edTV) ::: Ed TV is not a total failure in the long run due to Cynthia's belief in its potential."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 772,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 2,
      "paragraph": "Ed then goes on The Tonight Show with Jay Leno and meets beautiful model/actress Jill (Elizabeth Hurley) who takes a liking to Ed. Ed then visits Shari and she tells Ed that she does not want to be with him until the Show stops airing. She then leaves town. Ed goes to the park with Ray and some friends to play football when Jill comes to talk to him, because Cynthia brought her in to earn more ratings. She invites Ed to dinner at her house. When he arrives at Jill's house, there is a massive crowd. They have a small talk, and then they kiss on top of a table. They are about to have sex, but then Ed falls off the table and squishes Jill's cat. Ed never sees Jill again.",
      "question_template": "[[CANDIDATE_ANSWER]] is a friend of Frank Tregear.",
      "candidate_answers": [
        "Ray"
      ],
      "predicates": [
        "GoesOnShow(x, y) ::: x goes on the show y.",
        "Meets(x, y) ::: x meets y.",
        "Likes(x, y) ::: x takes a liking to y.",
        "WantsToBeWith(x, y) ::: x wants to be with y.",
        "LeavesTown(x) ::: x leaves town.",
        "PlaysFootball(x) ::: x plays football.",
        "Invites(x, y) ::: x invites y to dinner.",
        "Kisses(x, y) ::: x kisses y.",
        "FallsOffTable(x) ::: x falls off the table.",
        "Squishes(x, y) ::: x squishes y.",
        "NeverSees(x, y) ::: x never sees y again."
      ],
      "premises": [
        "GoesOnShow(a_1, \"The Tonight Show with Jay Leno\") ::: Ed goes on The Tonight Show with Jay Leno.",
        "Meets(a_1, a_2) ::: Ed meets beautiful model/actress Jill (Elizabeth Hurley).",
        "Likes(a_2, a_1) ::: Jill takes a liking to Ed.",
        "WantsToBeWith(a_2, a_1) ::: Shari tells Ed that she does not want to be with him until the Show stops airing.",
        "LeavesTown(a_2) ::: Shari leaves town.",
        "PlaysFootball(a_1) ::: Ed goes to the park with Ray and some friends to play football.",
        "Invites(a_2, a_1) ::: Jill invites Ed to dinner at her house.",
        "FallsOffTable(a_1) ::: Ed falls off the table.",
        "Squishes(a_1, \"Jill's cat\") ::: Ed squishes Jill's cat.",
        "NeverSees(a_1, a_2) ::: Ed never sees Jill again.",
        "¬(Likes(a_1, a_2)) ::: Ed does not have a relationship with Jill after the incident."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "773": [
    {
      "id": 773,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 0,
      "paragraph": " EDtv starts off with the television channel True TV commencing interviews for a TV show that shows a normal person's life 24/7. This idea was thought up by a TV producer named Cynthia (Ellen DeGeneres). They interview Ed Pekurny (Matthew McConaughey) and his brother, Ray (Woody Harrelson). When the producers see the interview Cynthia decides to use Ed and interviews only Ed. So now they start airing the show, which they call Ed TV. The show is a total failure at first, as only boring things happen and the main producers want to pull the plug, except for Cynthia.",
      "question_template": "The Duke ends up approving of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "A TV producer named Cynthia",
        "Cynthia"
      ],
      "predicates": [
        "Producer(x) ::: x is a TV producer.",
        "Interview(x, y) ::: x interviews y.",
        "Airing(x) ::: x is airing a show.",
        "Failure(x) ::: x is a total failure.",
        "BelievesIn(x, y) ::: x believes in the potential of y.",
        "Show(x) ::: x is a TV show.",
        "NormalPerson(x) ::: x is a normal person.",
        "BoringThings(x) ::: x involves boring things."
      ],
      "premises": [
        "Producer(cynthia) ::: Cynthia is a TV producer.",
        "Interview(cynthia, ed) ::: Cynthia interviews Ed Pekurny.",
        "Airing(edTV) ::: They start airing the show, which they call Ed TV.",
        "Failure(edTV) ::: The show is a total failure at first.",
        "BelievesIn(cynthia, edTV) ::: Cynthia believes in the potential of Ed TV despite its initial failure.",
        "NormalPerson(ed) ::: Ed Pekurny is a normal person.",
        "BoringThings(edTV) ::: Ed TV involves boring things.",
        "Conclusion:",
        "¬Failure(edTV) ::: Ed TV is not a total failure in the long run due to Cynthia's belief in its potential."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 773,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 1,
      "paragraph": "However, Ed TV suddenly gets interesting on Day 3 when Ed visits Ray. Ed (along with the cameramen) discovers that Ray is cheating on his girlfriend Shari (Jenna Elfman). Ed then visits Shari to apologize to her for Ray's actions. Shari is very drunk and starts insulting Ray, by talking to the camera. She makes everyone laugh and gasp by saying \"Ray was a bad lay.\" Ed tries to comfort Shari, and he reveals he has feelings for her. She then reveals she has feelings for Ed as well. They slowly move their faces closer and finally kiss each other. Ed then locks out the camera crew and proceeds to passionately kiss Shari for a while. Ed TV suddenly becomes extremely popular. On Cynthia's insistence, Ed starts a relationship with Shari, which is short lived as Ed grows more interested in staying on TV and Shari is abused by viewers who find her unappealing.",
      "question_template": "The Duke ends up approving of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Cynthia's insistence"
      ],
      "predicates": [
        "Popular(x) ::: x is extremely popular.",
        "InRelationship(x, y) ::: x is in a relationship with y.",
        "Cheating(x, y) ::: x is cheating on y.",
        "Insulting(x, y) ::: x is insulting y.",
        "Comfort(x, y) ::: x is comforting y.",
        "HasFeelingsFor(x, y) ::: x has feelings for y.",
        "Kiss(x, y) ::: x kisses y.",
        "LocksOut(x, y) ::: x locks out y.",
        "ShortLived(x, y) ::: x and y's relationship is short-lived.",
        "GrowingInterest(x, y) ::: x is growing more interested in y.",
        "Unappealing(x) ::: x is perceived as unappealing by viewers."
      ],
      "premises": [
        "Cheating(ray, shari) ::: Ray is cheating on his girlfriend Shari.",
        "Insulting(shari, ray) ::: Shari is insulting Ray.",
        "Comfort(ed, shari) ::: Ed tries to comfort Shari.",
        "HasFeelingsFor(ed, shari) ::: Ed reveals he has feelings for Shari.",
        "HasFeelingsFor(shari, ed) ::: Shari reveals she has feelings for Ed.",
        "Kiss(ed, shari) ::: Ed and Shari kiss each other.",
        "LocksOut(ed, cameramen) ::: Ed locks out the camera crew.",
        "Popular(edTV) ::: Ed TV suddenly becomes extremely popular.",
        "InRelationship(ed, shari) ::: Ed starts a relationship with Shari.",
        "ShortLived(ed, shari) ::: Ed and Shari's relationship is short-lived.",
        "GrowingInterest(ed, stayingOnTV) ::: Ed grows more interested in staying on TV.",
        "Unappealing(shari) ::: Shari is perceived as unappealing by viewers."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 773,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 5,
      "paragraph": "Ed gets an idea on how to stop the main producer from showing the show: he says that he will give $10,000 to the person who can give him the best amount of \"dirt\" on the producers and that he will announce it live, with the desired result being they stop airing the show before he can make the announcement. As Cynthia feels sorry for Ed, she tells him a secret of the main producer. Ed announces the secret (that the man has to pump a liquid into his penis to get an erection) but before he can announce who it is they stop airing the show.",
      "question_template": "The Duke ends up approving of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Ed",
        "Cynthia"
      ],
      "predicates": [
        "Gives(x, y, z) ::: x gives y to z.",
        "BestDirt(x, y) ::: x provides the best amount of \"dirt\" on y.",
        "Announces(x, y) ::: x announces y.",
        "FeelsSorryFor(x, y) ::: x feels sorry for y.",
        "Secret(x, y) ::: x is a secret of y.",
        "StopsAiring(x) ::: x stops airing the show.",
        "LiquidPump(x) ::: x pumps a liquid into his penis to get an erection."
      ],
      "premises": [
        "Gives(a_1, 10000, a_0) ::: Ed offers $10,000 to the person who can give him the best amount of \"dirt\" on the producers.",
        "BestDirt(a_0, producers) ::: The person provides the best amount of \"dirt\" on the producers.",
        "Announces(a_1, secret) ::: Ed announces the secret.",
        "FeelsSorryFor(a_2, a_1) ::: Cynthia feels sorry for Ed.",
        "Secret(secret, a_2) ::: The secret is that the main producer has to pump a liquid into his penis to get an erection.",
        "StopsAiring(show) ::: They stop airing the show before Ed can announce who it is.",
        "Conclusion:",
        "¬Announces(a_1, whoItIs) ::: Ed does not announce who it is before they stop airing the show."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "774": [
    {
      "id": 774,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 0,
      "paragraph": " EDtv starts off with the television channel True TV commencing interviews for a TV show that shows a normal person's life 24/7. This idea was thought up by a TV producer named Cynthia (Ellen DeGeneres). They interview Ed Pekurny (Matthew McConaughey) and his brother, Ray (Woody Harrelson). When the producers see the interview Cynthia decides to use Ed and interviews only Ed. So now they start airing the show, which they call Ed TV. The show is a total failure at first, as only boring things happen and the main producers want to pull the plug, except for Cynthia.",
      "question_template": "EDtv is associated with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Ed Pekurny",
        "Cynthia decides to use Ed"
      ],
      "predicates": [
        "Producer(x) ::: x is a TV producer.",
        "Interview(x, y) ::: x interviews y.",
        "Airing(x) ::: x is airing a show.",
        "Failure(x) ::: x is a total failure.",
        "BelievesIn(x, y) ::: x believes in the potential of y.",
        "Show(x) ::: x is a TV show.",
        "NormalPerson(x) ::: x is a normal person.",
        "BoringThings(x) ::: x involves boring things."
      ],
      "premises": [
        "Producer(cynthia) ::: Cynthia is a TV producer.",
        "Interview(cynthia, ed) ::: Cynthia interviews Ed Pekurny.",
        "Airing(edTV) ::: They start airing the show, which they call Ed TV.",
        "Failure(edTV) ::: The show is a total failure at first.",
        "BelievesIn(cynthia, edTV) ::: Cynthia believes in the potential of Ed TV despite its initial failure.",
        "NormalPerson(ed) ::: Ed Pekurny is a normal person.",
        "BoringThings(edTV) ::: Ed TV involves boring things.",
        "Conclusion:",
        "¬Failure(edTV) ::: Ed TV is not a total failure in the long run due to Cynthia's belief in its potential."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 774,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 1,
      "paragraph": "However, Ed TV suddenly gets interesting on Day 3 when Ed visits Ray. Ed (along with the cameramen) discovers that Ray is cheating on his girlfriend Shari (Jenna Elfman). Ed then visits Shari to apologize to her for Ray's actions. Shari is very drunk and starts insulting Ray, by talking to the camera. She makes everyone laugh and gasp by saying \"Ray was a bad lay.\" Ed tries to comfort Shari, and he reveals he has feelings for her. She then reveals she has feelings for Ed as well. They slowly move their faces closer and finally kiss each other. Ed then locks out the camera crew and proceeds to passionately kiss Shari for a while. Ed TV suddenly becomes extremely popular. On Cynthia's insistence, Ed starts a relationship with Shari, which is short lived as Ed grows more interested in staying on TV and Shari is abused by viewers who find her unappealing.",
      "question_template": "EDtv is associated with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Ed TV",
        "Ed",
        "Ray",
        "Shari"
      ],
      "predicates": [
        "Popular(x) ::: x is extremely popular.",
        "InRelationship(x, y) ::: x is in a relationship with y.",
        "Cheating(x, y) ::: x is cheating on y.",
        "Insulting(x, y) ::: x is insulting y.",
        "Comfort(x, y) ::: x is comforting y.",
        "HasFeelingsFor(x, y) ::: x has feelings for y.",
        "Kiss(x, y) ::: x kisses y.",
        "LocksOut(x, y) ::: x locks out y.",
        "ShortLived(x, y) ::: x and y's relationship is short-lived.",
        "GrowingInterest(x, y) ::: x is growing more interested in y.",
        "Unappealing(x) ::: x is perceived as unappealing by viewers."
      ],
      "premises": [
        "Cheating(ray, shari) ::: Ray is cheating on his girlfriend Shari.",
        "Insulting(shari, ray) ::: Shari is insulting Ray.",
        "Comfort(ed, shari) ::: Ed tries to comfort Shari.",
        "HasFeelingsFor(ed, shari) ::: Ed reveals he has feelings for Shari.",
        "HasFeelingsFor(shari, ed) ::: Shari reveals she has feelings for Ed.",
        "Kiss(ed, shari) ::: Ed and Shari kiss each other.",
        "LocksOut(ed, cameramen) ::: Ed locks out the camera crew.",
        "Popular(edTV) ::: Ed TV suddenly becomes extremely popular.",
        "InRelationship(ed, shari) ::: Ed starts a relationship with Shari.",
        "ShortLived(ed, shari) ::: Ed and Shari's relationship is short-lived.",
        "GrowingInterest(ed, stayingOnTV) ::: Ed grows more interested in staying on TV.",
        "Unappealing(shari) ::: Shari is perceived as unappealing by viewers."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 774,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 4,
      "paragraph": "After the funeral, Ed becomes disheartened by the fact that the producers want him to stay on longer and that he cannot do anything to change their minds or he would be in breach of his contract. Ed is depressed until he catches a glimpse of Shari (in disguise wearing a wig and sunglasses). He chases her for a long time until she stops in the women's bathroom in a movie theater. She says she is staying with her brother as it is his birthday and she just wanted to see Ed. Ed vows to find a way to end the show to be with Shari. When Ed exits, one camera man stays with Shari saying that it is the producers' new idea. The main camera man tells him that all his family are being filmed, but they show the most interesting person.",
      "question_template": "EDtv is associated with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Shari",
        "The most interesting person"
      ],
      "predicates": [
        "Disheartened(a_1) ::: Ed is disheartened.",
        "Depressed(a_1) ::: Ed is depressed.",
        "WantsToEndShow(a_1) ::: Ed wants to end the show.",
        "With(a_1, a_2) ::: Ed is with Shari.",
        "InBathroom(a_2, b_0) ::: Shari is in the women's bathroom.",
        "Chases(a_1, a_2) ::: Ed chases Shari.",
        "StaysWith(a_2, a_0) ::: Shari stays with her brother.",
        "FamilyFilmed(a_0) ::: Ed's family is being filmed.",
        "InterestingPerson(a_0) ::: The most interesting person is being shown."
      ],
      "premises": [
        "Disheartened(a_1) ∧ Depressed(a_1) ::: Ed becomes disheartened and is depressed after the funeral.",
        "Chases(a_1, a_2) ∧ InBathroom(a_2, b_0) ::: Ed chases Shari until she stops in the women's bathroom.",
        "WantsToEndShow(a_1) ∧ With(a_1, a_2) ::: Ed wants to end the show to be with Shari.",
        "StaysWith(a_2, a_0) ::: Shari is staying with her brother for his birthday.",
        "FamilyFilmed(a_0) ∧ InterestingPerson(a_0) ::: All of Ed's family are being filmed, but they show the most interesting person.",
        "Conclusion:",
        "WantsToEndShow(a_1) ::: Ed wants to end the show to be with Shari."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 774,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 6,
      "paragraph": "After the camera crew finally leaves Ed's apartment, he and Shari renew their relationship and celebrate the fact that TV news panelists predict Ed will be forgotten in a short period of time.",
      "question_template": "EDtv is associated with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Ed",
        "Shari",
        "TV news panelists"
      ],
      "predicates": [
        "RenewRelationship(x, y) ::: x and y renew their relationship.",
        "Celebrate(x) ::: x celebrates something.",
        "Predict(x, y) ::: x predicts y.",
        "Forgotten(x) ::: x is forgotten."
      ],
      "premises": [
        "RenewRelationship(a_1, a_2) ::: Ed and Shari renew their relationship.",
        "Celebrate(a_1) ::: Ed celebrates the fact that TV news panelists predict Ed will be forgotten in a short period of time.",
        "Predict(c, Forgotten(a_1)) ::: TV news panelists predict that Ed will be forgotten."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "775": [
    {
      "id": 775,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 4,
      "paragraph": "After the funeral, Ed becomes disheartened by the fact that the producers want him to stay on longer and that he cannot do anything to change their minds or he would be in breach of his contract. Ed is depressed until he catches a glimpse of Shari (in disguise wearing a wig and sunglasses). He chases her for a long time until she stops in the women's bathroom in a movie theater. She says she is staying with her brother as it is his birthday and she just wanted to see Ed. Ed vows to find a way to end the show to be with Shari. When Ed exits, one camera man stays with Shari saying that it is the producers' new idea. The main camera man tells him that all his family are being filmed, but they show the most interesting person.",
      "question_template": "A TV producer named Cynthia thought the idea of interviewing a normal person 24/7 for True TV.",
      "candidate_answers": [
        "The producers' new idea",
        "All his family are being filmed, but they show the most interesting person"
      ],
      "predicates": [
        "Disheartened(a_1) ::: Ed is disheartened.",
        "Depressed(a_1) ::: Ed is depressed.",
        "WantsToEndShow(a_1) ::: Ed wants to end the show.",
        "With(a_1, a_2) ::: Ed is with Shari.",
        "InBathroom(a_2, b_0) ::: Shari is in the women's bathroom.",
        "Chases(a_1, a_2) ::: Ed chases Shari.",
        "StaysWith(a_2, a_0) ::: Shari stays with her brother.",
        "FamilyFilmed(a_0) ::: Ed's family is being filmed.",
        "InterestingPerson(a_0) ::: The most interesting person is being shown."
      ],
      "premises": [
        "Disheartened(a_1) ∧ Depressed(a_1) ::: Ed becomes disheartened and is depressed after the funeral.",
        "Chases(a_1, a_2) ∧ InBathroom(a_2, b_0) ::: Ed chases Shari until she stops in the women's bathroom.",
        "WantsToEndShow(a_1) ∧ With(a_1, a_2) ::: Ed wants to end the show to be with Shari.",
        "StaysWith(a_2, a_0) ::: Shari is staying with her brother for his birthday.",
        "FamilyFilmed(a_0) ∧ InterestingPerson(a_0) ::: All of Ed's family are being filmed, but they show the most interesting person.",
        "Conclusion:",
        "WantsToEndShow(a_1) ::: Ed wants to end the show to be with Shari."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "776": [
    {
      "id": 776,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 2,
      "paragraph": "Ed then goes on The Tonight Show with Jay Leno and meets beautiful model/actress Jill (Elizabeth Hurley) who takes a liking to Ed. Ed then visits Shari and she tells Ed that she does not want to be with him until the Show stops airing. She then leaves town. Ed goes to the park with Ray and some friends to play football when Jill comes to talk to him, because Cynthia brought her in to earn more ratings. She invites Ed to dinner at her house. When he arrives at Jill's house, there is a massive crowd. They have a small talk, and then they kiss on top of a table. They are about to have sex, but then Ed falls off the table and squishes Jill's cat. Ed never sees Jill again.",
      "question_template": "[[CANDIDATE_ANSWER]] is how Edtv became popular.",
      "candidate_answers": [
        "Shari",
        "Jill"
      ],
      "predicates": [
        "GoesOnShow(x, y) ::: x goes on the show y.",
        "Meets(x, y) ::: x meets y.",
        "Likes(x, y) ::: x takes a liking to y.",
        "WantsToBeWith(x, y) ::: x wants to be with y.",
        "LeavesTown(x) ::: x leaves town.",
        "PlaysFootball(x) ::: x plays football.",
        "Invites(x, y) ::: x invites y to dinner.",
        "Kisses(x, y) ::: x kisses y.",
        "FallsOffTable(x) ::: x falls off the table.",
        "Squishes(x, y) ::: x squishes y.",
        "NeverSees(x, y) ::: x never sees y again."
      ],
      "premises": [
        "GoesOnShow(a_1, \"The Tonight Show with Jay Leno\") ::: Ed goes on The Tonight Show with Jay Leno.",
        "Meets(a_1, a_2) ::: Ed meets beautiful model/actress Jill (Elizabeth Hurley).",
        "Likes(a_2, a_1) ::: Jill takes a liking to Ed.",
        "WantsToBeWith(a_2, a_1) ::: Shari tells Ed that she does not want to be with him until the Show stops airing.",
        "LeavesTown(a_2) ::: Shari leaves town.",
        "PlaysFootball(a_1) ::: Ed goes to the park with Ray and some friends to play football.",
        "Invites(a_2, a_1) ::: Jill invites Ed to dinner at her house.",
        "FallsOffTable(a_1) ::: Ed falls off the table.",
        "Squishes(a_1, \"Jill's cat\") ::: Ed squishes Jill's cat.",
        "NeverSees(a_1, a_2) ::: Ed never sees Jill again.",
        "¬(Likes(a_1, a_2)) ::: Ed does not have a relationship with Jill after the incident."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 776,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 5,
      "paragraph": "Ed gets an idea on how to stop the main producer from showing the show: he says that he will give $10,000 to the person who can give him the best amount of \"dirt\" on the producers and that he will announce it live, with the desired result being they stop airing the show before he can make the announcement. As Cynthia feels sorry for Ed, she tells him a secret of the main producer. Ed announces the secret (that the man has to pump a liquid into his penis to get an erection) but before he can announce who it is they stop airing the show.",
      "question_template": "[[CANDIDATE_ANSWER]] is how Edtv became popular.",
      "candidate_answers": [
        "Cynthia"
      ],
      "predicates": [
        "Gives(x, y, z) ::: x gives y to z.",
        "BestDirt(x, y) ::: x provides the best amount of \"dirt\" on y.",
        "Announces(x, y) ::: x announces y.",
        "FeelsSorryFor(x, y) ::: x feels sorry for y.",
        "Secret(x, y) ::: x is a secret of y.",
        "StopsAiring(x) ::: x stops airing the show.",
        "LiquidPump(x) ::: x pumps a liquid into his penis to get an erection."
      ],
      "premises": [
        "Gives(a_1, 10000, a_0) ::: Ed offers $10,000 to the person who can give him the best amount of \"dirt\" on the producers.",
        "BestDirt(a_0, producers) ::: The person provides the best amount of \"dirt\" on the producers.",
        "Announces(a_1, secret) ::: Ed announces the secret.",
        "FeelsSorryFor(a_2, a_1) ::: Cynthia feels sorry for Ed.",
        "Secret(secret, a_2) ::: The secret is that the main producer has to pump a liquid into his penis to get an erection.",
        "StopsAiring(show) ::: They stop airing the show before Ed can announce who it is.",
        "Conclusion:",
        "¬Announces(a_1, whoItIs) ::: Ed does not announce who it is before they stop airing the show."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 776,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 6,
      "paragraph": "After the camera crew finally leaves Ed's apartment, he and Shari renew their relationship and celebrate the fact that TV news panelists predict Ed will be forgotten in a short period of time.",
      "question_template": "[[CANDIDATE_ANSWER]] is how Edtv became popular.",
      "candidate_answers": [
        "Ed's apartment",
        "Shari"
      ],
      "predicates": [
        "RenewRelationship(x, y) ::: x and y renew their relationship.",
        "Celebrate(x) ::: x celebrates something.",
        "Predict(x, y) ::: x predicts y.",
        "Forgotten(x) ::: x is forgotten."
      ],
      "premises": [
        "RenewRelationship(a_1, a_2) ::: Ed and Shari renew their relationship.",
        "Celebrate(a_1) ::: Ed celebrates the fact that TV news panelists predict Ed will be forgotten in a short period of time.",
        "Predict(c, Forgotten(a_1)) ::: TV news panelists predict that Ed will be forgotten."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "777": [
    {
      "id": 777,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 2,
      "paragraph": "Ed then goes on The Tonight Show with Jay Leno and meets beautiful model/actress Jill (Elizabeth Hurley) who takes a liking to Ed. Ed then visits Shari and she tells Ed that she does not want to be with him until the Show stops airing. She then leaves town. Ed goes to the park with Ray and some friends to play football when Jill comes to talk to him, because Cynthia brought her in to earn more ratings. She invites Ed to dinner at her house. When he arrives at Jill's house, there is a massive crowd. They have a small talk, and then they kiss on top of a table. They are about to have sex, but then Ed falls off the table and squishes Jill's cat. Ed never sees Jill again.",
      "question_template": "Ed's feelings for Shari were [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Cynthia brought her in to earn more ratings"
      ],
      "predicates": [
        "GoesOnShow(x, y) ::: x goes on the show y.",
        "Meets(x, y) ::: x meets y.",
        "Likes(x, y) ::: x takes a liking to y.",
        "WantsToBeWith(x, y) ::: x wants to be with y.",
        "LeavesTown(x) ::: x leaves town.",
        "PlaysFootball(x) ::: x plays football.",
        "Invites(x, y) ::: x invites y to dinner.",
        "Kisses(x, y) ::: x kisses y.",
        "FallsOffTable(x) ::: x falls off the table.",
        "Squishes(x, y) ::: x squishes y.",
        "NeverSees(x, y) ::: x never sees y again."
      ],
      "premises": [
        "GoesOnShow(a_1, \"The Tonight Show with Jay Leno\") ::: Ed goes on The Tonight Show with Jay Leno.",
        "Meets(a_1, a_2) ::: Ed meets beautiful model/actress Jill (Elizabeth Hurley).",
        "Likes(a_2, a_1) ::: Jill takes a liking to Ed.",
        "WantsToBeWith(a_2, a_1) ::: Shari tells Ed that she does not want to be with him until the Show stops airing.",
        "LeavesTown(a_2) ::: Shari leaves town.",
        "PlaysFootball(a_1) ::: Ed goes to the park with Ray and some friends to play football.",
        "Invites(a_2, a_1) ::: Jill invites Ed to dinner at her house.",
        "FallsOffTable(a_1) ::: Ed falls off the table.",
        "Squishes(a_1, \"Jill's cat\") ::: Ed squishes Jill's cat.",
        "NeverSees(a_1, a_2) ::: Ed never sees Jill again.",
        "¬(Likes(a_1, a_2)) ::: Ed does not have a relationship with Jill after the incident."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "778": [
    {
      "id": 778,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 0,
      "paragraph": " EDtv starts off with the television channel True TV commencing interviews for a TV show that shows a normal person's life 24/7. This idea was thought up by a TV producer named Cynthia (Ellen DeGeneres). They interview Ed Pekurny (Matthew McConaughey) and his brother, Ray (Woody Harrelson). When the producers see the interview Cynthia decides to use Ed and interviews only Ed. So now they start airing the show, which they call Ed TV. The show is a total failure at first, as only boring things happen and the main producers want to pull the plug, except for Cynthia.",
      "question_template": "Cynthia decided to drop Ray from the show because of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The show is a total failure at first",
        "Only boring things happen",
        "The main producers want to pull the plug, except for Cynthia"
      ],
      "predicates": [
        "Producer(x) ::: x is a TV producer.",
        "Interview(x, y) ::: x interviews y.",
        "Airing(x) ::: x is airing a show.",
        "Failure(x) ::: x is a total failure.",
        "BelievesIn(x, y) ::: x believes in the potential of y.",
        "Show(x) ::: x is a TV show.",
        "NormalPerson(x) ::: x is a normal person.",
        "BoringThings(x) ::: x involves boring things."
      ],
      "premises": [
        "Producer(cynthia) ::: Cynthia is a TV producer.",
        "Interview(cynthia, ed) ::: Cynthia interviews Ed Pekurny.",
        "Airing(edTV) ::: They start airing the show, which they call Ed TV.",
        "Failure(edTV) ::: The show is a total failure at first.",
        "BelievesIn(cynthia, edTV) ::: Cynthia believes in the potential of Ed TV despite its initial failure.",
        "NormalPerson(ed) ::: Ed Pekurny is a normal person.",
        "BoringThings(edTV) ::: Ed TV involves boring things.",
        "Conclusion:",
        "¬Failure(edTV) ::: Ed TV is not a total failure in the long run due to Cynthia's belief in its potential."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 778,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 5,
      "paragraph": "Ed gets an idea on how to stop the main producer from showing the show: he says that he will give $10,000 to the person who can give him the best amount of \"dirt\" on the producers and that he will announce it live, with the desired result being they stop airing the show before he can make the announcement. As Cynthia feels sorry for Ed, she tells him a secret of the main producer. Ed announces the secret (that the man has to pump a liquid into his penis to get an erection) but before he can announce who it is they stop airing the show.",
      "question_template": "Cynthia decided to drop Ray from the show because of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Cynthia feels sorry for Ed",
        "They stop airing the show"
      ],
      "predicates": [
        "Gives(x, y, z) ::: x gives y to z.",
        "BestDirt(x, y) ::: x provides the best amount of \"dirt\" on y.",
        "Announces(x, y) ::: x announces y.",
        "FeelsSorryFor(x, y) ::: x feels sorry for y.",
        "Secret(x, y) ::: x is a secret of y.",
        "StopsAiring(x) ::: x stops airing the show.",
        "LiquidPump(x) ::: x pumps a liquid into his penis to get an erection."
      ],
      "premises": [
        "Gives(a_1, 10000, a_0) ::: Ed offers $10,000 to the person who can give him the best amount of \"dirt\" on the producers.",
        "BestDirt(a_0, producers) ::: The person provides the best amount of \"dirt\" on the producers.",
        "Announces(a_1, secret) ::: Ed announces the secret.",
        "FeelsSorryFor(a_2, a_1) ::: Cynthia feels sorry for Ed.",
        "Secret(secret, a_2) ::: The secret is that the main producer has to pump a liquid into his penis to get an erection.",
        "StopsAiring(show) ::: They stop airing the show before Ed can announce who it is.",
        "Conclusion:",
        "¬Announces(a_1, whoItIs) ::: Ed does not announce who it is before they stop airing the show."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "779": [
    {
      "id": 779,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 0,
      "paragraph": " EDtv starts off with the television channel True TV commencing interviews for a TV show that shows a normal person's life 24/7. This idea was thought up by a TV producer named Cynthia (Ellen DeGeneres). They interview Ed Pekurny (Matthew McConaughey) and his brother, Ray (Woody Harrelson). When the producers see the interview Cynthia decides to use Ed and interviews only Ed. So now they start airing the show, which they call Ed TV. The show is a total failure at first, as only boring things happen and the main producers want to pull the plug, except for Cynthia.",
      "question_template": "Shari left Ed because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "No relevant information found in the paragraph."
      ],
      "predicates": [
        "Producer(x) ::: x is a TV producer.",
        "Interview(x, y) ::: x interviews y.",
        "Airing(x) ::: x is airing a show.",
        "Failure(x) ::: x is a total failure.",
        "BelievesIn(x, y) ::: x believes in the potential of y.",
        "Show(x) ::: x is a TV show.",
        "NormalPerson(x) ::: x is a normal person.",
        "BoringThings(x) ::: x involves boring things."
      ],
      "premises": [
        "Producer(cynthia) ::: Cynthia is a TV producer.",
        "Interview(cynthia, ed) ::: Cynthia interviews Ed Pekurny.",
        "Airing(edTV) ::: They start airing the show, which they call Ed TV.",
        "Failure(edTV) ::: The show is a total failure at first.",
        "BelievesIn(cynthia, edTV) ::: Cynthia believes in the potential of Ed TV despite its initial failure.",
        "NormalPerson(ed) ::: Ed Pekurny is a normal person.",
        "BoringThings(edTV) ::: Ed TV involves boring things.",
        "Conclusion:",
        "¬Failure(edTV) ::: Ed TV is not a total failure in the long run due to Cynthia's belief in its potential."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 779,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 2,
      "paragraph": "Ed then goes on The Tonight Show with Jay Leno and meets beautiful model/actress Jill (Elizabeth Hurley) who takes a liking to Ed. Ed then visits Shari and she tells Ed that she does not want to be with him until the Show stops airing. She then leaves town. Ed goes to the park with Ray and some friends to play football when Jill comes to talk to him, because Cynthia brought her in to earn more ratings. She invites Ed to dinner at her house. When he arrives at Jill's house, there is a massive crowd. They have a small talk, and then they kiss on top of a table. They are about to have sex, but then Ed falls off the table and squishes Jill's cat. Ed never sees Jill again.",
      "question_template": "Shari left Ed because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Shari leaves town"
      ],
      "predicates": [
        "GoesOnShow(x, y) ::: x goes on the show y.",
        "Meets(x, y) ::: x meets y.",
        "Likes(x, y) ::: x takes a liking to y.",
        "WantsToBeWith(x, y) ::: x wants to be with y.",
        "LeavesTown(x) ::: x leaves town.",
        "PlaysFootball(x) ::: x plays football.",
        "Invites(x, y) ::: x invites y to dinner.",
        "Kisses(x, y) ::: x kisses y.",
        "FallsOffTable(x) ::: x falls off the table.",
        "Squishes(x, y) ::: x squishes y.",
        "NeverSees(x, y) ::: x never sees y again."
      ],
      "premises": [
        "GoesOnShow(a_1, \"The Tonight Show with Jay Leno\") ::: Ed goes on The Tonight Show with Jay Leno.",
        "Meets(a_1, a_2) ::: Ed meets beautiful model/actress Jill (Elizabeth Hurley).",
        "Likes(a_2, a_1) ::: Jill takes a liking to Ed.",
        "WantsToBeWith(a_2, a_1) ::: Shari tells Ed that she does not want to be with him until the Show stops airing.",
        "LeavesTown(a_2) ::: Shari leaves town.",
        "PlaysFootball(a_1) ::: Ed goes to the park with Ray and some friends to play football.",
        "Invites(a_2, a_1) ::: Jill invites Ed to dinner at her house.",
        "FallsOffTable(a_1) ::: Ed falls off the table.",
        "Squishes(a_1, \"Jill's cat\") ::: Ed squishes Jill's cat.",
        "NeverSees(a_1, a_2) ::: Ed never sees Jill again.",
        "¬(Likes(a_1, a_2)) ::: Ed does not have a relationship with Jill after the incident."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "781": [
    {
      "id": 781,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 0,
      "paragraph": " EDtv starts off with the television channel True TV commencing interviews for a TV show that shows a normal person's life 24/7. This idea was thought up by a TV producer named Cynthia (Ellen DeGeneres). They interview Ed Pekurny (Matthew McConaughey) and his brother, Ray (Woody Harrelson). When the producers see the interview Cynthia decides to use Ed and interviews only Ed. So now they start airing the show, which they call Ed TV. The show is a total failure at first, as only boring things happen and the main producers want to pull the plug, except for Cynthia.",
      "question_template": "Shari left Ed because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The show is a total failure at first",
        "Only boring things happen",
        "The main producers want to pull the plug"
      ],
      "predicates": [
        "Producer(x) ::: x is a TV producer.",
        "Interview(x, y) ::: x interviews y.",
        "Airing(x) ::: x is airing a show.",
        "Failure(x) ::: x is a total failure.",
        "BelievesIn(x, y) ::: x believes in the potential of y.",
        "Show(x) ::: x is a TV show.",
        "NormalPerson(x) ::: x is a normal person.",
        "BoringThings(x) ::: x involves boring things."
      ],
      "premises": [
        "Producer(cynthia) ::: Cynthia is a TV producer.",
        "Interview(cynthia, ed) ::: Cynthia interviews Ed Pekurny.",
        "Airing(edTV) ::: They start airing the show, which they call Ed TV.",
        "Failure(edTV) ::: The show is a total failure at first.",
        "BelievesIn(cynthia, edTV) ::: Cynthia believes in the potential of Ed TV despite its initial failure.",
        "NormalPerson(ed) ::: Ed Pekurny is a normal person.",
        "BoringThings(edTV) ::: Ed TV involves boring things.",
        "Conclusion:",
        "¬Failure(edTV) ::: Ed TV is not a total failure in the long run due to Cynthia's belief in its potential."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 781,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 1,
      "paragraph": "However, Ed TV suddenly gets interesting on Day 3 when Ed visits Ray. Ed (along with the cameramen) discovers that Ray is cheating on his girlfriend Shari (Jenna Elfman). Ed then visits Shari to apologize to her for Ray's actions. Shari is very drunk and starts insulting Ray, by talking to the camera. She makes everyone laugh and gasp by saying \"Ray was a bad lay.\" Ed tries to comfort Shari, and he reveals he has feelings for her. She then reveals she has feelings for Ed as well. They slowly move their faces closer and finally kiss each other. Ed then locks out the camera crew and proceeds to passionately kiss Shari for a while. Ed TV suddenly becomes extremely popular. On Cynthia's insistence, Ed starts a relationship with Shari, which is short lived as Ed grows more interested in staying on TV and Shari is abused by viewers who find her unappealing.",
      "question_template": "Shari left Ed because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Ed starts a relationship with Shari",
        "- Ed grows more interested in staying on TV",
        "- Shari is abused by viewers who find her unappealing"
      ],
      "predicates": [
        "Popular(x) ::: x is extremely popular.",
        "InRelationship(x, y) ::: x is in a relationship with y.",
        "Cheating(x, y) ::: x is cheating on y.",
        "Insulting(x, y) ::: x is insulting y.",
        "Comfort(x, y) ::: x is comforting y.",
        "HasFeelingsFor(x, y) ::: x has feelings for y.",
        "Kiss(x, y) ::: x kisses y.",
        "LocksOut(x, y) ::: x locks out y.",
        "ShortLived(x, y) ::: x and y's relationship is short-lived.",
        "GrowingInterest(x, y) ::: x is growing more interested in y.",
        "Unappealing(x) ::: x is perceived as unappealing by viewers."
      ],
      "premises": [
        "Cheating(ray, shari) ::: Ray is cheating on his girlfriend Shari.",
        "Insulting(shari, ray) ::: Shari is insulting Ray.",
        "Comfort(ed, shari) ::: Ed tries to comfort Shari.",
        "HasFeelingsFor(ed, shari) ::: Ed reveals he has feelings for Shari.",
        "HasFeelingsFor(shari, ed) ::: Shari reveals she has feelings for Ed.",
        "Kiss(ed, shari) ::: Ed and Shari kiss each other.",
        "LocksOut(ed, cameramen) ::: Ed locks out the camera crew.",
        "Popular(edTV) ::: Ed TV suddenly becomes extremely popular.",
        "InRelationship(ed, shari) ::: Ed starts a relationship with Shari.",
        "ShortLived(ed, shari) ::: Ed and Shari's relationship is short-lived.",
        "GrowingInterest(ed, stayingOnTV) ::: Ed grows more interested in staying on TV.",
        "Unappealing(shari) ::: Shari is perceived as unappealing by viewers."
      ],
      "conclusions": [
        "None",
        "GrowingInterest(ed, stayingOnTV) → ¬InRelationship(ed, shari)",
        "Unappealing(shari) → AbusedByViewers(shari)"
      ]
    },
    {
      "id": 781,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 2,
      "paragraph": "Ed then goes on The Tonight Show with Jay Leno and meets beautiful model/actress Jill (Elizabeth Hurley) who takes a liking to Ed. Ed then visits Shari and she tells Ed that she does not want to be with him until the Show stops airing. She then leaves town. Ed goes to the park with Ray and some friends to play football when Jill comes to talk to him, because Cynthia brought her in to earn more ratings. She invites Ed to dinner at her house. When he arrives at Jill's house, there is a massive crowd. They have a small talk, and then they kiss on top of a table. They are about to have sex, but then Ed falls off the table and squishes Jill's cat. Ed never sees Jill again.",
      "question_template": "Shari left Ed because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Shari tells Ed that she does not want to be with him until the Show stops airing."
      ],
      "predicates": [
        "GoesOnShow(x, y) ::: x goes on the show y.",
        "Meets(x, y) ::: x meets y.",
        "Likes(x, y) ::: x takes a liking to y.",
        "WantsToBeWith(x, y) ::: x wants to be with y.",
        "LeavesTown(x) ::: x leaves town.",
        "PlaysFootball(x) ::: x plays football.",
        "Invites(x, y) ::: x invites y to dinner.",
        "Kisses(x, y) ::: x kisses y.",
        "FallsOffTable(x) ::: x falls off the table.",
        "Squishes(x, y) ::: x squishes y.",
        "NeverSees(x, y) ::: x never sees y again."
      ],
      "premises": [
        "GoesOnShow(a_1, \"The Tonight Show with Jay Leno\") ::: Ed goes on The Tonight Show with Jay Leno.",
        "Meets(a_1, a_2) ::: Ed meets beautiful model/actress Jill (Elizabeth Hurley).",
        "Likes(a_2, a_1) ::: Jill takes a liking to Ed.",
        "WantsToBeWith(a_2, a_1) ::: Shari tells Ed that she does not want to be with him until the Show stops airing.",
        "LeavesTown(a_2) ::: Shari leaves town.",
        "PlaysFootball(a_1) ::: Ed goes to the park with Ray and some friends to play football.",
        "Invites(a_2, a_1) ::: Jill invites Ed to dinner at her house.",
        "FallsOffTable(a_1) ::: Ed falls off the table.",
        "Squishes(a_1, \"Jill's cat\") ::: Ed squishes Jill's cat.",
        "NeverSees(a_1, a_2) ::: Ed never sees Jill again.",
        "¬(Likes(a_1, a_2)) ::: Ed does not have a relationship with Jill after the incident."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 781,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 4,
      "paragraph": "After the funeral, Ed becomes disheartened by the fact that the producers want him to stay on longer and that he cannot do anything to change their minds or he would be in breach of his contract. Ed is depressed until he catches a glimpse of Shari (in disguise wearing a wig and sunglasses). He chases her for a long time until she stops in the women's bathroom in a movie theater. She says she is staying with her brother as it is his birthday and she just wanted to see Ed. Ed vows to find a way to end the show to be with Shari. When Ed exits, one camera man stays with Shari saying that it is the producers' new idea. The main camera man tells him that all his family are being filmed, but they show the most interesting person.",
      "question_template": "Shari left Ed because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Ed becomes disheartened by the fact that the producers want him to stay on longer",
        "- Ed is depressed until he catches a glimpse of Shari",
        "- Ed vows to find a way to end the show to be with Shari"
      ],
      "predicates": [
        "Disheartened(a_1) ::: Ed is disheartened.",
        "Depressed(a_1) ::: Ed is depressed.",
        "WantsToEndShow(a_1) ::: Ed wants to end the show.",
        "With(a_1, a_2) ::: Ed is with Shari.",
        "InBathroom(a_2, b_0) ::: Shari is in the women's bathroom.",
        "Chases(a_1, a_2) ::: Ed chases Shari.",
        "StaysWith(a_2, a_0) ::: Shari stays with her brother.",
        "FamilyFilmed(a_0) ::: Ed's family is being filmed.",
        "InterestingPerson(a_0) ::: The most interesting person is being shown."
      ],
      "premises": [
        "Disheartened(a_1) ∧ Depressed(a_1) ::: Ed becomes disheartened and is depressed after the funeral.",
        "Chases(a_1, a_2) ∧ InBathroom(a_2, b_0) ::: Ed chases Shari until she stops in the women's bathroom.",
        "WantsToEndShow(a_1) ∧ With(a_1, a_2) ::: Ed wants to end the show to be with Shari.",
        "StaysWith(a_2, a_0) ::: Shari is staying with her brother for his birthday.",
        "FamilyFilmed(a_0) ∧ InterestingPerson(a_0) ::: All of Ed's family are being filmed, but they show the most interesting person.",
        "Conclusion:",
        "WantsToEndShow(a_1) ::: Ed wants to end the show to be with Shari."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "782": [
    {
      "id": 782,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 0,
      "paragraph": " EDtv starts off with the television channel True TV commencing interviews for a TV show that shows a normal person's life 24/7. This idea was thought up by a TV producer named Cynthia (Ellen DeGeneres). They interview Ed Pekurny (Matthew McConaughey) and his brother, Ray (Woody Harrelson). When the producers see the interview Cynthia decides to use Ed and interviews only Ed. So now they start airing the show, which they call Ed TV. The show is a total failure at first, as only boring things happen and the main producers want to pull the plug, except for Cynthia.",
      "question_template": "[[CANDIDATE_ANSWER]] helped Ed in airing off the show.",
      "candidate_answers": [
        "The show is a total failure at first",
        "The main producers want to pull the plug"
      ],
      "predicates": [
        "Producer(x) ::: x is a TV producer.",
        "Interview(x, y) ::: x interviews y.",
        "Airing(x) ::: x is airing a show.",
        "Failure(x) ::: x is a total failure.",
        "BelievesIn(x, y) ::: x believes in the potential of y.",
        "Show(x) ::: x is a TV show.",
        "NormalPerson(x) ::: x is a normal person.",
        "BoringThings(x) ::: x involves boring things."
      ],
      "premises": [
        "Producer(cynthia) ::: Cynthia is a TV producer.",
        "Interview(cynthia, ed) ::: Cynthia interviews Ed Pekurny.",
        "Airing(edTV) ::: They start airing the show, which they call Ed TV.",
        "Failure(edTV) ::: The show is a total failure at first.",
        "BelievesIn(cynthia, edTV) ::: Cynthia believes in the potential of Ed TV despite its initial failure.",
        "NormalPerson(ed) ::: Ed Pekurny is a normal person.",
        "BoringThings(edTV) ::: Ed TV involves boring things.",
        "Conclusion:",
        "¬Failure(edTV) ::: Ed TV is not a total failure in the long run due to Cynthia's belief in its potential."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 782,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 6,
      "paragraph": "After the camera crew finally leaves Ed's apartment, he and Shari renew their relationship and celebrate the fact that TV news panelists predict Ed will be forgotten in a short period of time.",
      "question_template": "[[CANDIDATE_ANSWER]] helped Ed in airing off the show.",
      "candidate_answers": [
        "TV news panelists predict Ed will be forgotten in a short period of time."
      ],
      "predicates": [
        "RenewRelationship(x, y) ::: x and y renew their relationship.",
        "Celebrate(x) ::: x celebrates something.",
        "Predict(x, y) ::: x predicts y.",
        "Forgotten(x) ::: x is forgotten."
      ],
      "premises": [
        "RenewRelationship(a_1, a_2) ::: Ed and Shari renew their relationship.",
        "Celebrate(a_1) ::: Ed celebrates the fact that TV news panelists predict Ed will be forgotten in a short period of time.",
        "Predict(c, Forgotten(a_1)) ::: TV news panelists predict that Ed will be forgotten."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "783": [
    {
      "id": 783,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 0,
      "paragraph": " EDtv starts off with the television channel True TV commencing interviews for a TV show that shows a normal person's life 24/7. This idea was thought up by a TV producer named Cynthia (Ellen DeGeneres). They interview Ed Pekurny (Matthew McConaughey) and his brother, Ray (Woody Harrelson). When the producers see the interview Cynthia decides to use Ed and interviews only Ed. So now they start airing the show, which they call Ed TV. The show is a total failure at first, as only boring things happen and the main producers want to pull the plug, except for Cynthia.",
      "question_template": "The name of the TV show that Ed is the star of is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "A TV show that shows a normal person's life 24/7",
        "The idea was thought up by a TV producer named Cynthia"
      ],
      "predicates": [
        "Producer(x) ::: x is a TV producer.",
        "Interview(x, y) ::: x interviews y.",
        "Airing(x) ::: x is airing a show.",
        "Failure(x) ::: x is a total failure.",
        "BelievesIn(x, y) ::: x believes in the potential of y.",
        "Show(x) ::: x is a TV show.",
        "NormalPerson(x) ::: x is a normal person.",
        "BoringThings(x) ::: x involves boring things."
      ],
      "premises": [
        "Producer(cynthia) ::: Cynthia is a TV producer.",
        "Interview(cynthia, ed) ::: Cynthia interviews Ed Pekurny.",
        "Airing(edTV) ::: They start airing the show, which they call Ed TV.",
        "Failure(edTV) ::: The show is a total failure at first.",
        "BelievesIn(cynthia, edTV) ::: Cynthia believes in the potential of Ed TV despite its initial failure.",
        "NormalPerson(ed) ::: Ed Pekurny is a normal person.",
        "BoringThings(edTV) ::: Ed TV involves boring things.",
        "Conclusion:",
        "¬Failure(edTV) ::: Ed TV is not a total failure in the long run due to Cynthia's belief in its potential."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 783,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 4,
      "paragraph": "After the funeral, Ed becomes disheartened by the fact that the producers want him to stay on longer and that he cannot do anything to change their minds or he would be in breach of his contract. Ed is depressed until he catches a glimpse of Shari (in disguise wearing a wig and sunglasses). He chases her for a long time until she stops in the women's bathroom in a movie theater. She says she is staying with her brother as it is his birthday and she just wanted to see Ed. Ed vows to find a way to end the show to be with Shari. When Ed exits, one camera man stays with Shari saying that it is the producers' new idea. The main camera man tells him that all his family are being filmed, but they show the most interesting person.",
      "question_template": "The name of the TV show that Ed is the star of is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The producers want him to stay on longer",
        "The main camera man tells him that all his family are being filmed, but they show the most interesting person"
      ],
      "predicates": [
        "Disheartened(a_1) ::: Ed is disheartened.",
        "Depressed(a_1) ::: Ed is depressed.",
        "WantsToEndShow(a_1) ::: Ed wants to end the show.",
        "With(a_1, a_2) ::: Ed is with Shari.",
        "InBathroom(a_2, b_0) ::: Shari is in the women's bathroom.",
        "Chases(a_1, a_2) ::: Ed chases Shari.",
        "StaysWith(a_2, a_0) ::: Shari stays with her brother.",
        "FamilyFilmed(a_0) ::: Ed's family is being filmed.",
        "InterestingPerson(a_0) ::: The most interesting person is being shown."
      ],
      "premises": [
        "Disheartened(a_1) ∧ Depressed(a_1) ::: Ed becomes disheartened and is depressed after the funeral.",
        "Chases(a_1, a_2) ∧ InBathroom(a_2, b_0) ::: Ed chases Shari until she stops in the women's bathroom.",
        "WantsToEndShow(a_1) ∧ With(a_1, a_2) ::: Ed wants to end the show to be with Shari.",
        "StaysWith(a_2, a_0) ::: Shari is staying with her brother for his birthday.",
        "FamilyFilmed(a_0) ∧ InterestingPerson(a_0) ::: All of Ed's family are being filmed, but they show the most interesting person.",
        "Conclusion:",
        "WantsToEndShow(a_1) ::: Ed wants to end the show to be with Shari."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "784": [
    {
      "id": 784,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 1,
      "paragraph": "However, Ed TV suddenly gets interesting on Day 3 when Ed visits Ray. Ed (along with the cameramen) discovers that Ray is cheating on his girlfriend Shari (Jenna Elfman). Ed then visits Shari to apologize to her for Ray's actions. Shari is very drunk and starts insulting Ray, by talking to the camera. She makes everyone laugh and gasp by saying \"Ray was a bad lay.\" Ed tries to comfort Shari, and he reveals he has feelings for her. She then reveals she has feelings for Ed as well. They slowly move their faces closer and finally kiss each other. Ed then locks out the camera crew and proceeds to passionately kiss Shari for a while. Ed TV suddenly becomes extremely popular. On Cynthia's insistence, Ed starts a relationship with Shari, which is short lived as Ed grows more interested in staying on TV and Shari is abused by viewers who find her unappealing.",
      "question_template": "Ed squishes [[CANDIDATE_ANSWER]] by falling off of a table.",
      "candidate_answers": [
        "- To apologize to her for Ray's actions",
        "- He reveals he has feelings for her"
      ],
      "predicates": [
        "Popular(x) ::: x is extremely popular.",
        "InRelationship(x, y) ::: x is in a relationship with y.",
        "Cheating(x, y) ::: x is cheating on y.",
        "Insulting(x, y) ::: x is insulting y.",
        "Comfort(x, y) ::: x is comforting y.",
        "HasFeelingsFor(x, y) ::: x has feelings for y.",
        "Kiss(x, y) ::: x kisses y.",
        "LocksOut(x, y) ::: x locks out y.",
        "ShortLived(x, y) ::: x and y's relationship is short-lived.",
        "GrowingInterest(x, y) ::: x is growing more interested in y.",
        "Unappealing(x) ::: x is perceived as unappealing by viewers."
      ],
      "premises": [
        "Cheating(ray, shari) ::: Ray is cheating on his girlfriend Shari.",
        "Insulting(shari, ray) ::: Shari is insulting Ray.",
        "Comfort(ed, shari) ::: Ed tries to comfort Shari.",
        "HasFeelingsFor(ed, shari) ::: Ed reveals he has feelings for Shari.",
        "HasFeelingsFor(shari, ed) ::: Shari reveals she has feelings for Ed.",
        "Kiss(ed, shari) ::: Ed and Shari kiss each other.",
        "LocksOut(ed, cameramen) ::: Ed locks out the camera crew.",
        "Popular(edTV) ::: Ed TV suddenly becomes extremely popular.",
        "InRelationship(ed, shari) ::: Ed starts a relationship with Shari.",
        "ShortLived(ed, shari) ::: Ed and Shari's relationship is short-lived.",
        "GrowingInterest(ed, stayingOnTV) ::: Ed grows more interested in staying on TV.",
        "Unappealing(shari) ::: Shari is perceived as unappealing by viewers."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 784,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 2,
      "paragraph": "Ed then goes on The Tonight Show with Jay Leno and meets beautiful model/actress Jill (Elizabeth Hurley) who takes a liking to Ed. Ed then visits Shari and she tells Ed that she does not want to be with him until the Show stops airing. She then leaves town. Ed goes to the park with Ray and some friends to play football when Jill comes to talk to him, because Cynthia brought her in to earn more ratings. She invites Ed to dinner at her house. When he arrives at Jill's house, there is a massive crowd. They have a small talk, and then they kiss on top of a table. They are about to have sex, but then Ed falls off the table and squishes Jill's cat. Ed never sees Jill again.",
      "question_template": "Ed squishes [[CANDIDATE_ANSWER]] by falling off of a table.",
      "candidate_answers": [
        "Shari tells Ed that she does not want to be with him until the Show stops airing."
      ],
      "predicates": [
        "GoesOnShow(x, y) ::: x goes on the show y.",
        "Meets(x, y) ::: x meets y.",
        "Likes(x, y) ::: x takes a liking to y.",
        "WantsToBeWith(x, y) ::: x wants to be with y.",
        "LeavesTown(x) ::: x leaves town.",
        "PlaysFootball(x) ::: x plays football.",
        "Invites(x, y) ::: x invites y to dinner.",
        "Kisses(x, y) ::: x kisses y.",
        "FallsOffTable(x) ::: x falls off the table.",
        "Squishes(x, y) ::: x squishes y.",
        "NeverSees(x, y) ::: x never sees y again."
      ],
      "premises": [
        "GoesOnShow(a_1, \"The Tonight Show with Jay Leno\") ::: Ed goes on The Tonight Show with Jay Leno.",
        "Meets(a_1, a_2) ::: Ed meets beautiful model/actress Jill (Elizabeth Hurley).",
        "Likes(a_2, a_1) ::: Jill takes a liking to Ed.",
        "WantsToBeWith(a_2, a_1) ::: Shari tells Ed that she does not want to be with him until the Show stops airing.",
        "LeavesTown(a_2) ::: Shari leaves town.",
        "PlaysFootball(a_1) ::: Ed goes to the park with Ray and some friends to play football.",
        "Invites(a_2, a_1) ::: Jill invites Ed to dinner at her house.",
        "FallsOffTable(a_1) ::: Ed falls off the table.",
        "Squishes(a_1, \"Jill's cat\") ::: Ed squishes Jill's cat.",
        "NeverSees(a_1, a_2) ::: Ed never sees Jill again.",
        "¬(Likes(a_1, a_2)) ::: Ed does not have a relationship with Jill after the incident."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 784,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 6,
      "paragraph": "After the camera crew finally leaves Ed's apartment, he and Shari renew their relationship and celebrate the fact that TV news panelists predict Ed will be forgotten in a short period of time.",
      "question_template": "Ed squishes [[CANDIDATE_ANSWER]] by falling off of a table.",
      "candidate_answers": [
        "He and Shari renew their relationship"
      ],
      "predicates": [
        "RenewRelationship(x, y) ::: x and y renew their relationship.",
        "Celebrate(x) ::: x celebrates something.",
        "Predict(x, y) ::: x predicts y.",
        "Forgotten(x) ::: x is forgotten."
      ],
      "premises": [
        "RenewRelationship(a_1, a_2) ::: Ed and Shari renew their relationship.",
        "Celebrate(a_1) ::: Ed celebrates the fact that TV news panelists predict Ed will be forgotten in a short period of time.",
        "Predict(c, Forgotten(a_1)) ::: TV news panelists predict that Ed will be forgotten."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "785": [
    {
      "id": 785,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 1,
      "paragraph": "However, Ed TV suddenly gets interesting on Day 3 when Ed visits Ray. Ed (along with the cameramen) discovers that Ray is cheating on his girlfriend Shari (Jenna Elfman). Ed then visits Shari to apologize to her for Ray's actions. Shari is very drunk and starts insulting Ray, by talking to the camera. She makes everyone laugh and gasp by saying \"Ray was a bad lay.\" Ed tries to comfort Shari, and he reveals he has feelings for her. She then reveals she has feelings for Ed as well. They slowly move their faces closer and finally kiss each other. Ed then locks out the camera crew and proceeds to passionately kiss Shari for a while. Ed TV suddenly becomes extremely popular. On Cynthia's insistence, Ed starts a relationship with Shari, which is short lived as Ed grows more interested in staying on TV and Shari is abused by viewers who find her unappealing.",
      "question_template": "Ed finds that [[CANDIDATE_ANSWER]] is cheating on their girlfriend.",
      "candidate_answers": [
        "- She then reveals she has feelings for Ed as well.",
        "- They slowly move their faces closer and finally kiss each other.",
        "- Ed then locks out the camera crew and proceeds to passionately kiss Shari for a while.",
        "- Ed TV suddenly becomes extremely popular."
      ],
      "predicates": [
        "Popular(x) ::: x is extremely popular.",
        "InRelationship(x, y) ::: x is in a relationship with y.",
        "Cheating(x, y) ::: x is cheating on y.",
        "Insulting(x, y) ::: x is insulting y.",
        "Comfort(x, y) ::: x is comforting y.",
        "HasFeelingsFor(x, y) ::: x has feelings for y.",
        "Kiss(x, y) ::: x kisses y.",
        "LocksOut(x, y) ::: x locks out y.",
        "ShortLived(x, y) ::: x and y's relationship is short-lived.",
        "GrowingInterest(x, y) ::: x is growing more interested in y.",
        "Unappealing(x) ::: x is perceived as unappealing by viewers."
      ],
      "premises": [
        "Cheating(ray, shari) ::: Ray is cheating on his girlfriend Shari.",
        "Insulting(shari, ray) ::: Shari is insulting Ray.",
        "Comfort(ed, shari) ::: Ed tries to comfort Shari.",
        "HasFeelingsFor(ed, shari) ::: Ed reveals he has feelings for Shari.",
        "HasFeelingsFor(shari, ed) ::: Shari reveals she has feelings for Ed.",
        "Kiss(ed, shari) ::: Ed and Shari kiss each other.",
        "LocksOut(ed, cameramen) ::: Ed locks out the camera crew.",
        "Popular(edTV) ::: Ed TV suddenly becomes extremely popular.",
        "InRelationship(ed, shari) ::: Ed starts a relationship with Shari.",
        "ShortLived(ed, shari) ::: Ed and Shari's relationship is short-lived.",
        "GrowingInterest(ed, stayingOnTV) ::: Ed grows more interested in staying on TV.",
        "Unappealing(shari) ::: Shari is perceived as unappealing by viewers."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 785,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 4,
      "paragraph": "After the funeral, Ed becomes disheartened by the fact that the producers want him to stay on longer and that he cannot do anything to change their minds or he would be in breach of his contract. Ed is depressed until he catches a glimpse of Shari (in disguise wearing a wig and sunglasses). He chases her for a long time until she stops in the women's bathroom in a movie theater. She says she is staying with her brother as it is his birthday and she just wanted to see Ed. Ed vows to find a way to end the show to be with Shari. When Ed exits, one camera man stays with Shari saying that it is the producers' new idea. The main camera man tells him that all his family are being filmed, but they show the most interesting person.",
      "question_template": "Ed finds that [[CANDIDATE_ANSWER]] is cheating on their girlfriend.",
      "candidate_answers": [
        "- Ed vows to find a way to end the show to be with Shari.",
        "- One camera man stays with Shari saying that it is the producers' new idea."
      ],
      "predicates": [
        "Disheartened(a_1) ::: Ed is disheartened.",
        "Depressed(a_1) ::: Ed is depressed.",
        "WantsToEndShow(a_1) ::: Ed wants to end the show.",
        "With(a_1, a_2) ::: Ed is with Shari.",
        "InBathroom(a_2, b_0) ::: Shari is in the women's bathroom.",
        "Chases(a_1, a_2) ::: Ed chases Shari.",
        "StaysWith(a_2, a_0) ::: Shari stays with her brother.",
        "FamilyFilmed(a_0) ::: Ed's family is being filmed.",
        "InterestingPerson(a_0) ::: The most interesting person is being shown."
      ],
      "premises": [
        "Disheartened(a_1) ∧ Depressed(a_1) ::: Ed becomes disheartened and is depressed after the funeral.",
        "Chases(a_1, a_2) ∧ InBathroom(a_2, b_0) ::: Ed chases Shari until she stops in the women's bathroom.",
        "WantsToEndShow(a_1) ∧ With(a_1, a_2) ::: Ed wants to end the show to be with Shari.",
        "StaysWith(a_2, a_0) ::: Shari is staying with her brother for his birthday.",
        "FamilyFilmed(a_0) ∧ InterestingPerson(a_0) ::: All of Ed's family are being filmed, but they show the most interesting person.",
        "Conclusion:",
        "WantsToEndShow(a_1) ::: Ed wants to end the show to be with Shari."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 785,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 6,
      "paragraph": "After the camera crew finally leaves Ed's apartment, he and Shari renew their relationship and celebrate the fact that TV news panelists predict Ed will be forgotten in a short period of time.",
      "question_template": "Ed finds that [[CANDIDATE_ANSWER]] is cheating on their girlfriend.",
      "candidate_answers": [
        "He and Shari renew their relationship",
        "Celebrate the fact that TV news panelists predict Ed will be forgotten in a short period of time"
      ],
      "predicates": [
        "RenewRelationship(x, y) ::: x and y renew their relationship.",
        "Celebrate(x) ::: x celebrates something.",
        "Predict(x, y) ::: x predicts y.",
        "Forgotten(x) ::: x is forgotten."
      ],
      "premises": [
        "RenewRelationship(a_1, a_2) ::: Ed and Shari renew their relationship.",
        "Celebrate(a_1) ::: Ed celebrates the fact that TV news panelists predict Ed will be forgotten in a short period of time.",
        "Predict(c, Forgotten(a_1)) ::: TV news panelists predict that Ed will be forgotten."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "786": [
    {
      "id": 786,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 2,
      "paragraph": "Ed then goes on The Tonight Show with Jay Leno and meets beautiful model/actress Jill (Elizabeth Hurley) who takes a liking to Ed. Ed then visits Shari and she tells Ed that she does not want to be with him until the Show stops airing. She then leaves town. Ed goes to the park with Ray and some friends to play football when Jill comes to talk to him, because Cynthia brought her in to earn more ratings. She invites Ed to dinner at her house. When he arrives at Jill's house, there is a massive crowd. They have a small talk, and then they kiss on top of a table. They are about to have sex, but then Ed falls off the table and squishes Jill's cat. Ed never sees Jill again.",
      "question_template": "Ed apologizes to Shari and then reveals [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Shari tells Ed that she does not want to be with him until the Show stops airing."
      ],
      "predicates": [
        "GoesOnShow(x, y) ::: x goes on the show y.",
        "Meets(x, y) ::: x meets y.",
        "Likes(x, y) ::: x takes a liking to y.",
        "WantsToBeWith(x, y) ::: x wants to be with y.",
        "LeavesTown(x) ::: x leaves town.",
        "PlaysFootball(x) ::: x plays football.",
        "Invites(x, y) ::: x invites y to dinner.",
        "Kisses(x, y) ::: x kisses y.",
        "FallsOffTable(x) ::: x falls off the table.",
        "Squishes(x, y) ::: x squishes y.",
        "NeverSees(x, y) ::: x never sees y again."
      ],
      "premises": [
        "GoesOnShow(a_1, \"The Tonight Show with Jay Leno\") ::: Ed goes on The Tonight Show with Jay Leno.",
        "Meets(a_1, a_2) ::: Ed meets beautiful model/actress Jill (Elizabeth Hurley).",
        "Likes(a_2, a_1) ::: Jill takes a liking to Ed.",
        "WantsToBeWith(a_2, a_1) ::: Shari tells Ed that she does not want to be with him until the Show stops airing.",
        "LeavesTown(a_2) ::: Shari leaves town.",
        "PlaysFootball(a_1) ::: Ed goes to the park with Ray and some friends to play football.",
        "Invites(a_2, a_1) ::: Jill invites Ed to dinner at her house.",
        "FallsOffTable(a_1) ::: Ed falls off the table.",
        "Squishes(a_1, \"Jill's cat\") ::: Ed squishes Jill's cat.",
        "NeverSees(a_1, a_2) ::: Ed never sees Jill again.",
        "¬(Likes(a_1, a_2)) ::: Ed does not have a relationship with Jill after the incident."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 786,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 4,
      "paragraph": "After the funeral, Ed becomes disheartened by the fact that the producers want him to stay on longer and that he cannot do anything to change their minds or he would be in breach of his contract. Ed is depressed until he catches a glimpse of Shari (in disguise wearing a wig and sunglasses). He chases her for a long time until she stops in the women's bathroom in a movie theater. She says she is staying with her brother as it is his birthday and she just wanted to see Ed. Ed vows to find a way to end the show to be with Shari. When Ed exits, one camera man stays with Shari saying that it is the producers' new idea. The main camera man tells him that all his family are being filmed, but they show the most interesting person.",
      "question_template": "Ed apologizes to Shari and then reveals [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The producers want him to stay on longer",
        "He cannot do anything to change their minds or he would be in breach of his contract",
        "She says she is staying with her brother as it is his birthday and she just wanted to see Ed",
        "The main camera man tells him that all his family are being filmed, but they show the most interesting person"
      ],
      "predicates": [
        "Disheartened(a_1) ::: Ed is disheartened.",
        "Depressed(a_1) ::: Ed is depressed.",
        "WantsToEndShow(a_1) ::: Ed wants to end the show.",
        "With(a_1, a_2) ::: Ed is with Shari.",
        "InBathroom(a_2, b_0) ::: Shari is in the women's bathroom.",
        "Chases(a_1, a_2) ::: Ed chases Shari.",
        "StaysWith(a_2, a_0) ::: Shari stays with her brother.",
        "FamilyFilmed(a_0) ::: Ed's family is being filmed.",
        "InterestingPerson(a_0) ::: The most interesting person is being shown."
      ],
      "premises": [
        "Disheartened(a_1) ∧ Depressed(a_1) ::: Ed becomes disheartened and is depressed after the funeral.",
        "Chases(a_1, a_2) ∧ InBathroom(a_2, b_0) ::: Ed chases Shari until she stops in the women's bathroom.",
        "WantsToEndShow(a_1) ∧ With(a_1, a_2) ::: Ed wants to end the show to be with Shari.",
        "StaysWith(a_2, a_0) ::: Shari is staying with her brother for his birthday.",
        "FamilyFilmed(a_0) ∧ InterestingPerson(a_0) ::: All of Ed's family are being filmed, but they show the most interesting person.",
        "Conclusion:",
        "WantsToEndShow(a_1) ::: Ed wants to end the show to be with Shari."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "787": [
    {
      "id": 787,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 2,
      "paragraph": "Ed then goes on The Tonight Show with Jay Leno and meets beautiful model/actress Jill (Elizabeth Hurley) who takes a liking to Ed. Ed then visits Shari and she tells Ed that she does not want to be with him until the Show stops airing. She then leaves town. Ed goes to the park with Ray and some friends to play football when Jill comes to talk to him, because Cynthia brought her in to earn more ratings. She invites Ed to dinner at her house. When he arrives at Jill's house, there is a massive crowd. They have a small talk, and then they kiss on top of a table. They are about to have sex, but then Ed falls off the table and squishes Jill's cat. Ed never sees Jill again.",
      "question_template": "Ed meets [[CANDIDATE_ANSWER]] on the Tonight Show.",
      "candidate_answers": [
        "Jill",
        "Cynthia"
      ],
      "predicates": [
        "GoesOnShow(x, y) ::: x goes on the show y.",
        "Meets(x, y) ::: x meets y.",
        "Likes(x, y) ::: x takes a liking to y.",
        "WantsToBeWith(x, y) ::: x wants to be with y.",
        "LeavesTown(x) ::: x leaves town.",
        "PlaysFootball(x) ::: x plays football.",
        "Invites(x, y) ::: x invites y to dinner.",
        "Kisses(x, y) ::: x kisses y.",
        "FallsOffTable(x) ::: x falls off the table.",
        "Squishes(x, y) ::: x squishes y.",
        "NeverSees(x, y) ::: x never sees y again."
      ],
      "premises": [
        "GoesOnShow(a_1, \"The Tonight Show with Jay Leno\") ::: Ed goes on The Tonight Show with Jay Leno.",
        "Meets(a_1, a_2) ::: Ed meets beautiful model/actress Jill (Elizabeth Hurley).",
        "Likes(a_2, a_1) ::: Jill takes a liking to Ed.",
        "WantsToBeWith(a_2, a_1) ::: Shari tells Ed that she does not want to be with him until the Show stops airing.",
        "LeavesTown(a_2) ::: Shari leaves town.",
        "PlaysFootball(a_1) ::: Ed goes to the park with Ray and some friends to play football.",
        "Invites(a_2, a_1) ::: Jill invites Ed to dinner at her house.",
        "FallsOffTable(a_1) ::: Ed falls off the table.",
        "Squishes(a_1, \"Jill's cat\") ::: Ed squishes Jill's cat.",
        "NeverSees(a_1, a_2) ::: Ed never sees Jill again.",
        "¬(Likes(a_1, a_2)) ::: Ed does not have a relationship with Jill after the incident."
      ],
      "conclusions": [
        "Meets(a_1, a_2)",
        "None"
      ]
    },
    {
      "id": 787,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 4,
      "paragraph": "After the funeral, Ed becomes disheartened by the fact that the producers want him to stay on longer and that he cannot do anything to change their minds or he would be in breach of his contract. Ed is depressed until he catches a glimpse of Shari (in disguise wearing a wig and sunglasses). He chases her for a long time until she stops in the women's bathroom in a movie theater. She says she is staying with her brother as it is his birthday and she just wanted to see Ed. Ed vows to find a way to end the show to be with Shari. When Ed exits, one camera man stays with Shari saying that it is the producers' new idea. The main camera man tells him that all his family are being filmed, but they show the most interesting person.",
      "question_template": "Ed meets [[CANDIDATE_ANSWER]] on the Tonight Show.",
      "candidate_answers": [
        "Shari"
      ],
      "predicates": [
        "Disheartened(a_1) ::: Ed is disheartened.",
        "Depressed(a_1) ::: Ed is depressed.",
        "WantsToEndShow(a_1) ::: Ed wants to end the show.",
        "With(a_1, a_2) ::: Ed is with Shari.",
        "InBathroom(a_2, b_0) ::: Shari is in the women's bathroom.",
        "Chases(a_1, a_2) ::: Ed chases Shari.",
        "StaysWith(a_2, a_0) ::: Shari stays with her brother.",
        "FamilyFilmed(a_0) ::: Ed's family is being filmed.",
        "InterestingPerson(a_0) ::: The most interesting person is being shown."
      ],
      "premises": [
        "Disheartened(a_1) ∧ Depressed(a_1) ::: Ed becomes disheartened and is depressed after the funeral.",
        "Chases(a_1, a_2) ∧ InBathroom(a_2, b_0) ::: Ed chases Shari until she stops in the women's bathroom.",
        "WantsToEndShow(a_1) ∧ With(a_1, a_2) ::: Ed wants to end the show to be with Shari.",
        "StaysWith(a_2, a_0) ::: Shari is staying with her brother for his birthday.",
        "FamilyFilmed(a_0) ∧ InterestingPerson(a_0) ::: All of Ed's family are being filmed, but they show the most interesting person.",
        "Conclusion:",
        "WantsToEndShow(a_1) ::: Ed wants to end the show to be with Shari."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 787,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 5,
      "paragraph": "Ed gets an idea on how to stop the main producer from showing the show: he says that he will give $10,000 to the person who can give him the best amount of \"dirt\" on the producers and that he will announce it live, with the desired result being they stop airing the show before he can make the announcement. As Cynthia feels sorry for Ed, she tells him a secret of the main producer. Ed announces the secret (that the man has to pump a liquid into his penis to get an erection) but before he can announce who it is they stop airing the show.",
      "question_template": "Ed meets [[CANDIDATE_ANSWER]] on the Tonight Show.",
      "candidate_answers": [
        "Cynthia"
      ],
      "predicates": [
        "Gives(x, y, z) ::: x gives y to z.",
        "BestDirt(x, y) ::: x provides the best amount of \"dirt\" on y.",
        "Announces(x, y) ::: x announces y.",
        "FeelsSorryFor(x, y) ::: x feels sorry for y.",
        "Secret(x, y) ::: x is a secret of y.",
        "StopsAiring(x) ::: x stops airing the show.",
        "LiquidPump(x) ::: x pumps a liquid into his penis to get an erection."
      ],
      "premises": [
        "Gives(a_1, 10000, a_0) ::: Ed offers $10,000 to the person who can give him the best amount of \"dirt\" on the producers.",
        "BestDirt(a_0, producers) ::: The person provides the best amount of \"dirt\" on the producers.",
        "Announces(a_1, secret) ::: Ed announces the secret.",
        "FeelsSorryFor(a_2, a_1) ::: Cynthia feels sorry for Ed.",
        "Secret(secret, a_2) ::: The secret is that the main producer has to pump a liquid into his penis to get an erection.",
        "StopsAiring(show) ::: They stop airing the show before Ed can announce who it is.",
        "Conclusion:",
        "¬Announces(a_1, whoItIs) ::: Ed does not announce who it is before they stop airing the show."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "788": [
    {
      "id": 788,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 1,
      "paragraph": "However, Ed TV suddenly gets interesting on Day 3 when Ed visits Ray. Ed (along with the cameramen) discovers that Ray is cheating on his girlfriend Shari (Jenna Elfman). Ed then visits Shari to apologize to her for Ray's actions. Shari is very drunk and starts insulting Ray, by talking to the camera. She makes everyone laugh and gasp by saying \"Ray was a bad lay.\" Ed tries to comfort Shari, and he reveals he has feelings for her. She then reveals she has feelings for Ed as well. They slowly move their faces closer and finally kiss each other. Ed then locks out the camera crew and proceeds to passionately kiss Shari for a while. Ed TV suddenly becomes extremely popular. On Cynthia's insistence, Ed starts a relationship with Shari, which is short lived as Ed grows more interested in staying on TV and Shari is abused by viewers who find her unappealing.",
      "question_template": "Ed is at the hospital because of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Ed reveals he has feelings for her",
        "She then reveals she has feelings for Ed as well",
        "They slowly move their faces closer and finally kiss each other",
        "Ed then locks out the camera crew and proceeds to passionately kiss Shari for a while"
      ],
      "predicates": [
        "Popular(x) ::: x is extremely popular.",
        "InRelationship(x, y) ::: x is in a relationship with y.",
        "Cheating(x, y) ::: x is cheating on y.",
        "Insulting(x, y) ::: x is insulting y.",
        "Comfort(x, y) ::: x is comforting y.",
        "HasFeelingsFor(x, y) ::: x has feelings for y.",
        "Kiss(x, y) ::: x kisses y.",
        "LocksOut(x, y) ::: x locks out y.",
        "ShortLived(x, y) ::: x and y's relationship is short-lived.",
        "GrowingInterest(x, y) ::: x is growing more interested in y.",
        "Unappealing(x) ::: x is perceived as unappealing by viewers."
      ],
      "premises": [
        "Cheating(ray, shari) ::: Ray is cheating on his girlfriend Shari.",
        "Insulting(shari, ray) ::: Shari is insulting Ray.",
        "Comfort(ed, shari) ::: Ed tries to comfort Shari.",
        "HasFeelingsFor(ed, shari) ::: Ed reveals he has feelings for Shari.",
        "HasFeelingsFor(shari, ed) ::: Shari reveals she has feelings for Ed.",
        "Kiss(ed, shari) ::: Ed and Shari kiss each other.",
        "LocksOut(ed, cameramen) ::: Ed locks out the camera crew.",
        "Popular(edTV) ::: Ed TV suddenly becomes extremely popular.",
        "InRelationship(ed, shari) ::: Ed starts a relationship with Shari.",
        "ShortLived(ed, shari) ::: Ed and Shari's relationship is short-lived.",
        "GrowingInterest(ed, stayingOnTV) ::: Ed grows more interested in staying on TV.",
        "Unappealing(shari) ::: Shari is perceived as unappealing by viewers."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 788,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 2,
      "paragraph": "Ed then goes on The Tonight Show with Jay Leno and meets beautiful model/actress Jill (Elizabeth Hurley) who takes a liking to Ed. Ed then visits Shari and she tells Ed that she does not want to be with him until the Show stops airing. She then leaves town. Ed goes to the park with Ray and some friends to play football when Jill comes to talk to him, because Cynthia brought her in to earn more ratings. She invites Ed to dinner at her house. When he arrives at Jill's house, there is a massive crowd. They have a small talk, and then they kiss on top of a table. They are about to have sex, but then Ed falls off the table and squishes Jill's cat. Ed never sees Jill again.",
      "question_template": "Ed is at the hospital because of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "They kiss on top of a table",
        "Ed falls off the table and squishes Jill's cat"
      ],
      "predicates": [
        "GoesOnShow(x, y) ::: x goes on the show y.",
        "Meets(x, y) ::: x meets y.",
        "Likes(x, y) ::: x takes a liking to y.",
        "WantsToBeWith(x, y) ::: x wants to be with y.",
        "LeavesTown(x) ::: x leaves town.",
        "PlaysFootball(x) ::: x plays football.",
        "Invites(x, y) ::: x invites y to dinner.",
        "Kisses(x, y) ::: x kisses y.",
        "FallsOffTable(x) ::: x falls off the table.",
        "Squishes(x, y) ::: x squishes y.",
        "NeverSees(x, y) ::: x never sees y again."
      ],
      "premises": [
        "GoesOnShow(a_1, \"The Tonight Show with Jay Leno\") ::: Ed goes on The Tonight Show with Jay Leno.",
        "Meets(a_1, a_2) ::: Ed meets beautiful model/actress Jill (Elizabeth Hurley).",
        "Likes(a_2, a_1) ::: Jill takes a liking to Ed.",
        "WantsToBeWith(a_2, a_1) ::: Shari tells Ed that she does not want to be with him until the Show stops airing.",
        "LeavesTown(a_2) ::: Shari leaves town.",
        "PlaysFootball(a_1) ::: Ed goes to the park with Ray and some friends to play football.",
        "Invites(a_2, a_1) ::: Jill invites Ed to dinner at her house.",
        "FallsOffTable(a_1) ::: Ed falls off the table.",
        "Squishes(a_1, \"Jill's cat\") ::: Ed squishes Jill's cat.",
        "NeverSees(a_1, a_2) ::: Ed never sees Jill again.",
        "¬(Likes(a_1, a_2)) ::: Ed does not have a relationship with Jill after the incident."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 788,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 5,
      "paragraph": "Ed gets an idea on how to stop the main producer from showing the show: he says that he will give $10,000 to the person who can give him the best amount of \"dirt\" on the producers and that he will announce it live, with the desired result being they stop airing the show before he can make the announcement. As Cynthia feels sorry for Ed, she tells him a secret of the main producer. Ed announces the secret (that the man has to pump a liquid into his penis to get an erection) but before he can announce who it is they stop airing the show.",
      "question_template": "Ed is at the hospital because of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "No relevant information found in the paragraph."
      ],
      "predicates": [
        "Gives(x, y, z) ::: x gives y to z.",
        "BestDirt(x, y) ::: x provides the best amount of \"dirt\" on y.",
        "Announces(x, y) ::: x announces y.",
        "FeelsSorryFor(x, y) ::: x feels sorry for y.",
        "Secret(x, y) ::: x is a secret of y.",
        "StopsAiring(x) ::: x stops airing the show.",
        "LiquidPump(x) ::: x pumps a liquid into his penis to get an erection."
      ],
      "premises": [
        "Gives(a_1, 10000, a_0) ::: Ed offers $10,000 to the person who can give him the best amount of \"dirt\" on the producers.",
        "BestDirt(a_0, producers) ::: The person provides the best amount of \"dirt\" on the producers.",
        "Announces(a_1, secret) ::: Ed announces the secret.",
        "FeelsSorryFor(a_2, a_1) ::: Cynthia feels sorry for Ed.",
        "Secret(secret, a_2) ::: The secret is that the main producer has to pump a liquid into his penis to get an erection.",
        "StopsAiring(show) ::: They stop airing the show before Ed can announce who it is.",
        "Conclusion:",
        "¬Announces(a_1, whoItIs) ::: Ed does not announce who it is before they stop airing the show."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 788,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 6,
      "paragraph": "After the camera crew finally leaves Ed's apartment, he and Shari renew their relationship and celebrate the fact that TV news panelists predict Ed will be forgotten in a short period of time.",
      "question_template": "Ed is at the hospital because of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Ed and Shari renew their relationship",
        "Celebrate the fact that TV news panelists predict Ed will be forgotten in a short period of time"
      ],
      "predicates": [
        "RenewRelationship(x, y) ::: x and y renew their relationship.",
        "Celebrate(x) ::: x celebrates something.",
        "Predict(x, y) ::: x predicts y.",
        "Forgotten(x) ::: x is forgotten."
      ],
      "premises": [
        "RenewRelationship(a_1, a_2) ::: Ed and Shari renew their relationship.",
        "Celebrate(a_1) ::: Ed celebrates the fact that TV news panelists predict Ed will be forgotten in a short period of time.",
        "Predict(c, Forgotten(a_1)) ::: TV news panelists predict that Ed will be forgotten."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "789": [
    {
      "id": 789,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 3,
      "paragraph": "Ed's father (Dennis Hopper), who abandoned his family when Ed was 13, unexpectedly visits Ed and informs him that he left because Ed's mother was having an affair with Ed's current stepfather, Al (Martin Landau). Ed is furious with his mother and argues with her. Next, Ed gets a phone call telling him to come to the hospital. The doctor says that his father is dead and that he died making love to his wife. Ed thinks this means Al, but it actually is his real father and that Ed's mother was cheating on Al.",
      "question_template": "Ed gets the show to stop airing by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "His father is dead",
        "He died making love to his wife"
      ],
      "predicates": [
        "Abandoned(a_1) ::: Ed's father abandoned his family.",
        "Visited(a_1, a_0) ::: Ed's father unexpectedly visits Ed.",
        "Informed(a_1, a_2) ::: Ed's father informs Ed about the affair.",
        "Furious(a_1, a_2) ::: Ed is furious with his mother.",
        "Argued(a_1, a_2) ::: Ed argues with his mother.",
        "Called(a_1, b_0) ::: Ed receives a phone call telling him to come to the hospital.",
        "Dead(a_1) ::: Ed's father is dead.",
        "DiedMakingLove(a_1) ::: Ed's father died making love to his wife.",
        "Cheating(a_2, a_0) ::: Ed's mother was cheating on Al."
      ],
      "premises": [
        "Abandoned(dennis) ::: Ed's father (Dennis Hopper) abandoned his family when Ed was 13.",
        "Visited(dennis, ed) ::: Dennis Hopper unexpectedly visits Ed.",
        "Informed(dennis, shari) ::: Dennis Hopper informs Ed that he left because Shari was having an affair with Al.",
        "Furious(ed, shari) ::: Ed is furious with his mother.",
        "Argued(ed, shari) ::: Ed argues with his mother.",
        "Called(ed, hospital) ::: Ed gets a phone call telling him to come to the hospital.",
        "Dead(dennis) ::: The doctor says that Ed's father is dead.",
        "DiedMakingLove(dennis) ::: Ed's father died making love to his wife.",
        "Cheating(shari, dennis) ::: Ed's mother had an affair with Dennis Hopper while married to Al.",
        "¬(DiedMakingLove(dennis) ∧ Cheating(shari, al)) ::: Ed's perception of the situation is incorrect regarding who died."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "791": [
    {
      "id": 791,
      "context_id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 5,
      "paragraph": "Ed gets an idea on how to stop the main producer from showing the show: he says that he will give $10,000 to the person who can give him the best amount of \"dirt\" on the producers and that he will announce it live, with the desired result being they stop airing the show before he can make the announcement. As Cynthia feels sorry for Ed, she tells him a secret of the main producer. Ed announces the secret (that the man has to pump a liquid into his penis to get an erection) but before he can announce who it is they stop airing the show.",
      "question_template": "Ed doesn't just quit the show because of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "$10,000 to the person who can give him the best amount of \"dirt\" on the producers"
      ],
      "predicates": [
        "Gives(x, y, z) ::: x gives y to z.",
        "BestDirt(x, y) ::: x provides the best amount of \"dirt\" on y.",
        "Announces(x, y) ::: x announces y.",
        "FeelsSorryFor(x, y) ::: x feels sorry for y.",
        "Secret(x, y) ::: x is a secret of y.",
        "StopsAiring(x) ::: x stops airing the show.",
        "LiquidPump(x) ::: x pumps a liquid into his penis to get an erection."
      ],
      "premises": [
        "Gives(a_1, 10000, a_0) ::: Ed offers $10,000 to the person who can give him the best amount of \"dirt\" on the producers.",
        "BestDirt(a_0, producers) ::: The person provides the best amount of \"dirt\" on the producers.",
        "Announces(a_1, secret) ::: Ed announces the secret.",
        "FeelsSorryFor(a_2, a_1) ::: Cynthia feels sorry for Ed.",
        "Secret(secret, a_2) ::: The secret is that the main producer has to pump a liquid into his penis to get an erection.",
        "StopsAiring(show) ::: They stop airing the show before Ed can announce who it is.",
        "Conclusion:",
        "¬Announces(a_1, whoItIs) ::: Ed does not announce who it is before they stop airing the show."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "792": [
    {
      "id": 792,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 0,
      "paragraph": " Following his graduation from university in 1956, aspiring filmmaker Colin Clark (Eddie Redmayne) travels to London to get a job on Laurence Olivier's (Kenneth Branagh) next production. Production manager Hugh Perceval (Michael Kitchen) tells Colin that there are no jobs available, but he decides to wait for Olivier, whom he once met at a party. Olivier and his wife, Vivien Leigh (Julia Ormond), eventually show up and Vivien encourages Olivier to give Colin a job on his upcoming film The Prince and the Showgirl, starring Marilyn Monroe (Michelle Williams). Colin's first task is to find a suitable place for Marilyn and her husband, Arthur Miller (Dougray Scott), to stay at while they are in England. The press find out about the house, but Colin reveals he secured a second house just in case, impressing Olivier and Marilyn's publicist, Arthur P. Jacobs (Toby Jones).",
      "question_template": "Ray is Ed's brother.",
      "candidate_answers": [
        "Vivien Leigh encourages Olivier to give Colin a job",
        "Vivien encourages Olivier to give Colin a job on his upcoming film The Prince and the Showgirl"
      ],
      "predicates": [
        "Graduated(x) ::: x has graduated from university.",
        "AspiringFilmmaker(x) ::: x is an aspiring filmmaker.",
        "TravelsTo(x, y) ::: x travels to y.",
        "JobAvailable(x) ::: x has a job available.",
        "WaitsFor(x, y) ::: x waits for y.",
        "Encourages(x, y, z) ::: x encourages y to do z.",
        "GivesJob(x, y, z) ::: x gives y a job on z.",
        "FindsPlaceFor(x, y, z) ::: x finds a suitable place for y and z.",
        "Impresses(x, y, z) ::: x impresses y and z."
      ],
      "premises": [
        "Graduated(colin) ::: Colin graduated from university in 1956.",
        "AspiringFilmmaker(colin) ::: Colin is an aspiring filmmaker.",
        "TravelsTo(colin, london) ::: Colin travels to London to get a job.",
        "¬JobAvailable(olivier) ::: There are no jobs available on Olivier's next production.",
        "WaitsFor(colin, olivier) ::: Colin decides to wait for Olivier.",
        "Encourages(vivien, olivier, givesJob(colin, olivier, thePrinceAndTheShowgirl)) ::: Vivien encourages Olivier to give Colin a job on his upcoming film The Prince and the Showgirl.",
        "FindsPlaceFor(colin, marilyn, arthur) ::: Colin's first task is to find a suitable place for Marilyn and her husband, Arthur Miller, to stay while they are in England.",
        "Impresses(colin, olivier, arthurPJacobs) ::: Colin impresses Olivier and Marilyn's publicist, Arthur P. Jacobs.",
        "Conclusion:",
        "GivesJob(olivier, colin, thePrinceAndTheShowgirl) ::: Olivier gives Colin a job on The Prince and the Showgirl due to Vivien Leigh's encouragement."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 792,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 2,
      "paragraph": "Marilyn struggles to understand her character and leaves the set when Olivier insults her. Colin asks the director to be more sympathetic towards Marilyn, before he goes to Parkside House to check on her. He hears an argument and finds a tearful Marilyn sitting on the stairs with Arthur's notebook, which contains the plot of a new play that appears to poke fun at her. Arthur later returns to the United States. Vivien comes to the set and watches some of Marilyn's scenes. She breaks down, saying Marilyn lights up the screen and if only Olivier could see himself when he watches her. Olivier tries unsuccessfully to reassure his wife. Marilyn does not show up to the set following Arthur's departure and she asks Colin to come to Parkside and they talk. The crew becomes captivated by Marilyn when she dances for a scene and Milton pulls Colin aside to tell him Marilyn breaks hearts and that she will break his too. Lucy also notices Colin's growing infatuation with Marilyn and breaks up with him.",
      "question_template": "Ray is Ed's brother.",
      "candidate_answers": [
        "Colin",
        "Arthur",
        "Vivien"
      ],
      "predicates": [
        "UnderstandsImpact(x, y) ::: x understands the impact of his actions on y.",
        "Captivates(x, y) ::: x captivates those around her/him.",
        "Infatuated(x, y) ::: x develops an infatuation with y.",
        "Reacts(x, y) ::: x reacts to y."
      ],
      "premises": [
        "¬UnderstandsImpact(olivier, marilyn) ::: Olivier does not understand the impact of his actions on Marilyn.",
        "Captivates(marilyn, a_0) ::: Marilyn's presence captivates those around her.",
        "Infatuated(colin, marilyn) ::: Colin develops an infatuation with Marilyn.",
        "Reacts(lucy, infatuation(colin, marilyn)) ::: Lucy reacts to Colin's infatuation with Marilyn."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 792,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 3,
      "paragraph": "Colin and Marilyn spend the day together and are given a tour of the library of Windsor Castle by Owen Morshead (Derek Jacobi). Colin also shows Marilyn around Eton College, and they go skinny dipping in the River Thames. Marilyn kisses Colin and they are found by Roger Smith (Philip Jackson), Marilyn's bodyguard. Colin is called to Parkside one night as Marilyn has locked herself in her room. Colin enters her room and Marilyn invites him to lie next to her on the bed. The following night, Marilyn wakes up in pain and claims she is having a miscarriage. A doctor tends to her and Marilyn tells Colin that Arthur is coming back and she wants to try and be a good wife to him, so she and Colin should forget everything that happened between them. She later returns to the set to complete the film. Olivier praises Marilyn, but reveals she has killed his desire to direct again. Lucy asks Colin if Marilyn broke his heart and he replies that she did, to which she replies that he needed it. Marilyn comes to a local pub, where Colin is staying, and thanks him for helping her. She kisses him goodbye and Roger drives her to the airport.",
      "question_template": "Ray is Ed's brother.",
      "candidate_answers": [
        "Lucy asks Colin if Marilyn broke his heart and he replies that she did",
        "Marilyn thanks Colin for helping her",
        "Marilyn kisses Colin goodbye"
      ],
      "predicates": [
        "SpendTimeTogether(x, y) ::: x and y spend time together.",
        "Tour(x, y, z) ::: x gives a tour of y to z.",
        "ShowAround(x, y, z) ::: x shows y around z.",
        "SkinnyDipping(x, y) ::: x and y go skinny dipping.",
        "Kiss(x, y) ::: x kisses y.",
        "FoundBy(x, y) ::: x is found by y.",
        "LockedInRoom(x) ::: x is locked in her room.",
        "Invite(x, y) ::: x invites y to lie next to her.",
        "WakesUpInPain(x) ::: x wakes up in pain.",
        "ClaimsMiscarriage(x) ::: x claims she is having a miscarriage.",
        "TendsTo(x, y) ::: x tends to y.",
        "WantsToForget(x, y) ::: x wants to forget y.",
        "ReturnsToSet(x) ::: x returns to the set.",
        "Praises(x, y) ::: x praises y.",
        "Reveals(x, y) ::: x reveals y.",
        "Asks(x, y) ::: x asks y.",
        "Replies(x, y) ::: x replies to y.",
        "Thanks(x, y) ::: x thanks y.",
        "KissesGoodbye(x, y) ::: x kisses y goodbye.",
        "DrivesTo(x, y) ::: x drives y to a location."
      ],
      "premises": [
        "SpendTimeTogether(colin, marilyn) ::: Colin and Marilyn spend the day together.",
        "Tour(owenMorshead, windsorCastle, marilyn) ::: Owen Morshead gives a tour of Windsor Castle to Marilyn.",
        "ShowAround(colin, marilyn, etonCollege) ::: Colin shows Marilyn around Eton College.",
        "SkinnyDipping(colin, marilyn) ::: Colin and Marilyn go skinny dipping in the River Thames.",
        "Kiss(marilyn, colin) ::: Marilyn kisses Colin.",
        "FoundBy(marilyn, rogerSmith) ::: Marilyn is found by Roger Smith.",
        "LockedInRoom(marilyn) ::: Marilyn has locked herself in her room.",
        "Invite(marilyn, colin) ::: Marilyn invites Colin to lie next to her on the bed.",
        "WakesUpInPain(marilyn) ::: Marilyn wakes up in pain.",
        "ClaimsMiscarriage(marilyn) ::: Marilyn claims she is having a miscarriage.",
        "TendsTo(doctor, marilyn) ::: A doctor tends to Marilyn.",
        "WantsToForget(marilyn, relationshipWithColin) ::: Marilyn wants to forget her relationship with Colin to focus on being a good wife to Arthur.",
        "ReturnsToSet(marilyn) ::: Marilyn returns to the set to complete the film.",
        "Praises(olivier, marilyn) ::: Olivier praises Marilyn.",
        "Reveals(olivier, desireToDirectAgain) ::: Olivier reveals she has killed his desire to direct again.",
        "Asks(lucy, colin) ::: Lucy asks Colin if Marilyn broke his heart.",
        "Replies(colin, lucy) ::: Colin replies that she did.",
        "Replies(lucy, colin) ::: Lucy replies that he needed it.",
        "Thanks(marilyn, colin) ::: Marilyn thanks Colin for helping her.",
        "KissesGoodbye(marilyn, colin) ::: Marilyn kisses Colin goodbye.",
        "DrivesTo(rogerSmith, airport) ::: Roger drives Marilyn to the airport."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "793": [
    {
      "id": 793,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 0,
      "paragraph": " Following his graduation from university in 1956, aspiring filmmaker Colin Clark (Eddie Redmayne) travels to London to get a job on Laurence Olivier's (Kenneth Branagh) next production. Production manager Hugh Perceval (Michael Kitchen) tells Colin that there are no jobs available, but he decides to wait for Olivier, whom he once met at a party. Olivier and his wife, Vivien Leigh (Julia Ormond), eventually show up and Vivien encourages Olivier to give Colin a job on his upcoming film The Prince and the Showgirl, starring Marilyn Monroe (Michelle Williams). Colin's first task is to find a suitable place for Marilyn and her husband, Arthur Miller (Dougray Scott), to stay at while they are in England. The press find out about the house, but Colin reveals he secured a second house just in case, impressing Olivier and Marilyn's publicist, Arthur P. Jacobs (Toby Jones).",
      "question_template": "The idea of True TV was thought up by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- He once met Olivier at a party."
      ],
      "predicates": [
        "Graduated(x) ::: x has graduated from university.",
        "AspiringFilmmaker(x) ::: x is an aspiring filmmaker.",
        "TravelsTo(x, y) ::: x travels to y.",
        "JobAvailable(x) ::: x has a job available.",
        "WaitsFor(x, y) ::: x waits for y.",
        "Encourages(x, y, z) ::: x encourages y to do z.",
        "GivesJob(x, y, z) ::: x gives y a job on z.",
        "FindsPlaceFor(x, y, z) ::: x finds a suitable place for y and z.",
        "Impresses(x, y, z) ::: x impresses y and z."
      ],
      "premises": [
        "Graduated(colin) ::: Colin graduated from university in 1956.",
        "AspiringFilmmaker(colin) ::: Colin is an aspiring filmmaker.",
        "TravelsTo(colin, london) ::: Colin travels to London to get a job.",
        "¬JobAvailable(olivier) ::: There are no jobs available on Olivier's next production.",
        "WaitsFor(colin, olivier) ::: Colin decides to wait for Olivier.",
        "Encourages(vivien, olivier, givesJob(colin, olivier, thePrinceAndTheShowgirl)) ::: Vivien encourages Olivier to give Colin a job on his upcoming film The Prince and the Showgirl.",
        "FindsPlaceFor(colin, marilyn, arthur) ::: Colin's first task is to find a suitable place for Marilyn and her husband, Arthur Miller, to stay while they are in England.",
        "Impresses(colin, olivier, arthurPJacobs) ::: Colin impresses Olivier and Marilyn's publicist, Arthur P. Jacobs.",
        "Conclusion:",
        "GivesJob(olivier, colin, thePrinceAndTheShowgirl) ::: Olivier gives Colin a job on The Prince and the Showgirl due to Vivien Leigh's encouragement."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 793,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 1,
      "paragraph": "The paparazzi find out about Marilyn's arrival at Heathrow and they gather around the plane when it lands. Marilyn brings her husband, her business partner, Milton H. Greene (Dominic Cooper), and her acting coach Paula Strasberg (ZoĂŤ Wanamaker) with her. She initially appears to be uncomfortable around the many photographers, but relaxes at the press conference. Olivier becomes frustrated when Marilyn is late to the read-through. She insists Paula sits with her and when she has trouble with her lines, Paula reads them for her. The crew and the other actors, including Sybil Thorndike (Judi Dench), are in awe of Marilyn. Colin meets Lucy (Emma Watson), a wardrobe assistant to whom he is attracted, and they go on a date. Marilyn starts arriving later to the set and often forgets her lines, angering Olivier. However, Sybil praises Marilyn and defends her when Olivier tries to get her to apologise for holding the shoot up.",
      "question_template": "The idea of True TV was thought up by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Colin meets Lucy , a wardrobe assistant to whom he is attracted",
        "Marilyn brings her husband, her business partner, Milton H. Greene , and her acting coach Paula Strasberg with her",
        "The crew and the other actors, including Sybil Thorndike , are in awe of Marilyn"
      ],
      "predicates": [
        "Discomfort(x) ::: x is uncomfortable around photographers.",
        "Relaxed(x) ::: x is relaxed at the press conference.",
        "Frustrated(x, y) ::: x is frustrated with y.",
        "Assists(x, y) ::: x assists y with her lines.",
        "Attracted(x, y) ::: x is attracted to y.",
        "Praise(x, y) ::: x praises y.",
        "Defend(x, y) ::: x defends y against criticism.",
        "Late(x) ::: x is late to an event."
      ],
      "premises": [
        "Discomfort(a_2) ∧ Late(a_2, readThrough) ∧ Frustrated(a_6, a_2) ∧ Assists(a_4, a_2) ∧ Attracted(a_1, a_7) ∧ Praise(a_3, a_2) ∧ Defend(a_3, a_2) ::: Marilyn is initially uncomfortable around photographers, is late to the read-through, Olivier is frustrated with her, Paula assists Marilyn with her lines, Colin is attracted to Lucy, and Sybil praises and defends Marilyn.",
        "Relaxed(a_2) ::: Marilyn's discomfort around photographers decreases at the press conference.",
        "Frustrated(a_6, a_2) ::: Marilyn's lateness to the read-through frustrates Olivier.",
        "Assists(a_4, a_2) ::: Paula Strasberg assists Marilyn with her lines.",
        "Attracted(a_1, a_7) → Date(a_1, a_7) ::: Colin's attraction to Lucy leads to a date.",
        "Praise(a_3, a_2) ∧ Defend(a_3, a_2) ::: Sybil Thorndike's praise and defense of Marilyn occur in response to Olivier's frustration."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 793,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 2,
      "paragraph": "Marilyn struggles to understand her character and leaves the set when Olivier insults her. Colin asks the director to be more sympathetic towards Marilyn, before he goes to Parkside House to check on her. He hears an argument and finds a tearful Marilyn sitting on the stairs with Arthur's notebook, which contains the plot of a new play that appears to poke fun at her. Arthur later returns to the United States. Vivien comes to the set and watches some of Marilyn's scenes. She breaks down, saying Marilyn lights up the screen and if only Olivier could see himself when he watches her. Olivier tries unsuccessfully to reassure his wife. Marilyn does not show up to the set following Arthur's departure and she asks Colin to come to Parkside and they talk. The crew becomes captivated by Marilyn when she dances for a scene and Milton pulls Colin aside to tell him Marilyn breaks hearts and that she will break his too. Lucy also notices Colin's growing infatuation with Marilyn and breaks up with him.",
      "question_template": "The idea of True TV was thought up by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Colin asks the director to be more sympathetic towards Marilyn",
        "- Colin goes to Parkside House to check on her",
        "- Olivier tries unsuccessfully to reassure his wife"
      ],
      "predicates": [
        "UnderstandsImpact(x, y) ::: x understands the impact of his actions on y.",
        "Captivates(x, y) ::: x captivates those around her/him.",
        "Infatuated(x, y) ::: x develops an infatuation with y.",
        "Reacts(x, y) ::: x reacts to y."
      ],
      "premises": [
        "¬UnderstandsImpact(olivier, marilyn) ::: Olivier does not understand the impact of his actions on Marilyn.",
        "Captivates(marilyn, a_0) ::: Marilyn's presence captivates those around her.",
        "Infatuated(colin, marilyn) ::: Colin develops an infatuation with Marilyn.",
        "Reacts(lucy, infatuation(colin, marilyn)) ::: Lucy reacts to Colin's infatuation with Marilyn."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "794": [
    {
      "id": 794,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 0,
      "paragraph": " Following his graduation from university in 1956, aspiring filmmaker Colin Clark (Eddie Redmayne) travels to London to get a job on Laurence Olivier's (Kenneth Branagh) next production. Production manager Hugh Perceval (Michael Kitchen) tells Colin that there are no jobs available, but he decides to wait for Olivier, whom he once met at a party. Olivier and his wife, Vivien Leigh (Julia Ormond), eventually show up and Vivien encourages Olivier to give Colin a job on his upcoming film The Prince and the Showgirl, starring Marilyn Monroe (Michelle Williams). Colin's first task is to find a suitable place for Marilyn and her husband, Arthur Miller (Dougray Scott), to stay at while they are in England. The press find out about the house, but Colin reveals he secured a second house just in case, impressing Olivier and Marilyn's publicist, Arthur P. Jacobs (Toby Jones).",
      "question_template": "[[CANDIDATE_ANSWER]] is decided to be the subject of the show.",
      "candidate_answers": [
        "Marilyn Monroe"
      ],
      "predicates": [
        "Graduated(x) ::: x has graduated from university.",
        "AspiringFilmmaker(x) ::: x is an aspiring filmmaker.",
        "TravelsTo(x, y) ::: x travels to y.",
        "JobAvailable(x) ::: x has a job available.",
        "WaitsFor(x, y) ::: x waits for y.",
        "Encourages(x, y, z) ::: x encourages y to do z.",
        "GivesJob(x, y, z) ::: x gives y a job on z.",
        "FindsPlaceFor(x, y, z) ::: x finds a suitable place for y and z.",
        "Impresses(x, y, z) ::: x impresses y and z."
      ],
      "premises": [
        "Graduated(colin) ::: Colin graduated from university in 1956.",
        "AspiringFilmmaker(colin) ::: Colin is an aspiring filmmaker.",
        "TravelsTo(colin, london) ::: Colin travels to London to get a job.",
        "¬JobAvailable(olivier) ::: There are no jobs available on Olivier's next production.",
        "WaitsFor(colin, olivier) ::: Colin decides to wait for Olivier.",
        "Encourages(vivien, olivier, givesJob(colin, olivier, thePrinceAndTheShowgirl)) ::: Vivien encourages Olivier to give Colin a job on his upcoming film The Prince and the Showgirl.",
        "FindsPlaceFor(colin, marilyn, arthur) ::: Colin's first task is to find a suitable place for Marilyn and her husband, Arthur Miller, to stay while they are in England.",
        "Impresses(colin, olivier, arthurPJacobs) ::: Colin impresses Olivier and Marilyn's publicist, Arthur P. Jacobs.",
        "Conclusion:",
        "GivesJob(olivier, colin, thePrinceAndTheShowgirl) ::: Olivier gives Colin a job on The Prince and the Showgirl due to Vivien Leigh's encouragement."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 794,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 1,
      "paragraph": "The paparazzi find out about Marilyn's arrival at Heathrow and they gather around the plane when it lands. Marilyn brings her husband, her business partner, Milton H. Greene (Dominic Cooper), and her acting coach Paula Strasberg (ZoĂŤ Wanamaker) with her. She initially appears to be uncomfortable around the many photographers, but relaxes at the press conference. Olivier becomes frustrated when Marilyn is late to the read-through. She insists Paula sits with her and when she has trouble with her lines, Paula reads them for her. The crew and the other actors, including Sybil Thorndike (Judi Dench), are in awe of Marilyn. Colin meets Lucy (Emma Watson), a wardrobe assistant to whom he is attracted, and they go on a date. Marilyn starts arriving later to the set and often forgets her lines, angering Olivier. However, Sybil praises Marilyn and defends her when Olivier tries to get her to apologise for holding the shoot up.",
      "question_template": "[[CANDIDATE_ANSWER]] is decided to be the subject of the show.",
      "candidate_answers": [
        "Marilyn",
        "Marilyn brings her husband, her business partner, Milton H. Greene, and her acting coach Paula Strasberg with her.",
        "The crew and the other actors, including Sybil Thorndike, are in awe of Marilyn."
      ],
      "predicates": [
        "Discomfort(x) ::: x is uncomfortable around photographers.",
        "Relaxed(x) ::: x is relaxed at the press conference.",
        "Frustrated(x, y) ::: x is frustrated with y.",
        "Assists(x, y) ::: x assists y with her lines.",
        "Attracted(x, y) ::: x is attracted to y.",
        "Praise(x, y) ::: x praises y.",
        "Defend(x, y) ::: x defends y against criticism.",
        "Late(x) ::: x is late to an event."
      ],
      "premises": [
        "Discomfort(a_2) ∧ Late(a_2, readThrough) ∧ Frustrated(a_6, a_2) ∧ Assists(a_4, a_2) ∧ Attracted(a_1, a_7) ∧ Praise(a_3, a_2) ∧ Defend(a_3, a_2) ::: Marilyn is initially uncomfortable around photographers, is late to the read-through, Olivier is frustrated with her, Paula assists Marilyn with her lines, Colin is attracted to Lucy, and Sybil praises and defends Marilyn.",
        "Relaxed(a_2) ::: Marilyn's discomfort around photographers decreases at the press conference.",
        "Frustrated(a_6, a_2) ::: Marilyn's lateness to the read-through frustrates Olivier.",
        "Assists(a_4, a_2) ::: Paula Strasberg assists Marilyn with her lines.",
        "Attracted(a_1, a_7) → Date(a_1, a_7) ::: Colin's attraction to Lucy leads to a date.",
        "Praise(a_3, a_2) ∧ Defend(a_3, a_2) ::: Sybil Thorndike's praise and defense of Marilyn occur in response to Olivier's frustration."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 794,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 3,
      "paragraph": "Colin and Marilyn spend the day together and are given a tour of the library of Windsor Castle by Owen Morshead (Derek Jacobi). Colin also shows Marilyn around Eton College, and they go skinny dipping in the River Thames. Marilyn kisses Colin and they are found by Roger Smith (Philip Jackson), Marilyn's bodyguard. Colin is called to Parkside one night as Marilyn has locked herself in her room. Colin enters her room and Marilyn invites him to lie next to her on the bed. The following night, Marilyn wakes up in pain and claims she is having a miscarriage. A doctor tends to her and Marilyn tells Colin that Arthur is coming back and she wants to try and be a good wife to him, so she and Colin should forget everything that happened between them. She later returns to the set to complete the film. Olivier praises Marilyn, but reveals she has killed his desire to direct again. Lucy asks Colin if Marilyn broke his heart and he replies that she did, to which she replies that he needed it. Marilyn comes to a local pub, where Colin is staying, and thanks him for helping her. She kisses him goodbye and Roger drives her to the airport.",
      "question_template": "[[CANDIDATE_ANSWER]] is decided to be the subject of the show.",
      "candidate_answers": [
        "Marilyn",
        "Marilyn kisses Colin",
        "Marilyn thanks him for helping her"
      ],
      "predicates": [
        "SpendTimeTogether(x, y) ::: x and y spend time together.",
        "Tour(x, y, z) ::: x gives a tour of y to z.",
        "ShowAround(x, y, z) ::: x shows y around z.",
        "SkinnyDipping(x, y) ::: x and y go skinny dipping.",
        "Kiss(x, y) ::: x kisses y.",
        "FoundBy(x, y) ::: x is found by y.",
        "LockedInRoom(x) ::: x is locked in her room.",
        "Invite(x, y) ::: x invites y to lie next to her.",
        "WakesUpInPain(x) ::: x wakes up in pain.",
        "ClaimsMiscarriage(x) ::: x claims she is having a miscarriage.",
        "TendsTo(x, y) ::: x tends to y.",
        "WantsToForget(x, y) ::: x wants to forget y.",
        "ReturnsToSet(x) ::: x returns to the set.",
        "Praises(x, y) ::: x praises y.",
        "Reveals(x, y) ::: x reveals y.",
        "Asks(x, y) ::: x asks y.",
        "Replies(x, y) ::: x replies to y.",
        "Thanks(x, y) ::: x thanks y.",
        "KissesGoodbye(x, y) ::: x kisses y goodbye.",
        "DrivesTo(x, y) ::: x drives y to a location."
      ],
      "premises": [
        "SpendTimeTogether(colin, marilyn) ::: Colin and Marilyn spend the day together.",
        "Tour(owenMorshead, windsorCastle, marilyn) ::: Owen Morshead gives a tour of Windsor Castle to Marilyn.",
        "ShowAround(colin, marilyn, etonCollege) ::: Colin shows Marilyn around Eton College.",
        "SkinnyDipping(colin, marilyn) ::: Colin and Marilyn go skinny dipping in the River Thames.",
        "Kiss(marilyn, colin) ::: Marilyn kisses Colin.",
        "FoundBy(marilyn, rogerSmith) ::: Marilyn is found by Roger Smith.",
        "LockedInRoom(marilyn) ::: Marilyn has locked herself in her room.",
        "Invite(marilyn, colin) ::: Marilyn invites Colin to lie next to her on the bed.",
        "WakesUpInPain(marilyn) ::: Marilyn wakes up in pain.",
        "ClaimsMiscarriage(marilyn) ::: Marilyn claims she is having a miscarriage.",
        "TendsTo(doctor, marilyn) ::: A doctor tends to Marilyn.",
        "WantsToForget(marilyn, relationshipWithColin) ::: Marilyn wants to forget her relationship with Colin to focus on being a good wife to Arthur.",
        "ReturnsToSet(marilyn) ::: Marilyn returns to the set to complete the film.",
        "Praises(olivier, marilyn) ::: Olivier praises Marilyn.",
        "Reveals(olivier, desireToDirectAgain) ::: Olivier reveals she has killed his desire to direct again.",
        "Asks(lucy, colin) ::: Lucy asks Colin if Marilyn broke his heart.",
        "Replies(colin, lucy) ::: Colin replies that she did.",
        "Replies(lucy, colin) ::: Lucy replies that he needed it.",
        "Thanks(marilyn, colin) ::: Marilyn thanks Colin for helping her.",
        "KissesGoodbye(marilyn, colin) ::: Marilyn kisses Colin goodbye.",
        "DrivesTo(rogerSmith, airport) ::: Roger drives Marilyn to the airport."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "797": [
    {
      "id": 797,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 2,
      "paragraph": "Marilyn struggles to understand her character and leaves the set when Olivier insults her. Colin asks the director to be more sympathetic towards Marilyn, before he goes to Parkside House to check on her. He hears an argument and finds a tearful Marilyn sitting on the stairs with Arthur's notebook, which contains the plot of a new play that appears to poke fun at her. Arthur later returns to the United States. Vivien comes to the set and watches some of Marilyn's scenes. She breaks down, saying Marilyn lights up the screen and if only Olivier could see himself when he watches her. Olivier tries unsuccessfully to reassure his wife. Marilyn does not show up to the set following Arthur's departure and she asks Colin to come to Parkside and they talk. The crew becomes captivated by Marilyn when she dances for a scene and Milton pulls Colin aside to tell him Marilyn breaks hearts and that she will break his too. Lucy also notices Colin's growing infatuation with Marilyn and breaks up with him.",
      "question_template": "Cynthia brings Jill to the park because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Lucy also notices Colin's growing infatuation with Marilyn"
      ],
      "predicates": [
        "UnderstandsImpact(x, y) ::: x understands the impact of his actions on y.",
        "Captivates(x, y) ::: x captivates those around her/him.",
        "Infatuated(x, y) ::: x develops an infatuation with y.",
        "Reacts(x, y) ::: x reacts to y."
      ],
      "premises": [
        "¬UnderstandsImpact(olivier, marilyn) ::: Olivier does not understand the impact of his actions on Marilyn.",
        "Captivates(marilyn, a_0) ::: Marilyn's presence captivates those around her.",
        "Infatuated(colin, marilyn) ::: Colin develops an infatuation with Marilyn.",
        "Reacts(lucy, infatuation(colin, marilyn)) ::: Lucy reacts to Colin's infatuation with Marilyn."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "798": [
    {
      "id": 798,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 3,
      "paragraph": "Colin and Marilyn spend the day together and are given a tour of the library of Windsor Castle by Owen Morshead (Derek Jacobi). Colin also shows Marilyn around Eton College, and they go skinny dipping in the River Thames. Marilyn kisses Colin and they are found by Roger Smith (Philip Jackson), Marilyn's bodyguard. Colin is called to Parkside one night as Marilyn has locked herself in her room. Colin enters her room and Marilyn invites him to lie next to her on the bed. The following night, Marilyn wakes up in pain and claims she is having a miscarriage. A doctor tends to her and Marilyn tells Colin that Arthur is coming back and she wants to try and be a good wife to him, so she and Colin should forget everything that happened between them. She later returns to the set to complete the film. Olivier praises Marilyn, but reveals she has killed his desire to direct again. Lucy asks Colin if Marilyn broke his heart and he replies that she did, to which she replies that he needed it. Marilyn comes to a local pub, where Colin is staying, and thanks him for helping her. She kisses him goodbye and Roger drives her to the airport.",
      "question_template": "[[CANDIDATE_ANSWER]] prevents Ed from doing anything about the show at the funeral.",
      "candidate_answers": [
        "a tour of the library of Windsor Castle",
        "Eton College"
      ],
      "predicates": [
        "SpendTimeTogether(x, y) ::: x and y spend time together.",
        "Tour(x, y, z) ::: x gives a tour of y to z.",
        "ShowAround(x, y, z) ::: x shows y around z.",
        "SkinnyDipping(x, y) ::: x and y go skinny dipping.",
        "Kiss(x, y) ::: x kisses y.",
        "FoundBy(x, y) ::: x is found by y.",
        "LockedInRoom(x) ::: x is locked in her room.",
        "Invite(x, y) ::: x invites y to lie next to her.",
        "WakesUpInPain(x) ::: x wakes up in pain.",
        "ClaimsMiscarriage(x) ::: x claims she is having a miscarriage.",
        "TendsTo(x, y) ::: x tends to y.",
        "WantsToForget(x, y) ::: x wants to forget y.",
        "ReturnsToSet(x) ::: x returns to the set.",
        "Praises(x, y) ::: x praises y.",
        "Reveals(x, y) ::: x reveals y.",
        "Asks(x, y) ::: x asks y.",
        "Replies(x, y) ::: x replies to y.",
        "Thanks(x, y) ::: x thanks y.",
        "KissesGoodbye(x, y) ::: x kisses y goodbye.",
        "DrivesTo(x, y) ::: x drives y to a location."
      ],
      "premises": [
        "SpendTimeTogether(colin, marilyn) ::: Colin and Marilyn spend the day together.",
        "Tour(owenMorshead, windsorCastle, marilyn) ::: Owen Morshead gives a tour of Windsor Castle to Marilyn.",
        "ShowAround(colin, marilyn, etonCollege) ::: Colin shows Marilyn around Eton College.",
        "SkinnyDipping(colin, marilyn) ::: Colin and Marilyn go skinny dipping in the River Thames.",
        "Kiss(marilyn, colin) ::: Marilyn kisses Colin.",
        "FoundBy(marilyn, rogerSmith) ::: Marilyn is found by Roger Smith.",
        "LockedInRoom(marilyn) ::: Marilyn has locked herself in her room.",
        "Invite(marilyn, colin) ::: Marilyn invites Colin to lie next to her on the bed.",
        "WakesUpInPain(marilyn) ::: Marilyn wakes up in pain.",
        "ClaimsMiscarriage(marilyn) ::: Marilyn claims she is having a miscarriage.",
        "TendsTo(doctor, marilyn) ::: A doctor tends to Marilyn.",
        "WantsToForget(marilyn, relationshipWithColin) ::: Marilyn wants to forget her relationship with Colin to focus on being a good wife to Arthur.",
        "ReturnsToSet(marilyn) ::: Marilyn returns to the set to complete the film.",
        "Praises(olivier, marilyn) ::: Olivier praises Marilyn.",
        "Reveals(olivier, desireToDirectAgain) ::: Olivier reveals she has killed his desire to direct again.",
        "Asks(lucy, colin) ::: Lucy asks Colin if Marilyn broke his heart.",
        "Replies(colin, lucy) ::: Colin replies that she did.",
        "Replies(lucy, colin) ::: Lucy replies that he needed it.",
        "Thanks(marilyn, colin) ::: Marilyn thanks Colin for helping her.",
        "KissesGoodbye(marilyn, colin) ::: Marilyn kisses Colin goodbye.",
        "DrivesTo(rogerSmith, airport) ::: Roger drives Marilyn to the airport."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "799": [
    {
      "id": 799,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 0,
      "paragraph": " Following his graduation from university in 1956, aspiring filmmaker Colin Clark (Eddie Redmayne) travels to London to get a job on Laurence Olivier's (Kenneth Branagh) next production. Production manager Hugh Perceval (Michael Kitchen) tells Colin that there are no jobs available, but he decides to wait for Olivier, whom he once met at a party. Olivier and his wife, Vivien Leigh (Julia Ormond), eventually show up and Vivien encourages Olivier to give Colin a job on his upcoming film The Prince and the Showgirl, starring Marilyn Monroe (Michelle Williams). Colin's first task is to find a suitable place for Marilyn and her husband, Arthur Miller (Dougray Scott), to stay at while they are in England. The press find out about the house, but Colin reveals he secured a second house just in case, impressing Olivier and Marilyn's publicist, Arthur P. Jacobs (Toby Jones).",
      "question_template": "Ed follows Shari to [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- London",
        "- England"
      ],
      "predicates": [
        "Graduated(x) ::: x has graduated from university.",
        "AspiringFilmmaker(x) ::: x is an aspiring filmmaker.",
        "TravelsTo(x, y) ::: x travels to y.",
        "JobAvailable(x) ::: x has a job available.",
        "WaitsFor(x, y) ::: x waits for y.",
        "Encourages(x, y, z) ::: x encourages y to do z.",
        "GivesJob(x, y, z) ::: x gives y a job on z.",
        "FindsPlaceFor(x, y, z) ::: x finds a suitable place for y and z.",
        "Impresses(x, y, z) ::: x impresses y and z."
      ],
      "premises": [
        "Graduated(colin) ::: Colin graduated from university in 1956.",
        "AspiringFilmmaker(colin) ::: Colin is an aspiring filmmaker.",
        "TravelsTo(colin, london) ::: Colin travels to London to get a job.",
        "¬JobAvailable(olivier) ::: There are no jobs available on Olivier's next production.",
        "WaitsFor(colin, olivier) ::: Colin decides to wait for Olivier.",
        "Encourages(vivien, olivier, givesJob(colin, olivier, thePrinceAndTheShowgirl)) ::: Vivien encourages Olivier to give Colin a job on his upcoming film The Prince and the Showgirl.",
        "FindsPlaceFor(colin, marilyn, arthur) ::: Colin's first task is to find a suitable place for Marilyn and her husband, Arthur Miller, to stay while they are in England.",
        "Impresses(colin, olivier, arthurPJacobs) ::: Colin impresses Olivier and Marilyn's publicist, Arthur P. Jacobs.",
        "Conclusion:",
        "GivesJob(olivier, colin, thePrinceAndTheShowgirl) ::: Olivier gives Colin a job on The Prince and the Showgirl due to Vivien Leigh's encouragement."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 799,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 2,
      "paragraph": "Marilyn struggles to understand her character and leaves the set when Olivier insults her. Colin asks the director to be more sympathetic towards Marilyn, before he goes to Parkside House to check on her. He hears an argument and finds a tearful Marilyn sitting on the stairs with Arthur's notebook, which contains the plot of a new play that appears to poke fun at her. Arthur later returns to the United States. Vivien comes to the set and watches some of Marilyn's scenes. She breaks down, saying Marilyn lights up the screen and if only Olivier could see himself when he watches her. Olivier tries unsuccessfully to reassure his wife. Marilyn does not show up to the set following Arthur's departure and she asks Colin to come to Parkside and they talk. The crew becomes captivated by Marilyn when she dances for a scene and Milton pulls Colin aside to tell him Marilyn breaks hearts and that she will break his too. Lucy also notices Colin's growing infatuation with Marilyn and breaks up with him.",
      "question_template": "Ed follows Shari to [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The set",
        "Parkside House"
      ],
      "predicates": [
        "UnderstandsImpact(x, y) ::: x understands the impact of his actions on y.",
        "Captivates(x, y) ::: x captivates those around her/him.",
        "Infatuated(x, y) ::: x develops an infatuation with y.",
        "Reacts(x, y) ::: x reacts to y."
      ],
      "premises": [
        "¬UnderstandsImpact(olivier, marilyn) ::: Olivier does not understand the impact of his actions on Marilyn.",
        "Captivates(marilyn, a_0) ::: Marilyn's presence captivates those around her.",
        "Infatuated(colin, marilyn) ::: Colin develops an infatuation with Marilyn.",
        "Reacts(lucy, infatuation(colin, marilyn)) ::: Lucy reacts to Colin's infatuation with Marilyn."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 799,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 3,
      "paragraph": "Colin and Marilyn spend the day together and are given a tour of the library of Windsor Castle by Owen Morshead (Derek Jacobi). Colin also shows Marilyn around Eton College, and they go skinny dipping in the River Thames. Marilyn kisses Colin and they are found by Roger Smith (Philip Jackson), Marilyn's bodyguard. Colin is called to Parkside one night as Marilyn has locked herself in her room. Colin enters her room and Marilyn invites him to lie next to her on the bed. The following night, Marilyn wakes up in pain and claims she is having a miscarriage. A doctor tends to her and Marilyn tells Colin that Arthur is coming back and she wants to try and be a good wife to him, so she and Colin should forget everything that happened between them. She later returns to the set to complete the film. Olivier praises Marilyn, but reveals she has killed his desire to direct again. Lucy asks Colin if Marilyn broke his heart and he replies that she did, to which she replies that he needed it. Marilyn comes to a local pub, where Colin is staying, and thanks him for helping her. She kisses him goodbye and Roger drives her to the airport.",
      "question_template": "Ed follows Shari to [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The library of Windsor Castle",
        "Eton College",
        "A local pub"
      ],
      "predicates": [
        "SpendTimeTogether(x, y) ::: x and y spend time together.",
        "Tour(x, y, z) ::: x gives a tour of y to z.",
        "ShowAround(x, y, z) ::: x shows y around z.",
        "SkinnyDipping(x, y) ::: x and y go skinny dipping.",
        "Kiss(x, y) ::: x kisses y.",
        "FoundBy(x, y) ::: x is found by y.",
        "LockedInRoom(x) ::: x is locked in her room.",
        "Invite(x, y) ::: x invites y to lie next to her.",
        "WakesUpInPain(x) ::: x wakes up in pain.",
        "ClaimsMiscarriage(x) ::: x claims she is having a miscarriage.",
        "TendsTo(x, y) ::: x tends to y.",
        "WantsToForget(x, y) ::: x wants to forget y.",
        "ReturnsToSet(x) ::: x returns to the set.",
        "Praises(x, y) ::: x praises y.",
        "Reveals(x, y) ::: x reveals y.",
        "Asks(x, y) ::: x asks y.",
        "Replies(x, y) ::: x replies to y.",
        "Thanks(x, y) ::: x thanks y.",
        "KissesGoodbye(x, y) ::: x kisses y goodbye.",
        "DrivesTo(x, y) ::: x drives y to a location."
      ],
      "premises": [
        "SpendTimeTogether(colin, marilyn) ::: Colin and Marilyn spend the day together.",
        "Tour(owenMorshead, windsorCastle, marilyn) ::: Owen Morshead gives a tour of Windsor Castle to Marilyn.",
        "ShowAround(colin, marilyn, etonCollege) ::: Colin shows Marilyn around Eton College.",
        "SkinnyDipping(colin, marilyn) ::: Colin and Marilyn go skinny dipping in the River Thames.",
        "Kiss(marilyn, colin) ::: Marilyn kisses Colin.",
        "FoundBy(marilyn, rogerSmith) ::: Marilyn is found by Roger Smith.",
        "LockedInRoom(marilyn) ::: Marilyn has locked herself in her room.",
        "Invite(marilyn, colin) ::: Marilyn invites Colin to lie next to her on the bed.",
        "WakesUpInPain(marilyn) ::: Marilyn wakes up in pain.",
        "ClaimsMiscarriage(marilyn) ::: Marilyn claims she is having a miscarriage.",
        "TendsTo(doctor, marilyn) ::: A doctor tends to Marilyn.",
        "WantsToForget(marilyn, relationshipWithColin) ::: Marilyn wants to forget her relationship with Colin to focus on being a good wife to Arthur.",
        "ReturnsToSet(marilyn) ::: Marilyn returns to the set to complete the film.",
        "Praises(olivier, marilyn) ::: Olivier praises Marilyn.",
        "Reveals(olivier, desireToDirectAgain) ::: Olivier reveals she has killed his desire to direct again.",
        "Asks(lucy, colin) ::: Lucy asks Colin if Marilyn broke his heart.",
        "Replies(colin, lucy) ::: Colin replies that she did.",
        "Replies(lucy, colin) ::: Lucy replies that he needed it.",
        "Thanks(marilyn, colin) ::: Marilyn thanks Colin for helping her.",
        "KissesGoodbye(marilyn, colin) ::: Marilyn kisses Colin goodbye.",
        "DrivesTo(rogerSmith, airport) ::: Roger drives Marilyn to the airport."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "801": [
    {
      "id": 801,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 1,
      "paragraph": "The paparazzi find out about Marilyn's arrival at Heathrow and they gather around the plane when it lands. Marilyn brings her husband, her business partner, Milton H. Greene (Dominic Cooper), and her acting coach Paula Strasberg (ZoĂŤ Wanamaker) with her. She initially appears to be uncomfortable around the many photographers, but relaxes at the press conference. Olivier becomes frustrated when Marilyn is late to the read-through. She insists Paula sits with her and when she has trouble with her lines, Paula reads them for her. The crew and the other actors, including Sybil Thorndike (Judi Dench), are in awe of Marilyn. Colin meets Lucy (Emma Watson), a wardrobe assistant to whom he is attracted, and they go on a date. Marilyn starts arriving later to the set and often forgets her lines, angering Olivier. However, Sybil praises Marilyn and defends her when Olivier tries to get her to apologise for holding the shoot up.",
      "question_template": "Ed gets the show to end by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "her husband",
        "Milton H. Greene"
      ],
      "predicates": [
        "Discomfort(x) ::: x is uncomfortable around photographers.",
        "Relaxed(x) ::: x is relaxed at the press conference.",
        "Frustrated(x, y) ::: x is frustrated with y.",
        "Assists(x, y) ::: x assists y with her lines.",
        "Attracted(x, y) ::: x is attracted to y.",
        "Praise(x, y) ::: x praises y.",
        "Defend(x, y) ::: x defends y against criticism.",
        "Late(x) ::: x is late to an event."
      ],
      "premises": [
        "Discomfort(a_2) ∧ Late(a_2, readThrough) ∧ Frustrated(a_6, a_2) ∧ Assists(a_4, a_2) ∧ Attracted(a_1, a_7) ∧ Praise(a_3, a_2) ∧ Defend(a_3, a_2) ::: Marilyn is initially uncomfortable around photographers, is late to the read-through, Olivier is frustrated with her, Paula assists Marilyn with her lines, Colin is attracted to Lucy, and Sybil praises and defends Marilyn.",
        "Relaxed(a_2) ::: Marilyn's discomfort around photographers decreases at the press conference.",
        "Frustrated(a_6, a_2) ::: Marilyn's lateness to the read-through frustrates Olivier.",
        "Assists(a_4, a_2) ::: Paula Strasberg assists Marilyn with her lines.",
        "Attracted(a_1, a_7) → Date(a_1, a_7) ::: Colin's attraction to Lucy leads to a date.",
        "Praise(a_3, a_2) ∧ Defend(a_3, a_2) ::: Sybil Thorndike's praise and defense of Marilyn occur in response to Olivier's frustration."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 801,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 2,
      "paragraph": "Marilyn struggles to understand her character and leaves the set when Olivier insults her. Colin asks the director to be more sympathetic towards Marilyn, before he goes to Parkside House to check on her. He hears an argument and finds a tearful Marilyn sitting on the stairs with Arthur's notebook, which contains the plot of a new play that appears to poke fun at her. Arthur later returns to the United States. Vivien comes to the set and watches some of Marilyn's scenes. She breaks down, saying Marilyn lights up the screen and if only Olivier could see himself when he watches her. Olivier tries unsuccessfully to reassure his wife. Marilyn does not show up to the set following Arthur's departure and she asks Colin to come to Parkside and they talk. The crew becomes captivated by Marilyn when she dances for a scene and Milton pulls Colin aside to tell him Marilyn breaks hearts and that she will break his too. Lucy also notices Colin's growing infatuation with Marilyn and breaks up with him.",
      "question_template": "Ed gets the show to end by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Arthur",
        "Colin"
      ],
      "predicates": [
        "UnderstandsImpact(x, y) ::: x understands the impact of his actions on y.",
        "Captivates(x, y) ::: x captivates those around her/him.",
        "Infatuated(x, y) ::: x develops an infatuation with y.",
        "Reacts(x, y) ::: x reacts to y."
      ],
      "premises": [
        "¬UnderstandsImpact(olivier, marilyn) ::: Olivier does not understand the impact of his actions on Marilyn.",
        "Captivates(marilyn, a_0) ::: Marilyn's presence captivates those around her.",
        "Infatuated(colin, marilyn) ::: Colin develops an infatuation with Marilyn.",
        "Reacts(lucy, infatuation(colin, marilyn)) ::: Lucy reacts to Colin's infatuation with Marilyn."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "803": [
    {
      "id": 803,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 0,
      "paragraph": " Following his graduation from university in 1956, aspiring filmmaker Colin Clark (Eddie Redmayne) travels to London to get a job on Laurence Olivier's (Kenneth Branagh) next production. Production manager Hugh Perceval (Michael Kitchen) tells Colin that there are no jobs available, but he decides to wait for Olivier, whom he once met at a party. Olivier and his wife, Vivien Leigh (Julia Ormond), eventually show up and Vivien encourages Olivier to give Colin a job on his upcoming film The Prince and the Showgirl, starring Marilyn Monroe (Michelle Williams). Colin's first task is to find a suitable place for Marilyn and her husband, Arthur Miller (Dougray Scott), to stay at while they are in England. The press find out about the house, but Colin reveals he secured a second house just in case, impressing Olivier and Marilyn's publicist, Arthur P. Jacobs (Toby Jones).",
      "question_template": "Cynthia's new idea for a TV show is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Laurence Olivier's next production",
        "The Prince and the Showgirl"
      ],
      "predicates": [
        "Graduated(x) ::: x has graduated from university.",
        "AspiringFilmmaker(x) ::: x is an aspiring filmmaker.",
        "TravelsTo(x, y) ::: x travels to y.",
        "JobAvailable(x) ::: x has a job available.",
        "WaitsFor(x, y) ::: x waits for y.",
        "Encourages(x, y, z) ::: x encourages y to do z.",
        "GivesJob(x, y, z) ::: x gives y a job on z.",
        "FindsPlaceFor(x, y, z) ::: x finds a suitable place for y and z.",
        "Impresses(x, y, z) ::: x impresses y and z."
      ],
      "premises": [
        "Graduated(colin) ::: Colin graduated from university in 1956.",
        "AspiringFilmmaker(colin) ::: Colin is an aspiring filmmaker.",
        "TravelsTo(colin, london) ::: Colin travels to London to get a job.",
        "¬JobAvailable(olivier) ::: There are no jobs available on Olivier's next production.",
        "WaitsFor(colin, olivier) ::: Colin decides to wait for Olivier.",
        "Encourages(vivien, olivier, givesJob(colin, olivier, thePrinceAndTheShowgirl)) ::: Vivien encourages Olivier to give Colin a job on his upcoming film The Prince and the Showgirl.",
        "FindsPlaceFor(colin, marilyn, arthur) ::: Colin's first task is to find a suitable place for Marilyn and her husband, Arthur Miller, to stay while they are in England.",
        "Impresses(colin, olivier, arthurPJacobs) ::: Colin impresses Olivier and Marilyn's publicist, Arthur P. Jacobs.",
        "Conclusion:",
        "GivesJob(olivier, colin, thePrinceAndTheShowgirl) ::: Olivier gives Colin a job on The Prince and the Showgirl due to Vivien Leigh's encouragement."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 803,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 2,
      "paragraph": "Marilyn struggles to understand her character and leaves the set when Olivier insults her. Colin asks the director to be more sympathetic towards Marilyn, before he goes to Parkside House to check on her. He hears an argument and finds a tearful Marilyn sitting on the stairs with Arthur's notebook, which contains the plot of a new play that appears to poke fun at her. Arthur later returns to the United States. Vivien comes to the set and watches some of Marilyn's scenes. She breaks down, saying Marilyn lights up the screen and if only Olivier could see himself when he watches her. Olivier tries unsuccessfully to reassure his wife. Marilyn does not show up to the set following Arthur's departure and she asks Colin to come to Parkside and they talk. The crew becomes captivated by Marilyn when she dances for a scene and Milton pulls Colin aside to tell him Marilyn breaks hearts and that she will break his too. Lucy also notices Colin's growing infatuation with Marilyn and breaks up with him.",
      "question_template": "Cynthia's new idea for a TV show is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Arthur's production"
      ],
      "predicates": [
        "UnderstandsImpact(x, y) ::: x understands the impact of his actions on y.",
        "Captivates(x, y) ::: x captivates those around her/him.",
        "Infatuated(x, y) ::: x develops an infatuation with y.",
        "Reacts(x, y) ::: x reacts to y."
      ],
      "premises": [
        "¬UnderstandsImpact(olivier, marilyn) ::: Olivier does not understand the impact of his actions on Marilyn.",
        "Captivates(marilyn, a_0) ::: Marilyn's presence captivates those around her.",
        "Infatuated(colin, marilyn) ::: Colin develops an infatuation with Marilyn.",
        "Reacts(lucy, infatuation(colin, marilyn)) ::: Lucy reacts to Colin's infatuation with Marilyn."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "804": [
    {
      "id": 804,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 0,
      "paragraph": " Following his graduation from university in 1956, aspiring filmmaker Colin Clark (Eddie Redmayne) travels to London to get a job on Laurence Olivier's (Kenneth Branagh) next production. Production manager Hugh Perceval (Michael Kitchen) tells Colin that there are no jobs available, but he decides to wait for Olivier, whom he once met at a party. Olivier and his wife, Vivien Leigh (Julia Ormond), eventually show up and Vivien encourages Olivier to give Colin a job on his upcoming film The Prince and the Showgirl, starring Marilyn Monroe (Michelle Williams). Colin's first task is to find a suitable place for Marilyn and her husband, Arthur Miller (Dougray Scott), to stay at while they are in England. The press find out about the house, but Colin reveals he secured a second house just in case, impressing Olivier and Marilyn's publicist, Arthur P. Jacobs (Toby Jones).",
      "question_template": "Ed visits Shari because of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Vivien encourages Olivier to give Colin a job"
      ],
      "predicates": [
        "Graduated(x) ::: x has graduated from university.",
        "AspiringFilmmaker(x) ::: x is an aspiring filmmaker.",
        "TravelsTo(x, y) ::: x travels to y.",
        "JobAvailable(x) ::: x has a job available.",
        "WaitsFor(x, y) ::: x waits for y.",
        "Encourages(x, y, z) ::: x encourages y to do z.",
        "GivesJob(x, y, z) ::: x gives y a job on z.",
        "FindsPlaceFor(x, y, z) ::: x finds a suitable place for y and z.",
        "Impresses(x, y, z) ::: x impresses y and z."
      ],
      "premises": [
        "Graduated(colin) ::: Colin graduated from university in 1956.",
        "AspiringFilmmaker(colin) ::: Colin is an aspiring filmmaker.",
        "TravelsTo(colin, london) ::: Colin travels to London to get a job.",
        "¬JobAvailable(olivier) ::: There are no jobs available on Olivier's next production.",
        "WaitsFor(colin, olivier) ::: Colin decides to wait for Olivier.",
        "Encourages(vivien, olivier, givesJob(colin, olivier, thePrinceAndTheShowgirl)) ::: Vivien encourages Olivier to give Colin a job on his upcoming film The Prince and the Showgirl.",
        "FindsPlaceFor(colin, marilyn, arthur) ::: Colin's first task is to find a suitable place for Marilyn and her husband, Arthur Miller, to stay while they are in England.",
        "Impresses(colin, olivier, arthurPJacobs) ::: Colin impresses Olivier and Marilyn's publicist, Arthur P. Jacobs.",
        "Conclusion:",
        "GivesJob(olivier, colin, thePrinceAndTheShowgirl) ::: Olivier gives Colin a job on The Prince and the Showgirl due to Vivien Leigh's encouragement."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 804,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 2,
      "paragraph": "Marilyn struggles to understand her character and leaves the set when Olivier insults her. Colin asks the director to be more sympathetic towards Marilyn, before he goes to Parkside House to check on her. He hears an argument and finds a tearful Marilyn sitting on the stairs with Arthur's notebook, which contains the plot of a new play that appears to poke fun at her. Arthur later returns to the United States. Vivien comes to the set and watches some of Marilyn's scenes. She breaks down, saying Marilyn lights up the screen and if only Olivier could see himself when he watches her. Olivier tries unsuccessfully to reassure his wife. Marilyn does not show up to the set following Arthur's departure and she asks Colin to come to Parkside and they talk. The crew becomes captivated by Marilyn when she dances for a scene and Milton pulls Colin aside to tell him Marilyn breaks hearts and that she will break his too. Lucy also notices Colin's growing infatuation with Marilyn and breaks up with him.",
      "question_template": "Ed visits Shari because of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Colin asks the director to be more sympathetic towards Marilyn"
      ],
      "predicates": [
        "UnderstandsImpact(x, y) ::: x understands the impact of his actions on y.",
        "Captivates(x, y) ::: x captivates those around her/him.",
        "Infatuated(x, y) ::: x develops an infatuation with y.",
        "Reacts(x, y) ::: x reacts to y."
      ],
      "premises": [
        "¬UnderstandsImpact(olivier, marilyn) ::: Olivier does not understand the impact of his actions on Marilyn.",
        "Captivates(marilyn, a_0) ::: Marilyn's presence captivates those around her.",
        "Infatuated(colin, marilyn) ::: Colin develops an infatuation with Marilyn.",
        "Reacts(lucy, infatuation(colin, marilyn)) ::: Lucy reacts to Colin's infatuation with Marilyn."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "805": [
    {
      "id": 805,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 2,
      "paragraph": "Marilyn struggles to understand her character and leaves the set when Olivier insults her. Colin asks the director to be more sympathetic towards Marilyn, before he goes to Parkside House to check on her. He hears an argument and finds a tearful Marilyn sitting on the stairs with Arthur's notebook, which contains the plot of a new play that appears to poke fun at her. Arthur later returns to the United States. Vivien comes to the set and watches some of Marilyn's scenes. She breaks down, saying Marilyn lights up the screen and if only Olivier could see himself when he watches her. Olivier tries unsuccessfully to reassure his wife. Marilyn does not show up to the set following Arthur's departure and she asks Colin to come to Parkside and they talk. The crew becomes captivated by Marilyn when she dances for a scene and Milton pulls Colin aside to tell him Marilyn breaks hearts and that she will break his too. Lucy also notices Colin's growing infatuation with Marilyn and breaks up with him.",
      "question_template": "After Ed reveals his feelings to Shari during the visit, [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Lucy also notices Colin's growing infatuation with Marilyn and breaks up with him."
      ],
      "predicates": [
        "UnderstandsImpact(x, y) ::: x understands the impact of his actions on y.",
        "Captivates(x, y) ::: x captivates those around her/him.",
        "Infatuated(x, y) ::: x develops an infatuation with y.",
        "Reacts(x, y) ::: x reacts to y."
      ],
      "premises": [
        "¬UnderstandsImpact(olivier, marilyn) ::: Olivier does not understand the impact of his actions on Marilyn.",
        "Captivates(marilyn, a_0) ::: Marilyn's presence captivates those around her.",
        "Infatuated(colin, marilyn) ::: Colin develops an infatuation with Marilyn.",
        "Reacts(lucy, infatuation(colin, marilyn)) ::: Lucy reacts to Colin's infatuation with Marilyn."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 805,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 3,
      "paragraph": "Colin and Marilyn spend the day together and are given a tour of the library of Windsor Castle by Owen Morshead (Derek Jacobi). Colin also shows Marilyn around Eton College, and they go skinny dipping in the River Thames. Marilyn kisses Colin and they are found by Roger Smith (Philip Jackson), Marilyn's bodyguard. Colin is called to Parkside one night as Marilyn has locked herself in her room. Colin enters her room and Marilyn invites him to lie next to her on the bed. The following night, Marilyn wakes up in pain and claims she is having a miscarriage. A doctor tends to her and Marilyn tells Colin that Arthur is coming back and she wants to try and be a good wife to him, so she and Colin should forget everything that happened between them. She later returns to the set to complete the film. Olivier praises Marilyn, but reveals she has killed his desire to direct again. Lucy asks Colin if Marilyn broke his heart and he replies that she did, to which she replies that he needed it. Marilyn comes to a local pub, where Colin is staying, and thanks him for helping her. She kisses him goodbye and Roger drives her to the airport.",
      "question_template": "After Ed reveals his feelings to Shari during the visit, [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Lucy asks Colin if Marilyn broke his heart"
      ],
      "predicates": [
        "SpendTimeTogether(x, y) ::: x and y spend time together.",
        "Tour(x, y, z) ::: x gives a tour of y to z.",
        "ShowAround(x, y, z) ::: x shows y around z.",
        "SkinnyDipping(x, y) ::: x and y go skinny dipping.",
        "Kiss(x, y) ::: x kisses y.",
        "FoundBy(x, y) ::: x is found by y.",
        "LockedInRoom(x) ::: x is locked in her room.",
        "Invite(x, y) ::: x invites y to lie next to her.",
        "WakesUpInPain(x) ::: x wakes up in pain.",
        "ClaimsMiscarriage(x) ::: x claims she is having a miscarriage.",
        "TendsTo(x, y) ::: x tends to y.",
        "WantsToForget(x, y) ::: x wants to forget y.",
        "ReturnsToSet(x) ::: x returns to the set.",
        "Praises(x, y) ::: x praises y.",
        "Reveals(x, y) ::: x reveals y.",
        "Asks(x, y) ::: x asks y.",
        "Replies(x, y) ::: x replies to y.",
        "Thanks(x, y) ::: x thanks y.",
        "KissesGoodbye(x, y) ::: x kisses y goodbye.",
        "DrivesTo(x, y) ::: x drives y to a location."
      ],
      "premises": [
        "SpendTimeTogether(colin, marilyn) ::: Colin and Marilyn spend the day together.",
        "Tour(owenMorshead, windsorCastle, marilyn) ::: Owen Morshead gives a tour of Windsor Castle to Marilyn.",
        "ShowAround(colin, marilyn, etonCollege) ::: Colin shows Marilyn around Eton College.",
        "SkinnyDipping(colin, marilyn) ::: Colin and Marilyn go skinny dipping in the River Thames.",
        "Kiss(marilyn, colin) ::: Marilyn kisses Colin.",
        "FoundBy(marilyn, rogerSmith) ::: Marilyn is found by Roger Smith.",
        "LockedInRoom(marilyn) ::: Marilyn has locked herself in her room.",
        "Invite(marilyn, colin) ::: Marilyn invites Colin to lie next to her on the bed.",
        "WakesUpInPain(marilyn) ::: Marilyn wakes up in pain.",
        "ClaimsMiscarriage(marilyn) ::: Marilyn claims she is having a miscarriage.",
        "TendsTo(doctor, marilyn) ::: A doctor tends to Marilyn.",
        "WantsToForget(marilyn, relationshipWithColin) ::: Marilyn wants to forget her relationship with Colin to focus on being a good wife to Arthur.",
        "ReturnsToSet(marilyn) ::: Marilyn returns to the set to complete the film.",
        "Praises(olivier, marilyn) ::: Olivier praises Marilyn.",
        "Reveals(olivier, desireToDirectAgain) ::: Olivier reveals she has killed his desire to direct again.",
        "Asks(lucy, colin) ::: Lucy asks Colin if Marilyn broke his heart.",
        "Replies(colin, lucy) ::: Colin replies that she did.",
        "Replies(lucy, colin) ::: Lucy replies that he needed it.",
        "Thanks(marilyn, colin) ::: Marilyn thanks Colin for helping her.",
        "KissesGoodbye(marilyn, colin) ::: Marilyn kisses Colin goodbye.",
        "DrivesTo(rogerSmith, airport) ::: Roger drives Marilyn to the airport."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "806": [
    {
      "id": 806,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 3,
      "paragraph": "Colin and Marilyn spend the day together and are given a tour of the library of Windsor Castle by Owen Morshead (Derek Jacobi). Colin also shows Marilyn around Eton College, and they go skinny dipping in the River Thames. Marilyn kisses Colin and they are found by Roger Smith (Philip Jackson), Marilyn's bodyguard. Colin is called to Parkside one night as Marilyn has locked herself in her room. Colin enters her room and Marilyn invites him to lie next to her on the bed. The following night, Marilyn wakes up in pain and claims she is having a miscarriage. A doctor tends to her and Marilyn tells Colin that Arthur is coming back and she wants to try and be a good wife to him, so she and Colin should forget everything that happened between them. She later returns to the set to complete the film. Olivier praises Marilyn, but reveals she has killed his desire to direct again. Lucy asks Colin if Marilyn broke his heart and he replies that she did, to which she replies that he needed it. Marilyn comes to a local pub, where Colin is staying, and thanks him for helping her. She kisses him goodbye and Roger drives her to the airport.",
      "question_template": "Shari is abused by viewers because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Olivier praises Marilyn, but reveals she has killed his desire to direct again."
      ],
      "predicates": [
        "SpendTimeTogether(x, y) ::: x and y spend time together.",
        "Tour(x, y, z) ::: x gives a tour of y to z.",
        "ShowAround(x, y, z) ::: x shows y around z.",
        "SkinnyDipping(x, y) ::: x and y go skinny dipping.",
        "Kiss(x, y) ::: x kisses y.",
        "FoundBy(x, y) ::: x is found by y.",
        "LockedInRoom(x) ::: x is locked in her room.",
        "Invite(x, y) ::: x invites y to lie next to her.",
        "WakesUpInPain(x) ::: x wakes up in pain.",
        "ClaimsMiscarriage(x) ::: x claims she is having a miscarriage.",
        "TendsTo(x, y) ::: x tends to y.",
        "WantsToForget(x, y) ::: x wants to forget y.",
        "ReturnsToSet(x) ::: x returns to the set.",
        "Praises(x, y) ::: x praises y.",
        "Reveals(x, y) ::: x reveals y.",
        "Asks(x, y) ::: x asks y.",
        "Replies(x, y) ::: x replies to y.",
        "Thanks(x, y) ::: x thanks y.",
        "KissesGoodbye(x, y) ::: x kisses y goodbye.",
        "DrivesTo(x, y) ::: x drives y to a location."
      ],
      "premises": [
        "SpendTimeTogether(colin, marilyn) ::: Colin and Marilyn spend the day together.",
        "Tour(owenMorshead, windsorCastle, marilyn) ::: Owen Morshead gives a tour of Windsor Castle to Marilyn.",
        "ShowAround(colin, marilyn, etonCollege) ::: Colin shows Marilyn around Eton College.",
        "SkinnyDipping(colin, marilyn) ::: Colin and Marilyn go skinny dipping in the River Thames.",
        "Kiss(marilyn, colin) ::: Marilyn kisses Colin.",
        "FoundBy(marilyn, rogerSmith) ::: Marilyn is found by Roger Smith.",
        "LockedInRoom(marilyn) ::: Marilyn has locked herself in her room.",
        "Invite(marilyn, colin) ::: Marilyn invites Colin to lie next to her on the bed.",
        "WakesUpInPain(marilyn) ::: Marilyn wakes up in pain.",
        "ClaimsMiscarriage(marilyn) ::: Marilyn claims she is having a miscarriage.",
        "TendsTo(doctor, marilyn) ::: A doctor tends to Marilyn.",
        "WantsToForget(marilyn, relationshipWithColin) ::: Marilyn wants to forget her relationship with Colin to focus on being a good wife to Arthur.",
        "ReturnsToSet(marilyn) ::: Marilyn returns to the set to complete the film.",
        "Praises(olivier, marilyn) ::: Olivier praises Marilyn.",
        "Reveals(olivier, desireToDirectAgain) ::: Olivier reveals she has killed his desire to direct again.",
        "Asks(lucy, colin) ::: Lucy asks Colin if Marilyn broke his heart.",
        "Replies(colin, lucy) ::: Colin replies that she did.",
        "Replies(lucy, colin) ::: Lucy replies that he needed it.",
        "Thanks(marilyn, colin) ::: Marilyn thanks Colin for helping her.",
        "KissesGoodbye(marilyn, colin) ::: Marilyn kisses Colin goodbye.",
        "DrivesTo(rogerSmith, airport) ::: Roger drives Marilyn to the airport."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "808": [
    {
      "id": 808,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 2,
      "paragraph": "Marilyn struggles to understand her character and leaves the set when Olivier insults her. Colin asks the director to be more sympathetic towards Marilyn, before he goes to Parkside House to check on her. He hears an argument and finds a tearful Marilyn sitting on the stairs with Arthur's notebook, which contains the plot of a new play that appears to poke fun at her. Arthur later returns to the United States. Vivien comes to the set and watches some of Marilyn's scenes. She breaks down, saying Marilyn lights up the screen and if only Olivier could see himself when he watches her. Olivier tries unsuccessfully to reassure his wife. Marilyn does not show up to the set following Arthur's departure and she asks Colin to come to Parkside and they talk. The crew becomes captivated by Marilyn when she dances for a scene and Milton pulls Colin aside to tell him Marilyn breaks hearts and that she will break his too. Lucy also notices Colin's growing infatuation with Marilyn and breaks up with him.",
      "question_template": "Right before Jill and Ed are about to have sex, [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Marilyn struggles to understand her character and leaves the set when Olivier insults her.",
        "- Colin asks the director to be more sympathetic towards Marilyn.",
        "- He hears an argument and finds a tearful Marilyn sitting on the stairs with Arthur's notebook, which contains the plot of a new play that appears to poke fun at her.",
        "- Marilyn does not show up to the set following Arthur's departure and she asks Colin to come to Parkside and they talk.",
        "- The crew becomes captivated by Marilyn when she dances for a scene and Milton pulls Colin aside to tell him Marilyn breaks hearts and that she will break his too."
      ],
      "predicates": [
        "UnderstandsImpact(x, y) ::: x understands the impact of his actions on y.",
        "Captivates(x, y) ::: x captivates those around her/him.",
        "Infatuated(x, y) ::: x develops an infatuation with y.",
        "Reacts(x, y) ::: x reacts to y."
      ],
      "premises": [
        "¬UnderstandsImpact(olivier, marilyn) ::: Olivier does not understand the impact of his actions on Marilyn.",
        "Captivates(marilyn, a_0) ::: Marilyn's presence captivates those around her.",
        "Infatuated(colin, marilyn) ::: Colin develops an infatuation with Marilyn.",
        "Reacts(lucy, infatuation(colin, marilyn)) ::: Lucy reacts to Colin's infatuation with Marilyn."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 808,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 3,
      "paragraph": "Colin and Marilyn spend the day together and are given a tour of the library of Windsor Castle by Owen Morshead (Derek Jacobi). Colin also shows Marilyn around Eton College, and they go skinny dipping in the River Thames. Marilyn kisses Colin and they are found by Roger Smith (Philip Jackson), Marilyn's bodyguard. Colin is called to Parkside one night as Marilyn has locked herself in her room. Colin enters her room and Marilyn invites him to lie next to her on the bed. The following night, Marilyn wakes up in pain and claims she is having a miscarriage. A doctor tends to her and Marilyn tells Colin that Arthur is coming back and she wants to try and be a good wife to him, so she and Colin should forget everything that happened between them. She later returns to the set to complete the film. Olivier praises Marilyn, but reveals she has killed his desire to direct again. Lucy asks Colin if Marilyn broke his heart and he replies that she did, to which she replies that he needed it. Marilyn comes to a local pub, where Colin is staying, and thanks him for helping her. She kisses him goodbye and Roger drives her to the airport.",
      "question_template": "Right before Jill and Ed are about to have sex, [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Marilyn wakes up in pain and claims she is having a miscarriage."
      ],
      "predicates": [
        "SpendTimeTogether(x, y) ::: x and y spend time together.",
        "Tour(x, y, z) ::: x gives a tour of y to z.",
        "ShowAround(x, y, z) ::: x shows y around z.",
        "SkinnyDipping(x, y) ::: x and y go skinny dipping.",
        "Kiss(x, y) ::: x kisses y.",
        "FoundBy(x, y) ::: x is found by y.",
        "LockedInRoom(x) ::: x is locked in her room.",
        "Invite(x, y) ::: x invites y to lie next to her.",
        "WakesUpInPain(x) ::: x wakes up in pain.",
        "ClaimsMiscarriage(x) ::: x claims she is having a miscarriage.",
        "TendsTo(x, y) ::: x tends to y.",
        "WantsToForget(x, y) ::: x wants to forget y.",
        "ReturnsToSet(x) ::: x returns to the set.",
        "Praises(x, y) ::: x praises y.",
        "Reveals(x, y) ::: x reveals y.",
        "Asks(x, y) ::: x asks y.",
        "Replies(x, y) ::: x replies to y.",
        "Thanks(x, y) ::: x thanks y.",
        "KissesGoodbye(x, y) ::: x kisses y goodbye.",
        "DrivesTo(x, y) ::: x drives y to a location."
      ],
      "premises": [
        "SpendTimeTogether(colin, marilyn) ::: Colin and Marilyn spend the day together.",
        "Tour(owenMorshead, windsorCastle, marilyn) ::: Owen Morshead gives a tour of Windsor Castle to Marilyn.",
        "ShowAround(colin, marilyn, etonCollege) ::: Colin shows Marilyn around Eton College.",
        "SkinnyDipping(colin, marilyn) ::: Colin and Marilyn go skinny dipping in the River Thames.",
        "Kiss(marilyn, colin) ::: Marilyn kisses Colin.",
        "FoundBy(marilyn, rogerSmith) ::: Marilyn is found by Roger Smith.",
        "LockedInRoom(marilyn) ::: Marilyn has locked herself in her room.",
        "Invite(marilyn, colin) ::: Marilyn invites Colin to lie next to her on the bed.",
        "WakesUpInPain(marilyn) ::: Marilyn wakes up in pain.",
        "ClaimsMiscarriage(marilyn) ::: Marilyn claims she is having a miscarriage.",
        "TendsTo(doctor, marilyn) ::: A doctor tends to Marilyn.",
        "WantsToForget(marilyn, relationshipWithColin) ::: Marilyn wants to forget her relationship with Colin to focus on being a good wife to Arthur.",
        "ReturnsToSet(marilyn) ::: Marilyn returns to the set to complete the film.",
        "Praises(olivier, marilyn) ::: Olivier praises Marilyn.",
        "Reveals(olivier, desireToDirectAgain) ::: Olivier reveals she has killed his desire to direct again.",
        "Asks(lucy, colin) ::: Lucy asks Colin if Marilyn broke his heart.",
        "Replies(colin, lucy) ::: Colin replies that she did.",
        "Replies(lucy, colin) ::: Lucy replies that he needed it.",
        "Thanks(marilyn, colin) ::: Marilyn thanks Colin for helping her.",
        "KissesGoodbye(marilyn, colin) ::: Marilyn kisses Colin goodbye.",
        "DrivesTo(rogerSmith, airport) ::: Roger drives Marilyn to the airport."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "809": [
    {
      "id": 809,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 0,
      "paragraph": " Following his graduation from university in 1956, aspiring filmmaker Colin Clark (Eddie Redmayne) travels to London to get a job on Laurence Olivier's (Kenneth Branagh) next production. Production manager Hugh Perceval (Michael Kitchen) tells Colin that there are no jobs available, but he decides to wait for Olivier, whom he once met at a party. Olivier and his wife, Vivien Leigh (Julia Ormond), eventually show up and Vivien encourages Olivier to give Colin a job on his upcoming film The Prince and the Showgirl, starring Marilyn Monroe (Michelle Williams). Colin's first task is to find a suitable place for Marilyn and her husband, Arthur Miller (Dougray Scott), to stay at while they are in England. The press find out about the house, but Colin reveals he secured a second house just in case, impressing Olivier and Marilyn's publicist, Arthur P. Jacobs (Toby Jones).",
      "question_template": "Ed's father dies [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Marilyn Monroe",
        "Colin's growing infatuation"
      ],
      "predicates": [
        "Graduated(x) ::: x has graduated from university.",
        "AspiringFilmmaker(x) ::: x is an aspiring filmmaker.",
        "TravelsTo(x, y) ::: x travels to y.",
        "JobAvailable(x) ::: x has a job available.",
        "WaitsFor(x, y) ::: x waits for y.",
        "Encourages(x, y, z) ::: x encourages y to do z.",
        "GivesJob(x, y, z) ::: x gives y a job on z.",
        "FindsPlaceFor(x, y, z) ::: x finds a suitable place for y and z.",
        "Impresses(x, y, z) ::: x impresses y and z."
      ],
      "premises": [
        "Graduated(colin) ::: Colin graduated from university in 1956.",
        "AspiringFilmmaker(colin) ::: Colin is an aspiring filmmaker.",
        "TravelsTo(colin, london) ::: Colin travels to London to get a job.",
        "¬JobAvailable(olivier) ::: There are no jobs available on Olivier's next production.",
        "WaitsFor(colin, olivier) ::: Colin decides to wait for Olivier.",
        "Encourages(vivien, olivier, givesJob(colin, olivier, thePrinceAndTheShowgirl)) ::: Vivien encourages Olivier to give Colin a job on his upcoming film The Prince and the Showgirl.",
        "FindsPlaceFor(colin, marilyn, arthur) ::: Colin's first task is to find a suitable place for Marilyn and her husband, Arthur Miller, to stay while they are in England.",
        "Impresses(colin, olivier, arthurPJacobs) ::: Colin impresses Olivier and Marilyn's publicist, Arthur P. Jacobs.",
        "Conclusion:",
        "GivesJob(olivier, colin, thePrinceAndTheShowgirl) ::: Olivier gives Colin a job on The Prince and the Showgirl due to Vivien Leigh's encouragement."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 809,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 1,
      "paragraph": "The paparazzi find out about Marilyn's arrival at Heathrow and they gather around the plane when it lands. Marilyn brings her husband, her business partner, Milton H. Greene (Dominic Cooper), and her acting coach Paula Strasberg (ZoĂŤ Wanamaker) with her. She initially appears to be uncomfortable around the many photographers, but relaxes at the press conference. Olivier becomes frustrated when Marilyn is late to the read-through. She insists Paula sits with her and when she has trouble with her lines, Paula reads them for her. The crew and the other actors, including Sybil Thorndike (Judi Dench), are in awe of Marilyn. Colin meets Lucy (Emma Watson), a wardrobe assistant to whom he is attracted, and they go on a date. Marilyn starts arriving later to the set and often forgets her lines, angering Olivier. However, Sybil praises Marilyn and defends her when Olivier tries to get her to apologise for holding the shoot up.",
      "question_template": "Ed's father dies [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Marilyn",
        "Marilyn's arrival at Heathrow",
        "Marilyn brings her husband, her business partner, Milton H. Greene, and her acting coach Paula Strasberg with her",
        "Marilyn starts arriving later to the set and often forgets her lines, angering Olivier"
      ],
      "predicates": [
        "Discomfort(x) ::: x is uncomfortable around photographers.",
        "Relaxed(x) ::: x is relaxed at the press conference.",
        "Frustrated(x, y) ::: x is frustrated with y.",
        "Assists(x, y) ::: x assists y with her lines.",
        "Attracted(x, y) ::: x is attracted to y.",
        "Praise(x, y) ::: x praises y.",
        "Defend(x, y) ::: x defends y against criticism.",
        "Late(x) ::: x is late to an event."
      ],
      "premises": [
        "Discomfort(a_2) ∧ Late(a_2, readThrough) ∧ Frustrated(a_6, a_2) ∧ Assists(a_4, a_2) ∧ Attracted(a_1, a_7) ∧ Praise(a_3, a_2) ∧ Defend(a_3, a_2) ::: Marilyn is initially uncomfortable around photographers, is late to the read-through, Olivier is frustrated with her, Paula assists Marilyn with her lines, Colin is attracted to Lucy, and Sybil praises and defends Marilyn.",
        "Relaxed(a_2) ::: Marilyn's discomfort around photographers decreases at the press conference.",
        "Frustrated(a_6, a_2) ::: Marilyn's lateness to the read-through frustrates Olivier.",
        "Assists(a_4, a_2) ::: Paula Strasberg assists Marilyn with her lines.",
        "Attracted(a_1, a_7) → Date(a_1, a_7) ::: Colin's attraction to Lucy leads to a date.",
        "Praise(a_3, a_2) ∧ Defend(a_3, a_2) ::: Sybil Thorndike's praise and defense of Marilyn occur in response to Olivier's frustration."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 809,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 2,
      "paragraph": "Marilyn struggles to understand her character and leaves the set when Olivier insults her. Colin asks the director to be more sympathetic towards Marilyn, before he goes to Parkside House to check on her. He hears an argument and finds a tearful Marilyn sitting on the stairs with Arthur's notebook, which contains the plot of a new play that appears to poke fun at her. Arthur later returns to the United States. Vivien comes to the set and watches some of Marilyn's scenes. She breaks down, saying Marilyn lights up the screen and if only Olivier could see himself when he watches her. Olivier tries unsuccessfully to reassure his wife. Marilyn does not show up to the set following Arthur's departure and she asks Colin to come to Parkside and they talk. The crew becomes captivated by Marilyn when she dances for a scene and Milton pulls Colin aside to tell him Marilyn breaks hearts and that she will break his too. Lucy also notices Colin's growing infatuation with Marilyn and breaks up with him.",
      "question_template": "Ed's father dies [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Marilyn",
        "Marilyn lights up the screen",
        "Marilyn breaks hearts"
      ],
      "predicates": [
        "UnderstandsImpact(x, y) ::: x understands the impact of his actions on y.",
        "Captivates(x, y) ::: x captivates those around her/him.",
        "Infatuated(x, y) ::: x develops an infatuation with y.",
        "Reacts(x, y) ::: x reacts to y."
      ],
      "premises": [
        "¬UnderstandsImpact(olivier, marilyn) ::: Olivier does not understand the impact of his actions on Marilyn.",
        "Captivates(marilyn, a_0) ::: Marilyn's presence captivates those around her.",
        "Infatuated(colin, marilyn) ::: Colin develops an infatuation with Marilyn.",
        "Reacts(lucy, infatuation(colin, marilyn)) ::: Lucy reacts to Colin's infatuation with Marilyn."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 809,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 3,
      "paragraph": "Colin and Marilyn spend the day together and are given a tour of the library of Windsor Castle by Owen Morshead (Derek Jacobi). Colin also shows Marilyn around Eton College, and they go skinny dipping in the River Thames. Marilyn kisses Colin and they are found by Roger Smith (Philip Jackson), Marilyn's bodyguard. Colin is called to Parkside one night as Marilyn has locked herself in her room. Colin enters her room and Marilyn invites him to lie next to her on the bed. The following night, Marilyn wakes up in pain and claims she is having a miscarriage. A doctor tends to her and Marilyn tells Colin that Arthur is coming back and she wants to try and be a good wife to him, so she and Colin should forget everything that happened between them. She later returns to the set to complete the film. Olivier praises Marilyn, but reveals she has killed his desire to direct again. Lucy asks Colin if Marilyn broke his heart and he replies that she did, to which she replies that he needed it. Marilyn comes to a local pub, where Colin is staying, and thanks him for helping her. She kisses him goodbye and Roger drives her to the airport.",
      "question_template": "Ed's father dies [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Marilyn",
        "Marilyn kisses Colin",
        "Marilyn tells Colin that Arthur is coming back and she wants to try and be a good wife to him"
      ],
      "predicates": [
        "SpendTimeTogether(x, y) ::: x and y spend time together.",
        "Tour(x, y, z) ::: x gives a tour of y to z.",
        "ShowAround(x, y, z) ::: x shows y around z.",
        "SkinnyDipping(x, y) ::: x and y go skinny dipping.",
        "Kiss(x, y) ::: x kisses y.",
        "FoundBy(x, y) ::: x is found by y.",
        "LockedInRoom(x) ::: x is locked in her room.",
        "Invite(x, y) ::: x invites y to lie next to her.",
        "WakesUpInPain(x) ::: x wakes up in pain.",
        "ClaimsMiscarriage(x) ::: x claims she is having a miscarriage.",
        "TendsTo(x, y) ::: x tends to y.",
        "WantsToForget(x, y) ::: x wants to forget y.",
        "ReturnsToSet(x) ::: x returns to the set.",
        "Praises(x, y) ::: x praises y.",
        "Reveals(x, y) ::: x reveals y.",
        "Asks(x, y) ::: x asks y.",
        "Replies(x, y) ::: x replies to y.",
        "Thanks(x, y) ::: x thanks y.",
        "KissesGoodbye(x, y) ::: x kisses y goodbye.",
        "DrivesTo(x, y) ::: x drives y to a location."
      ],
      "premises": [
        "SpendTimeTogether(colin, marilyn) ::: Colin and Marilyn spend the day together.",
        "Tour(owenMorshead, windsorCastle, marilyn) ::: Owen Morshead gives a tour of Windsor Castle to Marilyn.",
        "ShowAround(colin, marilyn, etonCollege) ::: Colin shows Marilyn around Eton College.",
        "SkinnyDipping(colin, marilyn) ::: Colin and Marilyn go skinny dipping in the River Thames.",
        "Kiss(marilyn, colin) ::: Marilyn kisses Colin.",
        "FoundBy(marilyn, rogerSmith) ::: Marilyn is found by Roger Smith.",
        "LockedInRoom(marilyn) ::: Marilyn has locked herself in her room.",
        "Invite(marilyn, colin) ::: Marilyn invites Colin to lie next to her on the bed.",
        "WakesUpInPain(marilyn) ::: Marilyn wakes up in pain.",
        "ClaimsMiscarriage(marilyn) ::: Marilyn claims she is having a miscarriage.",
        "TendsTo(doctor, marilyn) ::: A doctor tends to Marilyn.",
        "WantsToForget(marilyn, relationshipWithColin) ::: Marilyn wants to forget her relationship with Colin to focus on being a good wife to Arthur.",
        "ReturnsToSet(marilyn) ::: Marilyn returns to the set to complete the film.",
        "Praises(olivier, marilyn) ::: Olivier praises Marilyn.",
        "Reveals(olivier, desireToDirectAgain) ::: Olivier reveals she has killed his desire to direct again.",
        "Asks(lucy, colin) ::: Lucy asks Colin if Marilyn broke his heart.",
        "Replies(colin, lucy) ::: Colin replies that she did.",
        "Replies(lucy, colin) ::: Lucy replies that he needed it.",
        "Thanks(marilyn, colin) ::: Marilyn thanks Colin for helping her.",
        "KissesGoodbye(marilyn, colin) ::: Marilyn kisses Colin goodbye.",
        "DrivesTo(rogerSmith, airport) ::: Roger drives Marilyn to the airport."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "810": [
    {
      "id": 810,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 1,
      "paragraph": "The paparazzi find out about Marilyn's arrival at Heathrow and they gather around the plane when it lands. Marilyn brings her husband, her business partner, Milton H. Greene (Dominic Cooper), and her acting coach Paula Strasberg (ZoĂŤ Wanamaker) with her. She initially appears to be uncomfortable around the many photographers, but relaxes at the press conference. Olivier becomes frustrated when Marilyn is late to the read-through. She insists Paula sits with her and when she has trouble with her lines, Paula reads them for her. The crew and the other actors, including Sybil Thorndike (Judi Dench), are in awe of Marilyn. Colin meets Lucy (Emma Watson), a wardrobe assistant to whom he is attracted, and they go on a date. Marilyn starts arriving later to the set and often forgets her lines, angering Olivier. However, Sybil praises Marilyn and defends her when Olivier tries to get her to apologise for holding the shoot up.",
      "question_template": "Shari wears [[CANDIDATE_ANSWER]] to the funeral of Ed's father.",
      "candidate_answers": [
        "- She initially appears to be uncomfortable around the many photographers",
        "- Olivier becomes frustrated when Marilyn is late to the read-through",
        "- She insists Paula sits with her and when she has trouble with her lines, Paula reads them for her",
        "- The crew and the other actors, including Sybil Thorndike, are in awe of Marilyn",
        "- Marilyn starts arriving later to the set and often forgets her lines, angering Olivier",
        "- Sybil praises Marilyn and defends her when Olivier tries to get her to apologise for holding the shoot up"
      ],
      "predicates": [
        "Discomfort(x) ::: x is uncomfortable around photographers.",
        "Relaxed(x) ::: x is relaxed at the press conference.",
        "Frustrated(x, y) ::: x is frustrated with y.",
        "Assists(x, y) ::: x assists y with her lines.",
        "Attracted(x, y) ::: x is attracted to y.",
        "Praise(x, y) ::: x praises y.",
        "Defend(x, y) ::: x defends y against criticism.",
        "Late(x) ::: x is late to an event."
      ],
      "premises": [
        "Discomfort(a_2) ∧ Late(a_2, readThrough) ∧ Frustrated(a_6, a_2) ∧ Assists(a_4, a_2) ∧ Attracted(a_1, a_7) ∧ Praise(a_3, a_2) ∧ Defend(a_3, a_2) ::: Marilyn is initially uncomfortable around photographers, is late to the read-through, Olivier is frustrated with her, Paula assists Marilyn with her lines, Colin is attracted to Lucy, and Sybil praises and defends Marilyn.",
        "Relaxed(a_2) ::: Marilyn's discomfort around photographers decreases at the press conference.",
        "Frustrated(a_6, a_2) ::: Marilyn's lateness to the read-through frustrates Olivier.",
        "Assists(a_4, a_2) ::: Paula Strasberg assists Marilyn with her lines.",
        "Attracted(a_1, a_7) → Date(a_1, a_7) ::: Colin's attraction to Lucy leads to a date.",
        "Praise(a_3, a_2) ∧ Defend(a_3, a_2) ::: Sybil Thorndike's praise and defense of Marilyn occur in response to Olivier's frustration."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 810,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 3,
      "paragraph": "Colin and Marilyn spend the day together and are given a tour of the library of Windsor Castle by Owen Morshead (Derek Jacobi). Colin also shows Marilyn around Eton College, and they go skinny dipping in the River Thames. Marilyn kisses Colin and they are found by Roger Smith (Philip Jackson), Marilyn's bodyguard. Colin is called to Parkside one night as Marilyn has locked herself in her room. Colin enters her room and Marilyn invites him to lie next to her on the bed. The following night, Marilyn wakes up in pain and claims she is having a miscarriage. A doctor tends to her and Marilyn tells Colin that Arthur is coming back and she wants to try and be a good wife to him, so she and Colin should forget everything that happened between them. She later returns to the set to complete the film. Olivier praises Marilyn, but reveals she has killed his desire to direct again. Lucy asks Colin if Marilyn broke his heart and he replies that she did, to which she replies that he needed it. Marilyn comes to a local pub, where Colin is staying, and thanks him for helping her. She kisses him goodbye and Roger drives her to the airport.",
      "question_template": "Shari wears [[CANDIDATE_ANSWER]] to the funeral of Ed's father.",
      "candidate_answers": [
        "- Marilyn wakes up in pain and claims she is having a miscarriage.",
        "- She tells Colin that Arthur is coming back and she wants to try and be a good wife to him, so she and Colin should forget everything that happened between them."
      ],
      "predicates": [
        "SpendTimeTogether(x, y) ::: x and y spend time together.",
        "Tour(x, y, z) ::: x gives a tour of y to z.",
        "ShowAround(x, y, z) ::: x shows y around z.",
        "SkinnyDipping(x, y) ::: x and y go skinny dipping.",
        "Kiss(x, y) ::: x kisses y.",
        "FoundBy(x, y) ::: x is found by y.",
        "LockedInRoom(x) ::: x is locked in her room.",
        "Invite(x, y) ::: x invites y to lie next to her.",
        "WakesUpInPain(x) ::: x wakes up in pain.",
        "ClaimsMiscarriage(x) ::: x claims she is having a miscarriage.",
        "TendsTo(x, y) ::: x tends to y.",
        "WantsToForget(x, y) ::: x wants to forget y.",
        "ReturnsToSet(x) ::: x returns to the set.",
        "Praises(x, y) ::: x praises y.",
        "Reveals(x, y) ::: x reveals y.",
        "Asks(x, y) ::: x asks y.",
        "Replies(x, y) ::: x replies to y.",
        "Thanks(x, y) ::: x thanks y.",
        "KissesGoodbye(x, y) ::: x kisses y goodbye.",
        "DrivesTo(x, y) ::: x drives y to a location."
      ],
      "premises": [
        "SpendTimeTogether(colin, marilyn) ::: Colin and Marilyn spend the day together.",
        "Tour(owenMorshead, windsorCastle, marilyn) ::: Owen Morshead gives a tour of Windsor Castle to Marilyn.",
        "ShowAround(colin, marilyn, etonCollege) ::: Colin shows Marilyn around Eton College.",
        "SkinnyDipping(colin, marilyn) ::: Colin and Marilyn go skinny dipping in the River Thames.",
        "Kiss(marilyn, colin) ::: Marilyn kisses Colin.",
        "FoundBy(marilyn, rogerSmith) ::: Marilyn is found by Roger Smith.",
        "LockedInRoom(marilyn) ::: Marilyn has locked herself in her room.",
        "Invite(marilyn, colin) ::: Marilyn invites Colin to lie next to her on the bed.",
        "WakesUpInPain(marilyn) ::: Marilyn wakes up in pain.",
        "ClaimsMiscarriage(marilyn) ::: Marilyn claims she is having a miscarriage.",
        "TendsTo(doctor, marilyn) ::: A doctor tends to Marilyn.",
        "WantsToForget(marilyn, relationshipWithColin) ::: Marilyn wants to forget her relationship with Colin to focus on being a good wife to Arthur.",
        "ReturnsToSet(marilyn) ::: Marilyn returns to the set to complete the film.",
        "Praises(olivier, marilyn) ::: Olivier praises Marilyn.",
        "Reveals(olivier, desireToDirectAgain) ::: Olivier reveals she has killed his desire to direct again.",
        "Asks(lucy, colin) ::: Lucy asks Colin if Marilyn broke his heart.",
        "Replies(colin, lucy) ::: Colin replies that she did.",
        "Replies(lucy, colin) ::: Lucy replies that he needed it.",
        "Thanks(marilyn, colin) ::: Marilyn thanks Colin for helping her.",
        "KissesGoodbye(marilyn, colin) ::: Marilyn kisses Colin goodbye.",
        "DrivesTo(rogerSmith, airport) ::: Roger drives Marilyn to the airport."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "811": [
    {
      "id": 811,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 0,
      "paragraph": " Following his graduation from university in 1956, aspiring filmmaker Colin Clark (Eddie Redmayne) travels to London to get a job on Laurence Olivier's (Kenneth Branagh) next production. Production manager Hugh Perceval (Michael Kitchen) tells Colin that there are no jobs available, but he decides to wait for Olivier, whom he once met at a party. Olivier and his wife, Vivien Leigh (Julia Ormond), eventually show up and Vivien encourages Olivier to give Colin a job on his upcoming film The Prince and the Showgirl, starring Marilyn Monroe (Michelle Williams). Colin's first task is to find a suitable place for Marilyn and her husband, Arthur Miller (Dougray Scott), to stay at while they are in England. The press find out about the house, but Colin reveals he secured a second house just in case, impressing Olivier and Marilyn's publicist, Arthur P. Jacobs (Toby Jones).",
      "question_template": "Ed will give $100,000 to [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Aspiring filmmaker Colin Clark travels to London to get a job on Laurence Olivier's next production.",
        "- Colin decides to wait for Olivier, whom he once met at a party.",
        "- Colin's first task is to find a suitable place for Marilyn and her husband, Arthur Miller, to stay at while they are in England."
      ],
      "predicates": [
        "Graduated(x) ::: x has graduated from university.",
        "AspiringFilmmaker(x) ::: x is an aspiring filmmaker.",
        "TravelsTo(x, y) ::: x travels to y.",
        "JobAvailable(x) ::: x has a job available.",
        "WaitsFor(x, y) ::: x waits for y.",
        "Encourages(x, y, z) ::: x encourages y to do z.",
        "GivesJob(x, y, z) ::: x gives y a job on z.",
        "FindsPlaceFor(x, y, z) ::: x finds a suitable place for y and z.",
        "Impresses(x, y, z) ::: x impresses y and z."
      ],
      "premises": [
        "Graduated(colin) ::: Colin graduated from university in 1956.",
        "AspiringFilmmaker(colin) ::: Colin is an aspiring filmmaker.",
        "TravelsTo(colin, london) ::: Colin travels to London to get a job.",
        "¬JobAvailable(olivier) ::: There are no jobs available on Olivier's next production.",
        "WaitsFor(colin, olivier) ::: Colin decides to wait for Olivier.",
        "Encourages(vivien, olivier, givesJob(colin, olivier, thePrinceAndTheShowgirl)) ::: Vivien encourages Olivier to give Colin a job on his upcoming film The Prince and the Showgirl.",
        "FindsPlaceFor(colin, marilyn, arthur) ::: Colin's first task is to find a suitable place for Marilyn and her husband, Arthur Miller, to stay while they are in England.",
        "Impresses(colin, olivier, arthurPJacobs) ::: Colin impresses Olivier and Marilyn's publicist, Arthur P. Jacobs.",
        "Conclusion:",
        "GivesJob(olivier, colin, thePrinceAndTheShowgirl) ::: Olivier gives Colin a job on The Prince and the Showgirl due to Vivien Leigh's encouragement."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 811,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 1,
      "paragraph": "The paparazzi find out about Marilyn's arrival at Heathrow and they gather around the plane when it lands. Marilyn brings her husband, her business partner, Milton H. Greene (Dominic Cooper), and her acting coach Paula Strasberg (ZoĂŤ Wanamaker) with her. She initially appears to be uncomfortable around the many photographers, but relaxes at the press conference. Olivier becomes frustrated when Marilyn is late to the read-through. She insists Paula sits with her and when she has trouble with her lines, Paula reads them for her. The crew and the other actors, including Sybil Thorndike (Judi Dench), are in awe of Marilyn. Colin meets Lucy (Emma Watson), a wardrobe assistant to whom he is attracted, and they go on a date. Marilyn starts arriving later to the set and often forgets her lines, angering Olivier. However, Sybil praises Marilyn and defends her when Olivier tries to get her to apologise for holding the shoot up.",
      "question_template": "Ed will give $100,000 to [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Colin meets Lucy , a wardrobe assistant to whom he is attracted, and they go on a date."
      ],
      "predicates": [
        "Discomfort(x) ::: x is uncomfortable around photographers.",
        "Relaxed(x) ::: x is relaxed at the press conference.",
        "Frustrated(x, y) ::: x is frustrated with y.",
        "Assists(x, y) ::: x assists y with her lines.",
        "Attracted(x, y) ::: x is attracted to y.",
        "Praise(x, y) ::: x praises y.",
        "Defend(x, y) ::: x defends y against criticism.",
        "Late(x) ::: x is late to an event."
      ],
      "premises": [
        "Discomfort(a_2) ∧ Late(a_2, readThrough) ∧ Frustrated(a_6, a_2) ∧ Assists(a_4, a_2) ∧ Attracted(a_1, a_7) ∧ Praise(a_3, a_2) ∧ Defend(a_3, a_2) ::: Marilyn is initially uncomfortable around photographers, is late to the read-through, Olivier is frustrated with her, Paula assists Marilyn with her lines, Colin is attracted to Lucy, and Sybil praises and defends Marilyn.",
        "Relaxed(a_2) ::: Marilyn's discomfort around photographers decreases at the press conference.",
        "Frustrated(a_6, a_2) ::: Marilyn's lateness to the read-through frustrates Olivier.",
        "Assists(a_4, a_2) ::: Paula Strasberg assists Marilyn with her lines.",
        "Attracted(a_1, a_7) → Date(a_1, a_7) ::: Colin's attraction to Lucy leads to a date.",
        "Praise(a_3, a_2) ∧ Defend(a_3, a_2) ::: Sybil Thorndike's praise and defense of Marilyn occur in response to Olivier's frustration."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "812": [
    {
      "id": 812,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 0,
      "paragraph": " Following his graduation from university in 1956, aspiring filmmaker Colin Clark (Eddie Redmayne) travels to London to get a job on Laurence Olivier's (Kenneth Branagh) next production. Production manager Hugh Perceval (Michael Kitchen) tells Colin that there are no jobs available, but he decides to wait for Olivier, whom he once met at a party. Olivier and his wife, Vivien Leigh (Julia Ormond), eventually show up and Vivien encourages Olivier to give Colin a job on his upcoming film The Prince and the Showgirl, starring Marilyn Monroe (Michelle Williams). Colin's first task is to find a suitable place for Marilyn and her husband, Arthur Miller (Dougray Scott), to stay at while they are in England. The press find out about the house, but Colin reveals he secured a second house just in case, impressing Olivier and Marilyn's publicist, Arthur P. Jacobs (Toby Jones).",
      "question_template": "[[CANDIDATE_ANSWER]] encouraged Laurence Olivier to hire Colin Clark to work on the project The Prince and The Showgirl.",
      "candidate_answers": [
        "- He once met Olivier at a party."
      ],
      "predicates": [
        "Graduated(x) ::: x has graduated from university.",
        "AspiringFilmmaker(x) ::: x is an aspiring filmmaker.",
        "TravelsTo(x, y) ::: x travels to y.",
        "JobAvailable(x) ::: x has a job available.",
        "WaitsFor(x, y) ::: x waits for y.",
        "Encourages(x, y, z) ::: x encourages y to do z.",
        "GivesJob(x, y, z) ::: x gives y a job on z.",
        "FindsPlaceFor(x, y, z) ::: x finds a suitable place for y and z.",
        "Impresses(x, y, z) ::: x impresses y and z."
      ],
      "premises": [
        "Graduated(colin) ::: Colin graduated from university in 1956.",
        "AspiringFilmmaker(colin) ::: Colin is an aspiring filmmaker.",
        "TravelsTo(colin, london) ::: Colin travels to London to get a job.",
        "¬JobAvailable(olivier) ::: There are no jobs available on Olivier's next production.",
        "WaitsFor(colin, olivier) ::: Colin decides to wait for Olivier.",
        "Encourages(vivien, olivier, givesJob(colin, olivier, thePrinceAndTheShowgirl)) ::: Vivien encourages Olivier to give Colin a job on his upcoming film The Prince and the Showgirl.",
        "FindsPlaceFor(colin, marilyn, arthur) ::: Colin's first task is to find a suitable place for Marilyn and her husband, Arthur Miller, to stay while they are in England.",
        "Impresses(colin, olivier, arthurPJacobs) ::: Colin impresses Olivier and Marilyn's publicist, Arthur P. Jacobs.",
        "Conclusion:",
        "GivesJob(olivier, colin, thePrinceAndTheShowgirl) ::: Olivier gives Colin a job on The Prince and the Showgirl due to Vivien Leigh's encouragement."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 812,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 1,
      "paragraph": "The paparazzi find out about Marilyn's arrival at Heathrow and they gather around the plane when it lands. Marilyn brings her husband, her business partner, Milton H. Greene (Dominic Cooper), and her acting coach Paula Strasberg (ZoĂŤ Wanamaker) with her. She initially appears to be uncomfortable around the many photographers, but relaxes at the press conference. Olivier becomes frustrated when Marilyn is late to the read-through. She insists Paula sits with her and when she has trouble with her lines, Paula reads them for her. The crew and the other actors, including Sybil Thorndike (Judi Dench), are in awe of Marilyn. Colin meets Lucy (Emma Watson), a wardrobe assistant to whom he is attracted, and they go on a date. Marilyn starts arriving later to the set and often forgets her lines, angering Olivier. However, Sybil praises Marilyn and defends her when Olivier tries to get her to apologise for holding the shoot up.",
      "question_template": "[[CANDIDATE_ANSWER]] encouraged Laurence Olivier to hire Colin Clark to work on the project The Prince and The Showgirl.",
      "candidate_answers": [
        "Colin meets Lucy , a wardrobe assistant to whom he is attracted",
        "Marilyn brings her husband, her business partner, Milton H. Greene , and her acting coach Paula Strasberg with her",
        "The crew and the other actors, including Sybil Thorndike , are in awe of Marilyn"
      ],
      "predicates": [
        "Discomfort(x) ::: x is uncomfortable around photographers.",
        "Relaxed(x) ::: x is relaxed at the press conference.",
        "Frustrated(x, y) ::: x is frustrated with y.",
        "Assists(x, y) ::: x assists y with her lines.",
        "Attracted(x, y) ::: x is attracted to y.",
        "Praise(x, y) ::: x praises y.",
        "Defend(x, y) ::: x defends y against criticism.",
        "Late(x) ::: x is late to an event."
      ],
      "premises": [
        "Discomfort(a_2) ∧ Late(a_2, readThrough) ∧ Frustrated(a_6, a_2) ∧ Assists(a_4, a_2) ∧ Attracted(a_1, a_7) ∧ Praise(a_3, a_2) ∧ Defend(a_3, a_2) ::: Marilyn is initially uncomfortable around photographers, is late to the read-through, Olivier is frustrated with her, Paula assists Marilyn with her lines, Colin is attracted to Lucy, and Sybil praises and defends Marilyn.",
        "Relaxed(a_2) ::: Marilyn's discomfort around photographers decreases at the press conference.",
        "Frustrated(a_6, a_2) ::: Marilyn's lateness to the read-through frustrates Olivier.",
        "Assists(a_4, a_2) ::: Paula Strasberg assists Marilyn with her lines.",
        "Attracted(a_1, a_7) → Date(a_1, a_7) ::: Colin's attraction to Lucy leads to a date.",
        "Praise(a_3, a_2) ∧ Defend(a_3, a_2) ::: Sybil Thorndike's praise and defense of Marilyn occur in response to Olivier's frustration."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 812,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 2,
      "paragraph": "Marilyn struggles to understand her character and leaves the set when Olivier insults her. Colin asks the director to be more sympathetic towards Marilyn, before he goes to Parkside House to check on her. He hears an argument and finds a tearful Marilyn sitting on the stairs with Arthur's notebook, which contains the plot of a new play that appears to poke fun at her. Arthur later returns to the United States. Vivien comes to the set and watches some of Marilyn's scenes. She breaks down, saying Marilyn lights up the screen and if only Olivier could see himself when he watches her. Olivier tries unsuccessfully to reassure his wife. Marilyn does not show up to the set following Arthur's departure and she asks Colin to come to Parkside and they talk. The crew becomes captivated by Marilyn when she dances for a scene and Milton pulls Colin aside to tell him Marilyn breaks hearts and that she will break his too. Lucy also notices Colin's growing infatuation with Marilyn and breaks up with him.",
      "question_template": "[[CANDIDATE_ANSWER]] encouraged Laurence Olivier to hire Colin Clark to work on the project The Prince and The Showgirl.",
      "candidate_answers": [
        "Colin asks the director to be more sympathetic towards Marilyn",
        "Colin goes to Parkside House to check on her",
        "Milton pulls Colin aside to tell him Marilyn breaks hearts"
      ],
      "predicates": [
        "UnderstandsImpact(x, y) ::: x understands the impact of his actions on y.",
        "Captivates(x, y) ::: x captivates those around her/him.",
        "Infatuated(x, y) ::: x develops an infatuation with y.",
        "Reacts(x, y) ::: x reacts to y."
      ],
      "premises": [
        "¬UnderstandsImpact(olivier, marilyn) ::: Olivier does not understand the impact of his actions on Marilyn.",
        "Captivates(marilyn, a_0) ::: Marilyn's presence captivates those around her.",
        "Infatuated(colin, marilyn) ::: Colin develops an infatuation with Marilyn.",
        "Reacts(lucy, infatuation(colin, marilyn)) ::: Lucy reacts to Colin's infatuation with Marilyn."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "813": [
    {
      "id": 813,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 0,
      "paragraph": " Following his graduation from university in 1956, aspiring filmmaker Colin Clark (Eddie Redmayne) travels to London to get a job on Laurence Olivier's (Kenneth Branagh) next production. Production manager Hugh Perceval (Michael Kitchen) tells Colin that there are no jobs available, but he decides to wait for Olivier, whom he once met at a party. Olivier and his wife, Vivien Leigh (Julia Ormond), eventually show up and Vivien encourages Olivier to give Colin a job on his upcoming film The Prince and the Showgirl, starring Marilyn Monroe (Michelle Williams). Colin's first task is to find a suitable place for Marilyn and her husband, Arthur Miller (Dougray Scott), to stay at while they are in England. The press find out about the house, but Colin reveals he secured a second house just in case, impressing Olivier and Marilyn's publicist, Arthur P. Jacobs (Toby Jones).",
      "question_template": "Colin Clark and Laurence Olivier met when [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Colin reveals he secured a second house just in case",
        "- He decides to wait for Olivier, whom he once met at a party"
      ],
      "predicates": [
        "Graduated(x) ::: x has graduated from university.",
        "AspiringFilmmaker(x) ::: x is an aspiring filmmaker.",
        "TravelsTo(x, y) ::: x travels to y.",
        "JobAvailable(x) ::: x has a job available.",
        "WaitsFor(x, y) ::: x waits for y.",
        "Encourages(x, y, z) ::: x encourages y to do z.",
        "GivesJob(x, y, z) ::: x gives y a job on z.",
        "FindsPlaceFor(x, y, z) ::: x finds a suitable place for y and z.",
        "Impresses(x, y, z) ::: x impresses y and z."
      ],
      "premises": [
        "Graduated(colin) ::: Colin graduated from university in 1956.",
        "AspiringFilmmaker(colin) ::: Colin is an aspiring filmmaker.",
        "TravelsTo(colin, london) ::: Colin travels to London to get a job.",
        "¬JobAvailable(olivier) ::: There are no jobs available on Olivier's next production.",
        "WaitsFor(colin, olivier) ::: Colin decides to wait for Olivier.",
        "Encourages(vivien, olivier, givesJob(colin, olivier, thePrinceAndTheShowgirl)) ::: Vivien encourages Olivier to give Colin a job on his upcoming film The Prince and the Showgirl.",
        "FindsPlaceFor(colin, marilyn, arthur) ::: Colin's first task is to find a suitable place for Marilyn and her husband, Arthur Miller, to stay while they are in England.",
        "Impresses(colin, olivier, arthurPJacobs) ::: Colin impresses Olivier and Marilyn's publicist, Arthur P. Jacobs.",
        "Conclusion:",
        "GivesJob(olivier, colin, thePrinceAndTheShowgirl) ::: Olivier gives Colin a job on The Prince and the Showgirl due to Vivien Leigh's encouragement."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 813,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 2,
      "paragraph": "Marilyn struggles to understand her character and leaves the set when Olivier insults her. Colin asks the director to be more sympathetic towards Marilyn, before he goes to Parkside House to check on her. He hears an argument and finds a tearful Marilyn sitting on the stairs with Arthur's notebook, which contains the plot of a new play that appears to poke fun at her. Arthur later returns to the United States. Vivien comes to the set and watches some of Marilyn's scenes. She breaks down, saying Marilyn lights up the screen and if only Olivier could see himself when he watches her. Olivier tries unsuccessfully to reassure his wife. Marilyn does not show up to the set following Arthur's departure and she asks Colin to come to Parkside and they talk. The crew becomes captivated by Marilyn when she dances for a scene and Milton pulls Colin aside to tell him Marilyn breaks hearts and that she will break his too. Lucy also notices Colin's growing infatuation with Marilyn and breaks up with him.",
      "question_template": "Colin Clark and Laurence Olivier met when [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Asks the director to be more sympathetic towards Marilyn",
        "- Talks to Marilyn",
        "- Pulls Colin aside to tell him Marilyn breaks hearts"
      ],
      "predicates": [
        "UnderstandsImpact(x, y) ::: x understands the impact of his actions on y.",
        "Captivates(x, y) ::: x captivates those around her/him.",
        "Infatuated(x, y) ::: x develops an infatuation with y.",
        "Reacts(x, y) ::: x reacts to y."
      ],
      "premises": [
        "¬UnderstandsImpact(olivier, marilyn) ::: Olivier does not understand the impact of his actions on Marilyn.",
        "Captivates(marilyn, a_0) ::: Marilyn's presence captivates those around her.",
        "Infatuated(colin, marilyn) ::: Colin develops an infatuation with Marilyn.",
        "Reacts(lucy, infatuation(colin, marilyn)) ::: Lucy reacts to Colin's infatuation with Marilyn."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 813,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 3,
      "paragraph": "Colin and Marilyn spend the day together and are given a tour of the library of Windsor Castle by Owen Morshead (Derek Jacobi). Colin also shows Marilyn around Eton College, and they go skinny dipping in the River Thames. Marilyn kisses Colin and they are found by Roger Smith (Philip Jackson), Marilyn's bodyguard. Colin is called to Parkside one night as Marilyn has locked herself in her room. Colin enters her room and Marilyn invites him to lie next to her on the bed. The following night, Marilyn wakes up in pain and claims she is having a miscarriage. A doctor tends to her and Marilyn tells Colin that Arthur is coming back and she wants to try and be a good wife to him, so she and Colin should forget everything that happened between them. She later returns to the set to complete the film. Olivier praises Marilyn, but reveals she has killed his desire to direct again. Lucy asks Colin if Marilyn broke his heart and he replies that she did, to which she replies that he needed it. Marilyn comes to a local pub, where Colin is staying, and thanks him for helping her. She kisses him goodbye and Roger drives her to the airport.",
      "question_template": "Colin Clark and Laurence Olivier met when [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Olivier praises Marilyn",
        "- She later returns to the set to complete the film",
        "- Colin is called to Parkside one night as Marilyn has locked herself in her room",
        "- Colin shows Marilyn around Eton College",
        "- Colin and Marilyn spend the day together"
      ],
      "predicates": [
        "SpendTimeTogether(x, y) ::: x and y spend time together.",
        "Tour(x, y, z) ::: x gives a tour of y to z.",
        "ShowAround(x, y, z) ::: x shows y around z.",
        "SkinnyDipping(x, y) ::: x and y go skinny dipping.",
        "Kiss(x, y) ::: x kisses y.",
        "FoundBy(x, y) ::: x is found by y.",
        "LockedInRoom(x) ::: x is locked in her room.",
        "Invite(x, y) ::: x invites y to lie next to her.",
        "WakesUpInPain(x) ::: x wakes up in pain.",
        "ClaimsMiscarriage(x) ::: x claims she is having a miscarriage.",
        "TendsTo(x, y) ::: x tends to y.",
        "WantsToForget(x, y) ::: x wants to forget y.",
        "ReturnsToSet(x) ::: x returns to the set.",
        "Praises(x, y) ::: x praises y.",
        "Reveals(x, y) ::: x reveals y.",
        "Asks(x, y) ::: x asks y.",
        "Replies(x, y) ::: x replies to y.",
        "Thanks(x, y) ::: x thanks y.",
        "KissesGoodbye(x, y) ::: x kisses y goodbye.",
        "DrivesTo(x, y) ::: x drives y to a location."
      ],
      "premises": [
        "SpendTimeTogether(colin, marilyn) ::: Colin and Marilyn spend the day together.",
        "Tour(owenMorshead, windsorCastle, marilyn) ::: Owen Morshead gives a tour of Windsor Castle to Marilyn.",
        "ShowAround(colin, marilyn, etonCollege) ::: Colin shows Marilyn around Eton College.",
        "SkinnyDipping(colin, marilyn) ::: Colin and Marilyn go skinny dipping in the River Thames.",
        "Kiss(marilyn, colin) ::: Marilyn kisses Colin.",
        "FoundBy(marilyn, rogerSmith) ::: Marilyn is found by Roger Smith.",
        "LockedInRoom(marilyn) ::: Marilyn has locked herself in her room.",
        "Invite(marilyn, colin) ::: Marilyn invites Colin to lie next to her on the bed.",
        "WakesUpInPain(marilyn) ::: Marilyn wakes up in pain.",
        "ClaimsMiscarriage(marilyn) ::: Marilyn claims she is having a miscarriage.",
        "TendsTo(doctor, marilyn) ::: A doctor tends to Marilyn.",
        "WantsToForget(marilyn, relationshipWithColin) ::: Marilyn wants to forget her relationship with Colin to focus on being a good wife to Arthur.",
        "ReturnsToSet(marilyn) ::: Marilyn returns to the set to complete the film.",
        "Praises(olivier, marilyn) ::: Olivier praises Marilyn.",
        "Reveals(olivier, desireToDirectAgain) ::: Olivier reveals she has killed his desire to direct again.",
        "Asks(lucy, colin) ::: Lucy asks Colin if Marilyn broke his heart.",
        "Replies(colin, lucy) ::: Colin replies that she did.",
        "Replies(lucy, colin) ::: Lucy replies that he needed it.",
        "Thanks(marilyn, colin) ::: Marilyn thanks Colin for helping her.",
        "KissesGoodbye(marilyn, colin) ::: Marilyn kisses Colin goodbye.",
        "DrivesTo(rogerSmith, airport) ::: Roger drives Marilyn to the airport."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "814": [
    {
      "id": 814,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 0,
      "paragraph": " Following his graduation from university in 1956, aspiring filmmaker Colin Clark (Eddie Redmayne) travels to London to get a job on Laurence Olivier's (Kenneth Branagh) next production. Production manager Hugh Perceval (Michael Kitchen) tells Colin that there are no jobs available, but he decides to wait for Olivier, whom he once met at a party. Olivier and his wife, Vivien Leigh (Julia Ormond), eventually show up and Vivien encourages Olivier to give Colin a job on his upcoming film The Prince and the Showgirl, starring Marilyn Monroe (Michelle Williams). Colin's first task is to find a suitable place for Marilyn and her husband, Arthur Miller (Dougray Scott), to stay at while they are in England. The press find out about the house, but Colin reveals he secured a second house just in case, impressing Olivier and Marilyn's publicist, Arthur P. Jacobs (Toby Jones).",
      "question_template": "Marilyn Monroe is the star of The Prince and The Showgirl.",
      "candidate_answers": [
        "Arthur Miller"
      ],
      "predicates": [
        "Graduated(x) ::: x has graduated from university.",
        "AspiringFilmmaker(x) ::: x is an aspiring filmmaker.",
        "TravelsTo(x, y) ::: x travels to y.",
        "JobAvailable(x) ::: x has a job available.",
        "WaitsFor(x, y) ::: x waits for y.",
        "Encourages(x, y, z) ::: x encourages y to do z.",
        "GivesJob(x, y, z) ::: x gives y a job on z.",
        "FindsPlaceFor(x, y, z) ::: x finds a suitable place for y and z.",
        "Impresses(x, y, z) ::: x impresses y and z."
      ],
      "premises": [
        "Graduated(colin) ::: Colin graduated from university in 1956.",
        "AspiringFilmmaker(colin) ::: Colin is an aspiring filmmaker.",
        "TravelsTo(colin, london) ::: Colin travels to London to get a job.",
        "¬JobAvailable(olivier) ::: There are no jobs available on Olivier's next production.",
        "WaitsFor(colin, olivier) ::: Colin decides to wait for Olivier.",
        "Encourages(vivien, olivier, givesJob(colin, olivier, thePrinceAndTheShowgirl)) ::: Vivien encourages Olivier to give Colin a job on his upcoming film The Prince and the Showgirl.",
        "FindsPlaceFor(colin, marilyn, arthur) ::: Colin's first task is to find a suitable place for Marilyn and her husband, Arthur Miller, to stay while they are in England.",
        "Impresses(colin, olivier, arthurPJacobs) ::: Colin impresses Olivier and Marilyn's publicist, Arthur P. Jacobs.",
        "Conclusion:",
        "GivesJob(olivier, colin, thePrinceAndTheShowgirl) ::: Olivier gives Colin a job on The Prince and the Showgirl due to Vivien Leigh's encouragement."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 814,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 1,
      "paragraph": "The paparazzi find out about Marilyn's arrival at Heathrow and they gather around the plane when it lands. Marilyn brings her husband, her business partner, Milton H. Greene (Dominic Cooper), and her acting coach Paula Strasberg (ZoĂŤ Wanamaker) with her. She initially appears to be uncomfortable around the many photographers, but relaxes at the press conference. Olivier becomes frustrated when Marilyn is late to the read-through. She insists Paula sits with her and when she has trouble with her lines, Paula reads them for her. The crew and the other actors, including Sybil Thorndike (Judi Dench), are in awe of Marilyn. Colin meets Lucy (Emma Watson), a wardrobe assistant to whom he is attracted, and they go on a date. Marilyn starts arriving later to the set and often forgets her lines, angering Olivier. However, Sybil praises Marilyn and defends her when Olivier tries to get her to apologise for holding the shoot up.",
      "question_template": "Marilyn Monroe is the star of The Prince and The Showgirl.",
      "candidate_answers": [
        "her husband, her business partner, Milton H. Greene, and her acting coach Paula Strasberg"
      ],
      "predicates": [
        "Discomfort(x) ::: x is uncomfortable around photographers.",
        "Relaxed(x) ::: x is relaxed at the press conference.",
        "Frustrated(x, y) ::: x is frustrated with y.",
        "Assists(x, y) ::: x assists y with her lines.",
        "Attracted(x, y) ::: x is attracted to y.",
        "Praise(x, y) ::: x praises y.",
        "Defend(x, y) ::: x defends y against criticism.",
        "Late(x) ::: x is late to an event."
      ],
      "premises": [
        "Discomfort(a_2) ∧ Late(a_2, readThrough) ∧ Frustrated(a_6, a_2) ∧ Assists(a_4, a_2) ∧ Attracted(a_1, a_7) ∧ Praise(a_3, a_2) ∧ Defend(a_3, a_2) ::: Marilyn is initially uncomfortable around photographers, is late to the read-through, Olivier is frustrated with her, Paula assists Marilyn with her lines, Colin is attracted to Lucy, and Sybil praises and defends Marilyn.",
        "Relaxed(a_2) ::: Marilyn's discomfort around photographers decreases at the press conference.",
        "Frustrated(a_6, a_2) ::: Marilyn's lateness to the read-through frustrates Olivier.",
        "Assists(a_4, a_2) ::: Paula Strasberg assists Marilyn with her lines.",
        "Attracted(a_1, a_7) → Date(a_1, a_7) ::: Colin's attraction to Lucy leads to a date.",
        "Praise(a_3, a_2) ∧ Defend(a_3, a_2) ::: Sybil Thorndike's praise and defense of Marilyn occur in response to Olivier's frustration."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "815": [
    {
      "id": 815,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 1,
      "paragraph": "The paparazzi find out about Marilyn's arrival at Heathrow and they gather around the plane when it lands. Marilyn brings her husband, her business partner, Milton H. Greene (Dominic Cooper), and her acting coach Paula Strasberg (ZoĂŤ Wanamaker) with her. She initially appears to be uncomfortable around the many photographers, but relaxes at the press conference. Olivier becomes frustrated when Marilyn is late to the read-through. She insists Paula sits with her and when she has trouble with her lines, Paula reads them for her. The crew and the other actors, including Sybil Thorndike (Judi Dench), are in awe of Marilyn. Colin meets Lucy (Emma Watson), a wardrobe assistant to whom he is attracted, and they go on a date. Marilyn starts arriving later to the set and often forgets her lines, angering Olivier. However, Sybil praises Marilyn and defends her when Olivier tries to get her to apologise for holding the shoot up.",
      "question_template": "Olivier is upset with Marilyn Monroe because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Olivier becomes frustrated when Marilyn is late to the read-through.",
        "- Marilyn starts arriving later to the set and often forgets her lines, angering Olivier."
      ],
      "predicates": [
        "Discomfort(x) ::: x is uncomfortable around photographers.",
        "Relaxed(x) ::: x is relaxed at the press conference.",
        "Frustrated(x, y) ::: x is frustrated with y.",
        "Assists(x, y) ::: x assists y with her lines.",
        "Attracted(x, y) ::: x is attracted to y.",
        "Praise(x, y) ::: x praises y.",
        "Defend(x, y) ::: x defends y against criticism.",
        "Late(x) ::: x is late to an event."
      ],
      "premises": [
        "Discomfort(a_2) ∧ Late(a_2, readThrough) ∧ Frustrated(a_6, a_2) ∧ Assists(a_4, a_2) ∧ Attracted(a_1, a_7) ∧ Praise(a_3, a_2) ∧ Defend(a_3, a_2) ::: Marilyn is initially uncomfortable around photographers, is late to the read-through, Olivier is frustrated with her, Paula assists Marilyn with her lines, Colin is attracted to Lucy, and Sybil praises and defends Marilyn.",
        "Relaxed(a_2) ::: Marilyn's discomfort around photographers decreases at the press conference.",
        "Frustrated(a_6, a_2) ::: Marilyn's lateness to the read-through frustrates Olivier.",
        "Assists(a_4, a_2) ::: Paula Strasberg assists Marilyn with her lines.",
        "Attracted(a_1, a_7) → Date(a_1, a_7) ::: Colin's attraction to Lucy leads to a date.",
        "Praise(a_3, a_2) ∧ Defend(a_3, a_2) ::: Sybil Thorndike's praise and defense of Marilyn occur in response to Olivier's frustration."
      ],
      "conclusions": [
        "Frustrated(olivier, marilyn) ∧ Late(marilyn, readThrough)",
        "Frustrated(olivier, marilyn) ∧ Late(marilyn, set) ∧ ¬RemembersLines(marilyn)"
      ]
    },
    {
      "id": 815,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 2,
      "paragraph": "Marilyn struggles to understand her character and leaves the set when Olivier insults her. Colin asks the director to be more sympathetic towards Marilyn, before he goes to Parkside House to check on her. He hears an argument and finds a tearful Marilyn sitting on the stairs with Arthur's notebook, which contains the plot of a new play that appears to poke fun at her. Arthur later returns to the United States. Vivien comes to the set and watches some of Marilyn's scenes. She breaks down, saying Marilyn lights up the screen and if only Olivier could see himself when he watches her. Olivier tries unsuccessfully to reassure his wife. Marilyn does not show up to the set following Arthur's departure and she asks Colin to come to Parkside and they talk. The crew becomes captivated by Marilyn when she dances for a scene and Milton pulls Colin aside to tell him Marilyn breaks hearts and that she will break his too. Lucy also notices Colin's growing infatuation with Marilyn and breaks up with him.",
      "question_template": "Olivier is upset with Marilyn Monroe because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Olivier insults her",
        "- Colin asks the director to be more sympathetic towards Marilyn",
        "- Olivier tries unsuccessfully to reassure his wife"
      ],
      "predicates": [
        "UnderstandsImpact(x, y) ::: x understands the impact of his actions on y.",
        "Captivates(x, y) ::: x captivates those around her/him.",
        "Infatuated(x, y) ::: x develops an infatuation with y.",
        "Reacts(x, y) ::: x reacts to y."
      ],
      "premises": [
        "¬UnderstandsImpact(olivier, marilyn) ::: Olivier does not understand the impact of his actions on Marilyn.",
        "Captivates(marilyn, a_0) ::: Marilyn's presence captivates those around her.",
        "Infatuated(colin, marilyn) ::: Colin develops an infatuation with Marilyn.",
        "Reacts(lucy, infatuation(colin, marilyn)) ::: Lucy reacts to Colin's infatuation with Marilyn."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 815,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 3,
      "paragraph": "Colin and Marilyn spend the day together and are given a tour of the library of Windsor Castle by Owen Morshead (Derek Jacobi). Colin also shows Marilyn around Eton College, and they go skinny dipping in the River Thames. Marilyn kisses Colin and they are found by Roger Smith (Philip Jackson), Marilyn's bodyguard. Colin is called to Parkside one night as Marilyn has locked herself in her room. Colin enters her room and Marilyn invites him to lie next to her on the bed. The following night, Marilyn wakes up in pain and claims she is having a miscarriage. A doctor tends to her and Marilyn tells Colin that Arthur is coming back and she wants to try and be a good wife to him, so she and Colin should forget everything that happened between them. She later returns to the set to complete the film. Olivier praises Marilyn, but reveals she has killed his desire to direct again. Lucy asks Colin if Marilyn broke his heart and he replies that she did, to which she replies that he needed it. Marilyn comes to a local pub, where Colin is staying, and thanks him for helping her. She kisses him goodbye and Roger drives her to the airport.",
      "question_template": "Olivier is upset with Marilyn Monroe because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Olivier praises Marilyn, but reveals she has killed his desire to direct again."
      ],
      "predicates": [
        "SpendTimeTogether(x, y) ::: x and y spend time together.",
        "Tour(x, y, z) ::: x gives a tour of y to z.",
        "ShowAround(x, y, z) ::: x shows y around z.",
        "SkinnyDipping(x, y) ::: x and y go skinny dipping.",
        "Kiss(x, y) ::: x kisses y.",
        "FoundBy(x, y) ::: x is found by y.",
        "LockedInRoom(x) ::: x is locked in her room.",
        "Invite(x, y) ::: x invites y to lie next to her.",
        "WakesUpInPain(x) ::: x wakes up in pain.",
        "ClaimsMiscarriage(x) ::: x claims she is having a miscarriage.",
        "TendsTo(x, y) ::: x tends to y.",
        "WantsToForget(x, y) ::: x wants to forget y.",
        "ReturnsToSet(x) ::: x returns to the set.",
        "Praises(x, y) ::: x praises y.",
        "Reveals(x, y) ::: x reveals y.",
        "Asks(x, y) ::: x asks y.",
        "Replies(x, y) ::: x replies to y.",
        "Thanks(x, y) ::: x thanks y.",
        "KissesGoodbye(x, y) ::: x kisses y goodbye.",
        "DrivesTo(x, y) ::: x drives y to a location."
      ],
      "premises": [
        "SpendTimeTogether(colin, marilyn) ::: Colin and Marilyn spend the day together.",
        "Tour(owenMorshead, windsorCastle, marilyn) ::: Owen Morshead gives a tour of Windsor Castle to Marilyn.",
        "ShowAround(colin, marilyn, etonCollege) ::: Colin shows Marilyn around Eton College.",
        "SkinnyDipping(colin, marilyn) ::: Colin and Marilyn go skinny dipping in the River Thames.",
        "Kiss(marilyn, colin) ::: Marilyn kisses Colin.",
        "FoundBy(marilyn, rogerSmith) ::: Marilyn is found by Roger Smith.",
        "LockedInRoom(marilyn) ::: Marilyn has locked herself in her room.",
        "Invite(marilyn, colin) ::: Marilyn invites Colin to lie next to her on the bed.",
        "WakesUpInPain(marilyn) ::: Marilyn wakes up in pain.",
        "ClaimsMiscarriage(marilyn) ::: Marilyn claims she is having a miscarriage.",
        "TendsTo(doctor, marilyn) ::: A doctor tends to Marilyn.",
        "WantsToForget(marilyn, relationshipWithColin) ::: Marilyn wants to forget her relationship with Colin to focus on being a good wife to Arthur.",
        "ReturnsToSet(marilyn) ::: Marilyn returns to the set to complete the film.",
        "Praises(olivier, marilyn) ::: Olivier praises Marilyn.",
        "Reveals(olivier, desireToDirectAgain) ::: Olivier reveals she has killed his desire to direct again.",
        "Asks(lucy, colin) ::: Lucy asks Colin if Marilyn broke his heart.",
        "Replies(colin, lucy) ::: Colin replies that she did.",
        "Replies(lucy, colin) ::: Lucy replies that he needed it.",
        "Thanks(marilyn, colin) ::: Marilyn thanks Colin for helping her.",
        "KissesGoodbye(marilyn, colin) ::: Marilyn kisses Colin goodbye.",
        "DrivesTo(rogerSmith, airport) ::: Roger drives Marilyn to the airport."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "816": [
    {
      "id": 816,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 1,
      "paragraph": "The paparazzi find out about Marilyn's arrival at Heathrow and they gather around the plane when it lands. Marilyn brings her husband, her business partner, Milton H. Greene (Dominic Cooper), and her acting coach Paula Strasberg (ZoĂŤ Wanamaker) with her. She initially appears to be uncomfortable around the many photographers, but relaxes at the press conference. Olivier becomes frustrated when Marilyn is late to the read-through. She insists Paula sits with her and when she has trouble with her lines, Paula reads them for her. The crew and the other actors, including Sybil Thorndike (Judi Dench), are in awe of Marilyn. Colin meets Lucy (Emma Watson), a wardrobe assistant to whom he is attracted, and they go on a date. Marilyn starts arriving later to the set and often forgets her lines, angering Olivier. However, Sybil praises Marilyn and defends her when Olivier tries to get her to apologise for holding the shoot up.",
      "question_template": "Marilyn Monroe goes skinny dipping with [[CANDIDATE_ANSWER]] in this story.",
      "candidate_answers": [
        "A wardrobe assistant"
      ],
      "predicates": [
        "Discomfort(x) ::: x is uncomfortable around photographers.",
        "Relaxed(x) ::: x is relaxed at the press conference.",
        "Frustrated(x, y) ::: x is frustrated with y.",
        "Assists(x, y) ::: x assists y with her lines.",
        "Attracted(x, y) ::: x is attracted to y.",
        "Praise(x, y) ::: x praises y.",
        "Defend(x, y) ::: x defends y against criticism.",
        "Late(x) ::: x is late to an event."
      ],
      "premises": [
        "Discomfort(a_2) ∧ Late(a_2, readThrough) ∧ Frustrated(a_6, a_2) ∧ Assists(a_4, a_2) ∧ Attracted(a_1, a_7) ∧ Praise(a_3, a_2) ∧ Defend(a_3, a_2) ::: Marilyn is initially uncomfortable around photographers, is late to the read-through, Olivier is frustrated with her, Paula assists Marilyn with her lines, Colin is attracted to Lucy, and Sybil praises and defends Marilyn.",
        "Relaxed(a_2) ::: Marilyn's discomfort around photographers decreases at the press conference.",
        "Frustrated(a_6, a_2) ::: Marilyn's lateness to the read-through frustrates Olivier.",
        "Assists(a_4, a_2) ::: Paula Strasberg assists Marilyn with her lines.",
        "Attracted(a_1, a_7) → Date(a_1, a_7) ::: Colin's attraction to Lucy leads to a date.",
        "Praise(a_3, a_2) ∧ Defend(a_3, a_2) ::: Sybil Thorndike's praise and defense of Marilyn occur in response to Olivier's frustration."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 816,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 2,
      "paragraph": "Marilyn struggles to understand her character and leaves the set when Olivier insults her. Colin asks the director to be more sympathetic towards Marilyn, before he goes to Parkside House to check on her. He hears an argument and finds a tearful Marilyn sitting on the stairs with Arthur's notebook, which contains the plot of a new play that appears to poke fun at her. Arthur later returns to the United States. Vivien comes to the set and watches some of Marilyn's scenes. She breaks down, saying Marilyn lights up the screen and if only Olivier could see himself when he watches her. Olivier tries unsuccessfully to reassure his wife. Marilyn does not show up to the set following Arthur's departure and she asks Colin to come to Parkside and they talk. The crew becomes captivated by Marilyn when she dances for a scene and Milton pulls Colin aside to tell him Marilyn breaks hearts and that she will break his too. Lucy also notices Colin's growing infatuation with Marilyn and breaks up with him.",
      "question_template": "Marilyn Monroe goes skinny dipping with [[CANDIDATE_ANSWER]] in this story.",
      "candidate_answers": [
        "Lucy also notices Colin's growing infatuation with Marilyn and breaks up with him."
      ],
      "predicates": [
        "UnderstandsImpact(x, y) ::: x understands the impact of his actions on y.",
        "Captivates(x, y) ::: x captivates those around her/him.",
        "Infatuated(x, y) ::: x develops an infatuation with y.",
        "Reacts(x, y) ::: x reacts to y."
      ],
      "premises": [
        "¬UnderstandsImpact(olivier, marilyn) ::: Olivier does not understand the impact of his actions on Marilyn.",
        "Captivates(marilyn, a_0) ::: Marilyn's presence captivates those around her.",
        "Infatuated(colin, marilyn) ::: Colin develops an infatuation with Marilyn.",
        "Reacts(lucy, infatuation(colin, marilyn)) ::: Lucy reacts to Colin's infatuation with Marilyn."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 816,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 3,
      "paragraph": "Colin and Marilyn spend the day together and are given a tour of the library of Windsor Castle by Owen Morshead (Derek Jacobi). Colin also shows Marilyn around Eton College, and they go skinny dipping in the River Thames. Marilyn kisses Colin and they are found by Roger Smith (Philip Jackson), Marilyn's bodyguard. Colin is called to Parkside one night as Marilyn has locked herself in her room. Colin enters her room and Marilyn invites him to lie next to her on the bed. The following night, Marilyn wakes up in pain and claims she is having a miscarriage. A doctor tends to her and Marilyn tells Colin that Arthur is coming back and she wants to try and be a good wife to him, so she and Colin should forget everything that happened between them. She later returns to the set to complete the film. Olivier praises Marilyn, but reveals she has killed his desire to direct again. Lucy asks Colin if Marilyn broke his heart and he replies that she did, to which she replies that he needed it. Marilyn comes to a local pub, where Colin is staying, and thanks him for helping her. She kisses him goodbye and Roger drives her to the airport.",
      "question_template": "Marilyn Monroe goes skinny dipping with [[CANDIDATE_ANSWER]] in this story.",
      "candidate_answers": [
        "Lucy asks Colin if Marilyn broke his heart"
      ],
      "predicates": [
        "SpendTimeTogether(x, y) ::: x and y spend time together.",
        "Tour(x, y, z) ::: x gives a tour of y to z.",
        "ShowAround(x, y, z) ::: x shows y around z.",
        "SkinnyDipping(x, y) ::: x and y go skinny dipping.",
        "Kiss(x, y) ::: x kisses y.",
        "FoundBy(x, y) ::: x is found by y.",
        "LockedInRoom(x) ::: x is locked in her room.",
        "Invite(x, y) ::: x invites y to lie next to her.",
        "WakesUpInPain(x) ::: x wakes up in pain.",
        "ClaimsMiscarriage(x) ::: x claims she is having a miscarriage.",
        "TendsTo(x, y) ::: x tends to y.",
        "WantsToForget(x, y) ::: x wants to forget y.",
        "ReturnsToSet(x) ::: x returns to the set.",
        "Praises(x, y) ::: x praises y.",
        "Reveals(x, y) ::: x reveals y.",
        "Asks(x, y) ::: x asks y.",
        "Replies(x, y) ::: x replies to y.",
        "Thanks(x, y) ::: x thanks y.",
        "KissesGoodbye(x, y) ::: x kisses y goodbye.",
        "DrivesTo(x, y) ::: x drives y to a location."
      ],
      "premises": [
        "SpendTimeTogether(colin, marilyn) ::: Colin and Marilyn spend the day together.",
        "Tour(owenMorshead, windsorCastle, marilyn) ::: Owen Morshead gives a tour of Windsor Castle to Marilyn.",
        "ShowAround(colin, marilyn, etonCollege) ::: Colin shows Marilyn around Eton College.",
        "SkinnyDipping(colin, marilyn) ::: Colin and Marilyn go skinny dipping in the River Thames.",
        "Kiss(marilyn, colin) ::: Marilyn kisses Colin.",
        "FoundBy(marilyn, rogerSmith) ::: Marilyn is found by Roger Smith.",
        "LockedInRoom(marilyn) ::: Marilyn has locked herself in her room.",
        "Invite(marilyn, colin) ::: Marilyn invites Colin to lie next to her on the bed.",
        "WakesUpInPain(marilyn) ::: Marilyn wakes up in pain.",
        "ClaimsMiscarriage(marilyn) ::: Marilyn claims she is having a miscarriage.",
        "TendsTo(doctor, marilyn) ::: A doctor tends to Marilyn.",
        "WantsToForget(marilyn, relationshipWithColin) ::: Marilyn wants to forget her relationship with Colin to focus on being a good wife to Arthur.",
        "ReturnsToSet(marilyn) ::: Marilyn returns to the set to complete the film.",
        "Praises(olivier, marilyn) ::: Olivier praises Marilyn.",
        "Reveals(olivier, desireToDirectAgain) ::: Olivier reveals she has killed his desire to direct again.",
        "Asks(lucy, colin) ::: Lucy asks Colin if Marilyn broke his heart.",
        "Replies(colin, lucy) ::: Colin replies that she did.",
        "Replies(lucy, colin) ::: Lucy replies that he needed it.",
        "Thanks(marilyn, colin) ::: Marilyn thanks Colin for helping her.",
        "KissesGoodbye(marilyn, colin) ::: Marilyn kisses Colin goodbye.",
        "DrivesTo(rogerSmith, airport) ::: Roger drives Marilyn to the airport."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "817": [
    {
      "id": 817,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 1,
      "paragraph": "The paparazzi find out about Marilyn's arrival at Heathrow and they gather around the plane when it lands. Marilyn brings her husband, her business partner, Milton H. Greene (Dominic Cooper), and her acting coach Paula Strasberg (ZoĂŤ Wanamaker) with her. She initially appears to be uncomfortable around the many photographers, but relaxes at the press conference. Olivier becomes frustrated when Marilyn is late to the read-through. She insists Paula sits with her and when she has trouble with her lines, Paula reads them for her. The crew and the other actors, including Sybil Thorndike (Judi Dench), are in awe of Marilyn. Colin meets Lucy (Emma Watson), a wardrobe assistant to whom he is attracted, and they go on a date. Marilyn starts arriving later to the set and often forgets her lines, angering Olivier. However, Sybil praises Marilyn and defends her when Olivier tries to get her to apologise for holding the shoot up.",
      "question_template": "[[CANDIDATE_ANSWER]] catches Colin Clark and Marilyn Monroe skinny dipping together.",
      "candidate_answers": [
        "- She initially appears to be uncomfortable around the many photographers",
        "- Olivier becomes frustrated when Marilyn is late to the read-through",
        "- She insists Paula sits with her and when she has trouble with her lines, Paula reads them for her",
        "- Marilyn starts arriving later to the set and often forgets her lines, angering Olivier"
      ],
      "predicates": [
        "Discomfort(x) ::: x is uncomfortable around photographers.",
        "Relaxed(x) ::: x is relaxed at the press conference.",
        "Frustrated(x, y) ::: x is frustrated with y.",
        "Assists(x, y) ::: x assists y with her lines.",
        "Attracted(x, y) ::: x is attracted to y.",
        "Praise(x, y) ::: x praises y.",
        "Defend(x, y) ::: x defends y against criticism.",
        "Late(x) ::: x is late to an event."
      ],
      "premises": [
        "Discomfort(a_2) ∧ Late(a_2, readThrough) ∧ Frustrated(a_6, a_2) ∧ Assists(a_4, a_2) ∧ Attracted(a_1, a_7) ∧ Praise(a_3, a_2) ∧ Defend(a_3, a_2) ::: Marilyn is initially uncomfortable around photographers, is late to the read-through, Olivier is frustrated with her, Paula assists Marilyn with her lines, Colin is attracted to Lucy, and Sybil praises and defends Marilyn.",
        "Relaxed(a_2) ::: Marilyn's discomfort around photographers decreases at the press conference.",
        "Frustrated(a_6, a_2) ::: Marilyn's lateness to the read-through frustrates Olivier.",
        "Assists(a_4, a_2) ::: Paula Strasberg assists Marilyn with her lines.",
        "Attracted(a_1, a_7) → Date(a_1, a_7) ::: Colin's attraction to Lucy leads to a date.",
        "Praise(a_3, a_2) ∧ Defend(a_3, a_2) ::: Sybil Thorndike's praise and defense of Marilyn occur in response to Olivier's frustration."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 817,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 3,
      "paragraph": "Colin and Marilyn spend the day together and are given a tour of the library of Windsor Castle by Owen Morshead (Derek Jacobi). Colin also shows Marilyn around Eton College, and they go skinny dipping in the River Thames. Marilyn kisses Colin and they are found by Roger Smith (Philip Jackson), Marilyn's bodyguard. Colin is called to Parkside one night as Marilyn has locked herself in her room. Colin enters her room and Marilyn invites him to lie next to her on the bed. The following night, Marilyn wakes up in pain and claims she is having a miscarriage. A doctor tends to her and Marilyn tells Colin that Arthur is coming back and she wants to try and be a good wife to him, so she and Colin should forget everything that happened between them. She later returns to the set to complete the film. Olivier praises Marilyn, but reveals she has killed his desire to direct again. Lucy asks Colin if Marilyn broke his heart and he replies that she did, to which she replies that he needed it. Marilyn comes to a local pub, where Colin is staying, and thanks him for helping her. She kisses him goodbye and Roger drives her to the airport.",
      "question_template": "[[CANDIDATE_ANSWER]] catches Colin Clark and Marilyn Monroe skinny dipping together.",
      "candidate_answers": [
        "Marilyn wakes up in pain and claims she is having a miscarriage.",
        "She wants to try and be a good wife to him, so she and Colin should forget everything that happened between them."
      ],
      "predicates": [
        "SpendTimeTogether(x, y) ::: x and y spend time together.",
        "Tour(x, y, z) ::: x gives a tour of y to z.",
        "ShowAround(x, y, z) ::: x shows y around z.",
        "SkinnyDipping(x, y) ::: x and y go skinny dipping.",
        "Kiss(x, y) ::: x kisses y.",
        "FoundBy(x, y) ::: x is found by y.",
        "LockedInRoom(x) ::: x is locked in her room.",
        "Invite(x, y) ::: x invites y to lie next to her.",
        "WakesUpInPain(x) ::: x wakes up in pain.",
        "ClaimsMiscarriage(x) ::: x claims she is having a miscarriage.",
        "TendsTo(x, y) ::: x tends to y.",
        "WantsToForget(x, y) ::: x wants to forget y.",
        "ReturnsToSet(x) ::: x returns to the set.",
        "Praises(x, y) ::: x praises y.",
        "Reveals(x, y) ::: x reveals y.",
        "Asks(x, y) ::: x asks y.",
        "Replies(x, y) ::: x replies to y.",
        "Thanks(x, y) ::: x thanks y.",
        "KissesGoodbye(x, y) ::: x kisses y goodbye.",
        "DrivesTo(x, y) ::: x drives y to a location."
      ],
      "premises": [
        "SpendTimeTogether(colin, marilyn) ::: Colin and Marilyn spend the day together.",
        "Tour(owenMorshead, windsorCastle, marilyn) ::: Owen Morshead gives a tour of Windsor Castle to Marilyn.",
        "ShowAround(colin, marilyn, etonCollege) ::: Colin shows Marilyn around Eton College.",
        "SkinnyDipping(colin, marilyn) ::: Colin and Marilyn go skinny dipping in the River Thames.",
        "Kiss(marilyn, colin) ::: Marilyn kisses Colin.",
        "FoundBy(marilyn, rogerSmith) ::: Marilyn is found by Roger Smith.",
        "LockedInRoom(marilyn) ::: Marilyn has locked herself in her room.",
        "Invite(marilyn, colin) ::: Marilyn invites Colin to lie next to her on the bed.",
        "WakesUpInPain(marilyn) ::: Marilyn wakes up in pain.",
        "ClaimsMiscarriage(marilyn) ::: Marilyn claims she is having a miscarriage.",
        "TendsTo(doctor, marilyn) ::: A doctor tends to Marilyn.",
        "WantsToForget(marilyn, relationshipWithColin) ::: Marilyn wants to forget her relationship with Colin to focus on being a good wife to Arthur.",
        "ReturnsToSet(marilyn) ::: Marilyn returns to the set to complete the film.",
        "Praises(olivier, marilyn) ::: Olivier praises Marilyn.",
        "Reveals(olivier, desireToDirectAgain) ::: Olivier reveals she has killed his desire to direct again.",
        "Asks(lucy, colin) ::: Lucy asks Colin if Marilyn broke his heart.",
        "Replies(colin, lucy) ::: Colin replies that she did.",
        "Replies(lucy, colin) ::: Lucy replies that he needed it.",
        "Thanks(marilyn, colin) ::: Marilyn thanks Colin for helping her.",
        "KissesGoodbye(marilyn, colin) ::: Marilyn kisses Colin goodbye.",
        "DrivesTo(rogerSmith, airport) ::: Roger drives Marilyn to the airport."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "818": [
    {
      "id": 818,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 2,
      "paragraph": "Marilyn struggles to understand her character and leaves the set when Olivier insults her. Colin asks the director to be more sympathetic towards Marilyn, before he goes to Parkside House to check on her. He hears an argument and finds a tearful Marilyn sitting on the stairs with Arthur's notebook, which contains the plot of a new play that appears to poke fun at her. Arthur later returns to the United States. Vivien comes to the set and watches some of Marilyn's scenes. She breaks down, saying Marilyn lights up the screen and if only Olivier could see himself when he watches her. Olivier tries unsuccessfully to reassure his wife. Marilyn does not show up to the set following Arthur's departure and she asks Colin to come to Parkside and they talk. The crew becomes captivated by Marilyn when she dances for a scene and Milton pulls Colin aside to tell him Marilyn breaks hearts and that she will break his too. Lucy also notices Colin's growing infatuation with Marilyn and breaks up with him.",
      "question_template": "Colin Clark and Marilyn Monroe go on [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "A tearful Marilyn sitting on the stairs with Arthur's notebook"
      ],
      "predicates": [
        "UnderstandsImpact(x, y) ::: x understands the impact of his actions on y.",
        "Captivates(x, y) ::: x captivates those around her/him.",
        "Infatuated(x, y) ::: x develops an infatuation with y.",
        "Reacts(x, y) ::: x reacts to y."
      ],
      "premises": [
        "¬UnderstandsImpact(olivier, marilyn) ::: Olivier does not understand the impact of his actions on Marilyn.",
        "Captivates(marilyn, a_0) ::: Marilyn's presence captivates those around her.",
        "Infatuated(colin, marilyn) ::: Colin develops an infatuation with Marilyn.",
        "Reacts(lucy, infatuation(colin, marilyn)) ::: Lucy reacts to Colin's infatuation with Marilyn."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "819": [
    {
      "id": 819,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 3,
      "paragraph": "Colin and Marilyn spend the day together and are given a tour of the library of Windsor Castle by Owen Morshead (Derek Jacobi). Colin also shows Marilyn around Eton College, and they go skinny dipping in the River Thames. Marilyn kisses Colin and they are found by Roger Smith (Philip Jackson), Marilyn's bodyguard. Colin is called to Parkside one night as Marilyn has locked herself in her room. Colin enters her room and Marilyn invites him to lie next to her on the bed. The following night, Marilyn wakes up in pain and claims she is having a miscarriage. A doctor tends to her and Marilyn tells Colin that Arthur is coming back and she wants to try and be a good wife to him, so she and Colin should forget everything that happened between them. She later returns to the set to complete the film. Olivier praises Marilyn, but reveals she has killed his desire to direct again. Lucy asks Colin if Marilyn broke his heart and he replies that she did, to which she replies that he needed it. Marilyn comes to a local pub, where Colin is staying, and thanks him for helping her. She kisses him goodbye and Roger drives her to the airport.",
      "question_template": "The production of The Prince and The Showgirl takes place at [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Marilyn tells Colin that Arthur is coming back and she wants to try and be a good wife to him, so she and Colin should forget everything that happened between them.",
        "- Lucy asks Colin if Marilyn broke his heart and he replies that she did, to which she replies that he needed it."
      ],
      "predicates": [
        "SpendTimeTogether(x, y) ::: x and y spend time together.",
        "Tour(x, y, z) ::: x gives a tour of y to z.",
        "ShowAround(x, y, z) ::: x shows y around z.",
        "SkinnyDipping(x, y) ::: x and y go skinny dipping.",
        "Kiss(x, y) ::: x kisses y.",
        "FoundBy(x, y) ::: x is found by y.",
        "LockedInRoom(x) ::: x is locked in her room.",
        "Invite(x, y) ::: x invites y to lie next to her.",
        "WakesUpInPain(x) ::: x wakes up in pain.",
        "ClaimsMiscarriage(x) ::: x claims she is having a miscarriage.",
        "TendsTo(x, y) ::: x tends to y.",
        "WantsToForget(x, y) ::: x wants to forget y.",
        "ReturnsToSet(x) ::: x returns to the set.",
        "Praises(x, y) ::: x praises y.",
        "Reveals(x, y) ::: x reveals y.",
        "Asks(x, y) ::: x asks y.",
        "Replies(x, y) ::: x replies to y.",
        "Thanks(x, y) ::: x thanks y.",
        "KissesGoodbye(x, y) ::: x kisses y goodbye.",
        "DrivesTo(x, y) ::: x drives y to a location."
      ],
      "premises": [
        "SpendTimeTogether(colin, marilyn) ::: Colin and Marilyn spend the day together.",
        "Tour(owenMorshead, windsorCastle, marilyn) ::: Owen Morshead gives a tour of Windsor Castle to Marilyn.",
        "ShowAround(colin, marilyn, etonCollege) ::: Colin shows Marilyn around Eton College.",
        "SkinnyDipping(colin, marilyn) ::: Colin and Marilyn go skinny dipping in the River Thames.",
        "Kiss(marilyn, colin) ::: Marilyn kisses Colin.",
        "FoundBy(marilyn, rogerSmith) ::: Marilyn is found by Roger Smith.",
        "LockedInRoom(marilyn) ::: Marilyn has locked herself in her room.",
        "Invite(marilyn, colin) ::: Marilyn invites Colin to lie next to her on the bed.",
        "WakesUpInPain(marilyn) ::: Marilyn wakes up in pain.",
        "ClaimsMiscarriage(marilyn) ::: Marilyn claims she is having a miscarriage.",
        "TendsTo(doctor, marilyn) ::: A doctor tends to Marilyn.",
        "WantsToForget(marilyn, relationshipWithColin) ::: Marilyn wants to forget her relationship with Colin to focus on being a good wife to Arthur.",
        "ReturnsToSet(marilyn) ::: Marilyn returns to the set to complete the film.",
        "Praises(olivier, marilyn) ::: Olivier praises Marilyn.",
        "Reveals(olivier, desireToDirectAgain) ::: Olivier reveals she has killed his desire to direct again.",
        "Asks(lucy, colin) ::: Lucy asks Colin if Marilyn broke his heart.",
        "Replies(colin, lucy) ::: Colin replies that she did.",
        "Replies(lucy, colin) ::: Lucy replies that he needed it.",
        "Thanks(marilyn, colin) ::: Marilyn thanks Colin for helping her.",
        "KissesGoodbye(marilyn, colin) ::: Marilyn kisses Colin goodbye.",
        "DrivesTo(rogerSmith, airport) ::: Roger drives Marilyn to the airport."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "820": [
    {
      "id": 820,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 0,
      "paragraph": " Following his graduation from university in 1956, aspiring filmmaker Colin Clark (Eddie Redmayne) travels to London to get a job on Laurence Olivier's (Kenneth Branagh) next production. Production manager Hugh Perceval (Michael Kitchen) tells Colin that there are no jobs available, but he decides to wait for Olivier, whom he once met at a party. Olivier and his wife, Vivien Leigh (Julia Ormond), eventually show up and Vivien encourages Olivier to give Colin a job on his upcoming film The Prince and the Showgirl, starring Marilyn Monroe (Michelle Williams). Colin's first task is to find a suitable place for Marilyn and her husband, Arthur Miller (Dougray Scott), to stay at while they are in England. The press find out about the house, but Colin reveals he secured a second house just in case, impressing Olivier and Marilyn's publicist, Arthur P. Jacobs (Toby Jones).",
      "question_template": "[[CANDIDATE_ANSWER]] is Marilyn Monroe's acting coach.",
      "candidate_answers": [
        "- A suitable place for Marilyn and her husband, Arthur Miller, to stay at while they are in England",
        "- A second house just in case"
      ],
      "predicates": [
        "Graduated(x) ::: x has graduated from university.",
        "AspiringFilmmaker(x) ::: x is an aspiring filmmaker.",
        "TravelsTo(x, y) ::: x travels to y.",
        "JobAvailable(x) ::: x has a job available.",
        "WaitsFor(x, y) ::: x waits for y.",
        "Encourages(x, y, z) ::: x encourages y to do z.",
        "GivesJob(x, y, z) ::: x gives y a job on z.",
        "FindsPlaceFor(x, y, z) ::: x finds a suitable place for y and z.",
        "Impresses(x, y, z) ::: x impresses y and z."
      ],
      "premises": [
        "Graduated(colin) ::: Colin graduated from university in 1956.",
        "AspiringFilmmaker(colin) ::: Colin is an aspiring filmmaker.",
        "TravelsTo(colin, london) ::: Colin travels to London to get a job.",
        "¬JobAvailable(olivier) ::: There are no jobs available on Olivier's next production.",
        "WaitsFor(colin, olivier) ::: Colin decides to wait for Olivier.",
        "Encourages(vivien, olivier, givesJob(colin, olivier, thePrinceAndTheShowgirl)) ::: Vivien encourages Olivier to give Colin a job on his upcoming film The Prince and the Showgirl.",
        "FindsPlaceFor(colin, marilyn, arthur) ::: Colin's first task is to find a suitable place for Marilyn and her husband, Arthur Miller, to stay while they are in England.",
        "Impresses(colin, olivier, arthurPJacobs) ::: Colin impresses Olivier and Marilyn's publicist, Arthur P. Jacobs.",
        "Conclusion:",
        "GivesJob(olivier, colin, thePrinceAndTheShowgirl) ::: Olivier gives Colin a job on The Prince and the Showgirl due to Vivien Leigh's encouragement."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 820,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 2,
      "paragraph": "Marilyn struggles to understand her character and leaves the set when Olivier insults her. Colin asks the director to be more sympathetic towards Marilyn, before he goes to Parkside House to check on her. He hears an argument and finds a tearful Marilyn sitting on the stairs with Arthur's notebook, which contains the plot of a new play that appears to poke fun at her. Arthur later returns to the United States. Vivien comes to the set and watches some of Marilyn's scenes. She breaks down, saying Marilyn lights up the screen and if only Olivier could see himself when he watches her. Olivier tries unsuccessfully to reassure his wife. Marilyn does not show up to the set following Arthur's departure and she asks Colin to come to Parkside and they talk. The crew becomes captivated by Marilyn when she dances for a scene and Milton pulls Colin aside to tell him Marilyn breaks hearts and that she will break his too. Lucy also notices Colin's growing infatuation with Marilyn and breaks up with him.",
      "question_template": "[[CANDIDATE_ANSWER]] is Marilyn Monroe's acting coach.",
      "candidate_answers": [
        "- Parkside House",
        "- The set",
        "- The United States"
      ],
      "predicates": [
        "UnderstandsImpact(x, y) ::: x understands the impact of his actions on y.",
        "Captivates(x, y) ::: x captivates those around her/him.",
        "Infatuated(x, y) ::: x develops an infatuation with y.",
        "Reacts(x, y) ::: x reacts to y."
      ],
      "premises": [
        "¬UnderstandsImpact(olivier, marilyn) ::: Olivier does not understand the impact of his actions on Marilyn.",
        "Captivates(marilyn, a_0) ::: Marilyn's presence captivates those around her.",
        "Infatuated(colin, marilyn) ::: Colin develops an infatuation with Marilyn.",
        "Reacts(lucy, infatuation(colin, marilyn)) ::: Lucy reacts to Colin's infatuation with Marilyn."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 820,
      "context_id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 3,
      "paragraph": "Colin and Marilyn spend the day together and are given a tour of the library of Windsor Castle by Owen Morshead (Derek Jacobi). Colin also shows Marilyn around Eton College, and they go skinny dipping in the River Thames. Marilyn kisses Colin and they are found by Roger Smith (Philip Jackson), Marilyn's bodyguard. Colin is called to Parkside one night as Marilyn has locked herself in her room. Colin enters her room and Marilyn invites him to lie next to her on the bed. The following night, Marilyn wakes up in pain and claims she is having a miscarriage. A doctor tends to her and Marilyn tells Colin that Arthur is coming back and she wants to try and be a good wife to him, so she and Colin should forget everything that happened between them. She later returns to the set to complete the film. Olivier praises Marilyn, but reveals she has killed his desire to direct again. Lucy asks Colin if Marilyn broke his heart and he replies that she did, to which she replies that he needed it. Marilyn comes to a local pub, where Colin is staying, and thanks him for helping her. She kisses him goodbye and Roger drives her to the airport.",
      "question_template": "[[CANDIDATE_ANSWER]] is Marilyn Monroe's acting coach.",
      "candidate_answers": [
        "1. The library of Windsor Castle",
        "2. Eton College",
        "3. The River Thames"
      ],
      "predicates": [
        "SpendTimeTogether(x, y) ::: x and y spend time together.",
        "Tour(x, y, z) ::: x gives a tour of y to z.",
        "ShowAround(x, y, z) ::: x shows y around z.",
        "SkinnyDipping(x, y) ::: x and y go skinny dipping.",
        "Kiss(x, y) ::: x kisses y.",
        "FoundBy(x, y) ::: x is found by y.",
        "LockedInRoom(x) ::: x is locked in her room.",
        "Invite(x, y) ::: x invites y to lie next to her.",
        "WakesUpInPain(x) ::: x wakes up in pain.",
        "ClaimsMiscarriage(x) ::: x claims she is having a miscarriage.",
        "TendsTo(x, y) ::: x tends to y.",
        "WantsToForget(x, y) ::: x wants to forget y.",
        "ReturnsToSet(x) ::: x returns to the set.",
        "Praises(x, y) ::: x praises y.",
        "Reveals(x, y) ::: x reveals y.",
        "Asks(x, y) ::: x asks y.",
        "Replies(x, y) ::: x replies to y.",
        "Thanks(x, y) ::: x thanks y.",
        "KissesGoodbye(x, y) ::: x kisses y goodbye.",
        "DrivesTo(x, y) ::: x drives y to a location."
      ],
      "premises": [
        "SpendTimeTogether(colin, marilyn) ::: Colin and Marilyn spend the day together.",
        "Tour(owenMorshead, windsorCastle, marilyn) ::: Owen Morshead gives a tour of Windsor Castle to Marilyn.",
        "ShowAround(colin, marilyn, etonCollege) ::: Colin shows Marilyn around Eton College.",
        "SkinnyDipping(colin, marilyn) ::: Colin and Marilyn go skinny dipping in the River Thames.",
        "Kiss(marilyn, colin) ::: Marilyn kisses Colin.",
        "FoundBy(marilyn, rogerSmith) ::: Marilyn is found by Roger Smith.",
        "LockedInRoom(marilyn) ::: Marilyn has locked herself in her room.",
        "Invite(marilyn, colin) ::: Marilyn invites Colin to lie next to her on the bed.",
        "WakesUpInPain(marilyn) ::: Marilyn wakes up in pain.",
        "ClaimsMiscarriage(marilyn) ::: Marilyn claims she is having a miscarriage.",
        "TendsTo(doctor, marilyn) ::: A doctor tends to Marilyn.",
        "WantsToForget(marilyn, relationshipWithColin) ::: Marilyn wants to forget her relationship with Colin to focus on being a good wife to Arthur.",
        "ReturnsToSet(marilyn) ::: Marilyn returns to the set to complete the film.",
        "Praises(olivier, marilyn) ::: Olivier praises Marilyn.",
        "Reveals(olivier, desireToDirectAgain) ::: Olivier reveals she has killed his desire to direct again.",
        "Asks(lucy, colin) ::: Lucy asks Colin if Marilyn broke his heart.",
        "Replies(colin, lucy) ::: Colin replies that she did.",
        "Replies(lucy, colin) ::: Lucy replies that he needed it.",
        "Thanks(marilyn, colin) ::: Marilyn thanks Colin for helping her.",
        "KissesGoodbye(marilyn, colin) ::: Marilyn kisses Colin goodbye.",
        "DrivesTo(rogerSmith, airport) ::: Roger drives Marilyn to the airport."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "821": [
    {
      "id": 821,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 0,
      "paragraph": " Adam Lerner is a 27-year-old public radio journalist in Seattle with an artist girlfriend Rachael, of whom his best friend and co-worker Kyle disapproves; where Kyle is brash and outspoken, Adam is more introverted and mild-mannered.",
      "question_template": "Marilyn Monroe is married to [[CANDIDATE_ANSWER]] in this story.",
      "candidate_answers": [
        "Kyle"
      ],
      "predicates": [
        "PublicRadioJournalist(x) ::: x is a public radio journalist.",
        "Age(x, y) ::: x is y years old.",
        "LivesIn(x, y) ::: x lives in location y.",
        "HasGirlfriend(x, y) ::: x has girlfriend y.",
        "Disapproves(x, y) ::: x disapproves of y.",
        "Brash(x) ::: x is brash.",
        "Outspoken(x) ::: x is outspoken.",
        "Introverted(x) ::: x is introverted.",
        "MildMannered(x) ::: x is mild-mannered."
      ],
      "premises": [
        "PublicRadioJournalist(a_1) ∧ Age(a_1, 27) ∧ LivesIn(a_1, Seattle) ::: Adam Lerner is a 27-year-old public radio journalist in Seattle.",
        "HasGirlfriend(a_1, a_2) ::: Adam has an artist girlfriend Rachael.",
        "Disapproves(a_3, a_2) ::: Kyle disapproves of Rachael.",
        "Brash(a_3) ∧ Outspoken(a_3) ∧ Introverted(a_1) ∧ MildMannered(a_1) ::: Kyle is brash and outspoken, while Adam is introverted and mild-mannered."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 821,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 2,
      "paragraph": "Meanwhile, Adam skeptically begins going to a young and inexperienced therapist, Katherine McKay (Kendrick), a PhD candidate doing the clinical aspect of her thesis at the hospital. Although their relationship and sessions have a rocky start, he slowly begins to open up to her about his disease and how it is affecting him. After she gives him a lift home in her car after one of his chemo sessions, the two develop a rapport both in and outside of their sessions, which begins to blur the lines of both their doctor-patient relationship and connection as friends. She helps Adam understand his mother's situation as well, that even though he is the cancer patient, the loved ones feel just as much stress watching someone they care about fight the disease, which helps Adam make steps in repairing the rift between him and his mother. During chemo treatments, Adam also befriends Alan (Hall) and Mitch (Frewer), two older cancer patients who are also undergoing chemotherapy. The two offer Adam advice and smoke marijuana with him.",
      "question_template": "Marilyn Monroe is married to [[CANDIDATE_ANSWER]] in this story.",
      "candidate_answers": [
        "Alan",
        "Mitch",
        "Katherine McKay"
      ],
      "predicates": [
        "Skeptical(x) ::: x is skeptical about therapy.",
        "Therapist(x) ::: x is a therapist.",
        "PhDStudent(x) ::: x is a PhD candidate.",
        "OpenUp(x, y) ::: x opens up to y about his disease.",
        "DevelopRapport(x, y) ::: x develops a rapport with y.",
        "BlurLines(x, y) ::: x blurs the lines of their relationship with y.",
        "UnderstandSituation(x, y) ::: x helps y understand a situation.",
        "FeelStress(x, y) ::: x feels stress about y's medical condition.",
        "Friend(x, y) ::: x is a friend of y.",
        "Advice(x, y) ::: x gives advice to y.",
        "SmokeMarijuana(x, y) ::: x smokes marijuana with y."
      ],
      "premises": [
        "Skeptical(a_1) ∧ Therapist(a_2) ∧ PhDStudent(a_2) ::: Adam skeptically begins going to a young and inexperienced therapist, Katherine McKay, a PhD candidate doing the clinical aspect of her thesis at the hospital.",
        "OpenUp(a_1, a_2) ::: Adam slowly begins to open up to Katherine about his disease and how it is affecting him.",
        "DevelopRapport(a_1, a_2) ::: Adam and Katherine develop a rapport both in and outside of their sessions.",
        "BlurLines(a_1, a_2) ::: Their relationship as doctor-patient and friends begins to blur.",
        "UnderstandSituation(a_2, a_1) ::: Katherine helps Adam understand his mother's situation.",
        "FeelStress(a_1, b_1) ::: Adam's loved ones feel just as much stress as Adam while he fights the disease.",
        "Friend(a_1, a_3) ∧ Friend(a_1, a_4) ::: Adam befriends Alan and Mitch, two older cancer patients undergoing chemotherapy.",
        "Advice(a_3, a_1) ∧ Advice(a_4, a_1) ::: Alan and Mitch offer Adam advice.",
        "SmokeMarijuana(a_3, a_1) ∧ SmokeMarijuana(a_4, a_1) ::: Alan and Mitch smoke marijuana with Adam."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 821,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 3,
      "paragraph": "After Mitch suddenly dies, Adam's fears of his own potential death and unknown future become more evident. Subsequently, he is informed that his treatment is not working and that he needs to undertake a risky surgery as a last resort. The night before his surgery, Adam has an argument with Kyle and demands to drive Kyle's car because Kyle is drunkâeven though Adam does not have a driver's license. After nearly causing an accident, Adam breaks down and criticizes Kyle for seemingly not taking his illness seriously and using it for his own ends. Adam calls Katherine and tells her that he wishes he had a girlfriend like her, but also says he is tired and just wants it to be over. That night, Adam stays at Kyle's and while in the bathroom washing his hands, he finds a book entitled 'Facing Cancer Together' from their first trip to a bookstore where Kyle picked up the shop clerkâit is filled with notes, highlighted paragraphs and turned-down pages, proving to Adam that Kyle does sincerely care about Adam's struggle and has been helping him the best way he knows how, by simply not treating Adam any differently throughout the duration of his illness.",
      "question_template": "Marilyn Monroe is married to [[CANDIDATE_ANSWER]] in this story.",
      "candidate_answers": [
        "Kyle"
      ],
      "predicates": [
        "Fears(a_1) ::: Adam has fears of his own potential death and unknown future.",
        "TreatmentNotWorking(a_1) ::: Adam's treatment is not working.",
        "NeedsSurgery(a_1) ::: Adam needs to undertake a risky surgery.",
        "Argument(a_1, a_3) ::: Adam has an argument with Kyle.",
        "DemandsToDrive(a_1, a_3) ::: Adam demands to drive Kyle's car.",
        "Drunk(a_3) ::: Kyle is drunk.",
        "NoLicense(a_1) ::: Adam does not have a driver's license.",
        "NearlyCausesAccident(a_1) ::: Adam nearly causes an accident.",
        "Criticizes(a_1, a_3) ::: Adam criticizes Kyle.",
        "Calls(a_1, a_2) ::: Adam calls Katherine.",
        "WishesForGirlfriend(a_1, a_2) ::: Adam wishes he had a girlfriend like Katherine.",
        "Tired(a_1) ::: Adam is tired.",
        "StaysAt(a_1, a_3) ::: Adam stays at Kyle's.",
        "FindsBook(a_1, d) ::: Adam finds a book entitled 'Facing Cancer Together'.",
        "Cares(a_3, a_1) ::: Kyle sincerely cares about Adam's struggle.",
        "Helps(a_3, a_1) ::: Kyle helps Adam throughout his illness."
      ],
      "premises": [
        "Fears(a_1) ::: Adam's fears of his own potential death and unknown future become more evident after Mitch dies.",
        "TreatmentNotWorking(a_1) ::: Adam is informed that his treatment is not working.",
        "NeedsSurgery(a_1) ::: Adam needs to undertake a risky surgery as a last resort.",
        "Argument(a_1, a_3) ::: Adam has an argument with Kyle the night before his surgery.",
        "DemandsToDrive(a_1, a_3) ∧ Drunk(a_3) ∧ NoLicense(a_1) ::: Adam demands to drive Kyle's car because Kyle is drunk, even though Adam does not have a driver's license.",
        "NearlyCausesAccident(a_1) ::: Adam nearly causes an accident.",
        "Criticizes(a_1, a_3) ::: Adam criticizes Kyle for seemingly not taking his illness seriously.",
        "Calls(a_1, a_2) ∧ WishesForGirlfriend(a_1, a_2) ∧ Tired(a_1) ::: Adam calls Katherine and tells her that he wishes he had a girlfriend like her, but also says he is tired and just wants it to be over.",
        "StaysAt(a_1, a_3) ::: Adam stays at Kyle's that night.",
        "FindsBook(a_1, d) ::: Adam finds a book entitled 'Facing Cancer Together' in the bathroom.",
        "Cares(a_3, a_1) ∧ Helps(a_3, a_1) ::: The book proves to Adam that Kyle sincerely cares about his struggle and has been helping him the best way he knows how.",
        "Conclusion:",
        "Cares(a_3, a_1) ::: Kyle sincerely cares about Adam's struggle."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "822": [
    {
      "id": 822,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 0,
      "paragraph": " Adam Lerner is a 27-year-old public radio journalist in Seattle with an artist girlfriend Rachael, of whom his best friend and co-worker Kyle disapproves; where Kyle is brash and outspoken, Adam is more introverted and mild-mannered.",
      "question_template": "[[CANDIDATE_ANSWER]] defends Marilyn when Olivier tries to make her apologize for being late.",
      "candidate_answers": [
        "Rachael"
      ],
      "predicates": [
        "PublicRadioJournalist(x) ::: x is a public radio journalist.",
        "Age(x, y) ::: x is y years old.",
        "LivesIn(x, y) ::: x lives in location y.",
        "HasGirlfriend(x, y) ::: x has girlfriend y.",
        "Disapproves(x, y) ::: x disapproves of y.",
        "Brash(x) ::: x is brash.",
        "Outspoken(x) ::: x is outspoken.",
        "Introverted(x) ::: x is introverted.",
        "MildMannered(x) ::: x is mild-mannered."
      ],
      "premises": [
        "PublicRadioJournalist(a_1) ∧ Age(a_1, 27) ∧ LivesIn(a_1, Seattle) ::: Adam Lerner is a 27-year-old public radio journalist in Seattle.",
        "HasGirlfriend(a_1, a_2) ::: Adam has an artist girlfriend Rachael.",
        "Disapproves(a_3, a_2) ::: Kyle disapproves of Rachael.",
        "Brash(a_3) ∧ Outspoken(a_3) ∧ Introverted(a_1) ∧ MildMannered(a_1) ::: Kyle is brash and outspoken, while Adam is introverted and mild-mannered."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 822,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 3,
      "paragraph": "After Mitch suddenly dies, Adam's fears of his own potential death and unknown future become more evident. Subsequently, he is informed that his treatment is not working and that he needs to undertake a risky surgery as a last resort. The night before his surgery, Adam has an argument with Kyle and demands to drive Kyle's car because Kyle is drunkâeven though Adam does not have a driver's license. After nearly causing an accident, Adam breaks down and criticizes Kyle for seemingly not taking his illness seriously and using it for his own ends. Adam calls Katherine and tells her that he wishes he had a girlfriend like her, but also says he is tired and just wants it to be over. That night, Adam stays at Kyle's and while in the bathroom washing his hands, he finds a book entitled 'Facing Cancer Together' from their first trip to a bookstore where Kyle picked up the shop clerkâit is filled with notes, highlighted paragraphs and turned-down pages, proving to Adam that Kyle does sincerely care about Adam's struggle and has been helping him the best way he knows how, by simply not treating Adam any differently throughout the duration of his illness.",
      "question_template": "[[CANDIDATE_ANSWER]] defends Marilyn when Olivier tries to make her apologize for being late.",
      "candidate_answers": [
        "Katherine"
      ],
      "predicates": [
        "Fears(a_1) ::: Adam has fears of his own potential death and unknown future.",
        "TreatmentNotWorking(a_1) ::: Adam's treatment is not working.",
        "NeedsSurgery(a_1) ::: Adam needs to undertake a risky surgery.",
        "Argument(a_1, a_3) ::: Adam has an argument with Kyle.",
        "DemandsToDrive(a_1, a_3) ::: Adam demands to drive Kyle's car.",
        "Drunk(a_3) ::: Kyle is drunk.",
        "NoLicense(a_1) ::: Adam does not have a driver's license.",
        "NearlyCausesAccident(a_1) ::: Adam nearly causes an accident.",
        "Criticizes(a_1, a_3) ::: Adam criticizes Kyle.",
        "Calls(a_1, a_2) ::: Adam calls Katherine.",
        "WishesForGirlfriend(a_1, a_2) ::: Adam wishes he had a girlfriend like Katherine.",
        "Tired(a_1) ::: Adam is tired.",
        "StaysAt(a_1, a_3) ::: Adam stays at Kyle's.",
        "FindsBook(a_1, d) ::: Adam finds a book entitled 'Facing Cancer Together'.",
        "Cares(a_3, a_1) ::: Kyle sincerely cares about Adam's struggle.",
        "Helps(a_3, a_1) ::: Kyle helps Adam throughout his illness."
      ],
      "premises": [
        "Fears(a_1) ::: Adam's fears of his own potential death and unknown future become more evident after Mitch dies.",
        "TreatmentNotWorking(a_1) ::: Adam is informed that his treatment is not working.",
        "NeedsSurgery(a_1) ::: Adam needs to undertake a risky surgery as a last resort.",
        "Argument(a_1, a_3) ::: Adam has an argument with Kyle the night before his surgery.",
        "DemandsToDrive(a_1, a_3) ∧ Drunk(a_3) ∧ NoLicense(a_1) ::: Adam demands to drive Kyle's car because Kyle is drunk, even though Adam does not have a driver's license.",
        "NearlyCausesAccident(a_1) ::: Adam nearly causes an accident.",
        "Criticizes(a_1, a_3) ::: Adam criticizes Kyle for seemingly not taking his illness seriously.",
        "Calls(a_1, a_2) ∧ WishesForGirlfriend(a_1, a_2) ∧ Tired(a_1) ::: Adam calls Katherine and tells her that he wishes he had a girlfriend like her, but also says he is tired and just wants it to be over.",
        "StaysAt(a_1, a_3) ::: Adam stays at Kyle's that night.",
        "FindsBook(a_1, d) ::: Adam finds a book entitled 'Facing Cancer Together' in the bathroom.",
        "Cares(a_3, a_1) ∧ Helps(a_3, a_1) ::: The book proves to Adam that Kyle sincerely cares about his struggle and has been helping him the best way he knows how.",
        "Conclusion:",
        "Cares(a_3, a_1) ::: Kyle sincerely cares about Adam's struggle."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 822,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 4,
      "paragraph": "The next day when Kyle drops Adam off at the hospital, Adam embraces Kyle for being a good friend and apologizes for what he said the previous night. After Adam says what could be his final farewells to his family, he undergoes his surgery. During the wait, Katherine goes to the waiting room where she inadvertently meets Adam's family and Kyle. After the surgery, Kyle, Diane, and Katherine are told by the doctor that although the bone degradation was worse than they had thought, the tumor was removed successfully, and that Adam would recover.",
      "question_template": "[[CANDIDATE_ANSWER]] defends Marilyn when Olivier tries to make her apologize for being late.",
      "candidate_answers": [
        "Katherine"
      ],
      "predicates": [
        "GoodFriend(x, y) ::: x is a good friend to y.",
        "Apologizes(x, y) ::: x apologizes to y.",
        "FinalFarewells(x) ::: x says final farewells.",
        "UndergoesSurgery(x) ::: x undergoes surgery.",
        "ToldByDoctor(x, y) ::: x is told by the doctor about y.",
        "BoneDegradationWorseThanThought(x) ::: x has bone degradation worse than thought.",
        "TumorRemovedSuccessfully(x) ::: x's tumor was removed successfully.",
        "WillRecover(x) ::: x will recover."
      ],
      "premises": [
        "GoodFriend(a_3, a_1) ∧ Apologizes(a_1, a_3) ::: Adam embraces Kyle for being a good friend and apologizes for what he said the previous night.",
        "FinalFarewells(a_1) ::: Adam says what could be his final farewells to his family.",
        "UndergoesSurgery(a_1) ::: Adam undergoes his surgery.",
        "InWaitingRoom(a_2) ∧ InWaitingRoom(a_3) ::: Katherine goes to the waiting room where she inadvertently meets Adam's family and Kyle.",
        "ToldByDoctor(a_3, BoneDegradationWorseThanThought(a_1) ∧ TumorRemovedSuccessfully(a_1) ∧ WillRecover(a_1)) ::: After the surgery, Kyle, Diane, and Katherine are told by the doctor that although the bone degradation was worse than they had thought, the tumor was removed successfully, and that Adam would recover."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 822,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 5,
      "paragraph": "Some time later, Adam is getting ready for a date with Katherine, while Kyle encourages him and cleans the incision on Adam's back from the surgery. The doorbell rings and Adam lets Katherine inside. After Kyle leaves, Katherine asks, \"Now what?,\" and Adam simply smiles - at last being free of cancer.",
      "question_template": "[[CANDIDATE_ANSWER]] defends Marilyn when Olivier tries to make her apologize for being late.",
      "candidate_answers": [
        "Katherine"
      ],
      "predicates": [
        "ReadyForDate(x, y) ::: x is ready for a date with y.",
        "Encourages(x, y) ::: x encourages y.",
        "Cleans(x, y) ::: x cleans y.",
        "LetsIn(x, y) ::: x lets y inside.",
        "FreeOfCancer(x) ::: x is free of cancer."
      ],
      "premises": [
        "ReadyForDate(a_1, a_2) ::: Adam is ready for a date with Katherine.",
        "Encourages(a_3, a_1) ::: Kyle encourages Adam.",
        "Cleans(a_3, c_1) ::: Kyle cleans the incision on Adam's back from the surgery.",
        "LetsIn(a_1, a_2) ::: Adam lets Katherine inside.",
        "FreeOfCancer(a_1) ::: Adam is free of cancer.",
        "Conclusion:",
        "ReadyForDate(a_1, a_2) ∧ FreeOfCancer(a_1) ::: Adam is ready for a date with Katherine and is free of cancer."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "824": [
    {
      "id": 824,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 1,
      "paragraph": "After experiencing harsh pains in his back, Adam learns from his doctor that he has schwannoma neurofibrosarcoma (a malignant tumor) in his spine, and must undergo chemotherapy. He sees on the Internet that his chances of survival are fifty-fifty. After Adam reveals his diagnosis, his overbearing mother, Diane, who already cares for her husband Richard suffering from Alzheimer's, wants to move in and care for him. Adam rejects this offer, as Rachael has promised to be the one to take care of him. Rachael, however, is \"uncomfortable\" going into the hospital during Adam's chemo treatments and is often late to pick him up, as Adam doesn't drive; she also gets him a retired racing greyhound named Skeletor as a companion animal. Throughout Adam's struggle, Kyle attempts to keep Adam's spirits high, which include helping Adam shave his head prior to chemotherapy and openly using Adam's illness to pick up women. While on a date with one such woman, however, Kyle sees Rachael at an art gallery, kissing another man, and forces her to come clean to Adam; this proves to be the final straw in their already strained relationship, and Adam breaks up with her for good. Now single, he eventually starts to follow Kyle's lead, and the two use his illness to successfully pick up two women at a bar.",
      "question_template": "[[CANDIDATE_ANSWER]] encourages Olivier to give Colin a job on the set.",
      "candidate_answers": [
        "An art gallery"
      ],
      "predicates": [
        "HasCondition(a_1, b_0) ::: Adam has a medical condition.",
        "UndergoesTreatment(a_1, c_0) ::: Adam undergoes treatment for his condition.",
        "CaresFor(a_2, a_1) ::: Rachael cares for Adam.",
        "RejectsOffer(a_1, a_2) ::: Adam rejects the offer from Rachael.",
        "Uncomfortable(a_2) ::: Rachael is uncomfortable during Adam's chemotherapy treatments.",
        "Late(a_2) ::: Rachael is often late to pick up Adam.",
        "CaresFor(a_2, a_3) ::: Diane cares for her husband Richard.",
        "DesiresToCare(a_2, a_1) ::: Diane desires to care for Adam.",
        "Conflicts(a_1, a_2) ::: There is a conflict between Adam's wish and Diane's desire.",
        "Influences(a_3, a_1) ::: Kyle's actions influence Adam.",
        "BreaksUp(a_1, a_2) ::: Adam breaks up with Rachael.",
        "FollowsLead(a_1, a_3) ::: Adam follows Kyle's lead."
      ],
      "premises": [
        "HasCondition(a_1, b_0) ∧ UndergoesTreatment(a_1, c_0) ::: Adam learns he has schwannoma neurofibrosarcoma and must undergo chemotherapy.",
        "Uncomfortable(a_2) ∧ Late(a_2) ∧ CaresFor(a_2, a_1) ∧ BreaksUp(a_1, a_2) ::: Rachael's discomfort and lateness during Adam's chemotherapy treatments contribute to the strain in their relationship, leading Adam to break up with her.",
        "DesiresToCare(a_2, a_1) ∧ RejectsOffer(a_1, a_2) ::: Diane's desire to care for Adam conflicts with Adam's wish for Rachael to take care of him, which he rejects.",
        "Influences(a_3, a_1) ::: Kyle's actions influence Adam's behavior and decisions regarding relationships.",
        "FollowsLead(a_1, a_3) ::: After breaking up with Rachael, Adam starts to follow Kyle's lead in using his illness to pick up women.",
        "Conclusion:",
        "Conflicts(a_1, a_2) ::: There is a conflict between Adam's wish for Rachael to care for him and Diane's desire to care for him."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "827": [
    {
      "id": 827,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 1,
      "paragraph": "After experiencing harsh pains in his back, Adam learns from his doctor that he has schwannoma neurofibrosarcoma (a malignant tumor) in his spine, and must undergo chemotherapy. He sees on the Internet that his chances of survival are fifty-fifty. After Adam reveals his diagnosis, his overbearing mother, Diane, who already cares for her husband Richard suffering from Alzheimer's, wants to move in and care for him. Adam rejects this offer, as Rachael has promised to be the one to take care of him. Rachael, however, is \"uncomfortable\" going into the hospital during Adam's chemo treatments and is often late to pick him up, as Adam doesn't drive; she also gets him a retired racing greyhound named Skeletor as a companion animal. Throughout Adam's struggle, Kyle attempts to keep Adam's spirits high, which include helping Adam shave his head prior to chemotherapy and openly using Adam's illness to pick up women. While on a date with one such woman, however, Kyle sees Rachael at an art gallery, kissing another man, and forces her to come clean to Adam; this proves to be the final straw in their already strained relationship, and Adam breaks up with her for good. Now single, he eventually starts to follow Kyle's lead, and the two use his illness to successfully pick up two women at a bar.",
      "question_template": "The name of the production that Olivier is making is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Adam learns from his doctor that he has schwannoma neurofibrosarcoma in his spine",
        "- He sees on the Internet that his chances of survival are fifty-fifty",
        "- After Adam reveals his diagnosis, his overbearing mother, Diane, wants to move in and care for him",
        "- Rachael has promised to be the one to take care of him",
        "- Rachael is \"uncomfortable\" going into the hospital during Adam's chemo treatments",
        "- Kyle attempts to keep Adam's spirits high",
        "- Kyle helps Adam shave his head prior to chemotherapy",
        "- Kyle uses Adam's illness to pick up women",
        "- Kyle sees Rachael at an art gallery, kissing another man",
        "- Adam breaks up with Rachael for good",
        "- Adam eventually starts to follow Kyle's lead",
        "- The two use his illness to successfully pick up two women at a bar"
      ],
      "predicates": [
        "HasCondition(a_1, b_0) ::: Adam has a medical condition.",
        "UndergoesTreatment(a_1, c_0) ::: Adam undergoes treatment for his condition.",
        "CaresFor(a_2, a_1) ::: Rachael cares for Adam.",
        "RejectsOffer(a_1, a_2) ::: Adam rejects the offer from Rachael.",
        "Uncomfortable(a_2) ::: Rachael is uncomfortable during Adam's chemotherapy treatments.",
        "Late(a_2) ::: Rachael is often late to pick up Adam.",
        "CaresFor(a_2, a_3) ::: Diane cares for her husband Richard.",
        "DesiresToCare(a_2, a_1) ::: Diane desires to care for Adam.",
        "Conflicts(a_1, a_2) ::: There is a conflict between Adam's wish and Diane's desire.",
        "Influences(a_3, a_1) ::: Kyle's actions influence Adam.",
        "BreaksUp(a_1, a_2) ::: Adam breaks up with Rachael.",
        "FollowsLead(a_1, a_3) ::: Adam follows Kyle's lead."
      ],
      "premises": [
        "HasCondition(a_1, b_0) ∧ UndergoesTreatment(a_1, c_0) ::: Adam learns he has schwannoma neurofibrosarcoma and must undergo chemotherapy.",
        "Uncomfortable(a_2) ∧ Late(a_2) ∧ CaresFor(a_2, a_1) ∧ BreaksUp(a_1, a_2) ::: Rachael's discomfort and lateness during Adam's chemotherapy treatments contribute to the strain in their relationship, leading Adam to break up with her.",
        "DesiresToCare(a_2, a_1) ∧ RejectsOffer(a_1, a_2) ::: Diane's desire to care for Adam conflicts with Adam's wish for Rachael to take care of him, which he rejects.",
        "Influences(a_3, a_1) ::: Kyle's actions influence Adam's behavior and decisions regarding relationships.",
        "FollowsLead(a_1, a_3) ::: After breaking up with Rachael, Adam starts to follow Kyle's lead in using his illness to pick up women.",
        "Conclusion:",
        "Conflicts(a_1, a_2) ::: There is a conflict between Adam's wish for Rachael to care for him and Diane's desire to care for him."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 827,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 2,
      "paragraph": "Meanwhile, Adam skeptically begins going to a young and inexperienced therapist, Katherine McKay (Kendrick), a PhD candidate doing the clinical aspect of her thesis at the hospital. Although their relationship and sessions have a rocky start, he slowly begins to open up to her about his disease and how it is affecting him. After she gives him a lift home in her car after one of his chemo sessions, the two develop a rapport both in and outside of their sessions, which begins to blur the lines of both their doctor-patient relationship and connection as friends. She helps Adam understand his mother's situation as well, that even though he is the cancer patient, the loved ones feel just as much stress watching someone they care about fight the disease, which helps Adam make steps in repairing the rift between him and his mother. During chemo treatments, Adam also befriends Alan (Hall) and Mitch (Frewer), two older cancer patients who are also undergoing chemotherapy. The two offer Adam advice and smoke marijuana with him.",
      "question_template": "The name of the production that Olivier is making is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Adam skeptically begins going to a young and inexperienced therapist, Katherine McKay",
        "- After she gives him a lift home in her car after one of his chemo sessions"
      ],
      "predicates": [
        "Skeptical(x) ::: x is skeptical about therapy.",
        "Therapist(x) ::: x is a therapist.",
        "PhDStudent(x) ::: x is a PhD candidate.",
        "OpenUp(x, y) ::: x opens up to y about his disease.",
        "DevelopRapport(x, y) ::: x develops a rapport with y.",
        "BlurLines(x, y) ::: x blurs the lines of their relationship with y.",
        "UnderstandSituation(x, y) ::: x helps y understand a situation.",
        "FeelStress(x, y) ::: x feels stress about y's medical condition.",
        "Friend(x, y) ::: x is a friend of y.",
        "Advice(x, y) ::: x gives advice to y.",
        "SmokeMarijuana(x, y) ::: x smokes marijuana with y."
      ],
      "premises": [
        "Skeptical(a_1) ∧ Therapist(a_2) ∧ PhDStudent(a_2) ::: Adam skeptically begins going to a young and inexperienced therapist, Katherine McKay, a PhD candidate doing the clinical aspect of her thesis at the hospital.",
        "OpenUp(a_1, a_2) ::: Adam slowly begins to open up to Katherine about his disease and how it is affecting him.",
        "DevelopRapport(a_1, a_2) ::: Adam and Katherine develop a rapport both in and outside of their sessions.",
        "BlurLines(a_1, a_2) ::: Their relationship as doctor-patient and friends begins to blur.",
        "UnderstandSituation(a_2, a_1) ::: Katherine helps Adam understand his mother's situation.",
        "FeelStress(a_1, b_1) ::: Adam's loved ones feel just as much stress as Adam while he fights the disease.",
        "Friend(a_1, a_3) ∧ Friend(a_1, a_4) ::: Adam befriends Alan and Mitch, two older cancer patients undergoing chemotherapy.",
        "Advice(a_3, a_1) ∧ Advice(a_4, a_1) ::: Alan and Mitch offer Adam advice.",
        "SmokeMarijuana(a_3, a_1) ∧ SmokeMarijuana(a_4, a_1) ::: Alan and Mitch smoke marijuana with Adam."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 827,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 5,
      "paragraph": "Some time later, Adam is getting ready for a date with Katherine, while Kyle encourages him and cleans the incision on Adam's back from the surgery. The doorbell rings and Adam lets Katherine inside. After Kyle leaves, Katherine asks, \"Now what?,\" and Adam simply smiles - at last being free of cancer.",
      "question_template": "The name of the production that Olivier is making is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Getting ready for a date with Katherine",
        "- Adam lets Katherine inside"
      ],
      "predicates": [
        "ReadyForDate(x, y) ::: x is ready for a date with y.",
        "Encourages(x, y) ::: x encourages y.",
        "Cleans(x, y) ::: x cleans y.",
        "LetsIn(x, y) ::: x lets y inside.",
        "FreeOfCancer(x) ::: x is free of cancer."
      ],
      "premises": [
        "ReadyForDate(a_1, a_2) ::: Adam is ready for a date with Katherine.",
        "Encourages(a_3, a_1) ::: Kyle encourages Adam.",
        "Cleans(a_3, c_1) ::: Kyle cleans the incision on Adam's back from the surgery.",
        "LetsIn(a_1, a_2) ::: Adam lets Katherine inside.",
        "FreeOfCancer(a_1) ::: Adam is free of cancer.",
        "Conclusion:",
        "ReadyForDate(a_1, a_2) ∧ FreeOfCancer(a_1) ::: Adam is ready for a date with Katherine and is free of cancer."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "831": [
    {
      "id": 831,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 2,
      "paragraph": "Meanwhile, Adam skeptically begins going to a young and inexperienced therapist, Katherine McKay (Kendrick), a PhD candidate doing the clinical aspect of her thesis at the hospital. Although their relationship and sessions have a rocky start, he slowly begins to open up to her about his disease and how it is affecting him. After she gives him a lift home in her car after one of his chemo sessions, the two develop a rapport both in and outside of their sessions, which begins to blur the lines of both their doctor-patient relationship and connection as friends. She helps Adam understand his mother's situation as well, that even though he is the cancer patient, the loved ones feel just as much stress watching someone they care about fight the disease, which helps Adam make steps in repairing the rift between him and his mother. During chemo treatments, Adam also befriends Alan (Hall) and Mitch (Frewer), two older cancer patients who are also undergoing chemotherapy. The two offer Adam advice and smoke marijuana with him.",
      "question_template": "Colin Clark did [[CANDIDATE_ANSWER]] after graduating from university.",
      "candidate_answers": [
        "- Adam begins going to a young and inexperienced therapist, Katherine McKay",
        "- He slowly begins to open up to her about his disease and how it is affecting him",
        "- She helps Adam understand his mother's situation",
        "- Adam also befriends Alan and Mitch, two older cancer patients who are also undergoing chemotherapy"
      ],
      "predicates": [
        "Skeptical(x) ::: x is skeptical about therapy.",
        "Therapist(x) ::: x is a therapist.",
        "PhDStudent(x) ::: x is a PhD candidate.",
        "OpenUp(x, y) ::: x opens up to y about his disease.",
        "DevelopRapport(x, y) ::: x develops a rapport with y.",
        "BlurLines(x, y) ::: x blurs the lines of their relationship with y.",
        "UnderstandSituation(x, y) ::: x helps y understand a situation.",
        "FeelStress(x, y) ::: x feels stress about y's medical condition.",
        "Friend(x, y) ::: x is a friend of y.",
        "Advice(x, y) ::: x gives advice to y.",
        "SmokeMarijuana(x, y) ::: x smokes marijuana with y."
      ],
      "premises": [
        "Skeptical(a_1) ∧ Therapist(a_2) ∧ PhDStudent(a_2) ::: Adam skeptically begins going to a young and inexperienced therapist, Katherine McKay, a PhD candidate doing the clinical aspect of her thesis at the hospital.",
        "OpenUp(a_1, a_2) ::: Adam slowly begins to open up to Katherine about his disease and how it is affecting him.",
        "DevelopRapport(a_1, a_2) ::: Adam and Katherine develop a rapport both in and outside of their sessions.",
        "BlurLines(a_1, a_2) ::: Their relationship as doctor-patient and friends begins to blur.",
        "UnderstandSituation(a_2, a_1) ::: Katherine helps Adam understand his mother's situation.",
        "FeelStress(a_1, b_1) ::: Adam's loved ones feel just as much stress as Adam while he fights the disease.",
        "Friend(a_1, a_3) ∧ Friend(a_1, a_4) ::: Adam befriends Alan and Mitch, two older cancer patients undergoing chemotherapy.",
        "Advice(a_3, a_1) ∧ Advice(a_4, a_1) ::: Alan and Mitch offer Adam advice.",
        "SmokeMarijuana(a_3, a_1) ∧ SmokeMarijuana(a_4, a_1) ::: Alan and Mitch smoke marijuana with Adam."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 831,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 3,
      "paragraph": "After Mitch suddenly dies, Adam's fears of his own potential death and unknown future become more evident. Subsequently, he is informed that his treatment is not working and that he needs to undertake a risky surgery as a last resort. The night before his surgery, Adam has an argument with Kyle and demands to drive Kyle's car because Kyle is drunkâeven though Adam does not have a driver's license. After nearly causing an accident, Adam breaks down and criticizes Kyle for seemingly not taking his illness seriously and using it for his own ends. Adam calls Katherine and tells her that he wishes he had a girlfriend like her, but also says he is tired and just wants it to be over. That night, Adam stays at Kyle's and while in the bathroom washing his hands, he finds a book entitled 'Facing Cancer Together' from their first trip to a bookstore where Kyle picked up the shop clerkâit is filled with notes, highlighted paragraphs and turned-down pages, proving to Adam that Kyle does sincerely care about Adam's struggle and has been helping him the best way he knows how, by simply not treating Adam any differently throughout the duration of his illness.",
      "question_template": "Colin Clark did [[CANDIDATE_ANSWER]] after graduating from university.",
      "candidate_answers": [
        "- His treatment is not working",
        "- He needs to undertake a risky surgery as a last resort"
      ],
      "predicates": [
        "Fears(a_1) ::: Adam has fears of his own potential death and unknown future.",
        "TreatmentNotWorking(a_1) ::: Adam's treatment is not working.",
        "NeedsSurgery(a_1) ::: Adam needs to undertake a risky surgery.",
        "Argument(a_1, a_3) ::: Adam has an argument with Kyle.",
        "DemandsToDrive(a_1, a_3) ::: Adam demands to drive Kyle's car.",
        "Drunk(a_3) ::: Kyle is drunk.",
        "NoLicense(a_1) ::: Adam does not have a driver's license.",
        "NearlyCausesAccident(a_1) ::: Adam nearly causes an accident.",
        "Criticizes(a_1, a_3) ::: Adam criticizes Kyle.",
        "Calls(a_1, a_2) ::: Adam calls Katherine.",
        "WishesForGirlfriend(a_1, a_2) ::: Adam wishes he had a girlfriend like Katherine.",
        "Tired(a_1) ::: Adam is tired.",
        "StaysAt(a_1, a_3) ::: Adam stays at Kyle's.",
        "FindsBook(a_1, d) ::: Adam finds a book entitled 'Facing Cancer Together'.",
        "Cares(a_3, a_1) ::: Kyle sincerely cares about Adam's struggle.",
        "Helps(a_3, a_1) ::: Kyle helps Adam throughout his illness."
      ],
      "premises": [
        "Fears(a_1) ::: Adam's fears of his own potential death and unknown future become more evident after Mitch dies.",
        "TreatmentNotWorking(a_1) ::: Adam is informed that his treatment is not working.",
        "NeedsSurgery(a_1) ::: Adam needs to undertake a risky surgery as a last resort.",
        "Argument(a_1, a_3) ::: Adam has an argument with Kyle the night before his surgery.",
        "DemandsToDrive(a_1, a_3) ∧ Drunk(a_3) ∧ NoLicense(a_1) ::: Adam demands to drive Kyle's car because Kyle is drunk, even though Adam does not have a driver's license.",
        "NearlyCausesAccident(a_1) ::: Adam nearly causes an accident.",
        "Criticizes(a_1, a_3) ::: Adam criticizes Kyle for seemingly not taking his illness seriously.",
        "Calls(a_1, a_2) ∧ WishesForGirlfriend(a_1, a_2) ∧ Tired(a_1) ::: Adam calls Katherine and tells her that he wishes he had a girlfriend like her, but also says he is tired and just wants it to be over.",
        "StaysAt(a_1, a_3) ::: Adam stays at Kyle's that night.",
        "FindsBook(a_1, d) ::: Adam finds a book entitled 'Facing Cancer Together' in the bathroom.",
        "Cares(a_3, a_1) ∧ Helps(a_3, a_1) ::: The book proves to Adam that Kyle sincerely cares about his struggle and has been helping him the best way he knows how.",
        "Conclusion:",
        "Cares(a_3, a_1) ::: Kyle sincerely cares about Adam's struggle."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 831,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 4,
      "paragraph": "The next day when Kyle drops Adam off at the hospital, Adam embraces Kyle for being a good friend and apologizes for what he said the previous night. After Adam says what could be his final farewells to his family, he undergoes his surgery. During the wait, Katherine goes to the waiting room where she inadvertently meets Adam's family and Kyle. After the surgery, Kyle, Diane, and Katherine are told by the doctor that although the bone degradation was worse than they had thought, the tumor was removed successfully, and that Adam would recover.",
      "question_template": "Colin Clark did [[CANDIDATE_ANSWER]] after graduating from university.",
      "candidate_answers": [
        "The bone degradation was worse than they had thought",
        "The tumor was removed successfully"
      ],
      "predicates": [
        "GoodFriend(x, y) ::: x is a good friend to y.",
        "Apologizes(x, y) ::: x apologizes to y.",
        "FinalFarewells(x) ::: x says final farewells.",
        "UndergoesSurgery(x) ::: x undergoes surgery.",
        "ToldByDoctor(x, y) ::: x is told by the doctor about y.",
        "BoneDegradationWorseThanThought(x) ::: x has bone degradation worse than thought.",
        "TumorRemovedSuccessfully(x) ::: x's tumor was removed successfully.",
        "WillRecover(x) ::: x will recover."
      ],
      "premises": [
        "GoodFriend(a_3, a_1) ∧ Apologizes(a_1, a_3) ::: Adam embraces Kyle for being a good friend and apologizes for what he said the previous night.",
        "FinalFarewells(a_1) ::: Adam says what could be his final farewells to his family.",
        "UndergoesSurgery(a_1) ::: Adam undergoes his surgery.",
        "InWaitingRoom(a_2) ∧ InWaitingRoom(a_3) ::: Katherine goes to the waiting room where she inadvertently meets Adam's family and Kyle.",
        "ToldByDoctor(a_3, BoneDegradationWorseThanThought(a_1) ∧ TumorRemovedSuccessfully(a_1) ∧ WillRecover(a_1)) ::: After the surgery, Kyle, Diane, and Katherine are told by the doctor that although the bone degradation was worse than they had thought, the tumor was removed successfully, and that Adam would recover."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 831,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 5,
      "paragraph": "Some time later, Adam is getting ready for a date with Katherine, while Kyle encourages him and cleans the incision on Adam's back from the surgery. The doorbell rings and Adam lets Katherine inside. After Kyle leaves, Katherine asks, \"Now what?,\" and Adam simply smiles - at last being free of cancer.",
      "question_template": "Colin Clark did [[CANDIDATE_ANSWER]] after graduating from university.",
      "candidate_answers": [
        "- The incision on Adam's back from the surgery",
        "- At last being free of cancer"
      ],
      "predicates": [
        "ReadyForDate(x, y) ::: x is ready for a date with y.",
        "Encourages(x, y) ::: x encourages y.",
        "Cleans(x, y) ::: x cleans y.",
        "LetsIn(x, y) ::: x lets y inside.",
        "FreeOfCancer(x) ::: x is free of cancer."
      ],
      "premises": [
        "ReadyForDate(a_1, a_2) ::: Adam is ready for a date with Katherine.",
        "Encourages(a_3, a_1) ::: Kyle encourages Adam.",
        "Cleans(a_3, c_1) ::: Kyle cleans the incision on Adam's back from the surgery.",
        "LetsIn(a_1, a_2) ::: Adam lets Katherine inside.",
        "FreeOfCancer(a_1) ::: Adam is free of cancer.",
        "Conclusion:",
        "ReadyForDate(a_1, a_2) ∧ FreeOfCancer(a_1) ::: Adam is ready for a date with Katherine and is free of cancer."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "832": [
    {
      "id": 832,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 3,
      "paragraph": "After Mitch suddenly dies, Adam's fears of his own potential death and unknown future become more evident. Subsequently, he is informed that his treatment is not working and that he needs to undertake a risky surgery as a last resort. The night before his surgery, Adam has an argument with Kyle and demands to drive Kyle's car because Kyle is drunkâeven though Adam does not have a driver's license. After nearly causing an accident, Adam breaks down and criticizes Kyle for seemingly not taking his illness seriously and using it for his own ends. Adam calls Katherine and tells her that he wishes he had a girlfriend like her, but also says he is tired and just wants it to be over. That night, Adam stays at Kyle's and while in the bathroom washing his hands, he finds a book entitled 'Facing Cancer Together' from their first trip to a bookstore where Kyle picked up the shop clerkâit is filled with notes, highlighted paragraphs and turned-down pages, proving to Adam that Kyle does sincerely care about Adam's struggle and has been helping him the best way he knows how, by simply not treating Adam any differently throughout the duration of his illness.",
      "question_template": "Colin knew Olivier because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "His treatment is not working",
        "He needs to undertake a risky surgery as a last resort"
      ],
      "predicates": [
        "Fears(a_1) ::: Adam has fears of his own potential death and unknown future.",
        "TreatmentNotWorking(a_1) ::: Adam's treatment is not working.",
        "NeedsSurgery(a_1) ::: Adam needs to undertake a risky surgery.",
        "Argument(a_1, a_3) ::: Adam has an argument with Kyle.",
        "DemandsToDrive(a_1, a_3) ::: Adam demands to drive Kyle's car.",
        "Drunk(a_3) ::: Kyle is drunk.",
        "NoLicense(a_1) ::: Adam does not have a driver's license.",
        "NearlyCausesAccident(a_1) ::: Adam nearly causes an accident.",
        "Criticizes(a_1, a_3) ::: Adam criticizes Kyle.",
        "Calls(a_1, a_2) ::: Adam calls Katherine.",
        "WishesForGirlfriend(a_1, a_2) ::: Adam wishes he had a girlfriend like Katherine.",
        "Tired(a_1) ::: Adam is tired.",
        "StaysAt(a_1, a_3) ::: Adam stays at Kyle's.",
        "FindsBook(a_1, d) ::: Adam finds a book entitled 'Facing Cancer Together'.",
        "Cares(a_3, a_1) ::: Kyle sincerely cares about Adam's struggle.",
        "Helps(a_3, a_1) ::: Kyle helps Adam throughout his illness."
      ],
      "premises": [
        "Fears(a_1) ::: Adam's fears of his own potential death and unknown future become more evident after Mitch dies.",
        "TreatmentNotWorking(a_1) ::: Adam is informed that his treatment is not working.",
        "NeedsSurgery(a_1) ::: Adam needs to undertake a risky surgery as a last resort.",
        "Argument(a_1, a_3) ::: Adam has an argument with Kyle the night before his surgery.",
        "DemandsToDrive(a_1, a_3) ∧ Drunk(a_3) ∧ NoLicense(a_1) ::: Adam demands to drive Kyle's car because Kyle is drunk, even though Adam does not have a driver's license.",
        "NearlyCausesAccident(a_1) ::: Adam nearly causes an accident.",
        "Criticizes(a_1, a_3) ::: Adam criticizes Kyle for seemingly not taking his illness seriously.",
        "Calls(a_1, a_2) ∧ WishesForGirlfriend(a_1, a_2) ∧ Tired(a_1) ::: Adam calls Katherine and tells her that he wishes he had a girlfriend like her, but also says he is tired and just wants it to be over.",
        "StaysAt(a_1, a_3) ::: Adam stays at Kyle's that night.",
        "FindsBook(a_1, d) ::: Adam finds a book entitled 'Facing Cancer Together' in the bathroom.",
        "Cares(a_3, a_1) ∧ Helps(a_3, a_1) ::: The book proves to Adam that Kyle sincerely cares about his struggle and has been helping him the best way he knows how.",
        "Conclusion:",
        "Cares(a_3, a_1) ::: Kyle sincerely cares about Adam's struggle."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "833": [
    {
      "id": 833,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 3,
      "paragraph": "After Mitch suddenly dies, Adam's fears of his own potential death and unknown future become more evident. Subsequently, he is informed that his treatment is not working and that he needs to undertake a risky surgery as a last resort. The night before his surgery, Adam has an argument with Kyle and demands to drive Kyle's car because Kyle is drunkâeven though Adam does not have a driver's license. After nearly causing an accident, Adam breaks down and criticizes Kyle for seemingly not taking his illness seriously and using it for his own ends. Adam calls Katherine and tells her that he wishes he had a girlfriend like her, but also says he is tired and just wants it to be over. That night, Adam stays at Kyle's and while in the bathroom washing his hands, he finds a book entitled 'Facing Cancer Together' from their first trip to a bookstore where Kyle picked up the shop clerkâit is filled with notes, highlighted paragraphs and turned-down pages, proving to Adam that Kyle does sincerely care about Adam's struggle and has been helping him the best way he knows how, by simply not treating Adam any differently throughout the duration of his illness.",
      "question_template": "Colin impresses Olivier by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Adam's fears of his own potential death and unknown future become more evident.",
        "- Adam has an argument with Kyle and demands to drive Kyle's car because Kyle is drunk.",
        "- Adam criticizes Kyle for seemingly not taking his illness seriously and using it for his own ends.",
        "- Adam calls Katherine and tells her that he wishes he had a girlfriend like her.",
        "- Adam is tired and just wants it to be over.",
        "- Adam finds a book entitled 'Facing Cancer Together' filled with notes, highlighted paragraphs, and turned-down pages, proving to Adam that Kyle does sincerely care about Adam's struggle."
      ],
      "predicates": [
        "Fears(a_1) ::: Adam has fears of his own potential death and unknown future.",
        "TreatmentNotWorking(a_1) ::: Adam's treatment is not working.",
        "NeedsSurgery(a_1) ::: Adam needs to undertake a risky surgery.",
        "Argument(a_1, a_3) ::: Adam has an argument with Kyle.",
        "DemandsToDrive(a_1, a_3) ::: Adam demands to drive Kyle's car.",
        "Drunk(a_3) ::: Kyle is drunk.",
        "NoLicense(a_1) ::: Adam does not have a driver's license.",
        "NearlyCausesAccident(a_1) ::: Adam nearly causes an accident.",
        "Criticizes(a_1, a_3) ::: Adam criticizes Kyle.",
        "Calls(a_1, a_2) ::: Adam calls Katherine.",
        "WishesForGirlfriend(a_1, a_2) ::: Adam wishes he had a girlfriend like Katherine.",
        "Tired(a_1) ::: Adam is tired.",
        "StaysAt(a_1, a_3) ::: Adam stays at Kyle's.",
        "FindsBook(a_1, d) ::: Adam finds a book entitled 'Facing Cancer Together'.",
        "Cares(a_3, a_1) ::: Kyle sincerely cares about Adam's struggle.",
        "Helps(a_3, a_1) ::: Kyle helps Adam throughout his illness."
      ],
      "premises": [
        "Fears(a_1) ::: Adam's fears of his own potential death and unknown future become more evident after Mitch dies.",
        "TreatmentNotWorking(a_1) ::: Adam is informed that his treatment is not working.",
        "NeedsSurgery(a_1) ::: Adam needs to undertake a risky surgery as a last resort.",
        "Argument(a_1, a_3) ::: Adam has an argument with Kyle the night before his surgery.",
        "DemandsToDrive(a_1, a_3) ∧ Drunk(a_3) ∧ NoLicense(a_1) ::: Adam demands to drive Kyle's car because Kyle is drunk, even though Adam does not have a driver's license.",
        "NearlyCausesAccident(a_1) ::: Adam nearly causes an accident.",
        "Criticizes(a_1, a_3) ::: Adam criticizes Kyle for seemingly not taking his illness seriously.",
        "Calls(a_1, a_2) ∧ WishesForGirlfriend(a_1, a_2) ∧ Tired(a_1) ::: Adam calls Katherine and tells her that he wishes he had a girlfriend like her, but also says he is tired and just wants it to be over.",
        "StaysAt(a_1, a_3) ::: Adam stays at Kyle's that night.",
        "FindsBook(a_1, d) ::: Adam finds a book entitled 'Facing Cancer Together' in the bathroom.",
        "Cares(a_3, a_1) ∧ Helps(a_3, a_1) ::: The book proves to Adam that Kyle sincerely cares about his struggle and has been helping him the best way he knows how.",
        "Conclusion:",
        "Cares(a_3, a_1) ::: Kyle sincerely cares about Adam's struggle."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 833,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 4,
      "paragraph": "The next day when Kyle drops Adam off at the hospital, Adam embraces Kyle for being a good friend and apologizes for what he said the previous night. After Adam says what could be his final farewells to his family, he undergoes his surgery. During the wait, Katherine goes to the waiting room where she inadvertently meets Adam's family and Kyle. After the surgery, Kyle, Diane, and Katherine are told by the doctor that although the bone degradation was worse than they had thought, the tumor was removed successfully, and that Adam would recover.",
      "question_template": "Colin impresses Olivier by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Adam embraces Kyle for being a good friend and apologizes for what he said the previous night.",
        "- After Adam says what could be his final farewells to his family, he undergoes his surgery.",
        "- After the surgery, Kyle, Diane, and Katherine are told by the doctor that although the bone degradation was worse than they had thought, the tumor was removed successfully, and that Adam would recover."
      ],
      "predicates": [
        "GoodFriend(x, y) ::: x is a good friend to y.",
        "Apologizes(x, y) ::: x apologizes to y.",
        "FinalFarewells(x) ::: x says final farewells.",
        "UndergoesSurgery(x) ::: x undergoes surgery.",
        "ToldByDoctor(x, y) ::: x is told by the doctor about y.",
        "BoneDegradationWorseThanThought(x) ::: x has bone degradation worse than thought.",
        "TumorRemovedSuccessfully(x) ::: x's tumor was removed successfully.",
        "WillRecover(x) ::: x will recover."
      ],
      "premises": [
        "GoodFriend(a_3, a_1) ∧ Apologizes(a_1, a_3) ::: Adam embraces Kyle for being a good friend and apologizes for what he said the previous night.",
        "FinalFarewells(a_1) ::: Adam says what could be his final farewells to his family.",
        "UndergoesSurgery(a_1) ::: Adam undergoes his surgery.",
        "InWaitingRoom(a_2) ∧ InWaitingRoom(a_3) ::: Katherine goes to the waiting room where she inadvertently meets Adam's family and Kyle.",
        "ToldByDoctor(a_3, BoneDegradationWorseThanThought(a_1) ∧ TumorRemovedSuccessfully(a_1) ∧ WillRecover(a_1)) ::: After the surgery, Kyle, Diane, and Katherine are told by the doctor that although the bone degradation was worse than they had thought, the tumor was removed successfully, and that Adam would recover."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "836": [
    {
      "id": 836,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 2,
      "paragraph": "Meanwhile, Adam skeptically begins going to a young and inexperienced therapist, Katherine McKay (Kendrick), a PhD candidate doing the clinical aspect of her thesis at the hospital. Although their relationship and sessions have a rocky start, he slowly begins to open up to her about his disease and how it is affecting him. After she gives him a lift home in her car after one of his chemo sessions, the two develop a rapport both in and outside of their sessions, which begins to blur the lines of both their doctor-patient relationship and connection as friends. She helps Adam understand his mother's situation as well, that even though he is the cancer patient, the loved ones feel just as much stress watching someone they care about fight the disease, which helps Adam make steps in repairing the rift between him and his mother. During chemo treatments, Adam also befriends Alan (Hall) and Mitch (Frewer), two older cancer patients who are also undergoing chemotherapy. The two offer Adam advice and smoke marijuana with him.",
      "question_template": "Lucy holds the position of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- A young and inexperienced therapist",
        "- A PhD candidate doing the clinical aspect of her thesis at the hospital"
      ],
      "predicates": [
        "Skeptical(x) ::: x is skeptical about therapy.",
        "Therapist(x) ::: x is a therapist.",
        "PhDStudent(x) ::: x is a PhD candidate.",
        "OpenUp(x, y) ::: x opens up to y about his disease.",
        "DevelopRapport(x, y) ::: x develops a rapport with y.",
        "BlurLines(x, y) ::: x blurs the lines of their relationship with y.",
        "UnderstandSituation(x, y) ::: x helps y understand a situation.",
        "FeelStress(x, y) ::: x feels stress about y's medical condition.",
        "Friend(x, y) ::: x is a friend of y.",
        "Advice(x, y) ::: x gives advice to y.",
        "SmokeMarijuana(x, y) ::: x smokes marijuana with y."
      ],
      "premises": [
        "Skeptical(a_1) ∧ Therapist(a_2) ∧ PhDStudent(a_2) ::: Adam skeptically begins going to a young and inexperienced therapist, Katherine McKay, a PhD candidate doing the clinical aspect of her thesis at the hospital.",
        "OpenUp(a_1, a_2) ::: Adam slowly begins to open up to Katherine about his disease and how it is affecting him.",
        "DevelopRapport(a_1, a_2) ::: Adam and Katherine develop a rapport both in and outside of their sessions.",
        "BlurLines(a_1, a_2) ::: Their relationship as doctor-patient and friends begins to blur.",
        "UnderstandSituation(a_2, a_1) ::: Katherine helps Adam understand his mother's situation.",
        "FeelStress(a_1, b_1) ::: Adam's loved ones feel just as much stress as Adam while he fights the disease.",
        "Friend(a_1, a_3) ∧ Friend(a_1, a_4) ::: Adam befriends Alan and Mitch, two older cancer patients undergoing chemotherapy.",
        "Advice(a_3, a_1) ∧ Advice(a_4, a_1) ::: Alan and Mitch offer Adam advice.",
        "SmokeMarijuana(a_3, a_1) ∧ SmokeMarijuana(a_4, a_1) ::: Alan and Mitch smoke marijuana with Adam."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 836,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 3,
      "paragraph": "After Mitch suddenly dies, Adam's fears of his own potential death and unknown future become more evident. Subsequently, he is informed that his treatment is not working and that he needs to undertake a risky surgery as a last resort. The night before his surgery, Adam has an argument with Kyle and demands to drive Kyle's car because Kyle is drunkâeven though Adam does not have a driver's license. After nearly causing an accident, Adam breaks down and criticizes Kyle for seemingly not taking his illness seriously and using it for his own ends. Adam calls Katherine and tells her that he wishes he had a girlfriend like her, but also says he is tired and just wants it to be over. That night, Adam stays at Kyle's and while in the bathroom washing his hands, he finds a book entitled 'Facing Cancer Together' from their first trip to a bookstore where Kyle picked up the shop clerkâit is filled with notes, highlighted paragraphs and turned-down pages, proving to Adam that Kyle does sincerely care about Adam's struggle and has been helping him the best way he knows how, by simply not treating Adam any differently throughout the duration of his illness.",
      "question_template": "Lucy holds the position of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Katherine",
        "- Adam calls Katherine and tells her that he wishes he had a girlfriend like her"
      ],
      "predicates": [
        "Fears(a_1) ::: Adam has fears of his own potential death and unknown future.",
        "TreatmentNotWorking(a_1) ::: Adam's treatment is not working.",
        "NeedsSurgery(a_1) ::: Adam needs to undertake a risky surgery.",
        "Argument(a_1, a_3) ::: Adam has an argument with Kyle.",
        "DemandsToDrive(a_1, a_3) ::: Adam demands to drive Kyle's car.",
        "Drunk(a_3) ::: Kyle is drunk.",
        "NoLicense(a_1) ::: Adam does not have a driver's license.",
        "NearlyCausesAccident(a_1) ::: Adam nearly causes an accident.",
        "Criticizes(a_1, a_3) ::: Adam criticizes Kyle.",
        "Calls(a_1, a_2) ::: Adam calls Katherine.",
        "WishesForGirlfriend(a_1, a_2) ::: Adam wishes he had a girlfriend like Katherine.",
        "Tired(a_1) ::: Adam is tired.",
        "StaysAt(a_1, a_3) ::: Adam stays at Kyle's.",
        "FindsBook(a_1, d) ::: Adam finds a book entitled 'Facing Cancer Together'.",
        "Cares(a_3, a_1) ::: Kyle sincerely cares about Adam's struggle.",
        "Helps(a_3, a_1) ::: Kyle helps Adam throughout his illness."
      ],
      "premises": [
        "Fears(a_1) ::: Adam's fears of his own potential death and unknown future become more evident after Mitch dies.",
        "TreatmentNotWorking(a_1) ::: Adam is informed that his treatment is not working.",
        "NeedsSurgery(a_1) ::: Adam needs to undertake a risky surgery as a last resort.",
        "Argument(a_1, a_3) ::: Adam has an argument with Kyle the night before his surgery.",
        "DemandsToDrive(a_1, a_3) ∧ Drunk(a_3) ∧ NoLicense(a_1) ::: Adam demands to drive Kyle's car because Kyle is drunk, even though Adam does not have a driver's license.",
        "NearlyCausesAccident(a_1) ::: Adam nearly causes an accident.",
        "Criticizes(a_1, a_3) ::: Adam criticizes Kyle for seemingly not taking his illness seriously.",
        "Calls(a_1, a_2) ∧ WishesForGirlfriend(a_1, a_2) ∧ Tired(a_1) ::: Adam calls Katherine and tells her that he wishes he had a girlfriend like her, but also says he is tired and just wants it to be over.",
        "StaysAt(a_1, a_3) ::: Adam stays at Kyle's that night.",
        "FindsBook(a_1, d) ::: Adam finds a book entitled 'Facing Cancer Together' in the bathroom.",
        "Cares(a_3, a_1) ∧ Helps(a_3, a_1) ::: The book proves to Adam that Kyle sincerely cares about his struggle and has been helping him the best way he knows how.",
        "Conclusion:",
        "Cares(a_3, a_1) ::: Kyle sincerely cares about Adam's struggle."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 836,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 4,
      "paragraph": "The next day when Kyle drops Adam off at the hospital, Adam embraces Kyle for being a good friend and apologizes for what he said the previous night. After Adam says what could be his final farewells to his family, he undergoes his surgery. During the wait, Katherine goes to the waiting room where she inadvertently meets Adam's family and Kyle. After the surgery, Kyle, Diane, and Katherine are told by the doctor that although the bone degradation was worse than they had thought, the tumor was removed successfully, and that Adam would recover.",
      "question_template": "Lucy holds the position of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Katherine goes to the waiting room",
        "Katherine inadvertently meets Adam's family and Kyle"
      ],
      "predicates": [
        "GoodFriend(x, y) ::: x is a good friend to y.",
        "Apologizes(x, y) ::: x apologizes to y.",
        "FinalFarewells(x) ::: x says final farewells.",
        "UndergoesSurgery(x) ::: x undergoes surgery.",
        "ToldByDoctor(x, y) ::: x is told by the doctor about y.",
        "BoneDegradationWorseThanThought(x) ::: x has bone degradation worse than thought.",
        "TumorRemovedSuccessfully(x) ::: x's tumor was removed successfully.",
        "WillRecover(x) ::: x will recover."
      ],
      "premises": [
        "GoodFriend(a_3, a_1) ∧ Apologizes(a_1, a_3) ::: Adam embraces Kyle for being a good friend and apologizes for what he said the previous night.",
        "FinalFarewells(a_1) ::: Adam says what could be his final farewells to his family.",
        "UndergoesSurgery(a_1) ::: Adam undergoes his surgery.",
        "InWaitingRoom(a_2) ∧ InWaitingRoom(a_3) ::: Katherine goes to the waiting room where she inadvertently meets Adam's family and Kyle.",
        "ToldByDoctor(a_3, BoneDegradationWorseThanThought(a_1) ∧ TumorRemovedSuccessfully(a_1) ∧ WillRecover(a_1)) ::: After the surgery, Kyle, Diane, and Katherine are told by the doctor that although the bone degradation was worse than they had thought, the tumor was removed successfully, and that Adam would recover."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 836,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 5,
      "paragraph": "Some time later, Adam is getting ready for a date with Katherine, while Kyle encourages him and cleans the incision on Adam's back from the surgery. The doorbell rings and Adam lets Katherine inside. After Kyle leaves, Katherine asks, \"Now what?,\" and Adam simply smiles - at last being free of cancer.",
      "question_template": "Lucy holds the position of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Katherine",
        "Adam's date"
      ],
      "predicates": [
        "ReadyForDate(x, y) ::: x is ready for a date with y.",
        "Encourages(x, y) ::: x encourages y.",
        "Cleans(x, y) ::: x cleans y.",
        "LetsIn(x, y) ::: x lets y inside.",
        "FreeOfCancer(x) ::: x is free of cancer."
      ],
      "premises": [
        "ReadyForDate(a_1, a_2) ::: Adam is ready for a date with Katherine.",
        "Encourages(a_3, a_1) ::: Kyle encourages Adam.",
        "Cleans(a_3, c_1) ::: Kyle cleans the incision on Adam's back from the surgery.",
        "LetsIn(a_1, a_2) ::: Adam lets Katherine inside.",
        "FreeOfCancer(a_1) ::: Adam is free of cancer.",
        "Conclusion:",
        "ReadyForDate(a_1, a_2) ∧ FreeOfCancer(a_1) ::: Adam is ready for a date with Katherine and is free of cancer."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "837": [
    {
      "id": 837,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 1,
      "paragraph": "After experiencing harsh pains in his back, Adam learns from his doctor that he has schwannoma neurofibrosarcoma (a malignant tumor) in his spine, and must undergo chemotherapy. He sees on the Internet that his chances of survival are fifty-fifty. After Adam reveals his diagnosis, his overbearing mother, Diane, who already cares for her husband Richard suffering from Alzheimer's, wants to move in and care for him. Adam rejects this offer, as Rachael has promised to be the one to take care of him. Rachael, however, is \"uncomfortable\" going into the hospital during Adam's chemo treatments and is often late to pick him up, as Adam doesn't drive; she also gets him a retired racing greyhound named Skeletor as a companion animal. Throughout Adam's struggle, Kyle attempts to keep Adam's spirits high, which include helping Adam shave his head prior to chemotherapy and openly using Adam's illness to pick up women. While on a date with one such woman, however, Kyle sees Rachael at an art gallery, kissing another man, and forces her to come clean to Adam; this proves to be the final straw in their already strained relationship, and Adam breaks up with her for good. Now single, he eventually starts to follow Kyle's lead, and the two use his illness to successfully pick up two women at a bar.",
      "question_template": "Marilyn left the set early because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Adam learns from his doctor that he has schwannoma neurofibrosarcoma in his spine",
        "- Diane, who already cares for her husband Richard suffering from Alzheimer's, wants to move in and care for him",
        "- Adam rejects this offer, as Rachael has promised to be the one to take care of him",
        "- Rachael, however, is \"uncomfortable\" going into the hospital during Adam's chemo treatments",
        "- Kyle attempts to keep Adam's spirits high",
        "- Adam breaks up with her for good",
        "- Now single, he eventually starts to follow Kyle's lead"
      ],
      "predicates": [
        "HasCondition(a_1, b_0) ::: Adam has a medical condition.",
        "UndergoesTreatment(a_1, c_0) ::: Adam undergoes treatment for his condition.",
        "CaresFor(a_2, a_1) ::: Rachael cares for Adam.",
        "RejectsOffer(a_1, a_2) ::: Adam rejects the offer from Rachael.",
        "Uncomfortable(a_2) ::: Rachael is uncomfortable during Adam's chemotherapy treatments.",
        "Late(a_2) ::: Rachael is often late to pick up Adam.",
        "CaresFor(a_2, a_3) ::: Diane cares for her husband Richard.",
        "DesiresToCare(a_2, a_1) ::: Diane desires to care for Adam.",
        "Conflicts(a_1, a_2) ::: There is a conflict between Adam's wish and Diane's desire.",
        "Influences(a_3, a_1) ::: Kyle's actions influence Adam.",
        "BreaksUp(a_1, a_2) ::: Adam breaks up with Rachael.",
        "FollowsLead(a_1, a_3) ::: Adam follows Kyle's lead."
      ],
      "premises": [
        "HasCondition(a_1, b_0) ∧ UndergoesTreatment(a_1, c_0) ::: Adam learns he has schwannoma neurofibrosarcoma and must undergo chemotherapy.",
        "Uncomfortable(a_2) ∧ Late(a_2) ∧ CaresFor(a_2, a_1) ∧ BreaksUp(a_1, a_2) ::: Rachael's discomfort and lateness during Adam's chemotherapy treatments contribute to the strain in their relationship, leading Adam to break up with her.",
        "DesiresToCare(a_2, a_1) ∧ RejectsOffer(a_1, a_2) ::: Diane's desire to care for Adam conflicts with Adam's wish for Rachael to take care of him, which he rejects.",
        "Influences(a_3, a_1) ::: Kyle's actions influence Adam's behavior and decisions regarding relationships.",
        "FollowsLead(a_1, a_3) ::: After breaking up with Rachael, Adam starts to follow Kyle's lead in using his illness to pick up women.",
        "Conclusion:",
        "Conflicts(a_1, a_2) ::: There is a conflict between Adam's wish for Rachael to care for him and Diane's desire to care for him."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 837,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 2,
      "paragraph": "Meanwhile, Adam skeptically begins going to a young and inexperienced therapist, Katherine McKay (Kendrick), a PhD candidate doing the clinical aspect of her thesis at the hospital. Although their relationship and sessions have a rocky start, he slowly begins to open up to her about his disease and how it is affecting him. After she gives him a lift home in her car after one of his chemo sessions, the two develop a rapport both in and outside of their sessions, which begins to blur the lines of both their doctor-patient relationship and connection as friends. She helps Adam understand his mother's situation as well, that even though he is the cancer patient, the loved ones feel just as much stress watching someone they care about fight the disease, which helps Adam make steps in repairing the rift between him and his mother. During chemo treatments, Adam also befriends Alan (Hall) and Mitch (Frewer), two older cancer patients who are also undergoing chemotherapy. The two offer Adam advice and smoke marijuana with him.",
      "question_template": "Marilyn left the set early because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- She helps Adam understand his mother's situation as well",
        "- Even though he is the cancer patient, the loved ones feel just as much stress watching someone they care about fight the disease"
      ],
      "predicates": [
        "Skeptical(x) ::: x is skeptical about therapy.",
        "Therapist(x) ::: x is a therapist.",
        "PhDStudent(x) ::: x is a PhD candidate.",
        "OpenUp(x, y) ::: x opens up to y about his disease.",
        "DevelopRapport(x, y) ::: x develops a rapport with y.",
        "BlurLines(x, y) ::: x blurs the lines of their relationship with y.",
        "UnderstandSituation(x, y) ::: x helps y understand a situation.",
        "FeelStress(x, y) ::: x feels stress about y's medical condition.",
        "Friend(x, y) ::: x is a friend of y.",
        "Advice(x, y) ::: x gives advice to y.",
        "SmokeMarijuana(x, y) ::: x smokes marijuana with y."
      ],
      "premises": [
        "Skeptical(a_1) ∧ Therapist(a_2) ∧ PhDStudent(a_2) ::: Adam skeptically begins going to a young and inexperienced therapist, Katherine McKay, a PhD candidate doing the clinical aspect of her thesis at the hospital.",
        "OpenUp(a_1, a_2) ::: Adam slowly begins to open up to Katherine about his disease and how it is affecting him.",
        "DevelopRapport(a_1, a_2) ::: Adam and Katherine develop a rapport both in and outside of their sessions.",
        "BlurLines(a_1, a_2) ::: Their relationship as doctor-patient and friends begins to blur.",
        "UnderstandSituation(a_2, a_1) ::: Katherine helps Adam understand his mother's situation.",
        "FeelStress(a_1, b_1) ::: Adam's loved ones feel just as much stress as Adam while he fights the disease.",
        "Friend(a_1, a_3) ∧ Friend(a_1, a_4) ::: Adam befriends Alan and Mitch, two older cancer patients undergoing chemotherapy.",
        "Advice(a_3, a_1) ∧ Advice(a_4, a_1) ::: Alan and Mitch offer Adam advice.",
        "SmokeMarijuana(a_3, a_1) ∧ SmokeMarijuana(a_4, a_1) ::: Alan and Mitch smoke marijuana with Adam."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 837,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 4,
      "paragraph": "The next day when Kyle drops Adam off at the hospital, Adam embraces Kyle for being a good friend and apologizes for what he said the previous night. After Adam says what could be his final farewells to his family, he undergoes his surgery. During the wait, Katherine goes to the waiting room where she inadvertently meets Adam's family and Kyle. After the surgery, Kyle, Diane, and Katherine are told by the doctor that although the bone degradation was worse than they had thought, the tumor was removed successfully, and that Adam would recover.",
      "question_template": "Marilyn left the set early because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Katherine goes to the waiting room where she inadvertently meets Adam's family and Kyle.",
        "- The doctor tells Kyle, Diane, and Katherine that although the bone degradation was worse than they had thought, the tumor was removed successfully, and that Adam would recover."
      ],
      "predicates": [
        "GoodFriend(x, y) ::: x is a good friend to y.",
        "Apologizes(x, y) ::: x apologizes to y.",
        "FinalFarewells(x) ::: x says final farewells.",
        "UndergoesSurgery(x) ::: x undergoes surgery.",
        "ToldByDoctor(x, y) ::: x is told by the doctor about y.",
        "BoneDegradationWorseThanThought(x) ::: x has bone degradation worse than thought.",
        "TumorRemovedSuccessfully(x) ::: x's tumor was removed successfully.",
        "WillRecover(x) ::: x will recover."
      ],
      "premises": [
        "GoodFriend(a_3, a_1) ∧ Apologizes(a_1, a_3) ::: Adam embraces Kyle for being a good friend and apologizes for what he said the previous night.",
        "FinalFarewells(a_1) ::: Adam says what could be his final farewells to his family.",
        "UndergoesSurgery(a_1) ::: Adam undergoes his surgery.",
        "InWaitingRoom(a_2) ∧ InWaitingRoom(a_3) ::: Katherine goes to the waiting room where she inadvertently meets Adam's family and Kyle.",
        "ToldByDoctor(a_3, BoneDegradationWorseThanThought(a_1) ∧ TumorRemovedSuccessfully(a_1) ∧ WillRecover(a_1)) ::: After the surgery, Kyle, Diane, and Katherine are told by the doctor that although the bone degradation was worse than they had thought, the tumor was removed successfully, and that Adam would recover."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "838": [
    {
      "id": 838,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 4,
      "paragraph": "The next day when Kyle drops Adam off at the hospital, Adam embraces Kyle for being a good friend and apologizes for what he said the previous night. After Adam says what could be his final farewells to his family, he undergoes his surgery. During the wait, Katherine goes to the waiting room where she inadvertently meets Adam's family and Kyle. After the surgery, Kyle, Diane, and Katherine are told by the doctor that although the bone degradation was worse than they had thought, the tumor was removed successfully, and that Adam would recover.",
      "question_template": "Marilyn had [[CANDIDATE_ANSWER]] when Colin found her crying.",
      "candidate_answers": [
        "Adam embraces Kyle for being a good friend and apologizes for what he said the previous night."
      ],
      "predicates": [
        "GoodFriend(x, y) ::: x is a good friend to y.",
        "Apologizes(x, y) ::: x apologizes to y.",
        "FinalFarewells(x) ::: x says final farewells.",
        "UndergoesSurgery(x) ::: x undergoes surgery.",
        "ToldByDoctor(x, y) ::: x is told by the doctor about y.",
        "BoneDegradationWorseThanThought(x) ::: x has bone degradation worse than thought.",
        "TumorRemovedSuccessfully(x) ::: x's tumor was removed successfully.",
        "WillRecover(x) ::: x will recover."
      ],
      "premises": [
        "GoodFriend(a_3, a_1) ∧ Apologizes(a_1, a_3) ::: Adam embraces Kyle for being a good friend and apologizes for what he said the previous night.",
        "FinalFarewells(a_1) ::: Adam says what could be his final farewells to his family.",
        "UndergoesSurgery(a_1) ::: Adam undergoes his surgery.",
        "InWaitingRoom(a_2) ∧ InWaitingRoom(a_3) ::: Katherine goes to the waiting room where she inadvertently meets Adam's family and Kyle.",
        "ToldByDoctor(a_3, BoneDegradationWorseThanThought(a_1) ∧ TumorRemovedSuccessfully(a_1) ∧ WillRecover(a_1)) ::: After the surgery, Kyle, Diane, and Katherine are told by the doctor that although the bone degradation was worse than they had thought, the tumor was removed successfully, and that Adam would recover."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "839": [
    {
      "id": 839,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 1,
      "paragraph": "After experiencing harsh pains in his back, Adam learns from his doctor that he has schwannoma neurofibrosarcoma (a malignant tumor) in his spine, and must undergo chemotherapy. He sees on the Internet that his chances of survival are fifty-fifty. After Adam reveals his diagnosis, his overbearing mother, Diane, who already cares for her husband Richard suffering from Alzheimer's, wants to move in and care for him. Adam rejects this offer, as Rachael has promised to be the one to take care of him. Rachael, however, is \"uncomfortable\" going into the hospital during Adam's chemo treatments and is often late to pick him up, as Adam doesn't drive; she also gets him a retired racing greyhound named Skeletor as a companion animal. Throughout Adam's struggle, Kyle attempts to keep Adam's spirits high, which include helping Adam shave his head prior to chemotherapy and openly using Adam's illness to pick up women. While on a date with one such woman, however, Kyle sees Rachael at an art gallery, kissing another man, and forces her to come clean to Adam; this proves to be the final straw in their already strained relationship, and Adam breaks up with her for good. Now single, he eventually starts to follow Kyle's lead, and the two use his illness to successfully pick up two women at a bar.",
      "question_template": "Lucy breaks up with Colin because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Adam learns from his doctor that he has schwannoma neurofibrosarcoma in his spine",
        "- Adam rejects this offer, as Rachael has promised to be the one to take care of him",
        "- Rachael, however, is \"uncomfortable\" going into the hospital during Adam's chemo treatments",
        "- Kyle attempts to keep Adam's spirits high",
        "- Adam breaks up with her for good",
        "- Adam eventually starts to follow Kyle's lead"
      ],
      "predicates": [
        "HasCondition(a_1, b_0) ::: Adam has a medical condition.",
        "UndergoesTreatment(a_1, c_0) ::: Adam undergoes treatment for his condition.",
        "CaresFor(a_2, a_1) ::: Rachael cares for Adam.",
        "RejectsOffer(a_1, a_2) ::: Adam rejects the offer from Rachael.",
        "Uncomfortable(a_2) ::: Rachael is uncomfortable during Adam's chemotherapy treatments.",
        "Late(a_2) ::: Rachael is often late to pick up Adam.",
        "CaresFor(a_2, a_3) ::: Diane cares for her husband Richard.",
        "DesiresToCare(a_2, a_1) ::: Diane desires to care for Adam.",
        "Conflicts(a_1, a_2) ::: There is a conflict between Adam's wish and Diane's desire.",
        "Influences(a_3, a_1) ::: Kyle's actions influence Adam.",
        "BreaksUp(a_1, a_2) ::: Adam breaks up with Rachael.",
        "FollowsLead(a_1, a_3) ::: Adam follows Kyle's lead."
      ],
      "premises": [
        "HasCondition(a_1, b_0) ∧ UndergoesTreatment(a_1, c_0) ::: Adam learns he has schwannoma neurofibrosarcoma and must undergo chemotherapy.",
        "Uncomfortable(a_2) ∧ Late(a_2) ∧ CaresFor(a_2, a_1) ∧ BreaksUp(a_1, a_2) ::: Rachael's discomfort and lateness during Adam's chemotherapy treatments contribute to the strain in their relationship, leading Adam to break up with her.",
        "DesiresToCare(a_2, a_1) ∧ RejectsOffer(a_1, a_2) ::: Diane's desire to care for Adam conflicts with Adam's wish for Rachael to take care of him, which he rejects.",
        "Influences(a_3, a_1) ::: Kyle's actions influence Adam's behavior and decisions regarding relationships.",
        "FollowsLead(a_1, a_3) ::: After breaking up with Rachael, Adam starts to follow Kyle's lead in using his illness to pick up women.",
        "Conclusion:",
        "Conflicts(a_1, a_2) ::: There is a conflict between Adam's wish for Rachael to care for him and Diane's desire to care for him."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "841": [
    {
      "id": 841,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 0,
      "paragraph": " Adam Lerner is a 27-year-old public radio journalist in Seattle with an artist girlfriend Rachael, of whom his best friend and co-worker Kyle disapproves; where Kyle is brash and outspoken, Adam is more introverted and mild-mannered.",
      "question_template": "[[CANDIDATE_ANSWER]] is Adam's best friend.",
      "candidate_answers": [
        "Kyle disapproves of Rachael"
      ],
      "predicates": [
        "PublicRadioJournalist(x) ::: x is a public radio journalist.",
        "Age(x, y) ::: x is y years old.",
        "LivesIn(x, y) ::: x lives in location y.",
        "HasGirlfriend(x, y) ::: x has girlfriend y.",
        "Disapproves(x, y) ::: x disapproves of y.",
        "Brash(x) ::: x is brash.",
        "Outspoken(x) ::: x is outspoken.",
        "Introverted(x) ::: x is introverted.",
        "MildMannered(x) ::: x is mild-mannered."
      ],
      "premises": [
        "PublicRadioJournalist(a_1) ∧ Age(a_1, 27) ∧ LivesIn(a_1, Seattle) ::: Adam Lerner is a 27-year-old public radio journalist in Seattle.",
        "HasGirlfriend(a_1, a_2) ::: Adam has an artist girlfriend Rachael.",
        "Disapproves(a_3, a_2) ::: Kyle disapproves of Rachael.",
        "Brash(a_3) ∧ Outspoken(a_3) ∧ Introverted(a_1) ∧ MildMannered(a_1) ::: Kyle is brash and outspoken, while Adam is introverted and mild-mannered."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 841,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 3,
      "paragraph": "After Mitch suddenly dies, Adam's fears of his own potential death and unknown future become more evident. Subsequently, he is informed that his treatment is not working and that he needs to undertake a risky surgery as a last resort. The night before his surgery, Adam has an argument with Kyle and demands to drive Kyle's car because Kyle is drunkâeven though Adam does not have a driver's license. After nearly causing an accident, Adam breaks down and criticizes Kyle for seemingly not taking his illness seriously and using it for his own ends. Adam calls Katherine and tells her that he wishes he had a girlfriend like her, but also says he is tired and just wants it to be over. That night, Adam stays at Kyle's and while in the bathroom washing his hands, he finds a book entitled 'Facing Cancer Together' from their first trip to a bookstore where Kyle picked up the shop clerkâit is filled with notes, highlighted paragraphs and turned-down pages, proving to Adam that Kyle does sincerely care about Adam's struggle and has been helping him the best way he knows how, by simply not treating Adam any differently throughout the duration of his illness.",
      "question_template": "[[CANDIDATE_ANSWER]] is Adam's best friend.",
      "candidate_answers": [
        "- Adam's fears of his own potential death and unknown future become more evident.",
        "- Adam criticizes Kyle for seemingly not taking his illness seriously and using it for his own ends.",
        "- Adam calls Katherine and tells her that he wishes he had a girlfriend like her.",
        "- Adam is tired and just wants it to be over.",
        "- Adam finds a book entitled 'Facing Cancer Together' filled with notes, proving Kyle does sincerely care about Adam's struggle."
      ],
      "predicates": [
        "Fears(a_1) ::: Adam has fears of his own potential death and unknown future.",
        "TreatmentNotWorking(a_1) ::: Adam's treatment is not working.",
        "NeedsSurgery(a_1) ::: Adam needs to undertake a risky surgery.",
        "Argument(a_1, a_3) ::: Adam has an argument with Kyle.",
        "DemandsToDrive(a_1, a_3) ::: Adam demands to drive Kyle's car.",
        "Drunk(a_3) ::: Kyle is drunk.",
        "NoLicense(a_1) ::: Adam does not have a driver's license.",
        "NearlyCausesAccident(a_1) ::: Adam nearly causes an accident.",
        "Criticizes(a_1, a_3) ::: Adam criticizes Kyle.",
        "Calls(a_1, a_2) ::: Adam calls Katherine.",
        "WishesForGirlfriend(a_1, a_2) ::: Adam wishes he had a girlfriend like Katherine.",
        "Tired(a_1) ::: Adam is tired.",
        "StaysAt(a_1, a_3) ::: Adam stays at Kyle's.",
        "FindsBook(a_1, d) ::: Adam finds a book entitled 'Facing Cancer Together'.",
        "Cares(a_3, a_1) ::: Kyle sincerely cares about Adam's struggle.",
        "Helps(a_3, a_1) ::: Kyle helps Adam throughout his illness."
      ],
      "premises": [
        "Fears(a_1) ::: Adam's fears of his own potential death and unknown future become more evident after Mitch dies.",
        "TreatmentNotWorking(a_1) ::: Adam is informed that his treatment is not working.",
        "NeedsSurgery(a_1) ::: Adam needs to undertake a risky surgery as a last resort.",
        "Argument(a_1, a_3) ::: Adam has an argument with Kyle the night before his surgery.",
        "DemandsToDrive(a_1, a_3) ∧ Drunk(a_3) ∧ NoLicense(a_1) ::: Adam demands to drive Kyle's car because Kyle is drunk, even though Adam does not have a driver's license.",
        "NearlyCausesAccident(a_1) ::: Adam nearly causes an accident.",
        "Criticizes(a_1, a_3) ::: Adam criticizes Kyle for seemingly not taking his illness seriously.",
        "Calls(a_1, a_2) ∧ WishesForGirlfriend(a_1, a_2) ∧ Tired(a_1) ::: Adam calls Katherine and tells her that he wishes he had a girlfriend like her, but also says he is tired and just wants it to be over.",
        "StaysAt(a_1, a_3) ::: Adam stays at Kyle's that night.",
        "FindsBook(a_1, d) ::: Adam finds a book entitled 'Facing Cancer Together' in the bathroom.",
        "Cares(a_3, a_1) ∧ Helps(a_3, a_1) ::: The book proves to Adam that Kyle sincerely cares about his struggle and has been helping him the best way he knows how.",
        "Conclusion:",
        "Cares(a_3, a_1) ::: Kyle sincerely cares about Adam's struggle."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "Cares(kyle, adam)"
      ]
    }
  ],
  "842": [
    {
      "id": 842,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 5,
      "paragraph": "Some time later, Adam is getting ready for a date with Katherine, while Kyle encourages him and cleans the incision on Adam's back from the surgery. The doorbell rings and Adam lets Katherine inside. After Kyle leaves, Katherine asks, \"Now what?,\" and Adam simply smiles - at last being free of cancer.",
      "question_template": "[[CANDIDATE_ANSWER]] is Adam's girlfriend at the beginning of the story.",
      "candidate_answers": [
        "Kyle encourages him",
        "Cleans the incision on Adam's back from the surgery"
      ],
      "predicates": [
        "ReadyForDate(x, y) ::: x is ready for a date with y.",
        "Encourages(x, y) ::: x encourages y.",
        "Cleans(x, y) ::: x cleans y.",
        "LetsIn(x, y) ::: x lets y inside.",
        "FreeOfCancer(x) ::: x is free of cancer."
      ],
      "premises": [
        "ReadyForDate(a_1, a_2) ::: Adam is ready for a date with Katherine.",
        "Encourages(a_3, a_1) ::: Kyle encourages Adam.",
        "Cleans(a_3, c_1) ::: Kyle cleans the incision on Adam's back from the surgery.",
        "LetsIn(a_1, a_2) ::: Adam lets Katherine inside.",
        "FreeOfCancer(a_1) ::: Adam is free of cancer.",
        "Conclusion:",
        "ReadyForDate(a_1, a_2) ∧ FreeOfCancer(a_1) ::: Adam is ready for a date with Katherine and is free of cancer."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "843": [
    {
      "id": 843,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 1,
      "paragraph": "After experiencing harsh pains in his back, Adam learns from his doctor that he has schwannoma neurofibrosarcoma (a malignant tumor) in his spine, and must undergo chemotherapy. He sees on the Internet that his chances of survival are fifty-fifty. After Adam reveals his diagnosis, his overbearing mother, Diane, who already cares for her husband Richard suffering from Alzheimer's, wants to move in and care for him. Adam rejects this offer, as Rachael has promised to be the one to take care of him. Rachael, however, is \"uncomfortable\" going into the hospital during Adam's chemo treatments and is often late to pick him up, as Adam doesn't drive; she also gets him a retired racing greyhound named Skeletor as a companion animal. Throughout Adam's struggle, Kyle attempts to keep Adam's spirits high, which include helping Adam shave his head prior to chemotherapy and openly using Adam's illness to pick up women. While on a date with one such woman, however, Kyle sees Rachael at an art gallery, kissing another man, and forces her to come clean to Adam; this proves to be the final straw in their already strained relationship, and Adam breaks up with her for good. Now single, he eventually starts to follow Kyle's lead, and the two use his illness to successfully pick up two women at a bar.",
      "question_template": "Rachael's profession is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Skeletor"
      ],
      "predicates": [
        "HasCondition(a_1, b_0) ::: Adam has a medical condition.",
        "UndergoesTreatment(a_1, c_0) ::: Adam undergoes treatment for his condition.",
        "CaresFor(a_2, a_1) ::: Rachael cares for Adam.",
        "RejectsOffer(a_1, a_2) ::: Adam rejects the offer from Rachael.",
        "Uncomfortable(a_2) ::: Rachael is uncomfortable during Adam's chemotherapy treatments.",
        "Late(a_2) ::: Rachael is often late to pick up Adam.",
        "CaresFor(a_2, a_3) ::: Diane cares for her husband Richard.",
        "DesiresToCare(a_2, a_1) ::: Diane desires to care for Adam.",
        "Conflicts(a_1, a_2) ::: There is a conflict between Adam's wish and Diane's desire.",
        "Influences(a_3, a_1) ::: Kyle's actions influence Adam.",
        "BreaksUp(a_1, a_2) ::: Adam breaks up with Rachael.",
        "FollowsLead(a_1, a_3) ::: Adam follows Kyle's lead."
      ],
      "premises": [
        "HasCondition(a_1, b_0) ∧ UndergoesTreatment(a_1, c_0) ::: Adam learns he has schwannoma neurofibrosarcoma and must undergo chemotherapy.",
        "Uncomfortable(a_2) ∧ Late(a_2) ∧ CaresFor(a_2, a_1) ∧ BreaksUp(a_1, a_2) ::: Rachael's discomfort and lateness during Adam's chemotherapy treatments contribute to the strain in their relationship, leading Adam to break up with her.",
        "DesiresToCare(a_2, a_1) ∧ RejectsOffer(a_1, a_2) ::: Diane's desire to care for Adam conflicts with Adam's wish for Rachael to take care of him, which he rejects.",
        "Influences(a_3, a_1) ::: Kyle's actions influence Adam's behavior and decisions regarding relationships.",
        "FollowsLead(a_1, a_3) ::: After breaking up with Rachael, Adam starts to follow Kyle's lead in using his illness to pick up women.",
        "Conclusion:",
        "Conflicts(a_1, a_2) ::: There is a conflict between Adam's wish for Rachael to care for him and Diane's desire to care for him."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "844": [
    {
      "id": 844,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 4,
      "paragraph": "The next day when Kyle drops Adam off at the hospital, Adam embraces Kyle for being a good friend and apologizes for what he said the previous night. After Adam says what could be his final farewells to his family, he undergoes his surgery. During the wait, Katherine goes to the waiting room where she inadvertently meets Adam's family and Kyle. After the surgery, Kyle, Diane, and Katherine are told by the doctor that although the bone degradation was worse than they had thought, the tumor was removed successfully, and that Adam would recover.",
      "question_template": "Kyle sees Rachael kissing [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The bone degradation was worse than they had thought",
        "The tumor was removed successfully"
      ],
      "predicates": [
        "GoodFriend(x, y) ::: x is a good friend to y.",
        "Apologizes(x, y) ::: x apologizes to y.",
        "FinalFarewells(x) ::: x says final farewells.",
        "UndergoesSurgery(x) ::: x undergoes surgery.",
        "ToldByDoctor(x, y) ::: x is told by the doctor about y.",
        "BoneDegradationWorseThanThought(x) ::: x has bone degradation worse than thought.",
        "TumorRemovedSuccessfully(x) ::: x's tumor was removed successfully.",
        "WillRecover(x) ::: x will recover."
      ],
      "premises": [
        "GoodFriend(a_3, a_1) ∧ Apologizes(a_1, a_3) ::: Adam embraces Kyle for being a good friend and apologizes for what he said the previous night.",
        "FinalFarewells(a_1) ::: Adam says what could be his final farewells to his family.",
        "UndergoesSurgery(a_1) ::: Adam undergoes his surgery.",
        "InWaitingRoom(a_2) ∧ InWaitingRoom(a_3) ::: Katherine goes to the waiting room where she inadvertently meets Adam's family and Kyle.",
        "ToldByDoctor(a_3, BoneDegradationWorseThanThought(a_1) ∧ TumorRemovedSuccessfully(a_1) ∧ WillRecover(a_1)) ::: After the surgery, Kyle, Diane, and Katherine are told by the doctor that although the bone degradation was worse than they had thought, the tumor was removed successfully, and that Adam would recover."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "845": [
    {
      "id": 845,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 3,
      "paragraph": "After Mitch suddenly dies, Adam's fears of his own potential death and unknown future become more evident. Subsequently, he is informed that his treatment is not working and that he needs to undertake a risky surgery as a last resort. The night before his surgery, Adam has an argument with Kyle and demands to drive Kyle's car because Kyle is drunkâeven though Adam does not have a driver's license. After nearly causing an accident, Adam breaks down and criticizes Kyle for seemingly not taking his illness seriously and using it for his own ends. Adam calls Katherine and tells her that he wishes he had a girlfriend like her, but also says he is tired and just wants it to be over. That night, Adam stays at Kyle's and while in the bathroom washing his hands, he finds a book entitled 'Facing Cancer Together' from their first trip to a bookstore where Kyle picked up the shop clerkâit is filled with notes, highlighted paragraphs and turned-down pages, proving to Adam that Kyle does sincerely care about Adam's struggle and has been helping him the best way he knows how, by simply not treating Adam any differently throughout the duration of his illness.",
      "question_template": "Adam and Rachael break up when [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Adam calls Katherine and tells her that he wishes he had a girlfriend like her",
        "- Adam finds a book entitled 'Facing Cancer Together' from their first trip to a bookstore"
      ],
      "predicates": [
        "Fears(a_1) ::: Adam has fears of his own potential death and unknown future.",
        "TreatmentNotWorking(a_1) ::: Adam's treatment is not working.",
        "NeedsSurgery(a_1) ::: Adam needs to undertake a risky surgery.",
        "Argument(a_1, a_3) ::: Adam has an argument with Kyle.",
        "DemandsToDrive(a_1, a_3) ::: Adam demands to drive Kyle's car.",
        "Drunk(a_3) ::: Kyle is drunk.",
        "NoLicense(a_1) ::: Adam does not have a driver's license.",
        "NearlyCausesAccident(a_1) ::: Adam nearly causes an accident.",
        "Criticizes(a_1, a_3) ::: Adam criticizes Kyle.",
        "Calls(a_1, a_2) ::: Adam calls Katherine.",
        "WishesForGirlfriend(a_1, a_2) ::: Adam wishes he had a girlfriend like Katherine.",
        "Tired(a_1) ::: Adam is tired.",
        "StaysAt(a_1, a_3) ::: Adam stays at Kyle's.",
        "FindsBook(a_1, d) ::: Adam finds a book entitled 'Facing Cancer Together'.",
        "Cares(a_3, a_1) ::: Kyle sincerely cares about Adam's struggle.",
        "Helps(a_3, a_1) ::: Kyle helps Adam throughout his illness."
      ],
      "premises": [
        "Fears(a_1) ::: Adam's fears of his own potential death and unknown future become more evident after Mitch dies.",
        "TreatmentNotWorking(a_1) ::: Adam is informed that his treatment is not working.",
        "NeedsSurgery(a_1) ::: Adam needs to undertake a risky surgery as a last resort.",
        "Argument(a_1, a_3) ::: Adam has an argument with Kyle the night before his surgery.",
        "DemandsToDrive(a_1, a_3) ∧ Drunk(a_3) ∧ NoLicense(a_1) ::: Adam demands to drive Kyle's car because Kyle is drunk, even though Adam does not have a driver's license.",
        "NearlyCausesAccident(a_1) ::: Adam nearly causes an accident.",
        "Criticizes(a_1, a_3) ::: Adam criticizes Kyle for seemingly not taking his illness seriously.",
        "Calls(a_1, a_2) ∧ WishesForGirlfriend(a_1, a_2) ∧ Tired(a_1) ::: Adam calls Katherine and tells her that he wishes he had a girlfriend like her, but also says he is tired and just wants it to be over.",
        "StaysAt(a_1, a_3) ::: Adam stays at Kyle's that night.",
        "FindsBook(a_1, d) ::: Adam finds a book entitled 'Facing Cancer Together' in the bathroom.",
        "Cares(a_3, a_1) ∧ Helps(a_3, a_1) ::: The book proves to Adam that Kyle sincerely cares about his struggle and has been helping him the best way he knows how.",
        "Conclusion:",
        "Cares(a_3, a_1) ::: Kyle sincerely cares about Adam's struggle."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 845,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 4,
      "paragraph": "The next day when Kyle drops Adam off at the hospital, Adam embraces Kyle for being a good friend and apologizes for what he said the previous night. After Adam says what could be his final farewells to his family, he undergoes his surgery. During the wait, Katherine goes to the waiting room where she inadvertently meets Adam's family and Kyle. After the surgery, Kyle, Diane, and Katherine are told by the doctor that although the bone degradation was worse than they had thought, the tumor was removed successfully, and that Adam would recover.",
      "question_template": "Adam and Rachael break up when [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Adam embraces Kyle for being a good friend and apologizes for what he said the previous night.",
        "- Katherine goes to the waiting room where she inadvertently meets Adam's family and Kyle."
      ],
      "predicates": [
        "GoodFriend(x, y) ::: x is a good friend to y.",
        "Apologizes(x, y) ::: x apologizes to y.",
        "FinalFarewells(x) ::: x says final farewells.",
        "UndergoesSurgery(x) ::: x undergoes surgery.",
        "ToldByDoctor(x, y) ::: x is told by the doctor about y.",
        "BoneDegradationWorseThanThought(x) ::: x has bone degradation worse than thought.",
        "TumorRemovedSuccessfully(x) ::: x's tumor was removed successfully.",
        "WillRecover(x) ::: x will recover."
      ],
      "premises": [
        "GoodFriend(a_3, a_1) ∧ Apologizes(a_1, a_3) ::: Adam embraces Kyle for being a good friend and apologizes for what he said the previous night.",
        "FinalFarewells(a_1) ::: Adam says what could be his final farewells to his family.",
        "UndergoesSurgery(a_1) ::: Adam undergoes his surgery.",
        "InWaitingRoom(a_2) ∧ InWaitingRoom(a_3) ::: Katherine goes to the waiting room where she inadvertently meets Adam's family and Kyle.",
        "ToldByDoctor(a_3, BoneDegradationWorseThanThought(a_1) ∧ TumorRemovedSuccessfully(a_1) ∧ WillRecover(a_1)) ::: After the surgery, Kyle, Diane, and Katherine are told by the doctor that although the bone degradation was worse than they had thought, the tumor was removed successfully, and that Adam would recover."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "848": [
    {
      "id": 848,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 0,
      "paragraph": " Adam Lerner is a 27-year-old public radio journalist in Seattle with an artist girlfriend Rachael, of whom his best friend and co-worker Kyle disapproves; where Kyle is brash and outspoken, Adam is more introverted and mild-mannered.",
      "question_template": "[[CANDIDATE_ANSWER]] dies in the story.",
      "candidate_answers": [
        "Kyle disapproves of Rachael",
        "Adam is introverted and mild-mannered"
      ],
      "predicates": [
        "PublicRadioJournalist(x) ::: x is a public radio journalist.",
        "Age(x, y) ::: x is y years old.",
        "LivesIn(x, y) ::: x lives in location y.",
        "HasGirlfriend(x, y) ::: x has girlfriend y.",
        "Disapproves(x, y) ::: x disapproves of y.",
        "Brash(x) ::: x is brash.",
        "Outspoken(x) ::: x is outspoken.",
        "Introverted(x) ::: x is introverted.",
        "MildMannered(x) ::: x is mild-mannered."
      ],
      "premises": [
        "PublicRadioJournalist(a_1) ∧ Age(a_1, 27) ∧ LivesIn(a_1, Seattle) ::: Adam Lerner is a 27-year-old public radio journalist in Seattle.",
        "HasGirlfriend(a_1, a_2) ::: Adam has an artist girlfriend Rachael.",
        "Disapproves(a_3, a_2) ::: Kyle disapproves of Rachael.",
        "Brash(a_3) ∧ Outspoken(a_3) ∧ Introverted(a_1) ∧ MildMannered(a_1) ::: Kyle is brash and outspoken, while Adam is introverted and mild-mannered."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 848,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 1,
      "paragraph": "After experiencing harsh pains in his back, Adam learns from his doctor that he has schwannoma neurofibrosarcoma (a malignant tumor) in his spine, and must undergo chemotherapy. He sees on the Internet that his chances of survival are fifty-fifty. After Adam reveals his diagnosis, his overbearing mother, Diane, who already cares for her husband Richard suffering from Alzheimer's, wants to move in and care for him. Adam rejects this offer, as Rachael has promised to be the one to take care of him. Rachael, however, is \"uncomfortable\" going into the hospital during Adam's chemo treatments and is often late to pick him up, as Adam doesn't drive; she also gets him a retired racing greyhound named Skeletor as a companion animal. Throughout Adam's struggle, Kyle attempts to keep Adam's spirits high, which include helping Adam shave his head prior to chemotherapy and openly using Adam's illness to pick up women. While on a date with one such woman, however, Kyle sees Rachael at an art gallery, kissing another man, and forces her to come clean to Adam; this proves to be the final straw in their already strained relationship, and Adam breaks up with her for good. Now single, he eventually starts to follow Kyle's lead, and the two use his illness to successfully pick up two women at a bar.",
      "question_template": "[[CANDIDATE_ANSWER]] dies in the story.",
      "candidate_answers": [
        "Kyle",
        "Rachael at an art gallery, kissing another man"
      ],
      "predicates": [
        "HasCondition(a_1, b_0) ::: Adam has a medical condition.",
        "UndergoesTreatment(a_1, c_0) ::: Adam undergoes treatment for his condition.",
        "CaresFor(a_2, a_1) ::: Rachael cares for Adam.",
        "RejectsOffer(a_1, a_2) ::: Adam rejects the offer from Rachael.",
        "Uncomfortable(a_2) ::: Rachael is uncomfortable during Adam's chemotherapy treatments.",
        "Late(a_2) ::: Rachael is often late to pick up Adam.",
        "CaresFor(a_2, a_3) ::: Diane cares for her husband Richard.",
        "DesiresToCare(a_2, a_1) ::: Diane desires to care for Adam.",
        "Conflicts(a_1, a_2) ::: There is a conflict between Adam's wish and Diane's desire.",
        "Influences(a_3, a_1) ::: Kyle's actions influence Adam.",
        "BreaksUp(a_1, a_2) ::: Adam breaks up with Rachael.",
        "FollowsLead(a_1, a_3) ::: Adam follows Kyle's lead."
      ],
      "premises": [
        "HasCondition(a_1, b_0) ∧ UndergoesTreatment(a_1, c_0) ::: Adam learns he has schwannoma neurofibrosarcoma and must undergo chemotherapy.",
        "Uncomfortable(a_2) ∧ Late(a_2) ∧ CaresFor(a_2, a_1) ∧ BreaksUp(a_1, a_2) ::: Rachael's discomfort and lateness during Adam's chemotherapy treatments contribute to the strain in their relationship, leading Adam to break up with her.",
        "DesiresToCare(a_2, a_1) ∧ RejectsOffer(a_1, a_2) ::: Diane's desire to care for Adam conflicts with Adam's wish for Rachael to take care of him, which he rejects.",
        "Influences(a_3, a_1) ::: Kyle's actions influence Adam's behavior and decisions regarding relationships.",
        "FollowsLead(a_1, a_3) ::: After breaking up with Rachael, Adam starts to follow Kyle's lead in using his illness to pick up women.",
        "Conclusion:",
        "Conflicts(a_1, a_2) ::: There is a conflict between Adam's wish for Rachael to care for him and Diane's desire to care for him."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "849": [
    {
      "id": 849,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 1,
      "paragraph": "After experiencing harsh pains in his back, Adam learns from his doctor that he has schwannoma neurofibrosarcoma (a malignant tumor) in his spine, and must undergo chemotherapy. He sees on the Internet that his chances of survival are fifty-fifty. After Adam reveals his diagnosis, his overbearing mother, Diane, who already cares for her husband Richard suffering from Alzheimer's, wants to move in and care for him. Adam rejects this offer, as Rachael has promised to be the one to take care of him. Rachael, however, is \"uncomfortable\" going into the hospital during Adam's chemo treatments and is often late to pick him up, as Adam doesn't drive; she also gets him a retired racing greyhound named Skeletor as a companion animal. Throughout Adam's struggle, Kyle attempts to keep Adam's spirits high, which include helping Adam shave his head prior to chemotherapy and openly using Adam's illness to pick up women. While on a date with one such woman, however, Kyle sees Rachael at an art gallery, kissing another man, and forces her to come clean to Adam; this proves to be the final straw in their already strained relationship, and Adam breaks up with her for good. Now single, he eventually starts to follow Kyle's lead, and the two use his illness to successfully pick up two women at a bar.",
      "question_template": "[[CANDIDATE_ANSWER]] has Alzheimer's in the story.",
      "candidate_answers": [
        "- Adam learns from his doctor that he has schwannoma neurofibrosarcoma in his spine, and must undergo chemotherapy.",
        "- He sees on the Internet that his chances of survival are fifty-fifty.",
        "- Rachael has promised to be the one to take care of him.",
        "- Kyle attempts to keep Adam's spirits high, which include helping Adam shave his head prior to chemotherapy.",
        "- Adam breaks up with her for good.",
        "- Adam eventually starts to follow Kyle's lead, and the two use his illness to successfully pick up two women at a bar."
      ],
      "predicates": [
        "HasCondition(a_1, b_0) ::: Adam has a medical condition.",
        "UndergoesTreatment(a_1, c_0) ::: Adam undergoes treatment for his condition.",
        "CaresFor(a_2, a_1) ::: Rachael cares for Adam.",
        "RejectsOffer(a_1, a_2) ::: Adam rejects the offer from Rachael.",
        "Uncomfortable(a_2) ::: Rachael is uncomfortable during Adam's chemotherapy treatments.",
        "Late(a_2) ::: Rachael is often late to pick up Adam.",
        "CaresFor(a_2, a_3) ::: Diane cares for her husband Richard.",
        "DesiresToCare(a_2, a_1) ::: Diane desires to care for Adam.",
        "Conflicts(a_1, a_2) ::: There is a conflict between Adam's wish and Diane's desire.",
        "Influences(a_3, a_1) ::: Kyle's actions influence Adam.",
        "BreaksUp(a_1, a_2) ::: Adam breaks up with Rachael.",
        "FollowsLead(a_1, a_3) ::: Adam follows Kyle's lead."
      ],
      "premises": [
        "HasCondition(a_1, b_0) ∧ UndergoesTreatment(a_1, c_0) ::: Adam learns he has schwannoma neurofibrosarcoma and must undergo chemotherapy.",
        "Uncomfortable(a_2) ∧ Late(a_2) ∧ CaresFor(a_2, a_1) ∧ BreaksUp(a_1, a_2) ::: Rachael's discomfort and lateness during Adam's chemotherapy treatments contribute to the strain in their relationship, leading Adam to break up with her.",
        "DesiresToCare(a_2, a_1) ∧ RejectsOffer(a_1, a_2) ::: Diane's desire to care for Adam conflicts with Adam's wish for Rachael to take care of him, which he rejects.",
        "Influences(a_3, a_1) ::: Kyle's actions influence Adam's behavior and decisions regarding relationships.",
        "FollowsLead(a_1, a_3) ::: After breaking up with Rachael, Adam starts to follow Kyle's lead in using his illness to pick up women.",
        "Conclusion:",
        "Conflicts(a_1, a_2) ::: There is a conflict between Adam's wish for Rachael to care for him and Diane's desire to care for him."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "FollowsLead(a_1, a_3) ∧ Influences(a_3, a_1) ::: Adam eventually starts to follow Kyle's lead, and the two use his illness to successfully pick up two women at a bar."
      ]
    },
    {
      "id": 849,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 3,
      "paragraph": "After Mitch suddenly dies, Adam's fears of his own potential death and unknown future become more evident. Subsequently, he is informed that his treatment is not working and that he needs to undertake a risky surgery as a last resort. The night before his surgery, Adam has an argument with Kyle and demands to drive Kyle's car because Kyle is drunkâeven though Adam does not have a driver's license. After nearly causing an accident, Adam breaks down and criticizes Kyle for seemingly not taking his illness seriously and using it for his own ends. Adam calls Katherine and tells her that he wishes he had a girlfriend like her, but also says he is tired and just wants it to be over. That night, Adam stays at Kyle's and while in the bathroom washing his hands, he finds a book entitled 'Facing Cancer Together' from their first trip to a bookstore where Kyle picked up the shop clerkâit is filled with notes, highlighted paragraphs and turned-down pages, proving to Adam that Kyle does sincerely care about Adam's struggle and has been helping him the best way he knows how, by simply not treating Adam any differently throughout the duration of his illness.",
      "question_template": "[[CANDIDATE_ANSWER]] has Alzheimer's in the story.",
      "candidate_answers": [
        "- His treatment is not working and he needs to undertake a risky surgery as a last resort.",
        "- Adam's fears of his own potential death and unknown future become more evident.",
        "- Adam criticizes Kyle for seemingly not taking his illness seriously.",
        "- Adam finds a book entitled 'Facing Cancer Together' filled with notes, proving Kyle cares about his struggle."
      ],
      "predicates": [
        "Fears(a_1) ::: Adam has fears of his own potential death and unknown future.",
        "TreatmentNotWorking(a_1) ::: Adam's treatment is not working.",
        "NeedsSurgery(a_1) ::: Adam needs to undertake a risky surgery.",
        "Argument(a_1, a_3) ::: Adam has an argument with Kyle.",
        "DemandsToDrive(a_1, a_3) ::: Adam demands to drive Kyle's car.",
        "Drunk(a_3) ::: Kyle is drunk.",
        "NoLicense(a_1) ::: Adam does not have a driver's license.",
        "NearlyCausesAccident(a_1) ::: Adam nearly causes an accident.",
        "Criticizes(a_1, a_3) ::: Adam criticizes Kyle.",
        "Calls(a_1, a_2) ::: Adam calls Katherine.",
        "WishesForGirlfriend(a_1, a_2) ::: Adam wishes he had a girlfriend like Katherine.",
        "Tired(a_1) ::: Adam is tired.",
        "StaysAt(a_1, a_3) ::: Adam stays at Kyle's.",
        "FindsBook(a_1, d) ::: Adam finds a book entitled 'Facing Cancer Together'.",
        "Cares(a_3, a_1) ::: Kyle sincerely cares about Adam's struggle.",
        "Helps(a_3, a_1) ::: Kyle helps Adam throughout his illness."
      ],
      "premises": [
        "Fears(a_1) ::: Adam's fears of his own potential death and unknown future become more evident after Mitch dies.",
        "TreatmentNotWorking(a_1) ::: Adam is informed that his treatment is not working.",
        "NeedsSurgery(a_1) ::: Adam needs to undertake a risky surgery as a last resort.",
        "Argument(a_1, a_3) ::: Adam has an argument with Kyle the night before his surgery.",
        "DemandsToDrive(a_1, a_3) ∧ Drunk(a_3) ∧ NoLicense(a_1) ::: Adam demands to drive Kyle's car because Kyle is drunk, even though Adam does not have a driver's license.",
        "NearlyCausesAccident(a_1) ::: Adam nearly causes an accident.",
        "Criticizes(a_1, a_3) ::: Adam criticizes Kyle for seemingly not taking his illness seriously.",
        "Calls(a_1, a_2) ∧ WishesForGirlfriend(a_1, a_2) ∧ Tired(a_1) ::: Adam calls Katherine and tells her that he wishes he had a girlfriend like her, but also says he is tired and just wants it to be over.",
        "StaysAt(a_1, a_3) ::: Adam stays at Kyle's that night.",
        "FindsBook(a_1, d) ::: Adam finds a book entitled 'Facing Cancer Together' in the bathroom.",
        "Cares(a_3, a_1) ∧ Helps(a_3, a_1) ::: The book proves to Adam that Kyle sincerely cares about his struggle and has been helping him the best way he knows how.",
        "Conclusion:",
        "Cares(a_3, a_1) ::: Kyle sincerely cares about Adam's struggle."
      ],
      "conclusions": [
        "TreatmentNotWorking(a_1) ∧ NeedsSurgery(a_1)",
        "None",
        "None",
        "Cares(kyle, adam) ∧ FindsBook(adam, 'Facing Cancer Together')"
      ]
    },
    {
      "id": 849,
      "context_id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 5,
      "paragraph": "Some time later, Adam is getting ready for a date with Katherine, while Kyle encourages him and cleans the incision on Adam's back from the surgery. The doorbell rings and Adam lets Katherine inside. After Kyle leaves, Katherine asks, \"Now what?,\" and Adam simply smiles - at last being free of cancer.",
      "question_template": "[[CANDIDATE_ANSWER]] has Alzheimer's in the story.",
      "candidate_answers": [
        "Free of cancer",
        "Surgery"
      ],
      "predicates": [
        "ReadyForDate(x, y) ::: x is ready for a date with y.",
        "Encourages(x, y) ::: x encourages y.",
        "Cleans(x, y) ::: x cleans y.",
        "LetsIn(x, y) ::: x lets y inside.",
        "FreeOfCancer(x) ::: x is free of cancer."
      ],
      "premises": [
        "ReadyForDate(a_1, a_2) ::: Adam is ready for a date with Katherine.",
        "Encourages(a_3, a_1) ::: Kyle encourages Adam.",
        "Cleans(a_3, c_1) ::: Kyle cleans the incision on Adam's back from the surgery.",
        "LetsIn(a_1, a_2) ::: Adam lets Katherine inside.",
        "FreeOfCancer(a_1) ::: Adam is free of cancer.",
        "Conclusion:",
        "ReadyForDate(a_1, a_2) ∧ FreeOfCancer(a_1) ::: Adam is ready for a date with Katherine and is free of cancer."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "850": [
    {
      "id": 850,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 3,
      "paragraph": "When he wakes, he finds himself in blackness with the Empress, with only a grain of sand the last bit of Fantasia remaining. The Empress tells Bastian that he has the power to bring Fantasia back with his imagination using the power of the AURYN. Bastian re-creates Fantasia, and as he flies on Falkor's back, he sees the land and its inhabitants restored, and that Atreyu has been reunited with Artax. When Falkor tells him he can wish for anything, Bastian then brings Falkor back to the real world to chase down the bullies from before. The film ends with the narration that Bastian had many more wishes and adventures, and adds: \"but that's another story\".",
      "question_template": "Adam Lerner's career is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Bastian",
        "The Empress",
        "Falkor",
        "Atreyu",
        "Artax",
        "The film ends with the narration that Bastian had many more wishes and adventures, and adds: \"but that's another story\"."
      ],
      "predicates": [
        "PowerToRestore(x) ::: x has the power to bring Fantasia back.",
        "Imagination(x) ::: x uses imagination.",
        "WishForAnything(x) ::: x can wish for anything.",
        "Restored(c) ::: c is restored.",
        "Reunited(x, y) ::: x is reunited with y.",
        "InBlackness(x) ::: x is in blackness.",
        "FliesOn(x, y) ::: x flies on the back of y.",
        "ChaseDown(x, y) ::: x chases down y."
      ],
      "premises": [
        "PowerToRestore(a_1) ∧ Imagination(a_1) ∧ PowerToRestore(a_1) ::: Bastian has the power to bring Fantasia back with his imagination using the power of the AURYN.",
        "WishForAnything(a_1) ::: Bastian can wish for anything.",
        "Restored(c_1) ::: Fantasia is restored.",
        "Reunited(a_3, a_2) ::: Atreyu has been reunited with Artax.",
        "InBlackness(a_1) ::: Bastian finds himself in blackness.",
        "FliesOn(a_1, b_1) ::: Bastian flies on Falkor's back.",
        "ChaseDown(a_1, e) ::: Bastian chases down the bullies.",
        "Conclusion:",
        "Restored(c_1) ::: Fantasia has been restored."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "851": [
    {
      "id": 851,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 1,
      "paragraph": "Atreyu's quest directs him to the advisor Morla the Ancient One in the Swamps of Sadness. Though the AURYN protects Atreyu, his beloved horse Artax is lost to the swamp, and he continues alone. Later, Atreyu is surprised by the sudden appearance of Morla, a giant turtle. Bastian, reading, is also surprised and lets out a scream, which Atreyu and Morla appear to hear. Morla does not have the answers Atreyu seeks, but directs him to the Southern Oracle, ten thousand miles distant. Atreyu succumbs to exhaustion trying to escape the Swamps but is saved by the luckdragon Falkor (voiced by Alan Oppenheimer). Falkor takes him to the home of two gnomes that live near the entrance to the Southern Oracle. The gnomes explain that Atreyu will face various trials before reaching the Oracle. Atreyu proceeds to enter the Oracle, and is perplexed when one second trial, a mirror that shows the viewer's true self, reveals a boy which Bastian recognizes as himself. Bastian throws the book aside, but after catching his breath, continues to read. Atreyu eventually meets the Southern Oracle who tells him the only way to save the Empress is to find a human child to give her a new name, beyond the boundaries of Fantasia.",
      "question_template": "Adam discovers [[CANDIDATE_ANSWER]] when he goes to his doctor to investigate back pain.",
      "candidate_answers": [
        "Fantasia"
      ],
      "predicates": [
        "Quest(x) ::: x is on a quest.",
        "Advisor(x) ::: x is an advisor.",
        "Protects(x, y) ::: x protects y.",
        "Lost(x, y) ::: x is lost to y.",
        "Surprised(x, y) ::: x is surprised by y.",
        "Hears(x, y) ::: x hears y.",
        "Directs(x, y) ::: x directs y to y.",
        "Succumbs(x, y) ::: x succumbs to y.",
        "SavedBy(x, y) ::: x is saved by y.",
        "Explains(x, y) ::: x explains y.",
        "Faces(x, y) ::: x faces y.",
        "Enters(x, y) ::: x enters y.",
        "Reveals(x, y) ::: x reveals y to y.",
        "Recognizes(x, y) ::: x recognizes y.",
        "ThrowsAside(x, y) ::: x throws aside y.",
        "ContinuesReading(x) ::: x continues to read.",
        "Tells(x, y) ::: x tells y.",
        "Finds(x, y) ::: x finds y.",
        "Gives(x, y, z) ::: x gives y to z."
      ],
      "premises": [
        "Quest(atreyu) ::: Atreyu is on a quest.",
        "Advisor(morla) ::: Morla is an advisor.",
        "Protects(auryn, atreyu) ::: AURYN protects Atreyu.",
        "Lost(artax, swamp) ::: Artax is lost to the Swamps of Sadness.",
        "Surprised(atreyu, morla) ::: Atreyu is surprised by Morla's sudden appearance.",
        "Hears(atreyu, scream) ::: Atreyu hears a scream.",
        "Hears(morla, scream) ::: Morla hears a scream.",
        "Directs(morla, southernOracle) ::: Morla directs Atreyu to the Southern Oracle.",
        "Succumbs(atreyu, exhaustion) ::: Atreyu succumbs to exhaustion.",
        "SavedBy(atreyu, falkor) ::: Atreyu is saved by Falkor.",
        "Explains(gnomes, trials) ::: The gnomes explain that Atreyu will face various trials.",
        "Faces(atreyu, trials) ::: Atreyu faces various trials.",
        "Enters(atreyu, oracle) ::: Atreyu enters the Oracle.",
        "Reveals(mirror, atreyu) ::: The mirror reveals Atreyu's true self.",
        "Recognizes(bastian, himself) ::: Bastian recognizes the boy as himself.",
        "ThrowsAside(bastian, book) ::: Bastian throws the book aside.",
        "ContinuesReading(bastian) ::: Bastian continues to read.",
        "Tells(southernOracle, atreyu) ::: The Southern Oracle tells Atreyu the only way to save the Empress is to find a human child.",
        "Finds(atreyu, humanChild) ::: Atreyu must find a human child.",
        "Gives(atreyu, newName, empress) ::: Atreyu gives a new name to the Empress.",
        "Conclusion:",
        "Finds(atreyu, humanChild) → Gives(atreyu, newName, empress) ::: Atreyu must find a human child to save the Empress by giving her a new name."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 851,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 3,
      "paragraph": "When he wakes, he finds himself in blackness with the Empress, with only a grain of sand the last bit of Fantasia remaining. The Empress tells Bastian that he has the power to bring Fantasia back with his imagination using the power of the AURYN. Bastian re-creates Fantasia, and as he flies on Falkor's back, he sees the land and its inhabitants restored, and that Atreyu has been reunited with Artax. When Falkor tells him he can wish for anything, Bastian then brings Falkor back to the real world to chase down the bullies from before. The film ends with the narration that Bastian had many more wishes and adventures, and adds: \"but that's another story\".",
      "question_template": "Adam discovers [[CANDIDATE_ANSWER]] when he goes to his doctor to investigate back pain.",
      "candidate_answers": [
        "Fantasia"
      ],
      "predicates": [
        "PowerToRestore(x) ::: x has the power to bring Fantasia back.",
        "Imagination(x) ::: x uses imagination.",
        "WishForAnything(x) ::: x can wish for anything.",
        "Restored(c) ::: c is restored.",
        "Reunited(x, y) ::: x is reunited with y.",
        "InBlackness(x) ::: x is in blackness.",
        "FliesOn(x, y) ::: x flies on the back of y.",
        "ChaseDown(x, y) ::: x chases down y."
      ],
      "premises": [
        "PowerToRestore(a_1) ∧ Imagination(a_1) ∧ PowerToRestore(a_1) ::: Bastian has the power to bring Fantasia back with his imagination using the power of the AURYN.",
        "WishForAnything(a_1) ::: Bastian can wish for anything.",
        "Restored(c_1) ::: Fantasia is restored.",
        "Reunited(a_3, a_2) ::: Atreyu has been reunited with Artax.",
        "InBlackness(a_1) ::: Bastian finds himself in blackness.",
        "FliesOn(a_1, b_1) ::: Bastian flies on Falkor's back.",
        "ChaseDown(a_1, e) ::: Bastian chases down the bullies.",
        "Conclusion:",
        "Restored(c_1) ::: Fantasia has been restored."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "852": [
    {
      "id": 852,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 0,
      "paragraph": " Bastian Balthazar Bux is a shy and friendless bibliophile 12-year-old, teased by bullies from school. On his way to school, he hides from the bullies in a bookstore, interrupting the grumpy bookseller, Mr. Coreander. Bastian asks about one of the books he sees, but Mr. Coreander advises against it. His curiosity piqued, Bastian seizes the book, leaving a note promising to return it, and hides in the school's attic to read. The book describes the world of Fantasia slowly being devoured by a force called \"The Nothing\". Fantasia's ruler, the Childlike Empress, has fallen ill, and Atreyu is tasked to discover the cure, believing that once the Empress is well, the Nothing will no longer be a threat. Atreyu is given a medallion named the AURYN that can guide and protect him in the quest. As Atreyu sets out, the Nothing summons Gmork, a wolf-like creature, to kill Atreyu.",
      "question_template": "Adam's chances of survival, which he discovers online, are [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The Swamps of Sadness"
      ],
      "predicates": [
        "Shy(x) ::: x is a shy person.",
        "Friendless(x) ::: x is a friendless person.",
        "Bibliophile(x) ::: x is a bibliophile.",
        "Teased(x) ::: x is teased by bullies.",
        "Hides(x, y) ::: x hides from y.",
        "Asks(x, y) ::: x asks about y.",
        "AdvisesAgainst(x, y) ::: x advises against y.",
        "Seizes(x, y) ::: x seizes y.",
        "PromisesToReturn(x, y) ::: x promises to return y.",
        "HidesIn(x, y) ::: x hides in y.",
        "Describes(x, y) ::: x describes y.",
        "FallsIll(x) ::: x falls ill.",
        "TaskedToDiscover(x, y) ::: x is tasked to discover y.",
        "Believes(x, y) ::: x believes that y is true.",
        "Given(x, y) ::: x is given y.",
        "SetsOut(x) ::: x sets out on a quest.",
        "Summons(x, y) ::: x summons y.",
        "ToKill(x, y) ::: x is tasked to kill y."
      ],
      "premises": [
        "Shy(bastian) ∧ Friendless(bastian) ∧ Bibliophile(bastian) ∧ Teased(bastian) ::: Bastian Balthazar Bux is a shy and friendless bibliophile 12-year-old, teased by bullies from school.",
        "Hides(bastian, bullies) ::: On his way to school, he hides from the bullies in a bookstore.",
        "Asks(bastian, book) ∧ AdvisesAgainst(coreander, book) ::: Bastian asks about one of the books he sees, but Mr. Coreander advises against it.",
        "Seizes(bastian, book) ∧ PromisesToReturn(bastian, book) ::: Bastian seizes the book, leaving a note promising to return it.",
        "HidesIn(bastian, attic) ::: Bastian hides in the school's attic to read.",
        "Describes(book, fantasia) ::: The book describes the world of Fantasia slowly being devoured by a force called \"The Nothing\".",
        "FallsIll(empress) ::: Fantasia's ruler, the Childlike Empress, has fallen ill.",
        "TaskedToDiscover(atreyu, cure) ::: Atreyu is tasked to discover the cure for the Childlike Empress to stop the Nothing.",
        "Believes(atreyu, empressWell) ::: Atreyu believes that once the Empress is well, the Nothing will no longer be a threat.",
        "Given(atreyu, auryn) ::: Atreyu is given a medallion named the AURYN that can guide and protect him in the quest.",
        "SetsOut(atreyu) ::: As Atreyu sets out, the Nothing summons Gmork.",
        "Summons(nothing, gmork) ::: The Nothing summons Gmork, a wolf-like creature, to kill Atreyu."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 852,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 1,
      "paragraph": "Atreyu's quest directs him to the advisor Morla the Ancient One in the Swamps of Sadness. Though the AURYN protects Atreyu, his beloved horse Artax is lost to the swamp, and he continues alone. Later, Atreyu is surprised by the sudden appearance of Morla, a giant turtle. Bastian, reading, is also surprised and lets out a scream, which Atreyu and Morla appear to hear. Morla does not have the answers Atreyu seeks, but directs him to the Southern Oracle, ten thousand miles distant. Atreyu succumbs to exhaustion trying to escape the Swamps but is saved by the luckdragon Falkor (voiced by Alan Oppenheimer). Falkor takes him to the home of two gnomes that live near the entrance to the Southern Oracle. The gnomes explain that Atreyu will face various trials before reaching the Oracle. Atreyu proceeds to enter the Oracle, and is perplexed when one second trial, a mirror that shows the viewer's true self, reveals a boy which Bastian recognizes as himself. Bastian throws the book aside, but after catching his breath, continues to read. Atreyu eventually meets the Southern Oracle who tells him the only way to save the Empress is to find a human child to give her a new name, beyond the boundaries of Fantasia.",
      "question_template": "Adam's chances of survival, which he discovers online, are [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "the Swamps of Sadness"
      ],
      "predicates": [
        "Quest(x) ::: x is on a quest.",
        "Advisor(x) ::: x is an advisor.",
        "Protects(x, y) ::: x protects y.",
        "Lost(x, y) ::: x is lost to y.",
        "Surprised(x, y) ::: x is surprised by y.",
        "Hears(x, y) ::: x hears y.",
        "Directs(x, y) ::: x directs y to y.",
        "Succumbs(x, y) ::: x succumbs to y.",
        "SavedBy(x, y) ::: x is saved by y.",
        "Explains(x, y) ::: x explains y.",
        "Faces(x, y) ::: x faces y.",
        "Enters(x, y) ::: x enters y.",
        "Reveals(x, y) ::: x reveals y to y.",
        "Recognizes(x, y) ::: x recognizes y.",
        "ThrowsAside(x, y) ::: x throws aside y.",
        "ContinuesReading(x) ::: x continues to read.",
        "Tells(x, y) ::: x tells y.",
        "Finds(x, y) ::: x finds y.",
        "Gives(x, y, z) ::: x gives y to z."
      ],
      "premises": [
        "Quest(atreyu) ::: Atreyu is on a quest.",
        "Advisor(morla) ::: Morla is an advisor.",
        "Protects(auryn, atreyu) ::: AURYN protects Atreyu.",
        "Lost(artax, swamp) ::: Artax is lost to the Swamps of Sadness.",
        "Surprised(atreyu, morla) ::: Atreyu is surprised by Morla's sudden appearance.",
        "Hears(atreyu, scream) ::: Atreyu hears a scream.",
        "Hears(morla, scream) ::: Morla hears a scream.",
        "Directs(morla, southernOracle) ::: Morla directs Atreyu to the Southern Oracle.",
        "Succumbs(atreyu, exhaustion) ::: Atreyu succumbs to exhaustion.",
        "SavedBy(atreyu, falkor) ::: Atreyu is saved by Falkor.",
        "Explains(gnomes, trials) ::: The gnomes explain that Atreyu will face various trials.",
        "Faces(atreyu, trials) ::: Atreyu faces various trials.",
        "Enters(atreyu, oracle) ::: Atreyu enters the Oracle.",
        "Reveals(mirror, atreyu) ::: The mirror reveals Atreyu's true self.",
        "Recognizes(bastian, himself) ::: Bastian recognizes the boy as himself.",
        "ThrowsAside(bastian, book) ::: Bastian throws the book aside.",
        "ContinuesReading(bastian) ::: Bastian continues to read.",
        "Tells(southernOracle, atreyu) ::: The Southern Oracle tells Atreyu the only way to save the Empress is to find a human child.",
        "Finds(atreyu, humanChild) ::: Atreyu must find a human child.",
        "Gives(atreyu, newName, empress) ::: Atreyu gives a new name to the Empress.",
        "Conclusion:",
        "Finds(atreyu, humanChild) → Gives(atreyu, newName, empress) ::: Atreyu must find a human child to save the Empress by giving her a new name."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 852,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 2,
      "paragraph": "Atreyu and Falkor flee before the Nothing consumes the Southern Oracle. In flight, Atreyu is knocked from Falkor's back into the Sea of Possibilities, losing the AURYN in the process. He wakes on the shore of the abandoned ruins, and finds a series of paintings depicting his quest. Gmork reveals himself, having been lying in wait and explains that Fantasia represents humanity's imagination, and that the Nothing represents adult apathy and cynicism against it. Atreyu fends off and kills Gmork as the Nothing begins to consume the ruins. Falkor, who had managed to locate AURYN, rescues Atreyu in time. The two find themselves in a void with only small fragments of Fantasia remaining, and fear they have failed when they spot the Empress's Ivory Tower among the fragment. Inside, Atreyu apologizes for failing the Empress, but she assures him he has succeeded in bringing to her a human child who has been following his quest. As the Nothing begins to consume the Tower, the Empress pleas directly to Bastian to call out her new name. Bastian calls out the name he had selected, and loses consciousness.",
      "question_template": "Adam's chances of survival, which he discovers online, are [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The Sea of Possibilities",
        "He wakes on the shore of the abandoned ruins"
      ],
      "predicates": [
        "HumanChild(x) ::: x is a human child.",
        "Succeed(x, y) ::: x has succeeded in y.",
        "Brings(x, y, z) ::: x brings y to z.",
        "CallsOut(x, y) ::: x calls out y.",
        "LosesConsciousness(x) ::: x loses consciousness.",
        "ConsumedByNothing(x) ::: x is consumed by the Nothing.",
        "InLocation(x, y) ::: x is in location y.",
        "Flee(x, y) ::: x flees from y.",
        "KnockedFrom(x, y) ::: x is knocked from y.",
        "Finds(x, y) ::: x finds y.",
        "Reveals(x, y) ::: x reveals y.",
        "FendsOff(x, y) ::: x fends off y.",
        "Rescues(x, y) ::: x rescues y."
      ],
      "premises": [
        "Flee(atreyu, nothing) ::: Atreyu and Falkor flee before the Nothing consumes the Southern Oracle.",
        "KnockedFrom(atreyu, falkor) ::: Atreyu is knocked from Falkor's back into the Sea of Possibilities.",
        "Finds(atreyu, paintings) ::: Atreyu finds a series of paintings depicting his quest.",
        "Reveals(gmork, humanityImagination) ::: Gmork reveals that Fantasia represents humanity's imagination.",
        "ConsumedByNothing(ruins) ::: The Nothing begins to consume the ruins.",
        "FendsOff(atreyu, gmork) ::: Atreyu fends off and kills Gmork.",
        "Rescues(falkor, atreyu) ::: Falkor rescues Atreyu in time.",
        "InLocation(atreyu, ivoryTower) ::: Atreyu is in the Empress's Ivory Tower.",
        "Succeed(atreyu, quest) ::: The Empress assures Atreyu that he has succeeded in his quest.",
        "Brings(atreyu, humanChild, empress) ::: Atreyu brings a human child to the Empress.",
        "CallsOut(bastian, newName) ::: Bastian calls out the name he had selected.",
        "LosesConsciousness(bastian) ::: Bastian loses consciousness.",
        "ConsumedByNothing(tower) ::: The Nothing begins to consume the Tower.",
        "Conclusion:",
        "HumanChild(bastian) ::: Bastian is a human child.",
        "Succeed(atreyu, quest) ::: Atreyu has succeeded in his quest."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 852,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 3,
      "paragraph": "When he wakes, he finds himself in blackness with the Empress, with only a grain of sand the last bit of Fantasia remaining. The Empress tells Bastian that he has the power to bring Fantasia back with his imagination using the power of the AURYN. Bastian re-creates Fantasia, and as he flies on Falkor's back, he sees the land and its inhabitants restored, and that Atreyu has been reunited with Artax. When Falkor tells him he can wish for anything, Bastian then brings Falkor back to the real world to chase down the bullies from before. The film ends with the narration that Bastian had many more wishes and adventures, and adds: \"but that's another story\".",
      "question_template": "Adam's chances of survival, which he discovers online, are [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The paragraph does not provide any information about where Atreyu is forced to leave his horse, Artax."
      ],
      "predicates": [
        "PowerToRestore(x) ::: x has the power to bring Fantasia back.",
        "Imagination(x) ::: x uses imagination.",
        "WishForAnything(x) ::: x can wish for anything.",
        "Restored(c) ::: c is restored.",
        "Reunited(x, y) ::: x is reunited with y.",
        "InBlackness(x) ::: x is in blackness.",
        "FliesOn(x, y) ::: x flies on the back of y.",
        "ChaseDown(x, y) ::: x chases down y."
      ],
      "premises": [
        "PowerToRestore(a_1) ∧ Imagination(a_1) ∧ PowerToRestore(a_1) ::: Bastian has the power to bring Fantasia back with his imagination using the power of the AURYN.",
        "WishForAnything(a_1) ::: Bastian can wish for anything.",
        "Restored(c_1) ::: Fantasia is restored.",
        "Reunited(a_3, a_2) ::: Atreyu has been reunited with Artax.",
        "InBlackness(a_1) ::: Bastian finds himself in blackness.",
        "FliesOn(a_1, b_1) ::: Bastian flies on Falkor's back.",
        "ChaseDown(a_1, e) ::: Bastian chases down the bullies.",
        "Conclusion:",
        "Restored(c_1) ::: Fantasia has been restored."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "853": [
    {
      "id": 853,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 0,
      "paragraph": " Bastian Balthazar Bux is a shy and friendless bibliophile 12-year-old, teased by bullies from school. On his way to school, he hides from the bullies in a bookstore, interrupting the grumpy bookseller, Mr. Coreander. Bastian asks about one of the books he sees, but Mr. Coreander advises against it. His curiosity piqued, Bastian seizes the book, leaving a note promising to return it, and hides in the school's attic to read. The book describes the world of Fantasia slowly being devoured by a force called \"The Nothing\". Fantasia's ruler, the Childlike Empress, has fallen ill, and Atreyu is tasked to discover the cure, believing that once the Empress is well, the Nothing will no longer be a threat. Atreyu is given a medallion named the AURYN that can guide and protect him in the quest. As Atreyu sets out, the Nothing summons Gmork, a wolf-like creature, to kill Atreyu.",
      "question_template": "Adam takes his mom's offer of care by rejecting it in favor of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The Childlike Empress"
      ],
      "predicates": [
        "Shy(x) ::: x is a shy person.",
        "Friendless(x) ::: x is a friendless person.",
        "Bibliophile(x) ::: x is a bibliophile.",
        "Teased(x) ::: x is teased by bullies.",
        "Hides(x, y) ::: x hides from y.",
        "Asks(x, y) ::: x asks about y.",
        "AdvisesAgainst(x, y) ::: x advises against y.",
        "Seizes(x, y) ::: x seizes y.",
        "PromisesToReturn(x, y) ::: x promises to return y.",
        "HidesIn(x, y) ::: x hides in y.",
        "Describes(x, y) ::: x describes y.",
        "FallsIll(x) ::: x falls ill.",
        "TaskedToDiscover(x, y) ::: x is tasked to discover y.",
        "Believes(x, y) ::: x believes that y is true.",
        "Given(x, y) ::: x is given y.",
        "SetsOut(x) ::: x sets out on a quest.",
        "Summons(x, y) ::: x summons y.",
        "ToKill(x, y) ::: x is tasked to kill y."
      ],
      "premises": [
        "Shy(bastian) ∧ Friendless(bastian) ∧ Bibliophile(bastian) ∧ Teased(bastian) ::: Bastian Balthazar Bux is a shy and friendless bibliophile 12-year-old, teased by bullies from school.",
        "Hides(bastian, bullies) ::: On his way to school, he hides from the bullies in a bookstore.",
        "Asks(bastian, book) ∧ AdvisesAgainst(coreander, book) ::: Bastian asks about one of the books he sees, but Mr. Coreander advises against it.",
        "Seizes(bastian, book) ∧ PromisesToReturn(bastian, book) ::: Bastian seizes the book, leaving a note promising to return it.",
        "HidesIn(bastian, attic) ::: Bastian hides in the school's attic to read.",
        "Describes(book, fantasia) ::: The book describes the world of Fantasia slowly being devoured by a force called \"The Nothing\".",
        "FallsIll(empress) ::: Fantasia's ruler, the Childlike Empress, has fallen ill.",
        "TaskedToDiscover(atreyu, cure) ::: Atreyu is tasked to discover the cure for the Childlike Empress to stop the Nothing.",
        "Believes(atreyu, empressWell) ::: Atreyu believes that once the Empress is well, the Nothing will no longer be a threat.",
        "Given(atreyu, auryn) ::: Atreyu is given a medallion named the AURYN that can guide and protect him in the quest.",
        "SetsOut(atreyu) ::: As Atreyu sets out, the Nothing summons Gmork.",
        "Summons(nothing, gmork) ::: The Nothing summons Gmork, a wolf-like creature, to kill Atreyu."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 853,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 2,
      "paragraph": "Atreyu and Falkor flee before the Nothing consumes the Southern Oracle. In flight, Atreyu is knocked from Falkor's back into the Sea of Possibilities, losing the AURYN in the process. He wakes on the shore of the abandoned ruins, and finds a series of paintings depicting his quest. Gmork reveals himself, having been lying in wait and explains that Fantasia represents humanity's imagination, and that the Nothing represents adult apathy and cynicism against it. Atreyu fends off and kills Gmork as the Nothing begins to consume the ruins. Falkor, who had managed to locate AURYN, rescues Atreyu in time. The two find themselves in a void with only small fragments of Fantasia remaining, and fear they have failed when they spot the Empress's Ivory Tower among the fragment. Inside, Atreyu apologizes for failing the Empress, but she assures him he has succeeded in bringing to her a human child who has been following his quest. As the Nothing begins to consume the Tower, the Empress pleas directly to Bastian to call out her new name. Bastian calls out the name he had selected, and loses consciousness.",
      "question_template": "Adam takes his mom's offer of care by rejecting it in favor of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Gmork reveals himself",
        "- The Empress's Ivory Tower",
        "- A human child who has been following his quest"
      ],
      "predicates": [
        "HumanChild(x) ::: x is a human child.",
        "Succeed(x, y) ::: x has succeeded in y.",
        "Brings(x, y, z) ::: x brings y to z.",
        "CallsOut(x, y) ::: x calls out y.",
        "LosesConsciousness(x) ::: x loses consciousness.",
        "ConsumedByNothing(x) ::: x is consumed by the Nothing.",
        "InLocation(x, y) ::: x is in location y.",
        "Flee(x, y) ::: x flees from y.",
        "KnockedFrom(x, y) ::: x is knocked from y.",
        "Finds(x, y) ::: x finds y.",
        "Reveals(x, y) ::: x reveals y.",
        "FendsOff(x, y) ::: x fends off y.",
        "Rescues(x, y) ::: x rescues y."
      ],
      "premises": [
        "Flee(atreyu, nothing) ::: Atreyu and Falkor flee before the Nothing consumes the Southern Oracle.",
        "KnockedFrom(atreyu, falkor) ::: Atreyu is knocked from Falkor's back into the Sea of Possibilities.",
        "Finds(atreyu, paintings) ::: Atreyu finds a series of paintings depicting his quest.",
        "Reveals(gmork, humanityImagination) ::: Gmork reveals that Fantasia represents humanity's imagination.",
        "ConsumedByNothing(ruins) ::: The Nothing begins to consume the ruins.",
        "FendsOff(atreyu, gmork) ::: Atreyu fends off and kills Gmork.",
        "Rescues(falkor, atreyu) ::: Falkor rescues Atreyu in time.",
        "InLocation(atreyu, ivoryTower) ::: Atreyu is in the Empress's Ivory Tower.",
        "Succeed(atreyu, quest) ::: The Empress assures Atreyu that he has succeeded in his quest.",
        "Brings(atreyu, humanChild, empress) ::: Atreyu brings a human child to the Empress.",
        "CallsOut(bastian, newName) ::: Bastian calls out the name he had selected.",
        "LosesConsciousness(bastian) ::: Bastian loses consciousness.",
        "ConsumedByNothing(tower) ::: The Nothing begins to consume the Tower.",
        "Conclusion:",
        "HumanChild(bastian) ::: Bastian is a human child.",
        "Succeed(atreyu, quest) ::: Atreyu has succeeded in his quest."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 853,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 3,
      "paragraph": "When he wakes, he finds himself in blackness with the Empress, with only a grain of sand the last bit of Fantasia remaining. The Empress tells Bastian that he has the power to bring Fantasia back with his imagination using the power of the AURYN. Bastian re-creates Fantasia, and as he flies on Falkor's back, he sees the land and its inhabitants restored, and that Atreyu has been reunited with Artax. When Falkor tells him he can wish for anything, Bastian then brings Falkor back to the real world to chase down the bullies from before. The film ends with the narration that Bastian had many more wishes and adventures, and adds: \"but that's another story\".",
      "question_template": "Adam takes his mom's offer of care by rejecting it in favor of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The Empress",
        "Bastian"
      ],
      "predicates": [
        "PowerToRestore(x) ::: x has the power to bring Fantasia back.",
        "Imagination(x) ::: x uses imagination.",
        "WishForAnything(x) ::: x can wish for anything.",
        "Restored(c) ::: c is restored.",
        "Reunited(x, y) ::: x is reunited with y.",
        "InBlackness(x) ::: x is in blackness.",
        "FliesOn(x, y) ::: x flies on the back of y.",
        "ChaseDown(x, y) ::: x chases down y."
      ],
      "premises": [
        "PowerToRestore(a_1) ∧ Imagination(a_1) ∧ PowerToRestore(a_1) ::: Bastian has the power to bring Fantasia back with his imagination using the power of the AURYN.",
        "WishForAnything(a_1) ::: Bastian can wish for anything.",
        "Restored(c_1) ::: Fantasia is restored.",
        "Reunited(a_3, a_2) ::: Atreyu has been reunited with Artax.",
        "InBlackness(a_1) ::: Bastian finds himself in blackness.",
        "FliesOn(a_1, b_1) ::: Bastian flies on Falkor's back.",
        "ChaseDown(a_1, e) ::: Bastian chases down the bullies.",
        "Conclusion:",
        "Restored(c_1) ::: Fantasia has been restored."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "854": [
    {
      "id": 854,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 1,
      "paragraph": "Atreyu's quest directs him to the advisor Morla the Ancient One in the Swamps of Sadness. Though the AURYN protects Atreyu, his beloved horse Artax is lost to the swamp, and he continues alone. Later, Atreyu is surprised by the sudden appearance of Morla, a giant turtle. Bastian, reading, is also surprised and lets out a scream, which Atreyu and Morla appear to hear. Morla does not have the answers Atreyu seeks, but directs him to the Southern Oracle, ten thousand miles distant. Atreyu succumbs to exhaustion trying to escape the Swamps but is saved by the luckdragon Falkor (voiced by Alan Oppenheimer). Falkor takes him to the home of two gnomes that live near the entrance to the Southern Oracle. The gnomes explain that Atreyu will face various trials before reaching the Oracle. Atreyu proceeds to enter the Oracle, and is perplexed when one second trial, a mirror that shows the viewer's true self, reveals a boy which Bastian recognizes as himself. Bastian throws the book aside, but after catching his breath, continues to read. Atreyu eventually meets the Southern Oracle who tells him the only way to save the Empress is to find a human child to give her a new name, beyond the boundaries of Fantasia.",
      "question_template": "Rachael reacts to Adam's chemo treatments by being [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Artax, his beloved horse"
      ],
      "predicates": [
        "Quest(x) ::: x is on a quest.",
        "Advisor(x) ::: x is an advisor.",
        "Protects(x, y) ::: x protects y.",
        "Lost(x, y) ::: x is lost to y.",
        "Surprised(x, y) ::: x is surprised by y.",
        "Hears(x, y) ::: x hears y.",
        "Directs(x, y) ::: x directs y to y.",
        "Succumbs(x, y) ::: x succumbs to y.",
        "SavedBy(x, y) ::: x is saved by y.",
        "Explains(x, y) ::: x explains y.",
        "Faces(x, y) ::: x faces y.",
        "Enters(x, y) ::: x enters y.",
        "Reveals(x, y) ::: x reveals y to y.",
        "Recognizes(x, y) ::: x recognizes y.",
        "ThrowsAside(x, y) ::: x throws aside y.",
        "ContinuesReading(x) ::: x continues to read.",
        "Tells(x, y) ::: x tells y.",
        "Finds(x, y) ::: x finds y.",
        "Gives(x, y, z) ::: x gives y to z."
      ],
      "premises": [
        "Quest(atreyu) ::: Atreyu is on a quest.",
        "Advisor(morla) ::: Morla is an advisor.",
        "Protects(auryn, atreyu) ::: AURYN protects Atreyu.",
        "Lost(artax, swamp) ::: Artax is lost to the Swamps of Sadness.",
        "Surprised(atreyu, morla) ::: Atreyu is surprised by Morla's sudden appearance.",
        "Hears(atreyu, scream) ::: Atreyu hears a scream.",
        "Hears(morla, scream) ::: Morla hears a scream.",
        "Directs(morla, southernOracle) ::: Morla directs Atreyu to the Southern Oracle.",
        "Succumbs(atreyu, exhaustion) ::: Atreyu succumbs to exhaustion.",
        "SavedBy(atreyu, falkor) ::: Atreyu is saved by Falkor.",
        "Explains(gnomes, trials) ::: The gnomes explain that Atreyu will face various trials.",
        "Faces(atreyu, trials) ::: Atreyu faces various trials.",
        "Enters(atreyu, oracle) ::: Atreyu enters the Oracle.",
        "Reveals(mirror, atreyu) ::: The mirror reveals Atreyu's true self.",
        "Recognizes(bastian, himself) ::: Bastian recognizes the boy as himself.",
        "ThrowsAside(bastian, book) ::: Bastian throws the book aside.",
        "ContinuesReading(bastian) ::: Bastian continues to read.",
        "Tells(southernOracle, atreyu) ::: The Southern Oracle tells Atreyu the only way to save the Empress is to find a human child.",
        "Finds(atreyu, humanChild) ::: Atreyu must find a human child.",
        "Gives(atreyu, newName, empress) ::: Atreyu gives a new name to the Empress.",
        "Conclusion:",
        "Finds(atreyu, humanChild) → Gives(atreyu, newName, empress) ::: Atreyu must find a human child to save the Empress by giving her a new name."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "856": [
    {
      "id": 856,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 0,
      "paragraph": " Bastian Balthazar Bux is a shy and friendless bibliophile 12-year-old, teased by bullies from school. On his way to school, he hides from the bullies in a bookstore, interrupting the grumpy bookseller, Mr. Coreander. Bastian asks about one of the books he sees, but Mr. Coreander advises against it. His curiosity piqued, Bastian seizes the book, leaving a note promising to return it, and hides in the school's attic to read. The book describes the world of Fantasia slowly being devoured by a force called \"The Nothing\". Fantasia's ruler, the Childlike Empress, has fallen ill, and Atreyu is tasked to discover the cure, believing that once the Empress is well, the Nothing will no longer be a threat. Atreyu is given a medallion named the AURYN that can guide and protect him in the quest. As Atreyu sets out, the Nothing summons Gmork, a wolf-like creature, to kill Atreyu.",
      "question_template": "[[CANDIDATE_ANSWER]] is Katherine McKay.",
      "candidate_answers": [
        "Fantasia slowly being devoured by a force called \"The Nothing\"",
        "The Childlike Empress has fallen ill",
        "Atreyu is tasked to discover the cure"
      ],
      "predicates": [
        "Shy(x) ::: x is a shy person.",
        "Friendless(x) ::: x is a friendless person.",
        "Bibliophile(x) ::: x is a bibliophile.",
        "Teased(x) ::: x is teased by bullies.",
        "Hides(x, y) ::: x hides from y.",
        "Asks(x, y) ::: x asks about y.",
        "AdvisesAgainst(x, y) ::: x advises against y.",
        "Seizes(x, y) ::: x seizes y.",
        "PromisesToReturn(x, y) ::: x promises to return y.",
        "HidesIn(x, y) ::: x hides in y.",
        "Describes(x, y) ::: x describes y.",
        "FallsIll(x) ::: x falls ill.",
        "TaskedToDiscover(x, y) ::: x is tasked to discover y.",
        "Believes(x, y) ::: x believes that y is true.",
        "Given(x, y) ::: x is given y.",
        "SetsOut(x) ::: x sets out on a quest.",
        "Summons(x, y) ::: x summons y.",
        "ToKill(x, y) ::: x is tasked to kill y."
      ],
      "premises": [
        "Shy(bastian) ∧ Friendless(bastian) ∧ Bibliophile(bastian) ∧ Teased(bastian) ::: Bastian Balthazar Bux is a shy and friendless bibliophile 12-year-old, teased by bullies from school.",
        "Hides(bastian, bullies) ::: On his way to school, he hides from the bullies in a bookstore.",
        "Asks(bastian, book) ∧ AdvisesAgainst(coreander, book) ::: Bastian asks about one of the books he sees, but Mr. Coreander advises against it.",
        "Seizes(bastian, book) ∧ PromisesToReturn(bastian, book) ::: Bastian seizes the book, leaving a note promising to return it.",
        "HidesIn(bastian, attic) ::: Bastian hides in the school's attic to read.",
        "Describes(book, fantasia) ::: The book describes the world of Fantasia slowly being devoured by a force called \"The Nothing\".",
        "FallsIll(empress) ::: Fantasia's ruler, the Childlike Empress, has fallen ill.",
        "TaskedToDiscover(atreyu, cure) ::: Atreyu is tasked to discover the cure for the Childlike Empress to stop the Nothing.",
        "Believes(atreyu, empressWell) ::: Atreyu believes that once the Empress is well, the Nothing will no longer be a threat.",
        "Given(atreyu, auryn) ::: Atreyu is given a medallion named the AURYN that can guide and protect him in the quest.",
        "SetsOut(atreyu) ::: As Atreyu sets out, the Nothing summons Gmork.",
        "Summons(nothing, gmork) ::: The Nothing summons Gmork, a wolf-like creature, to kill Atreyu."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 856,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 1,
      "paragraph": "Atreyu's quest directs him to the advisor Morla the Ancient One in the Swamps of Sadness. Though the AURYN protects Atreyu, his beloved horse Artax is lost to the swamp, and he continues alone. Later, Atreyu is surprised by the sudden appearance of Morla, a giant turtle. Bastian, reading, is also surprised and lets out a scream, which Atreyu and Morla appear to hear. Morla does not have the answers Atreyu seeks, but directs him to the Southern Oracle, ten thousand miles distant. Atreyu succumbs to exhaustion trying to escape the Swamps but is saved by the luckdragon Falkor (voiced by Alan Oppenheimer). Falkor takes him to the home of two gnomes that live near the entrance to the Southern Oracle. The gnomes explain that Atreyu will face various trials before reaching the Oracle. Atreyu proceeds to enter the Oracle, and is perplexed when one second trial, a mirror that shows the viewer's true self, reveals a boy which Bastian recognizes as himself. Bastian throws the book aside, but after catching his breath, continues to read. Atreyu eventually meets the Southern Oracle who tells him the only way to save the Empress is to find a human child to give her a new name, beyond the boundaries of Fantasia.",
      "question_template": "[[CANDIDATE_ANSWER]] is Katherine McKay.",
      "candidate_answers": [
        "Fantasia is representative of a realm that requires a human child to give the Empress a new name."
      ],
      "predicates": [
        "Quest(x) ::: x is on a quest.",
        "Advisor(x) ::: x is an advisor.",
        "Protects(x, y) ::: x protects y.",
        "Lost(x, y) ::: x is lost to y.",
        "Surprised(x, y) ::: x is surprised by y.",
        "Hears(x, y) ::: x hears y.",
        "Directs(x, y) ::: x directs y to y.",
        "Succumbs(x, y) ::: x succumbs to y.",
        "SavedBy(x, y) ::: x is saved by y.",
        "Explains(x, y) ::: x explains y.",
        "Faces(x, y) ::: x faces y.",
        "Enters(x, y) ::: x enters y.",
        "Reveals(x, y) ::: x reveals y to y.",
        "Recognizes(x, y) ::: x recognizes y.",
        "ThrowsAside(x, y) ::: x throws aside y.",
        "ContinuesReading(x) ::: x continues to read.",
        "Tells(x, y) ::: x tells y.",
        "Finds(x, y) ::: x finds y.",
        "Gives(x, y, z) ::: x gives y to z."
      ],
      "premises": [
        "Quest(atreyu) ::: Atreyu is on a quest.",
        "Advisor(morla) ::: Morla is an advisor.",
        "Protects(auryn, atreyu) ::: AURYN protects Atreyu.",
        "Lost(artax, swamp) ::: Artax is lost to the Swamps of Sadness.",
        "Surprised(atreyu, morla) ::: Atreyu is surprised by Morla's sudden appearance.",
        "Hears(atreyu, scream) ::: Atreyu hears a scream.",
        "Hears(morla, scream) ::: Morla hears a scream.",
        "Directs(morla, southernOracle) ::: Morla directs Atreyu to the Southern Oracle.",
        "Succumbs(atreyu, exhaustion) ::: Atreyu succumbs to exhaustion.",
        "SavedBy(atreyu, falkor) ::: Atreyu is saved by Falkor.",
        "Explains(gnomes, trials) ::: The gnomes explain that Atreyu will face various trials.",
        "Faces(atreyu, trials) ::: Atreyu faces various trials.",
        "Enters(atreyu, oracle) ::: Atreyu enters the Oracle.",
        "Reveals(mirror, atreyu) ::: The mirror reveals Atreyu's true self.",
        "Recognizes(bastian, himself) ::: Bastian recognizes the boy as himself.",
        "ThrowsAside(bastian, book) ::: Bastian throws the book aside.",
        "ContinuesReading(bastian) ::: Bastian continues to read.",
        "Tells(southernOracle, atreyu) ::: The Southern Oracle tells Atreyu the only way to save the Empress is to find a human child.",
        "Finds(atreyu, humanChild) ::: Atreyu must find a human child.",
        "Gives(atreyu, newName, empress) ::: Atreyu gives a new name to the Empress.",
        "Conclusion:",
        "Finds(atreyu, humanChild) → Gives(atreyu, newName, empress) ::: Atreyu must find a human child to save the Empress by giving her a new name."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 856,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 2,
      "paragraph": "Atreyu and Falkor flee before the Nothing consumes the Southern Oracle. In flight, Atreyu is knocked from Falkor's back into the Sea of Possibilities, losing the AURYN in the process. He wakes on the shore of the abandoned ruins, and finds a series of paintings depicting his quest. Gmork reveals himself, having been lying in wait and explains that Fantasia represents humanity's imagination, and that the Nothing represents adult apathy and cynicism against it. Atreyu fends off and kills Gmork as the Nothing begins to consume the ruins. Falkor, who had managed to locate AURYN, rescues Atreyu in time. The two find themselves in a void with only small fragments of Fantasia remaining, and fear they have failed when they spot the Empress's Ivory Tower among the fragment. Inside, Atreyu apologizes for failing the Empress, but she assures him he has succeeded in bringing to her a human child who has been following his quest. As the Nothing begins to consume the Tower, the Empress pleas directly to Bastian to call out her new name. Bastian calls out the name he had selected, and loses consciousness.",
      "question_template": "[[CANDIDATE_ANSWER]] is Katherine McKay.",
      "candidate_answers": [
        "Fantasia represents humanity's imagination"
      ],
      "predicates": [
        "HumanChild(x) ::: x is a human child.",
        "Succeed(x, y) ::: x has succeeded in y.",
        "Brings(x, y, z) ::: x brings y to z.",
        "CallsOut(x, y) ::: x calls out y.",
        "LosesConsciousness(x) ::: x loses consciousness.",
        "ConsumedByNothing(x) ::: x is consumed by the Nothing.",
        "InLocation(x, y) ::: x is in location y.",
        "Flee(x, y) ::: x flees from y.",
        "KnockedFrom(x, y) ::: x is knocked from y.",
        "Finds(x, y) ::: x finds y.",
        "Reveals(x, y) ::: x reveals y.",
        "FendsOff(x, y) ::: x fends off y.",
        "Rescues(x, y) ::: x rescues y."
      ],
      "premises": [
        "Flee(atreyu, nothing) ::: Atreyu and Falkor flee before the Nothing consumes the Southern Oracle.",
        "KnockedFrom(atreyu, falkor) ::: Atreyu is knocked from Falkor's back into the Sea of Possibilities.",
        "Finds(atreyu, paintings) ::: Atreyu finds a series of paintings depicting his quest.",
        "Reveals(gmork, humanityImagination) ::: Gmork reveals that Fantasia represents humanity's imagination.",
        "ConsumedByNothing(ruins) ::: The Nothing begins to consume the ruins.",
        "FendsOff(atreyu, gmork) ::: Atreyu fends off and kills Gmork.",
        "Rescues(falkor, atreyu) ::: Falkor rescues Atreyu in time.",
        "InLocation(atreyu, ivoryTower) ::: Atreyu is in the Empress's Ivory Tower.",
        "Succeed(atreyu, quest) ::: The Empress assures Atreyu that he has succeeded in his quest.",
        "Brings(atreyu, humanChild, empress) ::: Atreyu brings a human child to the Empress.",
        "CallsOut(bastian, newName) ::: Bastian calls out the name he had selected.",
        "LosesConsciousness(bastian) ::: Bastian loses consciousness.",
        "ConsumedByNothing(tower) ::: The Nothing begins to consume the Tower.",
        "Conclusion:",
        "HumanChild(bastian) ::: Bastian is a human child.",
        "Succeed(atreyu, quest) ::: Atreyu has succeeded in his quest."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "858": [
    {
      "id": 858,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 0,
      "paragraph": " Bastian Balthazar Bux is a shy and friendless bibliophile 12-year-old, teased by bullies from school. On his way to school, he hides from the bullies in a bookstore, interrupting the grumpy bookseller, Mr. Coreander. Bastian asks about one of the books he sees, but Mr. Coreander advises against it. His curiosity piqued, Bastian seizes the book, leaving a note promising to return it, and hides in the school's attic to read. The book describes the world of Fantasia slowly being devoured by a force called \"The Nothing\". Fantasia's ruler, the Childlike Empress, has fallen ill, and Atreyu is tasked to discover the cure, believing that once the Empress is well, the Nothing will no longer be a threat. Atreyu is given a medallion named the AURYN that can guide and protect him in the quest. As Atreyu sets out, the Nothing summons Gmork, a wolf-like creature, to kill Atreyu.",
      "question_template": "[[CANDIDATE_ANSWER]] is involved in Kyle's car the night before his surgery.",
      "candidate_answers": [
        "The world of Fantasia slowly being devoured by a force called \"The Nothing\"",
        "Fantasia's ruler, the Childlike Empress, has fallen ill"
      ],
      "predicates": [
        "Shy(x) ::: x is a shy person.",
        "Friendless(x) ::: x is a friendless person.",
        "Bibliophile(x) ::: x is a bibliophile.",
        "Teased(x) ::: x is teased by bullies.",
        "Hides(x, y) ::: x hides from y.",
        "Asks(x, y) ::: x asks about y.",
        "AdvisesAgainst(x, y) ::: x advises against y.",
        "Seizes(x, y) ::: x seizes y.",
        "PromisesToReturn(x, y) ::: x promises to return y.",
        "HidesIn(x, y) ::: x hides in y.",
        "Describes(x, y) ::: x describes y.",
        "FallsIll(x) ::: x falls ill.",
        "TaskedToDiscover(x, y) ::: x is tasked to discover y.",
        "Believes(x, y) ::: x believes that y is true.",
        "Given(x, y) ::: x is given y.",
        "SetsOut(x) ::: x sets out on a quest.",
        "Summons(x, y) ::: x summons y.",
        "ToKill(x, y) ::: x is tasked to kill y."
      ],
      "premises": [
        "Shy(bastian) ∧ Friendless(bastian) ∧ Bibliophile(bastian) ∧ Teased(bastian) ::: Bastian Balthazar Bux is a shy and friendless bibliophile 12-year-old, teased by bullies from school.",
        "Hides(bastian, bullies) ::: On his way to school, he hides from the bullies in a bookstore.",
        "Asks(bastian, book) ∧ AdvisesAgainst(coreander, book) ::: Bastian asks about one of the books he sees, but Mr. Coreander advises against it.",
        "Seizes(bastian, book) ∧ PromisesToReturn(bastian, book) ::: Bastian seizes the book, leaving a note promising to return it.",
        "HidesIn(bastian, attic) ::: Bastian hides in the school's attic to read.",
        "Describes(book, fantasia) ::: The book describes the world of Fantasia slowly being devoured by a force called \"The Nothing\".",
        "FallsIll(empress) ::: Fantasia's ruler, the Childlike Empress, has fallen ill.",
        "TaskedToDiscover(atreyu, cure) ::: Atreyu is tasked to discover the cure for the Childlike Empress to stop the Nothing.",
        "Believes(atreyu, empressWell) ::: Atreyu believes that once the Empress is well, the Nothing will no longer be a threat.",
        "Given(atreyu, auryn) ::: Atreyu is given a medallion named the AURYN that can guide and protect him in the quest.",
        "SetsOut(atreyu) ::: As Atreyu sets out, the Nothing summons Gmork.",
        "Summons(nothing, gmork) ::: The Nothing summons Gmork, a wolf-like creature, to kill Atreyu."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "860": [
    {
      "id": 860,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 1,
      "paragraph": "Atreyu's quest directs him to the advisor Morla the Ancient One in the Swamps of Sadness. Though the AURYN protects Atreyu, his beloved horse Artax is lost to the swamp, and he continues alone. Later, Atreyu is surprised by the sudden appearance of Morla, a giant turtle. Bastian, reading, is also surprised and lets out a scream, which Atreyu and Morla appear to hear. Morla does not have the answers Atreyu seeks, but directs him to the Southern Oracle, ten thousand miles distant. Atreyu succumbs to exhaustion trying to escape the Swamps but is saved by the luckdragon Falkor (voiced by Alan Oppenheimer). Falkor takes him to the home of two gnomes that live near the entrance to the Southern Oracle. The gnomes explain that Atreyu will face various trials before reaching the Oracle. Atreyu proceeds to enter the Oracle, and is perplexed when one second trial, a mirror that shows the viewer's true self, reveals a boy which Bastian recognizes as himself. Bastian throws the book aside, but after catching his breath, continues to read. Atreyu eventually meets the Southern Oracle who tells him the only way to save the Empress is to find a human child to give her a new name, beyond the boundaries of Fantasia.",
      "question_template": "Adam's job is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Fantasia"
      ],
      "predicates": [
        "Quest(x) ::: x is on a quest.",
        "Advisor(x) ::: x is an advisor.",
        "Protects(x, y) ::: x protects y.",
        "Lost(x, y) ::: x is lost to y.",
        "Surprised(x, y) ::: x is surprised by y.",
        "Hears(x, y) ::: x hears y.",
        "Directs(x, y) ::: x directs y to y.",
        "Succumbs(x, y) ::: x succumbs to y.",
        "SavedBy(x, y) ::: x is saved by y.",
        "Explains(x, y) ::: x explains y.",
        "Faces(x, y) ::: x faces y.",
        "Enters(x, y) ::: x enters y.",
        "Reveals(x, y) ::: x reveals y to y.",
        "Recognizes(x, y) ::: x recognizes y.",
        "ThrowsAside(x, y) ::: x throws aside y.",
        "ContinuesReading(x) ::: x continues to read.",
        "Tells(x, y) ::: x tells y.",
        "Finds(x, y) ::: x finds y.",
        "Gives(x, y, z) ::: x gives y to z."
      ],
      "premises": [
        "Quest(atreyu) ::: Atreyu is on a quest.",
        "Advisor(morla) ::: Morla is an advisor.",
        "Protects(auryn, atreyu) ::: AURYN protects Atreyu.",
        "Lost(artax, swamp) ::: Artax is lost to the Swamps of Sadness.",
        "Surprised(atreyu, morla) ::: Atreyu is surprised by Morla's sudden appearance.",
        "Hears(atreyu, scream) ::: Atreyu hears a scream.",
        "Hears(morla, scream) ::: Morla hears a scream.",
        "Directs(morla, southernOracle) ::: Morla directs Atreyu to the Southern Oracle.",
        "Succumbs(atreyu, exhaustion) ::: Atreyu succumbs to exhaustion.",
        "SavedBy(atreyu, falkor) ::: Atreyu is saved by Falkor.",
        "Explains(gnomes, trials) ::: The gnomes explain that Atreyu will face various trials.",
        "Faces(atreyu, trials) ::: Atreyu faces various trials.",
        "Enters(atreyu, oracle) ::: Atreyu enters the Oracle.",
        "Reveals(mirror, atreyu) ::: The mirror reveals Atreyu's true self.",
        "Recognizes(bastian, himself) ::: Bastian recognizes the boy as himself.",
        "ThrowsAside(bastian, book) ::: Bastian throws the book aside.",
        "ContinuesReading(bastian) ::: Bastian continues to read.",
        "Tells(southernOracle, atreyu) ::: The Southern Oracle tells Atreyu the only way to save the Empress is to find a human child.",
        "Finds(atreyu, humanChild) ::: Atreyu must find a human child.",
        "Gives(atreyu, newName, empress) ::: Atreyu gives a new name to the Empress.",
        "Conclusion:",
        "Finds(atreyu, humanChild) → Gives(atreyu, newName, empress) ::: Atreyu must find a human child to save the Empress by giving her a new name."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 860,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 2,
      "paragraph": "Atreyu and Falkor flee before the Nothing consumes the Southern Oracle. In flight, Atreyu is knocked from Falkor's back into the Sea of Possibilities, losing the AURYN in the process. He wakes on the shore of the abandoned ruins, and finds a series of paintings depicting his quest. Gmork reveals himself, having been lying in wait and explains that Fantasia represents humanity's imagination, and that the Nothing represents adult apathy and cynicism against it. Atreyu fends off and kills Gmork as the Nothing begins to consume the ruins. Falkor, who had managed to locate AURYN, rescues Atreyu in time. The two find themselves in a void with only small fragments of Fantasia remaining, and fear they have failed when they spot the Empress's Ivory Tower among the fragment. Inside, Atreyu apologizes for failing the Empress, but she assures him he has succeeded in bringing to her a human child who has been following his quest. As the Nothing begins to consume the Tower, the Empress pleas directly to Bastian to call out her new name. Bastian calls out the name he had selected, and loses consciousness.",
      "question_template": "Adam's job is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Fantasia"
      ],
      "predicates": [
        "HumanChild(x) ::: x is a human child.",
        "Succeed(x, y) ::: x has succeeded in y.",
        "Brings(x, y, z) ::: x brings y to z.",
        "CallsOut(x, y) ::: x calls out y.",
        "LosesConsciousness(x) ::: x loses consciousness.",
        "ConsumedByNothing(x) ::: x is consumed by the Nothing.",
        "InLocation(x, y) ::: x is in location y.",
        "Flee(x, y) ::: x flees from y.",
        "KnockedFrom(x, y) ::: x is knocked from y.",
        "Finds(x, y) ::: x finds y.",
        "Reveals(x, y) ::: x reveals y.",
        "FendsOff(x, y) ::: x fends off y.",
        "Rescues(x, y) ::: x rescues y."
      ],
      "premises": [
        "Flee(atreyu, nothing) ::: Atreyu and Falkor flee before the Nothing consumes the Southern Oracle.",
        "KnockedFrom(atreyu, falkor) ::: Atreyu is knocked from Falkor's back into the Sea of Possibilities.",
        "Finds(atreyu, paintings) ::: Atreyu finds a series of paintings depicting his quest.",
        "Reveals(gmork, humanityImagination) ::: Gmork reveals that Fantasia represents humanity's imagination.",
        "ConsumedByNothing(ruins) ::: The Nothing begins to consume the ruins.",
        "FendsOff(atreyu, gmork) ::: Atreyu fends off and kills Gmork.",
        "Rescues(falkor, atreyu) ::: Falkor rescues Atreyu in time.",
        "InLocation(atreyu, ivoryTower) ::: Atreyu is in the Empress's Ivory Tower.",
        "Succeed(atreyu, quest) ::: The Empress assures Atreyu that he has succeeded in his quest.",
        "Brings(atreyu, humanChild, empress) ::: Atreyu brings a human child to the Empress.",
        "CallsOut(bastian, newName) ::: Bastian calls out the name he had selected.",
        "LosesConsciousness(bastian) ::: Bastian loses consciousness.",
        "ConsumedByNothing(tower) ::: The Nothing begins to consume the Tower.",
        "Conclusion:",
        "HumanChild(bastian) ::: Bastian is a human child.",
        "Succeed(atreyu, quest) ::: Atreyu has succeeded in his quest."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "861": [
    {
      "id": 861,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 2,
      "paragraph": "Atreyu and Falkor flee before the Nothing consumes the Southern Oracle. In flight, Atreyu is knocked from Falkor's back into the Sea of Possibilities, losing the AURYN in the process. He wakes on the shore of the abandoned ruins, and finds a series of paintings depicting his quest. Gmork reveals himself, having been lying in wait and explains that Fantasia represents humanity's imagination, and that the Nothing represents adult apathy and cynicism against it. Atreyu fends off and kills Gmork as the Nothing begins to consume the ruins. Falkor, who had managed to locate AURYN, rescues Atreyu in time. The two find themselves in a void with only small fragments of Fantasia remaining, and fear they have failed when they spot the Empress's Ivory Tower among the fragment. Inside, Atreyu apologizes for failing the Empress, but she assures him he has succeeded in bringing to her a human child who has been following his quest. As the Nothing begins to consume the Tower, the Empress pleas directly to Bastian to call out her new name. Bastian calls out the name he had selected, and loses consciousness.",
      "question_template": "Adam breaks up with Rachael because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The Nothing",
        "Adult apathy and cynicism against it"
      ],
      "predicates": [
        "HumanChild(x) ::: x is a human child.",
        "Succeed(x, y) ::: x has succeeded in y.",
        "Brings(x, y, z) ::: x brings y to z.",
        "CallsOut(x, y) ::: x calls out y.",
        "LosesConsciousness(x) ::: x loses consciousness.",
        "ConsumedByNothing(x) ::: x is consumed by the Nothing.",
        "InLocation(x, y) ::: x is in location y.",
        "Flee(x, y) ::: x flees from y.",
        "KnockedFrom(x, y) ::: x is knocked from y.",
        "Finds(x, y) ::: x finds y.",
        "Reveals(x, y) ::: x reveals y.",
        "FendsOff(x, y) ::: x fends off y.",
        "Rescues(x, y) ::: x rescues y."
      ],
      "premises": [
        "Flee(atreyu, nothing) ::: Atreyu and Falkor flee before the Nothing consumes the Southern Oracle.",
        "KnockedFrom(atreyu, falkor) ::: Atreyu is knocked from Falkor's back into the Sea of Possibilities.",
        "Finds(atreyu, paintings) ::: Atreyu finds a series of paintings depicting his quest.",
        "Reveals(gmork, humanityImagination) ::: Gmork reveals that Fantasia represents humanity's imagination.",
        "ConsumedByNothing(ruins) ::: The Nothing begins to consume the ruins.",
        "FendsOff(atreyu, gmork) ::: Atreyu fends off and kills Gmork.",
        "Rescues(falkor, atreyu) ::: Falkor rescues Atreyu in time.",
        "InLocation(atreyu, ivoryTower) ::: Atreyu is in the Empress's Ivory Tower.",
        "Succeed(atreyu, quest) ::: The Empress assures Atreyu that he has succeeded in his quest.",
        "Brings(atreyu, humanChild, empress) ::: Atreyu brings a human child to the Empress.",
        "CallsOut(bastian, newName) ::: Bastian calls out the name he had selected.",
        "LosesConsciousness(bastian) ::: Bastian loses consciousness.",
        "ConsumedByNothing(tower) ::: The Nothing begins to consume the Tower.",
        "Conclusion:",
        "HumanChild(bastian) ::: Bastian is a human child.",
        "Succeed(atreyu, quest) ::: Atreyu has succeeded in his quest."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 861,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 3,
      "paragraph": "When he wakes, he finds himself in blackness with the Empress, with only a grain of sand the last bit of Fantasia remaining. The Empress tells Bastian that he has the power to bring Fantasia back with his imagination using the power of the AURYN. Bastian re-creates Fantasia, and as he flies on Falkor's back, he sees the land and its inhabitants restored, and that Atreyu has been reunited with Artax. When Falkor tells him he can wish for anything, Bastian then brings Falkor back to the real world to chase down the bullies from before. The film ends with the narration that Bastian had many more wishes and adventures, and adds: \"but that's another story\".",
      "question_template": "Adam breaks up with Rachael because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The last bit of Fantasia remaining",
        "The power of the AURYN"
      ],
      "predicates": [
        "PowerToRestore(x) ::: x has the power to bring Fantasia back.",
        "Imagination(x) ::: x uses imagination.",
        "WishForAnything(x) ::: x can wish for anything.",
        "Restored(c) ::: c is restored.",
        "Reunited(x, y) ::: x is reunited with y.",
        "InBlackness(x) ::: x is in blackness.",
        "FliesOn(x, y) ::: x flies on the back of y.",
        "ChaseDown(x, y) ::: x chases down y."
      ],
      "premises": [
        "PowerToRestore(a_1) ∧ Imagination(a_1) ∧ PowerToRestore(a_1) ::: Bastian has the power to bring Fantasia back with his imagination using the power of the AURYN.",
        "WishForAnything(a_1) ::: Bastian can wish for anything.",
        "Restored(c_1) ::: Fantasia is restored.",
        "Reunited(a_3, a_2) ::: Atreyu has been reunited with Artax.",
        "InBlackness(a_1) ::: Bastian finds himself in blackness.",
        "FliesOn(a_1, b_1) ::: Bastian flies on Falkor's back.",
        "ChaseDown(a_1, e) ::: Bastian chases down the bullies.",
        "Conclusion:",
        "Restored(c_1) ::: Fantasia has been restored."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "862": [
    {
      "id": 862,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 0,
      "paragraph": " Bastian Balthazar Bux is a shy and friendless bibliophile 12-year-old, teased by bullies from school. On his way to school, he hides from the bullies in a bookstore, interrupting the grumpy bookseller, Mr. Coreander. Bastian asks about one of the books he sees, but Mr. Coreander advises against it. His curiosity piqued, Bastian seizes the book, leaving a note promising to return it, and hides in the school's attic to read. The book describes the world of Fantasia slowly being devoured by a force called \"The Nothing\". Fantasia's ruler, the Childlike Empress, has fallen ill, and Atreyu is tasked to discover the cure, believing that once the Empress is well, the Nothing will no longer be a threat. Atreyu is given a medallion named the AURYN that can guide and protect him in the quest. As Atreyu sets out, the Nothing summons Gmork, a wolf-like creature, to kill Atreyu.",
      "question_template": "Kyle is secretly showing his support for Adam by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Atreyu is tasked to discover the cure",
        "Atreyu"
      ],
      "predicates": [
        "Shy(x) ::: x is a shy person.",
        "Friendless(x) ::: x is a friendless person.",
        "Bibliophile(x) ::: x is a bibliophile.",
        "Teased(x) ::: x is teased by bullies.",
        "Hides(x, y) ::: x hides from y.",
        "Asks(x, y) ::: x asks about y.",
        "AdvisesAgainst(x, y) ::: x advises against y.",
        "Seizes(x, y) ::: x seizes y.",
        "PromisesToReturn(x, y) ::: x promises to return y.",
        "HidesIn(x, y) ::: x hides in y.",
        "Describes(x, y) ::: x describes y.",
        "FallsIll(x) ::: x falls ill.",
        "TaskedToDiscover(x, y) ::: x is tasked to discover y.",
        "Believes(x, y) ::: x believes that y is true.",
        "Given(x, y) ::: x is given y.",
        "SetsOut(x) ::: x sets out on a quest.",
        "Summons(x, y) ::: x summons y.",
        "ToKill(x, y) ::: x is tasked to kill y."
      ],
      "premises": [
        "Shy(bastian) ∧ Friendless(bastian) ∧ Bibliophile(bastian) ∧ Teased(bastian) ::: Bastian Balthazar Bux is a shy and friendless bibliophile 12-year-old, teased by bullies from school.",
        "Hides(bastian, bullies) ::: On his way to school, he hides from the bullies in a bookstore.",
        "Asks(bastian, book) ∧ AdvisesAgainst(coreander, book) ::: Bastian asks about one of the books he sees, but Mr. Coreander advises against it.",
        "Seizes(bastian, book) ∧ PromisesToReturn(bastian, book) ::: Bastian seizes the book, leaving a note promising to return it.",
        "HidesIn(bastian, attic) ::: Bastian hides in the school's attic to read.",
        "Describes(book, fantasia) ::: The book describes the world of Fantasia slowly being devoured by a force called \"The Nothing\".",
        "FallsIll(empress) ::: Fantasia's ruler, the Childlike Empress, has fallen ill.",
        "TaskedToDiscover(atreyu, cure) ::: Atreyu is tasked to discover the cure for the Childlike Empress to stop the Nothing.",
        "Believes(atreyu, empressWell) ::: Atreyu believes that once the Empress is well, the Nothing will no longer be a threat.",
        "Given(atreyu, auryn) ::: Atreyu is given a medallion named the AURYN that can guide and protect him in the quest.",
        "SetsOut(atreyu) ::: As Atreyu sets out, the Nothing summons Gmork.",
        "Summons(nothing, gmork) ::: The Nothing summons Gmork, a wolf-like creature, to kill Atreyu."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 862,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 3,
      "paragraph": "When he wakes, he finds himself in blackness with the Empress, with only a grain of sand the last bit of Fantasia remaining. The Empress tells Bastian that he has the power to bring Fantasia back with his imagination using the power of the AURYN. Bastian re-creates Fantasia, and as he flies on Falkor's back, he sees the land and its inhabitants restored, and that Atreyu has been reunited with Artax. When Falkor tells him he can wish for anything, Bastian then brings Falkor back to the real world to chase down the bullies from before. The film ends with the narration that Bastian had many more wishes and adventures, and adds: \"but that's another story\".",
      "question_template": "Kyle is secretly showing his support for Adam by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The Empress",
        "Bastian",
        "Atreyu"
      ],
      "predicates": [
        "PowerToRestore(x) ::: x has the power to bring Fantasia back.",
        "Imagination(x) ::: x uses imagination.",
        "WishForAnything(x) ::: x can wish for anything.",
        "Restored(c) ::: c is restored.",
        "Reunited(x, y) ::: x is reunited with y.",
        "InBlackness(x) ::: x is in blackness.",
        "FliesOn(x, y) ::: x flies on the back of y.",
        "ChaseDown(x, y) ::: x chases down y."
      ],
      "premises": [
        "PowerToRestore(a_1) ∧ Imagination(a_1) ∧ PowerToRestore(a_1) ::: Bastian has the power to bring Fantasia back with his imagination using the power of the AURYN.",
        "WishForAnything(a_1) ::: Bastian can wish for anything.",
        "Restored(c_1) ::: Fantasia is restored.",
        "Reunited(a_3, a_2) ::: Atreyu has been reunited with Artax.",
        "InBlackness(a_1) ::: Bastian finds himself in blackness.",
        "FliesOn(a_1, b_1) ::: Bastian flies on Falkor's back.",
        "ChaseDown(a_1, e) ::: Bastian chases down the bullies.",
        "Conclusion:",
        "Restored(c_1) ::: Fantasia has been restored."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "863": [
    {
      "id": 863,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 0,
      "paragraph": " Bastian Balthazar Bux is a shy and friendless bibliophile 12-year-old, teased by bullies from school. On his way to school, he hides from the bullies in a bookstore, interrupting the grumpy bookseller, Mr. Coreander. Bastian asks about one of the books he sees, but Mr. Coreander advises against it. His curiosity piqued, Bastian seizes the book, leaving a note promising to return it, and hides in the school's attic to read. The book describes the world of Fantasia slowly being devoured by a force called \"The Nothing\". Fantasia's ruler, the Childlike Empress, has fallen ill, and Atreyu is tasked to discover the cure, believing that once the Empress is well, the Nothing will no longer be a threat. Atreyu is given a medallion named the AURYN that can guide and protect him in the quest. As Atreyu sets out, the Nothing summons Gmork, a wolf-like creature, to kill Atreyu.",
      "question_template": "Rachael gets Adam [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "AURYN"
      ],
      "predicates": [
        "Shy(x) ::: x is a shy person.",
        "Friendless(x) ::: x is a friendless person.",
        "Bibliophile(x) ::: x is a bibliophile.",
        "Teased(x) ::: x is teased by bullies.",
        "Hides(x, y) ::: x hides from y.",
        "Asks(x, y) ::: x asks about y.",
        "AdvisesAgainst(x, y) ::: x advises against y.",
        "Seizes(x, y) ::: x seizes y.",
        "PromisesToReturn(x, y) ::: x promises to return y.",
        "HidesIn(x, y) ::: x hides in y.",
        "Describes(x, y) ::: x describes y.",
        "FallsIll(x) ::: x falls ill.",
        "TaskedToDiscover(x, y) ::: x is tasked to discover y.",
        "Believes(x, y) ::: x believes that y is true.",
        "Given(x, y) ::: x is given y.",
        "SetsOut(x) ::: x sets out on a quest.",
        "Summons(x, y) ::: x summons y.",
        "ToKill(x, y) ::: x is tasked to kill y."
      ],
      "premises": [
        "Shy(bastian) ∧ Friendless(bastian) ∧ Bibliophile(bastian) ∧ Teased(bastian) ::: Bastian Balthazar Bux is a shy and friendless bibliophile 12-year-old, teased by bullies from school.",
        "Hides(bastian, bullies) ::: On his way to school, he hides from the bullies in a bookstore.",
        "Asks(bastian, book) ∧ AdvisesAgainst(coreander, book) ::: Bastian asks about one of the books he sees, but Mr. Coreander advises against it.",
        "Seizes(bastian, book) ∧ PromisesToReturn(bastian, book) ::: Bastian seizes the book, leaving a note promising to return it.",
        "HidesIn(bastian, attic) ::: Bastian hides in the school's attic to read.",
        "Describes(book, fantasia) ::: The book describes the world of Fantasia slowly being devoured by a force called \"The Nothing\".",
        "FallsIll(empress) ::: Fantasia's ruler, the Childlike Empress, has fallen ill.",
        "TaskedToDiscover(atreyu, cure) ::: Atreyu is tasked to discover the cure for the Childlike Empress to stop the Nothing.",
        "Believes(atreyu, empressWell) ::: Atreyu believes that once the Empress is well, the Nothing will no longer be a threat.",
        "Given(atreyu, auryn) ::: Atreyu is given a medallion named the AURYN that can guide and protect him in the quest.",
        "SetsOut(atreyu) ::: As Atreyu sets out, the Nothing summons Gmork.",
        "Summons(nothing, gmork) ::: The Nothing summons Gmork, a wolf-like creature, to kill Atreyu."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 863,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 1,
      "paragraph": "Atreyu's quest directs him to the advisor Morla the Ancient One in the Swamps of Sadness. Though the AURYN protects Atreyu, his beloved horse Artax is lost to the swamp, and he continues alone. Later, Atreyu is surprised by the sudden appearance of Morla, a giant turtle. Bastian, reading, is also surprised and lets out a scream, which Atreyu and Morla appear to hear. Morla does not have the answers Atreyu seeks, but directs him to the Southern Oracle, ten thousand miles distant. Atreyu succumbs to exhaustion trying to escape the Swamps but is saved by the luckdragon Falkor (voiced by Alan Oppenheimer). Falkor takes him to the home of two gnomes that live near the entrance to the Southern Oracle. The gnomes explain that Atreyu will face various trials before reaching the Oracle. Atreyu proceeds to enter the Oracle, and is perplexed when one second trial, a mirror that shows the viewer's true self, reveals a boy which Bastian recognizes as himself. Bastian throws the book aside, but after catching his breath, continues to read. Atreyu eventually meets the Southern Oracle who tells him the only way to save the Empress is to find a human child to give her a new name, beyond the boundaries of Fantasia.",
      "question_template": "Rachael gets Adam [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "AURYN"
      ],
      "predicates": [
        "Quest(x) ::: x is on a quest.",
        "Advisor(x) ::: x is an advisor.",
        "Protects(x, y) ::: x protects y.",
        "Lost(x, y) ::: x is lost to y.",
        "Surprised(x, y) ::: x is surprised by y.",
        "Hears(x, y) ::: x hears y.",
        "Directs(x, y) ::: x directs y to y.",
        "Succumbs(x, y) ::: x succumbs to y.",
        "SavedBy(x, y) ::: x is saved by y.",
        "Explains(x, y) ::: x explains y.",
        "Faces(x, y) ::: x faces y.",
        "Enters(x, y) ::: x enters y.",
        "Reveals(x, y) ::: x reveals y to y.",
        "Recognizes(x, y) ::: x recognizes y.",
        "ThrowsAside(x, y) ::: x throws aside y.",
        "ContinuesReading(x) ::: x continues to read.",
        "Tells(x, y) ::: x tells y.",
        "Finds(x, y) ::: x finds y.",
        "Gives(x, y, z) ::: x gives y to z."
      ],
      "premises": [
        "Quest(atreyu) ::: Atreyu is on a quest.",
        "Advisor(morla) ::: Morla is an advisor.",
        "Protects(auryn, atreyu) ::: AURYN protects Atreyu.",
        "Lost(artax, swamp) ::: Artax is lost to the Swamps of Sadness.",
        "Surprised(atreyu, morla) ::: Atreyu is surprised by Morla's sudden appearance.",
        "Hears(atreyu, scream) ::: Atreyu hears a scream.",
        "Hears(morla, scream) ::: Morla hears a scream.",
        "Directs(morla, southernOracle) ::: Morla directs Atreyu to the Southern Oracle.",
        "Succumbs(atreyu, exhaustion) ::: Atreyu succumbs to exhaustion.",
        "SavedBy(atreyu, falkor) ::: Atreyu is saved by Falkor.",
        "Explains(gnomes, trials) ::: The gnomes explain that Atreyu will face various trials.",
        "Faces(atreyu, trials) ::: Atreyu faces various trials.",
        "Enters(atreyu, oracle) ::: Atreyu enters the Oracle.",
        "Reveals(mirror, atreyu) ::: The mirror reveals Atreyu's true self.",
        "Recognizes(bastian, himself) ::: Bastian recognizes the boy as himself.",
        "ThrowsAside(bastian, book) ::: Bastian throws the book aside.",
        "ContinuesReading(bastian) ::: Bastian continues to read.",
        "Tells(southernOracle, atreyu) ::: The Southern Oracle tells Atreyu the only way to save the Empress is to find a human child.",
        "Finds(atreyu, humanChild) ::: Atreyu must find a human child.",
        "Gives(atreyu, newName, empress) ::: Atreyu gives a new name to the Empress.",
        "Conclusion:",
        "Finds(atreyu, humanChild) → Gives(atreyu, newName, empress) ::: Atreyu must find a human child to save the Empress by giving her a new name."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 863,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 2,
      "paragraph": "Atreyu and Falkor flee before the Nothing consumes the Southern Oracle. In flight, Atreyu is knocked from Falkor's back into the Sea of Possibilities, losing the AURYN in the process. He wakes on the shore of the abandoned ruins, and finds a series of paintings depicting his quest. Gmork reveals himself, having been lying in wait and explains that Fantasia represents humanity's imagination, and that the Nothing represents adult apathy and cynicism against it. Atreyu fends off and kills Gmork as the Nothing begins to consume the ruins. Falkor, who had managed to locate AURYN, rescues Atreyu in time. The two find themselves in a void with only small fragments of Fantasia remaining, and fear they have failed when they spot the Empress's Ivory Tower among the fragment. Inside, Atreyu apologizes for failing the Empress, but she assures him he has succeeded in bringing to her a human child who has been following his quest. As the Nothing begins to consume the Tower, the Empress pleas directly to Bastian to call out her new name. Bastian calls out the name he had selected, and loses consciousness.",
      "question_template": "Rachael gets Adam [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "AURYN"
      ],
      "predicates": [
        "HumanChild(x) ::: x is a human child.",
        "Succeed(x, y) ::: x has succeeded in y.",
        "Brings(x, y, z) ::: x brings y to z.",
        "CallsOut(x, y) ::: x calls out y.",
        "LosesConsciousness(x) ::: x loses consciousness.",
        "ConsumedByNothing(x) ::: x is consumed by the Nothing.",
        "InLocation(x, y) ::: x is in location y.",
        "Flee(x, y) ::: x flees from y.",
        "KnockedFrom(x, y) ::: x is knocked from y.",
        "Finds(x, y) ::: x finds y.",
        "Reveals(x, y) ::: x reveals y.",
        "FendsOff(x, y) ::: x fends off y.",
        "Rescues(x, y) ::: x rescues y."
      ],
      "premises": [
        "Flee(atreyu, nothing) ::: Atreyu and Falkor flee before the Nothing consumes the Southern Oracle.",
        "KnockedFrom(atreyu, falkor) ::: Atreyu is knocked from Falkor's back into the Sea of Possibilities.",
        "Finds(atreyu, paintings) ::: Atreyu finds a series of paintings depicting his quest.",
        "Reveals(gmork, humanityImagination) ::: Gmork reveals that Fantasia represents humanity's imagination.",
        "ConsumedByNothing(ruins) ::: The Nothing begins to consume the ruins.",
        "FendsOff(atreyu, gmork) ::: Atreyu fends off and kills Gmork.",
        "Rescues(falkor, atreyu) ::: Falkor rescues Atreyu in time.",
        "InLocation(atreyu, ivoryTower) ::: Atreyu is in the Empress's Ivory Tower.",
        "Succeed(atreyu, quest) ::: The Empress assures Atreyu that he has succeeded in his quest.",
        "Brings(atreyu, humanChild, empress) ::: Atreyu brings a human child to the Empress.",
        "CallsOut(bastian, newName) ::: Bastian calls out the name he had selected.",
        "LosesConsciousness(bastian) ::: Bastian loses consciousness.",
        "ConsumedByNothing(tower) ::: The Nothing begins to consume the Tower.",
        "Conclusion:",
        "HumanChild(bastian) ::: Bastian is a human child.",
        "Succeed(atreyu, quest) ::: Atreyu has succeeded in his quest."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 863,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 3,
      "paragraph": "When he wakes, he finds himself in blackness with the Empress, with only a grain of sand the last bit of Fantasia remaining. The Empress tells Bastian that he has the power to bring Fantasia back with his imagination using the power of the AURYN. Bastian re-creates Fantasia, and as he flies on Falkor's back, he sees the land and its inhabitants restored, and that Atreyu has been reunited with Artax. When Falkor tells him he can wish for anything, Bastian then brings Falkor back to the real world to chase down the bullies from before. The film ends with the narration that Bastian had many more wishes and adventures, and adds: \"but that's another story\".",
      "question_template": "Rachael gets Adam [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "AURYN"
      ],
      "predicates": [
        "PowerToRestore(x) ::: x has the power to bring Fantasia back.",
        "Imagination(x) ::: x uses imagination.",
        "WishForAnything(x) ::: x can wish for anything.",
        "Restored(c) ::: c is restored.",
        "Reunited(x, y) ::: x is reunited with y.",
        "InBlackness(x) ::: x is in blackness.",
        "FliesOn(x, y) ::: x flies on the back of y.",
        "ChaseDown(x, y) ::: x chases down y."
      ],
      "premises": [
        "PowerToRestore(a_1) ∧ Imagination(a_1) ∧ PowerToRestore(a_1) ::: Bastian has the power to bring Fantasia back with his imagination using the power of the AURYN.",
        "WishForAnything(a_1) ::: Bastian can wish for anything.",
        "Restored(c_1) ::: Fantasia is restored.",
        "Reunited(a_3, a_2) ::: Atreyu has been reunited with Artax.",
        "InBlackness(a_1) ::: Bastian finds himself in blackness.",
        "FliesOn(a_1, b_1) ::: Bastian flies on Falkor's back.",
        "ChaseDown(a_1, e) ::: Bastian chases down the bullies.",
        "Conclusion:",
        "Restored(c_1) ::: Fantasia has been restored."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "864": [
    {
      "id": 864,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 0,
      "paragraph": " Bastian Balthazar Bux is a shy and friendless bibliophile 12-year-old, teased by bullies from school. On his way to school, he hides from the bullies in a bookstore, interrupting the grumpy bookseller, Mr. Coreander. Bastian asks about one of the books he sees, but Mr. Coreander advises against it. His curiosity piqued, Bastian seizes the book, leaving a note promising to return it, and hides in the school's attic to read. The book describes the world of Fantasia slowly being devoured by a force called \"The Nothing\". Fantasia's ruler, the Childlike Empress, has fallen ill, and Atreyu is tasked to discover the cure, believing that once the Empress is well, the Nothing will no longer be a threat. Atreyu is given a medallion named the AURYN that can guide and protect him in the quest. As Atreyu sets out, the Nothing summons Gmork, a wolf-like creature, to kill Atreyu.",
      "question_template": "Adam has [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Gmork, a wolf-like creature"
      ],
      "predicates": [
        "Shy(x) ::: x is a shy person.",
        "Friendless(x) ::: x is a friendless person.",
        "Bibliophile(x) ::: x is a bibliophile.",
        "Teased(x) ::: x is teased by bullies.",
        "Hides(x, y) ::: x hides from y.",
        "Asks(x, y) ::: x asks about y.",
        "AdvisesAgainst(x, y) ::: x advises against y.",
        "Seizes(x, y) ::: x seizes y.",
        "PromisesToReturn(x, y) ::: x promises to return y.",
        "HidesIn(x, y) ::: x hides in y.",
        "Describes(x, y) ::: x describes y.",
        "FallsIll(x) ::: x falls ill.",
        "TaskedToDiscover(x, y) ::: x is tasked to discover y.",
        "Believes(x, y) ::: x believes that y is true.",
        "Given(x, y) ::: x is given y.",
        "SetsOut(x) ::: x sets out on a quest.",
        "Summons(x, y) ::: x summons y.",
        "ToKill(x, y) ::: x is tasked to kill y."
      ],
      "premises": [
        "Shy(bastian) ∧ Friendless(bastian) ∧ Bibliophile(bastian) ∧ Teased(bastian) ::: Bastian Balthazar Bux is a shy and friendless bibliophile 12-year-old, teased by bullies from school.",
        "Hides(bastian, bullies) ::: On his way to school, he hides from the bullies in a bookstore.",
        "Asks(bastian, book) ∧ AdvisesAgainst(coreander, book) ::: Bastian asks about one of the books he sees, but Mr. Coreander advises against it.",
        "Seizes(bastian, book) ∧ PromisesToReturn(bastian, book) ::: Bastian seizes the book, leaving a note promising to return it.",
        "HidesIn(bastian, attic) ::: Bastian hides in the school's attic to read.",
        "Describes(book, fantasia) ::: The book describes the world of Fantasia slowly being devoured by a force called \"The Nothing\".",
        "FallsIll(empress) ::: Fantasia's ruler, the Childlike Empress, has fallen ill.",
        "TaskedToDiscover(atreyu, cure) ::: Atreyu is tasked to discover the cure for the Childlike Empress to stop the Nothing.",
        "Believes(atreyu, empressWell) ::: Atreyu believes that once the Empress is well, the Nothing will no longer be a threat.",
        "Given(atreyu, auryn) ::: Atreyu is given a medallion named the AURYN that can guide and protect him in the quest.",
        "SetsOut(atreyu) ::: As Atreyu sets out, the Nothing summons Gmork.",
        "Summons(nothing, gmork) ::: The Nothing summons Gmork, a wolf-like creature, to kill Atreyu."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 864,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 1,
      "paragraph": "Atreyu's quest directs him to the advisor Morla the Ancient One in the Swamps of Sadness. Though the AURYN protects Atreyu, his beloved horse Artax is lost to the swamp, and he continues alone. Later, Atreyu is surprised by the sudden appearance of Morla, a giant turtle. Bastian, reading, is also surprised and lets out a scream, which Atreyu and Morla appear to hear. Morla does not have the answers Atreyu seeks, but directs him to the Southern Oracle, ten thousand miles distant. Atreyu succumbs to exhaustion trying to escape the Swamps but is saved by the luckdragon Falkor (voiced by Alan Oppenheimer). Falkor takes him to the home of two gnomes that live near the entrance to the Southern Oracle. The gnomes explain that Atreyu will face various trials before reaching the Oracle. Atreyu proceeds to enter the Oracle, and is perplexed when one second trial, a mirror that shows the viewer's true self, reveals a boy which Bastian recognizes as himself. Bastian throws the book aside, but after catching his breath, continues to read. Atreyu eventually meets the Southern Oracle who tells him the only way to save the Empress is to find a human child to give her a new name, beyond the boundaries of Fantasia.",
      "question_template": "Adam has [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The Nothing",
        "A giant turtle",
        "Various trials"
      ],
      "predicates": [
        "Quest(x) ::: x is on a quest.",
        "Advisor(x) ::: x is an advisor.",
        "Protects(x, y) ::: x protects y.",
        "Lost(x, y) ::: x is lost to y.",
        "Surprised(x, y) ::: x is surprised by y.",
        "Hears(x, y) ::: x hears y.",
        "Directs(x, y) ::: x directs y to y.",
        "Succumbs(x, y) ::: x succumbs to y.",
        "SavedBy(x, y) ::: x is saved by y.",
        "Explains(x, y) ::: x explains y.",
        "Faces(x, y) ::: x faces y.",
        "Enters(x, y) ::: x enters y.",
        "Reveals(x, y) ::: x reveals y to y.",
        "Recognizes(x, y) ::: x recognizes y.",
        "ThrowsAside(x, y) ::: x throws aside y.",
        "ContinuesReading(x) ::: x continues to read.",
        "Tells(x, y) ::: x tells y.",
        "Finds(x, y) ::: x finds y.",
        "Gives(x, y, z) ::: x gives y to z."
      ],
      "premises": [
        "Quest(atreyu) ::: Atreyu is on a quest.",
        "Advisor(morla) ::: Morla is an advisor.",
        "Protects(auryn, atreyu) ::: AURYN protects Atreyu.",
        "Lost(artax, swamp) ::: Artax is lost to the Swamps of Sadness.",
        "Surprised(atreyu, morla) ::: Atreyu is surprised by Morla's sudden appearance.",
        "Hears(atreyu, scream) ::: Atreyu hears a scream.",
        "Hears(morla, scream) ::: Morla hears a scream.",
        "Directs(morla, southernOracle) ::: Morla directs Atreyu to the Southern Oracle.",
        "Succumbs(atreyu, exhaustion) ::: Atreyu succumbs to exhaustion.",
        "SavedBy(atreyu, falkor) ::: Atreyu is saved by Falkor.",
        "Explains(gnomes, trials) ::: The gnomes explain that Atreyu will face various trials.",
        "Faces(atreyu, trials) ::: Atreyu faces various trials.",
        "Enters(atreyu, oracle) ::: Atreyu enters the Oracle.",
        "Reveals(mirror, atreyu) ::: The mirror reveals Atreyu's true self.",
        "Recognizes(bastian, himself) ::: Bastian recognizes the boy as himself.",
        "ThrowsAside(bastian, book) ::: Bastian throws the book aside.",
        "ContinuesReading(bastian) ::: Bastian continues to read.",
        "Tells(southernOracle, atreyu) ::: The Southern Oracle tells Atreyu the only way to save the Empress is to find a human child.",
        "Finds(atreyu, humanChild) ::: Atreyu must find a human child.",
        "Gives(atreyu, newName, empress) ::: Atreyu gives a new name to the Empress.",
        "Conclusion:",
        "Finds(atreyu, humanChild) → Gives(atreyu, newName, empress) ::: Atreyu must find a human child to save the Empress by giving her a new name."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 864,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 3,
      "paragraph": "When he wakes, he finds himself in blackness with the Empress, with only a grain of sand the last bit of Fantasia remaining. The Empress tells Bastian that he has the power to bring Fantasia back with his imagination using the power of the AURYN. Bastian re-creates Fantasia, and as he flies on Falkor's back, he sees the land and its inhabitants restored, and that Atreyu has been reunited with Artax. When Falkor tells him he can wish for anything, Bastian then brings Falkor back to the real world to chase down the bullies from before. The film ends with the narration that Bastian had many more wishes and adventures, and adds: \"but that's another story\".",
      "question_template": "Adam has [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The Nothing",
        "A grain of sand",
        "The last bit of Fantasia"
      ],
      "predicates": [
        "PowerToRestore(x) ::: x has the power to bring Fantasia back.",
        "Imagination(x) ::: x uses imagination.",
        "WishForAnything(x) ::: x can wish for anything.",
        "Restored(c) ::: c is restored.",
        "Reunited(x, y) ::: x is reunited with y.",
        "InBlackness(x) ::: x is in blackness.",
        "FliesOn(x, y) ::: x flies on the back of y.",
        "ChaseDown(x, y) ::: x chases down y."
      ],
      "premises": [
        "PowerToRestore(a_1) ∧ Imagination(a_1) ∧ PowerToRestore(a_1) ::: Bastian has the power to bring Fantasia back with his imagination using the power of the AURYN.",
        "WishForAnything(a_1) ::: Bastian can wish for anything.",
        "Restored(c_1) ::: Fantasia is restored.",
        "Reunited(a_3, a_2) ::: Atreyu has been reunited with Artax.",
        "InBlackness(a_1) ::: Bastian finds himself in blackness.",
        "FliesOn(a_1, b_1) ::: Bastian flies on Falkor's back.",
        "ChaseDown(a_1, e) ::: Bastian chases down the bullies.",
        "Conclusion:",
        "Restored(c_1) ::: Fantasia has been restored."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "865": [
    {
      "id": 865,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 0,
      "paragraph": " Bastian Balthazar Bux is a shy and friendless bibliophile 12-year-old, teased by bullies from school. On his way to school, he hides from the bullies in a bookstore, interrupting the grumpy bookseller, Mr. Coreander. Bastian asks about one of the books he sees, but Mr. Coreander advises against it. His curiosity piqued, Bastian seizes the book, leaving a note promising to return it, and hides in the school's attic to read. The book describes the world of Fantasia slowly being devoured by a force called \"The Nothing\". Fantasia's ruler, the Childlike Empress, has fallen ill, and Atreyu is tasked to discover the cure, believing that once the Empress is well, the Nothing will no longer be a threat. Atreyu is given a medallion named the AURYN that can guide and protect him in the quest. As Atreyu sets out, the Nothing summons Gmork, a wolf-like creature, to kill Atreyu.",
      "question_template": "Adam and Katherine begin to develop a friendship when [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Gmork, a wolf-like creature"
      ],
      "predicates": [
        "Shy(x) ::: x is a shy person.",
        "Friendless(x) ::: x is a friendless person.",
        "Bibliophile(x) ::: x is a bibliophile.",
        "Teased(x) ::: x is teased by bullies.",
        "Hides(x, y) ::: x hides from y.",
        "Asks(x, y) ::: x asks about y.",
        "AdvisesAgainst(x, y) ::: x advises against y.",
        "Seizes(x, y) ::: x seizes y.",
        "PromisesToReturn(x, y) ::: x promises to return y.",
        "HidesIn(x, y) ::: x hides in y.",
        "Describes(x, y) ::: x describes y.",
        "FallsIll(x) ::: x falls ill.",
        "TaskedToDiscover(x, y) ::: x is tasked to discover y.",
        "Believes(x, y) ::: x believes that y is true.",
        "Given(x, y) ::: x is given y.",
        "SetsOut(x) ::: x sets out on a quest.",
        "Summons(x, y) ::: x summons y.",
        "ToKill(x, y) ::: x is tasked to kill y."
      ],
      "premises": [
        "Shy(bastian) ∧ Friendless(bastian) ∧ Bibliophile(bastian) ∧ Teased(bastian) ::: Bastian Balthazar Bux is a shy and friendless bibliophile 12-year-old, teased by bullies from school.",
        "Hides(bastian, bullies) ::: On his way to school, he hides from the bullies in a bookstore.",
        "Asks(bastian, book) ∧ AdvisesAgainst(coreander, book) ::: Bastian asks about one of the books he sees, but Mr. Coreander advises against it.",
        "Seizes(bastian, book) ∧ PromisesToReturn(bastian, book) ::: Bastian seizes the book, leaving a note promising to return it.",
        "HidesIn(bastian, attic) ::: Bastian hides in the school's attic to read.",
        "Describes(book, fantasia) ::: The book describes the world of Fantasia slowly being devoured by a force called \"The Nothing\".",
        "FallsIll(empress) ::: Fantasia's ruler, the Childlike Empress, has fallen ill.",
        "TaskedToDiscover(atreyu, cure) ::: Atreyu is tasked to discover the cure for the Childlike Empress to stop the Nothing.",
        "Believes(atreyu, empressWell) ::: Atreyu believes that once the Empress is well, the Nothing will no longer be a threat.",
        "Given(atreyu, auryn) ::: Atreyu is given a medallion named the AURYN that can guide and protect him in the quest.",
        "SetsOut(atreyu) ::: As Atreyu sets out, the Nothing summons Gmork.",
        "Summons(nothing, gmork) ::: The Nothing summons Gmork, a wolf-like creature, to kill Atreyu."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 865,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 3,
      "paragraph": "When he wakes, he finds himself in blackness with the Empress, with only a grain of sand the last bit of Fantasia remaining. The Empress tells Bastian that he has the power to bring Fantasia back with his imagination using the power of the AURYN. Bastian re-creates Fantasia, and as he flies on Falkor's back, he sees the land and its inhabitants restored, and that Atreyu has been reunited with Artax. When Falkor tells him he can wish for anything, Bastian then brings Falkor back to the real world to chase down the bullies from before. The film ends with the narration that Bastian had many more wishes and adventures, and adds: \"but that's another story\".",
      "question_template": "Adam and Katherine begin to develop a friendship when [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Artax"
      ],
      "predicates": [
        "PowerToRestore(x) ::: x has the power to bring Fantasia back.",
        "Imagination(x) ::: x uses imagination.",
        "WishForAnything(x) ::: x can wish for anything.",
        "Restored(c) ::: c is restored.",
        "Reunited(x, y) ::: x is reunited with y.",
        "InBlackness(x) ::: x is in blackness.",
        "FliesOn(x, y) ::: x flies on the back of y.",
        "ChaseDown(x, y) ::: x chases down y."
      ],
      "premises": [
        "PowerToRestore(a_1) ∧ Imagination(a_1) ∧ PowerToRestore(a_1) ::: Bastian has the power to bring Fantasia back with his imagination using the power of the AURYN.",
        "WishForAnything(a_1) ::: Bastian can wish for anything.",
        "Restored(c_1) ::: Fantasia is restored.",
        "Reunited(a_3, a_2) ::: Atreyu has been reunited with Artax.",
        "InBlackness(a_1) ::: Bastian finds himself in blackness.",
        "FliesOn(a_1, b_1) ::: Bastian flies on Falkor's back.",
        "ChaseDown(a_1, e) ::: Bastian chases down the bullies.",
        "Conclusion:",
        "Restored(c_1) ::: Fantasia has been restored."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "867": [
    {
      "id": 867,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 1,
      "paragraph": "Atreyu's quest directs him to the advisor Morla the Ancient One in the Swamps of Sadness. Though the AURYN protects Atreyu, his beloved horse Artax is lost to the swamp, and he continues alone. Later, Atreyu is surprised by the sudden appearance of Morla, a giant turtle. Bastian, reading, is also surprised and lets out a scream, which Atreyu and Morla appear to hear. Morla does not have the answers Atreyu seeks, but directs him to the Southern Oracle, ten thousand miles distant. Atreyu succumbs to exhaustion trying to escape the Swamps but is saved by the luckdragon Falkor (voiced by Alan Oppenheimer). Falkor takes him to the home of two gnomes that live near the entrance to the Southern Oracle. The gnomes explain that Atreyu will face various trials before reaching the Oracle. Atreyu proceeds to enter the Oracle, and is perplexed when one second trial, a mirror that shows the viewer's true self, reveals a boy which Bastian recognizes as himself. Bastian throws the book aside, but after catching his breath, continues to read. Atreyu eventually meets the Southern Oracle who tells him the only way to save the Empress is to find a human child to give her a new name, beyond the boundaries of Fantasia.",
      "question_template": "Kyle uses Adam's illness for [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "A boy which Bastian recognizes as himself"
      ],
      "predicates": [
        "Quest(x) ::: x is on a quest.",
        "Advisor(x) ::: x is an advisor.",
        "Protects(x, y) ::: x protects y.",
        "Lost(x, y) ::: x is lost to y.",
        "Surprised(x, y) ::: x is surprised by y.",
        "Hears(x, y) ::: x hears y.",
        "Directs(x, y) ::: x directs y to y.",
        "Succumbs(x, y) ::: x succumbs to y.",
        "SavedBy(x, y) ::: x is saved by y.",
        "Explains(x, y) ::: x explains y.",
        "Faces(x, y) ::: x faces y.",
        "Enters(x, y) ::: x enters y.",
        "Reveals(x, y) ::: x reveals y to y.",
        "Recognizes(x, y) ::: x recognizes y.",
        "ThrowsAside(x, y) ::: x throws aside y.",
        "ContinuesReading(x) ::: x continues to read.",
        "Tells(x, y) ::: x tells y.",
        "Finds(x, y) ::: x finds y.",
        "Gives(x, y, z) ::: x gives y to z."
      ],
      "premises": [
        "Quest(atreyu) ::: Atreyu is on a quest.",
        "Advisor(morla) ::: Morla is an advisor.",
        "Protects(auryn, atreyu) ::: AURYN protects Atreyu.",
        "Lost(artax, swamp) ::: Artax is lost to the Swamps of Sadness.",
        "Surprised(atreyu, morla) ::: Atreyu is surprised by Morla's sudden appearance.",
        "Hears(atreyu, scream) ::: Atreyu hears a scream.",
        "Hears(morla, scream) ::: Morla hears a scream.",
        "Directs(morla, southernOracle) ::: Morla directs Atreyu to the Southern Oracle.",
        "Succumbs(atreyu, exhaustion) ::: Atreyu succumbs to exhaustion.",
        "SavedBy(atreyu, falkor) ::: Atreyu is saved by Falkor.",
        "Explains(gnomes, trials) ::: The gnomes explain that Atreyu will face various trials.",
        "Faces(atreyu, trials) ::: Atreyu faces various trials.",
        "Enters(atreyu, oracle) ::: Atreyu enters the Oracle.",
        "Reveals(mirror, atreyu) ::: The mirror reveals Atreyu's true self.",
        "Recognizes(bastian, himself) ::: Bastian recognizes the boy as himself.",
        "ThrowsAside(bastian, book) ::: Bastian throws the book aside.",
        "ContinuesReading(bastian) ::: Bastian continues to read.",
        "Tells(southernOracle, atreyu) ::: The Southern Oracle tells Atreyu the only way to save the Empress is to find a human child.",
        "Finds(atreyu, humanChild) ::: Atreyu must find a human child.",
        "Gives(atreyu, newName, empress) ::: Atreyu gives a new name to the Empress.",
        "Conclusion:",
        "Finds(atreyu, humanChild) → Gives(atreyu, newName, empress) ::: Atreyu must find a human child to save the Empress by giving her a new name."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "868": [
    {
      "id": 868,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 0,
      "paragraph": " Bastian Balthazar Bux is a shy and friendless bibliophile 12-year-old, teased by bullies from school. On his way to school, he hides from the bullies in a bookstore, interrupting the grumpy bookseller, Mr. Coreander. Bastian asks about one of the books he sees, but Mr. Coreander advises against it. His curiosity piqued, Bastian seizes the book, leaving a note promising to return it, and hides in the school's attic to read. The book describes the world of Fantasia slowly being devoured by a force called \"The Nothing\". Fantasia's ruler, the Childlike Empress, has fallen ill, and Atreyu is tasked to discover the cure, believing that once the Empress is well, the Nothing will no longer be a threat. Atreyu is given a medallion named the AURYN that can guide and protect him in the quest. As Atreyu sets out, the Nothing summons Gmork, a wolf-like creature, to kill Atreyu.",
      "question_template": "[[CANDIDATE_ANSWER]] finds out about Rachael's affair first.",
      "candidate_answers": [
        "The Nothing summons Gmork, a wolf-like creature, to kill Atreyu."
      ],
      "predicates": [
        "Shy(x) ::: x is a shy person.",
        "Friendless(x) ::: x is a friendless person.",
        "Bibliophile(x) ::: x is a bibliophile.",
        "Teased(x) ::: x is teased by bullies.",
        "Hides(x, y) ::: x hides from y.",
        "Asks(x, y) ::: x asks about y.",
        "AdvisesAgainst(x, y) ::: x advises against y.",
        "Seizes(x, y) ::: x seizes y.",
        "PromisesToReturn(x, y) ::: x promises to return y.",
        "HidesIn(x, y) ::: x hides in y.",
        "Describes(x, y) ::: x describes y.",
        "FallsIll(x) ::: x falls ill.",
        "TaskedToDiscover(x, y) ::: x is tasked to discover y.",
        "Believes(x, y) ::: x believes that y is true.",
        "Given(x, y) ::: x is given y.",
        "SetsOut(x) ::: x sets out on a quest.",
        "Summons(x, y) ::: x summons y.",
        "ToKill(x, y) ::: x is tasked to kill y."
      ],
      "premises": [
        "Shy(bastian) ∧ Friendless(bastian) ∧ Bibliophile(bastian) ∧ Teased(bastian) ::: Bastian Balthazar Bux is a shy and friendless bibliophile 12-year-old, teased by bullies from school.",
        "Hides(bastian, bullies) ::: On his way to school, he hides from the bullies in a bookstore.",
        "Asks(bastian, book) ∧ AdvisesAgainst(coreander, book) ::: Bastian asks about one of the books he sees, but Mr. Coreander advises against it.",
        "Seizes(bastian, book) ∧ PromisesToReturn(bastian, book) ::: Bastian seizes the book, leaving a note promising to return it.",
        "HidesIn(bastian, attic) ::: Bastian hides in the school's attic to read.",
        "Describes(book, fantasia) ::: The book describes the world of Fantasia slowly being devoured by a force called \"The Nothing\".",
        "FallsIll(empress) ::: Fantasia's ruler, the Childlike Empress, has fallen ill.",
        "TaskedToDiscover(atreyu, cure) ::: Atreyu is tasked to discover the cure for the Childlike Empress to stop the Nothing.",
        "Believes(atreyu, empressWell) ::: Atreyu believes that once the Empress is well, the Nothing will no longer be a threat.",
        "Given(atreyu, auryn) ::: Atreyu is given a medallion named the AURYN that can guide and protect him in the quest.",
        "SetsOut(atreyu) ::: As Atreyu sets out, the Nothing summons Gmork.",
        "Summons(nothing, gmork) ::: The Nothing summons Gmork, a wolf-like creature, to kill Atreyu."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 868,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 3,
      "paragraph": "When he wakes, he finds himself in blackness with the Empress, with only a grain of sand the last bit of Fantasia remaining. The Empress tells Bastian that he has the power to bring Fantasia back with his imagination using the power of the AURYN. Bastian re-creates Fantasia, and as he flies on Falkor's back, he sees the land and its inhabitants restored, and that Atreyu has been reunited with Artax. When Falkor tells him he can wish for anything, Bastian then brings Falkor back to the real world to chase down the bullies from before. The film ends with the narration that Bastian had many more wishes and adventures, and adds: \"but that's another story\".",
      "question_template": "[[CANDIDATE_ANSWER]] finds out about Rachael's affair first.",
      "candidate_answers": [
        "The Empress tells Bastian that he has the power to bring Fantasia back with his imagination",
        "Bastian re-creates Fantasia",
        "The land and its inhabitants restored"
      ],
      "predicates": [
        "PowerToRestore(x) ::: x has the power to bring Fantasia back.",
        "Imagination(x) ::: x uses imagination.",
        "WishForAnything(x) ::: x can wish for anything.",
        "Restored(c) ::: c is restored.",
        "Reunited(x, y) ::: x is reunited with y.",
        "InBlackness(x) ::: x is in blackness.",
        "FliesOn(x, y) ::: x flies on the back of y.",
        "ChaseDown(x, y) ::: x chases down y."
      ],
      "premises": [
        "PowerToRestore(a_1) ∧ Imagination(a_1) ∧ PowerToRestore(a_1) ::: Bastian has the power to bring Fantasia back with his imagination using the power of the AURYN.",
        "WishForAnything(a_1) ::: Bastian can wish for anything.",
        "Restored(c_1) ::: Fantasia is restored.",
        "Reunited(a_3, a_2) ::: Atreyu has been reunited with Artax.",
        "InBlackness(a_1) ::: Bastian finds himself in blackness.",
        "FliesOn(a_1, b_1) ::: Bastian flies on Falkor's back.",
        "ChaseDown(a_1, e) ::: Bastian chases down the bullies.",
        "Conclusion:",
        "Restored(c_1) ::: Fantasia has been restored."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "869": [
    {
      "id": 869,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 2,
      "paragraph": "Atreyu and Falkor flee before the Nothing consumes the Southern Oracle. In flight, Atreyu is knocked from Falkor's back into the Sea of Possibilities, losing the AURYN in the process. He wakes on the shore of the abandoned ruins, and finds a series of paintings depicting his quest. Gmork reveals himself, having been lying in wait and explains that Fantasia represents humanity's imagination, and that the Nothing represents adult apathy and cynicism against it. Atreyu fends off and kills Gmork as the Nothing begins to consume the ruins. Falkor, who had managed to locate AURYN, rescues Atreyu in time. The two find themselves in a void with only small fragments of Fantasia remaining, and fear they have failed when they spot the Empress's Ivory Tower among the fragment. Inside, Atreyu apologizes for failing the Empress, but she assures him he has succeeded in bringing to her a human child who has been following his quest. As the Nothing begins to consume the Tower, the Empress pleas directly to Bastian to call out her new name. Bastian calls out the name he had selected, and loses consciousness.",
      "question_template": "Adam finally gets rid of his cancer by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Bastian calls out the name he had selected",
        "- The Empress pleas directly to Bastian to call out her new name"
      ],
      "predicates": [
        "HumanChild(x) ::: x is a human child.",
        "Succeed(x, y) ::: x has succeeded in y.",
        "Brings(x, y, z) ::: x brings y to z.",
        "CallsOut(x, y) ::: x calls out y.",
        "LosesConsciousness(x) ::: x loses consciousness.",
        "ConsumedByNothing(x) ::: x is consumed by the Nothing.",
        "InLocation(x, y) ::: x is in location y.",
        "Flee(x, y) ::: x flees from y.",
        "KnockedFrom(x, y) ::: x is knocked from y.",
        "Finds(x, y) ::: x finds y.",
        "Reveals(x, y) ::: x reveals y.",
        "FendsOff(x, y) ::: x fends off y.",
        "Rescues(x, y) ::: x rescues y."
      ],
      "premises": [
        "Flee(atreyu, nothing) ::: Atreyu and Falkor flee before the Nothing consumes the Southern Oracle.",
        "KnockedFrom(atreyu, falkor) ::: Atreyu is knocked from Falkor's back into the Sea of Possibilities.",
        "Finds(atreyu, paintings) ::: Atreyu finds a series of paintings depicting his quest.",
        "Reveals(gmork, humanityImagination) ::: Gmork reveals that Fantasia represents humanity's imagination.",
        "ConsumedByNothing(ruins) ::: The Nothing begins to consume the ruins.",
        "FendsOff(atreyu, gmork) ::: Atreyu fends off and kills Gmork.",
        "Rescues(falkor, atreyu) ::: Falkor rescues Atreyu in time.",
        "InLocation(atreyu, ivoryTower) ::: Atreyu is in the Empress's Ivory Tower.",
        "Succeed(atreyu, quest) ::: The Empress assures Atreyu that he has succeeded in his quest.",
        "Brings(atreyu, humanChild, empress) ::: Atreyu brings a human child to the Empress.",
        "CallsOut(bastian, newName) ::: Bastian calls out the name he had selected.",
        "LosesConsciousness(bastian) ::: Bastian loses consciousness.",
        "ConsumedByNothing(tower) ::: The Nothing begins to consume the Tower.",
        "Conclusion:",
        "HumanChild(bastian) ::: Bastian is a human child.",
        "Succeed(atreyu, quest) ::: Atreyu has succeeded in his quest."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "870": [
    {
      "id": 870,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 3,
      "paragraph": "When he wakes, he finds himself in blackness with the Empress, with only a grain of sand the last bit of Fantasia remaining. The Empress tells Bastian that he has the power to bring Fantasia back with his imagination using the power of the AURYN. Bastian re-creates Fantasia, and as he flies on Falkor's back, he sees the land and its inhabitants restored, and that Atreyu has been reunited with Artax. When Falkor tells him he can wish for anything, Bastian then brings Falkor back to the real world to chase down the bullies from before. The film ends with the narration that Bastian had many more wishes and adventures, and adds: \"but that's another story\".",
      "question_template": "Bastian seeks refuge in [[CANDIDATE_ANSWER]] at the beginning of the story.",
      "candidate_answers": [
        "The last bit of Fantasia remaining",
        "The power to bring Fantasia back with his imagination"
      ],
      "predicates": [
        "PowerToRestore(x) ::: x has the power to bring Fantasia back.",
        "Imagination(x) ::: x uses imagination.",
        "WishForAnything(x) ::: x can wish for anything.",
        "Restored(c) ::: c is restored.",
        "Reunited(x, y) ::: x is reunited with y.",
        "InBlackness(x) ::: x is in blackness.",
        "FliesOn(x, y) ::: x flies on the back of y.",
        "ChaseDown(x, y) ::: x chases down y."
      ],
      "premises": [
        "PowerToRestore(a_1) ∧ Imagination(a_1) ∧ PowerToRestore(a_1) ::: Bastian has the power to bring Fantasia back with his imagination using the power of the AURYN.",
        "WishForAnything(a_1) ::: Bastian can wish for anything.",
        "Restored(c_1) ::: Fantasia is restored.",
        "Reunited(a_3, a_2) ::: Atreyu has been reunited with Artax.",
        "InBlackness(a_1) ::: Bastian finds himself in blackness.",
        "FliesOn(a_1, b_1) ::: Bastian flies on Falkor's back.",
        "ChaseDown(a_1, e) ::: Bastian chases down the bullies.",
        "Conclusion:",
        "Restored(c_1) ::: Fantasia has been restored."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "871": [
    {
      "id": 871,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 0,
      "paragraph": " Bastian Balthazar Bux is a shy and friendless bibliophile 12-year-old, teased by bullies from school. On his way to school, he hides from the bullies in a bookstore, interrupting the grumpy bookseller, Mr. Coreander. Bastian asks about one of the books he sees, but Mr. Coreander advises against it. His curiosity piqued, Bastian seizes the book, leaving a note promising to return it, and hides in the school's attic to read. The book describes the world of Fantasia slowly being devoured by a force called \"The Nothing\". Fantasia's ruler, the Childlike Empress, has fallen ill, and Atreyu is tasked to discover the cure, believing that once the Empress is well, the Nothing will no longer be a threat. Atreyu is given a medallion named the AURYN that can guide and protect him in the quest. As Atreyu sets out, the Nothing summons Gmork, a wolf-like creature, to kill Atreyu.",
      "question_template": "The world being devoured by \"The Nothing\" is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The Nothing",
        "Gmork, a wolf-like creature"
      ],
      "predicates": [
        "Shy(x) ::: x is a shy person.",
        "Friendless(x) ::: x is a friendless person.",
        "Bibliophile(x) ::: x is a bibliophile.",
        "Teased(x) ::: x is teased by bullies.",
        "Hides(x, y) ::: x hides from y.",
        "Asks(x, y) ::: x asks about y.",
        "AdvisesAgainst(x, y) ::: x advises against y.",
        "Seizes(x, y) ::: x seizes y.",
        "PromisesToReturn(x, y) ::: x promises to return y.",
        "HidesIn(x, y) ::: x hides in y.",
        "Describes(x, y) ::: x describes y.",
        "FallsIll(x) ::: x falls ill.",
        "TaskedToDiscover(x, y) ::: x is tasked to discover y.",
        "Believes(x, y) ::: x believes that y is true.",
        "Given(x, y) ::: x is given y.",
        "SetsOut(x) ::: x sets out on a quest.",
        "Summons(x, y) ::: x summons y.",
        "ToKill(x, y) ::: x is tasked to kill y."
      ],
      "premises": [
        "Shy(bastian) ∧ Friendless(bastian) ∧ Bibliophile(bastian) ∧ Teased(bastian) ::: Bastian Balthazar Bux is a shy and friendless bibliophile 12-year-old, teased by bullies from school.",
        "Hides(bastian, bullies) ::: On his way to school, he hides from the bullies in a bookstore.",
        "Asks(bastian, book) ∧ AdvisesAgainst(coreander, book) ::: Bastian asks about one of the books he sees, but Mr. Coreander advises against it.",
        "Seizes(bastian, book) ∧ PromisesToReturn(bastian, book) ::: Bastian seizes the book, leaving a note promising to return it.",
        "HidesIn(bastian, attic) ::: Bastian hides in the school's attic to read.",
        "Describes(book, fantasia) ::: The book describes the world of Fantasia slowly being devoured by a force called \"The Nothing\".",
        "FallsIll(empress) ::: Fantasia's ruler, the Childlike Empress, has fallen ill.",
        "TaskedToDiscover(atreyu, cure) ::: Atreyu is tasked to discover the cure for the Childlike Empress to stop the Nothing.",
        "Believes(atreyu, empressWell) ::: Atreyu believes that once the Empress is well, the Nothing will no longer be a threat.",
        "Given(atreyu, auryn) ::: Atreyu is given a medallion named the AURYN that can guide and protect him in the quest.",
        "SetsOut(atreyu) ::: As Atreyu sets out, the Nothing summons Gmork.",
        "Summons(nothing, gmork) ::: The Nothing summons Gmork, a wolf-like creature, to kill Atreyu."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "874": [
    {
      "id": 874,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 0,
      "paragraph": " Bastian Balthazar Bux is a shy and friendless bibliophile 12-year-old, teased by bullies from school. On his way to school, he hides from the bullies in a bookstore, interrupting the grumpy bookseller, Mr. Coreander. Bastian asks about one of the books he sees, but Mr. Coreander advises against it. His curiosity piqued, Bastian seizes the book, leaving a note promising to return it, and hides in the school's attic to read. The book describes the world of Fantasia slowly being devoured by a force called \"The Nothing\". Fantasia's ruler, the Childlike Empress, has fallen ill, and Atreyu is tasked to discover the cure, believing that once the Empress is well, the Nothing will no longer be a threat. Atreyu is given a medallion named the AURYN that can guide and protect him in the quest. As Atreyu sets out, the Nothing summons Gmork, a wolf-like creature, to kill Atreyu.",
      "question_template": "Atreyu loses [[CANDIDATE_ANSWER]] in the Sea of Possibilities.",
      "candidate_answers": [
        "The book describes the world of Fantasia slowly being devoured by a force called \"The Nothing\"",
        "Fantasia's ruler, the Childlike Empress, has fallen ill",
        "Atreyu is tasked to discover the cure",
        "Atreyu is given a medallion named the AURYN that can guide and protect him in the quest",
        "The Nothing summons Gmork, a wolf-like creature, to kill Atreyu"
      ],
      "predicates": [
        "Shy(x) ::: x is a shy person.",
        "Friendless(x) ::: x is a friendless person.",
        "Bibliophile(x) ::: x is a bibliophile.",
        "Teased(x) ::: x is teased by bullies.",
        "Hides(x, y) ::: x hides from y.",
        "Asks(x, y) ::: x asks about y.",
        "AdvisesAgainst(x, y) ::: x advises against y.",
        "Seizes(x, y) ::: x seizes y.",
        "PromisesToReturn(x, y) ::: x promises to return y.",
        "HidesIn(x, y) ::: x hides in y.",
        "Describes(x, y) ::: x describes y.",
        "FallsIll(x) ::: x falls ill.",
        "TaskedToDiscover(x, y) ::: x is tasked to discover y.",
        "Believes(x, y) ::: x believes that y is true.",
        "Given(x, y) ::: x is given y.",
        "SetsOut(x) ::: x sets out on a quest.",
        "Summons(x, y) ::: x summons y.",
        "ToKill(x, y) ::: x is tasked to kill y."
      ],
      "premises": [
        "Shy(bastian) ∧ Friendless(bastian) ∧ Bibliophile(bastian) ∧ Teased(bastian) ::: Bastian Balthazar Bux is a shy and friendless bibliophile 12-year-old, teased by bullies from school.",
        "Hides(bastian, bullies) ::: On his way to school, he hides from the bullies in a bookstore.",
        "Asks(bastian, book) ∧ AdvisesAgainst(coreander, book) ::: Bastian asks about one of the books he sees, but Mr. Coreander advises against it.",
        "Seizes(bastian, book) ∧ PromisesToReturn(bastian, book) ::: Bastian seizes the book, leaving a note promising to return it.",
        "HidesIn(bastian, attic) ::: Bastian hides in the school's attic to read.",
        "Describes(book, fantasia) ::: The book describes the world of Fantasia slowly being devoured by a force called \"The Nothing\".",
        "FallsIll(empress) ::: Fantasia's ruler, the Childlike Empress, has fallen ill.",
        "TaskedToDiscover(atreyu, cure) ::: Atreyu is tasked to discover the cure for the Childlike Empress to stop the Nothing.",
        "Believes(atreyu, empressWell) ::: Atreyu believes that once the Empress is well, the Nothing will no longer be a threat.",
        "Given(atreyu, auryn) ::: Atreyu is given a medallion named the AURYN that can guide and protect him in the quest.",
        "SetsOut(atreyu) ::: As Atreyu sets out, the Nothing summons Gmork.",
        "Summons(nothing, gmork) ::: The Nothing summons Gmork, a wolf-like creature, to kill Atreyu."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 874,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 1,
      "paragraph": "Atreyu's quest directs him to the advisor Morla the Ancient One in the Swamps of Sadness. Though the AURYN protects Atreyu, his beloved horse Artax is lost to the swamp, and he continues alone. Later, Atreyu is surprised by the sudden appearance of Morla, a giant turtle. Bastian, reading, is also surprised and lets out a scream, which Atreyu and Morla appear to hear. Morla does not have the answers Atreyu seeks, but directs him to the Southern Oracle, ten thousand miles distant. Atreyu succumbs to exhaustion trying to escape the Swamps but is saved by the luckdragon Falkor (voiced by Alan Oppenheimer). Falkor takes him to the home of two gnomes that live near the entrance to the Southern Oracle. The gnomes explain that Atreyu will face various trials before reaching the Oracle. Atreyu proceeds to enter the Oracle, and is perplexed when one second trial, a mirror that shows the viewer's true self, reveals a boy which Bastian recognizes as himself. Bastian throws the book aside, but after catching his breath, continues to read. Atreyu eventually meets the Southern Oracle who tells him the only way to save the Empress is to find a human child to give her a new name, beyond the boundaries of Fantasia.",
      "question_template": "Atreyu loses [[CANDIDATE_ANSWER]] in the Sea of Possibilities.",
      "candidate_answers": [
        "- The Southern Oracle",
        "- Ten thousand miles distant"
      ],
      "predicates": [
        "Quest(x) ::: x is on a quest.",
        "Advisor(x) ::: x is an advisor.",
        "Protects(x, y) ::: x protects y.",
        "Lost(x, y) ::: x is lost to y.",
        "Surprised(x, y) ::: x is surprised by y.",
        "Hears(x, y) ::: x hears y.",
        "Directs(x, y) ::: x directs y to y.",
        "Succumbs(x, y) ::: x succumbs to y.",
        "SavedBy(x, y) ::: x is saved by y.",
        "Explains(x, y) ::: x explains y.",
        "Faces(x, y) ::: x faces y.",
        "Enters(x, y) ::: x enters y.",
        "Reveals(x, y) ::: x reveals y to y.",
        "Recognizes(x, y) ::: x recognizes y.",
        "ThrowsAside(x, y) ::: x throws aside y.",
        "ContinuesReading(x) ::: x continues to read.",
        "Tells(x, y) ::: x tells y.",
        "Finds(x, y) ::: x finds y.",
        "Gives(x, y, z) ::: x gives y to z."
      ],
      "premises": [
        "Quest(atreyu) ::: Atreyu is on a quest.",
        "Advisor(morla) ::: Morla is an advisor.",
        "Protects(auryn, atreyu) ::: AURYN protects Atreyu.",
        "Lost(artax, swamp) ::: Artax is lost to the Swamps of Sadness.",
        "Surprised(atreyu, morla) ::: Atreyu is surprised by Morla's sudden appearance.",
        "Hears(atreyu, scream) ::: Atreyu hears a scream.",
        "Hears(morla, scream) ::: Morla hears a scream.",
        "Directs(morla, southernOracle) ::: Morla directs Atreyu to the Southern Oracle.",
        "Succumbs(atreyu, exhaustion) ::: Atreyu succumbs to exhaustion.",
        "SavedBy(atreyu, falkor) ::: Atreyu is saved by Falkor.",
        "Explains(gnomes, trials) ::: The gnomes explain that Atreyu will face various trials.",
        "Faces(atreyu, trials) ::: Atreyu faces various trials.",
        "Enters(atreyu, oracle) ::: Atreyu enters the Oracle.",
        "Reveals(mirror, atreyu) ::: The mirror reveals Atreyu's true self.",
        "Recognizes(bastian, himself) ::: Bastian recognizes the boy as himself.",
        "ThrowsAside(bastian, book) ::: Bastian throws the book aside.",
        "ContinuesReading(bastian) ::: Bastian continues to read.",
        "Tells(southernOracle, atreyu) ::: The Southern Oracle tells Atreyu the only way to save the Empress is to find a human child.",
        "Finds(atreyu, humanChild) ::: Atreyu must find a human child.",
        "Gives(atreyu, newName, empress) ::: Atreyu gives a new name to the Empress.",
        "Conclusion:",
        "Finds(atreyu, humanChild) → Gives(atreyu, newName, empress) ::: Atreyu must find a human child to save the Empress by giving her a new name."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "876": [
    {
      "id": 876,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 3,
      "paragraph": "When he wakes, he finds himself in blackness with the Empress, with only a grain of sand the last bit of Fantasia remaining. The Empress tells Bastian that he has the power to bring Fantasia back with his imagination using the power of the AURYN. Bastian re-creates Fantasia, and as he flies on Falkor's back, he sees the land and its inhabitants restored, and that Atreyu has been reunited with Artax. When Falkor tells him he can wish for anything, Bastian then brings Falkor back to the real world to chase down the bullies from before. The film ends with the narration that Bastian had many more wishes and adventures, and adds: \"but that's another story\".",
      "question_template": "Fantasia is representative of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Bastian",
        "Falkor"
      ],
      "predicates": [
        "PowerToRestore(x) ::: x has the power to bring Fantasia back.",
        "Imagination(x) ::: x uses imagination.",
        "WishForAnything(x) ::: x can wish for anything.",
        "Restored(c) ::: c is restored.",
        "Reunited(x, y) ::: x is reunited with y.",
        "InBlackness(x) ::: x is in blackness.",
        "FliesOn(x, y) ::: x flies on the back of y.",
        "ChaseDown(x, y) ::: x chases down y."
      ],
      "premises": [
        "PowerToRestore(a_1) ∧ Imagination(a_1) ∧ PowerToRestore(a_1) ::: Bastian has the power to bring Fantasia back with his imagination using the power of the AURYN.",
        "WishForAnything(a_1) ::: Bastian can wish for anything.",
        "Restored(c_1) ::: Fantasia is restored.",
        "Reunited(a_3, a_2) ::: Atreyu has been reunited with Artax.",
        "InBlackness(a_1) ::: Bastian finds himself in blackness.",
        "FliesOn(a_1, b_1) ::: Bastian flies on Falkor's back.",
        "ChaseDown(a_1, e) ::: Bastian chases down the bullies.",
        "Conclusion:",
        "Restored(c_1) ::: Fantasia has been restored."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "877": [
    {
      "id": 877,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 2,
      "paragraph": "Atreyu and Falkor flee before the Nothing consumes the Southern Oracle. In flight, Atreyu is knocked from Falkor's back into the Sea of Possibilities, losing the AURYN in the process. He wakes on the shore of the abandoned ruins, and finds a series of paintings depicting his quest. Gmork reveals himself, having been lying in wait and explains that Fantasia represents humanity's imagination, and that the Nothing represents adult apathy and cynicism against it. Atreyu fends off and kills Gmork as the Nothing begins to consume the ruins. Falkor, who had managed to locate AURYN, rescues Atreyu in time. The two find themselves in a void with only small fragments of Fantasia remaining, and fear they have failed when they spot the Empress's Ivory Tower among the fragment. Inside, Atreyu apologizes for failing the Empress, but she assures him he has succeeded in bringing to her a human child who has been following his quest. As the Nothing begins to consume the Tower, the Empress pleas directly to Bastian to call out her new name. Bastian calls out the name he had selected, and loses consciousness.",
      "question_template": "The Empress asks Bastian to [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- A human child who has been following his quest",
        "- The Empress pleas directly to Bastian to call out her new name",
        "- Bastian calls out the name he had selected"
      ],
      "predicates": [
        "HumanChild(x) ::: x is a human child.",
        "Succeed(x, y) ::: x has succeeded in y.",
        "Brings(x, y, z) ::: x brings y to z.",
        "CallsOut(x, y) ::: x calls out y.",
        "LosesConsciousness(x) ::: x loses consciousness.",
        "ConsumedByNothing(x) ::: x is consumed by the Nothing.",
        "InLocation(x, y) ::: x is in location y.",
        "Flee(x, y) ::: x flees from y.",
        "KnockedFrom(x, y) ::: x is knocked from y.",
        "Finds(x, y) ::: x finds y.",
        "Reveals(x, y) ::: x reveals y.",
        "FendsOff(x, y) ::: x fends off y.",
        "Rescues(x, y) ::: x rescues y."
      ],
      "premises": [
        "Flee(atreyu, nothing) ::: Atreyu and Falkor flee before the Nothing consumes the Southern Oracle.",
        "KnockedFrom(atreyu, falkor) ::: Atreyu is knocked from Falkor's back into the Sea of Possibilities.",
        "Finds(atreyu, paintings) ::: Atreyu finds a series of paintings depicting his quest.",
        "Reveals(gmork, humanityImagination) ::: Gmork reveals that Fantasia represents humanity's imagination.",
        "ConsumedByNothing(ruins) ::: The Nothing begins to consume the ruins.",
        "FendsOff(atreyu, gmork) ::: Atreyu fends off and kills Gmork.",
        "Rescues(falkor, atreyu) ::: Falkor rescues Atreyu in time.",
        "InLocation(atreyu, ivoryTower) ::: Atreyu is in the Empress's Ivory Tower.",
        "Succeed(atreyu, quest) ::: The Empress assures Atreyu that he has succeeded in his quest.",
        "Brings(atreyu, humanChild, empress) ::: Atreyu brings a human child to the Empress.",
        "CallsOut(bastian, newName) ::: Bastian calls out the name he had selected.",
        "LosesConsciousness(bastian) ::: Bastian loses consciousness.",
        "ConsumedByNothing(tower) ::: The Nothing begins to consume the Tower.",
        "Conclusion:",
        "HumanChild(bastian) ::: Bastian is a human child.",
        "Succeed(atreyu, quest) ::: Atreyu has succeeded in his quest."
      ],
      "conclusions": [
        "None",
        "CallsOut(bastian, newName)",
        "None"
      ]
    }
  ],
  "878": [
    {
      "id": 878,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 2,
      "paragraph": "Atreyu and Falkor flee before the Nothing consumes the Southern Oracle. In flight, Atreyu is knocked from Falkor's back into the Sea of Possibilities, losing the AURYN in the process. He wakes on the shore of the abandoned ruins, and finds a series of paintings depicting his quest. Gmork reveals himself, having been lying in wait and explains that Fantasia represents humanity's imagination, and that the Nothing represents adult apathy and cynicism against it. Atreyu fends off and kills Gmork as the Nothing begins to consume the ruins. Falkor, who had managed to locate AURYN, rescues Atreyu in time. The two find themselves in a void with only small fragments of Fantasia remaining, and fear they have failed when they spot the Empress's Ivory Tower among the fragment. Inside, Atreyu apologizes for failing the Empress, but she assures him he has succeeded in bringing to her a human child who has been following his quest. As the Nothing begins to consume the Tower, the Empress pleas directly to Bastian to call out her new name. Bastian calls out the name he had selected, and loses consciousness.",
      "question_template": "What is left of Fantasia when Bastian awakens in blackness with the Empress is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Falkor",
        "The AURYN"
      ],
      "predicates": [
        "HumanChild(x) ::: x is a human child.",
        "Succeed(x, y) ::: x has succeeded in y.",
        "Brings(x, y, z) ::: x brings y to z.",
        "CallsOut(x, y) ::: x calls out y.",
        "LosesConsciousness(x) ::: x loses consciousness.",
        "ConsumedByNothing(x) ::: x is consumed by the Nothing.",
        "InLocation(x, y) ::: x is in location y.",
        "Flee(x, y) ::: x flees from y.",
        "KnockedFrom(x, y) ::: x is knocked from y.",
        "Finds(x, y) ::: x finds y.",
        "Reveals(x, y) ::: x reveals y.",
        "FendsOff(x, y) ::: x fends off y.",
        "Rescues(x, y) ::: x rescues y."
      ],
      "premises": [
        "Flee(atreyu, nothing) ::: Atreyu and Falkor flee before the Nothing consumes the Southern Oracle.",
        "KnockedFrom(atreyu, falkor) ::: Atreyu is knocked from Falkor's back into the Sea of Possibilities.",
        "Finds(atreyu, paintings) ::: Atreyu finds a series of paintings depicting his quest.",
        "Reveals(gmork, humanityImagination) ::: Gmork reveals that Fantasia represents humanity's imagination.",
        "ConsumedByNothing(ruins) ::: The Nothing begins to consume the ruins.",
        "FendsOff(atreyu, gmork) ::: Atreyu fends off and kills Gmork.",
        "Rescues(falkor, atreyu) ::: Falkor rescues Atreyu in time.",
        "InLocation(atreyu, ivoryTower) ::: Atreyu is in the Empress's Ivory Tower.",
        "Succeed(atreyu, quest) ::: The Empress assures Atreyu that he has succeeded in his quest.",
        "Brings(atreyu, humanChild, empress) ::: Atreyu brings a human child to the Empress.",
        "CallsOut(bastian, newName) ::: Bastian calls out the name he had selected.",
        "LosesConsciousness(bastian) ::: Bastian loses consciousness.",
        "ConsumedByNothing(tower) ::: The Nothing begins to consume the Tower.",
        "Conclusion:",
        "HumanChild(bastian) ::: Bastian is a human child.",
        "Succeed(atreyu, quest) ::: Atreyu has succeeded in his quest."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 878,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 3,
      "paragraph": "When he wakes, he finds himself in blackness with the Empress, with only a grain of sand the last bit of Fantasia remaining. The Empress tells Bastian that he has the power to bring Fantasia back with his imagination using the power of the AURYN. Bastian re-creates Fantasia, and as he flies on Falkor's back, he sees the land and its inhabitants restored, and that Atreyu has been reunited with Artax. When Falkor tells him he can wish for anything, Bastian then brings Falkor back to the real world to chase down the bullies from before. The film ends with the narration that Bastian had many more wishes and adventures, and adds: \"but that's another story\".",
      "question_template": "What is left of Fantasia when Bastian awakens in blackness with the Empress is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The Empress",
        "The power of the AURYN",
        "Bastian re-creates Fantasia"
      ],
      "predicates": [
        "PowerToRestore(x) ::: x has the power to bring Fantasia back.",
        "Imagination(x) ::: x uses imagination.",
        "WishForAnything(x) ::: x can wish for anything.",
        "Restored(c) ::: c is restored.",
        "Reunited(x, y) ::: x is reunited with y.",
        "InBlackness(x) ::: x is in blackness.",
        "FliesOn(x, y) ::: x flies on the back of y.",
        "ChaseDown(x, y) ::: x chases down y."
      ],
      "premises": [
        "PowerToRestore(a_1) ∧ Imagination(a_1) ∧ PowerToRestore(a_1) ::: Bastian has the power to bring Fantasia back with his imagination using the power of the AURYN.",
        "WishForAnything(a_1) ::: Bastian can wish for anything.",
        "Restored(c_1) ::: Fantasia is restored.",
        "Reunited(a_3, a_2) ::: Atreyu has been reunited with Artax.",
        "InBlackness(a_1) ::: Bastian finds himself in blackness.",
        "FliesOn(a_1, b_1) ::: Bastian flies on Falkor's back.",
        "ChaseDown(a_1, e) ::: Bastian chases down the bullies.",
        "Conclusion:",
        "Restored(c_1) ::: Fantasia has been restored."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "881": [
    {
      "id": 881,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 1,
      "paragraph": "Atreyu's quest directs him to the advisor Morla the Ancient One in the Swamps of Sadness. Though the AURYN protects Atreyu, his beloved horse Artax is lost to the swamp, and he continues alone. Later, Atreyu is surprised by the sudden appearance of Morla, a giant turtle. Bastian, reading, is also surprised and lets out a scream, which Atreyu and Morla appear to hear. Morla does not have the answers Atreyu seeks, but directs him to the Southern Oracle, ten thousand miles distant. Atreyu succumbs to exhaustion trying to escape the Swamps but is saved by the luckdragon Falkor (voiced by Alan Oppenheimer). Falkor takes him to the home of two gnomes that live near the entrance to the Southern Oracle. The gnomes explain that Atreyu will face various trials before reaching the Oracle. Atreyu proceeds to enter the Oracle, and is perplexed when one second trial, a mirror that shows the viewer's true self, reveals a boy which Bastian recognizes as himself. Bastian throws the book aside, but after catching his breath, continues to read. Atreyu eventually meets the Southern Oracle who tells him the only way to save the Empress is to find a human child to give her a new name, beyond the boundaries of Fantasia.",
      "question_template": "The force devouring Fantasia is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Artax, his beloved horse"
      ],
      "predicates": [
        "Quest(x) ::: x is on a quest.",
        "Advisor(x) ::: x is an advisor.",
        "Protects(x, y) ::: x protects y.",
        "Lost(x, y) ::: x is lost to y.",
        "Surprised(x, y) ::: x is surprised by y.",
        "Hears(x, y) ::: x hears y.",
        "Directs(x, y) ::: x directs y to y.",
        "Succumbs(x, y) ::: x succumbs to y.",
        "SavedBy(x, y) ::: x is saved by y.",
        "Explains(x, y) ::: x explains y.",
        "Faces(x, y) ::: x faces y.",
        "Enters(x, y) ::: x enters y.",
        "Reveals(x, y) ::: x reveals y to y.",
        "Recognizes(x, y) ::: x recognizes y.",
        "ThrowsAside(x, y) ::: x throws aside y.",
        "ContinuesReading(x) ::: x continues to read.",
        "Tells(x, y) ::: x tells y.",
        "Finds(x, y) ::: x finds y.",
        "Gives(x, y, z) ::: x gives y to z."
      ],
      "premises": [
        "Quest(atreyu) ::: Atreyu is on a quest.",
        "Advisor(morla) ::: Morla is an advisor.",
        "Protects(auryn, atreyu) ::: AURYN protects Atreyu.",
        "Lost(artax, swamp) ::: Artax is lost to the Swamps of Sadness.",
        "Surprised(atreyu, morla) ::: Atreyu is surprised by Morla's sudden appearance.",
        "Hears(atreyu, scream) ::: Atreyu hears a scream.",
        "Hears(morla, scream) ::: Morla hears a scream.",
        "Directs(morla, southernOracle) ::: Morla directs Atreyu to the Southern Oracle.",
        "Succumbs(atreyu, exhaustion) ::: Atreyu succumbs to exhaustion.",
        "SavedBy(atreyu, falkor) ::: Atreyu is saved by Falkor.",
        "Explains(gnomes, trials) ::: The gnomes explain that Atreyu will face various trials.",
        "Faces(atreyu, trials) ::: Atreyu faces various trials.",
        "Enters(atreyu, oracle) ::: Atreyu enters the Oracle.",
        "Reveals(mirror, atreyu) ::: The mirror reveals Atreyu's true self.",
        "Recognizes(bastian, himself) ::: Bastian recognizes the boy as himself.",
        "ThrowsAside(bastian, book) ::: Bastian throws the book aside.",
        "ContinuesReading(bastian) ::: Bastian continues to read.",
        "Tells(southernOracle, atreyu) ::: The Southern Oracle tells Atreyu the only way to save the Empress is to find a human child.",
        "Finds(atreyu, humanChild) ::: Atreyu must find a human child.",
        "Gives(atreyu, newName, empress) ::: Atreyu gives a new name to the Empress.",
        "Conclusion:",
        "Finds(atreyu, humanChild) → Gives(atreyu, newName, empress) ::: Atreyu must find a human child to save the Empress by giving her a new name."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "884": [
    {
      "id": 884,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 2,
      "paragraph": "Atreyu and Falkor flee before the Nothing consumes the Southern Oracle. In flight, Atreyu is knocked from Falkor's back into the Sea of Possibilities, losing the AURYN in the process. He wakes on the shore of the abandoned ruins, and finds a series of paintings depicting his quest. Gmork reveals himself, having been lying in wait and explains that Fantasia represents humanity's imagination, and that the Nothing represents adult apathy and cynicism against it. Atreyu fends off and kills Gmork as the Nothing begins to consume the ruins. Falkor, who had managed to locate AURYN, rescues Atreyu in time. The two find themselves in a void with only small fragments of Fantasia remaining, and fear they have failed when they spot the Empress's Ivory Tower among the fragment. Inside, Atreyu apologizes for failing the Empress, but she assures him he has succeeded in bringing to her a human child who has been following his quest. As the Nothing begins to consume the Tower, the Empress pleas directly to Bastian to call out her new name. Bastian calls out the name he had selected, and loses consciousness.",
      "question_template": "The Nothing summons [[CANDIDATE_ANSWER]] to stop Atreyu.",
      "candidate_answers": [
        "AURYN"
      ],
      "predicates": [
        "HumanChild(x) ::: x is a human child.",
        "Succeed(x, y) ::: x has succeeded in y.",
        "Brings(x, y, z) ::: x brings y to z.",
        "CallsOut(x, y) ::: x calls out y.",
        "LosesConsciousness(x) ::: x loses consciousness.",
        "ConsumedByNothing(x) ::: x is consumed by the Nothing.",
        "InLocation(x, y) ::: x is in location y.",
        "Flee(x, y) ::: x flees from y.",
        "KnockedFrom(x, y) ::: x is knocked from y.",
        "Finds(x, y) ::: x finds y.",
        "Reveals(x, y) ::: x reveals y.",
        "FendsOff(x, y) ::: x fends off y.",
        "Rescues(x, y) ::: x rescues y."
      ],
      "premises": [
        "Flee(atreyu, nothing) ::: Atreyu and Falkor flee before the Nothing consumes the Southern Oracle.",
        "KnockedFrom(atreyu, falkor) ::: Atreyu is knocked from Falkor's back into the Sea of Possibilities.",
        "Finds(atreyu, paintings) ::: Atreyu finds a series of paintings depicting his quest.",
        "Reveals(gmork, humanityImagination) ::: Gmork reveals that Fantasia represents humanity's imagination.",
        "ConsumedByNothing(ruins) ::: The Nothing begins to consume the ruins.",
        "FendsOff(atreyu, gmork) ::: Atreyu fends off and kills Gmork.",
        "Rescues(falkor, atreyu) ::: Falkor rescues Atreyu in time.",
        "InLocation(atreyu, ivoryTower) ::: Atreyu is in the Empress's Ivory Tower.",
        "Succeed(atreyu, quest) ::: The Empress assures Atreyu that he has succeeded in his quest.",
        "Brings(atreyu, humanChild, empress) ::: Atreyu brings a human child to the Empress.",
        "CallsOut(bastian, newName) ::: Bastian calls out the name he had selected.",
        "LosesConsciousness(bastian) ::: Bastian loses consciousness.",
        "ConsumedByNothing(tower) ::: The Nothing begins to consume the Tower.",
        "Conclusion:",
        "HumanChild(bastian) ::: Bastian is a human child.",
        "Succeed(atreyu, quest) ::: Atreyu has succeeded in his quest."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 884,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 3,
      "paragraph": "When he wakes, he finds himself in blackness with the Empress, with only a grain of sand the last bit of Fantasia remaining. The Empress tells Bastian that he has the power to bring Fantasia back with his imagination using the power of the AURYN. Bastian re-creates Fantasia, and as he flies on Falkor's back, he sees the land and its inhabitants restored, and that Atreyu has been reunited with Artax. When Falkor tells him he can wish for anything, Bastian then brings Falkor back to the real world to chase down the bullies from before. The film ends with the narration that Bastian had many more wishes and adventures, and adds: \"but that's another story\".",
      "question_template": "The Nothing summons [[CANDIDATE_ANSWER]] to stop Atreyu.",
      "candidate_answers": [
        "The power of the AURYN",
        "A grain of sand"
      ],
      "predicates": [
        "PowerToRestore(x) ::: x has the power to bring Fantasia back.",
        "Imagination(x) ::: x uses imagination.",
        "WishForAnything(x) ::: x can wish for anything.",
        "Restored(c) ::: c is restored.",
        "Reunited(x, y) ::: x is reunited with y.",
        "InBlackness(x) ::: x is in blackness.",
        "FliesOn(x, y) ::: x flies on the back of y.",
        "ChaseDown(x, y) ::: x chases down y."
      ],
      "premises": [
        "PowerToRestore(a_1) ∧ Imagination(a_1) ∧ PowerToRestore(a_1) ::: Bastian has the power to bring Fantasia back with his imagination using the power of the AURYN.",
        "WishForAnything(a_1) ::: Bastian can wish for anything.",
        "Restored(c_1) ::: Fantasia is restored.",
        "Reunited(a_3, a_2) ::: Atreyu has been reunited with Artax.",
        "InBlackness(a_1) ::: Bastian finds himself in blackness.",
        "FliesOn(a_1, b_1) ::: Bastian flies on Falkor's back.",
        "ChaseDown(a_1, e) ::: Bastian chases down the bullies.",
        "Conclusion:",
        "Restored(c_1) ::: Fantasia has been restored."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "886": [
    {
      "id": 886,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 2,
      "paragraph": "Atreyu and Falkor flee before the Nothing consumes the Southern Oracle. In flight, Atreyu is knocked from Falkor's back into the Sea of Possibilities, losing the AURYN in the process. He wakes on the shore of the abandoned ruins, and finds a series of paintings depicting his quest. Gmork reveals himself, having been lying in wait and explains that Fantasia represents humanity's imagination, and that the Nothing represents adult apathy and cynicism against it. Atreyu fends off and kills Gmork as the Nothing begins to consume the ruins. Falkor, who had managed to locate AURYN, rescues Atreyu in time. The two find themselves in a void with only small fragments of Fantasia remaining, and fear they have failed when they spot the Empress's Ivory Tower among the fragment. Inside, Atreyu apologizes for failing the Empress, but she assures him he has succeeded in bringing to her a human child who has been following his quest. As the Nothing begins to consume the Tower, the Empress pleas directly to Bastian to call out her new name. Bastian calls out the name he had selected, and loses consciousness.",
      "question_template": "Morla is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- The Empress pleas directly to Bastian to call out her new name.",
        "- Bastian calls out the name he had selected."
      ],
      "predicates": [
        "HumanChild(x) ::: x is a human child.",
        "Succeed(x, y) ::: x has succeeded in y.",
        "Brings(x, y, z) ::: x brings y to z.",
        "CallsOut(x, y) ::: x calls out y.",
        "LosesConsciousness(x) ::: x loses consciousness.",
        "ConsumedByNothing(x) ::: x is consumed by the Nothing.",
        "InLocation(x, y) ::: x is in location y.",
        "Flee(x, y) ::: x flees from y.",
        "KnockedFrom(x, y) ::: x is knocked from y.",
        "Finds(x, y) ::: x finds y.",
        "Reveals(x, y) ::: x reveals y.",
        "FendsOff(x, y) ::: x fends off y.",
        "Rescues(x, y) ::: x rescues y."
      ],
      "premises": [
        "Flee(atreyu, nothing) ::: Atreyu and Falkor flee before the Nothing consumes the Southern Oracle.",
        "KnockedFrom(atreyu, falkor) ::: Atreyu is knocked from Falkor's back into the Sea of Possibilities.",
        "Finds(atreyu, paintings) ::: Atreyu finds a series of paintings depicting his quest.",
        "Reveals(gmork, humanityImagination) ::: Gmork reveals that Fantasia represents humanity's imagination.",
        "ConsumedByNothing(ruins) ::: The Nothing begins to consume the ruins.",
        "FendsOff(atreyu, gmork) ::: Atreyu fends off and kills Gmork.",
        "Rescues(falkor, atreyu) ::: Falkor rescues Atreyu in time.",
        "InLocation(atreyu, ivoryTower) ::: Atreyu is in the Empress's Ivory Tower.",
        "Succeed(atreyu, quest) ::: The Empress assures Atreyu that he has succeeded in his quest.",
        "Brings(atreyu, humanChild, empress) ::: Atreyu brings a human child to the Empress.",
        "CallsOut(bastian, newName) ::: Bastian calls out the name he had selected.",
        "LosesConsciousness(bastian) ::: Bastian loses consciousness.",
        "ConsumedByNothing(tower) ::: The Nothing begins to consume the Tower.",
        "Conclusion:",
        "HumanChild(bastian) ::: Bastian is a human child.",
        "Succeed(atreyu, quest) ::: Atreyu has succeeded in his quest."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 886,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 3,
      "paragraph": "When he wakes, he finds himself in blackness with the Empress, with only a grain of sand the last bit of Fantasia remaining. The Empress tells Bastian that he has the power to bring Fantasia back with his imagination using the power of the AURYN. Bastian re-creates Fantasia, and as he flies on Falkor's back, he sees the land and its inhabitants restored, and that Atreyu has been reunited with Artax. When Falkor tells him he can wish for anything, Bastian then brings Falkor back to the real world to chase down the bullies from before. The film ends with the narration that Bastian had many more wishes and adventures, and adds: \"but that's another story\".",
      "question_template": "Morla is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Bastian has the power to bring Fantasia back with his imagination using the power of the AURYN.",
        "- Bastian re-creates Fantasia."
      ],
      "predicates": [
        "PowerToRestore(x) ::: x has the power to bring Fantasia back.",
        "Imagination(x) ::: x uses imagination.",
        "WishForAnything(x) ::: x can wish for anything.",
        "Restored(c) ::: c is restored.",
        "Reunited(x, y) ::: x is reunited with y.",
        "InBlackness(x) ::: x is in blackness.",
        "FliesOn(x, y) ::: x flies on the back of y.",
        "ChaseDown(x, y) ::: x chases down y."
      ],
      "premises": [
        "PowerToRestore(a_1) ∧ Imagination(a_1) ∧ PowerToRestore(a_1) ::: Bastian has the power to bring Fantasia back with his imagination using the power of the AURYN.",
        "WishForAnything(a_1) ::: Bastian can wish for anything.",
        "Restored(c_1) ::: Fantasia is restored.",
        "Reunited(a_3, a_2) ::: Atreyu has been reunited with Artax.",
        "InBlackness(a_1) ::: Bastian finds himself in blackness.",
        "FliesOn(a_1, b_1) ::: Bastian flies on Falkor's back.",
        "ChaseDown(a_1, e) ::: Bastian chases down the bullies.",
        "Conclusion:",
        "Restored(c_1) ::: Fantasia has been restored."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "887": [
    {
      "id": 887,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 2,
      "paragraph": "Atreyu and Falkor flee before the Nothing consumes the Southern Oracle. In flight, Atreyu is knocked from Falkor's back into the Sea of Possibilities, losing the AURYN in the process. He wakes on the shore of the abandoned ruins, and finds a series of paintings depicting his quest. Gmork reveals himself, having been lying in wait and explains that Fantasia represents humanity's imagination, and that the Nothing represents adult apathy and cynicism against it. Atreyu fends off and kills Gmork as the Nothing begins to consume the ruins. Falkor, who had managed to locate AURYN, rescues Atreyu in time. The two find themselves in a void with only small fragments of Fantasia remaining, and fear they have failed when they spot the Empress's Ivory Tower among the fragment. Inside, Atreyu apologizes for failing the Empress, but she assures him he has succeeded in bringing to her a human child who has been following his quest. As the Nothing begins to consume the Tower, the Empress pleas directly to Bastian to call out her new name. Bastian calls out the name he had selected, and loses consciousness.",
      "question_template": "Atreyu sees [[CANDIDATE_ANSWER]] in the mirror that shows his true self.",
      "candidate_answers": [
        "- Only small fragments of Fantasia remaining"
      ],
      "predicates": [
        "HumanChild(x) ::: x is a human child.",
        "Succeed(x, y) ::: x has succeeded in y.",
        "Brings(x, y, z) ::: x brings y to z.",
        "CallsOut(x, y) ::: x calls out y.",
        "LosesConsciousness(x) ::: x loses consciousness.",
        "ConsumedByNothing(x) ::: x is consumed by the Nothing.",
        "InLocation(x, y) ::: x is in location y.",
        "Flee(x, y) ::: x flees from y.",
        "KnockedFrom(x, y) ::: x is knocked from y.",
        "Finds(x, y) ::: x finds y.",
        "Reveals(x, y) ::: x reveals y.",
        "FendsOff(x, y) ::: x fends off y.",
        "Rescues(x, y) ::: x rescues y."
      ],
      "premises": [
        "Flee(atreyu, nothing) ::: Atreyu and Falkor flee before the Nothing consumes the Southern Oracle.",
        "KnockedFrom(atreyu, falkor) ::: Atreyu is knocked from Falkor's back into the Sea of Possibilities.",
        "Finds(atreyu, paintings) ::: Atreyu finds a series of paintings depicting his quest.",
        "Reveals(gmork, humanityImagination) ::: Gmork reveals that Fantasia represents humanity's imagination.",
        "ConsumedByNothing(ruins) ::: The Nothing begins to consume the ruins.",
        "FendsOff(atreyu, gmork) ::: Atreyu fends off and kills Gmork.",
        "Rescues(falkor, atreyu) ::: Falkor rescues Atreyu in time.",
        "InLocation(atreyu, ivoryTower) ::: Atreyu is in the Empress's Ivory Tower.",
        "Succeed(atreyu, quest) ::: The Empress assures Atreyu that he has succeeded in his quest.",
        "Brings(atreyu, humanChild, empress) ::: Atreyu brings a human child to the Empress.",
        "CallsOut(bastian, newName) ::: Bastian calls out the name he had selected.",
        "LosesConsciousness(bastian) ::: Bastian loses consciousness.",
        "ConsumedByNothing(tower) ::: The Nothing begins to consume the Tower.",
        "Conclusion:",
        "HumanChild(bastian) ::: Bastian is a human child.",
        "Succeed(atreyu, quest) ::: Atreyu has succeeded in his quest."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 887,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 3,
      "paragraph": "When he wakes, he finds himself in blackness with the Empress, with only a grain of sand the last bit of Fantasia remaining. The Empress tells Bastian that he has the power to bring Fantasia back with his imagination using the power of the AURYN. Bastian re-creates Fantasia, and as he flies on Falkor's back, he sees the land and its inhabitants restored, and that Atreyu has been reunited with Artax. When Falkor tells him he can wish for anything, Bastian then brings Falkor back to the real world to chase down the bullies from before. The film ends with the narration that Bastian had many more wishes and adventures, and adds: \"but that's another story\".",
      "question_template": "Atreyu sees [[CANDIDATE_ANSWER]] in the mirror that shows his true self.",
      "candidate_answers": [
        "A grain of sand the last bit of Fantasia remaining"
      ],
      "predicates": [
        "PowerToRestore(x) ::: x has the power to bring Fantasia back.",
        "Imagination(x) ::: x uses imagination.",
        "WishForAnything(x) ::: x can wish for anything.",
        "Restored(c) ::: c is restored.",
        "Reunited(x, y) ::: x is reunited with y.",
        "InBlackness(x) ::: x is in blackness.",
        "FliesOn(x, y) ::: x flies on the back of y.",
        "ChaseDown(x, y) ::: x chases down y."
      ],
      "premises": [
        "PowerToRestore(a_1) ∧ Imagination(a_1) ∧ PowerToRestore(a_1) ::: Bastian has the power to bring Fantasia back with his imagination using the power of the AURYN.",
        "WishForAnything(a_1) ::: Bastian can wish for anything.",
        "Restored(c_1) ::: Fantasia is restored.",
        "Reunited(a_3, a_2) ::: Atreyu has been reunited with Artax.",
        "InBlackness(a_1) ::: Bastian finds himself in blackness.",
        "FliesOn(a_1, b_1) ::: Bastian flies on Falkor's back.",
        "ChaseDown(a_1, e) ::: Bastian chases down the bullies.",
        "Conclusion:",
        "Restored(c_1) ::: Fantasia has been restored."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "888": [
    {
      "id": 888,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 2,
      "paragraph": "Atreyu and Falkor flee before the Nothing consumes the Southern Oracle. In flight, Atreyu is knocked from Falkor's back into the Sea of Possibilities, losing the AURYN in the process. He wakes on the shore of the abandoned ruins, and finds a series of paintings depicting his quest. Gmork reveals himself, having been lying in wait and explains that Fantasia represents humanity's imagination, and that the Nothing represents adult apathy and cynicism against it. Atreyu fends off and kills Gmork as the Nothing begins to consume the ruins. Falkor, who had managed to locate AURYN, rescues Atreyu in time. The two find themselves in a void with only small fragments of Fantasia remaining, and fear they have failed when they spot the Empress's Ivory Tower among the fragment. Inside, Atreyu apologizes for failing the Empress, but she assures him he has succeeded in bringing to her a human child who has been following his quest. As the Nothing begins to consume the Tower, the Empress pleas directly to Bastian to call out her new name. Bastian calls out the name he had selected, and loses consciousness.",
      "question_template": "The Gmork says that Fantasia represents [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "A series of paintings depicting his quest"
      ],
      "predicates": [
        "HumanChild(x) ::: x is a human child.",
        "Succeed(x, y) ::: x has succeeded in y.",
        "Brings(x, y, z) ::: x brings y to z.",
        "CallsOut(x, y) ::: x calls out y.",
        "LosesConsciousness(x) ::: x loses consciousness.",
        "ConsumedByNothing(x) ::: x is consumed by the Nothing.",
        "InLocation(x, y) ::: x is in location y.",
        "Flee(x, y) ::: x flees from y.",
        "KnockedFrom(x, y) ::: x is knocked from y.",
        "Finds(x, y) ::: x finds y.",
        "Reveals(x, y) ::: x reveals y.",
        "FendsOff(x, y) ::: x fends off y.",
        "Rescues(x, y) ::: x rescues y."
      ],
      "premises": [
        "Flee(atreyu, nothing) ::: Atreyu and Falkor flee before the Nothing consumes the Southern Oracle.",
        "KnockedFrom(atreyu, falkor) ::: Atreyu is knocked from Falkor's back into the Sea of Possibilities.",
        "Finds(atreyu, paintings) ::: Atreyu finds a series of paintings depicting his quest.",
        "Reveals(gmork, humanityImagination) ::: Gmork reveals that Fantasia represents humanity's imagination.",
        "ConsumedByNothing(ruins) ::: The Nothing begins to consume the ruins.",
        "FendsOff(atreyu, gmork) ::: Atreyu fends off and kills Gmork.",
        "Rescues(falkor, atreyu) ::: Falkor rescues Atreyu in time.",
        "InLocation(atreyu, ivoryTower) ::: Atreyu is in the Empress's Ivory Tower.",
        "Succeed(atreyu, quest) ::: The Empress assures Atreyu that he has succeeded in his quest.",
        "Brings(atreyu, humanChild, empress) ::: Atreyu brings a human child to the Empress.",
        "CallsOut(bastian, newName) ::: Bastian calls out the name he had selected.",
        "LosesConsciousness(bastian) ::: Bastian loses consciousness.",
        "ConsumedByNothing(tower) ::: The Nothing begins to consume the Tower.",
        "Conclusion:",
        "HumanChild(bastian) ::: Bastian is a human child.",
        "Succeed(atreyu, quest) ::: Atreyu has succeeded in his quest."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "891": [
    {
      "id": 891,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 0,
      "paragraph": " Bastian Balthazar Bux is a shy and friendless bibliophile 12-year-old, teased by bullies from school. On his way to school, he hides from the bullies in a bookstore, interrupting the grumpy bookseller, Mr. Coreander. Bastian asks about one of the books he sees, but Mr. Coreander advises against it. His curiosity piqued, Bastian seizes the book, leaving a note promising to return it, and hides in the school's attic to read. The book describes the world of Fantasia slowly being devoured by a force called \"The Nothing\". Fantasia's ruler, the Childlike Empress, has fallen ill, and Atreyu is tasked to discover the cure, believing that once the Empress is well, the Nothing will no longer be a threat. Atreyu is given a medallion named the AURYN that can guide and protect him in the quest. As Atreyu sets out, the Nothing summons Gmork, a wolf-like creature, to kill Atreyu.",
      "question_template": "[[CANDIDATE_ANSWER]] is responsible for spreading the Nothing.",
      "candidate_answers": [
        "Atreyu is tasked to discover the cure",
        "The Childlike Empress has fallen ill"
      ],
      "predicates": [
        "Shy(x) ::: x is a shy person.",
        "Friendless(x) ::: x is a friendless person.",
        "Bibliophile(x) ::: x is a bibliophile.",
        "Teased(x) ::: x is teased by bullies.",
        "Hides(x, y) ::: x hides from y.",
        "Asks(x, y) ::: x asks about y.",
        "AdvisesAgainst(x, y) ::: x advises against y.",
        "Seizes(x, y) ::: x seizes y.",
        "PromisesToReturn(x, y) ::: x promises to return y.",
        "HidesIn(x, y) ::: x hides in y.",
        "Describes(x, y) ::: x describes y.",
        "FallsIll(x) ::: x falls ill.",
        "TaskedToDiscover(x, y) ::: x is tasked to discover y.",
        "Believes(x, y) ::: x believes that y is true.",
        "Given(x, y) ::: x is given y.",
        "SetsOut(x) ::: x sets out on a quest.",
        "Summons(x, y) ::: x summons y.",
        "ToKill(x, y) ::: x is tasked to kill y."
      ],
      "premises": [
        "Shy(bastian) ∧ Friendless(bastian) ∧ Bibliophile(bastian) ∧ Teased(bastian) ::: Bastian Balthazar Bux is a shy and friendless bibliophile 12-year-old, teased by bullies from school.",
        "Hides(bastian, bullies) ::: On his way to school, he hides from the bullies in a bookstore.",
        "Asks(bastian, book) ∧ AdvisesAgainst(coreander, book) ::: Bastian asks about one of the books he sees, but Mr. Coreander advises against it.",
        "Seizes(bastian, book) ∧ PromisesToReturn(bastian, book) ::: Bastian seizes the book, leaving a note promising to return it.",
        "HidesIn(bastian, attic) ::: Bastian hides in the school's attic to read.",
        "Describes(book, fantasia) ::: The book describes the world of Fantasia slowly being devoured by a force called \"The Nothing\".",
        "FallsIll(empress) ::: Fantasia's ruler, the Childlike Empress, has fallen ill.",
        "TaskedToDiscover(atreyu, cure) ::: Atreyu is tasked to discover the cure for the Childlike Empress to stop the Nothing.",
        "Believes(atreyu, empressWell) ::: Atreyu believes that once the Empress is well, the Nothing will no longer be a threat.",
        "Given(atreyu, auryn) ::: Atreyu is given a medallion named the AURYN that can guide and protect him in the quest.",
        "SetsOut(atreyu) ::: As Atreyu sets out, the Nothing summons Gmork.",
        "Summons(nothing, gmork) ::: The Nothing summons Gmork, a wolf-like creature, to kill Atreyu."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 891,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 2,
      "paragraph": "Atreyu and Falkor flee before the Nothing consumes the Southern Oracle. In flight, Atreyu is knocked from Falkor's back into the Sea of Possibilities, losing the AURYN in the process. He wakes on the shore of the abandoned ruins, and finds a series of paintings depicting his quest. Gmork reveals himself, having been lying in wait and explains that Fantasia represents humanity's imagination, and that the Nothing represents adult apathy and cynicism against it. Atreyu fends off and kills Gmork as the Nothing begins to consume the ruins. Falkor, who had managed to locate AURYN, rescues Atreyu in time. The two find themselves in a void with only small fragments of Fantasia remaining, and fear they have failed when they spot the Empress's Ivory Tower among the fragment. Inside, Atreyu apologizes for failing the Empress, but she assures him he has succeeded in bringing to her a human child who has been following his quest. As the Nothing begins to consume the Tower, the Empress pleas directly to Bastian to call out her new name. Bastian calls out the name he had selected, and loses consciousness.",
      "question_template": "[[CANDIDATE_ANSWER]] is responsible for spreading the Nothing.",
      "candidate_answers": [
        "- Atreyu apologizes for failing the Empress, but she assures him he has succeeded in bringing to her a human child who has been following his quest."
      ],
      "predicates": [
        "HumanChild(x) ::: x is a human child.",
        "Succeed(x, y) ::: x has succeeded in y.",
        "Brings(x, y, z) ::: x brings y to z.",
        "CallsOut(x, y) ::: x calls out y.",
        "LosesConsciousness(x) ::: x loses consciousness.",
        "ConsumedByNothing(x) ::: x is consumed by the Nothing.",
        "InLocation(x, y) ::: x is in location y.",
        "Flee(x, y) ::: x flees from y.",
        "KnockedFrom(x, y) ::: x is knocked from y.",
        "Finds(x, y) ::: x finds y.",
        "Reveals(x, y) ::: x reveals y.",
        "FendsOff(x, y) ::: x fends off y.",
        "Rescues(x, y) ::: x rescues y."
      ],
      "premises": [
        "Flee(atreyu, nothing) ::: Atreyu and Falkor flee before the Nothing consumes the Southern Oracle.",
        "KnockedFrom(atreyu, falkor) ::: Atreyu is knocked from Falkor's back into the Sea of Possibilities.",
        "Finds(atreyu, paintings) ::: Atreyu finds a series of paintings depicting his quest.",
        "Reveals(gmork, humanityImagination) ::: Gmork reveals that Fantasia represents humanity's imagination.",
        "ConsumedByNothing(ruins) ::: The Nothing begins to consume the ruins.",
        "FendsOff(atreyu, gmork) ::: Atreyu fends off and kills Gmork.",
        "Rescues(falkor, atreyu) ::: Falkor rescues Atreyu in time.",
        "InLocation(atreyu, ivoryTower) ::: Atreyu is in the Empress's Ivory Tower.",
        "Succeed(atreyu, quest) ::: The Empress assures Atreyu that he has succeeded in his quest.",
        "Brings(atreyu, humanChild, empress) ::: Atreyu brings a human child to the Empress.",
        "CallsOut(bastian, newName) ::: Bastian calls out the name he had selected.",
        "LosesConsciousness(bastian) ::: Bastian loses consciousness.",
        "ConsumedByNothing(tower) ::: The Nothing begins to consume the Tower.",
        "Conclusion:",
        "HumanChild(bastian) ::: Bastian is a human child.",
        "Succeed(atreyu, quest) ::: Atreyu has succeeded in his quest."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "894": [
    {
      "id": 894,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 0,
      "paragraph": " Bastian Balthazar Bux is a shy and friendless bibliophile 12-year-old, teased by bullies from school. On his way to school, he hides from the bullies in a bookstore, interrupting the grumpy bookseller, Mr. Coreander. Bastian asks about one of the books he sees, but Mr. Coreander advises against it. His curiosity piqued, Bastian seizes the book, leaving a note promising to return it, and hides in the school's attic to read. The book describes the world of Fantasia slowly being devoured by a force called \"The Nothing\". Fantasia's ruler, the Childlike Empress, has fallen ill, and Atreyu is tasked to discover the cure, believing that once the Empress is well, the Nothing will no longer be a threat. Atreyu is given a medallion named the AURYN that can guide and protect him in the quest. As Atreyu sets out, the Nothing summons Gmork, a wolf-like creature, to kill Atreyu.",
      "question_template": "Atreyu is suggested by Morla to seek the answers she lacks in [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- The book describes the world of Fantasia slowly being devoured by a force called \"The Nothing\".",
        "- Fantasia's ruler, the Childlike Empress, has fallen ill, and Atreyu is tasked to discover the cure.",
        "- Atreyu is given a medallion named the AURYN that can guide and protect him in the quest."
      ],
      "predicates": [
        "Shy(x) ::: x is a shy person.",
        "Friendless(x) ::: x is a friendless person.",
        "Bibliophile(x) ::: x is a bibliophile.",
        "Teased(x) ::: x is teased by bullies.",
        "Hides(x, y) ::: x hides from y.",
        "Asks(x, y) ::: x asks about y.",
        "AdvisesAgainst(x, y) ::: x advises against y.",
        "Seizes(x, y) ::: x seizes y.",
        "PromisesToReturn(x, y) ::: x promises to return y.",
        "HidesIn(x, y) ::: x hides in y.",
        "Describes(x, y) ::: x describes y.",
        "FallsIll(x) ::: x falls ill.",
        "TaskedToDiscover(x, y) ::: x is tasked to discover y.",
        "Believes(x, y) ::: x believes that y is true.",
        "Given(x, y) ::: x is given y.",
        "SetsOut(x) ::: x sets out on a quest.",
        "Summons(x, y) ::: x summons y.",
        "ToKill(x, y) ::: x is tasked to kill y."
      ],
      "premises": [
        "Shy(bastian) ∧ Friendless(bastian) ∧ Bibliophile(bastian) ∧ Teased(bastian) ::: Bastian Balthazar Bux is a shy and friendless bibliophile 12-year-old, teased by bullies from school.",
        "Hides(bastian, bullies) ::: On his way to school, he hides from the bullies in a bookstore.",
        "Asks(bastian, book) ∧ AdvisesAgainst(coreander, book) ::: Bastian asks about one of the books he sees, but Mr. Coreander advises against it.",
        "Seizes(bastian, book) ∧ PromisesToReturn(bastian, book) ::: Bastian seizes the book, leaving a note promising to return it.",
        "HidesIn(bastian, attic) ::: Bastian hides in the school's attic to read.",
        "Describes(book, fantasia) ::: The book describes the world of Fantasia slowly being devoured by a force called \"The Nothing\".",
        "FallsIll(empress) ::: Fantasia's ruler, the Childlike Empress, has fallen ill.",
        "TaskedToDiscover(atreyu, cure) ::: Atreyu is tasked to discover the cure for the Childlike Empress to stop the Nothing.",
        "Believes(atreyu, empressWell) ::: Atreyu believes that once the Empress is well, the Nothing will no longer be a threat.",
        "Given(atreyu, auryn) ::: Atreyu is given a medallion named the AURYN that can guide and protect him in the quest.",
        "SetsOut(atreyu) ::: As Atreyu sets out, the Nothing summons Gmork.",
        "Summons(nothing, gmork) ::: The Nothing summons Gmork, a wolf-like creature, to kill Atreyu."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "895": [
    {
      "id": 895,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 2,
      "paragraph": "Atreyu and Falkor flee before the Nothing consumes the Southern Oracle. In flight, Atreyu is knocked from Falkor's back into the Sea of Possibilities, losing the AURYN in the process. He wakes on the shore of the abandoned ruins, and finds a series of paintings depicting his quest. Gmork reveals himself, having been lying in wait and explains that Fantasia represents humanity's imagination, and that the Nothing represents adult apathy and cynicism against it. Atreyu fends off and kills Gmork as the Nothing begins to consume the ruins. Falkor, who had managed to locate AURYN, rescues Atreyu in time. The two find themselves in a void with only small fragments of Fantasia remaining, and fear they have failed when they spot the Empress's Ivory Tower among the fragment. Inside, Atreyu apologizes for failing the Empress, but she assures him he has succeeded in bringing to her a human child who has been following his quest. As the Nothing begins to consume the Tower, the Empress pleas directly to Bastian to call out her new name. Bastian calls out the name he had selected, and loses consciousness.",
      "question_template": "Morla lives in [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Falkor",
        "A luck dragon"
      ],
      "predicates": [
        "HumanChild(x) ::: x is a human child.",
        "Succeed(x, y) ::: x has succeeded in y.",
        "Brings(x, y, z) ::: x brings y to z.",
        "CallsOut(x, y) ::: x calls out y.",
        "LosesConsciousness(x) ::: x loses consciousness.",
        "ConsumedByNothing(x) ::: x is consumed by the Nothing.",
        "InLocation(x, y) ::: x is in location y.",
        "Flee(x, y) ::: x flees from y.",
        "KnockedFrom(x, y) ::: x is knocked from y.",
        "Finds(x, y) ::: x finds y.",
        "Reveals(x, y) ::: x reveals y.",
        "FendsOff(x, y) ::: x fends off y.",
        "Rescues(x, y) ::: x rescues y."
      ],
      "premises": [
        "Flee(atreyu, nothing) ::: Atreyu and Falkor flee before the Nothing consumes the Southern Oracle.",
        "KnockedFrom(atreyu, falkor) ::: Atreyu is knocked from Falkor's back into the Sea of Possibilities.",
        "Finds(atreyu, paintings) ::: Atreyu finds a series of paintings depicting his quest.",
        "Reveals(gmork, humanityImagination) ::: Gmork reveals that Fantasia represents humanity's imagination.",
        "ConsumedByNothing(ruins) ::: The Nothing begins to consume the ruins.",
        "FendsOff(atreyu, gmork) ::: Atreyu fends off and kills Gmork.",
        "Rescues(falkor, atreyu) ::: Falkor rescues Atreyu in time.",
        "InLocation(atreyu, ivoryTower) ::: Atreyu is in the Empress's Ivory Tower.",
        "Succeed(atreyu, quest) ::: The Empress assures Atreyu that he has succeeded in his quest.",
        "Brings(atreyu, humanChild, empress) ::: Atreyu brings a human child to the Empress.",
        "CallsOut(bastian, newName) ::: Bastian calls out the name he had selected.",
        "LosesConsciousness(bastian) ::: Bastian loses consciousness.",
        "ConsumedByNothing(tower) ::: The Nothing begins to consume the Tower.",
        "Conclusion:",
        "HumanChild(bastian) ::: Bastian is a human child.",
        "Succeed(atreyu, quest) ::: Atreyu has succeeded in his quest."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "896": [
    {
      "id": 896,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 3,
      "paragraph": "When he wakes, he finds himself in blackness with the Empress, with only a grain of sand the last bit of Fantasia remaining. The Empress tells Bastian that he has the power to bring Fantasia back with his imagination using the power of the AURYN. Bastian re-creates Fantasia, and as he flies on Falkor's back, he sees the land and its inhabitants restored, and that Atreyu has been reunited with Artax. When Falkor tells him he can wish for anything, Bastian then brings Falkor back to the real world to chase down the bullies from before. The film ends with the narration that Bastian had many more wishes and adventures, and adds: \"but that's another story\".",
      "question_template": "[[CANDIDATE_ANSWER]] saves Atreyu from the Swamp of Sadness when he gives in to the exhaustion.",
      "candidate_answers": [
        "The last bit of Fantasia remaining",
        "The power to bring Fantasia back with his imagination",
        "Bastian re-creates Fantasia",
        "The land and its inhabitants restored"
      ],
      "predicates": [
        "PowerToRestore(x) ::: x has the power to bring Fantasia back.",
        "Imagination(x) ::: x uses imagination.",
        "WishForAnything(x) ::: x can wish for anything.",
        "Restored(c) ::: c is restored.",
        "Reunited(x, y) ::: x is reunited with y.",
        "InBlackness(x) ::: x is in blackness.",
        "FliesOn(x, y) ::: x flies on the back of y.",
        "ChaseDown(x, y) ::: x chases down y."
      ],
      "premises": [
        "PowerToRestore(a_1) ∧ Imagination(a_1) ∧ PowerToRestore(a_1) ::: Bastian has the power to bring Fantasia back with his imagination using the power of the AURYN.",
        "WishForAnything(a_1) ::: Bastian can wish for anything.",
        "Restored(c_1) ::: Fantasia is restored.",
        "Reunited(a_3, a_2) ::: Atreyu has been reunited with Artax.",
        "InBlackness(a_1) ::: Bastian finds himself in blackness.",
        "FliesOn(a_1, b_1) ::: Bastian flies on Falkor's back.",
        "ChaseDown(a_1, e) ::: Bastian chases down the bullies.",
        "Conclusion:",
        "Restored(c_1) ::: Fantasia has been restored."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "898": [
    {
      "id": 898,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 2,
      "paragraph": "Atreyu and Falkor flee before the Nothing consumes the Southern Oracle. In flight, Atreyu is knocked from Falkor's back into the Sea of Possibilities, losing the AURYN in the process. He wakes on the shore of the abandoned ruins, and finds a series of paintings depicting his quest. Gmork reveals himself, having been lying in wait and explains that Fantasia represents humanity's imagination, and that the Nothing represents adult apathy and cynicism against it. Atreyu fends off and kills Gmork as the Nothing begins to consume the ruins. Falkor, who had managed to locate AURYN, rescues Atreyu in time. The two find themselves in a void with only small fragments of Fantasia remaining, and fear they have failed when they spot the Empress's Ivory Tower among the fragment. Inside, Atreyu apologizes for failing the Empress, but she assures him he has succeeded in bringing to her a human child who has been following his quest. As the Nothing begins to consume the Tower, the Empress pleas directly to Bastian to call out her new name. Bastian calls out the name he had selected, and loses consciousness.",
      "question_template": "[[CANDIDATE_ANSWER]] protects Atreyu on his quest.",
      "candidate_answers": [
        "- A series of paintings depicting his quest",
        "- The Empress's Ivory Tower among the fragment"
      ],
      "predicates": [
        "HumanChild(x) ::: x is a human child.",
        "Succeed(x, y) ::: x has succeeded in y.",
        "Brings(x, y, z) ::: x brings y to z.",
        "CallsOut(x, y) ::: x calls out y.",
        "LosesConsciousness(x) ::: x loses consciousness.",
        "ConsumedByNothing(x) ::: x is consumed by the Nothing.",
        "InLocation(x, y) ::: x is in location y.",
        "Flee(x, y) ::: x flees from y.",
        "KnockedFrom(x, y) ::: x is knocked from y.",
        "Finds(x, y) ::: x finds y.",
        "Reveals(x, y) ::: x reveals y.",
        "FendsOff(x, y) ::: x fends off y.",
        "Rescues(x, y) ::: x rescues y."
      ],
      "premises": [
        "Flee(atreyu, nothing) ::: Atreyu and Falkor flee before the Nothing consumes the Southern Oracle.",
        "KnockedFrom(atreyu, falkor) ::: Atreyu is knocked from Falkor's back into the Sea of Possibilities.",
        "Finds(atreyu, paintings) ::: Atreyu finds a series of paintings depicting his quest.",
        "Reveals(gmork, humanityImagination) ::: Gmork reveals that Fantasia represents humanity's imagination.",
        "ConsumedByNothing(ruins) ::: The Nothing begins to consume the ruins.",
        "FendsOff(atreyu, gmork) ::: Atreyu fends off and kills Gmork.",
        "Rescues(falkor, atreyu) ::: Falkor rescues Atreyu in time.",
        "InLocation(atreyu, ivoryTower) ::: Atreyu is in the Empress's Ivory Tower.",
        "Succeed(atreyu, quest) ::: The Empress assures Atreyu that he has succeeded in his quest.",
        "Brings(atreyu, humanChild, empress) ::: Atreyu brings a human child to the Empress.",
        "CallsOut(bastian, newName) ::: Bastian calls out the name he had selected.",
        "LosesConsciousness(bastian) ::: Bastian loses consciousness.",
        "ConsumedByNothing(tower) ::: The Nothing begins to consume the Tower.",
        "Conclusion:",
        "HumanChild(bastian) ::: Bastian is a human child.",
        "Succeed(atreyu, quest) ::: Atreyu has succeeded in his quest."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "899": [
    {
      "id": 899,
      "context_id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 2,
      "paragraph": "Atreyu and Falkor flee before the Nothing consumes the Southern Oracle. In flight, Atreyu is knocked from Falkor's back into the Sea of Possibilities, losing the AURYN in the process. He wakes on the shore of the abandoned ruins, and finds a series of paintings depicting his quest. Gmork reveals himself, having been lying in wait and explains that Fantasia represents humanity's imagination, and that the Nothing represents adult apathy and cynicism against it. Atreyu fends off and kills Gmork as the Nothing begins to consume the ruins. Falkor, who had managed to locate AURYN, rescues Atreyu in time. The two find themselves in a void with only small fragments of Fantasia remaining, and fear they have failed when they spot the Empress's Ivory Tower among the fragment. Inside, Atreyu apologizes for failing the Empress, but she assures him he has succeeded in bringing to her a human child who has been following his quest. As the Nothing begins to consume the Tower, the Empress pleas directly to Bastian to call out her new name. Bastian calls out the name he had selected, and loses consciousness.",
      "question_template": "The Southern Oracle says that [[CANDIDATE_ANSWER]] will save the Empress.",
      "candidate_answers": [
        "Atreyu fends off and kills Gmork",
        "Atreyu"
      ],
      "predicates": [
        "HumanChild(x) ::: x is a human child.",
        "Succeed(x, y) ::: x has succeeded in y.",
        "Brings(x, y, z) ::: x brings y to z.",
        "CallsOut(x, y) ::: x calls out y.",
        "LosesConsciousness(x) ::: x loses consciousness.",
        "ConsumedByNothing(x) ::: x is consumed by the Nothing.",
        "InLocation(x, y) ::: x is in location y.",
        "Flee(x, y) ::: x flees from y.",
        "KnockedFrom(x, y) ::: x is knocked from y.",
        "Finds(x, y) ::: x finds y.",
        "Reveals(x, y) ::: x reveals y.",
        "FendsOff(x, y) ::: x fends off y.",
        "Rescues(x, y) ::: x rescues y."
      ],
      "premises": [
        "Flee(atreyu, nothing) ::: Atreyu and Falkor flee before the Nothing consumes the Southern Oracle.",
        "KnockedFrom(atreyu, falkor) ::: Atreyu is knocked from Falkor's back into the Sea of Possibilities.",
        "Finds(atreyu, paintings) ::: Atreyu finds a series of paintings depicting his quest.",
        "Reveals(gmork, humanityImagination) ::: Gmork reveals that Fantasia represents humanity's imagination.",
        "ConsumedByNothing(ruins) ::: The Nothing begins to consume the ruins.",
        "FendsOff(atreyu, gmork) ::: Atreyu fends off and kills Gmork.",
        "Rescues(falkor, atreyu) ::: Falkor rescues Atreyu in time.",
        "InLocation(atreyu, ivoryTower) ::: Atreyu is in the Empress's Ivory Tower.",
        "Succeed(atreyu, quest) ::: The Empress assures Atreyu that he has succeeded in his quest.",
        "Brings(atreyu, humanChild, empress) ::: Atreyu brings a human child to the Empress.",
        "CallsOut(bastian, newName) ::: Bastian calls out the name he had selected.",
        "LosesConsciousness(bastian) ::: Bastian loses consciousness.",
        "ConsumedByNothing(tower) ::: The Nothing begins to consume the Tower.",
        "Conclusion:",
        "HumanChild(bastian) ::: Bastian is a human child.",
        "Succeed(atreyu, quest) ::: Atreyu has succeeded in his quest."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "900": [
    {
      "id": 900,
      "context_id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 1,
      "paragraph": "In what seems to be a scene from a different narrative, set at a diner called Winkies, a man (Patrick Fischler) tells his companion (Michael Cooke) about a nightmare in which he dreamt there was a horrible figure behind the diner. When they investigate, the figure appears, causing the man with the nightmare to collapse in fright. As the principal narrative resumes, Hollywood director Adam Kesher (Justin Theroux) has his film commandeered by apparent mobsters, who insist he cast an unknown actress named Camilla Rhodes (Melissa George) as the lead in his film. After he resists, he returns home to find his wife having an affair and is thrown out of his house. He later learns that his bank has closed his line of credit and he is broke. He agrees to meet a mysterious figure called The Cowboy, who urges him to cast Camilla Rhodes for his own good. Later, a bungling hit man (Mark Pellegrino) attempts to steal a book full of phone numbers and leaves three people dead.",
      "question_template": "Bastian enters a bookstore at the beginning of the story because of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "No relevant information found in the paragraph."
      ],
      "predicates": [
        "Commandeered(x, y) ::: x's film is commandeered by y.",
        "NegativelyImpacted(x, y) ::: x's life is negatively impacted by y's demands.",
        "ProvidesAdvice(x, y) ::: x provides advice to y for their own good.",
        "Dreamt(x, y) ::: x dreamt about y.",
        "Investigate(x, y) ::: x investigates y.",
        "CollapsesInFright(x) ::: x collapses in fright.",
        "HasAffair(x, y) ::: x has an affair with y.",
        "ClosedCreditLine(x) ::: x's bank has closed their line of credit.",
        "Broke(x) ::: x is broke.",
        "Meets(x, y) ::: x meets y.",
        "Urges(x, y) ::: x urges y to do something."
      ],
      "premises": [
        "Commandeered(adamKesher, mobsters) ::: Adam Kesher's film is commandeered by mobsters.",
        "NegativelyImpacted(adamKesher, mobsters) ::: Adam Kesher's life is negatively impacted by the mobsters' demands.",
        "ProvidesAdvice(cowboy, adamKesher) ::: The Cowboy provides advice to Adam Kesher for his own good.",
        "Dreamt(patrickFischler, horribleFigure) ::: Patrick Fischler dreamt about a horrible figure behind the diner.",
        "Investigate(patrickFischler, horribleFigure) ::: Patrick Fischler investigates the horrible figure.",
        "CollapsesInFright(patrickFischler) ::: Patrick Fischler collapses in fright.",
        "HasAffair(diane, michaelCooke) ::: Diane has an affair with Michael Cooke.",
        "ClosedCreditLine(adamKesher) ::: Adam Kesher's bank has closed his line of credit.",
        "Broke(adamKesher) ::: Adam Kesher is broke.",
        "Meets(adamKesher, cowboy) ::: Adam Kesher meets The Cowboy.",
        "Urges(cowboy, adamKesher) ::: The Cowboy urges Adam Kesher to cast Camilla Rhodes for his own good."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 900,
      "context_id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 2,
      "paragraph": "Trying to learn more about Rita's accident, Betty and Rita go to Winkies and are served by a waitress named Diane, which causes Rita to remember the name \"Diane Selwyn\". They find Diane Selwyn in the phone book and call her, but she does not answer. Betty goes to an audition, where her performance is highly praised. A casting agent takes her to the set of a film called The Sylvia North Story, directed by Adam, where Camilla Rhodes gives an audition and Adam declares, \"This is the girl.\" Betty smiles shyly as she locks eyes with Adam, but she flees before she can meet him, saying that she is late to meet a friend.",
      "question_template": "Bastian enters a bookstore at the beginning of the story because of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- The name \"Diane Selwyn\"",
        "- She remembers the name \"Diane Selwyn\""
      ],
      "predicates": [
        "ServedBy(x, y) ::: x is served by waitress y.",
        "Remembers(x, y) ::: x remembers y.",
        "Finds(x, y) ::: x finds y in the phone book.",
        "Calls(x, y) ::: x calls y.",
        "Answers(x) ::: x answers the phone.",
        "HighlyPraised(x) ::: x is highly praised.",
        "TakesToSet(x, y) ::: x takes y to the set of a film.",
        "Auditions(x) ::: x gives an audition.",
        "Declares(x, y) ::: x declares y as the girl.",
        "LocksEyes(x, y) ::: x locks eyes with y.",
        "Flees(x) ::: x flees from a situation.",
        "LateToMeet(x, y) ::: x is late to meet y."
      ],
      "premises": [
        "ServedBy(Rita, Diane) ∧ Remembers(Rita, \"Diane Selwyn\") ::: Rita is served by waitress Diane, which causes her to remember the name \"Diane Selwyn\".",
        "Finds(Betty, Diane) ∧ Calls(Betty, Diane) ∧ ¬Answers(Diane) ::: Betty finds Diane Selwyn in the phone book and calls her, but she does not answer.",
        "HighlyPraised(Betty) ∧ TakesToSet(castingAgent, Betty) ∧ Auditions(Camilla) ∧ Declares(Adam, Camilla) ::: Betty goes to an audition, where her performance is highly praised, and a casting agent takes her to the set of a film called The Sylvia North Story, where Camilla Rhodes gives an audition and Adam declares, \"This is the girl.\"",
        "LocksEyes(Betty, Adam) ∧ Flees(Betty) ∧ LateToMeet(Betty, friend) ::: Betty smiles shyly as she locks eyes with Adam, but she flees before she can meet him, saying that she is late to meet a friend."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 900,
      "context_id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 3,
      "paragraph": "Betty and Rita go to Diane Selwyn's apartment and break in when no one answers the door. In the bedroom they find the body of a woman who has been dead for several days. Terrified, they return to their apartment, where Rita disguises herself with a blonde wig. The two women have sex that night and awake at 2 a.m., when Rita insists they go to an eerie theater called Club Silencio. On stage, a man explains in several languages that everything is an illusion; a woman begins singing then collapses, although her vocals continue. Betty finds a blue box in her purse that matches Rita's key. Upon returning to the apartment, Rita retrieves the key and finds that Betty has disappeared. Rita unlocks the box, and it falls to the floor with a thump.",
      "question_template": "Bastian enters a bookstore at the beginning of the story because of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Rita disguises herself with a blonde wig",
        "- The two women have sex that night",
        "- A woman begins singing then collapses, although her vocals continue",
        "- Rita retrieves the key and finds that Betty has disappeared"
      ],
      "predicates": [
        "GoesTo(x, y) ::: x goes to location y.",
        "BreaksIn(x, y) ::: x breaks into location y.",
        "Finds(x, y) ::: x finds object y.",
        "Dead(x) ::: x is dead.",
        "Disguises(x, y) ::: x disguises herself as y.",
        "HasSex(x, y) ::: x has sex with y.",
        "AwakeAt(x, t) ::: x is awake at time t.",
        "Insists(x, y) ::: x insists on doing y.",
        "Explains(x, y) ::: x explains something in language y.",
        "Sings(x) ::: x sings.",
        "Collapses(x) ::: x collapses.",
        "FindsObject(x, y) ::: x finds object y.",
        "Unlocks(x, y) ::: x unlocks object y.",
        "Disappears(x) ::: x disappears.",
        "Falls(x) ::: x falls to the floor."
      ],
      "premises": [
        "GoesTo(a_4, b_2) ∧ BreaksIn(a_4, b_2) ∧ ¬(GoesTo(a_4, a_1)) ::: Betty goes to Diane Selwyn's apartment and breaks in when no one answers the door.",
        "Finds(a_4, a_3) ∧ Dead(a_3) ::: In the bedroom, Betty finds the body of a woman (Camilla) who has been dead for several days.",
        "AwakeAt(a_4, 2) ∧ Insists(a_4, GoTo(b_3)) ::: Betty and Rita awake at 2 a.m., when Rita insists they go to an eerie theater called Club Silencio.",
        "Explains(a_2, severalLanguages) ::: On stage, a man explains in several languages that everything is an illusion.",
        "Sings(a_2) ∧ Collapses(a_2) ::: A woman begins singing then collapses, although her vocals continue.",
        "Finds(a_4, c_1) ::: Betty finds a blue key in her purse that matches Rita's key.",
        "Unlocks(a_4, c_1) ∧ Disappears(a_4) ::: Rita unlocks the box, and it falls to the floor with a thump.",
        "Conclusion:",
        "Disguises(a_4, blondeWig) ::: Rita disguises herself with a blonde wig.",
        "Falls(c_1) ::: The blue box falls to the floor with a thump."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 900,
      "context_id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 4,
      "paragraph": "The older red-headed woman investigates the sound, but nothing is there. The Cowboy appears in the doorway of Diane Selwyn's bedroom saying, \"Hey, pretty girl. Time to wake up.\" At this point, all elements of the narrative seem to change. Diane Selwyn (played by Watts) wakes up in her bed. She looks exactly like Betty, but is portrayed as a failed actress driven into a deep depression by her unrequited love for Camilla Rhodes (played now by Harring). On Camilla's invitation, Diane attends a party at Adam's house on Mulholland Drive. Her limousine stops before they reach the house and Camilla escorts her using a shortcut. Adam appears to be in love with Camilla. Over dinner, Diane states that she came to Hollywood when her aunt died, and she met Camilla at an audition for The Sylvia North Story. Another woman (played by George) kisses Camilla and they turn and smile at Diane. Adam and Camilla prepare to make an important announcement, and dissolve into laughter and kiss while Diane watches, crying.",
      "question_template": "Bastian enters a bookstore at the beginning of the story because of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Diane Selwyn wakes up in her bed.",
        "- She looks exactly like Betty.",
        "- She is portrayed as a failed actress driven into a deep depression by her unrequited love for Camilla Rhodes.",
        "- Diane states that she came to Hollywood when her aunt died.",
        "- She met Camilla at an audition for The Sylvia North Story."
      ],
      "predicates": [
        "InDeepDepression(x) ::: x is in a deep depression.",
        "UnrequitedLove(x, y) ::: x has unrequited love for y.",
        "LooksLike(x, y) ::: x looks exactly like y.",
        "Attends(x, y) ::: x attends an event at location y.",
        "Kisses(x, y) ::: x kisses y.",
        "Crying(x) ::: x is crying.",
        "Loves(x, y) ::: x is in love with y.",
        "InvitedTo(x, y) ::: x is invited to an event by y.",
        "WakesUp(x) ::: x wakes up from sleep.",
        "AppearsInDoorway(x, y) ::: x appears in the doorway of y.",
        "States(x, y) ::: x states something y."
      ],
      "premises": [
        "InDeepDepression(a_1) ::: Diane Selwyn is in a deep depression.",
        "UnrequitedLove(a_1, a_3) ::: Diane Selwyn has unrequited love for Camilla Rhodes.",
        "LooksLike(a_1, a_4) ::: Diane Selwyn looks exactly like Betty.",
        "WakesUp(a_1) ::: Diane Selwyn wakes up in her bed.",
        "AppearsInDoorway(a_2, b_2) ::: The Cowboy appears in the doorway of Diane Selwyn's bedroom.",
        "States(a_1, \"I came to Hollywood when my aunt died, and I met Camilla at an audition for The Sylvia North Story.\") ::: Diane states her background.",
        "Attends(a_1, b_0) ::: Diane attends a party at Adam's house on Mulholland Drive.",
        "InvitedTo(a_1, a_3) ::: Camilla invites Diane to the party.",
        "Loves(a_2, a_3) ::: Adam appears to be in love with Camilla.",
        "Kisses(a_3, a_4) ::: Another woman kisses Camilla.",
        "Crying(a_1) ::: Diane watches, crying.",
        "Conclusion:",
        "Crying(a_1) ::: Diane Selwyn is crying while watching the interaction between Camilla and Adam."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "901": [
    {
      "id": 901,
      "context_id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 3,
      "paragraph": "Betty and Rita go to Diane Selwyn's apartment and break in when no one answers the door. In the bedroom they find the body of a woman who has been dead for several days. Terrified, they return to their apartment, where Rita disguises herself with a blonde wig. The two women have sex that night and awake at 2 a.m., when Rita insists they go to an eerie theater called Club Silencio. On stage, a man explains in several languages that everything is an illusion; a woman begins singing then collapses, although her vocals continue. Betty finds a blue box in her purse that matches Rita's key. Upon returning to the apartment, Rita retrieves the key and finds that Betty has disappeared. Rita unlocks the box, and it falls to the floor with a thump.",
      "question_template": "Atreyu loses [[CANDIDATE_ANSWER]] in the swamp.",
      "candidate_answers": [
        "- Rita disguises herself with a blonde wig",
        "- The two women have sex that night",
        "- A woman begins singing then collapses, although her vocals continue",
        "- Betty finds a blue box in her purse that matches Rita's key",
        "- Upon returning to the apartment, Rita retrieves the key and finds that Betty has disappeared",
        "- Rita unlocks the box, and it falls to the floor with a thump"
      ],
      "predicates": [
        "GoesTo(x, y) ::: x goes to location y.",
        "BreaksIn(x, y) ::: x breaks into location y.",
        "Finds(x, y) ::: x finds object y.",
        "Dead(x) ::: x is dead.",
        "Disguises(x, y) ::: x disguises herself as y.",
        "HasSex(x, y) ::: x has sex with y.",
        "AwakeAt(x, t) ::: x is awake at time t.",
        "Insists(x, y) ::: x insists on doing y.",
        "Explains(x, y) ::: x explains something in language y.",
        "Sings(x) ::: x sings.",
        "Collapses(x) ::: x collapses.",
        "FindsObject(x, y) ::: x finds object y.",
        "Unlocks(x, y) ::: x unlocks object y.",
        "Disappears(x) ::: x disappears.",
        "Falls(x) ::: x falls to the floor."
      ],
      "premises": [
        "GoesTo(a_4, b_2) ∧ BreaksIn(a_4, b_2) ∧ ¬(GoesTo(a_4, a_1)) ::: Betty goes to Diane Selwyn's apartment and breaks in when no one answers the door.",
        "Finds(a_4, a_3) ∧ Dead(a_3) ::: In the bedroom, Betty finds the body of a woman (Camilla) who has been dead for several days.",
        "AwakeAt(a_4, 2) ∧ Insists(a_4, GoTo(b_3)) ::: Betty and Rita awake at 2 a.m., when Rita insists they go to an eerie theater called Club Silencio.",
        "Explains(a_2, severalLanguages) ::: On stage, a man explains in several languages that everything is an illusion.",
        "Sings(a_2) ∧ Collapses(a_2) ::: A woman begins singing then collapses, although her vocals continue.",
        "Finds(a_4, c_1) ::: Betty finds a blue key in her purse that matches Rita's key.",
        "Unlocks(a_4, c_1) ∧ Disappears(a_4) ::: Rita unlocks the box, and it falls to the floor with a thump.",
        "Conclusion:",
        "Disguises(a_4, blondeWig) ::: Rita disguises herself with a blonde wig.",
        "Falls(c_1) ::: The blue box falls to the floor with a thump."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 901,
      "context_id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 4,
      "paragraph": "The older red-headed woman investigates the sound, but nothing is there. The Cowboy appears in the doorway of Diane Selwyn's bedroom saying, \"Hey, pretty girl. Time to wake up.\" At this point, all elements of the narrative seem to change. Diane Selwyn (played by Watts) wakes up in her bed. She looks exactly like Betty, but is portrayed as a failed actress driven into a deep depression by her unrequited love for Camilla Rhodes (played now by Harring). On Camilla's invitation, Diane attends a party at Adam's house on Mulholland Drive. Her limousine stops before they reach the house and Camilla escorts her using a shortcut. Adam appears to be in love with Camilla. Over dinner, Diane states that she came to Hollywood when her aunt died, and she met Camilla at an audition for The Sylvia North Story. Another woman (played by George) kisses Camilla and they turn and smile at Diane. Adam and Camilla prepare to make an important announcement, and dissolve into laughter and kiss while Diane watches, crying.",
      "question_template": "Atreyu loses [[CANDIDATE_ANSWER]] in the swamp.",
      "candidate_answers": [
        "- The older red-headed woman investigates the sound, but nothing is there.",
        "- Diane Selwyn wakes up in her bed.",
        "- She looks exactly like Betty, but is portrayed as a failed actress driven into a deep depression by her unrequited love for Camilla Rhodes.",
        "- Diane states that she came to Hollywood when her aunt died, and she met Camilla at an audition for The Sylvia North Story."
      ],
      "predicates": [
        "InDeepDepression(x) ::: x is in a deep depression.",
        "UnrequitedLove(x, y) ::: x has unrequited love for y.",
        "LooksLike(x, y) ::: x looks exactly like y.",
        "Attends(x, y) ::: x attends an event at location y.",
        "Kisses(x, y) ::: x kisses y.",
        "Crying(x) ::: x is crying.",
        "Loves(x, y) ::: x is in love with y.",
        "InvitedTo(x, y) ::: x is invited to an event by y.",
        "WakesUp(x) ::: x wakes up from sleep.",
        "AppearsInDoorway(x, y) ::: x appears in the doorway of y.",
        "States(x, y) ::: x states something y."
      ],
      "premises": [
        "InDeepDepression(a_1) ::: Diane Selwyn is in a deep depression.",
        "UnrequitedLove(a_1, a_3) ::: Diane Selwyn has unrequited love for Camilla Rhodes.",
        "LooksLike(a_1, a_4) ::: Diane Selwyn looks exactly like Betty.",
        "WakesUp(a_1) ::: Diane Selwyn wakes up in her bed.",
        "AppearsInDoorway(a_2, b_2) ::: The Cowboy appears in the doorway of Diane Selwyn's bedroom.",
        "States(a_1, \"I came to Hollywood when my aunt died, and I met Camilla at an audition for The Sylvia North Story.\") ::: Diane states her background.",
        "Attends(a_1, b_0) ::: Diane attends a party at Adam's house on Mulholland Drive.",
        "InvitedTo(a_1, a_3) ::: Camilla invites Diane to the party.",
        "Loves(a_2, a_3) ::: Adam appears to be in love with Camilla.",
        "Kisses(a_3, a_4) ::: Another woman kisses Camilla.",
        "Crying(a_1) ::: Diane watches, crying.",
        "Conclusion:",
        "Crying(a_1) ::: Diane Selwyn is crying while watching the interaction between Camilla and Adam."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "902": [
    {
      "id": 902,
      "context_id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 2,
      "paragraph": "Trying to learn more about Rita's accident, Betty and Rita go to Winkies and are served by a waitress named Diane, which causes Rita to remember the name \"Diane Selwyn\". They find Diane Selwyn in the phone book and call her, but she does not answer. Betty goes to an audition, where her performance is highly praised. A casting agent takes her to the set of a film called The Sylvia North Story, directed by Adam, where Camilla Rhodes gives an audition and Adam declares, \"This is the girl.\" Betty smiles shyly as she locks eyes with Adam, but she flees before she can meet him, saying that she is late to meet a friend.",
      "question_template": "[[CANDIDATE_ANSWER]] is what Fantasia is.",
      "candidate_answers": [
        "\"This is the girl.\"",
        "\"Betty smiles shyly as she locks eyes with Adam.\""
      ],
      "predicates": [
        "ServedBy(x, y) ::: x is served by waitress y.",
        "Remembers(x, y) ::: x remembers y.",
        "Finds(x, y) ::: x finds y in the phone book.",
        "Calls(x, y) ::: x calls y.",
        "Answers(x) ::: x answers the phone.",
        "HighlyPraised(x) ::: x is highly praised.",
        "TakesToSet(x, y) ::: x takes y to the set of a film.",
        "Auditions(x) ::: x gives an audition.",
        "Declares(x, y) ::: x declares y as the girl.",
        "LocksEyes(x, y) ::: x locks eyes with y.",
        "Flees(x) ::: x flees from a situation.",
        "LateToMeet(x, y) ::: x is late to meet y."
      ],
      "premises": [
        "ServedBy(Rita, Diane) ∧ Remembers(Rita, \"Diane Selwyn\") ::: Rita is served by waitress Diane, which causes her to remember the name \"Diane Selwyn\".",
        "Finds(Betty, Diane) ∧ Calls(Betty, Diane) ∧ ¬Answers(Diane) ::: Betty finds Diane Selwyn in the phone book and calls her, but she does not answer.",
        "HighlyPraised(Betty) ∧ TakesToSet(castingAgent, Betty) ∧ Auditions(Camilla) ∧ Declares(Adam, Camilla) ::: Betty goes to an audition, where her performance is highly praised, and a casting agent takes her to the set of a film called The Sylvia North Story, where Camilla Rhodes gives an audition and Adam declares, \"This is the girl.\"",
        "LocksEyes(Betty, Adam) ∧ Flees(Betty) ∧ LateToMeet(Betty, friend) ::: Betty smiles shyly as she locks eyes with Adam, but she flees before she can meet him, saying that she is late to meet a friend."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 902,
      "context_id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 4,
      "paragraph": "The older red-headed woman investigates the sound, but nothing is there. The Cowboy appears in the doorway of Diane Selwyn's bedroom saying, \"Hey, pretty girl. Time to wake up.\" At this point, all elements of the narrative seem to change. Diane Selwyn (played by Watts) wakes up in her bed. She looks exactly like Betty, but is portrayed as a failed actress driven into a deep depression by her unrequited love for Camilla Rhodes (played now by Harring). On Camilla's invitation, Diane attends a party at Adam's house on Mulholland Drive. Her limousine stops before they reach the house and Camilla escorts her using a shortcut. Adam appears to be in love with Camilla. Over dinner, Diane states that she came to Hollywood when her aunt died, and she met Camilla at an audition for The Sylvia North Story. Another woman (played by George) kisses Camilla and they turn and smile at Diane. Adam and Camilla prepare to make an important announcement, and dissolve into laughter and kiss while Diane watches, crying.",
      "question_template": "[[CANDIDATE_ANSWER]] is what Fantasia is.",
      "candidate_answers": [
        "- Diane states that she came to Hollywood when her aunt died, and she met Camilla at an audition for The Sylvia North Story.",
        "- Adam appears to be in love with Camilla."
      ],
      "predicates": [
        "InDeepDepression(x) ::: x is in a deep depression.",
        "UnrequitedLove(x, y) ::: x has unrequited love for y.",
        "LooksLike(x, y) ::: x looks exactly like y.",
        "Attends(x, y) ::: x attends an event at location y.",
        "Kisses(x, y) ::: x kisses y.",
        "Crying(x) ::: x is crying.",
        "Loves(x, y) ::: x is in love with y.",
        "InvitedTo(x, y) ::: x is invited to an event by y.",
        "WakesUp(x) ::: x wakes up from sleep.",
        "AppearsInDoorway(x, y) ::: x appears in the doorway of y.",
        "States(x, y) ::: x states something y."
      ],
      "premises": [
        "InDeepDepression(a_1) ::: Diane Selwyn is in a deep depression.",
        "UnrequitedLove(a_1, a_3) ::: Diane Selwyn has unrequited love for Camilla Rhodes.",
        "LooksLike(a_1, a_4) ::: Diane Selwyn looks exactly like Betty.",
        "WakesUp(a_1) ::: Diane Selwyn wakes up in her bed.",
        "AppearsInDoorway(a_2, b_2) ::: The Cowboy appears in the doorway of Diane Selwyn's bedroom.",
        "States(a_1, \"I came to Hollywood when my aunt died, and I met Camilla at an audition for The Sylvia North Story.\") ::: Diane states her background.",
        "Attends(a_1, b_0) ::: Diane attends a party at Adam's house on Mulholland Drive.",
        "InvitedTo(a_1, a_3) ::: Camilla invites Diane to the party.",
        "Loves(a_2, a_3) ::: Adam appears to be in love with Camilla.",
        "Kisses(a_3, a_4) ::: Another woman kisses Camilla.",
        "Crying(a_1) ::: Diane watches, crying.",
        "Conclusion:",
        "Crying(a_1) ::: Diane Selwyn is crying while watching the interaction between Camilla and Adam."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "903": [
    {
      "id": 903,
      "context_id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 0,
      "paragraph": " The story may not be linear and exhibits several instances of temporal disruption. A dark-haired woman (Harring) escapes her own murder, surviving a car accident on Mulholland Drive. Injured and in shock, she descends into Los Angeles and sneaks into an apartment that an older, red-headed woman has just vacated. An aspiring actress named Betty Elms (Watts) arrives at the same apartment and finds the dark-haired woman confused, not knowing her own name. The dark-haired woman assumes the name \"Rita\" after seeing a poster for the film Gilda (1946), starring Rita Hayworth. To help Rita remember her identity, Betty looks in Rita's purse, where she finds a large amount of money and an unusual blue key.",
      "question_template": "[[CANDIDATE_ANSWER]] is destroying Fantasia.",
      "candidate_answers": [
        "A large amount of money",
        "An unusual blue key"
      ],
      "predicates": [
        "KnowsIdentity(x) ::: x knows her own identity.",
        "Helps(x, y) ::: x helps y.",
        "Confused(x) ::: x is confused.",
        "AssumesName(x, y) ::: x assumes the name y.",
        "Finds(x, y, z) ::: x finds y in z.",
        "Injured(x) ::: x is injured.",
        "InShock(x) ::: x is in shock."
      ],
      "premises": [
        "¬KnowsIdentity(a_1) ::: Rita does not know her own identity.",
        "Helps(a_4, a_1) ::: Betty Elms helps Rita remember her identity.",
        "Confused(a_1) ::: The dark-haired woman (Rita) is confused.",
        "AssumesName(a_1, \"Rita\") ::: The dark-haired woman assumes the name \"Rita\" after seeing a poster for the film Gilda (1946).",
        "Finds(a_4, money, a_2) ::: Betty finds a large amount of money in Rita's purse.",
        "Finds(a_4, blueKey, a_2) ::: Betty finds an unusual blue key in Rita's purse.",
        "Injured(a_1) ∧ InShock(a_1) ::: The dark-haired woman is injured and in shock after the car accident.",
        "Conclusion:",
        "¬KnowsIdentity(a_1) ∧ Helps(a_4, a_1) ::: Rita does not know her own identity and Betty helps her remember it."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 903,
      "context_id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 1,
      "paragraph": "In what seems to be a scene from a different narrative, set at a diner called Winkies, a man (Patrick Fischler) tells his companion (Michael Cooke) about a nightmare in which he dreamt there was a horrible figure behind the diner. When they investigate, the figure appears, causing the man with the nightmare to collapse in fright. As the principal narrative resumes, Hollywood director Adam Kesher (Justin Theroux) has his film commandeered by apparent mobsters, who insist he cast an unknown actress named Camilla Rhodes (Melissa George) as the lead in his film. After he resists, he returns home to find his wife having an affair and is thrown out of his house. He later learns that his bank has closed his line of credit and he is broke. He agrees to meet a mysterious figure called The Cowboy, who urges him to cast Camilla Rhodes for his own good. Later, a bungling hit man (Mark Pellegrino) attempts to steal a book full of phone numbers and leaves three people dead.",
      "question_template": "[[CANDIDATE_ANSWER]] is destroying Fantasia.",
      "candidate_answers": [
        "No relevant information found in the paragraph."
      ],
      "predicates": [
        "Commandeered(x, y) ::: x's film is commandeered by y.",
        "NegativelyImpacted(x, y) ::: x's life is negatively impacted by y's demands.",
        "ProvidesAdvice(x, y) ::: x provides advice to y for their own good.",
        "Dreamt(x, y) ::: x dreamt about y.",
        "Investigate(x, y) ::: x investigates y.",
        "CollapsesInFright(x) ::: x collapses in fright.",
        "HasAffair(x, y) ::: x has an affair with y.",
        "ClosedCreditLine(x) ::: x's bank has closed their line of credit.",
        "Broke(x) ::: x is broke.",
        "Meets(x, y) ::: x meets y.",
        "Urges(x, y) ::: x urges y to do something."
      ],
      "premises": [
        "Commandeered(adamKesher, mobsters) ::: Adam Kesher's film is commandeered by mobsters.",
        "NegativelyImpacted(adamKesher, mobsters) ::: Adam Kesher's life is negatively impacted by the mobsters' demands.",
        "ProvidesAdvice(cowboy, adamKesher) ::: The Cowboy provides advice to Adam Kesher for his own good.",
        "Dreamt(patrickFischler, horribleFigure) ::: Patrick Fischler dreamt about a horrible figure behind the diner.",
        "Investigate(patrickFischler, horribleFigure) ::: Patrick Fischler investigates the horrible figure.",
        "CollapsesInFright(patrickFischler) ::: Patrick Fischler collapses in fright.",
        "HasAffair(diane, michaelCooke) ::: Diane has an affair with Michael Cooke.",
        "ClosedCreditLine(adamKesher) ::: Adam Kesher's bank has closed his line of credit.",
        "Broke(adamKesher) ::: Adam Kesher is broke.",
        "Meets(adamKesher, cowboy) ::: Adam Kesher meets The Cowboy.",
        "Urges(cowboy, adamKesher) ::: The Cowboy urges Adam Kesher to cast Camilla Rhodes for his own good."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "905": [
    {
      "id": 905,
      "context_id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 4,
      "paragraph": "The older red-headed woman investigates the sound, but nothing is there. The Cowboy appears in the doorway of Diane Selwyn's bedroom saying, \"Hey, pretty girl. Time to wake up.\" At this point, all elements of the narrative seem to change. Diane Selwyn (played by Watts) wakes up in her bed. She looks exactly like Betty, but is portrayed as a failed actress driven into a deep depression by her unrequited love for Camilla Rhodes (played now by Harring). On Camilla's invitation, Diane attends a party at Adam's house on Mulholland Drive. Her limousine stops before they reach the house and Camilla escorts her using a shortcut. Adam appears to be in love with Camilla. Over dinner, Diane states that she came to Hollywood when her aunt died, and she met Camilla at an audition for The Sylvia North Story. Another woman (played by George) kisses Camilla and they turn and smile at Diane. Adam and Camilla prepare to make an important announcement, and dissolve into laughter and kiss while Diane watches, crying.",
      "question_template": "Atreyu must travel [[CANDIDATE_ANSWER]] to reach the Southern Oracle.",
      "candidate_answers": [
        "- Camilla's invitation",
        "- She met Camilla at an audition for The Sylvia North Story"
      ],
      "predicates": [
        "InDeepDepression(x) ::: x is in a deep depression.",
        "UnrequitedLove(x, y) ::: x has unrequited love for y.",
        "LooksLike(x, y) ::: x looks exactly like y.",
        "Attends(x, y) ::: x attends an event at location y.",
        "Kisses(x, y) ::: x kisses y.",
        "Crying(x) ::: x is crying.",
        "Loves(x, y) ::: x is in love with y.",
        "InvitedTo(x, y) ::: x is invited to an event by y.",
        "WakesUp(x) ::: x wakes up from sleep.",
        "AppearsInDoorway(x, y) ::: x appears in the doorway of y.",
        "States(x, y) ::: x states something y."
      ],
      "premises": [
        "InDeepDepression(a_1) ::: Diane Selwyn is in a deep depression.",
        "UnrequitedLove(a_1, a_3) ::: Diane Selwyn has unrequited love for Camilla Rhodes.",
        "LooksLike(a_1, a_4) ::: Diane Selwyn looks exactly like Betty.",
        "WakesUp(a_1) ::: Diane Selwyn wakes up in her bed.",
        "AppearsInDoorway(a_2, b_2) ::: The Cowboy appears in the doorway of Diane Selwyn's bedroom.",
        "States(a_1, \"I came to Hollywood when my aunt died, and I met Camilla at an audition for The Sylvia North Story.\") ::: Diane states her background.",
        "Attends(a_1, b_0) ::: Diane attends a party at Adam's house on Mulholland Drive.",
        "InvitedTo(a_1, a_3) ::: Camilla invites Diane to the party.",
        "Loves(a_2, a_3) ::: Adam appears to be in love with Camilla.",
        "Kisses(a_3, a_4) ::: Another woman kisses Camilla.",
        "Crying(a_1) ::: Diane watches, crying.",
        "Conclusion:",
        "Crying(a_1) ::: Diane Selwyn is crying while watching the interaction between Camilla and Adam."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 905,
      "context_id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 5,
      "paragraph": "Diane meets with the hit man at Winkies, where she gives him Camilla's photo and a large amount of money, and they are served by a waitress named Betty. The hit man tells Diane that when the job is done, she will find a blue key. Diane asks what, if anything, the key opens, but the hit man just laughs. Diane looks up and sees the man who had the nightmare standing at the counter. Back at her apartment, with the key on a table in front of her, she is terrorized by hallucinations. She runs screaming to her bed, where she shoots herself. A woman at the club whispers \"Silencio\".",
      "question_template": "Atreyu must travel [[CANDIDATE_ANSWER]] to reach the Southern Oracle.",
      "candidate_answers": [
        "- Diane meets with the hit man at Winkies",
        "- She gives him Camilla's photo and a large amount of money",
        "- The hit man tells Diane that when the job is done, she will find a blue key",
        "- Diane asks what, if anything, the key opens, but the hit man just laughs",
        "- Diane looks up and sees the man who had the nightmare standing at the counter",
        "- Back at her apartment, with the key on a table in front of her, she is terrorized by hallucinations",
        "- She runs screaming to her bed, where she shoots herself",
        "- A woman at the club whispers \"Silencio\""
      ],
      "predicates": [
        "Meets(x, y) ::: x meets with y.",
        "Gives(x, y, z) ::: x gives y to z.",
        "ServedBy(x, y) ::: x is served by y.",
        "Tells(x, y, z) ::: x tells y z.",
        "Asks(x, y, z) ::: x asks y z.",
        "Sees(x, y) ::: x sees y.",
        "TerrorizedBy(x, y) ::: x is terrorized by y.",
        "Runs(x) ::: x runs.",
        "Shoots(x) ::: x shoots herself/himself.",
        "Whispers(x, y) ::: x whispers y."
      ],
      "premises": [
        "Meets(diane, hit_man) ::: Diane meets with the hit man.",
        "Gives(diane, camilla_photo, hit_man) ::: Diane gives Camilla's photo to the hit man.",
        "ServedBy(hit_man, betty) ::: The hit man is served by a waitress named Betty.",
        "Tells(hit_man, diane, \"when the job is done, you will find a blue key\") ::: The hit man tells Diane that when the job is done, she will find a blue key.",
        "Asks(diane, hit_man, \"what, if anything, does the key open?\") ::: Diane asks the hit man what, if anything, the key opens.",
        "Laughs(hit_man) ::: The hit man just laughs.",
        "Sees(diane, man_with_nightmare) ::: Diane sees the man who had the nightmare standing at the counter.",
        "TerrorizedBy(diane, hallucinations) ::: Diane is terrorized by hallucinations.",
        "Runs(diane) ::: Diane runs screaming to her bed.",
        "Shoots(diane) ::: Diane shoots herself.",
        "Whispers(woman_at_club, \"Silencio\") ::: A woman at the club whispers \"Silencio\"."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "906": [
    {
      "id": 906,
      "context_id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 1,
      "paragraph": "In what seems to be a scene from a different narrative, set at a diner called Winkies, a man (Patrick Fischler) tells his companion (Michael Cooke) about a nightmare in which he dreamt there was a horrible figure behind the diner. When they investigate, the figure appears, causing the man with the nightmare to collapse in fright. As the principal narrative resumes, Hollywood director Adam Kesher (Justin Theroux) has his film commandeered by apparent mobsters, who insist he cast an unknown actress named Camilla Rhodes (Melissa George) as the lead in his film. After he resists, he returns home to find his wife having an affair and is thrown out of his house. He later learns that his bank has closed his line of credit and he is broke. He agrees to meet a mysterious figure called The Cowboy, who urges him to cast Camilla Rhodes for his own good. Later, a bungling hit man (Mark Pellegrino) attempts to steal a book full of phone numbers and leaves three people dead.",
      "question_template": "Bastian can save the empress by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Diane is upset to see Camilla kissing other people."
      ],
      "predicates": [
        "Commandeered(x, y) ::: x's film is commandeered by y.",
        "NegativelyImpacted(x, y) ::: x's life is negatively impacted by y's demands.",
        "ProvidesAdvice(x, y) ::: x provides advice to y for their own good.",
        "Dreamt(x, y) ::: x dreamt about y.",
        "Investigate(x, y) ::: x investigates y.",
        "CollapsesInFright(x) ::: x collapses in fright.",
        "HasAffair(x, y) ::: x has an affair with y.",
        "ClosedCreditLine(x) ::: x's bank has closed their line of credit.",
        "Broke(x) ::: x is broke.",
        "Meets(x, y) ::: x meets y.",
        "Urges(x, y) ::: x urges y to do something."
      ],
      "premises": [
        "Commandeered(adamKesher, mobsters) ::: Adam Kesher's film is commandeered by mobsters.",
        "NegativelyImpacted(adamKesher, mobsters) ::: Adam Kesher's life is negatively impacted by the mobsters' demands.",
        "ProvidesAdvice(cowboy, adamKesher) ::: The Cowboy provides advice to Adam Kesher for his own good.",
        "Dreamt(patrickFischler, horribleFigure) ::: Patrick Fischler dreamt about a horrible figure behind the diner.",
        "Investigate(patrickFischler, horribleFigure) ::: Patrick Fischler investigates the horrible figure.",
        "CollapsesInFright(patrickFischler) ::: Patrick Fischler collapses in fright.",
        "HasAffair(diane, michaelCooke) ::: Diane has an affair with Michael Cooke.",
        "ClosedCreditLine(adamKesher) ::: Adam Kesher's bank has closed his line of credit.",
        "Broke(adamKesher) ::: Adam Kesher is broke.",
        "Meets(adamKesher, cowboy) ::: Adam Kesher meets The Cowboy.",
        "Urges(cowboy, adamKesher) ::: The Cowboy urges Adam Kesher to cast Camilla Rhodes for his own good."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 906,
      "context_id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 4,
      "paragraph": "The older red-headed woman investigates the sound, but nothing is there. The Cowboy appears in the doorway of Diane Selwyn's bedroom saying, \"Hey, pretty girl. Time to wake up.\" At this point, all elements of the narrative seem to change. Diane Selwyn (played by Watts) wakes up in her bed. She looks exactly like Betty, but is portrayed as a failed actress driven into a deep depression by her unrequited love for Camilla Rhodes (played now by Harring). On Camilla's invitation, Diane attends a party at Adam's house on Mulholland Drive. Her limousine stops before they reach the house and Camilla escorts her using a shortcut. Adam appears to be in love with Camilla. Over dinner, Diane states that she came to Hollywood when her aunt died, and she met Camilla at an audition for The Sylvia North Story. Another woman (played by George) kisses Camilla and they turn and smile at Diane. Adam and Camilla prepare to make an important announcement, and dissolve into laughter and kiss while Diane watches, crying.",
      "question_template": "Bastian can save the empress by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Diane is portrayed as a failed actress driven into a deep depression by her unrequited love for Camilla Rhodes.",
        "- Diane watches, crying."
      ],
      "predicates": [
        "InDeepDepression(x) ::: x is in a deep depression.",
        "UnrequitedLove(x, y) ::: x has unrequited love for y.",
        "LooksLike(x, y) ::: x looks exactly like y.",
        "Attends(x, y) ::: x attends an event at location y.",
        "Kisses(x, y) ::: x kisses y.",
        "Crying(x) ::: x is crying.",
        "Loves(x, y) ::: x is in love with y.",
        "InvitedTo(x, y) ::: x is invited to an event by y.",
        "WakesUp(x) ::: x wakes up from sleep.",
        "AppearsInDoorway(x, y) ::: x appears in the doorway of y.",
        "States(x, y) ::: x states something y."
      ],
      "premises": [
        "InDeepDepression(a_1) ::: Diane Selwyn is in a deep depression.",
        "UnrequitedLove(a_1, a_3) ::: Diane Selwyn has unrequited love for Camilla Rhodes.",
        "LooksLike(a_1, a_4) ::: Diane Selwyn looks exactly like Betty.",
        "WakesUp(a_1) ::: Diane Selwyn wakes up in her bed.",
        "AppearsInDoorway(a_2, b_2) ::: The Cowboy appears in the doorway of Diane Selwyn's bedroom.",
        "States(a_1, \"I came to Hollywood when my aunt died, and I met Camilla at an audition for The Sylvia North Story.\") ::: Diane states her background.",
        "Attends(a_1, b_0) ::: Diane attends a party at Adam's house on Mulholland Drive.",
        "InvitedTo(a_1, a_3) ::: Camilla invites Diane to the party.",
        "Loves(a_2, a_3) ::: Adam appears to be in love with Camilla.",
        "Kisses(a_3, a_4) ::: Another woman kisses Camilla.",
        "Crying(a_1) ::: Diane watches, crying.",
        "Conclusion:",
        "Crying(a_1) ::: Diane Selwyn is crying while watching the interaction between Camilla and Adam."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 906,
      "context_id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 5,
      "paragraph": "Diane meets with the hit man at Winkies, where she gives him Camilla's photo and a large amount of money, and they are served by a waitress named Betty. The hit man tells Diane that when the job is done, she will find a blue key. Diane asks what, if anything, the key opens, but the hit man just laughs. Diane looks up and sees the man who had the nightmare standing at the counter. Back at her apartment, with the key on a table in front of her, she is terrorized by hallucinations. She runs screaming to her bed, where she shoots herself. A woman at the club whispers \"Silencio\".",
      "question_template": "Bastian can save the empress by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Diane gives the hit man Camilla's photo",
        "- Diane is terrorized by hallucinations",
        "- Diane runs screaming to her bed, where she shoots herself"
      ],
      "predicates": [
        "Meets(x, y) ::: x meets with y.",
        "Gives(x, y, z) ::: x gives y to z.",
        "ServedBy(x, y) ::: x is served by y.",
        "Tells(x, y, z) ::: x tells y z.",
        "Asks(x, y, z) ::: x asks y z.",
        "Sees(x, y) ::: x sees y.",
        "TerrorizedBy(x, y) ::: x is terrorized by y.",
        "Runs(x) ::: x runs.",
        "Shoots(x) ::: x shoots herself/himself.",
        "Whispers(x, y) ::: x whispers y."
      ],
      "premises": [
        "Meets(diane, hit_man) ::: Diane meets with the hit man.",
        "Gives(diane, camilla_photo, hit_man) ::: Diane gives Camilla's photo to the hit man.",
        "ServedBy(hit_man, betty) ::: The hit man is served by a waitress named Betty.",
        "Tells(hit_man, diane, \"when the job is done, you will find a blue key\") ::: The hit man tells Diane that when the job is done, she will find a blue key.",
        "Asks(diane, hit_man, \"what, if anything, does the key open?\") ::: Diane asks the hit man what, if anything, the key opens.",
        "Laughs(hit_man) ::: The hit man just laughs.",
        "Sees(diane, man_with_nightmare) ::: Diane sees the man who had the nightmare standing at the counter.",
        "TerrorizedBy(diane, hallucinations) ::: Diane is terrorized by hallucinations.",
        "Runs(diane) ::: Diane runs screaming to her bed.",
        "Shoots(diane) ::: Diane shoots herself.",
        "Whispers(woman_at_club, \"Silencio\") ::: A woman at the club whispers \"Silencio\"."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "908": [
    {
      "id": 908,
      "context_id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 5,
      "paragraph": "Diane meets with the hit man at Winkies, where she gives him Camilla's photo and a large amount of money, and they are served by a waitress named Betty. The hit man tells Diane that when the job is done, she will find a blue key. Diane asks what, if anything, the key opens, but the hit man just laughs. Diane looks up and sees the man who had the nightmare standing at the counter. Back at her apartment, with the key on a table in front of her, she is terrorized by hallucinations. She runs screaming to her bed, where she shoots herself. A woman at the club whispers \"Silencio\".",
      "question_template": "Atreyu sees [[CANDIDATE_ANSWER]] at the shore of the abandoned ruins.",
      "candidate_answers": [
        "The hit man tells Diane that when the job is done, she will find a blue key.",
        "The hit man just laughs."
      ],
      "predicates": [
        "Meets(x, y) ::: x meets with y.",
        "Gives(x, y, z) ::: x gives y to z.",
        "ServedBy(x, y) ::: x is served by y.",
        "Tells(x, y, z) ::: x tells y z.",
        "Asks(x, y, z) ::: x asks y z.",
        "Sees(x, y) ::: x sees y.",
        "TerrorizedBy(x, y) ::: x is terrorized by y.",
        "Runs(x) ::: x runs.",
        "Shoots(x) ::: x shoots herself/himself.",
        "Whispers(x, y) ::: x whispers y."
      ],
      "premises": [
        "Meets(diane, hit_man) ::: Diane meets with the hit man.",
        "Gives(diane, camilla_photo, hit_man) ::: Diane gives Camilla's photo to the hit man.",
        "ServedBy(hit_man, betty) ::: The hit man is served by a waitress named Betty.",
        "Tells(hit_man, diane, \"when the job is done, you will find a blue key\") ::: The hit man tells Diane that when the job is done, she will find a blue key.",
        "Asks(diane, hit_man, \"what, if anything, does the key open?\") ::: Diane asks the hit man what, if anything, the key opens.",
        "Laughs(hit_man) ::: The hit man just laughs.",
        "Sees(diane, man_with_nightmare) ::: Diane sees the man who had the nightmare standing at the counter.",
        "TerrorizedBy(diane, hallucinations) ::: Diane is terrorized by hallucinations.",
        "Runs(diane) ::: Diane runs screaming to her bed.",
        "Shoots(diane) ::: Diane shoots herself.",
        "Whispers(woman_at_club, \"Silencio\") ::: A woman at the club whispers \"Silencio\"."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "909": [
    {
      "id": 909,
      "context_id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 2,
      "paragraph": "Trying to learn more about Rita's accident, Betty and Rita go to Winkies and are served by a waitress named Diane, which causes Rita to remember the name \"Diane Selwyn\". They find Diane Selwyn in the phone book and call her, but she does not answer. Betty goes to an audition, where her performance is highly praised. A casting agent takes her to the set of a film called The Sylvia North Story, directed by Adam, where Camilla Rhodes gives an audition and Adam declares, \"This is the girl.\" Betty smiles shyly as she locks eyes with Adam, but she flees before she can meet him, saying that she is late to meet a friend.",
      "question_template": "Bastian wishes for [[CANDIDATE_ANSWER]] after saving Fantasia.",
      "candidate_answers": [
        "Winkies"
      ],
      "predicates": [
        "ServedBy(x, y) ::: x is served by waitress y.",
        "Remembers(x, y) ::: x remembers y.",
        "Finds(x, y) ::: x finds y in the phone book.",
        "Calls(x, y) ::: x calls y.",
        "Answers(x) ::: x answers the phone.",
        "HighlyPraised(x) ::: x is highly praised.",
        "TakesToSet(x, y) ::: x takes y to the set of a film.",
        "Auditions(x) ::: x gives an audition.",
        "Declares(x, y) ::: x declares y as the girl.",
        "LocksEyes(x, y) ::: x locks eyes with y.",
        "Flees(x) ::: x flees from a situation.",
        "LateToMeet(x, y) ::: x is late to meet y."
      ],
      "premises": [
        "ServedBy(Rita, Diane) ∧ Remembers(Rita, \"Diane Selwyn\") ::: Rita is served by waitress Diane, which causes her to remember the name \"Diane Selwyn\".",
        "Finds(Betty, Diane) ∧ Calls(Betty, Diane) ∧ ¬Answers(Diane) ::: Betty finds Diane Selwyn in the phone book and calls her, but she does not answer.",
        "HighlyPraised(Betty) ∧ TakesToSet(castingAgent, Betty) ∧ Auditions(Camilla) ∧ Declares(Adam, Camilla) ::: Betty goes to an audition, where her performance is highly praised, and a casting agent takes her to the set of a film called The Sylvia North Story, where Camilla Rhodes gives an audition and Adam declares, \"This is the girl.\"",
        "LocksEyes(Betty, Adam) ∧ Flees(Betty) ∧ LateToMeet(Betty, friend) ::: Betty smiles shyly as she locks eyes with Adam, but she flees before she can meet him, saying that she is late to meet a friend."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "910": [
    {
      "id": 910,
      "context_id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 1,
      "paragraph": "In what seems to be a scene from a different narrative, set at a diner called Winkies, a man (Patrick Fischler) tells his companion (Michael Cooke) about a nightmare in which he dreamt there was a horrible figure behind the diner. When they investigate, the figure appears, causing the man with the nightmare to collapse in fright. As the principal narrative resumes, Hollywood director Adam Kesher (Justin Theroux) has his film commandeered by apparent mobsters, who insist he cast an unknown actress named Camilla Rhodes (Melissa George) as the lead in his film. After he resists, he returns home to find his wife having an affair and is thrown out of his house. He later learns that his bank has closed his line of credit and he is broke. He agrees to meet a mysterious figure called The Cowboy, who urges him to cast Camilla Rhodes for his own good. Later, a bungling hit man (Mark Pellegrino) attempts to steal a book full of phone numbers and leaves three people dead.",
      "question_template": "Bastian left a note for Mr. Coreander because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Rita's purse"
      ],
      "predicates": [
        "Commandeered(x, y) ::: x's film is commandeered by y.",
        "NegativelyImpacted(x, y) ::: x's life is negatively impacted by y's demands.",
        "ProvidesAdvice(x, y) ::: x provides advice to y for their own good.",
        "Dreamt(x, y) ::: x dreamt about y.",
        "Investigate(x, y) ::: x investigates y.",
        "CollapsesInFright(x) ::: x collapses in fright.",
        "HasAffair(x, y) ::: x has an affair with y.",
        "ClosedCreditLine(x) ::: x's bank has closed their line of credit.",
        "Broke(x) ::: x is broke.",
        "Meets(x, y) ::: x meets y.",
        "Urges(x, y) ::: x urges y to do something."
      ],
      "premises": [
        "Commandeered(adamKesher, mobsters) ::: Adam Kesher's film is commandeered by mobsters.",
        "NegativelyImpacted(adamKesher, mobsters) ::: Adam Kesher's life is negatively impacted by the mobsters' demands.",
        "ProvidesAdvice(cowboy, adamKesher) ::: The Cowboy provides advice to Adam Kesher for his own good.",
        "Dreamt(patrickFischler, horribleFigure) ::: Patrick Fischler dreamt about a horrible figure behind the diner.",
        "Investigate(patrickFischler, horribleFigure) ::: Patrick Fischler investigates the horrible figure.",
        "CollapsesInFright(patrickFischler) ::: Patrick Fischler collapses in fright.",
        "HasAffair(diane, michaelCooke) ::: Diane has an affair with Michael Cooke.",
        "ClosedCreditLine(adamKesher) ::: Adam Kesher's bank has closed his line of credit.",
        "Broke(adamKesher) ::: Adam Kesher is broke.",
        "Meets(adamKesher, cowboy) ::: Adam Kesher meets The Cowboy.",
        "Urges(cowboy, adamKesher) ::: The Cowboy urges Adam Kesher to cast Camilla Rhodes for his own good."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "911": [
    {
      "id": 911,
      "context_id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 1,
      "paragraph": "In what seems to be a scene from a different narrative, set at a diner called Winkies, a man (Patrick Fischler) tells his companion (Michael Cooke) about a nightmare in which he dreamt there was a horrible figure behind the diner. When they investigate, the figure appears, causing the man with the nightmare to collapse in fright. As the principal narrative resumes, Hollywood director Adam Kesher (Justin Theroux) has his film commandeered by apparent mobsters, who insist he cast an unknown actress named Camilla Rhodes (Melissa George) as the lead in his film. After he resists, he returns home to find his wife having an affair and is thrown out of his house. He later learns that his bank has closed his line of credit and he is broke. He agrees to meet a mysterious figure called The Cowboy, who urges him to cast Camilla Rhodes for his own good. Later, a bungling hit man (Mark Pellegrino) attempts to steal a book full of phone numbers and leaves three people dead.",
      "question_template": "Atreyu was given the task to discover the cure by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Camilla Rhodes"
      ],
      "predicates": [
        "Commandeered(x, y) ::: x's film is commandeered by y.",
        "NegativelyImpacted(x, y) ::: x's life is negatively impacted by y's demands.",
        "ProvidesAdvice(x, y) ::: x provides advice to y for their own good.",
        "Dreamt(x, y) ::: x dreamt about y.",
        "Investigate(x, y) ::: x investigates y.",
        "CollapsesInFright(x) ::: x collapses in fright.",
        "HasAffair(x, y) ::: x has an affair with y.",
        "ClosedCreditLine(x) ::: x's bank has closed their line of credit.",
        "Broke(x) ::: x is broke.",
        "Meets(x, y) ::: x meets y.",
        "Urges(x, y) ::: x urges y to do something."
      ],
      "premises": [
        "Commandeered(adamKesher, mobsters) ::: Adam Kesher's film is commandeered by mobsters.",
        "NegativelyImpacted(adamKesher, mobsters) ::: Adam Kesher's life is negatively impacted by the mobsters' demands.",
        "ProvidesAdvice(cowboy, adamKesher) ::: The Cowboy provides advice to Adam Kesher for his own good.",
        "Dreamt(patrickFischler, horribleFigure) ::: Patrick Fischler dreamt about a horrible figure behind the diner.",
        "Investigate(patrickFischler, horribleFigure) ::: Patrick Fischler investigates the horrible figure.",
        "CollapsesInFright(patrickFischler) ::: Patrick Fischler collapses in fright.",
        "HasAffair(diane, michaelCooke) ::: Diane has an affair with Michael Cooke.",
        "ClosedCreditLine(adamKesher) ::: Adam Kesher's bank has closed his line of credit.",
        "Broke(adamKesher) ::: Adam Kesher is broke.",
        "Meets(adamKesher, cowboy) ::: Adam Kesher meets The Cowboy.",
        "Urges(cowboy, adamKesher) ::: The Cowboy urges Adam Kesher to cast Camilla Rhodes for his own good."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "912": [
    {
      "id": 912,
      "context_id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 0,
      "paragraph": " The story may not be linear and exhibits several instances of temporal disruption. A dark-haired woman (Harring) escapes her own murder, surviving a car accident on Mulholland Drive. Injured and in shock, she descends into Los Angeles and sneaks into an apartment that an older, red-headed woman has just vacated. An aspiring actress named Betty Elms (Watts) arrives at the same apartment and finds the dark-haired woman confused, not knowing her own name. The dark-haired woman assumes the name \"Rita\" after seeing a poster for the film Gilda (1946), starring Rita Hayworth. To help Rita remember her identity, Betty looks in Rita's purse, where she finds a large amount of money and an unusual blue key.",
      "question_template": "Atreya finds the adviser Morla in [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The man on stage at Club Silencio explains in several different languages."
      ],
      "predicates": [
        "KnowsIdentity(x) ::: x knows her own identity.",
        "Helps(x, y) ::: x helps y.",
        "Confused(x) ::: x is confused.",
        "AssumesName(x, y) ::: x assumes the name y.",
        "Finds(x, y, z) ::: x finds y in z.",
        "Injured(x) ::: x is injured.",
        "InShock(x) ::: x is in shock."
      ],
      "premises": [
        "¬KnowsIdentity(a_1) ::: Rita does not know her own identity.",
        "Helps(a_4, a_1) ::: Betty Elms helps Rita remember her identity.",
        "Confused(a_1) ::: The dark-haired woman (Rita) is confused.",
        "AssumesName(a_1, \"Rita\") ::: The dark-haired woman assumes the name \"Rita\" after seeing a poster for the film Gilda (1946).",
        "Finds(a_4, money, a_2) ::: Betty finds a large amount of money in Rita's purse.",
        "Finds(a_4, blueKey, a_2) ::: Betty finds an unusual blue key in Rita's purse.",
        "Injured(a_1) ∧ InShock(a_1) ::: The dark-haired woman is injured and in shock after the car accident.",
        "Conclusion:",
        "¬KnowsIdentity(a_1) ∧ Helps(a_4, a_1) ::: Rita does not know her own identity and Betty helps her remember it."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 912,
      "context_id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 1,
      "paragraph": "In what seems to be a scene from a different narrative, set at a diner called Winkies, a man (Patrick Fischler) tells his companion (Michael Cooke) about a nightmare in which he dreamt there was a horrible figure behind the diner. When they investigate, the figure appears, causing the man with the nightmare to collapse in fright. As the principal narrative resumes, Hollywood director Adam Kesher (Justin Theroux) has his film commandeered by apparent mobsters, who insist he cast an unknown actress named Camilla Rhodes (Melissa George) as the lead in his film. After he resists, he returns home to find his wife having an affair and is thrown out of his house. He later learns that his bank has closed his line of credit and he is broke. He agrees to meet a mysterious figure called The Cowboy, who urges him to cast Camilla Rhodes for his own good. Later, a bungling hit man (Mark Pellegrino) attempts to steal a book full of phone numbers and leaves three people dead.",
      "question_template": "Atreya finds the adviser Morla in [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The man on stage at Club Silencio explains in several different languages."
      ],
      "predicates": [
        "Commandeered(x, y) ::: x's film is commandeered by y.",
        "NegativelyImpacted(x, y) ::: x's life is negatively impacted by y's demands.",
        "ProvidesAdvice(x, y) ::: x provides advice to y for their own good.",
        "Dreamt(x, y) ::: x dreamt about y.",
        "Investigate(x, y) ::: x investigates y.",
        "CollapsesInFright(x) ::: x collapses in fright.",
        "HasAffair(x, y) ::: x has an affair with y.",
        "ClosedCreditLine(x) ::: x's bank has closed their line of credit.",
        "Broke(x) ::: x is broke.",
        "Meets(x, y) ::: x meets y.",
        "Urges(x, y) ::: x urges y to do something."
      ],
      "premises": [
        "Commandeered(adamKesher, mobsters) ::: Adam Kesher's film is commandeered by mobsters.",
        "NegativelyImpacted(adamKesher, mobsters) ::: Adam Kesher's life is negatively impacted by the mobsters' demands.",
        "ProvidesAdvice(cowboy, adamKesher) ::: The Cowboy provides advice to Adam Kesher for his own good.",
        "Dreamt(patrickFischler, horribleFigure) ::: Patrick Fischler dreamt about a horrible figure behind the diner.",
        "Investigate(patrickFischler, horribleFigure) ::: Patrick Fischler investigates the horrible figure.",
        "CollapsesInFright(patrickFischler) ::: Patrick Fischler collapses in fright.",
        "HasAffair(diane, michaelCooke) ::: Diane has an affair with Michael Cooke.",
        "ClosedCreditLine(adamKesher) ::: Adam Kesher's bank has closed his line of credit.",
        "Broke(adamKesher) ::: Adam Kesher is broke.",
        "Meets(adamKesher, cowboy) ::: Adam Kesher meets The Cowboy.",
        "Urges(cowboy, adamKesher) ::: The Cowboy urges Adam Kesher to cast Camilla Rhodes for his own good."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 912,
      "context_id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 4,
      "paragraph": "The older red-headed woman investigates the sound, but nothing is there. The Cowboy appears in the doorway of Diane Selwyn's bedroom saying, \"Hey, pretty girl. Time to wake up.\" At this point, all elements of the narrative seem to change. Diane Selwyn (played by Watts) wakes up in her bed. She looks exactly like Betty, but is portrayed as a failed actress driven into a deep depression by her unrequited love for Camilla Rhodes (played now by Harring). On Camilla's invitation, Diane attends a party at Adam's house on Mulholland Drive. Her limousine stops before they reach the house and Camilla escorts her using a shortcut. Adam appears to be in love with Camilla. Over dinner, Diane states that she came to Hollywood when her aunt died, and she met Camilla at an audition for The Sylvia North Story. Another woman (played by George) kisses Camilla and they turn and smile at Diane. Adam and Camilla prepare to make an important announcement, and dissolve into laughter and kiss while Diane watches, crying.",
      "question_template": "Atreya finds the adviser Morla in [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The Cowboy appears in the doorway of Diane Selwyn's bedroom",
        "Diane Selwyn wakes up in her bed",
        "Diane looks exactly like Betty",
        "Diane states that she came to Hollywood when her aunt died",
        "Adam and Camilla prepare to make an important announcement"
      ],
      "predicates": [
        "InDeepDepression(x) ::: x is in a deep depression.",
        "UnrequitedLove(x, y) ::: x has unrequited love for y.",
        "LooksLike(x, y) ::: x looks exactly like y.",
        "Attends(x, y) ::: x attends an event at location y.",
        "Kisses(x, y) ::: x kisses y.",
        "Crying(x) ::: x is crying.",
        "Loves(x, y) ::: x is in love with y.",
        "InvitedTo(x, y) ::: x is invited to an event by y.",
        "WakesUp(x) ::: x wakes up from sleep.",
        "AppearsInDoorway(x, y) ::: x appears in the doorway of y.",
        "States(x, y) ::: x states something y."
      ],
      "premises": [
        "InDeepDepression(a_1) ::: Diane Selwyn is in a deep depression.",
        "UnrequitedLove(a_1, a_3) ::: Diane Selwyn has unrequited love for Camilla Rhodes.",
        "LooksLike(a_1, a_4) ::: Diane Selwyn looks exactly like Betty.",
        "WakesUp(a_1) ::: Diane Selwyn wakes up in her bed.",
        "AppearsInDoorway(a_2, b_2) ::: The Cowboy appears in the doorway of Diane Selwyn's bedroom.",
        "States(a_1, \"I came to Hollywood when my aunt died, and I met Camilla at an audition for The Sylvia North Story.\") ::: Diane states her background.",
        "Attends(a_1, b_0) ::: Diane attends a party at Adam's house on Mulholland Drive.",
        "InvitedTo(a_1, a_3) ::: Camilla invites Diane to the party.",
        "Loves(a_2, a_3) ::: Adam appears to be in love with Camilla.",
        "Kisses(a_3, a_4) ::: Another woman kisses Camilla.",
        "Crying(a_1) ::: Diane watches, crying.",
        "Conclusion:",
        "Crying(a_1) ::: Diane Selwyn is crying while watching the interaction between Camilla and Adam."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "913": [
    {
      "id": 913,
      "context_id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 2,
      "paragraph": "Trying to learn more about Rita's accident, Betty and Rita go to Winkies and are served by a waitress named Diane, which causes Rita to remember the name \"Diane Selwyn\". They find Diane Selwyn in the phone book and call her, but she does not answer. Betty goes to an audition, where her performance is highly praised. A casting agent takes her to the set of a film called The Sylvia North Story, directed by Adam, where Camilla Rhodes gives an audition and Adam declares, \"This is the girl.\" Betty smiles shyly as she locks eyes with Adam, but she flees before she can meet him, saying that she is late to meet a friend.",
      "question_template": "When Bastian lets out a scream, [[CANDIDATE_ANSWER]] happens.",
      "candidate_answers": [
        "Winkies"
      ],
      "predicates": [
        "ServedBy(x, y) ::: x is served by waitress y.",
        "Remembers(x, y) ::: x remembers y.",
        "Finds(x, y) ::: x finds y in the phone book.",
        "Calls(x, y) ::: x calls y.",
        "Answers(x) ::: x answers the phone.",
        "HighlyPraised(x) ::: x is highly praised.",
        "TakesToSet(x, y) ::: x takes y to the set of a film.",
        "Auditions(x) ::: x gives an audition.",
        "Declares(x, y) ::: x declares y as the girl.",
        "LocksEyes(x, y) ::: x locks eyes with y.",
        "Flees(x) ::: x flees from a situation.",
        "LateToMeet(x, y) ::: x is late to meet y."
      ],
      "premises": [
        "ServedBy(Rita, Diane) ∧ Remembers(Rita, \"Diane Selwyn\") ::: Rita is served by waitress Diane, which causes her to remember the name \"Diane Selwyn\".",
        "Finds(Betty, Diane) ∧ Calls(Betty, Diane) ∧ ¬Answers(Diane) ::: Betty finds Diane Selwyn in the phone book and calls her, but she does not answer.",
        "HighlyPraised(Betty) ∧ TakesToSet(castingAgent, Betty) ∧ Auditions(Camilla) ∧ Declares(Adam, Camilla) ::: Betty goes to an audition, where her performance is highly praised, and a casting agent takes her to the set of a film called The Sylvia North Story, where Camilla Rhodes gives an audition and Adam declares, \"This is the girl.\"",
        "LocksEyes(Betty, Adam) ∧ Flees(Betty) ∧ LateToMeet(Betty, friend) ::: Betty smiles shyly as she locks eyes with Adam, but she flees before she can meet him, saying that she is late to meet a friend."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "915": [
    {
      "id": 915,
      "context_id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 0,
      "paragraph": " The story may not be linear and exhibits several instances of temporal disruption. A dark-haired woman (Harring) escapes her own murder, surviving a car accident on Mulholland Drive. Injured and in shock, she descends into Los Angeles and sneaks into an apartment that an older, red-headed woman has just vacated. An aspiring actress named Betty Elms (Watts) arrives at the same apartment and finds the dark-haired woman confused, not knowing her own name. The dark-haired woman assumes the name \"Rita\" after seeing a poster for the film Gilda (1946), starring Rita Hayworth. To help Rita remember her identity, Betty looks in Rita's purse, where she finds a large amount of money and an unusual blue key.",
      "question_template": "[[CANDIDATE_ANSWER]] is a type of creature.",
      "candidate_answers": [
        "- Betty looks in Rita's purse, where she finds a large amount of money and an unusual blue key."
      ],
      "predicates": [
        "KnowsIdentity(x) ::: x knows her own identity.",
        "Helps(x, y) ::: x helps y.",
        "Confused(x) ::: x is confused.",
        "AssumesName(x, y) ::: x assumes the name y.",
        "Finds(x, y, z) ::: x finds y in z.",
        "Injured(x) ::: x is injured.",
        "InShock(x) ::: x is in shock."
      ],
      "premises": [
        "¬KnowsIdentity(a_1) ::: Rita does not know her own identity.",
        "Helps(a_4, a_1) ::: Betty Elms helps Rita remember her identity.",
        "Confused(a_1) ::: The dark-haired woman (Rita) is confused.",
        "AssumesName(a_1, \"Rita\") ::: The dark-haired woman assumes the name \"Rita\" after seeing a poster for the film Gilda (1946).",
        "Finds(a_4, money, a_2) ::: Betty finds a large amount of money in Rita's purse.",
        "Finds(a_4, blueKey, a_2) ::: Betty finds an unusual blue key in Rita's purse.",
        "Injured(a_1) ∧ InShock(a_1) ::: The dark-haired woman is injured and in shock after the car accident.",
        "Conclusion:",
        "¬KnowsIdentity(a_1) ∧ Helps(a_4, a_1) ::: Rita does not know her own identity and Betty helps her remember it."
      ],
      "conclusions": [
        "Finds(a_4, money, a_2) ∧ Finds(a_4, blueKey, a_2)"
      ]
    },
    {
      "id": 915,
      "context_id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 3,
      "paragraph": "Betty and Rita go to Diane Selwyn's apartment and break in when no one answers the door. In the bedroom they find the body of a woman who has been dead for several days. Terrified, they return to their apartment, where Rita disguises herself with a blonde wig. The two women have sex that night and awake at 2 a.m., when Rita insists they go to an eerie theater called Club Silencio. On stage, a man explains in several languages that everything is an illusion; a woman begins singing then collapses, although her vocals continue. Betty finds a blue box in her purse that matches Rita's key. Upon returning to the apartment, Rita retrieves the key and finds that Betty has disappeared. Rita unlocks the box, and it falls to the floor with a thump.",
      "question_template": "[[CANDIDATE_ANSWER]] is a type of creature.",
      "candidate_answers": [
        "Betty",
        "Rita",
        "Rita retrieves the key",
        "Rita unlocks the box"
      ],
      "predicates": [
        "GoesTo(x, y) ::: x goes to location y.",
        "BreaksIn(x, y) ::: x breaks into location y.",
        "Finds(x, y) ::: x finds object y.",
        "Dead(x) ::: x is dead.",
        "Disguises(x, y) ::: x disguises herself as y.",
        "HasSex(x, y) ::: x has sex with y.",
        "AwakeAt(x, t) ::: x is awake at time t.",
        "Insists(x, y) ::: x insists on doing y.",
        "Explains(x, y) ::: x explains something in language y.",
        "Sings(x) ::: x sings.",
        "Collapses(x) ::: x collapses.",
        "FindsObject(x, y) ::: x finds object y.",
        "Unlocks(x, y) ::: x unlocks object y.",
        "Disappears(x) ::: x disappears.",
        "Falls(x) ::: x falls to the floor."
      ],
      "premises": [
        "GoesTo(a_4, b_2) ∧ BreaksIn(a_4, b_2) ∧ ¬(GoesTo(a_4, a_1)) ::: Betty goes to Diane Selwyn's apartment and breaks in when no one answers the door.",
        "Finds(a_4, a_3) ∧ Dead(a_3) ::: In the bedroom, Betty finds the body of a woman (Camilla) who has been dead for several days.",
        "AwakeAt(a_4, 2) ∧ Insists(a_4, GoTo(b_3)) ::: Betty and Rita awake at 2 a.m., when Rita insists they go to an eerie theater called Club Silencio.",
        "Explains(a_2, severalLanguages) ::: On stage, a man explains in several languages that everything is an illusion.",
        "Sings(a_2) ∧ Collapses(a_2) ::: A woman begins singing then collapses, although her vocals continue.",
        "Finds(a_4, c_1) ::: Betty finds a blue key in her purse that matches Rita's key.",
        "Unlocks(a_4, c_1) ∧ Disappears(a_4) ::: Rita unlocks the box, and it falls to the floor with a thump.",
        "Conclusion:",
        "Disguises(a_4, blondeWig) ::: Rita disguises herself with a blonde wig.",
        "Falls(c_1) ::: The blue box falls to the floor with a thump."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "916": [
    {
      "id": 916,
      "context_id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 1,
      "paragraph": "In what seems to be a scene from a different narrative, set at a diner called Winkies, a man (Patrick Fischler) tells his companion (Michael Cooke) about a nightmare in which he dreamt there was a horrible figure behind the diner. When they investigate, the figure appears, causing the man with the nightmare to collapse in fright. As the principal narrative resumes, Hollywood director Adam Kesher (Justin Theroux) has his film commandeered by apparent mobsters, who insist he cast an unknown actress named Camilla Rhodes (Melissa George) as the lead in his film. After he resists, he returns home to find his wife having an affair and is thrown out of his house. He later learns that his bank has closed his line of credit and he is broke. He agrees to meet a mysterious figure called The Cowboy, who urges him to cast Camilla Rhodes for his own good. Later, a bungling hit man (Mark Pellegrino) attempts to steal a book full of phone numbers and leaves three people dead.",
      "question_template": "[[CANDIDATE_ANSWER]] is represented by The Nothing.",
      "candidate_answers": [
        "An unknown actress named Camilla Rhodes",
        "The lead in his film"
      ],
      "predicates": [
        "Commandeered(x, y) ::: x's film is commandeered by y.",
        "NegativelyImpacted(x, y) ::: x's life is negatively impacted by y's demands.",
        "ProvidesAdvice(x, y) ::: x provides advice to y for their own good.",
        "Dreamt(x, y) ::: x dreamt about y.",
        "Investigate(x, y) ::: x investigates y.",
        "CollapsesInFright(x) ::: x collapses in fright.",
        "HasAffair(x, y) ::: x has an affair with y.",
        "ClosedCreditLine(x) ::: x's bank has closed their line of credit.",
        "Broke(x) ::: x is broke.",
        "Meets(x, y) ::: x meets y.",
        "Urges(x, y) ::: x urges y to do something."
      ],
      "premises": [
        "Commandeered(adamKesher, mobsters) ::: Adam Kesher's film is commandeered by mobsters.",
        "NegativelyImpacted(adamKesher, mobsters) ::: Adam Kesher's life is negatively impacted by the mobsters' demands.",
        "ProvidesAdvice(cowboy, adamKesher) ::: The Cowboy provides advice to Adam Kesher for his own good.",
        "Dreamt(patrickFischler, horribleFigure) ::: Patrick Fischler dreamt about a horrible figure behind the diner.",
        "Investigate(patrickFischler, horribleFigure) ::: Patrick Fischler investigates the horrible figure.",
        "CollapsesInFright(patrickFischler) ::: Patrick Fischler collapses in fright.",
        "HasAffair(diane, michaelCooke) ::: Diane has an affair with Michael Cooke.",
        "ClosedCreditLine(adamKesher) ::: Adam Kesher's bank has closed his line of credit.",
        "Broke(adamKesher) ::: Adam Kesher is broke.",
        "Meets(adamKesher, cowboy) ::: Adam Kesher meets The Cowboy.",
        "Urges(cowboy, adamKesher) ::: The Cowboy urges Adam Kesher to cast Camilla Rhodes for his own good."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 916,
      "context_id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 2,
      "paragraph": "Trying to learn more about Rita's accident, Betty and Rita go to Winkies and are served by a waitress named Diane, which causes Rita to remember the name \"Diane Selwyn\". They find Diane Selwyn in the phone book and call her, but she does not answer. Betty goes to an audition, where her performance is highly praised. A casting agent takes her to the set of a film called The Sylvia North Story, directed by Adam, where Camilla Rhodes gives an audition and Adam declares, \"This is the girl.\" Betty smiles shyly as she locks eyes with Adam, but she flees before she can meet him, saying that she is late to meet a friend.",
      "question_template": "[[CANDIDATE_ANSWER]] is represented by The Nothing.",
      "candidate_answers": [
        "The Sylvia North Story",
        "A casting agent takes her to the set of a film called The Sylvia North Story"
      ],
      "predicates": [
        "ServedBy(x, y) ::: x is served by waitress y.",
        "Remembers(x, y) ::: x remembers y.",
        "Finds(x, y) ::: x finds y in the phone book.",
        "Calls(x, y) ::: x calls y.",
        "Answers(x) ::: x answers the phone.",
        "HighlyPraised(x) ::: x is highly praised.",
        "TakesToSet(x, y) ::: x takes y to the set of a film.",
        "Auditions(x) ::: x gives an audition.",
        "Declares(x, y) ::: x declares y as the girl.",
        "LocksEyes(x, y) ::: x locks eyes with y.",
        "Flees(x) ::: x flees from a situation.",
        "LateToMeet(x, y) ::: x is late to meet y."
      ],
      "premises": [
        "ServedBy(Rita, Diane) ∧ Remembers(Rita, \"Diane Selwyn\") ::: Rita is served by waitress Diane, which causes her to remember the name \"Diane Selwyn\".",
        "Finds(Betty, Diane) ∧ Calls(Betty, Diane) ∧ ¬Answers(Diane) ::: Betty finds Diane Selwyn in the phone book and calls her, but she does not answer.",
        "HighlyPraised(Betty) ∧ TakesToSet(castingAgent, Betty) ∧ Auditions(Camilla) ∧ Declares(Adam, Camilla) ::: Betty goes to an audition, where her performance is highly praised, and a casting agent takes her to the set of a film called The Sylvia North Story, where Camilla Rhodes gives an audition and Adam declares, \"This is the girl.\"",
        "LocksEyes(Betty, Adam) ∧ Flees(Betty) ∧ LateToMeet(Betty, friend) ::: Betty smiles shyly as she locks eyes with Adam, but she flees before she can meet him, saying that she is late to meet a friend."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 916,
      "context_id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 4,
      "paragraph": "The older red-headed woman investigates the sound, but nothing is there. The Cowboy appears in the doorway of Diane Selwyn's bedroom saying, \"Hey, pretty girl. Time to wake up.\" At this point, all elements of the narrative seem to change. Diane Selwyn (played by Watts) wakes up in her bed. She looks exactly like Betty, but is portrayed as a failed actress driven into a deep depression by her unrequited love for Camilla Rhodes (played now by Harring). On Camilla's invitation, Diane attends a party at Adam's house on Mulholland Drive. Her limousine stops before they reach the house and Camilla escorts her using a shortcut. Adam appears to be in love with Camilla. Over dinner, Diane states that she came to Hollywood when her aunt died, and she met Camilla at an audition for The Sylvia North Story. Another woman (played by George) kisses Camilla and they turn and smile at Diane. Adam and Camilla prepare to make an important announcement, and dissolve into laughter and kiss while Diane watches, crying.",
      "question_template": "[[CANDIDATE_ANSWER]] is represented by The Nothing.",
      "candidate_answers": [
        "The Sylvia North Story"
      ],
      "predicates": [
        "InDeepDepression(x) ::: x is in a deep depression.",
        "UnrequitedLove(x, y) ::: x has unrequited love for y.",
        "LooksLike(x, y) ::: x looks exactly like y.",
        "Attends(x, y) ::: x attends an event at location y.",
        "Kisses(x, y) ::: x kisses y.",
        "Crying(x) ::: x is crying.",
        "Loves(x, y) ::: x is in love with y.",
        "InvitedTo(x, y) ::: x is invited to an event by y.",
        "WakesUp(x) ::: x wakes up from sleep.",
        "AppearsInDoorway(x, y) ::: x appears in the doorway of y.",
        "States(x, y) ::: x states something y."
      ],
      "premises": [
        "InDeepDepression(a_1) ::: Diane Selwyn is in a deep depression.",
        "UnrequitedLove(a_1, a_3) ::: Diane Selwyn has unrequited love for Camilla Rhodes.",
        "LooksLike(a_1, a_4) ::: Diane Selwyn looks exactly like Betty.",
        "WakesUp(a_1) ::: Diane Selwyn wakes up in her bed.",
        "AppearsInDoorway(a_2, b_2) ::: The Cowboy appears in the doorway of Diane Selwyn's bedroom.",
        "States(a_1, \"I came to Hollywood when my aunt died, and I met Camilla at an audition for The Sylvia North Story.\") ::: Diane states her background.",
        "Attends(a_1, b_0) ::: Diane attends a party at Adam's house on Mulholland Drive.",
        "InvitedTo(a_1, a_3) ::: Camilla invites Diane to the party.",
        "Loves(a_2, a_3) ::: Adam appears to be in love with Camilla.",
        "Kisses(a_3, a_4) ::: Another woman kisses Camilla.",
        "Crying(a_1) ::: Diane watches, crying.",
        "Conclusion:",
        "Crying(a_1) ::: Diane Selwyn is crying while watching the interaction between Camilla and Adam."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "917": [
    {
      "id": 917,
      "context_id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 5,
      "paragraph": "Diane meets with the hit man at Winkies, where she gives him Camilla's photo and a large amount of money, and they are served by a waitress named Betty. The hit man tells Diane that when the job is done, she will find a blue key. Diane asks what, if anything, the key opens, but the hit man just laughs. Diane looks up and sees the man who had the nightmare standing at the counter. Back at her apartment, with the key on a table in front of her, she is terrorized by hallucinations. She runs screaming to her bed, where she shoots herself. A woman at the club whispers \"Silencio\".",
      "question_template": "The grain of sand that the Empress has is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Diane",
        "She runs screaming to her bed, where she shoots herself"
      ],
      "predicates": [
        "Meets(x, y) ::: x meets with y.",
        "Gives(x, y, z) ::: x gives y to z.",
        "ServedBy(x, y) ::: x is served by y.",
        "Tells(x, y, z) ::: x tells y z.",
        "Asks(x, y, z) ::: x asks y z.",
        "Sees(x, y) ::: x sees y.",
        "TerrorizedBy(x, y) ::: x is terrorized by y.",
        "Runs(x) ::: x runs.",
        "Shoots(x) ::: x shoots herself/himself.",
        "Whispers(x, y) ::: x whispers y."
      ],
      "premises": [
        "Meets(diane, hit_man) ::: Diane meets with the hit man.",
        "Gives(diane, camilla_photo, hit_man) ::: Diane gives Camilla's photo to the hit man.",
        "ServedBy(hit_man, betty) ::: The hit man is served by a waitress named Betty.",
        "Tells(hit_man, diane, \"when the job is done, you will find a blue key\") ::: The hit man tells Diane that when the job is done, she will find a blue key.",
        "Asks(diane, hit_man, \"what, if anything, does the key open?\") ::: Diane asks the hit man what, if anything, the key opens.",
        "Laughs(hit_man) ::: The hit man just laughs.",
        "Sees(diane, man_with_nightmare) ::: Diane sees the man who had the nightmare standing at the counter.",
        "TerrorizedBy(diane, hallucinations) ::: Diane is terrorized by hallucinations.",
        "Runs(diane) ::: Diane runs screaming to her bed.",
        "Shoots(diane) ::: Diane shoots herself.",
        "Whispers(woman_at_club, \"Silencio\") ::: A woman at the club whispers \"Silencio\"."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ]
}