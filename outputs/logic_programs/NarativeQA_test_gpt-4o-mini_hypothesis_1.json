{
  "0": [
    {
      "id": 0,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 0,
      "paragraph": " The story begins in 1647 when King Charles I has been defeated in the civil war and has fled from London towards the New Forest. Parliamentary soldiers have been sent to search the forest and decide to burn Arnwood, the house of Colonel Beverley, a Cavalier officer killed at the Battle of Naseby. The four orphan children of the house, Edward, Humphrey, Alice and Edith, are believed to have died in the flames. However, they are saved by Jacob Armitage, a local verderer, who hides them in his isolated cottage and disguises them as his grandchildren.",
      "question_template": "The title of this story is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The story begins in 1647 when King Charles I has been defeated in the civil war and has fled from London towards the New Forest.",
        "Parliamentary soldiers have been sent to search the forest and decide to burn Arnwood, the house of Colonel Beverley, a Cavalier officer killed at the Battle of Naseby.",
        "The four orphan children of the house, Edward, Humphrey, Alice and Edith, are believed to have died in the flames.",
        "However, they are saved by Jacob Armitage, a local verderer, who hides them in his isolated cottage and disguises them as his grandchildren."
      ],
      "predicates": [
        "Saved(x, y) ::: x saves y.",
        "Orphan(x) ::: x is an orphan child.",
        "DisguisedAs(x, y) ::: x is disguised as y.",
        "Hides(x, y) ::: x hides y.",
        "Fled(x, y) ::: x has fled from y.",
        "Burned(x) ::: x is burned.",
        "Killed(x) ::: x is killed.",
        "Sent(x, y) ::: x is sent to y.",
        "BelievedDead(x) ::: x is believed to have died."
      ],
      "premises": [
        "Fled(kingCharlesII, London) ::: King Charles I has fled from London.",
        "Sent(parliamentarySoldiers, NewForest) ::: Parliamentary soldiers have been sent to search the New Forest.",
        "Burned(arnwoodEstate) ::: Arnwood, the house of Colonel Beverley, is burned.",
        "∃x (Orphan(x) ∧ BelievedDead(x)) ::: The four orphan children are believed to have died in the flames.",
        "Saved(jacobArmitage, a_5) ::: Jacob Armitage saves Edward's sisters.",
        "Saved(jacobArmitage, a_6) ::: Jacob Armitage saves Edward's brother.",
        "Hides(jacobArmitage, a_0) ::: Jacob Armitage hides the orphan children in his isolated cottage.",
        "DisguisedAs(a_5, grandchildren) ::: Edward's sisters are disguised as Jacob Armitage's grandchildren.",
        "DisguisedAs(a_6, grandchildren) ::: Edward's brother is disguised as Jacob Armitage's grandchildren."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "1": [
    {
      "id": 1,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 0,
      "paragraph": " The story begins in 1647 when King Charles I has been defeated in the civil war and has fled from London towards the New Forest. Parliamentary soldiers have been sent to search the forest and decide to burn Arnwood, the house of Colonel Beverley, a Cavalier officer killed at the Battle of Naseby. The four orphan children of the house, Edward, Humphrey, Alice and Edith, are believed to have died in the flames. However, they are saved by Jacob Armitage, a local verderer, who hides them in his isolated cottage and disguises them as his grandchildren.",
      "question_template": "[[CANDIDATE_ANSWER]] saves the 4 orphans; Edward, Humphrey, Alice and Edith.",
      "candidate_answers": [
        "Jacob Armitage",
        "A local verderer",
        "Hides them in his isolated cottage",
        "Disguises them as his grandchildren"
      ],
      "predicates": [
        "Saved(x, y) ::: x saves y.",
        "Orphan(x) ::: x is an orphan child.",
        "DisguisedAs(x, y) ::: x is disguised as y.",
        "Hides(x, y) ::: x hides y.",
        "Fled(x, y) ::: x has fled from y.",
        "Burned(x) ::: x is burned.",
        "Killed(x) ::: x is killed.",
        "Sent(x, y) ::: x is sent to y.",
        "BelievedDead(x) ::: x is believed to have died."
      ],
      "premises": [
        "Fled(kingCharlesII, London) ::: King Charles I has fled from London.",
        "Sent(parliamentarySoldiers, NewForest) ::: Parliamentary soldiers have been sent to search the New Forest.",
        "Burned(arnwoodEstate) ::: Arnwood, the house of Colonel Beverley, is burned.",
        "∃x (Orphan(x) ∧ BelievedDead(x)) ::: The four orphan children are believed to have died in the flames.",
        "Saved(jacobArmitage, a_5) ::: Jacob Armitage saves Edward's sisters.",
        "Saved(jacobArmitage, a_6) ::: Jacob Armitage saves Edward's brother.",
        "Hides(jacobArmitage, a_0) ::: Jacob Armitage hides the orphan children in his isolated cottage.",
        "DisguisedAs(a_5, grandchildren) ::: Edward's sisters are disguised as Jacob Armitage's grandchildren.",
        "DisguisedAs(a_6, grandchildren) ::: Edward's brother is disguised as Jacob Armitage's grandchildren."
      ],
      "conclusions": [
        "None",
        "Saved(jacobArmitage, a_0) ∧ Saved(jacobArmitage, a_5) ∧ Saved(jacobArmitage, a_6)",
        "None",
        "None"
      ]
    },
    {
      "id": 1,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 2,
      "paragraph": "Edward eventually joins the army of the future King Charles II, but after the Royalist defeat at the Battle of Worcester, he returns to the New Forest where he learns that Heatherstone has been awarded the old Arnwood estate. Disillusioned by this, and by Patience's apparent rejection of his declarations of love, Edward flees to France. His sisters are sent away to be brought up as aristocratic ladies and his brother continues to live in the New Forest. Edward learns that Patience does, in fact, love him, and that Heatherstone had acquired the Arnwood estate for Edward, but he works as a mercenary soldier in exile until the Restoration when they are reunited.",
      "question_template": "[[CANDIDATE_ANSWER]] saves the 4 orphans; Edward, Humphrey, Alice and Edith.",
      "candidate_answers": [
        "Edward",
        "Heatherstone"
      ],
      "predicates": [
        "Joins(x, y) ::: x joins the army of y.",
        "Defeated(x, y) ::: x is defeated at y.",
        "Returns(x, y) ::: x returns to y.",
        "Awarded(x, y) ::: x is awarded y.",
        "Flees(x, y) ::: x flees to y.",
        "RaisedAsAristocraticLadies(x) ::: x is raised as aristocratic ladies.",
        "LivesIn(x, y) ::: x lives in y.",
        "Learns(x, y) ::: x learns about y.",
        "Loves(x, y) ::: x loves y.",
        "WorksAs(x, y) ::: x works as y.",
        "Reunited(x, y) ::: x is reunited with y."
      ],
      "premises": [
        "Joins(Edward, King Charles II) ::: Edward eventually joins the army of the future King Charles II.",
        "Defeated(Royalist army, Battle of Worcester) ::: The Royalist army is defeated at the Battle of Worcester.",
        "Returns(Edward, New Forest) ::: Edward returns to the New Forest after the Royalist defeat at the Battle of Worcester.",
        "Awarded(Heatherstone, Arnwood estate) ::: Heatherstone has been awarded the old Arnwood estate.",
        "Flees(Edward, France) ::: Edward flees to France due to disillusionment.",
        "RaisedAsAristocraticLadies(Edward's sisters) ::: Edward's sisters are raised as aristocratic ladies while he is in exile.",
        "LivesIn(Edward's brother, New Forest) ::: Edward's brother continues to live in the New Forest.",
        "Learns(Edward, Loves(Patience, Edward)) ::: Edward learns that Patience does love him.",
        "Awarded(Heatherstone, Arnwood estate) → WorksAs(Edward, mercenary soldier) ::: Heatherstone acquired the Arnwood estate for Edward, but he works as a mercenary soldier in exile.",
        "Reunited(Patience, Edward) ::: They are reunited after the Restoration."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "2": [
    {
      "id": 2,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 0,
      "paragraph": " The story begins in 1647 when King Charles I has been defeated in the civil war and has fled from London towards the New Forest. Parliamentary soldiers have been sent to search the forest and decide to burn Arnwood, the house of Colonel Beverley, a Cavalier officer killed at the Battle of Naseby. The four orphan children of the house, Edward, Humphrey, Alice and Edith, are believed to have died in the flames. However, they are saved by Jacob Armitage, a local verderer, who hides them in his isolated cottage and disguises them as his grandchildren.",
      "question_template": "Jacob hid the 4 orphans in [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "In his isolated cottage"
      ],
      "predicates": [
        "Saved(x, y) ::: x saves y.",
        "Orphan(x) ::: x is an orphan child.",
        "DisguisedAs(x, y) ::: x is disguised as y.",
        "Hides(x, y) ::: x hides y.",
        "Fled(x, y) ::: x has fled from y.",
        "Burned(x) ::: x is burned.",
        "Killed(x) ::: x is killed.",
        "Sent(x, y) ::: x is sent to y.",
        "BelievedDead(x) ::: x is believed to have died."
      ],
      "premises": [
        "Fled(kingCharlesII, London) ::: King Charles I has fled from London.",
        "Sent(parliamentarySoldiers, NewForest) ::: Parliamentary soldiers have been sent to search the New Forest.",
        "Burned(arnwoodEstate) ::: Arnwood, the house of Colonel Beverley, is burned.",
        "∃x (Orphan(x) ∧ BelievedDead(x)) ::: The four orphan children are believed to have died in the flames.",
        "Saved(jacobArmitage, a_5) ::: Jacob Armitage saves Edward's sisters.",
        "Saved(jacobArmitage, a_6) ::: Jacob Armitage saves Edward's brother.",
        "Hides(jacobArmitage, a_0) ::: Jacob Armitage hides the orphan children in his isolated cottage.",
        "DisguisedAs(a_5, grandchildren) ::: Edward's sisters are disguised as Jacob Armitage's grandchildren.",
        "DisguisedAs(a_6, grandchildren) ::: Edward's brother is disguised as Jacob Armitage's grandchildren."
      ],
      "conclusions": [
        "Hides(jacobArmitage, a_0)"
      ]
    }
  ],
  "3": [
    {
      "id": 3,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 1,
      "paragraph": "Under Armitage's guidance, the children adapt from an aristocratic lifestyle to that of simple foresters. After Armitage's death, Edward takes charge and the children develop and expand the farmstead, aided by the entrepreneurial spirit of the younger brother Humphrey. They are assisted by a gypsy boy, Pablo, who they rescue from a pitfall trap. A sub-plot involves a hostile Puritan gamekeeper named Corbould who seeks to harm Edward and his family. Edward also encounters the sympathetic Puritan, Heatherstone, placed in charge of the Royal land in the New Forest, and rescues his daughter, Patience, in a house-fire. Edward leaves the cottage and works as a secretary for Heatherstone, but Edward maintains the pretence that he is the grandson of Jacob Armitage.",
      "question_template": "The name of the hostile Puritan gamekeeper is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Corbould"
      ],
      "predicates": [
        "GuidedBy(x, y) ::: x is guided by y.",
        "AdaptsToLifestyle(x, y) ::: x adapts to lifestyle y.",
        "Develops(x, y) ::: x develops y.",
        "AssistedBy(x, y) ::: x is assisted by y.",
        "Rescues(x, y) ::: x rescues y.",
        "WorksAs(x, y) ::: x works as y.",
        "MaintainsPretence(x, y) ::: x maintains the pretence of being y.",
        "HostileTowards(x, y) ::: x is hostile towards y.",
        "SympatheticTowards(x, y) ::: x is sympathetic towards y."
      ],
      "premises": [
        "GuidedBy(a_1, a_2) ∧ AdaptsToLifestyle(a_1, simple foresters) ∧ Develops(a_1, farmstead) ∧ AssistedBy(a_1, a_6) ∧ AssistedBy(a_1, a_7) ::: Under Armitage's guidance, Edward adapts from an aristocratic lifestyle to that of simple foresters and develops the farmstead, aided by the entrepreneurial spirit of his brother Humphrey and the gypsy boy Pablo.",
        "Rescues(a_1, a_7) ::: Edward rescues Pablo from a pitfall trap.",
        "HostileTowards(a_3, a_1) ::: Corbould is hostile towards Edward and his family.",
        "SympatheticTowards(a_3, a_1) ::: Heatherstone is sympathetic towards Edward.",
        "WorksAs(a_1, secretary) ::: Edward works as a secretary for Heatherstone.",
        "MaintainsPretence(a_1, grandson of Jacob Armitage) ::: Edward maintains the pretence that he is the grandson of Jacob Armitage."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 3,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 2,
      "paragraph": "Edward eventually joins the army of the future King Charles II, but after the Royalist defeat at the Battle of Worcester, he returns to the New Forest where he learns that Heatherstone has been awarded the old Arnwood estate. Disillusioned by this, and by Patience's apparent rejection of his declarations of love, Edward flees to France. His sisters are sent away to be brought up as aristocratic ladies and his brother continues to live in the New Forest. Edward learns that Patience does, in fact, love him, and that Heatherstone had acquired the Arnwood estate for Edward, but he works as a mercenary soldier in exile until the Restoration when they are reunited.",
      "question_template": "The name of the hostile Puritan gamekeeper is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Heatherstone"
      ],
      "predicates": [
        "Joins(x, y) ::: x joins the army of y.",
        "Defeated(x, y) ::: x is defeated at y.",
        "Returns(x, y) ::: x returns to y.",
        "Awarded(x, y) ::: x is awarded y.",
        "Flees(x, y) ::: x flees to y.",
        "RaisedAsAristocraticLadies(x) ::: x is raised as aristocratic ladies.",
        "LivesIn(x, y) ::: x lives in y.",
        "Learns(x, y) ::: x learns about y.",
        "Loves(x, y) ::: x loves y.",
        "WorksAs(x, y) ::: x works as y.",
        "Reunited(x, y) ::: x is reunited with y."
      ],
      "premises": [
        "Joins(Edward, King Charles II) ::: Edward eventually joins the army of the future King Charles II.",
        "Defeated(Royalist army, Battle of Worcester) ::: The Royalist army is defeated at the Battle of Worcester.",
        "Returns(Edward, New Forest) ::: Edward returns to the New Forest after the Royalist defeat at the Battle of Worcester.",
        "Awarded(Heatherstone, Arnwood estate) ::: Heatherstone has been awarded the old Arnwood estate.",
        "Flees(Edward, France) ::: Edward flees to France due to disillusionment.",
        "RaisedAsAristocraticLadies(Edward's sisters) ::: Edward's sisters are raised as aristocratic ladies while he is in exile.",
        "LivesIn(Edward's brother, New Forest) ::: Edward's brother continues to live in the New Forest.",
        "Learns(Edward, Loves(Patience, Edward)) ::: Edward learns that Patience does love him.",
        "Awarded(Heatherstone, Arnwood estate) → WorksAs(Edward, mercenary soldier) ::: Heatherstone acquired the Arnwood estate for Edward, but he works as a mercenary soldier in exile.",
        "Reunited(Patience, Edward) ::: They are reunited after the Restoration."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "5": [
    {
      "id": 5,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 0,
      "paragraph": " The story begins in 1647 when King Charles I has been defeated in the civil war and has fled from London towards the New Forest. Parliamentary soldiers have been sent to search the forest and decide to burn Arnwood, the house of Colonel Beverley, a Cavalier officer killed at the Battle of Naseby. The four orphan children of the house, Edward, Humphrey, Alice and Edith, are believed to have died in the flames. However, they are saved by Jacob Armitage, a local verderer, who hides them in his isolated cottage and disguises them as his grandchildren.",
      "question_template": "Edward's sisters were sent away [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The four orphan children of the house, Edward, Humphrey, Alice and Edith, are believed to have died in the flames.",
        "They are saved by Jacob Armitage, a local verderer, who hides them in his isolated cottage and disguises them as his grandchildren."
      ],
      "predicates": [
        "Saved(x, y) ::: x saves y.",
        "Orphan(x) ::: x is an orphan child.",
        "DisguisedAs(x, y) ::: x is disguised as y.",
        "Hides(x, y) ::: x hides y.",
        "Fled(x, y) ::: x has fled from y.",
        "Burned(x) ::: x is burned.",
        "Killed(x) ::: x is killed.",
        "Sent(x, y) ::: x is sent to y.",
        "BelievedDead(x) ::: x is believed to have died."
      ],
      "premises": [
        "Fled(kingCharlesII, London) ::: King Charles I has fled from London.",
        "Sent(parliamentarySoldiers, NewForest) ::: Parliamentary soldiers have been sent to search the New Forest.",
        "Burned(arnwoodEstate) ::: Arnwood, the house of Colonel Beverley, is burned.",
        "∃x (Orphan(x) ∧ BelievedDead(x)) ::: The four orphan children are believed to have died in the flames.",
        "Saved(jacobArmitage, a_5) ::: Jacob Armitage saves Edward's sisters.",
        "Saved(jacobArmitage, a_6) ::: Jacob Armitage saves Edward's brother.",
        "Hides(jacobArmitage, a_0) ::: Jacob Armitage hides the orphan children in his isolated cottage.",
        "DisguisedAs(a_5, grandchildren) ::: Edward's sisters are disguised as Jacob Armitage's grandchildren.",
        "DisguisedAs(a_6, grandchildren) ::: Edward's brother is disguised as Jacob Armitage's grandchildren."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 5,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 2,
      "paragraph": "Edward eventually joins the army of the future King Charles II, but after the Royalist defeat at the Battle of Worcester, he returns to the New Forest where he learns that Heatherstone has been awarded the old Arnwood estate. Disillusioned by this, and by Patience's apparent rejection of his declarations of love, Edward flees to France. His sisters are sent away to be brought up as aristocratic ladies and his brother continues to live in the New Forest. Edward learns that Patience does, in fact, love him, and that Heatherstone had acquired the Arnwood estate for Edward, but he works as a mercenary soldier in exile until the Restoration when they are reunited.",
      "question_template": "Edward's sisters were sent away [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- To be brought up as aristocratic ladies"
      ],
      "predicates": [
        "Joins(x, y) ::: x joins the army of y.",
        "Defeated(x, y) ::: x is defeated at y.",
        "Returns(x, y) ::: x returns to y.",
        "Awarded(x, y) ::: x is awarded y.",
        "Flees(x, y) ::: x flees to y.",
        "RaisedAsAristocraticLadies(x) ::: x is raised as aristocratic ladies.",
        "LivesIn(x, y) ::: x lives in y.",
        "Learns(x, y) ::: x learns about y.",
        "Loves(x, y) ::: x loves y.",
        "WorksAs(x, y) ::: x works as y.",
        "Reunited(x, y) ::: x is reunited with y."
      ],
      "premises": [
        "Joins(Edward, King Charles II) ::: Edward eventually joins the army of the future King Charles II.",
        "Defeated(Royalist army, Battle of Worcester) ::: The Royalist army is defeated at the Battle of Worcester.",
        "Returns(Edward, New Forest) ::: Edward returns to the New Forest after the Royalist defeat at the Battle of Worcester.",
        "Awarded(Heatherstone, Arnwood estate) ::: Heatherstone has been awarded the old Arnwood estate.",
        "Flees(Edward, France) ::: Edward flees to France due to disillusionment.",
        "RaisedAsAristocraticLadies(Edward's sisters) ::: Edward's sisters are raised as aristocratic ladies while he is in exile.",
        "LivesIn(Edward's brother, New Forest) ::: Edward's brother continues to live in the New Forest.",
        "Learns(Edward, Loves(Patience, Edward)) ::: Edward learns that Patience does love him.",
        "Awarded(Heatherstone, Arnwood estate) → WorksAs(Edward, mercenary soldier) ::: Heatherstone acquired the Arnwood estate for Edward, but he works as a mercenary soldier in exile.",
        "Reunited(Patience, Edward) ::: They are reunited after the Restoration."
      ],
      "conclusions": [
        "RaisedAsAristocraticLadies(Edward's sisters)"
      ]
    }
  ],
  "7": [
    {
      "id": 7,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 0,
      "paragraph": " The story begins in 1647 when King Charles I has been defeated in the civil war and has fled from London towards the New Forest. Parliamentary soldiers have been sent to search the forest and decide to burn Arnwood, the house of Colonel Beverley, a Cavalier officer killed at the Battle of Naseby. The four orphan children of the house, Edward, Humphrey, Alice and Edith, are believed to have died in the flames. However, they are saved by Jacob Armitage, a local verderer, who hides them in his isolated cottage and disguises them as his grandchildren.",
      "question_template": "Edward and his siblings pretend to be the grandchildren of [[CANDIDATE_ANSWER]] towards Jacob Armitage.",
      "candidate_answers": [
        "His grandchildren"
      ],
      "predicates": [
        "Saved(x, y) ::: x saves y.",
        "Orphan(x) ::: x is an orphan child.",
        "DisguisedAs(x, y) ::: x is disguised as y.",
        "Hides(x, y) ::: x hides y.",
        "Fled(x, y) ::: x has fled from y.",
        "Burned(x) ::: x is burned.",
        "Killed(x) ::: x is killed.",
        "Sent(x, y) ::: x is sent to y.",
        "BelievedDead(x) ::: x is believed to have died."
      ],
      "premises": [
        "Fled(kingCharlesII, London) ::: King Charles I has fled from London.",
        "Sent(parliamentarySoldiers, NewForest) ::: Parliamentary soldiers have been sent to search the New Forest.",
        "Burned(arnwoodEstate) ::: Arnwood, the house of Colonel Beverley, is burned.",
        "∃x (Orphan(x) ∧ BelievedDead(x)) ::: The four orphan children are believed to have died in the flames.",
        "Saved(jacobArmitage, a_5) ::: Jacob Armitage saves Edward's sisters.",
        "Saved(jacobArmitage, a_6) ::: Jacob Armitage saves Edward's brother.",
        "Hides(jacobArmitage, a_0) ::: Jacob Armitage hides the orphan children in his isolated cottage.",
        "DisguisedAs(a_5, grandchildren) ::: Edward's sisters are disguised as Jacob Armitage's grandchildren.",
        "DisguisedAs(a_6, grandchildren) ::: Edward's brother is disguised as Jacob Armitage's grandchildren."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "8": [
    {
      "id": 8,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 2,
      "paragraph": "Edward eventually joins the army of the future King Charles II, but after the Royalist defeat at the Battle of Worcester, he returns to the New Forest where he learns that Heatherstone has been awarded the old Arnwood estate. Disillusioned by this, and by Patience's apparent rejection of his declarations of love, Edward flees to France. His sisters are sent away to be brought up as aristocratic ladies and his brother continues to live in the New Forest. Edward learns that Patience does, in fact, love him, and that Heatherstone had acquired the Arnwood estate for Edward, but he works as a mercenary soldier in exile until the Restoration when they are reunited.",
      "question_template": "Edward's job title while working for Heatherstone was [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Edward eventually joins the army of the future King Charles II",
        "He works as a mercenary soldier in exile"
      ],
      "predicates": [
        "Joins(x, y) ::: x joins the army of y.",
        "Defeated(x, y) ::: x is defeated at y.",
        "Returns(x, y) ::: x returns to y.",
        "Awarded(x, y) ::: x is awarded y.",
        "Flees(x, y) ::: x flees to y.",
        "RaisedAsAristocraticLadies(x) ::: x is raised as aristocratic ladies.",
        "LivesIn(x, y) ::: x lives in y.",
        "Learns(x, y) ::: x learns about y.",
        "Loves(x, y) ::: x loves y.",
        "WorksAs(x, y) ::: x works as y.",
        "Reunited(x, y) ::: x is reunited with y."
      ],
      "premises": [
        "Joins(Edward, King Charles II) ::: Edward eventually joins the army of the future King Charles II.",
        "Defeated(Royalist army, Battle of Worcester) ::: The Royalist army is defeated at the Battle of Worcester.",
        "Returns(Edward, New Forest) ::: Edward returns to the New Forest after the Royalist defeat at the Battle of Worcester.",
        "Awarded(Heatherstone, Arnwood estate) ::: Heatherstone has been awarded the old Arnwood estate.",
        "Flees(Edward, France) ::: Edward flees to France due to disillusionment.",
        "RaisedAsAristocraticLadies(Edward's sisters) ::: Edward's sisters are raised as aristocratic ladies while he is in exile.",
        "LivesIn(Edward's brother, New Forest) ::: Edward's brother continues to live in the New Forest.",
        "Learns(Edward, Loves(Patience, Edward)) ::: Edward learns that Patience does love him.",
        "Awarded(Heatherstone, Arnwood estate) → WorksAs(Edward, mercenary soldier) ::: Heatherstone acquired the Arnwood estate for Edward, but he works as a mercenary soldier in exile.",
        "Reunited(Patience, Edward) ::: They are reunited after the Restoration."
      ],
      "conclusions": [
        "None",
        "WorksAs(Edward, mercenary soldier)"
      ]
    }
  ],
  "9": [
    {
      "id": 9,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 0,
      "paragraph": " The story begins in 1647 when King Charles I has been defeated in the civil war and has fled from London towards the New Forest. Parliamentary soldiers have been sent to search the forest and decide to burn Arnwood, the house of Colonel Beverley, a Cavalier officer killed at the Battle of Naseby. The four orphan children of the house, Edward, Humphrey, Alice and Edith, are believed to have died in the flames. However, they are saved by Jacob Armitage, a local verderer, who hides them in his isolated cottage and disguises them as his grandchildren.",
      "question_template": "The four orphan children of the Arnwood house are [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Edward, Humphrey, Alice, and Edith"
      ],
      "predicates": [
        "Saved(x, y) ::: x saves y.",
        "Orphan(x) ::: x is an orphan child.",
        "DisguisedAs(x, y) ::: x is disguised as y.",
        "Hides(x, y) ::: x hides y.",
        "Fled(x, y) ::: x has fled from y.",
        "Burned(x) ::: x is burned.",
        "Killed(x) ::: x is killed.",
        "Sent(x, y) ::: x is sent to y.",
        "BelievedDead(x) ::: x is believed to have died."
      ],
      "premises": [
        "Fled(kingCharlesII, London) ::: King Charles I has fled from London.",
        "Sent(parliamentarySoldiers, NewForest) ::: Parliamentary soldiers have been sent to search the New Forest.",
        "Burned(arnwoodEstate) ::: Arnwood, the house of Colonel Beverley, is burned.",
        "∃x (Orphan(x) ∧ BelievedDead(x)) ::: The four orphan children are believed to have died in the flames.",
        "Saved(jacobArmitage, a_5) ::: Jacob Armitage saves Edward's sisters.",
        "Saved(jacobArmitage, a_6) ::: Jacob Armitage saves Edward's brother.",
        "Hides(jacobArmitage, a_0) ::: Jacob Armitage hides the orphan children in his isolated cottage.",
        "DisguisedAs(a_5, grandchildren) ::: Edward's sisters are disguised as Jacob Armitage's grandchildren.",
        "DisguisedAs(a_6, grandchildren) ::: Edward's brother is disguised as Jacob Armitage's grandchildren."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 9,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 2,
      "paragraph": "Edward eventually joins the army of the future King Charles II, but after the Royalist defeat at the Battle of Worcester, he returns to the New Forest where he learns that Heatherstone has been awarded the old Arnwood estate. Disillusioned by this, and by Patience's apparent rejection of his declarations of love, Edward flees to France. His sisters are sent away to be brought up as aristocratic ladies and his brother continues to live in the New Forest. Edward learns that Patience does, in fact, love him, and that Heatherstone had acquired the Arnwood estate for Edward, but he works as a mercenary soldier in exile until the Restoration when they are reunited.",
      "question_template": "The four orphan children of the Arnwood house are [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Edward",
        "His sisters",
        "His brother"
      ],
      "predicates": [
        "Joins(x, y) ::: x joins the army of y.",
        "Defeated(x, y) ::: x is defeated at y.",
        "Returns(x, y) ::: x returns to y.",
        "Awarded(x, y) ::: x is awarded y.",
        "Flees(x, y) ::: x flees to y.",
        "RaisedAsAristocraticLadies(x) ::: x is raised as aristocratic ladies.",
        "LivesIn(x, y) ::: x lives in y.",
        "Learns(x, y) ::: x learns about y.",
        "Loves(x, y) ::: x loves y.",
        "WorksAs(x, y) ::: x works as y.",
        "Reunited(x, y) ::: x is reunited with y."
      ],
      "premises": [
        "Joins(Edward, King Charles II) ::: Edward eventually joins the army of the future King Charles II.",
        "Defeated(Royalist army, Battle of Worcester) ::: The Royalist army is defeated at the Battle of Worcester.",
        "Returns(Edward, New Forest) ::: Edward returns to the New Forest after the Royalist defeat at the Battle of Worcester.",
        "Awarded(Heatherstone, Arnwood estate) ::: Heatherstone has been awarded the old Arnwood estate.",
        "Flees(Edward, France) ::: Edward flees to France due to disillusionment.",
        "RaisedAsAristocraticLadies(Edward's sisters) ::: Edward's sisters are raised as aristocratic ladies while he is in exile.",
        "LivesIn(Edward's brother, New Forest) ::: Edward's brother continues to live in the New Forest.",
        "Learns(Edward, Loves(Patience, Edward)) ::: Edward learns that Patience does love him.",
        "Awarded(Heatherstone, Arnwood estate) → WorksAs(Edward, mercenary soldier) ::: Heatherstone acquired the Arnwood estate for Edward, but he works as a mercenary soldier in exile.",
        "Reunited(Patience, Edward) ::: They are reunited after the Restoration."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "10": [
    {
      "id": 10,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 0,
      "paragraph": " The story begins in 1647 when King Charles I has been defeated in the civil war and has fled from London towards the New Forest. Parliamentary soldiers have been sent to search the forest and decide to burn Arnwood, the house of Colonel Beverley, a Cavalier officer killed at the Battle of Naseby. The four orphan children of the house, Edward, Humphrey, Alice and Edith, are believed to have died in the flames. However, they are saved by Jacob Armitage, a local verderer, who hides them in his isolated cottage and disguises them as his grandchildren.",
      "question_template": "[[CANDIDATE_ANSWER]] rescues the children from fire at Arnwood.",
      "candidate_answers": [
        "Jacob Armitage",
        "A local verderer",
        "Hides them in his isolated cottage and disguises them as his grandchildren"
      ],
      "predicates": [
        "Saved(x, y) ::: x saves y.",
        "Orphan(x) ::: x is an orphan child.",
        "DisguisedAs(x, y) ::: x is disguised as y.",
        "Hides(x, y) ::: x hides y.",
        "Fled(x, y) ::: x has fled from y.",
        "Burned(x) ::: x is burned.",
        "Killed(x) ::: x is killed.",
        "Sent(x, y) ::: x is sent to y.",
        "BelievedDead(x) ::: x is believed to have died."
      ],
      "premises": [
        "Fled(kingCharlesII, London) ::: King Charles I has fled from London.",
        "Sent(parliamentarySoldiers, NewForest) ::: Parliamentary soldiers have been sent to search the New Forest.",
        "Burned(arnwoodEstate) ::: Arnwood, the house of Colonel Beverley, is burned.",
        "∃x (Orphan(x) ∧ BelievedDead(x)) ::: The four orphan children are believed to have died in the flames.",
        "Saved(jacobArmitage, a_5) ::: Jacob Armitage saves Edward's sisters.",
        "Saved(jacobArmitage, a_6) ::: Jacob Armitage saves Edward's brother.",
        "Hides(jacobArmitage, a_0) ::: Jacob Armitage hides the orphan children in his isolated cottage.",
        "DisguisedAs(a_5, grandchildren) ::: Edward's sisters are disguised as Jacob Armitage's grandchildren.",
        "DisguisedAs(a_6, grandchildren) ::: Edward's brother is disguised as Jacob Armitage's grandchildren."
      ],
      "conclusions": [
        "None",
        "Saved(jacobArmitage, a_0)",
        "Hides(jacobArmitage, a_0) ∧ DisguisedAs(a_5, grandchildren) ∧ DisguisedAs(a_6, grandchildren) ∧ Saved(jacobArmitage, a_5) ∧ Saved(jacobArmitage, a_6)"
      ]
    }
  ],
  "12": [
    {
      "id": 12,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 1,
      "paragraph": "Under Armitage's guidance, the children adapt from an aristocratic lifestyle to that of simple foresters. After Armitage's death, Edward takes charge and the children develop and expand the farmstead, aided by the entrepreneurial spirit of the younger brother Humphrey. They are assisted by a gypsy boy, Pablo, who they rescue from a pitfall trap. A sub-plot involves a hostile Puritan gamekeeper named Corbould who seeks to harm Edward and his family. Edward also encounters the sympathetic Puritan, Heatherstone, placed in charge of the Royal land in the New Forest, and rescues his daughter, Patience, in a house-fire. Edward leaves the cottage and works as a secretary for Heatherstone, but Edward maintains the pretence that he is the grandson of Jacob Armitage.",
      "question_template": "Humphrey lives [[CANDIDATE_ANSWER]] after Edward leaves.",
      "candidate_answers": [
        "the farmstead"
      ],
      "predicates": [
        "GuidedBy(x, y) ::: x is guided by y.",
        "AdaptsToLifestyle(x, y) ::: x adapts to lifestyle y.",
        "Develops(x, y) ::: x develops y.",
        "AssistedBy(x, y) ::: x is assisted by y.",
        "Rescues(x, y) ::: x rescues y.",
        "WorksAs(x, y) ::: x works as y.",
        "MaintainsPretence(x, y) ::: x maintains the pretence of being y.",
        "HostileTowards(x, y) ::: x is hostile towards y.",
        "SympatheticTowards(x, y) ::: x is sympathetic towards y."
      ],
      "premises": [
        "GuidedBy(a_1, a_2) ∧ AdaptsToLifestyle(a_1, simple foresters) ∧ Develops(a_1, farmstead) ∧ AssistedBy(a_1, a_6) ∧ AssistedBy(a_1, a_7) ::: Under Armitage's guidance, Edward adapts from an aristocratic lifestyle to that of simple foresters and develops the farmstead, aided by the entrepreneurial spirit of his brother Humphrey and the gypsy boy Pablo.",
        "Rescues(a_1, a_7) ::: Edward rescues Pablo from a pitfall trap.",
        "HostileTowards(a_3, a_1) ::: Corbould is hostile towards Edward and his family.",
        "SympatheticTowards(a_3, a_1) ::: Heatherstone is sympathetic towards Edward.",
        "WorksAs(a_1, secretary) ::: Edward works as a secretary for Heatherstone.",
        "MaintainsPretence(a_1, grandson of Jacob Armitage) ::: Edward maintains the pretence that he is the grandson of Jacob Armitage."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 12,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 2,
      "paragraph": "Edward eventually joins the army of the future King Charles II, but after the Royalist defeat at the Battle of Worcester, he returns to the New Forest where he learns that Heatherstone has been awarded the old Arnwood estate. Disillusioned by this, and by Patience's apparent rejection of his declarations of love, Edward flees to France. His sisters are sent away to be brought up as aristocratic ladies and his brother continues to live in the New Forest. Edward learns that Patience does, in fact, love him, and that Heatherstone had acquired the Arnwood estate for Edward, but he works as a mercenary soldier in exile until the Restoration when they are reunited.",
      "question_template": "Humphrey lives [[CANDIDATE_ANSWER]] after Edward leaves.",
      "candidate_answers": [
        "His brother continues to live in the New Forest."
      ],
      "predicates": [
        "Joins(x, y) ::: x joins the army of y.",
        "Defeated(x, y) ::: x is defeated at y.",
        "Returns(x, y) ::: x returns to y.",
        "Awarded(x, y) ::: x is awarded y.",
        "Flees(x, y) ::: x flees to y.",
        "RaisedAsAristocraticLadies(x) ::: x is raised as aristocratic ladies.",
        "LivesIn(x, y) ::: x lives in y.",
        "Learns(x, y) ::: x learns about y.",
        "Loves(x, y) ::: x loves y.",
        "WorksAs(x, y) ::: x works as y.",
        "Reunited(x, y) ::: x is reunited with y."
      ],
      "premises": [
        "Joins(Edward, King Charles II) ::: Edward eventually joins the army of the future King Charles II.",
        "Defeated(Royalist army, Battle of Worcester) ::: The Royalist army is defeated at the Battle of Worcester.",
        "Returns(Edward, New Forest) ::: Edward returns to the New Forest after the Royalist defeat at the Battle of Worcester.",
        "Awarded(Heatherstone, Arnwood estate) ::: Heatherstone has been awarded the old Arnwood estate.",
        "Flees(Edward, France) ::: Edward flees to France due to disillusionment.",
        "RaisedAsAristocraticLadies(Edward's sisters) ::: Edward's sisters are raised as aristocratic ladies while he is in exile.",
        "LivesIn(Edward's brother, New Forest) ::: Edward's brother continues to live in the New Forest.",
        "Learns(Edward, Loves(Patience, Edward)) ::: Edward learns that Patience does love him.",
        "Awarded(Heatherstone, Arnwood estate) → WorksAs(Edward, mercenary soldier) ::: Heatherstone acquired the Arnwood estate for Edward, but he works as a mercenary soldier in exile.",
        "Reunited(Patience, Edward) ::: They are reunited after the Restoration."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "13": [
    {
      "id": 13,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 0,
      "paragraph": " The story begins in 1647 when King Charles I has been defeated in the civil war and has fled from London towards the New Forest. Parliamentary soldiers have been sent to search the forest and decide to burn Arnwood, the house of Colonel Beverley, a Cavalier officer killed at the Battle of Naseby. The four orphan children of the house, Edward, Humphrey, Alice and Edith, are believed to have died in the flames. However, they are saved by Jacob Armitage, a local verderer, who hides them in his isolated cottage and disguises them as his grandchildren.",
      "question_template": "[[CANDIDATE_ANSWER]] raises Edward's sisters Alice and Edith after he leaves.",
      "candidate_answers": [
        "Jacob Armitage",
        "Hides them in his isolated cottage and disguises them as his grandchildren"
      ],
      "predicates": [
        "Saved(x, y) ::: x saves y.",
        "Orphan(x) ::: x is an orphan child.",
        "DisguisedAs(x, y) ::: x is disguised as y.",
        "Hides(x, y) ::: x hides y.",
        "Fled(x, y) ::: x has fled from y.",
        "Burned(x) ::: x is burned.",
        "Killed(x) ::: x is killed.",
        "Sent(x, y) ::: x is sent to y.",
        "BelievedDead(x) ::: x is believed to have died."
      ],
      "premises": [
        "Fled(kingCharlesII, London) ::: King Charles I has fled from London.",
        "Sent(parliamentarySoldiers, NewForest) ::: Parliamentary soldiers have been sent to search the New Forest.",
        "Burned(arnwoodEstate) ::: Arnwood, the house of Colonel Beverley, is burned.",
        "∃x (Orphan(x) ∧ BelievedDead(x)) ::: The four orphan children are believed to have died in the flames.",
        "Saved(jacobArmitage, a_5) ::: Jacob Armitage saves Edward's sisters.",
        "Saved(jacobArmitage, a_6) ::: Jacob Armitage saves Edward's brother.",
        "Hides(jacobArmitage, a_0) ::: Jacob Armitage hides the orphan children in his isolated cottage.",
        "DisguisedAs(a_5, grandchildren) ::: Edward's sisters are disguised as Jacob Armitage's grandchildren.",
        "DisguisedAs(a_6, grandchildren) ::: Edward's brother is disguised as Jacob Armitage's grandchildren."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "14": [
    {
      "id": 14,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 2,
      "paragraph": "Edward eventually joins the army of the future King Charles II, but after the Royalist defeat at the Battle of Worcester, he returns to the New Forest where he learns that Heatherstone has been awarded the old Arnwood estate. Disillusioned by this, and by Patience's apparent rejection of his declarations of love, Edward flees to France. His sisters are sent away to be brought up as aristocratic ladies and his brother continues to live in the New Forest. Edward learns that Patience does, in fact, love him, and that Heatherstone had acquired the Arnwood estate for Edward, but he works as a mercenary soldier in exile until the Restoration when they are reunited.",
      "question_template": "The name of the antagonist Puritan gamekeeper is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Heatherstone"
      ],
      "predicates": [
        "Joins(x, y) ::: x joins the army of y.",
        "Defeated(x, y) ::: x is defeated at y.",
        "Returns(x, y) ::: x returns to y.",
        "Awarded(x, y) ::: x is awarded y.",
        "Flees(x, y) ::: x flees to y.",
        "RaisedAsAristocraticLadies(x) ::: x is raised as aristocratic ladies.",
        "LivesIn(x, y) ::: x lives in y.",
        "Learns(x, y) ::: x learns about y.",
        "Loves(x, y) ::: x loves y.",
        "WorksAs(x, y) ::: x works as y.",
        "Reunited(x, y) ::: x is reunited with y."
      ],
      "premises": [
        "Joins(Edward, King Charles II) ::: Edward eventually joins the army of the future King Charles II.",
        "Defeated(Royalist army, Battle of Worcester) ::: The Royalist army is defeated at the Battle of Worcester.",
        "Returns(Edward, New Forest) ::: Edward returns to the New Forest after the Royalist defeat at the Battle of Worcester.",
        "Awarded(Heatherstone, Arnwood estate) ::: Heatherstone has been awarded the old Arnwood estate.",
        "Flees(Edward, France) ::: Edward flees to France due to disillusionment.",
        "RaisedAsAristocraticLadies(Edward's sisters) ::: Edward's sisters are raised as aristocratic ladies while he is in exile.",
        "LivesIn(Edward's brother, New Forest) ::: Edward's brother continues to live in the New Forest.",
        "Learns(Edward, Loves(Patience, Edward)) ::: Edward learns that Patience does love him.",
        "Awarded(Heatherstone, Arnwood estate) → WorksAs(Edward, mercenary soldier) ::: Heatherstone acquired the Arnwood estate for Edward, but he works as a mercenary soldier in exile.",
        "Reunited(Patience, Edward) ::: They are reunited after the Restoration."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "16": [
    {
      "id": 16,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 2,
      "paragraph": "Edward eventually joins the army of the future King Charles II, but after the Royalist defeat at the Battle of Worcester, he returns to the New Forest where he learns that Heatherstone has been awarded the old Arnwood estate. Disillusioned by this, and by Patience's apparent rejection of his declarations of love, Edward flees to France. His sisters are sent away to be brought up as aristocratic ladies and his brother continues to live in the New Forest. Edward learns that Patience does, in fact, love him, and that Heatherstone had acquired the Arnwood estate for Edward, but he works as a mercenary soldier in exile until the Restoration when they are reunited.",
      "question_template": "[[CANDIDATE_ANSWER]] is believed to have happened to Edward, Humphrey, Alice, and Edith.",
      "candidate_answers": [
        "- Edward eventually joins the army of the future King Charles II",
        "- Edward flees to France",
        "- His sisters are sent away to be brought up as aristocratic ladies",
        "- His brother continues to live in the New Forest",
        "- Edward learns that Patience does, in fact, love him",
        "- Edward works as a mercenary soldier in exile until the Restoration when they are reunited"
      ],
      "predicates": [
        "Joins(x, y) ::: x joins the army of y.",
        "Defeated(x, y) ::: x is defeated at y.",
        "Returns(x, y) ::: x returns to y.",
        "Awarded(x, y) ::: x is awarded y.",
        "Flees(x, y) ::: x flees to y.",
        "RaisedAsAristocraticLadies(x) ::: x is raised as aristocratic ladies.",
        "LivesIn(x, y) ::: x lives in y.",
        "Learns(x, y) ::: x learns about y.",
        "Loves(x, y) ::: x loves y.",
        "WorksAs(x, y) ::: x works as y.",
        "Reunited(x, y) ::: x is reunited with y."
      ],
      "premises": [
        "Joins(Edward, King Charles II) ::: Edward eventually joins the army of the future King Charles II.",
        "Defeated(Royalist army, Battle of Worcester) ::: The Royalist army is defeated at the Battle of Worcester.",
        "Returns(Edward, New Forest) ::: Edward returns to the New Forest after the Royalist defeat at the Battle of Worcester.",
        "Awarded(Heatherstone, Arnwood estate) ::: Heatherstone has been awarded the old Arnwood estate.",
        "Flees(Edward, France) ::: Edward flees to France due to disillusionment.",
        "RaisedAsAristocraticLadies(Edward's sisters) ::: Edward's sisters are raised as aristocratic ladies while he is in exile.",
        "LivesIn(Edward's brother, New Forest) ::: Edward's brother continues to live in the New Forest.",
        "Learns(Edward, Loves(Patience, Edward)) ::: Edward learns that Patience does love him.",
        "Awarded(Heatherstone, Arnwood estate) → WorksAs(Edward, mercenary soldier) ::: Heatherstone acquired the Arnwood estate for Edward, but he works as a mercenary soldier in exile.",
        "Reunited(Patience, Edward) ::: They are reunited after the Restoration."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "17": [
    {
      "id": 17,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 0,
      "paragraph": " The story begins in 1647 when King Charles I has been defeated in the civil war and has fled from London towards the New Forest. Parliamentary soldiers have been sent to search the forest and decide to burn Arnwood, the house of Colonel Beverley, a Cavalier officer killed at the Battle of Naseby. The four orphan children of the house, Edward, Humphrey, Alice and Edith, are believed to have died in the flames. However, they are saved by Jacob Armitage, a local verderer, who hides them in his isolated cottage and disguises them as his grandchildren.",
      "question_template": "Edward loves [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Alice",
        "The four orphan children of the house, Edward, Humphrey, Alice and Edith"
      ],
      "predicates": [
        "Saved(x, y) ::: x saves y.",
        "Orphan(x) ::: x is an orphan child.",
        "DisguisedAs(x, y) ::: x is disguised as y.",
        "Hides(x, y) ::: x hides y.",
        "Fled(x, y) ::: x has fled from y.",
        "Burned(x) ::: x is burned.",
        "Killed(x) ::: x is killed.",
        "Sent(x, y) ::: x is sent to y.",
        "BelievedDead(x) ::: x is believed to have died."
      ],
      "premises": [
        "Fled(kingCharlesII, London) ::: King Charles I has fled from London.",
        "Sent(parliamentarySoldiers, NewForest) ::: Parliamentary soldiers have been sent to search the New Forest.",
        "Burned(arnwoodEstate) ::: Arnwood, the house of Colonel Beverley, is burned.",
        "∃x (Orphan(x) ∧ BelievedDead(x)) ::: The four orphan children are believed to have died in the flames.",
        "Saved(jacobArmitage, a_5) ::: Jacob Armitage saves Edward's sisters.",
        "Saved(jacobArmitage, a_6) ::: Jacob Armitage saves Edward's brother.",
        "Hides(jacobArmitage, a_0) ::: Jacob Armitage hides the orphan children in his isolated cottage.",
        "DisguisedAs(a_5, grandchildren) ::: Edward's sisters are disguised as Jacob Armitage's grandchildren.",
        "DisguisedAs(a_6, grandchildren) ::: Edward's brother is disguised as Jacob Armitage's grandchildren."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "18": [
    {
      "id": 18,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 0,
      "paragraph": " The story begins in 1647 when King Charles I has been defeated in the civil war and has fled from London towards the New Forest. Parliamentary soldiers have been sent to search the forest and decide to burn Arnwood, the house of Colonel Beverley, a Cavalier officer killed at the Battle of Naseby. The four orphan children of the house, Edward, Humphrey, Alice and Edith, are believed to have died in the flames. However, they are saved by Jacob Armitage, a local verderer, who hides them in his isolated cottage and disguises them as his grandchildren.",
      "question_template": "Edward feels betrayed by [[CANDIDATE_ANSWER]] and the reason is...",
      "candidate_answers": [
        "Edward feels betrayed by his father, Colonel Beverley, for being a Cavalier officer killed at the Battle of Naseby."
      ],
      "predicates": [
        "Saved(x, y) ::: x saves y.",
        "Orphan(x) ::: x is an orphan child.",
        "DisguisedAs(x, y) ::: x is disguised as y.",
        "Hides(x, y) ::: x hides y.",
        "Fled(x, y) ::: x has fled from y.",
        "Burned(x) ::: x is burned.",
        "Killed(x) ::: x is killed.",
        "Sent(x, y) ::: x is sent to y.",
        "BelievedDead(x) ::: x is believed to have died."
      ],
      "premises": [
        "Fled(kingCharlesII, London) ::: King Charles I has fled from London.",
        "Sent(parliamentarySoldiers, NewForest) ::: Parliamentary soldiers have been sent to search the New Forest.",
        "Burned(arnwoodEstate) ::: Arnwood, the house of Colonel Beverley, is burned.",
        "∃x (Orphan(x) ∧ BelievedDead(x)) ::: The four orphan children are believed to have died in the flames.",
        "Saved(jacobArmitage, a_5) ::: Jacob Armitage saves Edward's sisters.",
        "Saved(jacobArmitage, a_6) ::: Jacob Armitage saves Edward's brother.",
        "Hides(jacobArmitage, a_0) ::: Jacob Armitage hides the orphan children in his isolated cottage.",
        "DisguisedAs(a_5, grandchildren) ::: Edward's sisters are disguised as Jacob Armitage's grandchildren.",
        "DisguisedAs(a_6, grandchildren) ::: Edward's brother is disguised as Jacob Armitage's grandchildren."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 18,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 1,
      "paragraph": "Under Armitage's guidance, the children adapt from an aristocratic lifestyle to that of simple foresters. After Armitage's death, Edward takes charge and the children develop and expand the farmstead, aided by the entrepreneurial spirit of the younger brother Humphrey. They are assisted by a gypsy boy, Pablo, who they rescue from a pitfall trap. A sub-plot involves a hostile Puritan gamekeeper named Corbould who seeks to harm Edward and his family. Edward also encounters the sympathetic Puritan, Heatherstone, placed in charge of the Royal land in the New Forest, and rescues his daughter, Patience, in a house-fire. Edward leaves the cottage and works as a secretary for Heatherstone, but Edward maintains the pretence that he is the grandson of Jacob Armitage.",
      "question_template": "Edward feels betrayed by [[CANDIDATE_ANSWER]] and the reason is...",
      "candidate_answers": [
        "- A hostile Puritan gamekeeper named Corbould who seeks to harm Edward and his family",
        "- Edward maintains the pretence that he is the grandson of Jacob Armitage"
      ],
      "predicates": [
        "GuidedBy(x, y) ::: x is guided by y.",
        "AdaptsToLifestyle(x, y) ::: x adapts to lifestyle y.",
        "Develops(x, y) ::: x develops y.",
        "AssistedBy(x, y) ::: x is assisted by y.",
        "Rescues(x, y) ::: x rescues y.",
        "WorksAs(x, y) ::: x works as y.",
        "MaintainsPretence(x, y) ::: x maintains the pretence of being y.",
        "HostileTowards(x, y) ::: x is hostile towards y.",
        "SympatheticTowards(x, y) ::: x is sympathetic towards y."
      ],
      "premises": [
        "GuidedBy(a_1, a_2) ∧ AdaptsToLifestyle(a_1, simple foresters) ∧ Develops(a_1, farmstead) ∧ AssistedBy(a_1, a_6) ∧ AssistedBy(a_1, a_7) ::: Under Armitage's guidance, Edward adapts from an aristocratic lifestyle to that of simple foresters and develops the farmstead, aided by the entrepreneurial spirit of his brother Humphrey and the gypsy boy Pablo.",
        "Rescues(a_1, a_7) ::: Edward rescues Pablo from a pitfall trap.",
        "HostileTowards(a_3, a_1) ::: Corbould is hostile towards Edward and his family.",
        "SympatheticTowards(a_3, a_1) ::: Heatherstone is sympathetic towards Edward.",
        "WorksAs(a_1, secretary) ::: Edward works as a secretary for Heatherstone.",
        "MaintainsPretence(a_1, grandson of Jacob Armitage) ::: Edward maintains the pretence that he is the grandson of Jacob Armitage."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 18,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 2,
      "paragraph": "Edward eventually joins the army of the future King Charles II, but after the Royalist defeat at the Battle of Worcester, he returns to the New Forest where he learns that Heatherstone has been awarded the old Arnwood estate. Disillusioned by this, and by Patience's apparent rejection of his declarations of love, Edward flees to France. His sisters are sent away to be brought up as aristocratic ladies and his brother continues to live in the New Forest. Edward learns that Patience does, in fact, love him, and that Heatherstone had acquired the Arnwood estate for Edward, but he works as a mercenary soldier in exile until the Restoration when they are reunited.",
      "question_template": "Edward feels betrayed by [[CANDIDATE_ANSWER]] and the reason is...",
      "candidate_answers": [
        "Patience's apparent rejection of his declarations of love",
        "Heatherstone has been awarded the old Arnwood estate"
      ],
      "predicates": [
        "Joins(x, y) ::: x joins the army of y.",
        "Defeated(x, y) ::: x is defeated at y.",
        "Returns(x, y) ::: x returns to y.",
        "Awarded(x, y) ::: x is awarded y.",
        "Flees(x, y) ::: x flees to y.",
        "RaisedAsAristocraticLadies(x) ::: x is raised as aristocratic ladies.",
        "LivesIn(x, y) ::: x lives in y.",
        "Learns(x, y) ::: x learns about y.",
        "Loves(x, y) ::: x loves y.",
        "WorksAs(x, y) ::: x works as y.",
        "Reunited(x, y) ::: x is reunited with y."
      ],
      "premises": [
        "Joins(Edward, King Charles II) ::: Edward eventually joins the army of the future King Charles II.",
        "Defeated(Royalist army, Battle of Worcester) ::: The Royalist army is defeated at the Battle of Worcester.",
        "Returns(Edward, New Forest) ::: Edward returns to the New Forest after the Royalist defeat at the Battle of Worcester.",
        "Awarded(Heatherstone, Arnwood estate) ::: Heatherstone has been awarded the old Arnwood estate.",
        "Flees(Edward, France) ::: Edward flees to France due to disillusionment.",
        "RaisedAsAristocraticLadies(Edward's sisters) ::: Edward's sisters are raised as aristocratic ladies while he is in exile.",
        "LivesIn(Edward's brother, New Forest) ::: Edward's brother continues to live in the New Forest.",
        "Learns(Edward, Loves(Patience, Edward)) ::: Edward learns that Patience does love him.",
        "Awarded(Heatherstone, Arnwood estate) → WorksAs(Edward, mercenary soldier) ::: Heatherstone acquired the Arnwood estate for Edward, but he works as a mercenary soldier in exile.",
        "Reunited(Patience, Edward) ::: They are reunited after the Restoration."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "19": [
    {
      "id": 19,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 0,
      "paragraph": " The story begins in 1647 when King Charles I has been defeated in the civil war and has fled from London towards the New Forest. Parliamentary soldiers have been sent to search the forest and decide to burn Arnwood, the house of Colonel Beverley, a Cavalier officer killed at the Battle of Naseby. The four orphan children of the house, Edward, Humphrey, Alice and Edith, are believed to have died in the flames. However, they are saved by Jacob Armitage, a local verderer, who hides them in his isolated cottage and disguises them as his grandchildren.",
      "question_template": "Jacob Armitage hides the four orphan children in [[CANDIDATE_ANSWER]] when he saves them from the fire.",
      "candidate_answers": [
        "his isolated cottage"
      ],
      "predicates": [
        "Saved(x, y) ::: x saves y.",
        "Orphan(x) ::: x is an orphan child.",
        "DisguisedAs(x, y) ::: x is disguised as y.",
        "Hides(x, y) ::: x hides y.",
        "Fled(x, y) ::: x has fled from y.",
        "Burned(x) ::: x is burned.",
        "Killed(x) ::: x is killed.",
        "Sent(x, y) ::: x is sent to y.",
        "BelievedDead(x) ::: x is believed to have died."
      ],
      "premises": [
        "Fled(kingCharlesII, London) ::: King Charles I has fled from London.",
        "Sent(parliamentarySoldiers, NewForest) ::: Parliamentary soldiers have been sent to search the New Forest.",
        "Burned(arnwoodEstate) ::: Arnwood, the house of Colonel Beverley, is burned.",
        "∃x (Orphan(x) ∧ BelievedDead(x)) ::: The four orphan children are believed to have died in the flames.",
        "Saved(jacobArmitage, a_5) ::: Jacob Armitage saves Edward's sisters.",
        "Saved(jacobArmitage, a_6) ::: Jacob Armitage saves Edward's brother.",
        "Hides(jacobArmitage, a_0) ::: Jacob Armitage hides the orphan children in his isolated cottage.",
        "DisguisedAs(a_5, grandchildren) ::: Edward's sisters are disguised as Jacob Armitage's grandchildren.",
        "DisguisedAs(a_6, grandchildren) ::: Edward's brother is disguised as Jacob Armitage's grandchildren."
      ],
      "conclusions": [
        "Hides(jacobArmitage, a_0) ∧ Saved(jacobArmitage, a_5) ∧ Saved(jacobArmitage, a_6)"
      ]
    }
  ],
  "20": [
    {
      "id": 20,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 0,
      "paragraph": " The story begins in 1647 when King Charles I has been defeated in the civil war and has fled from London towards the New Forest. Parliamentary soldiers have been sent to search the forest and decide to burn Arnwood, the house of Colonel Beverley, a Cavalier officer killed at the Battle of Naseby. The four orphan children of the house, Edward, Humphrey, Alice and Edith, are believed to have died in the flames. However, they are saved by Jacob Armitage, a local verderer, who hides them in his isolated cottage and disguises them as his grandchildren.",
      "question_template": "Jacob Armitage disguises the children as [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "his grandchildren"
      ],
      "predicates": [
        "Saved(x, y) ::: x saves y.",
        "Orphan(x) ::: x is an orphan child.",
        "DisguisedAs(x, y) ::: x is disguised as y.",
        "Hides(x, y) ::: x hides y.",
        "Fled(x, y) ::: x has fled from y.",
        "Burned(x) ::: x is burned.",
        "Killed(x) ::: x is killed.",
        "Sent(x, y) ::: x is sent to y.",
        "BelievedDead(x) ::: x is believed to have died."
      ],
      "premises": [
        "Fled(kingCharlesII, London) ::: King Charles I has fled from London.",
        "Sent(parliamentarySoldiers, NewForest) ::: Parliamentary soldiers have been sent to search the New Forest.",
        "Burned(arnwoodEstate) ::: Arnwood, the house of Colonel Beverley, is burned.",
        "∃x (Orphan(x) ∧ BelievedDead(x)) ::: The four orphan children are believed to have died in the flames.",
        "Saved(jacobArmitage, a_5) ::: Jacob Armitage saves Edward's sisters.",
        "Saved(jacobArmitage, a_6) ::: Jacob Armitage saves Edward's brother.",
        "Hides(jacobArmitage, a_0) ::: Jacob Armitage hides the orphan children in his isolated cottage.",
        "DisguisedAs(a_5, grandchildren) ::: Edward's sisters are disguised as Jacob Armitage's grandchildren.",
        "DisguisedAs(a_6, grandchildren) ::: Edward's brother is disguised as Jacob Armitage's grandchildren."
      ],
      "conclusions": [
        "DisguisedAs(a_5, grandchildren) ∧ DisguisedAs(a_6, grandchildren)"
      ]
    }
  ],
  "21": [
    {
      "id": 21,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 2,
      "paragraph": "Edward eventually joins the army of the future King Charles II, but after the Royalist defeat at the Battle of Worcester, he returns to the New Forest where he learns that Heatherstone has been awarded the old Arnwood estate. Disillusioned by this, and by Patience's apparent rejection of his declarations of love, Edward flees to France. His sisters are sent away to be brought up as aristocratic ladies and his brother continues to live in the New Forest. Edward learns that Patience does, in fact, love him, and that Heatherstone had acquired the Arnwood estate for Edward, but he works as a mercenary soldier in exile until the Restoration when they are reunited.",
      "question_template": "[[CANDIDATE_ANSWER]] takes charge of the children after Armitage's death.",
      "candidate_answers": [
        "His sisters are sent away to be brought up as aristocratic ladies",
        "His brother continues to live in the New Forest"
      ],
      "predicates": [
        "Joins(x, y) ::: x joins the army of y.",
        "Defeated(x, y) ::: x is defeated at y.",
        "Returns(x, y) ::: x returns to y.",
        "Awarded(x, y) ::: x is awarded y.",
        "Flees(x, y) ::: x flees to y.",
        "RaisedAsAristocraticLadies(x) ::: x is raised as aristocratic ladies.",
        "LivesIn(x, y) ::: x lives in y.",
        "Learns(x, y) ::: x learns about y.",
        "Loves(x, y) ::: x loves y.",
        "WorksAs(x, y) ::: x works as y.",
        "Reunited(x, y) ::: x is reunited with y."
      ],
      "premises": [
        "Joins(Edward, King Charles II) ::: Edward eventually joins the army of the future King Charles II.",
        "Defeated(Royalist army, Battle of Worcester) ::: The Royalist army is defeated at the Battle of Worcester.",
        "Returns(Edward, New Forest) ::: Edward returns to the New Forest after the Royalist defeat at the Battle of Worcester.",
        "Awarded(Heatherstone, Arnwood estate) ::: Heatherstone has been awarded the old Arnwood estate.",
        "Flees(Edward, France) ::: Edward flees to France due to disillusionment.",
        "RaisedAsAristocraticLadies(Edward's sisters) ::: Edward's sisters are raised as aristocratic ladies while he is in exile.",
        "LivesIn(Edward's brother, New Forest) ::: Edward's brother continues to live in the New Forest.",
        "Learns(Edward, Loves(Patience, Edward)) ::: Edward learns that Patience does love him.",
        "Awarded(Heatherstone, Arnwood estate) → WorksAs(Edward, mercenary soldier) ::: Heatherstone acquired the Arnwood estate for Edward, but he works as a mercenary soldier in exile.",
        "Reunited(Patience, Edward) ::: They are reunited after the Restoration."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "25": [
    {
      "id": 25,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 0,
      "paragraph": " The story begins in 1647 when King Charles I has been defeated in the civil war and has fled from London towards the New Forest. Parliamentary soldiers have been sent to search the forest and decide to burn Arnwood, the house of Colonel Beverley, a Cavalier officer killed at the Battle of Naseby. The four orphan children of the house, Edward, Humphrey, Alice and Edith, are believed to have died in the flames. However, they are saved by Jacob Armitage, a local verderer, who hides them in his isolated cottage and disguises them as his grandchildren.",
      "question_template": "Edward flees to France due to [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- The four orphan children of the house, Edward, Humphrey, Alice and Edith, are believed to have died in the flames.",
        "- They are saved by Jacob Armitage, a local verderer, who hides them in his isolated cottage and disguises them as his grandchildren."
      ],
      "predicates": [
        "Saved(x, y) ::: x saves y.",
        "Orphan(x) ::: x is an orphan child.",
        "DisguisedAs(x, y) ::: x is disguised as y.",
        "Hides(x, y) ::: x hides y.",
        "Fled(x, y) ::: x has fled from y.",
        "Burned(x) ::: x is burned.",
        "Killed(x) ::: x is killed.",
        "Sent(x, y) ::: x is sent to y.",
        "BelievedDead(x) ::: x is believed to have died."
      ],
      "premises": [
        "Fled(kingCharlesII, London) ::: King Charles I has fled from London.",
        "Sent(parliamentarySoldiers, NewForest) ::: Parliamentary soldiers have been sent to search the New Forest.",
        "Burned(arnwoodEstate) ::: Arnwood, the house of Colonel Beverley, is burned.",
        "∃x (Orphan(x) ∧ BelievedDead(x)) ::: The four orphan children are believed to have died in the flames.",
        "Saved(jacobArmitage, a_5) ::: Jacob Armitage saves Edward's sisters.",
        "Saved(jacobArmitage, a_6) ::: Jacob Armitage saves Edward's brother.",
        "Hides(jacobArmitage, a_0) ::: Jacob Armitage hides the orphan children in his isolated cottage.",
        "DisguisedAs(a_5, grandchildren) ::: Edward's sisters are disguised as Jacob Armitage's grandchildren.",
        "DisguisedAs(a_6, grandchildren) ::: Edward's brother is disguised as Jacob Armitage's grandchildren."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 25,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 1,
      "paragraph": "Under Armitage's guidance, the children adapt from an aristocratic lifestyle to that of simple foresters. After Armitage's death, Edward takes charge and the children develop and expand the farmstead, aided by the entrepreneurial spirit of the younger brother Humphrey. They are assisted by a gypsy boy, Pablo, who they rescue from a pitfall trap. A sub-plot involves a hostile Puritan gamekeeper named Corbould who seeks to harm Edward and his family. Edward also encounters the sympathetic Puritan, Heatherstone, placed in charge of the Royal land in the New Forest, and rescues his daughter, Patience, in a house-fire. Edward leaves the cottage and works as a secretary for Heatherstone, but Edward maintains the pretence that he is the grandson of Jacob Armitage.",
      "question_template": "Edward flees to France due to [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "1. The hostile Puritan gamekeeper named Corbould who seeks to harm Edward and his family.",
        "2. The house-fire involving Heatherstone's daughter, Patience."
      ],
      "predicates": [
        "GuidedBy(x, y) ::: x is guided by y.",
        "AdaptsToLifestyle(x, y) ::: x adapts to lifestyle y.",
        "Develops(x, y) ::: x develops y.",
        "AssistedBy(x, y) ::: x is assisted by y.",
        "Rescues(x, y) ::: x rescues y.",
        "WorksAs(x, y) ::: x works as y.",
        "MaintainsPretence(x, y) ::: x maintains the pretence of being y.",
        "HostileTowards(x, y) ::: x is hostile towards y.",
        "SympatheticTowards(x, y) ::: x is sympathetic towards y."
      ],
      "premises": [
        "GuidedBy(a_1, a_2) ∧ AdaptsToLifestyle(a_1, simple foresters) ∧ Develops(a_1, farmstead) ∧ AssistedBy(a_1, a_6) ∧ AssistedBy(a_1, a_7) ::: Under Armitage's guidance, Edward adapts from an aristocratic lifestyle to that of simple foresters and develops the farmstead, aided by the entrepreneurial spirit of his brother Humphrey and the gypsy boy Pablo.",
        "Rescues(a_1, a_7) ::: Edward rescues Pablo from a pitfall trap.",
        "HostileTowards(a_3, a_1) ::: Corbould is hostile towards Edward and his family.",
        "SympatheticTowards(a_3, a_1) ::: Heatherstone is sympathetic towards Edward.",
        "WorksAs(a_1, secretary) ::: Edward works as a secretary for Heatherstone.",
        "MaintainsPretence(a_1, grandson of Jacob Armitage) ::: Edward maintains the pretence that he is the grandson of Jacob Armitage."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 25,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 2,
      "paragraph": "Edward eventually joins the army of the future King Charles II, but after the Royalist defeat at the Battle of Worcester, he returns to the New Forest where he learns that Heatherstone has been awarded the old Arnwood estate. Disillusioned by this, and by Patience's apparent rejection of his declarations of love, Edward flees to France. His sisters are sent away to be brought up as aristocratic ladies and his brother continues to live in the New Forest. Edward learns that Patience does, in fact, love him, and that Heatherstone had acquired the Arnwood estate for Edward, but he works as a mercenary soldier in exile until the Restoration when they are reunited.",
      "question_template": "Edward flees to France due to [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "1. Disillusioned by this",
        "2. Patience's apparent rejection of his declarations of love"
      ],
      "predicates": [
        "Joins(x, y) ::: x joins the army of y.",
        "Defeated(x, y) ::: x is defeated at y.",
        "Returns(x, y) ::: x returns to y.",
        "Awarded(x, y) ::: x is awarded y.",
        "Flees(x, y) ::: x flees to y.",
        "RaisedAsAristocraticLadies(x) ::: x is raised as aristocratic ladies.",
        "LivesIn(x, y) ::: x lives in y.",
        "Learns(x, y) ::: x learns about y.",
        "Loves(x, y) ::: x loves y.",
        "WorksAs(x, y) ::: x works as y.",
        "Reunited(x, y) ::: x is reunited with y."
      ],
      "premises": [
        "Joins(Edward, King Charles II) ::: Edward eventually joins the army of the future King Charles II.",
        "Defeated(Royalist army, Battle of Worcester) ::: The Royalist army is defeated at the Battle of Worcester.",
        "Returns(Edward, New Forest) ::: Edward returns to the New Forest after the Royalist defeat at the Battle of Worcester.",
        "Awarded(Heatherstone, Arnwood estate) ::: Heatherstone has been awarded the old Arnwood estate.",
        "Flees(Edward, France) ::: Edward flees to France due to disillusionment.",
        "RaisedAsAristocraticLadies(Edward's sisters) ::: Edward's sisters are raised as aristocratic ladies while he is in exile.",
        "LivesIn(Edward's brother, New Forest) ::: Edward's brother continues to live in the New Forest.",
        "Learns(Edward, Loves(Patience, Edward)) ::: Edward learns that Patience does love him.",
        "Awarded(Heatherstone, Arnwood estate) → WorksAs(Edward, mercenary soldier) ::: Heatherstone acquired the Arnwood estate for Edward, but he works as a mercenary soldier in exile.",
        "Reunited(Patience, Edward) ::: They are reunited after the Restoration."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "26": [
    {
      "id": 26,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 1,
      "paragraph": "Under Armitage's guidance, the children adapt from an aristocratic lifestyle to that of simple foresters. After Armitage's death, Edward takes charge and the children develop and expand the farmstead, aided by the entrepreneurial spirit of the younger brother Humphrey. They are assisted by a gypsy boy, Pablo, who they rescue from a pitfall trap. A sub-plot involves a hostile Puritan gamekeeper named Corbould who seeks to harm Edward and his family. Edward also encounters the sympathetic Puritan, Heatherstone, placed in charge of the Royal land in the New Forest, and rescues his daughter, Patience, in a house-fire. Edward leaves the cottage and works as a secretary for Heatherstone, but Edward maintains the pretence that he is the grandson of Jacob Armitage.",
      "question_template": "Heatherstone acquired the Arnwood estate because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "No relevant information found in the paragraph."
      ],
      "predicates": [
        "GuidedBy(x, y) ::: x is guided by y.",
        "AdaptsToLifestyle(x, y) ::: x adapts to lifestyle y.",
        "Develops(x, y) ::: x develops y.",
        "AssistedBy(x, y) ::: x is assisted by y.",
        "Rescues(x, y) ::: x rescues y.",
        "WorksAs(x, y) ::: x works as y.",
        "MaintainsPretence(x, y) ::: x maintains the pretence of being y.",
        "HostileTowards(x, y) ::: x is hostile towards y.",
        "SympatheticTowards(x, y) ::: x is sympathetic towards y."
      ],
      "premises": [
        "GuidedBy(a_1, a_2) ∧ AdaptsToLifestyle(a_1, simple foresters) ∧ Develops(a_1, farmstead) ∧ AssistedBy(a_1, a_6) ∧ AssistedBy(a_1, a_7) ::: Under Armitage's guidance, Edward adapts from an aristocratic lifestyle to that of simple foresters and develops the farmstead, aided by the entrepreneurial spirit of his brother Humphrey and the gypsy boy Pablo.",
        "Rescues(a_1, a_7) ::: Edward rescues Pablo from a pitfall trap.",
        "HostileTowards(a_3, a_1) ::: Corbould is hostile towards Edward and his family.",
        "SympatheticTowards(a_3, a_1) ::: Heatherstone is sympathetic towards Edward.",
        "WorksAs(a_1, secretary) ::: Edward works as a secretary for Heatherstone.",
        "MaintainsPretence(a_1, grandson of Jacob Armitage) ::: Edward maintains the pretence that he is the grandson of Jacob Armitage."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "27": [
    {
      "id": 27,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 2,
      "paragraph": "Edward eventually joins the army of the future King Charles II, but after the Royalist defeat at the Battle of Worcester, he returns to the New Forest where he learns that Heatherstone has been awarded the old Arnwood estate. Disillusioned by this, and by Patience's apparent rejection of his declarations of love, Edward flees to France. His sisters are sent away to be brought up as aristocratic ladies and his brother continues to live in the New Forest. Edward learns that Patience does, in fact, love him, and that Heatherstone had acquired the Arnwood estate for Edward, but he works as a mercenary soldier in exile until the Restoration when they are reunited.",
      "question_template": "Edward did [[CANDIDATE_ANSWER]] for Heatherstone.",
      "candidate_answers": [
        "- Awarded the old Arnwood estate",
        "- Works as a mercenary soldier in exile"
      ],
      "predicates": [
        "Joins(x, y) ::: x joins the army of y.",
        "Defeated(x, y) ::: x is defeated at y.",
        "Returns(x, y) ::: x returns to y.",
        "Awarded(x, y) ::: x is awarded y.",
        "Flees(x, y) ::: x flees to y.",
        "RaisedAsAristocraticLadies(x) ::: x is raised as aristocratic ladies.",
        "LivesIn(x, y) ::: x lives in y.",
        "Learns(x, y) ::: x learns about y.",
        "Loves(x, y) ::: x loves y.",
        "WorksAs(x, y) ::: x works as y.",
        "Reunited(x, y) ::: x is reunited with y."
      ],
      "premises": [
        "Joins(Edward, King Charles II) ::: Edward eventually joins the army of the future King Charles II.",
        "Defeated(Royalist army, Battle of Worcester) ::: The Royalist army is defeated at the Battle of Worcester.",
        "Returns(Edward, New Forest) ::: Edward returns to the New Forest after the Royalist defeat at the Battle of Worcester.",
        "Awarded(Heatherstone, Arnwood estate) ::: Heatherstone has been awarded the old Arnwood estate.",
        "Flees(Edward, France) ::: Edward flees to France due to disillusionment.",
        "RaisedAsAristocraticLadies(Edward's sisters) ::: Edward's sisters are raised as aristocratic ladies while he is in exile.",
        "LivesIn(Edward's brother, New Forest) ::: Edward's brother continues to live in the New Forest.",
        "Learns(Edward, Loves(Patience, Edward)) ::: Edward learns that Patience does love him.",
        "Awarded(Heatherstone, Arnwood estate) → WorksAs(Edward, mercenary soldier) ::: Heatherstone acquired the Arnwood estate for Edward, but he works as a mercenary soldier in exile.",
        "Reunited(Patience, Edward) ::: They are reunited after the Restoration."
      ],
      "conclusions": [
        "None",
        "WorksAs(Edward, mercenary soldier)"
      ]
    }
  ],
  "28": [
    {
      "id": 28,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 0,
      "paragraph": " The story begins in 1647 when King Charles I has been defeated in the civil war and has fled from London towards the New Forest. Parliamentary soldiers have been sent to search the forest and decide to burn Arnwood, the house of Colonel Beverley, a Cavalier officer killed at the Battle of Naseby. The four orphan children of the house, Edward, Humphrey, Alice and Edith, are believed to have died in the flames. However, they are saved by Jacob Armitage, a local verderer, who hides them in his isolated cottage and disguises them as his grandchildren.",
      "question_template": "[[CANDIDATE_ANSWER]] was originally defeated that caused the soldiers to first search for the New Forest.",
      "candidate_answers": [
        "King Charles I",
        "Parliamentary soldiers"
      ],
      "predicates": [
        "Saved(x, y) ::: x saves y.",
        "Orphan(x) ::: x is an orphan child.",
        "DisguisedAs(x, y) ::: x is disguised as y.",
        "Hides(x, y) ::: x hides y.",
        "Fled(x, y) ::: x has fled from y.",
        "Burned(x) ::: x is burned.",
        "Killed(x) ::: x is killed.",
        "Sent(x, y) ::: x is sent to y.",
        "BelievedDead(x) ::: x is believed to have died."
      ],
      "premises": [
        "Fled(kingCharlesII, London) ::: King Charles I has fled from London.",
        "Sent(parliamentarySoldiers, NewForest) ::: Parliamentary soldiers have been sent to search the New Forest.",
        "Burned(arnwoodEstate) ::: Arnwood, the house of Colonel Beverley, is burned.",
        "∃x (Orphan(x) ∧ BelievedDead(x)) ::: The four orphan children are believed to have died in the flames.",
        "Saved(jacobArmitage, a_5) ::: Jacob Armitage saves Edward's sisters.",
        "Saved(jacobArmitage, a_6) ::: Jacob Armitage saves Edward's brother.",
        "Hides(jacobArmitage, a_0) ::: Jacob Armitage hides the orphan children in his isolated cottage.",
        "DisguisedAs(a_5, grandchildren) ::: Edward's sisters are disguised as Jacob Armitage's grandchildren.",
        "DisguisedAs(a_6, grandchildren) ::: Edward's brother is disguised as Jacob Armitage's grandchildren."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "29": [
    {
      "id": 29,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 0,
      "paragraph": " The story begins in 1647 when King Charles I has been defeated in the civil war and has fled from London towards the New Forest. Parliamentary soldiers have been sent to search the forest and decide to burn Arnwood, the house of Colonel Beverley, a Cavalier officer killed at the Battle of Naseby. The four orphan children of the house, Edward, Humphrey, Alice and Edith, are believed to have died in the flames. However, they are saved by Jacob Armitage, a local verderer, who hides them in his isolated cottage and disguises them as his grandchildren.",
      "question_template": "The king who has just been defeated when the story begins is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "King Charles I"
      ],
      "predicates": [
        "Saved(x, y) ::: x saves y.",
        "Orphan(x) ::: x is an orphan child.",
        "DisguisedAs(x, y) ::: x is disguised as y.",
        "Hides(x, y) ::: x hides y.",
        "Fled(x, y) ::: x has fled from y.",
        "Burned(x) ::: x is burned.",
        "Killed(x) ::: x is killed.",
        "Sent(x, y) ::: x is sent to y.",
        "BelievedDead(x) ::: x is believed to have died."
      ],
      "premises": [
        "Fled(kingCharlesII, London) ::: King Charles I has fled from London.",
        "Sent(parliamentarySoldiers, NewForest) ::: Parliamentary soldiers have been sent to search the New Forest.",
        "Burned(arnwoodEstate) ::: Arnwood, the house of Colonel Beverley, is burned.",
        "∃x (Orphan(x) ∧ BelievedDead(x)) ::: The four orphan children are believed to have died in the flames.",
        "Saved(jacobArmitage, a_5) ::: Jacob Armitage saves Edward's sisters.",
        "Saved(jacobArmitage, a_6) ::: Jacob Armitage saves Edward's brother.",
        "Hides(jacobArmitage, a_0) ::: Jacob Armitage hides the orphan children in his isolated cottage.",
        "DisguisedAs(a_5, grandchildren) ::: Edward's sisters are disguised as Jacob Armitage's grandchildren.",
        "DisguisedAs(a_6, grandchildren) ::: Edward's brother is disguised as Jacob Armitage's grandchildren."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 29,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 2,
      "paragraph": "Edward eventually joins the army of the future King Charles II, but after the Royalist defeat at the Battle of Worcester, he returns to the New Forest where he learns that Heatherstone has been awarded the old Arnwood estate. Disillusioned by this, and by Patience's apparent rejection of his declarations of love, Edward flees to France. His sisters are sent away to be brought up as aristocratic ladies and his brother continues to live in the New Forest. Edward learns that Patience does, in fact, love him, and that Heatherstone had acquired the Arnwood estate for Edward, but he works as a mercenary soldier in exile until the Restoration when they are reunited.",
      "question_template": "The king who has just been defeated when the story begins is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "King Charles II"
      ],
      "predicates": [
        "Joins(x, y) ::: x joins the army of y.",
        "Defeated(x, y) ::: x is defeated at y.",
        "Returns(x, y) ::: x returns to y.",
        "Awarded(x, y) ::: x is awarded y.",
        "Flees(x, y) ::: x flees to y.",
        "RaisedAsAristocraticLadies(x) ::: x is raised as aristocratic ladies.",
        "LivesIn(x, y) ::: x lives in y.",
        "Learns(x, y) ::: x learns about y.",
        "Loves(x, y) ::: x loves y.",
        "WorksAs(x, y) ::: x works as y.",
        "Reunited(x, y) ::: x is reunited with y."
      ],
      "premises": [
        "Joins(Edward, King Charles II) ::: Edward eventually joins the army of the future King Charles II.",
        "Defeated(Royalist army, Battle of Worcester) ::: The Royalist army is defeated at the Battle of Worcester.",
        "Returns(Edward, New Forest) ::: Edward returns to the New Forest after the Royalist defeat at the Battle of Worcester.",
        "Awarded(Heatherstone, Arnwood estate) ::: Heatherstone has been awarded the old Arnwood estate.",
        "Flees(Edward, France) ::: Edward flees to France due to disillusionment.",
        "RaisedAsAristocraticLadies(Edward's sisters) ::: Edward's sisters are raised as aristocratic ladies while he is in exile.",
        "LivesIn(Edward's brother, New Forest) ::: Edward's brother continues to live in the New Forest.",
        "Learns(Edward, Loves(Patience, Edward)) ::: Edward learns that Patience does love him.",
        "Awarded(Heatherstone, Arnwood estate) → WorksAs(Edward, mercenary soldier) ::: Heatherstone acquired the Arnwood estate for Edward, but he works as a mercenary soldier in exile.",
        "Reunited(Patience, Edward) ::: They are reunited after the Restoration."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "30": [
    {
      "id": 30,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 0,
      "paragraph": " The story begins in 1647 when King Charles I has been defeated in the civil war and has fled from London towards the New Forest. Parliamentary soldiers have been sent to search the forest and decide to burn Arnwood, the house of Colonel Beverley, a Cavalier officer killed at the Battle of Naseby. The four orphan children of the house, Edward, Humphrey, Alice and Edith, are believed to have died in the flames. However, they are saved by Jacob Armitage, a local verderer, who hides them in his isolated cottage and disguises them as his grandchildren.",
      "question_template": "[[CANDIDATE_ANSWER]] lives in Arnwood.",
      "candidate_answers": [
        "The four orphan children of the house, Edward, Humphrey, Alice and Edith",
        "Colonel Beverley"
      ],
      "predicates": [
        "Saved(x, y) ::: x saves y.",
        "Orphan(x) ::: x is an orphan child.",
        "DisguisedAs(x, y) ::: x is disguised as y.",
        "Hides(x, y) ::: x hides y.",
        "Fled(x, y) ::: x has fled from y.",
        "Burned(x) ::: x is burned.",
        "Killed(x) ::: x is killed.",
        "Sent(x, y) ::: x is sent to y.",
        "BelievedDead(x) ::: x is believed to have died."
      ],
      "premises": [
        "Fled(kingCharlesII, London) ::: King Charles I has fled from London.",
        "Sent(parliamentarySoldiers, NewForest) ::: Parliamentary soldiers have been sent to search the New Forest.",
        "Burned(arnwoodEstate) ::: Arnwood, the house of Colonel Beverley, is burned.",
        "∃x (Orphan(x) ∧ BelievedDead(x)) ::: The four orphan children are believed to have died in the flames.",
        "Saved(jacobArmitage, a_5) ::: Jacob Armitage saves Edward's sisters.",
        "Saved(jacobArmitage, a_6) ::: Jacob Armitage saves Edward's brother.",
        "Hides(jacobArmitage, a_0) ::: Jacob Armitage hides the orphan children in his isolated cottage.",
        "DisguisedAs(a_5, grandchildren) ::: Edward's sisters are disguised as Jacob Armitage's grandchildren.",
        "DisguisedAs(a_6, grandchildren) ::: Edward's brother is disguised as Jacob Armitage's grandchildren."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 30,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 2,
      "paragraph": "Edward eventually joins the army of the future King Charles II, but after the Royalist defeat at the Battle of Worcester, he returns to the New Forest where he learns that Heatherstone has been awarded the old Arnwood estate. Disillusioned by this, and by Patience's apparent rejection of his declarations of love, Edward flees to France. His sisters are sent away to be brought up as aristocratic ladies and his brother continues to live in the New Forest. Edward learns that Patience does, in fact, love him, and that Heatherstone had acquired the Arnwood estate for Edward, but he works as a mercenary soldier in exile until the Restoration when they are reunited.",
      "question_template": "[[CANDIDATE_ANSWER]] lives in Arnwood.",
      "candidate_answers": [
        "Heatherstone has been awarded the old Arnwood estate",
        "Edward learns that Heatherstone had acquired the Arnwood estate for Edward"
      ],
      "predicates": [
        "Joins(x, y) ::: x joins the army of y.",
        "Defeated(x, y) ::: x is defeated at y.",
        "Returns(x, y) ::: x returns to y.",
        "Awarded(x, y) ::: x is awarded y.",
        "Flees(x, y) ::: x flees to y.",
        "RaisedAsAristocraticLadies(x) ::: x is raised as aristocratic ladies.",
        "LivesIn(x, y) ::: x lives in y.",
        "Learns(x, y) ::: x learns about y.",
        "Loves(x, y) ::: x loves y.",
        "WorksAs(x, y) ::: x works as y.",
        "Reunited(x, y) ::: x is reunited with y."
      ],
      "premises": [
        "Joins(Edward, King Charles II) ::: Edward eventually joins the army of the future King Charles II.",
        "Defeated(Royalist army, Battle of Worcester) ::: The Royalist army is defeated at the Battle of Worcester.",
        "Returns(Edward, New Forest) ::: Edward returns to the New Forest after the Royalist defeat at the Battle of Worcester.",
        "Awarded(Heatherstone, Arnwood estate) ::: Heatherstone has been awarded the old Arnwood estate.",
        "Flees(Edward, France) ::: Edward flees to France due to disillusionment.",
        "RaisedAsAristocraticLadies(Edward's sisters) ::: Edward's sisters are raised as aristocratic ladies while he is in exile.",
        "LivesIn(Edward's brother, New Forest) ::: Edward's brother continues to live in the New Forest.",
        "Learns(Edward, Loves(Patience, Edward)) ::: Edward learns that Patience does love him.",
        "Awarded(Heatherstone, Arnwood estate) → WorksAs(Edward, mercenary soldier) ::: Heatherstone acquired the Arnwood estate for Edward, but he works as a mercenary soldier in exile.",
        "Reunited(Patience, Edward) ::: They are reunited after the Restoration."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "31": [
    {
      "id": 31,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 0,
      "paragraph": " The story begins in 1647 when King Charles I has been defeated in the civil war and has fled from London towards the New Forest. Parliamentary soldiers have been sent to search the forest and decide to burn Arnwood, the house of Colonel Beverley, a Cavalier officer killed at the Battle of Naseby. The four orphan children of the house, Edward, Humphrey, Alice and Edith, are believed to have died in the flames. However, they are saved by Jacob Armitage, a local verderer, who hides them in his isolated cottage and disguises them as his grandchildren.",
      "question_template": "The orphans in the house are saved by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Jacob Armitage",
        "A local verderer",
        "Hides them in his isolated cottage and disguises them as his grandchildren"
      ],
      "predicates": [
        "Saved(x, y) ::: x saves y.",
        "Orphan(x) ::: x is an orphan child.",
        "DisguisedAs(x, y) ::: x is disguised as y.",
        "Hides(x, y) ::: x hides y.",
        "Fled(x, y) ::: x has fled from y.",
        "Burned(x) ::: x is burned.",
        "Killed(x) ::: x is killed.",
        "Sent(x, y) ::: x is sent to y.",
        "BelievedDead(x) ::: x is believed to have died."
      ],
      "premises": [
        "Fled(kingCharlesII, London) ::: King Charles I has fled from London.",
        "Sent(parliamentarySoldiers, NewForest) ::: Parliamentary soldiers have been sent to search the New Forest.",
        "Burned(arnwoodEstate) ::: Arnwood, the house of Colonel Beverley, is burned.",
        "∃x (Orphan(x) ∧ BelievedDead(x)) ::: The four orphan children are believed to have died in the flames.",
        "Saved(jacobArmitage, a_5) ::: Jacob Armitage saves Edward's sisters.",
        "Saved(jacobArmitage, a_6) ::: Jacob Armitage saves Edward's brother.",
        "Hides(jacobArmitage, a_0) ::: Jacob Armitage hides the orphan children in his isolated cottage.",
        "DisguisedAs(a_5, grandchildren) ::: Edward's sisters are disguised as Jacob Armitage's grandchildren.",
        "DisguisedAs(a_6, grandchildren) ::: Edward's brother is disguised as Jacob Armitage's grandchildren."
      ],
      "conclusions": [
        "∃x (Orphan(x) ∧ Saved(jacobArmitage, x))",
        "None",
        "None"
      ]
    }
  ],
  "32": [
    {
      "id": 32,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 1,
      "paragraph": "Under Armitage's guidance, the children adapt from an aristocratic lifestyle to that of simple foresters. After Armitage's death, Edward takes charge and the children develop and expand the farmstead, aided by the entrepreneurial spirit of the younger brother Humphrey. They are assisted by a gypsy boy, Pablo, who they rescue from a pitfall trap. A sub-plot involves a hostile Puritan gamekeeper named Corbould who seeks to harm Edward and his family. Edward also encounters the sympathetic Puritan, Heatherstone, placed in charge of the Royal land in the New Forest, and rescues his daughter, Patience, in a house-fire. Edward leaves the cottage and works as a secretary for Heatherstone, but Edward maintains the pretence that he is the grandson of Jacob Armitage.",
      "question_template": "Jacob disguises the children as [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Edward maintains the pretence that he is the grandson of Jacob Armitage."
      ],
      "predicates": [
        "GuidedBy(x, y) ::: x is guided by y.",
        "AdaptsToLifestyle(x, y) ::: x adapts to lifestyle y.",
        "Develops(x, y) ::: x develops y.",
        "AssistedBy(x, y) ::: x is assisted by y.",
        "Rescues(x, y) ::: x rescues y.",
        "WorksAs(x, y) ::: x works as y.",
        "MaintainsPretence(x, y) ::: x maintains the pretence of being y.",
        "HostileTowards(x, y) ::: x is hostile towards y.",
        "SympatheticTowards(x, y) ::: x is sympathetic towards y."
      ],
      "premises": [
        "GuidedBy(a_1, a_2) ∧ AdaptsToLifestyle(a_1, simple foresters) ∧ Develops(a_1, farmstead) ∧ AssistedBy(a_1, a_6) ∧ AssistedBy(a_1, a_7) ::: Under Armitage's guidance, Edward adapts from an aristocratic lifestyle to that of simple foresters and develops the farmstead, aided by the entrepreneurial spirit of his brother Humphrey and the gypsy boy Pablo.",
        "Rescues(a_1, a_7) ::: Edward rescues Pablo from a pitfall trap.",
        "HostileTowards(a_3, a_1) ::: Corbould is hostile towards Edward and his family.",
        "SympatheticTowards(a_3, a_1) ::: Heatherstone is sympathetic towards Edward.",
        "WorksAs(a_1, secretary) ::: Edward works as a secretary for Heatherstone.",
        "MaintainsPretence(a_1, grandson of Jacob Armitage) ::: Edward maintains the pretence that he is the grandson of Jacob Armitage."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "33": [
    {
      "id": 33,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 1,
      "paragraph": "Under Armitage's guidance, the children adapt from an aristocratic lifestyle to that of simple foresters. After Armitage's death, Edward takes charge and the children develop and expand the farmstead, aided by the entrepreneurial spirit of the younger brother Humphrey. They are assisted by a gypsy boy, Pablo, who they rescue from a pitfall trap. A sub-plot involves a hostile Puritan gamekeeper named Corbould who seeks to harm Edward and his family. Edward also encounters the sympathetic Puritan, Heatherstone, placed in charge of the Royal land in the New Forest, and rescues his daughter, Patience, in a house-fire. Edward leaves the cottage and works as a secretary for Heatherstone, but Edward maintains the pretence that he is the grandson of Jacob Armitage.",
      "question_template": "The children rescue [[CANDIDATE_ANSWER]] from a trap.",
      "candidate_answers": [
        "a gypsy boy, Pablo"
      ],
      "predicates": [
        "GuidedBy(x, y) ::: x is guided by y.",
        "AdaptsToLifestyle(x, y) ::: x adapts to lifestyle y.",
        "Develops(x, y) ::: x develops y.",
        "AssistedBy(x, y) ::: x is assisted by y.",
        "Rescues(x, y) ::: x rescues y.",
        "WorksAs(x, y) ::: x works as y.",
        "MaintainsPretence(x, y) ::: x maintains the pretence of being y.",
        "HostileTowards(x, y) ::: x is hostile towards y.",
        "SympatheticTowards(x, y) ::: x is sympathetic towards y."
      ],
      "premises": [
        "GuidedBy(a_1, a_2) ∧ AdaptsToLifestyle(a_1, simple foresters) ∧ Develops(a_1, farmstead) ∧ AssistedBy(a_1, a_6) ∧ AssistedBy(a_1, a_7) ::: Under Armitage's guidance, Edward adapts from an aristocratic lifestyle to that of simple foresters and develops the farmstead, aided by the entrepreneurial spirit of his brother Humphrey and the gypsy boy Pablo.",
        "Rescues(a_1, a_7) ::: Edward rescues Pablo from a pitfall trap.",
        "HostileTowards(a_3, a_1) ::: Corbould is hostile towards Edward and his family.",
        "SympatheticTowards(a_3, a_1) ::: Heatherstone is sympathetic towards Edward.",
        "WorksAs(a_1, secretary) ::: Edward works as a secretary for Heatherstone.",
        "MaintainsPretence(a_1, grandson of Jacob Armitage) ::: Edward maintains the pretence that he is the grandson of Jacob Armitage."
      ],
      "conclusions": [
        "Rescues(a_1, a_6)"
      ]
    }
  ],
  "34": [
    {
      "id": 34,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 0,
      "paragraph": " The story begins in 1647 when King Charles I has been defeated in the civil war and has fled from London towards the New Forest. Parliamentary soldiers have been sent to search the forest and decide to burn Arnwood, the house of Colonel Beverley, a Cavalier officer killed at the Battle of Naseby. The four orphan children of the house, Edward, Humphrey, Alice and Edith, are believed to have died in the flames. However, they are saved by Jacob Armitage, a local verderer, who hides them in his isolated cottage and disguises them as his grandchildren.",
      "question_template": "[[CANDIDATE_ANSWER]] wants to harm the family.",
      "candidate_answers": [
        "Parliamentary soldiers",
        "Decide to burn Arnwood, the house of Colonel Beverley"
      ],
      "predicates": [
        "Saved(x, y) ::: x saves y.",
        "Orphan(x) ::: x is an orphan child.",
        "DisguisedAs(x, y) ::: x is disguised as y.",
        "Hides(x, y) ::: x hides y.",
        "Fled(x, y) ::: x has fled from y.",
        "Burned(x) ::: x is burned.",
        "Killed(x) ::: x is killed.",
        "Sent(x, y) ::: x is sent to y.",
        "BelievedDead(x) ::: x is believed to have died."
      ],
      "premises": [
        "Fled(kingCharlesII, London) ::: King Charles I has fled from London.",
        "Sent(parliamentarySoldiers, NewForest) ::: Parliamentary soldiers have been sent to search the New Forest.",
        "Burned(arnwoodEstate) ::: Arnwood, the house of Colonel Beverley, is burned.",
        "∃x (Orphan(x) ∧ BelievedDead(x)) ::: The four orphan children are believed to have died in the flames.",
        "Saved(jacobArmitage, a_5) ::: Jacob Armitage saves Edward's sisters.",
        "Saved(jacobArmitage, a_6) ::: Jacob Armitage saves Edward's brother.",
        "Hides(jacobArmitage, a_0) ::: Jacob Armitage hides the orphan children in his isolated cottage.",
        "DisguisedAs(a_5, grandchildren) ::: Edward's sisters are disguised as Jacob Armitage's grandchildren.",
        "DisguisedAs(a_6, grandchildren) ::: Edward's brother is disguised as Jacob Armitage's grandchildren."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 34,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 1,
      "paragraph": "Under Armitage's guidance, the children adapt from an aristocratic lifestyle to that of simple foresters. After Armitage's death, Edward takes charge and the children develop and expand the farmstead, aided by the entrepreneurial spirit of the younger brother Humphrey. They are assisted by a gypsy boy, Pablo, who they rescue from a pitfall trap. A sub-plot involves a hostile Puritan gamekeeper named Corbould who seeks to harm Edward and his family. Edward also encounters the sympathetic Puritan, Heatherstone, placed in charge of the Royal land in the New Forest, and rescues his daughter, Patience, in a house-fire. Edward leaves the cottage and works as a secretary for Heatherstone, but Edward maintains the pretence that he is the grandson of Jacob Armitage.",
      "question_template": "[[CANDIDATE_ANSWER]] wants to harm the family.",
      "candidate_answers": [
        "A hostile Puritan gamekeeper named Corbould"
      ],
      "predicates": [
        "GuidedBy(x, y) ::: x is guided by y.",
        "AdaptsToLifestyle(x, y) ::: x adapts to lifestyle y.",
        "Develops(x, y) ::: x develops y.",
        "AssistedBy(x, y) ::: x is assisted by y.",
        "Rescues(x, y) ::: x rescues y.",
        "WorksAs(x, y) ::: x works as y.",
        "MaintainsPretence(x, y) ::: x maintains the pretence of being y.",
        "HostileTowards(x, y) ::: x is hostile towards y.",
        "SympatheticTowards(x, y) ::: x is sympathetic towards y."
      ],
      "premises": [
        "GuidedBy(a_1, a_2) ∧ AdaptsToLifestyle(a_1, simple foresters) ∧ Develops(a_1, farmstead) ∧ AssistedBy(a_1, a_6) ∧ AssistedBy(a_1, a_7) ::: Under Armitage's guidance, Edward adapts from an aristocratic lifestyle to that of simple foresters and develops the farmstead, aided by the entrepreneurial spirit of his brother Humphrey and the gypsy boy Pablo.",
        "Rescues(a_1, a_7) ::: Edward rescues Pablo from a pitfall trap.",
        "HostileTowards(a_3, a_1) ::: Corbould is hostile towards Edward and his family.",
        "SympatheticTowards(a_3, a_1) ::: Heatherstone is sympathetic towards Edward.",
        "WorksAs(a_1, secretary) ::: Edward works as a secretary for Heatherstone.",
        "MaintainsPretence(a_1, grandson of Jacob Armitage) ::: Edward maintains the pretence that he is the grandson of Jacob Armitage."
      ],
      "conclusions": [
        "HostileTowards(corbould, a_1)"
      ]
    }
  ],
  "35": [
    {
      "id": 35,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 0,
      "paragraph": " The story begins in 1647 when King Charles I has been defeated in the civil war and has fled from London towards the New Forest. Parliamentary soldiers have been sent to search the forest and decide to burn Arnwood, the house of Colonel Beverley, a Cavalier officer killed at the Battle of Naseby. The four orphan children of the house, Edward, Humphrey, Alice and Edith, are believed to have died in the flames. However, they are saved by Jacob Armitage, a local verderer, who hides them in his isolated cottage and disguises them as his grandchildren.",
      "question_template": "Edward works for [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Edward, Humphrey, Alice and Edith are believed to have died in the flames.",
        "They are saved by Jacob Armitage, a local verderer, who hides them in his isolated cottage and disguises them as his grandchildren."
      ],
      "predicates": [
        "Saved(x, y) ::: x saves y.",
        "Orphan(x) ::: x is an orphan child.",
        "DisguisedAs(x, y) ::: x is disguised as y.",
        "Hides(x, y) ::: x hides y.",
        "Fled(x, y) ::: x has fled from y.",
        "Burned(x) ::: x is burned.",
        "Killed(x) ::: x is killed.",
        "Sent(x, y) ::: x is sent to y.",
        "BelievedDead(x) ::: x is believed to have died."
      ],
      "premises": [
        "Fled(kingCharlesII, London) ::: King Charles I has fled from London.",
        "Sent(parliamentarySoldiers, NewForest) ::: Parliamentary soldiers have been sent to search the New Forest.",
        "Burned(arnwoodEstate) ::: Arnwood, the house of Colonel Beverley, is burned.",
        "∃x (Orphan(x) ∧ BelievedDead(x)) ::: The four orphan children are believed to have died in the flames.",
        "Saved(jacobArmitage, a_5) ::: Jacob Armitage saves Edward's sisters.",
        "Saved(jacobArmitage, a_6) ::: Jacob Armitage saves Edward's brother.",
        "Hides(jacobArmitage, a_0) ::: Jacob Armitage hides the orphan children in his isolated cottage.",
        "DisguisedAs(a_5, grandchildren) ::: Edward's sisters are disguised as Jacob Armitage's grandchildren.",
        "DisguisedAs(a_6, grandchildren) ::: Edward's brother is disguised as Jacob Armitage's grandchildren."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 35,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 2,
      "paragraph": "Edward eventually joins the army of the future King Charles II, but after the Royalist defeat at the Battle of Worcester, he returns to the New Forest where he learns that Heatherstone has been awarded the old Arnwood estate. Disillusioned by this, and by Patience's apparent rejection of his declarations of love, Edward flees to France. His sisters are sent away to be brought up as aristocratic ladies and his brother continues to live in the New Forest. Edward learns that Patience does, in fact, love him, and that Heatherstone had acquired the Arnwood estate for Edward, but he works as a mercenary soldier in exile until the Restoration when they are reunited.",
      "question_template": "Edward works for [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Edward eventually joins the army of the future King Charles II",
        "He works as a mercenary soldier in exile"
      ],
      "predicates": [
        "Joins(x, y) ::: x joins the army of y.",
        "Defeated(x, y) ::: x is defeated at y.",
        "Returns(x, y) ::: x returns to y.",
        "Awarded(x, y) ::: x is awarded y.",
        "Flees(x, y) ::: x flees to y.",
        "RaisedAsAristocraticLadies(x) ::: x is raised as aristocratic ladies.",
        "LivesIn(x, y) ::: x lives in y.",
        "Learns(x, y) ::: x learns about y.",
        "Loves(x, y) ::: x loves y.",
        "WorksAs(x, y) ::: x works as y.",
        "Reunited(x, y) ::: x is reunited with y."
      ],
      "premises": [
        "Joins(Edward, King Charles II) ::: Edward eventually joins the army of the future King Charles II.",
        "Defeated(Royalist army, Battle of Worcester) ::: The Royalist army is defeated at the Battle of Worcester.",
        "Returns(Edward, New Forest) ::: Edward returns to the New Forest after the Royalist defeat at the Battle of Worcester.",
        "Awarded(Heatherstone, Arnwood estate) ::: Heatherstone has been awarded the old Arnwood estate.",
        "Flees(Edward, France) ::: Edward flees to France due to disillusionment.",
        "RaisedAsAristocraticLadies(Edward's sisters) ::: Edward's sisters are raised as aristocratic ladies while he is in exile.",
        "LivesIn(Edward's brother, New Forest) ::: Edward's brother continues to live in the New Forest.",
        "Learns(Edward, Loves(Patience, Edward)) ::: Edward learns that Patience does love him.",
        "Awarded(Heatherstone, Arnwood estate) → WorksAs(Edward, mercenary soldier) ::: Heatherstone acquired the Arnwood estate for Edward, but he works as a mercenary soldier in exile.",
        "Reunited(Patience, Edward) ::: They are reunited after the Restoration."
      ],
      "conclusions": [
        "None",
        "WorksAs(Edward, mercenary soldier)"
      ]
    }
  ],
  "38": [
    {
      "id": 38,
      "context_id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 0,
      "paragraph": " The story begins in 1647 when King Charles I has been defeated in the civil war and has fled from London towards the New Forest. Parliamentary soldiers have been sent to search the forest and decide to burn Arnwood, the house of Colonel Beverley, a Cavalier officer killed at the Battle of Naseby. The four orphan children of the house, Edward, Humphrey, Alice and Edith, are believed to have died in the flames. However, they are saved by Jacob Armitage, a local verderer, who hides them in his isolated cottage and disguises them as his grandchildren.",
      "question_template": "[[CANDIDATE_ANSWER]] acquired the estate for Edward.",
      "candidate_answers": [
        "Jacob Armitage, a local verderer, who hides them in his isolated cottage and disguises them as his grandchildren."
      ],
      "predicates": [
        "Saved(x, y) ::: x saves y.",
        "Orphan(x) ::: x is an orphan child.",
        "DisguisedAs(x, y) ::: x is disguised as y.",
        "Hides(x, y) ::: x hides y.",
        "Fled(x, y) ::: x has fled from y.",
        "Burned(x) ::: x is burned.",
        "Killed(x) ::: x is killed.",
        "Sent(x, y) ::: x is sent to y.",
        "BelievedDead(x) ::: x is believed to have died."
      ],
      "premises": [
        "Fled(kingCharlesII, London) ::: King Charles I has fled from London.",
        "Sent(parliamentarySoldiers, NewForest) ::: Parliamentary soldiers have been sent to search the New Forest.",
        "Burned(arnwoodEstate) ::: Arnwood, the house of Colonel Beverley, is burned.",
        "∃x (Orphan(x) ∧ BelievedDead(x)) ::: The four orphan children are believed to have died in the flames.",
        "Saved(jacobArmitage, a_5) ::: Jacob Armitage saves Edward's sisters.",
        "Saved(jacobArmitage, a_6) ::: Jacob Armitage saves Edward's brother.",
        "Hides(jacobArmitage, a_0) ::: Jacob Armitage hides the orphan children in his isolated cottage.",
        "DisguisedAs(a_5, grandchildren) ::: Edward's sisters are disguised as Jacob Armitage's grandchildren.",
        "DisguisedAs(a_6, grandchildren) ::: Edward's brother is disguised as Jacob Armitage's grandchildren."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "39": [
    {
      "id": 39,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 1,
      "paragraph": "Kempton makes the case for feeling and emotion, while Wace proceeds \"scientifically\" and analyzes love in Darwinian terms:",
      "question_template": "[[CANDIDATE_ANSWER]] gave a positive review of the novel.",
      "candidate_answers": [
        "Kempton",
        "Wace"
      ],
      "predicates": [
        "MakesCase(x, y) ::: x makes the case for y.",
        "ProceedsScientifically(x, y) ::: x proceeds scientifically and analyzes y in a specific context."
      ],
      "premises": [
        "MakesCase(kempton, feelingAndEmotion) ::: Kempton makes the case for feeling and emotion.",
        "ProceedsScientifically(wace, love) ::: Wace proceeds \"scientifically\" and analyzes love in Darwinian terms."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "40": [
    {
      "id": 40,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 4,
      "paragraph": "The New York Times was less charitable. It opened its review with the terse line, \"The sex problem again.\" It complained that \"Nothing that the scientist says is new, nothing that the poet says is new. The thing has been thrashed out some millions of times... Nor does the unnamed author infuse into either Wace or Kempton anything to give human personality or appeal.... As a story [it] falls flat; as a discussion of a topic as old as interesting, as overworked.\"",
      "question_template": "The novel is written in the format of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The unnamed author infuse into either Wace or Kempton anything to give human personality or appeal",
        "As a story [it] falls flat; as a discussion of a topic as old as interesting, as overworked"
      ],
      "predicates": [
        "Unoriginal(c) ::: c is unoriginal.",
        "LacksAppeal(c) ::: c lacks appeal.",
        "Complains(c, d) ::: c complains about d.",
        "Review(c, d) ::: c is a review of d.",
        "Author(c, d) ::: c is the author of d.",
        "Publication(c) ::: c is a publication.",
        "TerseLine(c, d) ::: c contains a terse line d.",
        "FallsFlat(c) ::: c falls flat."
      ],
      "premises": [
        "Unoriginal(review) ∧ LacksAppeal(review) ::: The New York Times finds the review unoriginal and lacking appeal.",
        "Complains(newYorkTimes, review) ::: The New York Times complained about the review.",
        "Review(review, topic) ::: The review is of the topic.",
        "TerseLine(review, \"The sex problem again.\") ::: The review contains the terse line \"The sex problem again.\"",
        "FallsFlat(review) ::: The review falls flat.",
        "Conclusion:",
        "Unoriginal(review) ∧ LacksAppeal(review) ::: The review is unoriginal and lacks appeal."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "41": [
    {
      "id": 41,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 5,
      "paragraph": "Joseph Noel says that George Sterling described London's portion of the book, as \"a spiritual misprint, a typographical error half a volume long\" and says \"His vocabulary, in the letters of Herbert Wace, sounds as if taken that day from an encyclopedia by a conscientious sophomore.\"",
      "question_template": "The New York Times gave the novel a bad review because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- \"a spiritual misprint, a typographical error half a volume long\"",
        "- \"His vocabulary, in the letters of Herbert Wace, sounds as if taken that day from an encyclopedia by a conscientious sophomore\""
      ],
      "predicates": [
        "Describes(x, y) ::: x describes y.",
        "SpiritualMisprint(x) ::: x is a spiritual misprint.",
        "TypographicalError(x) ::: x is a typographical error.",
        "VocabFromEncyclopedia(x) ::: x's vocabulary sounds as if taken from an encyclopedia.",
        "ConscientiousSophomore(x) ::: x is a conscientious sophomore."
      ],
      "premises": [
        "Describes(georgeSterling, londonPortion) ∧ SpiritualMisprint(londonPortion) ∧ TypographicalError(londonPortion) ::: George Sterling described London's portion of the book as \"a spiritual misprint, a typographical error half a volume long.\"",
        "VocabFromEncyclopedia(herbertWace) ∧ ConscientiousSophomore(herbertWace) ::: His vocabulary, in the letters of Herbert Wace, sounds as if taken that day from an encyclopedia by a conscientious sophomore."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "42": [
    {
      "id": 42,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 1,
      "paragraph": "Kempton makes the case for feeling and emotion, while Wace proceeds \"scientifically\" and analyzes love in Darwinian terms:",
      "question_template": "Wace's view on love was different than Kempton's in that [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Wace proceeds \"scientifically\" and analyzes love in Darwinian terms"
      ],
      "predicates": [
        "MakesCase(x, y) ::: x makes the case for y.",
        "ProceedsScientifically(x, y) ::: x proceeds scientifically and analyzes y in a specific context."
      ],
      "premises": [
        "MakesCase(kempton, feelingAndEmotion) ::: Kempton makes the case for feeling and emotion.",
        "ProceedsScientifically(wace, love) ::: Wace proceeds \"scientifically\" and analyzes love in Darwinian terms."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "43": [
    {
      "id": 43,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 0,
      "paragraph": " The novel presents a discussion of the philosophy of love and sex, written in the form of a series of letters between two men, \"Herbert Wace,\" a young scientist, and \"Dane Kempton,\" an elderly poet. Writer Jack London wrote \"Wace's\" letters, and Anna Strunsky wrote \"Kempton's.\" In the late 19th century, the authors were part of a San Francisco radical literary group known as \"The Crowd.\"",
      "question_template": "[[CANDIDATE_ANSWER]] was a literary group that both London and Strunsky were a part of.",
      "candidate_answers": [
        "The Crowd"
      ],
      "predicates": [
        "PhilosophyOfLoveAndSex(x) ::: x discusses the philosophy of love and sex.",
        "WrittenInLetters(x) ::: x is written in the form of letters.",
        "Author(x, y) ::: x is the author of y.",
        "PartOfGroup(x, y) ::: x is part of group y.",
        "YoungScientist(x) ::: x is a young scientist.",
        "ElderlyPoet(x) ::: x is an elderly poet.",
        "PublicationDate(x, y) ::: x is published in year y."
      ],
      "premises": [
        "PhilosophyOfLoveAndSex(novel) ::: The novel presents a discussion of the philosophy of love and sex.",
        "WrittenInLetters(novel) ::: The novel is written in the form of a series of letters.",
        "Author(london, waceLetters) ::: Jack London wrote \"Wace's\" letters.",
        "Author(strunsky, kemptonLetters) ::: Anna Strunsky wrote \"Kempton's\" letters.",
        "YoungScientist(herbertWace) ::: Herbert Wace is a young scientist.",
        "ElderlyPoet(daneKempton) ::: Dane Kempton is an elderly poet.",
        "PartOfGroup(london, crowd) ::: Jack London was part of \"The Crowd.\"",
        "PartOfGroup(strunsky, crowd) ::: Anna Strunsky was part of \"The Crowd.\"",
        "PublicationDate(waceLetters, d1) ::: \"Wace's\" letters were published in 1916.",
        "PublicationDate(kemptonLetters, d2) ::: \"Kempton's\" letters were published in 1917.",
        "Conclusion:",
        "Author(london, waceLetters) ∧ Author(strunsky, kemptonLetters) ::: Jack London and Anna Strunsky are the authors of \"Wace's\" and \"Kempton's\" letters, respectively."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "44": [
    {
      "id": 44,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 1,
      "paragraph": "Kempton makes the case for feeling and emotion, while Wace proceeds \"scientifically\" and analyzes love in Darwinian terms:",
      "question_template": "George Stirling gave a negative review of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Kempton",
        "Wace"
      ],
      "predicates": [
        "MakesCase(x, y) ::: x makes the case for y.",
        "ProceedsScientifically(x, y) ::: x proceeds scientifically and analyzes y in a specific context."
      ],
      "premises": [
        "MakesCase(kempton, feelingAndEmotion) ::: Kempton makes the case for feeling and emotion.",
        "ProceedsScientifically(wace, love) ::: Wace proceeds \"scientifically\" and analyzes love in Darwinian terms."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 44,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 4,
      "paragraph": "The New York Times was less charitable. It opened its review with the terse line, \"The sex problem again.\" It complained that \"Nothing that the scientist says is new, nothing that the poet says is new. The thing has been thrashed out some millions of times... Nor does the unnamed author infuse into either Wace or Kempton anything to give human personality or appeal.... As a story [it] falls flat; as a discussion of a topic as old as interesting, as overworked.\"",
      "question_template": "George Stirling gave a negative review of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The New York Times",
        "The unnamed author",
        "Wace",
        "Kempton"
      ],
      "predicates": [
        "Unoriginal(c) ::: c is unoriginal.",
        "LacksAppeal(c) ::: c lacks appeal.",
        "Complains(c, d) ::: c complains about d.",
        "Review(c, d) ::: c is a review of d.",
        "Author(c, d) ::: c is the author of d.",
        "Publication(c) ::: c is a publication.",
        "TerseLine(c, d) ::: c contains a terse line d.",
        "FallsFlat(c) ::: c falls flat."
      ],
      "premises": [
        "Unoriginal(review) ∧ LacksAppeal(review) ::: The New York Times finds the review unoriginal and lacking appeal.",
        "Complains(newYorkTimes, review) ::: The New York Times complained about the review.",
        "Review(review, topic) ::: The review is of the topic.",
        "TerseLine(review, \"The sex problem again.\") ::: The review contains the terse line \"The sex problem again.\"",
        "FallsFlat(review) ::: The review falls flat.",
        "Conclusion:",
        "Unoriginal(review) ∧ LacksAppeal(review) ::: The review is unoriginal and lacks appeal."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "49": [
    {
      "id": 49,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 0,
      "paragraph": " The novel presents a discussion of the philosophy of love and sex, written in the form of a series of letters between two men, \"Herbert Wace,\" a young scientist, and \"Dane Kempton,\" an elderly poet. Writer Jack London wrote \"Wace's\" letters, and Anna Strunsky wrote \"Kempton's.\" In the late 19th century, the authors were part of a San Francisco radical literary group known as \"The Crowd.\"",
      "question_template": "[[CANDIDATE_ANSWER]] describes Herbert Wace's character.",
      "candidate_answers": [
        "- A young scientist",
        "- Wace's letters"
      ],
      "predicates": [
        "PhilosophyOfLoveAndSex(x) ::: x discusses the philosophy of love and sex.",
        "WrittenInLetters(x) ::: x is written in the form of letters.",
        "Author(x, y) ::: x is the author of y.",
        "PartOfGroup(x, y) ::: x is part of group y.",
        "YoungScientist(x) ::: x is a young scientist.",
        "ElderlyPoet(x) ::: x is an elderly poet.",
        "PublicationDate(x, y) ::: x is published in year y."
      ],
      "premises": [
        "PhilosophyOfLoveAndSex(novel) ::: The novel presents a discussion of the philosophy of love and sex.",
        "WrittenInLetters(novel) ::: The novel is written in the form of a series of letters.",
        "Author(london, waceLetters) ::: Jack London wrote \"Wace's\" letters.",
        "Author(strunsky, kemptonLetters) ::: Anna Strunsky wrote \"Kempton's\" letters.",
        "YoungScientist(herbertWace) ::: Herbert Wace is a young scientist.",
        "ElderlyPoet(daneKempton) ::: Dane Kempton is an elderly poet.",
        "PartOfGroup(london, crowd) ::: Jack London was part of \"The Crowd.\"",
        "PartOfGroup(strunsky, crowd) ::: Anna Strunsky was part of \"The Crowd.\"",
        "PublicationDate(waceLetters, d1) ::: \"Wace's\" letters were published in 1916.",
        "PublicationDate(kemptonLetters, d2) ::: \"Kempton's\" letters were published in 1917.",
        "Conclusion:",
        "Author(london, waceLetters) ∧ Author(strunsky, kemptonLetters) ::: Jack London and Anna Strunsky are the authors of \"Wace's\" and \"Kempton's\" letters, respectively."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 49,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 4,
      "paragraph": "The New York Times was less charitable. It opened its review with the terse line, \"The sex problem again.\" It complained that \"Nothing that the scientist says is new, nothing that the poet says is new. The thing has been thrashed out some millions of times... Nor does the unnamed author infuse into either Wace or Kempton anything to give human personality or appeal.... As a story [it] falls flat; as a discussion of a topic as old as interesting, as overworked.\"",
      "question_template": "[[CANDIDATE_ANSWER]] describes Herbert Wace's character.",
      "candidate_answers": [
        "- Nothing that the scientist says is new",
        "- Nothing that the poet says is new",
        "- Nor does the unnamed author infuse into either Wace or Kempton anything to give human personality or appeal",
        "- As a story [it] falls flat"
      ],
      "predicates": [
        "Unoriginal(c) ::: c is unoriginal.",
        "LacksAppeal(c) ::: c lacks appeal.",
        "Complains(c, d) ::: c complains about d.",
        "Review(c, d) ::: c is a review of d.",
        "Author(c, d) ::: c is the author of d.",
        "Publication(c) ::: c is a publication.",
        "TerseLine(c, d) ::: c contains a terse line d.",
        "FallsFlat(c) ::: c falls flat."
      ],
      "premises": [
        "Unoriginal(review) ∧ LacksAppeal(review) ::: The New York Times finds the review unoriginal and lacking appeal.",
        "Complains(newYorkTimes, review) ::: The New York Times complained about the review.",
        "Review(review, topic) ::: The review is of the topic.",
        "TerseLine(review, \"The sex problem again.\") ::: The review contains the terse line \"The sex problem again.\"",
        "FallsFlat(review) ::: The review falls flat.",
        "Conclusion:",
        "Unoriginal(review) ∧ LacksAppeal(review) ::: The review is unoriginal and lacks appeal."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "50": [
    {
      "id": 50,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 4,
      "paragraph": "The New York Times was less charitable. It opened its review with the terse line, \"The sex problem again.\" It complained that \"Nothing that the scientist says is new, nothing that the poet says is new. The thing has been thrashed out some millions of times... Nor does the unnamed author infuse into either Wace or Kempton anything to give human personality or appeal.... As a story [it] falls flat; as a discussion of a topic as old as interesting, as overworked.\"",
      "question_template": "Dane Kempton's character can be described as [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The unnamed author infuse into either Wace or Kempton anything to give human personality or appeal",
        "As a story [it] falls flat; as a discussion of a topic as old as interesting, as overworked"
      ],
      "predicates": [
        "Unoriginal(c) ::: c is unoriginal.",
        "LacksAppeal(c) ::: c lacks appeal.",
        "Complains(c, d) ::: c complains about d.",
        "Review(c, d) ::: c is a review of d.",
        "Author(c, d) ::: c is the author of d.",
        "Publication(c) ::: c is a publication.",
        "TerseLine(c, d) ::: c contains a terse line d.",
        "FallsFlat(c) ::: c falls flat."
      ],
      "premises": [
        "Unoriginal(review) ∧ LacksAppeal(review) ::: The New York Times finds the review unoriginal and lacking appeal.",
        "Complains(newYorkTimes, review) ::: The New York Times complained about the review.",
        "Review(review, topic) ::: The review is of the topic.",
        "TerseLine(review, \"The sex problem again.\") ::: The review contains the terse line \"The sex problem again.\"",
        "FallsFlat(review) ::: The review falls flat.",
        "Conclusion:",
        "Unoriginal(review) ∧ LacksAppeal(review) ::: The review is unoriginal and lacks appeal."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 50,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 5,
      "paragraph": "Joseph Noel says that George Sterling described London's portion of the book, as \"a spiritual misprint, a typographical error half a volume long\" and says \"His vocabulary, in the letters of Herbert Wace, sounds as if taken that day from an encyclopedia by a conscientious sophomore.\"",
      "question_template": "Dane Kempton's character can be described as [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Joseph Noel says that George Sterling described London's portion of the book, as \"a spiritual misprint, a typographical error half a volume long\"",
        "His vocabulary, in the letters of Herbert Wace, sounds as if taken that day from an encyclopedia by a conscientious sophomore."
      ],
      "predicates": [
        "Describes(x, y) ::: x describes y.",
        "SpiritualMisprint(x) ::: x is a spiritual misprint.",
        "TypographicalError(x) ::: x is a typographical error.",
        "VocabFromEncyclopedia(x) ::: x's vocabulary sounds as if taken from an encyclopedia.",
        "ConscientiousSophomore(x) ::: x is a conscientious sophomore."
      ],
      "premises": [
        "Describes(georgeSterling, londonPortion) ∧ SpiritualMisprint(londonPortion) ∧ TypographicalError(londonPortion) ::: George Sterling described London's portion of the book as \"a spiritual misprint, a typographical error half a volume long.\"",
        "VocabFromEncyclopedia(herbertWace) ∧ ConscientiousSophomore(herbertWace) ::: His vocabulary, in the letters of Herbert Wace, sounds as if taken that day from an encyclopedia by a conscientious sophomore."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "51": [
    {
      "id": 51,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 0,
      "paragraph": " The novel presents a discussion of the philosophy of love and sex, written in the form of a series of letters between two men, \"Herbert Wace,\" a young scientist, and \"Dane Kempton,\" an elderly poet. Writer Jack London wrote \"Wace's\" letters, and Anna Strunsky wrote \"Kempton's.\" In the late 19th century, the authors were part of a San Francisco radical literary group known as \"The Crowd.\"",
      "question_template": "The two men were discussing [[CANDIDATE_ANSWER]] in their letters.",
      "candidate_answers": [
        "the philosophy of love and sex"
      ],
      "predicates": [
        "PhilosophyOfLoveAndSex(x) ::: x discusses the philosophy of love and sex.",
        "WrittenInLetters(x) ::: x is written in the form of letters.",
        "Author(x, y) ::: x is the author of y.",
        "PartOfGroup(x, y) ::: x is part of group y.",
        "YoungScientist(x) ::: x is a young scientist.",
        "ElderlyPoet(x) ::: x is an elderly poet.",
        "PublicationDate(x, y) ::: x is published in year y."
      ],
      "premises": [
        "PhilosophyOfLoveAndSex(novel) ::: The novel presents a discussion of the philosophy of love and sex.",
        "WrittenInLetters(novel) ::: The novel is written in the form of a series of letters.",
        "Author(london, waceLetters) ::: Jack London wrote \"Wace's\" letters.",
        "Author(strunsky, kemptonLetters) ::: Anna Strunsky wrote \"Kempton's\" letters.",
        "YoungScientist(herbertWace) ::: Herbert Wace is a young scientist.",
        "ElderlyPoet(daneKempton) ::: Dane Kempton is an elderly poet.",
        "PartOfGroup(london, crowd) ::: Jack London was part of \"The Crowd.\"",
        "PartOfGroup(strunsky, crowd) ::: Anna Strunsky was part of \"The Crowd.\"",
        "PublicationDate(waceLetters, d1) ::: \"Wace's\" letters were published in 1916.",
        "PublicationDate(kemptonLetters, d2) ::: \"Kempton's\" letters were published in 1917.",
        "Conclusion:",
        "Author(london, waceLetters) ∧ Author(strunsky, kemptonLetters) ::: Jack London and Anna Strunsky are the authors of \"Wace's\" and \"Kempton's\" letters, respectively."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 51,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 4,
      "paragraph": "The New York Times was less charitable. It opened its review with the terse line, \"The sex problem again.\" It complained that \"Nothing that the scientist says is new, nothing that the poet says is new. The thing has been thrashed out some millions of times... Nor does the unnamed author infuse into either Wace or Kempton anything to give human personality or appeal.... As a story [it] falls flat; as a discussion of a topic as old as interesting, as overworked.\"",
      "question_template": "The two men were discussing [[CANDIDATE_ANSWER]] in their letters.",
      "candidate_answers": [
        "The sex problem",
        "A discussion of a topic as old as interesting, as overworked"
      ],
      "predicates": [
        "Unoriginal(c) ::: c is unoriginal.",
        "LacksAppeal(c) ::: c lacks appeal.",
        "Complains(c, d) ::: c complains about d.",
        "Review(c, d) ::: c is a review of d.",
        "Author(c, d) ::: c is the author of d.",
        "Publication(c) ::: c is a publication.",
        "TerseLine(c, d) ::: c contains a terse line d.",
        "FallsFlat(c) ::: c falls flat."
      ],
      "premises": [
        "Unoriginal(review) ∧ LacksAppeal(review) ::: The New York Times finds the review unoriginal and lacking appeal.",
        "Complains(newYorkTimes, review) ::: The New York Times complained about the review.",
        "Review(review, topic) ::: The review is of the topic.",
        "TerseLine(review, \"The sex problem again.\") ::: The review contains the terse line \"The sex problem again.\"",
        "FallsFlat(review) ::: The review falls flat.",
        "Conclusion:",
        "Unoriginal(review) ∧ LacksAppeal(review) ::: The review is unoriginal and lacks appeal."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 51,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 5,
      "paragraph": "Joseph Noel says that George Sterling described London's portion of the book, as \"a spiritual misprint, a typographical error half a volume long\" and says \"His vocabulary, in the letters of Herbert Wace, sounds as if taken that day from an encyclopedia by a conscientious sophomore.\"",
      "question_template": "The two men were discussing [[CANDIDATE_ANSWER]] in their letters.",
      "candidate_answers": [
        "His vocabulary, in the letters of Herbert Wace, sounds as if taken that day from an encyclopedia by a conscientious sophomore."
      ],
      "predicates": [
        "Describes(x, y) ::: x describes y.",
        "SpiritualMisprint(x) ::: x is a spiritual misprint.",
        "TypographicalError(x) ::: x is a typographical error.",
        "VocabFromEncyclopedia(x) ::: x's vocabulary sounds as if taken from an encyclopedia.",
        "ConscientiousSophomore(x) ::: x is a conscientious sophomore."
      ],
      "premises": [
        "Describes(georgeSterling, londonPortion) ∧ SpiritualMisprint(londonPortion) ∧ TypographicalError(londonPortion) ::: George Sterling described London's portion of the book as \"a spiritual misprint, a typographical error half a volume long.\"",
        "VocabFromEncyclopedia(herbertWace) ∧ ConscientiousSophomore(herbertWace) ::: His vocabulary, in the letters of Herbert Wace, sounds as if taken that day from an encyclopedia by a conscientious sophomore."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 51,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 7,
      "paragraph": "In the novel, London expresses his theories about the \"Mother-Woman\" and the \"Mate-Woman,\" roles which seem to correspond to the roles played by his first wife and his second. After London's death in 1916, Strunsky published a memoir in The Masses in 1917 about their relationship.",
      "question_template": "The two men were discussing [[CANDIDATE_ANSWER]] in their letters.",
      "candidate_answers": [
        "The \"Mother-Woman\" and the \"Mate-Woman\"",
        "Roles which seem to correspond to the roles played by his first wife and his second"
      ],
      "predicates": [
        "ExpressesTheories(x) ::: x expresses theories about the \"Mother-Woman\" and the \"Mate-Woman.\"",
        "Published(x, y) ::: x published y.",
        "Author(x, y) ::: x is the author of y.",
        "Relationship(x, y) ::: x and y have a relationship.",
        "Wife(x) ::: x is a wife."
      ],
      "premises": [
        "ExpressesTheories(a_1) ::: London expresses his theories about the \"Mother-Woman\" and the \"Mate-Woman.\"",
        "Published(a_2, c_0) ::: Strunsky published a memoir in The Masses about their relationship.",
        "Author(a_2, c_0) ::: Strunsky is the author of the memoir.",
        "Relationship(a_1, a_3) ::: London has a relationship with his first wife.",
        "Relationship(a_1, a_4) ::: London has a relationship with his second wife.",
        "Wife(a_3) ::: a_3 is the first wife of London.",
        "Wife(a_4) ::: a_4 is the second wife of London.",
        "Publish(c_0, c_1) ::: The memoir was published in The Masses.",
        "Publish(c_0, d_2) ::: The memoir was published in 1917.",
        "Died(a_1, d_1) ::: London died in 1916.",
        "Conclusion:",
        "ExpressesTheories(a_1) ::: London expresses theories about the \"Mother-Woman\" and the \"Mate-Woman.\"",
        "Relationship(a_1, a_3) ∧ Relationship(a_1, a_4) ::: London has relationships with both his first and second wives."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "52": [
    {
      "id": 52,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 0,
      "paragraph": " The novel presents a discussion of the philosophy of love and sex, written in the form of a series of letters between two men, \"Herbert Wace,\" a young scientist, and \"Dane Kempton,\" an elderly poet. Writer Jack London wrote \"Wace's\" letters, and Anna Strunsky wrote \"Kempton's.\" In the late 19th century, the authors were part of a San Francisco radical literary group known as \"The Crowd.\"",
      "question_template": "[[CANDIDATE_ANSWER]] is the character that Jack London plays.",
      "candidate_answers": [
        "Herbert Wace",
        "Dane Kempton",
        "A young scientist",
        "An elderly poet",
        "Part of a San Francisco radical literary group known as \"The Crowd\""
      ],
      "predicates": [
        "PhilosophyOfLoveAndSex(x) ::: x discusses the philosophy of love and sex.",
        "WrittenInLetters(x) ::: x is written in the form of letters.",
        "Author(x, y) ::: x is the author of y.",
        "PartOfGroup(x, y) ::: x is part of group y.",
        "YoungScientist(x) ::: x is a young scientist.",
        "ElderlyPoet(x) ::: x is an elderly poet.",
        "PublicationDate(x, y) ::: x is published in year y."
      ],
      "premises": [
        "PhilosophyOfLoveAndSex(novel) ::: The novel presents a discussion of the philosophy of love and sex.",
        "WrittenInLetters(novel) ::: The novel is written in the form of a series of letters.",
        "Author(london, waceLetters) ::: Jack London wrote \"Wace's\" letters.",
        "Author(strunsky, kemptonLetters) ::: Anna Strunsky wrote \"Kempton's\" letters.",
        "YoungScientist(herbertWace) ::: Herbert Wace is a young scientist.",
        "ElderlyPoet(daneKempton) ::: Dane Kempton is an elderly poet.",
        "PartOfGroup(london, crowd) ::: Jack London was part of \"The Crowd.\"",
        "PartOfGroup(strunsky, crowd) ::: Anna Strunsky was part of \"The Crowd.\"",
        "PublicationDate(waceLetters, d1) ::: \"Wace's\" letters were published in 1916.",
        "PublicationDate(kemptonLetters, d2) ::: \"Kempton's\" letters were published in 1917.",
        "Conclusion:",
        "Author(london, waceLetters) ∧ Author(strunsky, kemptonLetters) ::: Jack London and Anna Strunsky are the authors of \"Wace's\" and \"Kempton's\" letters, respectively."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 52,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 7,
      "paragraph": "In the novel, London expresses his theories about the \"Mother-Woman\" and the \"Mate-Woman,\" roles which seem to correspond to the roles played by his first wife and his second. After London's death in 1916, Strunsky published a memoir in The Masses in 1917 about their relationship.",
      "question_template": "[[CANDIDATE_ANSWER]] is the character that Jack London plays.",
      "candidate_answers": [
        "Jack London",
        "The \"Mother-Woman\" and the \"Mate-Woman\""
      ],
      "predicates": [
        "ExpressesTheories(x) ::: x expresses theories about the \"Mother-Woman\" and the \"Mate-Woman.\"",
        "Published(x, y) ::: x published y.",
        "Author(x, y) ::: x is the author of y.",
        "Relationship(x, y) ::: x and y have a relationship.",
        "Wife(x) ::: x is a wife."
      ],
      "premises": [
        "ExpressesTheories(a_1) ::: London expresses his theories about the \"Mother-Woman\" and the \"Mate-Woman.\"",
        "Published(a_2, c_0) ::: Strunsky published a memoir in The Masses about their relationship.",
        "Author(a_2, c_0) ::: Strunsky is the author of the memoir.",
        "Relationship(a_1, a_3) ::: London has a relationship with his first wife.",
        "Relationship(a_1, a_4) ::: London has a relationship with his second wife.",
        "Wife(a_3) ::: a_3 is the first wife of London.",
        "Wife(a_4) ::: a_4 is the second wife of London.",
        "Publish(c_0, c_1) ::: The memoir was published in The Masses.",
        "Publish(c_0, d_2) ::: The memoir was published in 1917.",
        "Died(a_1, d_1) ::: London died in 1916.",
        "Conclusion:",
        "ExpressesTheories(a_1) ::: London expresses theories about the \"Mother-Woman\" and the \"Mate-Woman.\"",
        "Relationship(a_1, a_3) ∧ Relationship(a_1, a_4) ::: London has relationships with both his first and second wives."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "53": [
    {
      "id": 53,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 0,
      "paragraph": " The novel presents a discussion of the philosophy of love and sex, written in the form of a series of letters between two men, \"Herbert Wace,\" a young scientist, and \"Dane Kempton,\" an elderly poet. Writer Jack London wrote \"Wace's\" letters, and Anna Strunsky wrote \"Kempton's.\" In the late 19th century, the authors were part of a San Francisco radical literary group known as \"The Crowd.\"",
      "question_template": "[[CANDIDATE_ANSWER]] is the character that Anna Strunsky plays.",
      "candidate_answers": [
        "Kempton's"
      ],
      "predicates": [
        "PhilosophyOfLoveAndSex(x) ::: x discusses the philosophy of love and sex.",
        "WrittenInLetters(x) ::: x is written in the form of letters.",
        "Author(x, y) ::: x is the author of y.",
        "PartOfGroup(x, y) ::: x is part of group y.",
        "YoungScientist(x) ::: x is a young scientist.",
        "ElderlyPoet(x) ::: x is an elderly poet.",
        "PublicationDate(x, y) ::: x is published in year y."
      ],
      "premises": [
        "PhilosophyOfLoveAndSex(novel) ::: The novel presents a discussion of the philosophy of love and sex.",
        "WrittenInLetters(novel) ::: The novel is written in the form of a series of letters.",
        "Author(london, waceLetters) ::: Jack London wrote \"Wace's\" letters.",
        "Author(strunsky, kemptonLetters) ::: Anna Strunsky wrote \"Kempton's\" letters.",
        "YoungScientist(herbertWace) ::: Herbert Wace is a young scientist.",
        "ElderlyPoet(daneKempton) ::: Dane Kempton is an elderly poet.",
        "PartOfGroup(london, crowd) ::: Jack London was part of \"The Crowd.\"",
        "PartOfGroup(strunsky, crowd) ::: Anna Strunsky was part of \"The Crowd.\"",
        "PublicationDate(waceLetters, d1) ::: \"Wace's\" letters were published in 1916.",
        "PublicationDate(kemptonLetters, d2) ::: \"Kempton's\" letters were published in 1917.",
        "Conclusion:",
        "Author(london, waceLetters) ∧ Author(strunsky, kemptonLetters) ::: Jack London and Anna Strunsky are the authors of \"Wace's\" and \"Kempton's\" letters, respectively."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "55": [
    {
      "id": 55,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 1,
      "paragraph": "Kempton makes the case for feeling and emotion, while Wace proceeds \"scientifically\" and analyzes love in Darwinian terms:",
      "question_template": "[[CANDIDATE_ANSWER]] is believed by Wace to be NOT needed in a relationship.",
      "candidate_answers": [
        "scientifically",
        "analyzes love in Darwinian terms"
      ],
      "predicates": [
        "MakesCase(x, y) ::: x makes the case for y.",
        "ProceedsScientifically(x, y) ::: x proceeds scientifically and analyzes y in a specific context."
      ],
      "premises": [
        "MakesCase(kempton, feelingAndEmotion) ::: Kempton makes the case for feeling and emotion.",
        "ProceedsScientifically(wace, love) ::: Wace proceeds \"scientifically\" and analyzes love in Darwinian terms."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "57": [
    {
      "id": 57,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 3,
      "paragraph": "Initially the public was piqued by the anonymity of the writers and the book was moderately successful. London biographer Russ Kingman praised the book; he quoted the Buffalo Commercial as admiring the \"sheer charm of its prose\" and saying the book \"holds firmly its place in the front rank of the best of the season's publications.\"",
      "question_template": "Critics responded to the letters by saying [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- The book was moderately successful.",
        "- Russ Kingman praised the book.",
        "- The Buffalo Commercial admired the \"sheer charm of its prose.\"",
        "- The book \"holds firmly its place in the front rank of the best of the season's publications.\""
      ],
      "predicates": [
        "PiquedPublic(x) ::: The public was piqued by x.",
        "Successful(x) ::: x was moderately successful.",
        "Praises(x, y) ::: x praises y.",
        "Quotes(x, y) ::: x quotes y.",
        "Admires(x, y) ::: x admires y.",
        "HoldsPlace(x, y) ::: x holds firmly its place in y."
      ],
      "premises": [
        "PiquedPublic(book) ∧ Successful(book) ::: Initially, the public was piqued by the anonymity of the writers and the book was moderately successful.",
        "Praises(russKingman, book) ::: London biographer Russ Kingman praised the book.",
        "Quotes(russKingman, buffaloCommercial) ::: He quoted the Buffalo Commercial.",
        "Admires(buffaloCommercial, prose) ::: The Buffalo Commercial admired the \"sheer charm of its prose.\"",
        "HoldsPlace(book, frontRank) ::: The book holds firmly its place in the front rank of the best of the season's publications.",
        "Conclusion:",
        "Praises(russKingman, book) ∧ Admires(buffaloCommercial, prose) ::: Russ Kingman and the Buffalo Commercial both provided positive feedback about the book."
      ],
      "conclusions": [
        "None",
        "Praises(russKingman, book)",
        "None",
        "HoldsPlace(book, frontRank)"
      ]
    },
    {
      "id": 57,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 6,
      "paragraph": "Biographers have been intrigued by The Kempton-Wace Letters for the light it seems to shed on Jack London's life and ideas. Strunsky was named as the co-respondent in Jack London's divorce from his first wife, Bessie, but biographers generally agree that his relation with the younger Strunsky was platonic. They were active in socialism and the literary group, \"The Crowd\", in San Francisco.",
      "question_template": "Critics responded to the letters by saying [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Biographers have been intrigued by The Kempton-Wace Letters for the light it seems to shed on Jack London's life and ideas."
      ],
      "predicates": [
        "Intrigued(a_0, c_0) ::: Biographers are intrigued by a publication.",
        "CoRespondent(a_1, a_2) ::: Jack London is the co-respondent with Strunsky.",
        "Platonic(a_1, a_2) ::: The relationship between Jack London and Strunsky is platonic.",
        "ActiveIn(a_1, c_1) ::: Jack London is active in a literary group.",
        "ActiveIn(a_2, c_1) ::: Strunsky is active in a literary group."
      ],
      "premises": [
        "Intrigued(biographers, TheKemptonWaceLetters) ::: Biographers have been intrigued by The Kempton-Wace Letters for the light it seems to shed on Jack London's life and ideas.",
        "CoRespondent(a_1, a_2) ::: Strunsky was named as the co-respondent in Jack London's divorce from his first wife, Bessie.",
        "Platonic(a_1, a_2) ::: Biographers generally agree that Jack London's relation with the younger Strunsky was platonic.",
        "ActiveIn(a_1, TheCrowd) ∧ ActiveIn(a_2, TheCrowd) ::: They were active in socialism and the literary group, \"The Crowd\", in San Francisco."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "58": [
    {
      "id": 58,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 0,
      "paragraph": " The novel presents a discussion of the philosophy of love and sex, written in the form of a series of letters between two men, \"Herbert Wace,\" a young scientist, and \"Dane Kempton,\" an elderly poet. Writer Jack London wrote \"Wace's\" letters, and Anna Strunsky wrote \"Kempton's.\" In the late 19th century, the authors were part of a San Francisco radical literary group known as \"The Crowd.\"",
      "question_template": "The novel is structured around [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "A discussion of the philosophy of love and sex",
        "In the form of a series of letters between two men",
        "\"Wace's\" letters",
        "\"Kempton's\" letters"
      ],
      "predicates": [
        "PhilosophyOfLoveAndSex(x) ::: x discusses the philosophy of love and sex.",
        "WrittenInLetters(x) ::: x is written in the form of letters.",
        "Author(x, y) ::: x is the author of y.",
        "PartOfGroup(x, y) ::: x is part of group y.",
        "YoungScientist(x) ::: x is a young scientist.",
        "ElderlyPoet(x) ::: x is an elderly poet.",
        "PublicationDate(x, y) ::: x is published in year y."
      ],
      "premises": [
        "PhilosophyOfLoveAndSex(novel) ::: The novel presents a discussion of the philosophy of love and sex.",
        "WrittenInLetters(novel) ::: The novel is written in the form of a series of letters.",
        "Author(london, waceLetters) ::: Jack London wrote \"Wace's\" letters.",
        "Author(strunsky, kemptonLetters) ::: Anna Strunsky wrote \"Kempton's\" letters.",
        "YoungScientist(herbertWace) ::: Herbert Wace is a young scientist.",
        "ElderlyPoet(daneKempton) ::: Dane Kempton is an elderly poet.",
        "PartOfGroup(london, crowd) ::: Jack London was part of \"The Crowd.\"",
        "PartOfGroup(strunsky, crowd) ::: Anna Strunsky was part of \"The Crowd.\"",
        "PublicationDate(waceLetters, d1) ::: \"Wace's\" letters were published in 1916.",
        "PublicationDate(kemptonLetters, d2) ::: \"Kempton's\" letters were published in 1917.",
        "Conclusion:",
        "Author(london, waceLetters) ∧ Author(strunsky, kemptonLetters) ::: Jack London and Anna Strunsky are the authors of \"Wace's\" and \"Kempton's\" letters, respectively."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 58,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 4,
      "paragraph": "The New York Times was less charitable. It opened its review with the terse line, \"The sex problem again.\" It complained that \"Nothing that the scientist says is new, nothing that the poet says is new. The thing has been thrashed out some millions of times... Nor does the unnamed author infuse into either Wace or Kempton anything to give human personality or appeal.... As a story [it] falls flat; as a discussion of a topic as old as interesting, as overworked.\"",
      "question_template": "The novel is structured around [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The sex problem again",
        "Nothing that the scientist says is new, nothing that the poet says is new",
        "The thing has been thrashed out some millions of times",
        "Nor does the unnamed author infuse into either Wace or Kempton anything to give human personality or appeal",
        "As a story [it] falls flat; as a discussion of a topic as old as interesting, as overworked"
      ],
      "predicates": [
        "Unoriginal(c) ::: c is unoriginal.",
        "LacksAppeal(c) ::: c lacks appeal.",
        "Complains(c, d) ::: c complains about d.",
        "Review(c, d) ::: c is a review of d.",
        "Author(c, d) ::: c is the author of d.",
        "Publication(c) ::: c is a publication.",
        "TerseLine(c, d) ::: c contains a terse line d.",
        "FallsFlat(c) ::: c falls flat."
      ],
      "premises": [
        "Unoriginal(review) ∧ LacksAppeal(review) ::: The New York Times finds the review unoriginal and lacking appeal.",
        "Complains(newYorkTimes, review) ::: The New York Times complained about the review.",
        "Review(review, topic) ::: The review is of the topic.",
        "TerseLine(review, \"The sex problem again.\") ::: The review contains the terse line \"The sex problem again.\"",
        "FallsFlat(review) ::: The review falls flat.",
        "Conclusion:",
        "Unoriginal(review) ∧ LacksAppeal(review) ::: The review is unoriginal and lacks appeal."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 58,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 7,
      "paragraph": "In the novel, London expresses his theories about the \"Mother-Woman\" and the \"Mate-Woman,\" roles which seem to correspond to the roles played by his first wife and his second. After London's death in 1916, Strunsky published a memoir in The Masses in 1917 about their relationship.",
      "question_template": "The novel is structured around [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Theories about the \"Mother-Woman\" and the \"Mate-Woman\"",
        "Roles which seem to correspond to the roles played by his first wife and his second",
        "Strunsky published a memoir in The Masses in 1917 about their relationship"
      ],
      "predicates": [
        "ExpressesTheories(x) ::: x expresses theories about the \"Mother-Woman\" and the \"Mate-Woman.\"",
        "Published(x, y) ::: x published y.",
        "Author(x, y) ::: x is the author of y.",
        "Relationship(x, y) ::: x and y have a relationship.",
        "Wife(x) ::: x is a wife."
      ],
      "premises": [
        "ExpressesTheories(a_1) ::: London expresses his theories about the \"Mother-Woman\" and the \"Mate-Woman.\"",
        "Published(a_2, c_0) ::: Strunsky published a memoir in The Masses about their relationship.",
        "Author(a_2, c_0) ::: Strunsky is the author of the memoir.",
        "Relationship(a_1, a_3) ::: London has a relationship with his first wife.",
        "Relationship(a_1, a_4) ::: London has a relationship with his second wife.",
        "Wife(a_3) ::: a_3 is the first wife of London.",
        "Wife(a_4) ::: a_4 is the second wife of London.",
        "Publish(c_0, c_1) ::: The memoir was published in The Masses.",
        "Publish(c_0, d_2) ::: The memoir was published in 1917.",
        "Died(a_1, d_1) ::: London died in 1916.",
        "Conclusion:",
        "ExpressesTheories(a_1) ::: London expresses theories about the \"Mother-Woman\" and the \"Mate-Woman.\"",
        "Relationship(a_1, a_3) ∧ Relationship(a_1, a_4) ::: London has relationships with both his first and second wives."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "60": [
    {
      "id": 60,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 0,
      "paragraph": " The novel presents a discussion of the philosophy of love and sex, written in the form of a series of letters between two men, \"Herbert Wace,\" a young scientist, and \"Dane Kempton,\" an elderly poet. Writer Jack London wrote \"Wace's\" letters, and Anna Strunsky wrote \"Kempton's.\" In the late 19th century, the authors were part of a San Francisco radical literary group known as \"The Crowd.\"",
      "question_template": "[[CANDIDATE_ANSWER]] writes Herbert Wace's letters.",
      "candidate_answers": [
        "Jack London"
      ],
      "predicates": [
        "PhilosophyOfLoveAndSex(x) ::: x discusses the philosophy of love and sex.",
        "WrittenInLetters(x) ::: x is written in the form of letters.",
        "Author(x, y) ::: x is the author of y.",
        "PartOfGroup(x, y) ::: x is part of group y.",
        "YoungScientist(x) ::: x is a young scientist.",
        "ElderlyPoet(x) ::: x is an elderly poet.",
        "PublicationDate(x, y) ::: x is published in year y."
      ],
      "premises": [
        "PhilosophyOfLoveAndSex(novel) ::: The novel presents a discussion of the philosophy of love and sex.",
        "WrittenInLetters(novel) ::: The novel is written in the form of a series of letters.",
        "Author(london, waceLetters) ::: Jack London wrote \"Wace's\" letters.",
        "Author(strunsky, kemptonLetters) ::: Anna Strunsky wrote \"Kempton's\" letters.",
        "YoungScientist(herbertWace) ::: Herbert Wace is a young scientist.",
        "ElderlyPoet(daneKempton) ::: Dane Kempton is an elderly poet.",
        "PartOfGroup(london, crowd) ::: Jack London was part of \"The Crowd.\"",
        "PartOfGroup(strunsky, crowd) ::: Anna Strunsky was part of \"The Crowd.\"",
        "PublicationDate(waceLetters, d1) ::: \"Wace's\" letters were published in 1916.",
        "PublicationDate(kemptonLetters, d2) ::: \"Kempton's\" letters were published in 1917.",
        "Conclusion:",
        "Author(london, waceLetters) ∧ Author(strunsky, kemptonLetters) ::: Jack London and Anna Strunsky are the authors of \"Wace's\" and \"Kempton's\" letters, respectively."
      ],
      "conclusions": [
        "Author(london, waceLetters)"
      ]
    },
    {
      "id": 60,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 1,
      "paragraph": "Kempton makes the case for feeling and emotion, while Wace proceeds \"scientifically\" and analyzes love in Darwinian terms:",
      "question_template": "[[CANDIDATE_ANSWER]] writes Herbert Wace's letters.",
      "candidate_answers": [
        "Kempton",
        "Wace"
      ],
      "predicates": [
        "MakesCase(x, y) ::: x makes the case for y.",
        "ProceedsScientifically(x, y) ::: x proceeds scientifically and analyzes y in a specific context."
      ],
      "premises": [
        "MakesCase(kempton, feelingAndEmotion) ::: Kempton makes the case for feeling and emotion.",
        "ProceedsScientifically(wace, love) ::: Wace proceeds \"scientifically\" and analyzes love in Darwinian terms."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "61": [
    {
      "id": 61,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 0,
      "paragraph": " The novel presents a discussion of the philosophy of love and sex, written in the form of a series of letters between two men, \"Herbert Wace,\" a young scientist, and \"Dane Kempton,\" an elderly poet. Writer Jack London wrote \"Wace's\" letters, and Anna Strunsky wrote \"Kempton's.\" In the late 19th century, the authors were part of a San Francisco radical literary group known as \"The Crowd.\"",
      "question_template": "The perspectives of the two letters can be summarized as [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The philosophy of love and sex",
        "A young scientist",
        "An elderly poet",
        "Wace's letters",
        "Kempton's letters",
        "The Crowd"
      ],
      "predicates": [
        "PhilosophyOfLoveAndSex(x) ::: x discusses the philosophy of love and sex.",
        "WrittenInLetters(x) ::: x is written in the form of letters.",
        "Author(x, y) ::: x is the author of y.",
        "PartOfGroup(x, y) ::: x is part of group y.",
        "YoungScientist(x) ::: x is a young scientist.",
        "ElderlyPoet(x) ::: x is an elderly poet.",
        "PublicationDate(x, y) ::: x is published in year y."
      ],
      "premises": [
        "PhilosophyOfLoveAndSex(novel) ::: The novel presents a discussion of the philosophy of love and sex.",
        "WrittenInLetters(novel) ::: The novel is written in the form of a series of letters.",
        "Author(london, waceLetters) ::: Jack London wrote \"Wace's\" letters.",
        "Author(strunsky, kemptonLetters) ::: Anna Strunsky wrote \"Kempton's\" letters.",
        "YoungScientist(herbertWace) ::: Herbert Wace is a young scientist.",
        "ElderlyPoet(daneKempton) ::: Dane Kempton is an elderly poet.",
        "PartOfGroup(london, crowd) ::: Jack London was part of \"The Crowd.\"",
        "PartOfGroup(strunsky, crowd) ::: Anna Strunsky was part of \"The Crowd.\"",
        "PublicationDate(waceLetters, d1) ::: \"Wace's\" letters were published in 1916.",
        "PublicationDate(kemptonLetters, d2) ::: \"Kempton's\" letters were published in 1917.",
        "Conclusion:",
        "Author(london, waceLetters) ∧ Author(strunsky, kemptonLetters) ::: Jack London and Anna Strunsky are the authors of \"Wace's\" and \"Kempton's\" letters, respectively."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 61,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 4,
      "paragraph": "The New York Times was less charitable. It opened its review with the terse line, \"The sex problem again.\" It complained that \"Nothing that the scientist says is new, nothing that the poet says is new. The thing has been thrashed out some millions of times... Nor does the unnamed author infuse into either Wace or Kempton anything to give human personality or appeal.... As a story [it] falls flat; as a discussion of a topic as old as interesting, as overworked.\"",
      "question_template": "The perspectives of the two letters can be summarized as [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The New York Times was less charitable",
        "It opened its review with the terse line, \"The sex problem again.\"",
        "It complained that \"Nothing that the scientist says is new, nothing that the poet says is new.\"",
        "The thing has been thrashed out some millions of times...",
        "Nor does the unnamed author infuse into either Wace or Kempton anything to give human personality or appeal.",
        "As a story [it] falls flat; as a discussion of a topic as old as interesting, as overworked."
      ],
      "predicates": [
        "Unoriginal(c) ::: c is unoriginal.",
        "LacksAppeal(c) ::: c lacks appeal.",
        "Complains(c, d) ::: c complains about d.",
        "Review(c, d) ::: c is a review of d.",
        "Author(c, d) ::: c is the author of d.",
        "Publication(c) ::: c is a publication.",
        "TerseLine(c, d) ::: c contains a terse line d.",
        "FallsFlat(c) ::: c falls flat."
      ],
      "premises": [
        "Unoriginal(review) ∧ LacksAppeal(review) ::: The New York Times finds the review unoriginal and lacking appeal.",
        "Complains(newYorkTimes, review) ::: The New York Times complained about the review.",
        "Review(review, topic) ::: The review is of the topic.",
        "TerseLine(review, \"The sex problem again.\") ::: The review contains the terse line \"The sex problem again.\"",
        "FallsFlat(review) ::: The review falls flat.",
        "Conclusion:",
        "Unoriginal(review) ∧ LacksAppeal(review) ::: The review is unoriginal and lacks appeal."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 61,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 5,
      "paragraph": "Joseph Noel says that George Sterling described London's portion of the book, as \"a spiritual misprint, a typographical error half a volume long\" and says \"His vocabulary, in the letters of Herbert Wace, sounds as if taken that day from an encyclopedia by a conscientious sophomore.\"",
      "question_template": "The perspectives of the two letters can be summarized as [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "\"George Sterling described London's portion of the book, as 'a spiritual misprint, a typographical error half a volume long'\"",
        "\"His vocabulary, in the letters of Herbert Wace, sounds as if taken that day from an encyclopedia by a conscientious sophomore.\""
      ],
      "predicates": [
        "Describes(x, y) ::: x describes y.",
        "SpiritualMisprint(x) ::: x is a spiritual misprint.",
        "TypographicalError(x) ::: x is a typographical error.",
        "VocabFromEncyclopedia(x) ::: x's vocabulary sounds as if taken from an encyclopedia.",
        "ConscientiousSophomore(x) ::: x is a conscientious sophomore."
      ],
      "premises": [
        "Describes(georgeSterling, londonPortion) ∧ SpiritualMisprint(londonPortion) ∧ TypographicalError(londonPortion) ::: George Sterling described London's portion of the book as \"a spiritual misprint, a typographical error half a volume long.\"",
        "VocabFromEncyclopedia(herbertWace) ∧ ConscientiousSophomore(herbertWace) ::: His vocabulary, in the letters of Herbert Wace, sounds as if taken that day from an encyclopedia by a conscientious sophomore."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 61,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 6,
      "paragraph": "Biographers have been intrigued by The Kempton-Wace Letters for the light it seems to shed on Jack London's life and ideas. Strunsky was named as the co-respondent in Jack London's divorce from his first wife, Bessie, but biographers generally agree that his relation with the younger Strunsky was platonic. They were active in socialism and the literary group, \"The Crowd\", in San Francisco.",
      "question_template": "The perspectives of the two letters can be summarized as [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The Kempton-Wace Letters for the light it seems to shed on Jack London's life and ideas",
        "Biographers generally agree that his relation with the younger Strunsky was platonic",
        "They were active in socialism and the literary group, \"The Crowd\", in San Francisco"
      ],
      "predicates": [
        "Intrigued(a_0, c_0) ::: Biographers are intrigued by a publication.",
        "CoRespondent(a_1, a_2) ::: Jack London is the co-respondent with Strunsky.",
        "Platonic(a_1, a_2) ::: The relationship between Jack London and Strunsky is platonic.",
        "ActiveIn(a_1, c_1) ::: Jack London is active in a literary group.",
        "ActiveIn(a_2, c_1) ::: Strunsky is active in a literary group."
      ],
      "premises": [
        "Intrigued(biographers, TheKemptonWaceLetters) ::: Biographers have been intrigued by The Kempton-Wace Letters for the light it seems to shed on Jack London's life and ideas.",
        "CoRespondent(a_1, a_2) ::: Strunsky was named as the co-respondent in Jack London's divorce from his first wife, Bessie.",
        "Platonic(a_1, a_2) ::: Biographers generally agree that Jack London's relation with the younger Strunsky was platonic.",
        "ActiveIn(a_1, TheCrowd) ∧ ActiveIn(a_2, TheCrowd) ::: They were active in socialism and the literary group, \"The Crowd\", in San Francisco."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 61,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 7,
      "paragraph": "In the novel, London expresses his theories about the \"Mother-Woman\" and the \"Mate-Woman,\" roles which seem to correspond to the roles played by his first wife and his second. After London's death in 1916, Strunsky published a memoir in The Masses in 1917 about their relationship.",
      "question_template": "The perspectives of the two letters can be summarized as [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The \"Mother-Woman\" and the \"Mate-Woman\"",
        "Roles which seem to correspond to the roles played by his first wife and his second",
        "Strunsky published a memoir in The Masses in 1917 about their relationship"
      ],
      "predicates": [
        "ExpressesTheories(x) ::: x expresses theories about the \"Mother-Woman\" and the \"Mate-Woman.\"",
        "Published(x, y) ::: x published y.",
        "Author(x, y) ::: x is the author of y.",
        "Relationship(x, y) ::: x and y have a relationship.",
        "Wife(x) ::: x is a wife."
      ],
      "premises": [
        "ExpressesTheories(a_1) ::: London expresses his theories about the \"Mother-Woman\" and the \"Mate-Woman.\"",
        "Published(a_2, c_0) ::: Strunsky published a memoir in The Masses about their relationship.",
        "Author(a_2, c_0) ::: Strunsky is the author of the memoir.",
        "Relationship(a_1, a_3) ::: London has a relationship with his first wife.",
        "Relationship(a_1, a_4) ::: London has a relationship with his second wife.",
        "Wife(a_3) ::: a_3 is the first wife of London.",
        "Wife(a_4) ::: a_4 is the second wife of London.",
        "Publish(c_0, c_1) ::: The memoir was published in The Masses.",
        "Publish(c_0, d_2) ::: The memoir was published in 1917.",
        "Died(a_1, d_1) ::: London died in 1916.",
        "Conclusion:",
        "ExpressesTheories(a_1) ::: London expresses theories about the \"Mother-Woman\" and the \"Mate-Woman.\"",
        "Relationship(a_1, a_3) ∧ Relationship(a_1, a_4) ::: London has relationships with both his first and second wives."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "62": [
    {
      "id": 62,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 1,
      "paragraph": "Kempton makes the case for feeling and emotion, while Wace proceeds \"scientifically\" and analyzes love in Darwinian terms:",
      "question_template": "[[CANDIDATE_ANSWER]] writes Dane Kempton's letters.",
      "candidate_answers": [
        "Kempton",
        "Wace"
      ],
      "predicates": [
        "MakesCase(x, y) ::: x makes the case for y.",
        "ProceedsScientifically(x, y) ::: x proceeds scientifically and analyzes y in a specific context."
      ],
      "premises": [
        "MakesCase(kempton, feelingAndEmotion) ::: Kempton makes the case for feeling and emotion.",
        "ProceedsScientifically(wace, love) ::: Wace proceeds \"scientifically\" and analyzes love in Darwinian terms."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "64": [
    {
      "id": 64,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 0,
      "paragraph": " The novel presents a discussion of the philosophy of love and sex, written in the form of a series of letters between two men, \"Herbert Wace,\" a young scientist, and \"Dane Kempton,\" an elderly poet. Writer Jack London wrote \"Wace's\" letters, and Anna Strunsky wrote \"Kempton's.\" In the late 19th century, the authors were part of a San Francisco radical literary group known as \"The Crowd.\"",
      "question_template": "The public's interest is initially piqued by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The novel presents a discussion of the philosophy of love and sex",
        "Written in the form of a series of letters between two men",
        "The authors were part of a San Francisco radical literary group known as \"The Crowd\""
      ],
      "predicates": [
        "PhilosophyOfLoveAndSex(x) ::: x discusses the philosophy of love and sex.",
        "WrittenInLetters(x) ::: x is written in the form of letters.",
        "Author(x, y) ::: x is the author of y.",
        "PartOfGroup(x, y) ::: x is part of group y.",
        "YoungScientist(x) ::: x is a young scientist.",
        "ElderlyPoet(x) ::: x is an elderly poet.",
        "PublicationDate(x, y) ::: x is published in year y."
      ],
      "premises": [
        "PhilosophyOfLoveAndSex(novel) ::: The novel presents a discussion of the philosophy of love and sex.",
        "WrittenInLetters(novel) ::: The novel is written in the form of a series of letters.",
        "Author(london, waceLetters) ::: Jack London wrote \"Wace's\" letters.",
        "Author(strunsky, kemptonLetters) ::: Anna Strunsky wrote \"Kempton's\" letters.",
        "YoungScientist(herbertWace) ::: Herbert Wace is a young scientist.",
        "ElderlyPoet(daneKempton) ::: Dane Kempton is an elderly poet.",
        "PartOfGroup(london, crowd) ::: Jack London was part of \"The Crowd.\"",
        "PartOfGroup(strunsky, crowd) ::: Anna Strunsky was part of \"The Crowd.\"",
        "PublicationDate(waceLetters, d1) ::: \"Wace's\" letters were published in 1916.",
        "PublicationDate(kemptonLetters, d2) ::: \"Kempton's\" letters were published in 1917.",
        "Conclusion:",
        "Author(london, waceLetters) ∧ Author(strunsky, kemptonLetters) ::: Jack London and Anna Strunsky are the authors of \"Wace's\" and \"Kempton's\" letters, respectively."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 64,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 1,
      "paragraph": "Kempton makes the case for feeling and emotion, while Wace proceeds \"scientifically\" and analyzes love in Darwinian terms:",
      "question_template": "The public's interest is initially piqued by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Kempton makes the case for feeling and emotion",
        "Wace proceeds \"scientifically\" and analyzes love in Darwinian terms"
      ],
      "predicates": [
        "MakesCase(x, y) ::: x makes the case for y.",
        "ProceedsScientifically(x, y) ::: x proceeds scientifically and analyzes y in a specific context."
      ],
      "premises": [
        "MakesCase(kempton, feelingAndEmotion) ::: Kempton makes the case for feeling and emotion.",
        "ProceedsScientifically(wace, love) ::: Wace proceeds \"scientifically\" and analyzes love in Darwinian terms."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 64,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 4,
      "paragraph": "The New York Times was less charitable. It opened its review with the terse line, \"The sex problem again.\" It complained that \"Nothing that the scientist says is new, nothing that the poet says is new. The thing has been thrashed out some millions of times... Nor does the unnamed author infuse into either Wace or Kempton anything to give human personality or appeal.... As a story [it] falls flat; as a discussion of a topic as old as interesting, as overworked.\"",
      "question_template": "The public's interest is initially piqued by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The sex problem again",
        "The thing has been thrashed out some millions of times",
        "As a discussion of a topic as old as interesting, as overworked"
      ],
      "predicates": [
        "Unoriginal(c) ::: c is unoriginal.",
        "LacksAppeal(c) ::: c lacks appeal.",
        "Complains(c, d) ::: c complains about d.",
        "Review(c, d) ::: c is a review of d.",
        "Author(c, d) ::: c is the author of d.",
        "Publication(c) ::: c is a publication.",
        "TerseLine(c, d) ::: c contains a terse line d.",
        "FallsFlat(c) ::: c falls flat."
      ],
      "premises": [
        "Unoriginal(review) ∧ LacksAppeal(review) ::: The New York Times finds the review unoriginal and lacking appeal.",
        "Complains(newYorkTimes, review) ::: The New York Times complained about the review.",
        "Review(review, topic) ::: The review is of the topic.",
        "TerseLine(review, \"The sex problem again.\") ::: The review contains the terse line \"The sex problem again.\"",
        "FallsFlat(review) ::: The review falls flat.",
        "Conclusion:",
        "Unoriginal(review) ∧ LacksAppeal(review) ::: The review is unoriginal and lacks appeal."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "65": [
    {
      "id": 65,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 4,
      "paragraph": "The New York Times was less charitable. It opened its review with the terse line, \"The sex problem again.\" It complained that \"Nothing that the scientist says is new, nothing that the poet says is new. The thing has been thrashed out some millions of times... Nor does the unnamed author infuse into either Wace or Kempton anything to give human personality or appeal.... As a story [it] falls flat; as a discussion of a topic as old as interesting, as overworked.\"",
      "question_template": "Biographers are intrigued by the Kempton-Wace Letters because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The sex problem again",
        "Nothing that the scientist says is new, nothing that the poet says is new",
        "The thing has been thrashed out some millions of times",
        "Nor does the unnamed author infuse into either Wace or Kempton anything to give human personality or appeal",
        "As a story [it] falls flat; as a discussion of a topic as old as interesting, as overworked"
      ],
      "predicates": [
        "Unoriginal(c) ::: c is unoriginal.",
        "LacksAppeal(c) ::: c lacks appeal.",
        "Complains(c, d) ::: c complains about d.",
        "Review(c, d) ::: c is a review of d.",
        "Author(c, d) ::: c is the author of d.",
        "Publication(c) ::: c is a publication.",
        "TerseLine(c, d) ::: c contains a terse line d.",
        "FallsFlat(c) ::: c falls flat."
      ],
      "premises": [
        "Unoriginal(review) ∧ LacksAppeal(review) ::: The New York Times finds the review unoriginal and lacking appeal.",
        "Complains(newYorkTimes, review) ::: The New York Times complained about the review.",
        "Review(review, topic) ::: The review is of the topic.",
        "TerseLine(review, \"The sex problem again.\") ::: The review contains the terse line \"The sex problem again.\"",
        "FallsFlat(review) ::: The review falls flat.",
        "Conclusion:",
        "Unoriginal(review) ∧ LacksAppeal(review) ::: The review is unoriginal and lacks appeal."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 65,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 5,
      "paragraph": "Joseph Noel says that George Sterling described London's portion of the book, as \"a spiritual misprint, a typographical error half a volume long\" and says \"His vocabulary, in the letters of Herbert Wace, sounds as if taken that day from an encyclopedia by a conscientious sophomore.\"",
      "question_template": "Biographers are intrigued by the Kempton-Wace Letters because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "\"George Sterling described London's portion of the book, as 'a spiritual misprint, a typographical error half a volume long'\"",
        "\"His vocabulary, in the letters of Herbert Wace, sounds as if taken that day from an encyclopedia by a conscientious sophomore.\""
      ],
      "predicates": [
        "Describes(x, y) ::: x describes y.",
        "SpiritualMisprint(x) ::: x is a spiritual misprint.",
        "TypographicalError(x) ::: x is a typographical error.",
        "VocabFromEncyclopedia(x) ::: x's vocabulary sounds as if taken from an encyclopedia.",
        "ConscientiousSophomore(x) ::: x is a conscientious sophomore."
      ],
      "premises": [
        "Describes(georgeSterling, londonPortion) ∧ SpiritualMisprint(londonPortion) ∧ TypographicalError(londonPortion) ::: George Sterling described London's portion of the book as \"a spiritual misprint, a typographical error half a volume long.\"",
        "VocabFromEncyclopedia(herbertWace) ∧ ConscientiousSophomore(herbertWace) ::: His vocabulary, in the letters of Herbert Wace, sounds as if taken that day from an encyclopedia by a conscientious sophomore."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "66": [
    {
      "id": 66,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 7,
      "paragraph": "In the novel, London expresses his theories about the \"Mother-Woman\" and the \"Mate-Woman,\" roles which seem to correspond to the roles played by his first wife and his second. After London's death in 1916, Strunsky published a memoir in The Masses in 1917 about their relationship.",
      "question_template": "The marriage between Jack London and Bessie is described as [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- The \"Mother-Woman\" and the \"Mate-Woman\"",
        "- Roles which seem to correspond to the roles played by his first wife and his second",
        "- Strunsky published a memoir in The Masses in 1917 about their relationship"
      ],
      "predicates": [
        "ExpressesTheories(x) ::: x expresses theories about the \"Mother-Woman\" and the \"Mate-Woman.\"",
        "Published(x, y) ::: x published y.",
        "Author(x, y) ::: x is the author of y.",
        "Relationship(x, y) ::: x and y have a relationship.",
        "Wife(x) ::: x is a wife."
      ],
      "premises": [
        "ExpressesTheories(a_1) ::: London expresses his theories about the \"Mother-Woman\" and the \"Mate-Woman.\"",
        "Published(a_2, c_0) ::: Strunsky published a memoir in The Masses about their relationship.",
        "Author(a_2, c_0) ::: Strunsky is the author of the memoir.",
        "Relationship(a_1, a_3) ::: London has a relationship with his first wife.",
        "Relationship(a_1, a_4) ::: London has a relationship with his second wife.",
        "Wife(a_3) ::: a_3 is the first wife of London.",
        "Wife(a_4) ::: a_4 is the second wife of London.",
        "Publish(c_0, c_1) ::: The memoir was published in The Masses.",
        "Publish(c_0, d_2) ::: The memoir was published in 1917.",
        "Died(a_1, d_1) ::: London died in 1916.",
        "Conclusion:",
        "ExpressesTheories(a_1) ::: London expresses theories about the \"Mother-Woman\" and the \"Mate-Woman.\"",
        "Relationship(a_1, a_3) ∧ Relationship(a_1, a_4) ::: London has relationships with both his first and second wives."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "68": [
    {
      "id": 68,
      "context_id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 7,
      "paragraph": "In the novel, London expresses his theories about the \"Mother-Woman\" and the \"Mate-Woman,\" roles which seem to correspond to the roles played by his first wife and his second. After London's death in 1916, Strunsky published a memoir in The Masses in 1917 about their relationship.",
      "question_template": "The title of Strunsky's memoirs is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The Masses"
      ],
      "predicates": [
        "ExpressesTheories(x) ::: x expresses theories about the \"Mother-Woman\" and the \"Mate-Woman.\"",
        "Published(x, y) ::: x published y.",
        "Author(x, y) ::: x is the author of y.",
        "Relationship(x, y) ::: x and y have a relationship.",
        "Wife(x) ::: x is a wife."
      ],
      "premises": [
        "ExpressesTheories(a_1) ::: London expresses his theories about the \"Mother-Woman\" and the \"Mate-Woman.\"",
        "Published(a_2, c_0) ::: Strunsky published a memoir in The Masses about their relationship.",
        "Author(a_2, c_0) ::: Strunsky is the author of the memoir.",
        "Relationship(a_1, a_3) ::: London has a relationship with his first wife.",
        "Relationship(a_1, a_4) ::: London has a relationship with his second wife.",
        "Wife(a_3) ::: a_3 is the first wife of London.",
        "Wife(a_4) ::: a_4 is the second wife of London.",
        "Publish(c_0, c_1) ::: The memoir was published in The Masses.",
        "Publish(c_0, d_2) ::: The memoir was published in 1917.",
        "Died(a_1, d_1) ::: London died in 1916.",
        "Conclusion:",
        "ExpressesTheories(a_1) ::: London expresses theories about the \"Mother-Woman\" and the \"Mate-Woman.\"",
        "Relationship(a_1, a_3) ∧ Relationship(a_1, a_4) ::: London has relationships with both his first and second wives."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "69": [
    {
      "id": 69,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 1,
      "paragraph": "Holmes instructs Watson not to come near him, because the illness is highly infectious. Although Watson wishes to examine Holmes himself or send for a specialist, Holmes demands that Watson wait several hours before seeking help. So, Watson is forced to wait, in extreme worry as Holmes mutters nonsense.",
      "question_template": "Watson believed that [[CANDIDATE_ANSWER]] was wrong with Holmes.",
      "candidate_answers": [
        "Holmes is highly infectious",
        "Watson wishes to examine Holmes himself or send for a specialist",
        "Watson is forced to wait, in extreme worry"
      ],
      "predicates": [
        "Instructs(x, y) ::: x instructs y.",
        "Infectious(x) ::: x is highly infectious.",
        "Wishes(x, y) ::: x wishes to do y.",
        "Demands(x, y) ::: x demands y.",
        "Waits(x, y) ::: x waits for y.",
        "Worries(x) ::: x is in extreme worry.",
        "Mutters(x) ::: x mutters nonsense."
      ],
      "premises": [
        "Instructs(a_1, a_3) ::: Holmes instructs Watson not to come near him.",
        "Infectious(disease) ::: The illness is highly infectious.",
        "Wishes(a_3, Examine(a_1)) ::: Watson wishes to examine Holmes himself.",
        "Demands(a_1, Wait(a_3, several_hours)) ::: Holmes demands that Watson wait several hours before seeking help.",
        "Waits(a_3, several_hours) ::: Watson is forced to wait several hours.",
        "Worries(a_3) ::: Watson is in extreme worry.",
        "Mutters(a_1) ::: Holmes mutters nonsense."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "72": [
    {
      "id": 72,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 1,
      "paragraph": "Holmes instructs Watson not to come near him, because the illness is highly infectious. Although Watson wishes to examine Holmes himself or send for a specialist, Holmes demands that Watson wait several hours before seeking help. So, Watson is forced to wait, in extreme worry as Holmes mutters nonsense.",
      "question_template": "Holmes felt [[CANDIDATE_ANSWER]] when Watson touched the items in his room.",
      "candidate_answers": [
        "Holmes instructs Watson not to come near him",
        "The illness is highly infectious",
        "Watson is forced to wait, in extreme worry as Holmes mutters nonsense"
      ],
      "predicates": [
        "Instructs(x, y) ::: x instructs y.",
        "Infectious(x) ::: x is highly infectious.",
        "Wishes(x, y) ::: x wishes to do y.",
        "Demands(x, y) ::: x demands y.",
        "Waits(x, y) ::: x waits for y.",
        "Worries(x) ::: x is in extreme worry.",
        "Mutters(x) ::: x mutters nonsense."
      ],
      "premises": [
        "Instructs(a_1, a_3) ::: Holmes instructs Watson not to come near him.",
        "Infectious(disease) ::: The illness is highly infectious.",
        "Wishes(a_3, Examine(a_1)) ::: Watson wishes to examine Holmes himself.",
        "Demands(a_1, Wait(a_3, several_hours)) ::: Holmes demands that Watson wait several hours before seeking help.",
        "Waits(a_3, several_hours) ::: Watson is forced to wait several hours.",
        "Worries(a_3) ::: Watson is in extreme worry.",
        "Mutters(a_1) ::: Holmes mutters nonsense."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 72,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 2,
      "paragraph": "While Watson waits, he examines several objects in Holmes’s room. Holmes grows angry when Watson touches items explaining that he does not like his things touched.",
      "question_template": "Holmes felt [[CANDIDATE_ANSWER]] when Watson touched the items in his room.",
      "candidate_answers": [
        "Holmes grows angry when Watson touches items"
      ],
      "predicates": [
        "PrefersUntouched(x) ::: x prefers that his belongings remain untouched.",
        "Touches(x, y) ::: x touches y.",
        "Angry(x) ::: x is angry."
      ],
      "premises": [
        "PrefersUntouched(a_1) ::: Holmes prefers that his belongings remain untouched.",
        "Touches(a_3, b_0) ::: Watson touches several objects in Holmes's room.",
        "Angry(a_1) ::: Holmes grows angry when Watson touches items.",
        "Conclusion:",
        "Angry(a_1) ∧ Touches(a_3, b_0) → PrefersUntouched(a_1) ::: If Watson touches items, then Holmes grows angry because he prefers that his belongings remain untouched."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 72,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 7,
      "paragraph": "Holmes was never really dying. His feigned illness was a ruse to induce Smith to confess to his nephew’s murder. Holmes was not infected by the little box; he has enough enemies to know that he must always examine his mail carefully before he opens it. Starving himself for three days,and the claim of the \"disease's\" infectious nature was to keep Watson from examining him and discovering the ruse.",
      "question_template": "Holmes felt [[CANDIDATE_ANSWER]] when Watson touched the items in his room.",
      "candidate_answers": [
        "Holmes was never really dying",
        "His feigned illness was a ruse to induce Smith to confess to his nephew’s murder",
        "Holmes was not infected by the little box",
        "He has enough enemies to know that he must always examine his mail carefully before he opens it",
        "Starving himself for three days",
        "The claim of the \"disease's\" infectious nature was to keep Watson from examining him and discovering the ruse"
      ],
      "predicates": [
        "FeignedIllness(x) ::: x has a feigned illness.",
        "InducedConfession(x, y) ::: x induced y to confess.",
        "Infected(x, y) ::: x is infected by y.",
        "ExamineMail(x) ::: x examines his mail carefully.",
        "Starved(x) ::: x starved himself.",
        "ClaimInfectiousNature(x) ::: x claims the disease has an infectious nature."
      ],
      "premises": [
        "FeignedIllness(a_1) ∧ InducedConfession(a_1, a_2) ::: Holmes feigned illness as a ruse to induce Smith to confess to his nephew’s murder.",
        "¬Infected(a_1, b_1) ::: Holmes was not infected by the little box.",
        "ExamineMail(a_1) ::: Holmes examines his mail carefully before he opens it.",
        "Starved(a_1) ∧ ClaimInfectiousNature(b_3) ::: Holmes starved himself for three days, and the claim of the \"disease's\" infectious nature was to keep Watson from examining him and discovering the ruse."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "73": [
    {
      "id": 73,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 6,
      "paragraph": "Holmes asks Smith to turn the gas up full, which Smith does. Smith then asks Holmes if he would like anything else, to which Holmes replies — no longer in the voice of a man near death — \"a match and a cigarette.\" Inspector Morton then enters — the full gaslight was the signal to move in. Holmes tells Morton to arrest Culverton Smith for the murder of his nephew, and perhaps also for the attempted murder of Sherlock Holmes. Smith, still as arrogant as ever, points out that his word is as good as Holmes’s in court, but Holmes then calls for Watson to emerge from behind the screen, to present himself as another witness to the conversation.",
      "question_template": "Mr. Smith killed [[CANDIDATE_ANSWER]] before.",
      "candidate_answers": [
        "Culverton Smith for the murder of his nephew"
      ],
      "predicates": [
        "AsGoodAs(x, y) ::: x's word is as good as y's in court.",
        "TurnUpGas(x) ::: x turns the gas up full.",
        "Requests(x, y) ::: x requests y.",
        "Replies(x, y) ::: x replies with y.",
        "Arrest(x, y) ::: x arrests y.",
        "Witness(x, y) ::: x is a witness to y."
      ],
      "premises": [
        "TurnUpGas(a_2) ::: Smith turns the gas up full.",
        "Requests(a_2, \"anything else\") ::: Smith asks Holmes if he would like anything else.",
        "Replies(a_1, \"a match and a cigarette\") ::: Holmes replies with \"a match and a cigarette.\"",
        "AsGoodAs(a_1, a_2) ::: Holmes's word is as good as Smith's in court.",
        "Arrest(a_1, a_2) ::: Holmes tells Morton to arrest Culverton Smith.",
        "Witness(a_3, \"the conversation\") ::: Watson is a witness to the conversation.",
        "Conclusion:",
        "AsGoodAs(a_1, a_2) ::: Holmes's word is as good as Smith's in court."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "75": [
    {
      "id": 75,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 5,
      "paragraph": "Believing that they are alone, Smith is frank with Holmes. It soon emerges, to the hiding Watson’s horror, that Holmes has been sickened by the same illness that killed Smith’s nephew Victor. Smith then sees the little ivory box, which he had sent to Holmes by post, and which contains a sharp spring infected with the illness. Smith pockets it, removing the evidence of his crime. He then resolves to stay there and watch Holmes die.",
      "question_template": "Watson hid behind a screen because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- To the hiding Watson’s horror",
        "- Smith then sees the little ivory box",
        "- Smith pockets it, removing the evidence of his crime"
      ],
      "predicates": [
        "Alone(x) ::: x believes that they are alone.",
        "FrankWith(x, y) ::: x is frank with y.",
        "SickenedBy(x, y) ::: x has been sickened by y.",
        "Killed(x, y) ::: x killed y.",
        "Contains(x, y) ::: x contains y.",
        "Pocketed(x, y) ::: x pockets y.",
        "ResolvedToStay(x) ::: x resolves to stay.",
        "Watch(x, y) ::: x watches y.",
        "Die(x) ::: x dies."
      ],
      "premises": [
        "Alone(a_2) ::: Smith believes that he is alone.",
        "FrankWith(a_2, a_1) ::: Smith is frank with Holmes.",
        "SickenedBy(a_1, a_3) ::: Holmes has been sickened by the same illness that killed Smith's nephew Victor.",
        "Killed(a_3, a_4) ::: The illness killed Smith's nephew Victor.",
        "Contains(b_1, b_3) ::: The little ivory box contains a sharp spring infected with the illness.",
        "Pocketed(a_2, b_1) ::: Smith pockets the little ivory box, removing the evidence of his crime.",
        "ResolvedToStay(a_2) ::: Smith resolves to stay there.",
        "Watch(a_2, a_1) ::: Smith watches Holmes.",
        "Die(a_1) ::: Holmes is at risk of dying from the illness that killed Smith's nephew Victor."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "77": [
    {
      "id": 77,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 1,
      "paragraph": "Holmes instructs Watson not to come near him, because the illness is highly infectious. Although Watson wishes to examine Holmes himself or send for a specialist, Holmes demands that Watson wait several hours before seeking help. So, Watson is forced to wait, in extreme worry as Holmes mutters nonsense.",
      "question_template": "Watson was called to attend to Holmes because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- To examine Holmes himself",
        "- To send for a specialist"
      ],
      "predicates": [
        "Instructs(x, y) ::: x instructs y.",
        "Infectious(x) ::: x is highly infectious.",
        "Wishes(x, y) ::: x wishes to do y.",
        "Demands(x, y) ::: x demands y.",
        "Waits(x, y) ::: x waits for y.",
        "Worries(x) ::: x is in extreme worry.",
        "Mutters(x) ::: x mutters nonsense."
      ],
      "premises": [
        "Instructs(a_1, a_3) ::: Holmes instructs Watson not to come near him.",
        "Infectious(disease) ::: The illness is highly infectious.",
        "Wishes(a_3, Examine(a_1)) ::: Watson wishes to examine Holmes himself.",
        "Demands(a_1, Wait(a_3, several_hours)) ::: Holmes demands that Watson wait several hours before seeking help.",
        "Waits(a_3, several_hours) ::: Watson is forced to wait several hours.",
        "Worries(a_3) ::: Watson is in extreme worry.",
        "Mutters(a_1) ::: Holmes mutters nonsense."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 77,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 3,
      "paragraph": "At six o’clock, Holmes tells Watson to turn the gaslight on, but only half-full. He then instructs Watson to bring Mr Culverton Smith of 13 Lower Burke Street to see Holmes, but to make sure that Watson returns to Baker Street before Smith arrives.",
      "question_template": "Watson was called to attend to Holmes because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Holmes tells Watson to turn the gaslight on",
        "- Instructs Watson to bring Mr Culverton Smith to see Holmes",
        "- Make sure that Watson returns to Baker Street before Smith arrives"
      ],
      "predicates": [
        "TurnOnGaslight(x, y) ::: x turns on the gaslight to level y.",
        "Instructs(x, y, z) ::: x instructs y to do z.",
        "ReturnsTo(x, y) ::: x returns to location y before an event occurs.",
        "Arrives(x, y) ::: x arrives at location y."
      ],
      "premises": [
        "TurnOnGaslight(a_3, half_full) ::: Watson turns on the gaslight to half-full.",
        "Instructs(a_1, a_3, Bring(a_2)) ::: Holmes instructs Watson to bring Mr. Culverton Smith to see him.",
        "ReturnsTo(a_3, BakerStreet) → Arrives(a_2, a_1) ::: Watson must return to Baker Street before Mr. Culverton Smith arrives.",
        "Conclusion:",
        "Instructs(a_1, a_3, ReturnBefore(a_2, a_1)) ::: Holmes requires Watson to ensure that he returns to Baker Street before Mr. Culverton Smith arrives."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 77,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 4,
      "paragraph": "Watson goes to Smith's address. Although Smith refuses to see anyone, Watson forces his way in. Once Watson explains his errand on behalf of Sherlock Holmes, Smith's attitude changes drastically. Smith agrees to come to Baker Street within a half hour. Watson excuses himself, saying that he has another appointment, and returns to Baker Street before Smith's arrival.",
      "question_template": "Watson was called to attend to Holmes because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "No relevant information found in the paragraph."
      ],
      "predicates": [
        "GoesTo(x, y) ::: x goes to y's address.",
        "RefusesToSee(x) ::: x refuses to see anyone.",
        "ForcesWayIn(x) ::: x forces his way in.",
        "ExplainsErrand(x, y) ::: x explains his errand on behalf of y.",
        "ChangesAttitude(x) ::: x's attitude changes drastically.",
        "AgreesToCome(x, y) ::: x agrees to come to y.",
        "ExcusesSelf(x) ::: x excuses himself.",
        "ReturnsTo(x, y) ::: x returns to y."
      ],
      "premises": [
        "GoesTo(watson, smith) ::: Watson goes to Smith's address.",
        "RefusesToSee(smith) ::: Smith refuses to see anyone.",
        "ForcesWayIn(watson) ::: Watson forces his way in.",
        "ExplainsErrand(watson, holmes) ::: Watson explains his errand on behalf of Sherlock Holmes.",
        "ChangesAttitude(smith) ::: Smith's attitude changes drastically after Watson's explanation.",
        "AgreesToCome(smith, bakerStreet) ::: Smith agrees to come to Baker Street after Watson's explanation.",
        "ExcusesSelf(watson) ::: Watson excuses himself, saying that he has another appointment.",
        "ReturnsTo(watson, bakerStreet) ::: Watson returns to Baker Street before Smith's arrival."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 77,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 5,
      "paragraph": "Believing that they are alone, Smith is frank with Holmes. It soon emerges, to the hiding Watson’s horror, that Holmes has been sickened by the same illness that killed Smith’s nephew Victor. Smith then sees the little ivory box, which he had sent to Holmes by post, and which contains a sharp spring infected with the illness. Smith pockets it, removing the evidence of his crime. He then resolves to stay there and watch Holmes die.",
      "question_template": "Watson was called to attend to Holmes because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Smith has been sickened by the same illness that killed Smith’s nephew Victor.",
        "- Smith pockets it, removing the evidence of his crime.",
        "- He then resolves to stay there and watch Holmes die."
      ],
      "predicates": [
        "Alone(x) ::: x believes that they are alone.",
        "FrankWith(x, y) ::: x is frank with y.",
        "SickenedBy(x, y) ::: x has been sickened by y.",
        "Killed(x, y) ::: x killed y.",
        "Contains(x, y) ::: x contains y.",
        "Pocketed(x, y) ::: x pockets y.",
        "ResolvedToStay(x) ::: x resolves to stay.",
        "Watch(x, y) ::: x watches y.",
        "Die(x) ::: x dies."
      ],
      "premises": [
        "Alone(a_2) ::: Smith believes that he is alone.",
        "FrankWith(a_2, a_1) ::: Smith is frank with Holmes.",
        "SickenedBy(a_1, a_3) ::: Holmes has been sickened by the same illness that killed Smith's nephew Victor.",
        "Killed(a_3, a_4) ::: The illness killed Smith's nephew Victor.",
        "Contains(b_1, b_3) ::: The little ivory box contains a sharp spring infected with the illness.",
        "Pocketed(a_2, b_1) ::: Smith pockets the little ivory box, removing the evidence of his crime.",
        "ResolvedToStay(a_2) ::: Smith resolves to stay there.",
        "Watch(a_2, a_1) ::: Smith watches Holmes.",
        "Die(a_1) ::: Holmes is at risk of dying from the illness that killed Smith's nephew Victor."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "78": [
    {
      "id": 78,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 1,
      "paragraph": "Holmes instructs Watson not to come near him, because the illness is highly infectious. Although Watson wishes to examine Holmes himself or send for a specialist, Holmes demands that Watson wait several hours before seeking help. So, Watson is forced to wait, in extreme worry as Holmes mutters nonsense.",
      "question_template": "Holmes first instructs Dr. Watson to [[CANDIDATE_ANSWER]] in fighting this illness.",
      "candidate_answers": [
        "Holmes instructs Watson not to come near him",
        "Holmes demands that Watson wait several hours before seeking help"
      ],
      "predicates": [
        "Instructs(x, y) ::: x instructs y.",
        "Infectious(x) ::: x is highly infectious.",
        "Wishes(x, y) ::: x wishes to do y.",
        "Demands(x, y) ::: x demands y.",
        "Waits(x, y) ::: x waits for y.",
        "Worries(x) ::: x is in extreme worry.",
        "Mutters(x) ::: x mutters nonsense."
      ],
      "premises": [
        "Instructs(a_1, a_3) ::: Holmes instructs Watson not to come near him.",
        "Infectious(disease) ::: The illness is highly infectious.",
        "Wishes(a_3, Examine(a_1)) ::: Watson wishes to examine Holmes himself.",
        "Demands(a_1, Wait(a_3, several_hours)) ::: Holmes demands that Watson wait several hours before seeking help.",
        "Waits(a_3, several_hours) ::: Watson is forced to wait several hours.",
        "Worries(a_3) ::: Watson is in extreme worry.",
        "Mutters(a_1) ::: Holmes mutters nonsense."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 78,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 3,
      "paragraph": "At six o’clock, Holmes tells Watson to turn the gaslight on, but only half-full. He then instructs Watson to bring Mr Culverton Smith of 13 Lower Burke Street to see Holmes, but to make sure that Watson returns to Baker Street before Smith arrives.",
      "question_template": "Holmes first instructs Dr. Watson to [[CANDIDATE_ANSWER]] in fighting this illness.",
      "candidate_answers": [
        "Turn the gaslight on, but only half-full",
        "Bring Mr Culverton Smith of 13 Lower Burke Street to see Holmes"
      ],
      "predicates": [
        "TurnOnGaslight(x, y) ::: x turns on the gaslight to level y.",
        "Instructs(x, y, z) ::: x instructs y to do z.",
        "ReturnsTo(x, y) ::: x returns to location y before an event occurs.",
        "Arrives(x, y) ::: x arrives at location y."
      ],
      "premises": [
        "TurnOnGaslight(a_3, half_full) ::: Watson turns on the gaslight to half-full.",
        "Instructs(a_1, a_3, Bring(a_2)) ::: Holmes instructs Watson to bring Mr. Culverton Smith to see him.",
        "ReturnsTo(a_3, BakerStreet) → Arrives(a_2, a_1) ::: Watson must return to Baker Street before Mr. Culverton Smith arrives.",
        "Conclusion:",
        "Instructs(a_1, a_3, ReturnBefore(a_2, a_1)) ::: Holmes requires Watson to ensure that he returns to Baker Street before Mr. Culverton Smith arrives."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 78,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 7,
      "paragraph": "Holmes was never really dying. His feigned illness was a ruse to induce Smith to confess to his nephew’s murder. Holmes was not infected by the little box; he has enough enemies to know that he must always examine his mail carefully before he opens it. Starving himself for three days,and the claim of the \"disease's\" infectious nature was to keep Watson from examining him and discovering the ruse.",
      "question_template": "Holmes first instructs Dr. Watson to [[CANDIDATE_ANSWER]] in fighting this illness.",
      "candidate_answers": [
        "Starving himself for three days",
        "Keep Watson from examining him and discovering the ruse"
      ],
      "predicates": [
        "FeignedIllness(x) ::: x has a feigned illness.",
        "InducedConfession(x, y) ::: x induced y to confess.",
        "Infected(x, y) ::: x is infected by y.",
        "ExamineMail(x) ::: x examines his mail carefully.",
        "Starved(x) ::: x starved himself.",
        "ClaimInfectiousNature(x) ::: x claims the disease has an infectious nature."
      ],
      "premises": [
        "FeignedIllness(a_1) ∧ InducedConfession(a_1, a_2) ::: Holmes feigned illness as a ruse to induce Smith to confess to his nephew’s murder.",
        "¬Infected(a_1, b_1) ::: Holmes was not infected by the little box.",
        "ExamineMail(a_1) ::: Holmes examines his mail carefully before he opens it.",
        "Starved(a_1) ∧ ClaimInfectiousNature(b_3) ::: Holmes starved himself for three days, and the claim of the \"disease's\" infectious nature was to keep Watson from examining him and discovering the ruse."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "79": [
    {
      "id": 79,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 2,
      "paragraph": "While Watson waits, he examines several objects in Holmes’s room. Holmes grows angry when Watson touches items explaining that he does not like his things touched.",
      "question_template": "[[CANDIDATE_ANSWER]] is what Dr. Watson does that aggravates Holmes.",
      "candidate_answers": [
        "Examines several objects in Holmes’s room",
        "Touches items"
      ],
      "predicates": [
        "PrefersUntouched(x) ::: x prefers that his belongings remain untouched.",
        "Touches(x, y) ::: x touches y.",
        "Angry(x) ::: x is angry."
      ],
      "premises": [
        "PrefersUntouched(a_1) ::: Holmes prefers that his belongings remain untouched.",
        "Touches(a_3, b_0) ::: Watson touches several objects in Holmes's room.",
        "Angry(a_1) ::: Holmes grows angry when Watson touches items.",
        "Conclusion:",
        "Angry(a_1) ∧ Touches(a_3, b_0) → PrefersUntouched(a_1) ::: If Watson touches items, then Holmes grows angry because he prefers that his belongings remain untouched."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "80": [
    {
      "id": 80,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 1,
      "paragraph": "Holmes instructs Watson not to come near him, because the illness is highly infectious. Although Watson wishes to examine Holmes himself or send for a specialist, Holmes demands that Watson wait several hours before seeking help. So, Watson is forced to wait, in extreme worry as Holmes mutters nonsense.",
      "question_template": "Holmes asks Dr. Watson to [[CANDIDATE_ANSWER]] at 6 p.m.",
      "candidate_answers": [
        "Holmes instructs Watson not to come near him",
        "Holmes demands that Watson wait several hours before seeking help"
      ],
      "predicates": [
        "Instructs(x, y) ::: x instructs y.",
        "Infectious(x) ::: x is highly infectious.",
        "Wishes(x, y) ::: x wishes to do y.",
        "Demands(x, y) ::: x demands y.",
        "Waits(x, y) ::: x waits for y.",
        "Worries(x) ::: x is in extreme worry.",
        "Mutters(x) ::: x mutters nonsense."
      ],
      "premises": [
        "Instructs(a_1, a_3) ::: Holmes instructs Watson not to come near him.",
        "Infectious(disease) ::: The illness is highly infectious.",
        "Wishes(a_3, Examine(a_1)) ::: Watson wishes to examine Holmes himself.",
        "Demands(a_1, Wait(a_3, several_hours)) ::: Holmes demands that Watson wait several hours before seeking help.",
        "Waits(a_3, several_hours) ::: Watson is forced to wait several hours.",
        "Worries(a_3) ::: Watson is in extreme worry.",
        "Mutters(a_1) ::: Holmes mutters nonsense."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 80,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 3,
      "paragraph": "At six o’clock, Holmes tells Watson to turn the gaslight on, but only half-full. He then instructs Watson to bring Mr Culverton Smith of 13 Lower Burke Street to see Holmes, but to make sure that Watson returns to Baker Street before Smith arrives.",
      "question_template": "Holmes asks Dr. Watson to [[CANDIDATE_ANSWER]] at 6 p.m.",
      "candidate_answers": [
        "Turn the gaslight on, but only half-full",
        "Bring Mr Culverton Smith of 13 Lower Burke Street to see Holmes",
        "Make sure that Watson returns to Baker Street before Smith arrives"
      ],
      "predicates": [
        "TurnOnGaslight(x, y) ::: x turns on the gaslight to level y.",
        "Instructs(x, y, z) ::: x instructs y to do z.",
        "ReturnsTo(x, y) ::: x returns to location y before an event occurs.",
        "Arrives(x, y) ::: x arrives at location y."
      ],
      "premises": [
        "TurnOnGaslight(a_3, half_full) ::: Watson turns on the gaslight to half-full.",
        "Instructs(a_1, a_3, Bring(a_2)) ::: Holmes instructs Watson to bring Mr. Culverton Smith to see him.",
        "ReturnsTo(a_3, BakerStreet) → Arrives(a_2, a_1) ::: Watson must return to Baker Street before Mr. Culverton Smith arrives.",
        "Conclusion:",
        "Instructs(a_1, a_3, ReturnBefore(a_2, a_1)) ::: Holmes requires Watson to ensure that he returns to Baker Street before Mr. Culverton Smith arrives."
      ],
      "conclusions": [
        "Instructs(a_1, a_3, TurnOnGaslight(a_3, half_full))",
        "None",
        "Instructs(a_1, a_3, ReturnBefore(a_2, a_1))"
      ]
    }
  ],
  "81": [
    {
      "id": 81,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 2,
      "paragraph": "While Watson waits, he examines several objects in Holmes’s room. Holmes grows angry when Watson touches items explaining that he does not like his things touched.",
      "question_template": "When Dr. Watson gets to 13 Lower Burke Street, [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Watson examines several objects in Holmes’s room",
        "Holmes grows angry when Watson touches items"
      ],
      "predicates": [
        "PrefersUntouched(x) ::: x prefers that his belongings remain untouched.",
        "Touches(x, y) ::: x touches y.",
        "Angry(x) ::: x is angry."
      ],
      "premises": [
        "PrefersUntouched(a_1) ::: Holmes prefers that his belongings remain untouched.",
        "Touches(a_3, b_0) ::: Watson touches several objects in Holmes's room.",
        "Angry(a_1) ::: Holmes grows angry when Watson touches items.",
        "Conclusion:",
        "Angry(a_1) ∧ Touches(a_3, b_0) → PrefersUntouched(a_1) ::: If Watson touches items, then Holmes grows angry because he prefers that his belongings remain untouched."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 81,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 5,
      "paragraph": "Believing that they are alone, Smith is frank with Holmes. It soon emerges, to the hiding Watson’s horror, that Holmes has been sickened by the same illness that killed Smith’s nephew Victor. Smith then sees the little ivory box, which he had sent to Holmes by post, and which contains a sharp spring infected with the illness. Smith pockets it, removing the evidence of his crime. He then resolves to stay there and watch Holmes die.",
      "question_template": "When Dr. Watson gets to 13 Lower Burke Street, [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Smith is frank with Holmes.",
        "- Holmes has been sickened by the same illness that killed Smith’s nephew Victor.",
        "- Smith sees the little ivory box, which he had sent to Holmes by post.",
        "- Smith pockets it, removing the evidence of his crime.",
        "- Smith resolves to stay there and watch Holmes die."
      ],
      "predicates": [
        "Alone(x) ::: x believes that they are alone.",
        "FrankWith(x, y) ::: x is frank with y.",
        "SickenedBy(x, y) ::: x has been sickened by y.",
        "Killed(x, y) ::: x killed y.",
        "Contains(x, y) ::: x contains y.",
        "Pocketed(x, y) ::: x pockets y.",
        "ResolvedToStay(x) ::: x resolves to stay.",
        "Watch(x, y) ::: x watches y.",
        "Die(x) ::: x dies."
      ],
      "premises": [
        "Alone(a_2) ::: Smith believes that he is alone.",
        "FrankWith(a_2, a_1) ::: Smith is frank with Holmes.",
        "SickenedBy(a_1, a_3) ::: Holmes has been sickened by the same illness that killed Smith's nephew Victor.",
        "Killed(a_3, a_4) ::: The illness killed Smith's nephew Victor.",
        "Contains(b_1, b_3) ::: The little ivory box contains a sharp spring infected with the illness.",
        "Pocketed(a_2, b_1) ::: Smith pockets the little ivory box, removing the evidence of his crime.",
        "ResolvedToStay(a_2) ::: Smith resolves to stay there.",
        "Watch(a_2, a_1) ::: Smith watches Holmes.",
        "Die(a_1) ::: Holmes is at risk of dying from the illness that killed Smith's nephew Victor."
      ],
      "conclusions": [
        "FrankWith(a_2, a_1)",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 81,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 6,
      "paragraph": "Holmes asks Smith to turn the gas up full, which Smith does. Smith then asks Holmes if he would like anything else, to which Holmes replies — no longer in the voice of a man near death — \"a match and a cigarette.\" Inspector Morton then enters — the full gaslight was the signal to move in. Holmes tells Morton to arrest Culverton Smith for the murder of his nephew, and perhaps also for the attempted murder of Sherlock Holmes. Smith, still as arrogant as ever, points out that his word is as good as Holmes’s in court, but Holmes then calls for Watson to emerge from behind the screen, to present himself as another witness to the conversation.",
      "question_template": "When Dr. Watson gets to 13 Lower Burke Street, [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "No longer in the voice of a man near death",
        "Holmes tells Morton to arrest Culverton Smith for the murder of his nephew",
        "Holmes calls for Watson to emerge from behind the screen, to present himself as another witness to the conversation"
      ],
      "predicates": [
        "AsGoodAs(x, y) ::: x's word is as good as y's in court.",
        "TurnUpGas(x) ::: x turns the gas up full.",
        "Requests(x, y) ::: x requests y.",
        "Replies(x, y) ::: x replies with y.",
        "Arrest(x, y) ::: x arrests y.",
        "Witness(x, y) ::: x is a witness to y."
      ],
      "premises": [
        "TurnUpGas(a_2) ::: Smith turns the gas up full.",
        "Requests(a_2, \"anything else\") ::: Smith asks Holmes if he would like anything else.",
        "Replies(a_1, \"a match and a cigarette\") ::: Holmes replies with \"a match and a cigarette.\"",
        "AsGoodAs(a_1, a_2) ::: Holmes's word is as good as Smith's in court.",
        "Arrest(a_1, a_2) ::: Holmes tells Morton to arrest Culverton Smith.",
        "Witness(a_3, \"the conversation\") ::: Watson is a witness to the conversation.",
        "Conclusion:",
        "AsGoodAs(a_1, a_2) ::: Holmes's word is as good as Smith's in court."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "82": [
    {
      "id": 82,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 0,
      "paragraph": " Dr Watson is called to tend Holmes, who is apparently dying of a rare disease contracted while he was on a case. Watson was shocked, having heard about his friend’s illness. Mrs. Hudson says that Holmes has neither eaten nor drunk anything in three days.",
      "question_template": "[[CANDIDATE_ANSWER]] is what Dr. Watson overhears back at Holmes' residence.",
      "candidate_answers": [
        "Mrs. Hudson says that Holmes has neither eaten nor drunk anything in three days."
      ],
      "predicates": [
        "Dying(a_1) ::: Holmes is apparently dying of a rare disease.",
        "Shocked(a_3) ::: Watson is shocked about Holmes's illness.",
        "Eaten(a_1) ::: Holmes has eaten something.",
        "Drunk(a_1) ::: Holmes has drunk something.",
        "DaysWithoutFoodOrDrink(a_1, 3) ::: Holmes has neither eaten nor drunk anything in three days."
      ],
      "premises": [
        "Dying(a_1) ::: Holmes is apparently dying of a rare disease contracted while he was on a case.",
        "Shocked(a_3) ::: Watson was shocked, having heard about his friend’s illness.",
        "¬Eaten(a_1) ∧ ¬Drunk(a_1) ∧ DaysWithoutFoodOrDrink(a_1, 3) ::: Mrs. Hudson says that Holmes has neither eaten nor drunk anything in three days."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 82,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 5,
      "paragraph": "Believing that they are alone, Smith is frank with Holmes. It soon emerges, to the hiding Watson’s horror, that Holmes has been sickened by the same illness that killed Smith’s nephew Victor. Smith then sees the little ivory box, which he had sent to Holmes by post, and which contains a sharp spring infected with the illness. Smith pockets it, removing the evidence of his crime. He then resolves to stay there and watch Holmes die.",
      "question_template": "[[CANDIDATE_ANSWER]] is what Dr. Watson overhears back at Holmes' residence.",
      "candidate_answers": [
        "- Smith is frank with Holmes.",
        "- Holmes has been sickened by the same illness that killed Smith’s nephew Victor.",
        "- Smith sees the little ivory box, which he had sent to Holmes by post.",
        "- Smith pockets it, removing the evidence of his crime.",
        "- He then resolves to stay there and watch Holmes die."
      ],
      "predicates": [
        "Alone(x) ::: x believes that they are alone.",
        "FrankWith(x, y) ::: x is frank with y.",
        "SickenedBy(x, y) ::: x has been sickened by y.",
        "Killed(x, y) ::: x killed y.",
        "Contains(x, y) ::: x contains y.",
        "Pocketed(x, y) ::: x pockets y.",
        "ResolvedToStay(x) ::: x resolves to stay.",
        "Watch(x, y) ::: x watches y.",
        "Die(x) ::: x dies."
      ],
      "premises": [
        "Alone(a_2) ::: Smith believes that he is alone.",
        "FrankWith(a_2, a_1) ::: Smith is frank with Holmes.",
        "SickenedBy(a_1, a_3) ::: Holmes has been sickened by the same illness that killed Smith's nephew Victor.",
        "Killed(a_3, a_4) ::: The illness killed Smith's nephew Victor.",
        "Contains(b_1, b_3) ::: The little ivory box contains a sharp spring infected with the illness.",
        "Pocketed(a_2, b_1) ::: Smith pockets the little ivory box, removing the evidence of his crime.",
        "ResolvedToStay(a_2) ::: Smith resolves to stay there.",
        "Watch(a_2, a_1) ::: Smith watches Holmes.",
        "Die(a_1) ::: Holmes is at risk of dying from the illness that killed Smith's nephew Victor."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "ResolvedToStay(smith) ∧ Watch(smith, holmes) ∧ Die(holmes)"
      ]
    }
  ],
  "83": [
    {
      "id": 83,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 5,
      "paragraph": "Believing that they are alone, Smith is frank with Holmes. It soon emerges, to the hiding Watson’s horror, that Holmes has been sickened by the same illness that killed Smith’s nephew Victor. Smith then sees the little ivory box, which he had sent to Holmes by post, and which contains a sharp spring infected with the illness. Smith pockets it, removing the evidence of his crime. He then resolves to stay there and watch Holmes die.",
      "question_template": "Holmes possibly contracted this illness because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- The same illness that killed Smith’s nephew Victor",
        "- A sharp spring infected with the illness"
      ],
      "predicates": [
        "Alone(x) ::: x believes that they are alone.",
        "FrankWith(x, y) ::: x is frank with y.",
        "SickenedBy(x, y) ::: x has been sickened by y.",
        "Killed(x, y) ::: x killed y.",
        "Contains(x, y) ::: x contains y.",
        "Pocketed(x, y) ::: x pockets y.",
        "ResolvedToStay(x) ::: x resolves to stay.",
        "Watch(x, y) ::: x watches y.",
        "Die(x) ::: x dies."
      ],
      "premises": [
        "Alone(a_2) ::: Smith believes that he is alone.",
        "FrankWith(a_2, a_1) ::: Smith is frank with Holmes.",
        "SickenedBy(a_1, a_3) ::: Holmes has been sickened by the same illness that killed Smith's nephew Victor.",
        "Killed(a_3, a_4) ::: The illness killed Smith's nephew Victor.",
        "Contains(b_1, b_3) ::: The little ivory box contains a sharp spring infected with the illness.",
        "Pocketed(a_2, b_1) ::: Smith pockets the little ivory box, removing the evidence of his crime.",
        "ResolvedToStay(a_2) ::: Smith resolves to stay there.",
        "Watch(a_2, a_1) ::: Smith watches Holmes.",
        "Die(a_1) ::: Holmes is at risk of dying from the illness that killed Smith's nephew Victor."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 83,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 7,
      "paragraph": "Holmes was never really dying. His feigned illness was a ruse to induce Smith to confess to his nephew’s murder. Holmes was not infected by the little box; he has enough enemies to know that he must always examine his mail carefully before he opens it. Starving himself for three days,and the claim of the \"disease's\" infectious nature was to keep Watson from examining him and discovering the ruse.",
      "question_template": "Holmes possibly contracted this illness because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- His feigned illness was a ruse to induce Smith to confess to his nephew’s murder.",
        "- He has enough enemies to know that he must always examine his mail carefully before he opens it.",
        "- Starving himself for three days, and the claim of the \"disease's\" infectious nature was to keep Watson from examining him and discovering the ruse."
      ],
      "predicates": [
        "FeignedIllness(x) ::: x has a feigned illness.",
        "InducedConfession(x, y) ::: x induced y to confess.",
        "Infected(x, y) ::: x is infected by y.",
        "ExamineMail(x) ::: x examines his mail carefully.",
        "Starved(x) ::: x starved himself.",
        "ClaimInfectiousNature(x) ::: x claims the disease has an infectious nature."
      ],
      "premises": [
        "FeignedIllness(a_1) ∧ InducedConfession(a_1, a_2) ::: Holmes feigned illness as a ruse to induce Smith to confess to his nephew’s murder.",
        "¬Infected(a_1, b_1) ::: Holmes was not infected by the little box.",
        "ExamineMail(a_1) ::: Holmes examines his mail carefully before he opens it.",
        "Starved(a_1) ∧ ClaimInfectiousNature(b_3) ::: Holmes starved himself for three days, and the claim of the \"disease's\" infectious nature was to keep Watson from examining him and discovering the ruse."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "84": [
    {
      "id": 84,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 6,
      "paragraph": "Holmes asks Smith to turn the gas up full, which Smith does. Smith then asks Holmes if he would like anything else, to which Holmes replies — no longer in the voice of a man near death — \"a match and a cigarette.\" Inspector Morton then enters — the full gaslight was the signal to move in. Holmes tells Morton to arrest Culverton Smith for the murder of his nephew, and perhaps also for the attempted murder of Sherlock Holmes. Smith, still as arrogant as ever, points out that his word is as good as Holmes’s in court, but Holmes then calls for Watson to emerge from behind the screen, to present himself as another witness to the conversation.",
      "question_template": "Holmes's intention in having Mr. Smith lighting the gaslight to full was [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- The full gaslight was the signal to move in.",
        "- Holmes tells Morton to arrest Culverton Smith for the murder of his nephew."
      ],
      "predicates": [
        "AsGoodAs(x, y) ::: x's word is as good as y's in court.",
        "TurnUpGas(x) ::: x turns the gas up full.",
        "Requests(x, y) ::: x requests y.",
        "Replies(x, y) ::: x replies with y.",
        "Arrest(x, y) ::: x arrests y.",
        "Witness(x, y) ::: x is a witness to y."
      ],
      "premises": [
        "TurnUpGas(a_2) ::: Smith turns the gas up full.",
        "Requests(a_2, \"anything else\") ::: Smith asks Holmes if he would like anything else.",
        "Replies(a_1, \"a match and a cigarette\") ::: Holmes replies with \"a match and a cigarette.\"",
        "AsGoodAs(a_1, a_2) ::: Holmes's word is as good as Smith's in court.",
        "Arrest(a_1, a_2) ::: Holmes tells Morton to arrest Culverton Smith.",
        "Witness(a_3, \"the conversation\") ::: Watson is a witness to the conversation.",
        "Conclusion:",
        "AsGoodAs(a_1, a_2) ::: Holmes's word is as good as Smith's in court."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 84,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 7,
      "paragraph": "Holmes was never really dying. His feigned illness was a ruse to induce Smith to confess to his nephew’s murder. Holmes was not infected by the little box; he has enough enemies to know that he must always examine his mail carefully before he opens it. Starving himself for three days,and the claim of the \"disease's\" infectious nature was to keep Watson from examining him and discovering the ruse.",
      "question_template": "Holmes's intention in having Mr. Smith lighting the gaslight to full was [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Holmes was never really dying.",
        "His feigned illness was a ruse to induce Smith to confess to his nephew’s murder.",
        "Starving himself for three days, and the claim of the \"disease's\" infectious nature was to keep Watson from examining him and discovering the ruse."
      ],
      "predicates": [
        "FeignedIllness(x) ::: x has a feigned illness.",
        "InducedConfession(x, y) ::: x induced y to confess.",
        "Infected(x, y) ::: x is infected by y.",
        "ExamineMail(x) ::: x examines his mail carefully.",
        "Starved(x) ::: x starved himself.",
        "ClaimInfectiousNature(x) ::: x claims the disease has an infectious nature."
      ],
      "premises": [
        "FeignedIllness(a_1) ∧ InducedConfession(a_1, a_2) ::: Holmes feigned illness as a ruse to induce Smith to confess to his nephew’s murder.",
        "¬Infected(a_1, b_1) ::: Holmes was not infected by the little box.",
        "ExamineMail(a_1) ::: Holmes examines his mail carefully before he opens it.",
        "Starved(a_1) ∧ ClaimInfectiousNature(b_3) ::: Holmes starved himself for three days, and the claim of the \"disease's\" infectious nature was to keep Watson from examining him and discovering the ruse."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "86": [
    {
      "id": 86,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 5,
      "paragraph": "Believing that they are alone, Smith is frank with Holmes. It soon emerges, to the hiding Watson’s horror, that Holmes has been sickened by the same illness that killed Smith’s nephew Victor. Smith then sees the little ivory box, which he had sent to Holmes by post, and which contains a sharp spring infected with the illness. Smith pockets it, removing the evidence of his crime. He then resolves to stay there and watch Holmes die.",
      "question_template": "Holmes kept [[CANDIDATE_ANSWER]] hidden from everyone as he investigated this case.",
      "candidate_answers": [
        "Holmes has been sickened by the same illness that killed Smith’s nephew Victor",
        "The little ivory box, which he had sent to Holmes by post, and which contains a sharp spring infected with the illness"
      ],
      "predicates": [
        "Alone(x) ::: x believes that they are alone.",
        "FrankWith(x, y) ::: x is frank with y.",
        "SickenedBy(x, y) ::: x has been sickened by y.",
        "Killed(x, y) ::: x killed y.",
        "Contains(x, y) ::: x contains y.",
        "Pocketed(x, y) ::: x pockets y.",
        "ResolvedToStay(x) ::: x resolves to stay.",
        "Watch(x, y) ::: x watches y.",
        "Die(x) ::: x dies."
      ],
      "premises": [
        "Alone(a_2) ::: Smith believes that he is alone.",
        "FrankWith(a_2, a_1) ::: Smith is frank with Holmes.",
        "SickenedBy(a_1, a_3) ::: Holmes has been sickened by the same illness that killed Smith's nephew Victor.",
        "Killed(a_3, a_4) ::: The illness killed Smith's nephew Victor.",
        "Contains(b_1, b_3) ::: The little ivory box contains a sharp spring infected with the illness.",
        "Pocketed(a_2, b_1) ::: Smith pockets the little ivory box, removing the evidence of his crime.",
        "ResolvedToStay(a_2) ::: Smith resolves to stay there.",
        "Watch(a_2, a_1) ::: Smith watches Holmes.",
        "Die(a_1) ::: Holmes is at risk of dying from the illness that killed Smith's nephew Victor."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "87": [
    {
      "id": 87,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 4,
      "paragraph": "Watson goes to Smith's address. Although Smith refuses to see anyone, Watson forces his way in. Once Watson explains his errand on behalf of Sherlock Holmes, Smith's attitude changes drastically. Smith agrees to come to Baker Street within a half hour. Watson excuses himself, saying that he has another appointment, and returns to Baker Street before Smith's arrival.",
      "question_template": "Watson was called to Baker Street because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "On behalf of Sherlock Holmes",
        "Watson explains his errand on behalf of Sherlock Holmes"
      ],
      "predicates": [
        "GoesTo(x, y) ::: x goes to y's address.",
        "RefusesToSee(x) ::: x refuses to see anyone.",
        "ForcesWayIn(x) ::: x forces his way in.",
        "ExplainsErrand(x, y) ::: x explains his errand on behalf of y.",
        "ChangesAttitude(x) ::: x's attitude changes drastically.",
        "AgreesToCome(x, y) ::: x agrees to come to y.",
        "ExcusesSelf(x) ::: x excuses himself.",
        "ReturnsTo(x, y) ::: x returns to y."
      ],
      "premises": [
        "GoesTo(watson, smith) ::: Watson goes to Smith's address.",
        "RefusesToSee(smith) ::: Smith refuses to see anyone.",
        "ForcesWayIn(watson) ::: Watson forces his way in.",
        "ExplainsErrand(watson, holmes) ::: Watson explains his errand on behalf of Sherlock Holmes.",
        "ChangesAttitude(smith) ::: Smith's attitude changes drastically after Watson's explanation.",
        "AgreesToCome(smith, bakerStreet) ::: Smith agrees to come to Baker Street after Watson's explanation.",
        "ExcusesSelf(watson) ::: Watson excuses himself, saying that he has another appointment.",
        "ReturnsTo(watson, bakerStreet) ::: Watson returns to Baker Street before Smith's arrival."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 87,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 6,
      "paragraph": "Holmes asks Smith to turn the gas up full, which Smith does. Smith then asks Holmes if he would like anything else, to which Holmes replies — no longer in the voice of a man near death — \"a match and a cigarette.\" Inspector Morton then enters — the full gaslight was the signal to move in. Holmes tells Morton to arrest Culverton Smith for the murder of his nephew, and perhaps also for the attempted murder of Sherlock Holmes. Smith, still as arrogant as ever, points out that his word is as good as Holmes’s in court, but Holmes then calls for Watson to emerge from behind the screen, to present himself as another witness to the conversation.",
      "question_template": "Watson was called to Baker Street because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- To present himself as another witness to the conversation"
      ],
      "predicates": [
        "AsGoodAs(x, y) ::: x's word is as good as y's in court.",
        "TurnUpGas(x) ::: x turns the gas up full.",
        "Requests(x, y) ::: x requests y.",
        "Replies(x, y) ::: x replies with y.",
        "Arrest(x, y) ::: x arrests y.",
        "Witness(x, y) ::: x is a witness to y."
      ],
      "premises": [
        "TurnUpGas(a_2) ::: Smith turns the gas up full.",
        "Requests(a_2, \"anything else\") ::: Smith asks Holmes if he would like anything else.",
        "Replies(a_1, \"a match and a cigarette\") ::: Holmes replies with \"a match and a cigarette.\"",
        "AsGoodAs(a_1, a_2) ::: Holmes's word is as good as Smith's in court.",
        "Arrest(a_1, a_2) ::: Holmes tells Morton to arrest Culverton Smith.",
        "Witness(a_3, \"the conversation\") ::: Watson is a witness to the conversation.",
        "Conclusion:",
        "AsGoodAs(a_1, a_2) ::: Holmes's word is as good as Smith's in court."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "90": [
    {
      "id": 90,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 3,
      "paragraph": "At six o’clock, Holmes tells Watson to turn the gaslight on, but only half-full. He then instructs Watson to bring Mr Culverton Smith of 13 Lower Burke Street to see Holmes, but to make sure that Watson returns to Baker Street before Smith arrives.",
      "question_template": "Watson is supposed to give [[CANDIDATE_ANSWER]]'s message to Holmes.",
      "candidate_answers": [
        "Mr Culverton Smith of 13 Lower Burke Street"
      ],
      "predicates": [
        "TurnOnGaslight(x, y) ::: x turns on the gaslight to level y.",
        "Instructs(x, y, z) ::: x instructs y to do z.",
        "ReturnsTo(x, y) ::: x returns to location y before an event occurs.",
        "Arrives(x, y) ::: x arrives at location y."
      ],
      "premises": [
        "TurnOnGaslight(a_3, half_full) ::: Watson turns on the gaslight to half-full.",
        "Instructs(a_1, a_3, Bring(a_2)) ::: Holmes instructs Watson to bring Mr. Culverton Smith to see him.",
        "ReturnsTo(a_3, BakerStreet) → Arrives(a_2, a_1) ::: Watson must return to Baker Street before Mr. Culverton Smith arrives.",
        "Conclusion:",
        "Instructs(a_1, a_3, ReturnBefore(a_2, a_1)) ::: Holmes requires Watson to ensure that he returns to Baker Street before Mr. Culverton Smith arrives."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 90,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 4,
      "paragraph": "Watson goes to Smith's address. Although Smith refuses to see anyone, Watson forces his way in. Once Watson explains his errand on behalf of Sherlock Holmes, Smith's attitude changes drastically. Smith agrees to come to Baker Street within a half hour. Watson excuses himself, saying that he has another appointment, and returns to Baker Street before Smith's arrival.",
      "question_template": "Watson is supposed to give [[CANDIDATE_ANSWER]]'s message to Holmes.",
      "candidate_answers": [
        "Smith"
      ],
      "predicates": [
        "GoesTo(x, y) ::: x goes to y's address.",
        "RefusesToSee(x) ::: x refuses to see anyone.",
        "ForcesWayIn(x) ::: x forces his way in.",
        "ExplainsErrand(x, y) ::: x explains his errand on behalf of y.",
        "ChangesAttitude(x) ::: x's attitude changes drastically.",
        "AgreesToCome(x, y) ::: x agrees to come to y.",
        "ExcusesSelf(x) ::: x excuses himself.",
        "ReturnsTo(x, y) ::: x returns to y."
      ],
      "premises": [
        "GoesTo(watson, smith) ::: Watson goes to Smith's address.",
        "RefusesToSee(smith) ::: Smith refuses to see anyone.",
        "ForcesWayIn(watson) ::: Watson forces his way in.",
        "ExplainsErrand(watson, holmes) ::: Watson explains his errand on behalf of Sherlock Holmes.",
        "ChangesAttitude(smith) ::: Smith's attitude changes drastically after Watson's explanation.",
        "AgreesToCome(smith, bakerStreet) ::: Smith agrees to come to Baker Street after Watson's explanation.",
        "ExcusesSelf(watson) ::: Watson excuses himself, saying that he has another appointment.",
        "ReturnsTo(watson, bakerStreet) ::: Watson returns to Baker Street before Smith's arrival."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "91": [
    {
      "id": 91,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 1,
      "paragraph": "Holmes instructs Watson not to come near him, because the illness is highly infectious. Although Watson wishes to examine Holmes himself or send for a specialist, Holmes demands that Watson wait several hours before seeking help. So, Watson is forced to wait, in extreme worry as Holmes mutters nonsense.",
      "question_template": "Watson is supposed to [[CANDIDATE_ANSWER]] after delivering Holmes' message.",
      "candidate_answers": [
        "Wait several hours before seeking help"
      ],
      "predicates": [
        "Instructs(x, y) ::: x instructs y.",
        "Infectious(x) ::: x is highly infectious.",
        "Wishes(x, y) ::: x wishes to do y.",
        "Demands(x, y) ::: x demands y.",
        "Waits(x, y) ::: x waits for y.",
        "Worries(x) ::: x is in extreme worry.",
        "Mutters(x) ::: x mutters nonsense."
      ],
      "premises": [
        "Instructs(a_1, a_3) ::: Holmes instructs Watson not to come near him.",
        "Infectious(disease) ::: The illness is highly infectious.",
        "Wishes(a_3, Examine(a_1)) ::: Watson wishes to examine Holmes himself.",
        "Demands(a_1, Wait(a_3, several_hours)) ::: Holmes demands that Watson wait several hours before seeking help.",
        "Waits(a_3, several_hours) ::: Watson is forced to wait several hours.",
        "Worries(a_3) ::: Watson is in extreme worry.",
        "Mutters(a_1) ::: Holmes mutters nonsense."
      ],
      "conclusions": [
        "Waits(a_3, several_hours) ∧ Demands(a_1, Wait(a_3, several_hours))"
      ]
    },
    {
      "id": 91,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 3,
      "paragraph": "At six o’clock, Holmes tells Watson to turn the gaslight on, but only half-full. He then instructs Watson to bring Mr Culverton Smith of 13 Lower Burke Street to see Holmes, but to make sure that Watson returns to Baker Street before Smith arrives.",
      "question_template": "Watson is supposed to [[CANDIDATE_ANSWER]] after delivering Holmes' message.",
      "candidate_answers": [
        "Return to Baker Street before Smith arrives"
      ],
      "predicates": [
        "TurnOnGaslight(x, y) ::: x turns on the gaslight to level y.",
        "Instructs(x, y, z) ::: x instructs y to do z.",
        "ReturnsTo(x, y) ::: x returns to location y before an event occurs.",
        "Arrives(x, y) ::: x arrives at location y."
      ],
      "premises": [
        "TurnOnGaslight(a_3, half_full) ::: Watson turns on the gaslight to half-full.",
        "Instructs(a_1, a_3, Bring(a_2)) ::: Holmes instructs Watson to bring Mr. Culverton Smith to see him.",
        "ReturnsTo(a_3, BakerStreet) → Arrives(a_2, a_1) ::: Watson must return to Baker Street before Mr. Culverton Smith arrives.",
        "Conclusion:",
        "Instructs(a_1, a_3, ReturnBefore(a_2, a_1)) ::: Holmes requires Watson to ensure that he returns to Baker Street before Mr. Culverton Smith arrives."
      ],
      "conclusions": [
        "Instructs(a_1, a_3, ReturnBefore(a_2, a_1))"
      ]
    }
  ],
  "93": [
    {
      "id": 93,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 5,
      "paragraph": "Believing that they are alone, Smith is frank with Holmes. It soon emerges, to the hiding Watson’s horror, that Holmes has been sickened by the same illness that killed Smith’s nephew Victor. Smith then sees the little ivory box, which he had sent to Holmes by post, and which contains a sharp spring infected with the illness. Smith pockets it, removing the evidence of his crime. He then resolves to stay there and watch Holmes die.",
      "question_template": "Holmes's purpose in pretending he was dying was [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- To be frank with Smith",
        "- To hide from Watson",
        "- To watch Holmes die"
      ],
      "predicates": [
        "Alone(x) ::: x believes that they are alone.",
        "FrankWith(x, y) ::: x is frank with y.",
        "SickenedBy(x, y) ::: x has been sickened by y.",
        "Killed(x, y) ::: x killed y.",
        "Contains(x, y) ::: x contains y.",
        "Pocketed(x, y) ::: x pockets y.",
        "ResolvedToStay(x) ::: x resolves to stay.",
        "Watch(x, y) ::: x watches y.",
        "Die(x) ::: x dies."
      ],
      "premises": [
        "Alone(a_2) ::: Smith believes that he is alone.",
        "FrankWith(a_2, a_1) ::: Smith is frank with Holmes.",
        "SickenedBy(a_1, a_3) ::: Holmes has been sickened by the same illness that killed Smith's nephew Victor.",
        "Killed(a_3, a_4) ::: The illness killed Smith's nephew Victor.",
        "Contains(b_1, b_3) ::: The little ivory box contains a sharp spring infected with the illness.",
        "Pocketed(a_2, b_1) ::: Smith pockets the little ivory box, removing the evidence of his crime.",
        "ResolvedToStay(a_2) ::: Smith resolves to stay there.",
        "Watch(a_2, a_1) ::: Smith watches Holmes.",
        "Die(a_1) ::: Holmes is at risk of dying from the illness that killed Smith's nephew Victor."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "95": [
    {
      "id": 95,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 5,
      "paragraph": "Believing that they are alone, Smith is frank with Holmes. It soon emerges, to the hiding Watson’s horror, that Holmes has been sickened by the same illness that killed Smith’s nephew Victor. Smith then sees the little ivory box, which he had sent to Holmes by post, and which contains a sharp spring infected with the illness. Smith pockets it, removing the evidence of his crime. He then resolves to stay there and watch Holmes die.",
      "question_template": "Smith put [[CANDIDATE_ANSWER]] in his pocket.",
      "candidate_answers": [
        "The little ivory box",
        "A sharp spring infected with the illness"
      ],
      "predicates": [
        "Alone(x) ::: x believes that they are alone.",
        "FrankWith(x, y) ::: x is frank with y.",
        "SickenedBy(x, y) ::: x has been sickened by y.",
        "Killed(x, y) ::: x killed y.",
        "Contains(x, y) ::: x contains y.",
        "Pocketed(x, y) ::: x pockets y.",
        "ResolvedToStay(x) ::: x resolves to stay.",
        "Watch(x, y) ::: x watches y.",
        "Die(x) ::: x dies."
      ],
      "premises": [
        "Alone(a_2) ::: Smith believes that he is alone.",
        "FrankWith(a_2, a_1) ::: Smith is frank with Holmes.",
        "SickenedBy(a_1, a_3) ::: Holmes has been sickened by the same illness that killed Smith's nephew Victor.",
        "Killed(a_3, a_4) ::: The illness killed Smith's nephew Victor.",
        "Contains(b_1, b_3) ::: The little ivory box contains a sharp spring infected with the illness.",
        "Pocketed(a_2, b_1) ::: Smith pockets the little ivory box, removing the evidence of his crime.",
        "ResolvedToStay(a_2) ::: Smith resolves to stay there.",
        "Watch(a_2, a_1) ::: Smith watches Holmes.",
        "Die(a_1) ::: Holmes is at risk of dying from the illness that killed Smith's nephew Victor."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "96": [
    {
      "id": 96,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 3,
      "paragraph": "At six o’clock, Holmes tells Watson to turn the gaslight on, but only half-full. He then instructs Watson to bring Mr Culverton Smith of 13 Lower Burke Street to see Holmes, but to make sure that Watson returns to Baker Street before Smith arrives.",
      "question_template": "Holmes asked Watson to return to Baker Street because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "To make sure that Watson returns to Baker Street before Smith arrives"
      ],
      "predicates": [
        "TurnOnGaslight(x, y) ::: x turns on the gaslight to level y.",
        "Instructs(x, y, z) ::: x instructs y to do z.",
        "ReturnsTo(x, y) ::: x returns to location y before an event occurs.",
        "Arrives(x, y) ::: x arrives at location y."
      ],
      "premises": [
        "TurnOnGaslight(a_3, half_full) ::: Watson turns on the gaslight to half-full.",
        "Instructs(a_1, a_3, Bring(a_2)) ::: Holmes instructs Watson to bring Mr. Culverton Smith to see him.",
        "ReturnsTo(a_3, BakerStreet) → Arrives(a_2, a_1) ::: Watson must return to Baker Street before Mr. Culverton Smith arrives.",
        "Conclusion:",
        "Instructs(a_1, a_3, ReturnBefore(a_2, a_1)) ::: Holmes requires Watson to ensure that he returns to Baker Street before Mr. Culverton Smith arrives."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 96,
      "context_id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 7,
      "paragraph": "Holmes was never really dying. His feigned illness was a ruse to induce Smith to confess to his nephew’s murder. Holmes was not infected by the little box; he has enough enemies to know that he must always examine his mail carefully before he opens it. Starving himself for three days,and the claim of the \"disease's\" infectious nature was to keep Watson from examining him and discovering the ruse.",
      "question_template": "Holmes asked Watson to return to Baker Street because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Holmes was never really dying.",
        "His feigned illness was a ruse to induce Smith to confess to his nephew’s murder.",
        "Starving himself for three days, and the claim of the \"disease's\" infectious nature was to keep Watson from examining him and discovering the ruse."
      ],
      "predicates": [
        "FeignedIllness(x) ::: x has a feigned illness.",
        "InducedConfession(x, y) ::: x induced y to confess.",
        "Infected(x, y) ::: x is infected by y.",
        "ExamineMail(x) ::: x examines his mail carefully.",
        "Starved(x) ::: x starved himself.",
        "ClaimInfectiousNature(x) ::: x claims the disease has an infectious nature."
      ],
      "premises": [
        "FeignedIllness(a_1) ∧ InducedConfession(a_1, a_2) ::: Holmes feigned illness as a ruse to induce Smith to confess to his nephew’s murder.",
        "¬Infected(a_1, b_1) ::: Holmes was not infected by the little box.",
        "ExamineMail(a_1) ::: Holmes examines his mail carefully before he opens it.",
        "Starved(a_1) ∧ ClaimInfectiousNature(b_3) ::: Holmes starved himself for three days, and the claim of the \"disease's\" infectious nature was to keep Watson from examining him and discovering the ruse."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "97": [
    {
      "id": 97,
      "context_id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 0,
      "paragraph": " Andy Kaufman's (Jim Carrey) \"foreign man\" character appears in black and white, declaring that (due to massive editing), this is actually the end of the film, not the beginning. He plays a phonograph record alongside the credits before walking somberly off. Kaufman then comes back, and, in his normal voice, claiming he \"had to get rid of the people who don't understand me, and don't want to try,\" he proceeds to show the story of his life on a film projector, starting with his childhood home in Great Neck, New York, circa 1957.",
      "question_template": "[[CANDIDATE_ANSWER]] is where Andy Kaufman is from.",
      "candidate_answers": [
        "Great Neck, New York"
      ],
      "predicates": [
        "ForeignManCharacter(x) ::: x is Andy Kaufman's \"foreign man\" character.",
        "Editing(x) ::: x refers to the massive editing of the film.",
        "EndOfFilm(x) ::: x is the end of the film.",
        "PhonographRecord(x) ::: x is a phonograph record played by Andy Kaufman.",
        "Credits(x) ::: x refers to the credits of the film.",
        "NormalVoice(x) ::: x refers to Andy Kaufman's normal voice.",
        "Understand(x, y) ::: x understands y.",
        "ShowStory(x, y) ::: x shows the story of y.",
        "ChildhoodHome(x) ::: x refers to Andy Kaufman's childhood home.",
        "Location(x) ::: x is a location."
      ],
      "premises": [
        "ForeignManCharacter(andy) ∧ Editing(andy) ∧ EndOfFilm(andy) ::: Andy Kaufman's \"foreign man\" character appears in black and white, declaring that (due to massive editing), this is actually the end of the film.",
        "PhonographRecord(andy) ∧ Credits(andy) ::: He plays a phonograph record alongside the credits before walking somberly off.",
        "NormalVoice(andy) ∧ Understand(andy, people) ∧ ShowStory(andy, life) ::: Kaufman then comes back, and, in his normal voice, claiming he \"had to get rid of the people who don't understand me, and don't want to try,\" he proceeds to show the story of his life.",
        "ChildhoodHome(andy) ∧ Location(greatNeck) ∧ Year(1957) ::: starting with his childhood home in Great Neck, New York, circa 1957."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "99": [
    {
      "id": 99,
      "context_id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 2,
      "paragraph": "He catches the eye of talent agent George Shapiro (Danny DeVito), who signs Kaufman as a client and immediately lands him a network TV series, Taxi, much to Kaufman's dismay, since he dislikes sitcoms. Because of the money, visibility, and promise that he can do his own television special, Kaufman accepts the role on Taxi, turning his foreign man into a mechanic named Latka Gravas. He secretly hates doing the show, however, and expresses a desire to quit.",
      "question_template": "Andy Kaufman played [[CANDIDATE_ANSWER]] on the sitcom \"Taxi.\"",
      "candidate_answers": [
        "A mechanic named Latka Gravas"
      ],
      "predicates": [
        "CatchesEye(x, y) ::: x catches the eye of y.",
        "SignsAsClient(x, y) ::: x signs y as a client.",
        "LandsShow(x, y) ::: x lands y a network TV series.",
        "Dislikes(x, y) ::: x dislikes y.",
        "AcceptsRole(x, y) ::: x accepts the role of y.",
        "HatesDoing(x, y) ::: x hates doing y.",
        "ExpressesDesireToQuit(x) ::: x expresses a desire to quit."
      ],
      "premises": [
        "CatchesEye(andyKaufman, georgeShapiro) ::: Andy Kaufman catches the eye of talent agent George Shapiro.",
        "SignsAsClient(georgeShapiro, andyKaufman) ::: George Shapiro signs Kaufman as a client.",
        "LandsShow(georgeShapiro, taxi) ::: George Shapiro immediately lands Kaufman a network TV series, Taxi.",
        "Dislikes(andyKaufman, sitcoms) ::: Kaufman dislikes sitcoms.",
        "AcceptsRole(andyKaufman, taxi) ::: Kaufman accepts the role on Taxi.",
        "HatesDoing(andyKaufman, taxi) ::: Kaufman secretly hates doing the show.",
        "ExpressesDesireToQuit(andyKaufman) ::: Kaufman expresses a desire to quit."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 99,
      "context_id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 3,
      "paragraph": "Invited to catch a different act at a nightclub, Shapiro witnesses a performance from a rude, loud-mouthed lounge singer, Tony Clifton, whom Andy wants to guest-star on Taxi. Clifton's bad attitude is matched by his horrible appearance and demeanor. But backstage, when he meets Shapiro in person, Clifton takes off his sunglasses and reveals that he is actually Kaufman. Clifton is a \"villain character\" created by Kaufman and his creative partner, Bob Zmuda (Paul Giamatti). Once again, the gag is on the audience.",
      "question_template": "Andy Kaufman played [[CANDIDATE_ANSWER]] on the sitcom \"Taxi.\"",
      "candidate_answers": [
        "Clifton is a \"villain character\" created by Kaufman",
        "Tony Clifton, whom Andy wants to guest-star on Taxi"
      ],
      "predicates": [
        "Rude(x) ::: x is rude.",
        "LoudMouthed(x) ::: x is loud-mouthed.",
        "WantsGuestStar(x, y) ::: x wants y to guest-star on a show.",
        "BadAttitude(x) ::: x has a bad attitude.",
        "HorribleAppearance(x) ::: x has a horrible appearance.",
        "VillainCharacter(x) ::: x is a villain character.",
        "CreatedBy(x, y, z) ::: x is created by y and z.",
        "GagOnAudience(x) ::: x is a gag on the audience."
      ],
      "premises": [
        "Rude(tonyClifton) ∧ LoudMouthed(tonyClifton) ∧ BadAttitude(tonyClifton) ∧ HorribleAppearance(tonyClifton) ::: Tony Clifton is a rude, loud-mouthed lounge singer with a bad attitude and horrible appearance.",
        "WantsGuestStar(andyKaufman, tonyClifton) ::: Andy Kaufman wants Tony Clifton to guest-star on Taxi.",
        "VillainCharacter(tonyClifton) ∧ CreatedBy(tonyClifton, andyKaufman, zmuda) ::: Tony Clifton is a villain character created by Andy Kaufman and Bob Zmuda.",
        "GagOnAudience(tonyClifton) ::: The gag is on the audience when Tony Clifton reveals his true identity.",
        "Conclusion:",
        "¬Rude(tonyClifton) ∧ ¬LoudMouthed(tonyClifton) ∧ ¬BadAttitude(tonyClifton) ∧ ¬HorribleAppearance(tonyClifton) ::: Tony Clifton's rude and loud-mouthed persona is a facade."
      ],
      "conclusions": [
        "None",
        "WantsGuestStar(andyKaufman, tonyClifton)"
      ]
    },
    {
      "id": 99,
      "context_id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 4,
      "paragraph": "Kaufman's fame increases with his Saturday Night Live appearances, but he has problems with his new-found fame. When he travels to college campuses, audiences dislike his strange sense of humor and demand that he perform as Latka, so he deliberately antagonizes them by reading The Great Gatsby aloud from start to finish. Kaufman shows up on the Taxi set as Clifton and proceeds to cause chaos until he is removed from the studio lot. He relates to Shapiro that he never knows exactly how to entertain an audience \"short of faking my own death or setting the theater on fire.\"",
      "question_template": "Andy Kaufman played [[CANDIDATE_ANSWER]] on the sitcom \"Taxi.\"",
      "candidate_answers": [
        "Latka",
        "Clifton"
      ],
      "predicates": [
        "Famous(x) ::: x is famous.",
        "Dislikes(x, y) ::: x dislikes y.",
        "Demands(x, y) ::: x demands that y be performed.",
        "Antagonizes(x, y) ::: x deliberately antagonizes y.",
        "Performs(x, y) ::: x performs y.",
        "Chaos(x) ::: x causes chaos.",
        "Removed(x, y) ::: x is removed from y.",
        "KnowsHowToEntertain(x) ::: x knows how to entertain an audience."
      ],
      "premises": [
        "Famous(kaufman) ::: Kaufman's fame increases with his Saturday Night Live appearances.",
        "∀x (Dislikes(x, kaufman) ∧ Demands(x, latka) → Antagonizes(kaufman, x)) ::: When audiences dislike Kaufman's strange sense of humor and demand that he perform as Latka, he deliberately antagonizes them.",
        "Performs(kaufman, theGreatGatsby) ::: Kaufman performs The Great Gatsby aloud from start to finish.",
        "Chaos(clifton) ::: Tony Clifton causes chaos on the Taxi set.",
        "Removed(clifton, studioLot) ::: Tony Clifton is removed from the studio lot.",
        "¬KnowsHowToEntertain(kaufman) ::: Kaufman does not know how to entertain an audience effectively.",
        "∀x (KnowsHowToEntertain(x) → Famous(x)) ::: If someone knows how to entertain an audience, then that person is famous.",
        "Conclusion:",
        "¬KnowsHowToEntertain(kaufman) ::: Kaufman does not know how to entertain an audience effectively."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "100": [
    {
      "id": 100,
      "context_id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 4,
      "paragraph": "Kaufman's fame increases with his Saturday Night Live appearances, but he has problems with his new-found fame. When he travels to college campuses, audiences dislike his strange sense of humor and demand that he perform as Latka, so he deliberately antagonizes them by reading The Great Gatsby aloud from start to finish. Kaufman shows up on the Taxi set as Clifton and proceeds to cause chaos until he is removed from the studio lot. He relates to Shapiro that he never knows exactly how to entertain an audience \"short of faking my own death or setting the theater on fire.\"",
      "question_template": "[[CANDIDATE_ANSWER]] was Tony Clifton.",
      "candidate_answers": [
        "Kaufman shows up on the Taxi set as Clifton",
        "He relates to Shapiro that he never knows exactly how to entertain an audience"
      ],
      "predicates": [
        "Famous(x) ::: x is famous.",
        "Dislikes(x, y) ::: x dislikes y.",
        "Demands(x, y) ::: x demands that y be performed.",
        "Antagonizes(x, y) ::: x deliberately antagonizes y.",
        "Performs(x, y) ::: x performs y.",
        "Chaos(x) ::: x causes chaos.",
        "Removed(x, y) ::: x is removed from y.",
        "KnowsHowToEntertain(x) ::: x knows how to entertain an audience."
      ],
      "premises": [
        "Famous(kaufman) ::: Kaufman's fame increases with his Saturday Night Live appearances.",
        "∀x (Dislikes(x, kaufman) ∧ Demands(x, latka) → Antagonizes(kaufman, x)) ::: When audiences dislike Kaufman's strange sense of humor and demand that he perform as Latka, he deliberately antagonizes them.",
        "Performs(kaufman, theGreatGatsby) ::: Kaufman performs The Great Gatsby aloud from start to finish.",
        "Chaos(clifton) ::: Tony Clifton causes chaos on the Taxi set.",
        "Removed(clifton, studioLot) ::: Tony Clifton is removed from the studio lot.",
        "¬KnowsHowToEntertain(kaufman) ::: Kaufman does not know how to entertain an audience effectively.",
        "∀x (KnowsHowToEntertain(x) → Famous(x)) ::: If someone knows how to entertain an audience, then that person is famous.",
        "Conclusion:",
        "¬KnowsHowToEntertain(kaufman) ::: Kaufman does not know how to entertain an audience effectively."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "101": [
    {
      "id": 101,
      "context_id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 5,
      "paragraph": "Kaufman decides to become a professional wrestlerâbut to emphasize the \"villain\" angle, he would wrestle only women (hired actresses) and then berate them after winning, declaring himself \"Inter-Gender Wrestling Champion.\" He becomes smitten with one woman he wrestles, Lynne Margulies (Courtney Love), and they begin a romantic relationship.",
      "question_template": "Andy Kaufman had a romantic relationship with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Lynne Margulies",
        "One woman he wrestles"
      ],
      "predicates": [
        "ProfessionalWrestler(x) ::: x is a professional wrestler.",
        "WrestlesOnlyWomen(x) ::: x wrestles only women.",
        "BeratesAfterWinning(x) ::: x berates opponents after winning.",
        "InterGenderChampion(x) ::: x is the Inter-Gender Wrestling Champion.",
        "Smitten(x, y) ::: x is smitten with y.",
        "RomanticRelationship(x, y) ::: x has a romantic relationship with y.",
        "Actress(y) ::: y is an actress."
      ],
      "premises": [
        "ProfessionalWrestler(a_2) ∧ WrestlesOnlyWomen(a_2) ∧ BeratesAfterWinning(a_2) ∧ InterGenderChampion(a_2) ::: Andy Kaufman decides to become a professional wrestler, wrestles only women, berates them after winning, and declares himself the \"Inter-Gender Wrestling Champion.\"",
        "Smitten(a_2, a_1) ∧ RomanticRelationship(a_2, a_1) ::: Andy Kaufman becomes smitten with Lynne Margulies and they begin a romantic relationship.",
        "Actress(a_1) ::: Lynne Margulies is an actress.",
        "Conclusion:",
        "ProfessionalWrestler(a_2) ∧ WrestlesOnlyWomen(a_2) ∧ BeratesAfterWinning(a_2) ∧ InterGenderChampion(a_2) ::: Andy Kaufman is a professional wrestler who wrestles only women, berates them after winning, and is the Inter-Gender Wrestling Champion."
      ],
      "conclusions": [
        "Smitten(a_2, a_1) ∧ RomanticRelationship(a_2, a_1)",
        "Smitten(a_2, a_1) ∧ RomanticRelationship(a_2, a_1)"
      ]
    }
  ],
  "102": [
    {
      "id": 102,
      "context_id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 8,
      "paragraph": "One year later, in 1985, Tony Clifton appears at Andy Kaufman's tribute at The Comedy Store's main stage performing, \"I Will Survive.\" The camera pans over the crowd and reveals Zmuda in the audience. During the final credits, Kaufman briefly peeks in black-and-white again.",
      "question_template": "[[CANDIDATE_ANSWER]] is Bob Zmuda's relationship to Andy Kaufman.",
      "candidate_answers": [
        "Zmuda in the audience"
      ],
      "predicates": [
        "Appears(x, y) ::: x appears at event y.",
        "Performs(x, y) ::: x performs piece y.",
        "InAudience(x, y) ::: x is in the audience of event y.",
        "PansCamera(x, y) ::: x pans over the crowd at event y.",
        "Peeks(x, y) ::: x briefly peeks in at event y.",
        "BlackAndWhite(x) ::: x is in black-and-white."
      ],
      "premises": [
        "Appears(tonyClifton, tribute) ::: Tony Clifton appears at Andy Kaufman's tribute.",
        "Performs(tonyClifton, \"I Will Survive\") ::: Tony Clifton performs \"I Will Survive.\"",
        "PansCamera(camera, tribute) ::: The camera pans over the crowd at the tribute.",
        "InAudience(zmuda, tribute) ::: Zmuda is in the audience of the tribute.",
        "Peeks(kaufman, credits) ::: Andy Kaufman briefly peeks in during the final credits.",
        "BlackAndWhite(credits) ::: The final credits are in black-and-white.",
        "Conclusion:",
        "∃x (Appears(x, tribute) ∧ Performs(x, \"I Will Survive\")) ::: There exists a person who appears at the tribute and performs \"I Will Survive.\"",
        "∃y (InAudience(zmuda, y) ∧ PansCamera(camera, y)) ::: There exists an event where Zmuda is in the audience and the camera pans over the crowd."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "104": [
    {
      "id": 104,
      "context_id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 2,
      "paragraph": "He catches the eye of talent agent George Shapiro (Danny DeVito), who signs Kaufman as a client and immediately lands him a network TV series, Taxi, much to Kaufman's dismay, since he dislikes sitcoms. Because of the money, visibility, and promise that he can do his own television special, Kaufman accepts the role on Taxi, turning his foreign man into a mechanic named Latka Gravas. He secretly hates doing the show, however, and expresses a desire to quit.",
      "question_template": "[[CANDIDATE_ANSWER]] is the show on which Andy Kaufman threw a drink at Jerry Lawler.",
      "candidate_answers": [
        "Taxi"
      ],
      "predicates": [
        "CatchesEye(x, y) ::: x catches the eye of y.",
        "SignsAsClient(x, y) ::: x signs y as a client.",
        "LandsShow(x, y) ::: x lands y a network TV series.",
        "Dislikes(x, y) ::: x dislikes y.",
        "AcceptsRole(x, y) ::: x accepts the role of y.",
        "HatesDoing(x, y) ::: x hates doing y.",
        "ExpressesDesireToQuit(x) ::: x expresses a desire to quit."
      ],
      "premises": [
        "CatchesEye(andyKaufman, georgeShapiro) ::: Andy Kaufman catches the eye of talent agent George Shapiro.",
        "SignsAsClient(georgeShapiro, andyKaufman) ::: George Shapiro signs Kaufman as a client.",
        "LandsShow(georgeShapiro, taxi) ::: George Shapiro immediately lands Kaufman a network TV series, Taxi.",
        "Dislikes(andyKaufman, sitcoms) ::: Kaufman dislikes sitcoms.",
        "AcceptsRole(andyKaufman, taxi) ::: Kaufman accepts the role on Taxi.",
        "HatesDoing(andyKaufman, taxi) ::: Kaufman secretly hates doing the show.",
        "ExpressesDesireToQuit(andyKaufman) ::: Kaufman expresses a desire to quit."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "107": [
    {
      "id": 107,
      "context_id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 0,
      "paragraph": " Andy Kaufman's (Jim Carrey) \"foreign man\" character appears in black and white, declaring that (due to massive editing), this is actually the end of the film, not the beginning. He plays a phonograph record alongside the credits before walking somberly off. Kaufman then comes back, and, in his normal voice, claiming he \"had to get rid of the people who don't understand me, and don't want to try,\" he proceeds to show the story of his life on a film projector, starting with his childhood home in Great Neck, New York, circa 1957.",
      "question_template": "Kaufman's nightclub act fails because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- He had to get rid of the people who don't understand me, and don't want to try",
        "- He plays a phonograph record alongside the credits before walking somberly off"
      ],
      "predicates": [
        "ForeignManCharacter(x) ::: x is Andy Kaufman's \"foreign man\" character.",
        "Editing(x) ::: x refers to the massive editing of the film.",
        "EndOfFilm(x) ::: x is the end of the film.",
        "PhonographRecord(x) ::: x is a phonograph record played by Andy Kaufman.",
        "Credits(x) ::: x refers to the credits of the film.",
        "NormalVoice(x) ::: x refers to Andy Kaufman's normal voice.",
        "Understand(x, y) ::: x understands y.",
        "ShowStory(x, y) ::: x shows the story of y.",
        "ChildhoodHome(x) ::: x refers to Andy Kaufman's childhood home.",
        "Location(x) ::: x is a location."
      ],
      "premises": [
        "ForeignManCharacter(andy) ∧ Editing(andy) ∧ EndOfFilm(andy) ::: Andy Kaufman's \"foreign man\" character appears in black and white, declaring that (due to massive editing), this is actually the end of the film.",
        "PhonographRecord(andy) ∧ Credits(andy) ::: He plays a phonograph record alongside the credits before walking somberly off.",
        "NormalVoice(andy) ∧ Understand(andy, people) ∧ ShowStory(andy, life) ::: Kaufman then comes back, and, in his normal voice, claiming he \"had to get rid of the people who don't understand me, and don't want to try,\" he proceeds to show the story of his life.",
        "ChildhoodHome(andy) ∧ Location(greatNeck) ∧ Year(1957) ::: starting with his childhood home in Great Neck, New York, circa 1957."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 107,
      "context_id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 1,
      "paragraph": "Kaufman is a struggling performer whose act fails in nightclubs because, while the audience wants comedy, he sings children's songs and refuses to tell conventional jokes. As the audience begins to believe that Kaufman may have no real talent, his peculiar \"foreign man\" puts on a rhinestone jacket and does a dead-on Elvis impersonation and song. The audience bursts into applause, realizing Kaufman had tricked them.",
      "question_template": "Kaufman's nightclub act fails because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- His act fails in nightclubs because, while the audience wants comedy, he sings children's songs and refuses to tell conventional jokes.",
        "- The audience begins to believe that Kaufman may have no real talent."
      ],
      "predicates": [
        "StrugglingPerformer(x) ::: x is a struggling performer.",
        "FailsInNightclubs(x) ::: x's act fails in nightclubs.",
        "WantsComedy(a_0) ::: The audience wants comedy.",
        "SingsChildrensSongs(x) ::: x sings children's songs.",
        "RefusesToTellJokes(x) ::: x refuses to tell conventional jokes.",
        "Believes(x, y) ::: x believes that y is true.",
        "HasNoRealTalent(x) ::: x has no real talent.",
        "PutsOnJacket(x) ::: x puts on a rhinestone jacket.",
        "DoesImpersonation(x, y) ::: x does an impersonation of y.",
        "Applauds(a_0) ::: The audience applauds.",
        "Tricked(a_0, x) ::: a_0 is tricked by x."
      ],
      "premises": [
        "StrugglingPerformer(a_2) ∧ FailsInNightclubs(a_2) ∧ WantsComedy(a_0) ∧ SingsChildrensSongs(a_2) ∧ RefusesToTellJokes(a_2) ::: Kaufman is a struggling performer whose act fails in nightclubs because the audience wants comedy, he sings children's songs, and refuses to tell conventional jokes.",
        "∀a_0 (Believes(a_0, HasNoRealTalent(a_2))) ::: The audience begins to believe that Kaufman may have no real talent.",
        "PutsOnJacket(a_2) ∧ DoesImpersonation(a_2, Elvis) ::: Kaufman's peculiar \"foreign man\" puts on a rhinestone jacket and does a dead-on Elvis impersonation and song.",
        "Applauds(a_0) ::: The audience bursts into applause.",
        "Tricked(a_0, a_2) ::: The audience realizes Kaufman had tricked them.",
        "Conclusion:",
        "Tricked(a_0, a_2) ::: The audience was tricked by Kaufman."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 107,
      "context_id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 2,
      "paragraph": "He catches the eye of talent agent George Shapiro (Danny DeVito), who signs Kaufman as a client and immediately lands him a network TV series, Taxi, much to Kaufman's dismay, since he dislikes sitcoms. Because of the money, visibility, and promise that he can do his own television special, Kaufman accepts the role on Taxi, turning his foreign man into a mechanic named Latka Gravas. He secretly hates doing the show, however, and expresses a desire to quit.",
      "question_template": "Kaufman's nightclub act fails because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "He dislikes sitcoms",
        "He secretly hates doing the show"
      ],
      "predicates": [
        "CatchesEye(x, y) ::: x catches the eye of y.",
        "SignsAsClient(x, y) ::: x signs y as a client.",
        "LandsShow(x, y) ::: x lands y a network TV series.",
        "Dislikes(x, y) ::: x dislikes y.",
        "AcceptsRole(x, y) ::: x accepts the role of y.",
        "HatesDoing(x, y) ::: x hates doing y.",
        "ExpressesDesireToQuit(x) ::: x expresses a desire to quit."
      ],
      "premises": [
        "CatchesEye(andyKaufman, georgeShapiro) ::: Andy Kaufman catches the eye of talent agent George Shapiro.",
        "SignsAsClient(georgeShapiro, andyKaufman) ::: George Shapiro signs Kaufman as a client.",
        "LandsShow(georgeShapiro, taxi) ::: George Shapiro immediately lands Kaufman a network TV series, Taxi.",
        "Dislikes(andyKaufman, sitcoms) ::: Kaufman dislikes sitcoms.",
        "AcceptsRole(andyKaufman, taxi) ::: Kaufman accepts the role on Taxi.",
        "HatesDoing(andyKaufman, taxi) ::: Kaufman secretly hates doing the show.",
        "ExpressesDesireToQuit(andyKaufman) ::: Kaufman expresses a desire to quit."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 107,
      "context_id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 3,
      "paragraph": "Invited to catch a different act at a nightclub, Shapiro witnesses a performance from a rude, loud-mouthed lounge singer, Tony Clifton, whom Andy wants to guest-star on Taxi. Clifton's bad attitude is matched by his horrible appearance and demeanor. But backstage, when he meets Shapiro in person, Clifton takes off his sunglasses and reveals that he is actually Kaufman. Clifton is a \"villain character\" created by Kaufman and his creative partner, Bob Zmuda (Paul Giamatti). Once again, the gag is on the audience.",
      "question_template": "Kaufman's nightclub act fails because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Clifton's bad attitude",
        "His horrible appearance and demeanor"
      ],
      "predicates": [
        "Rude(x) ::: x is rude.",
        "LoudMouthed(x) ::: x is loud-mouthed.",
        "WantsGuestStar(x, y) ::: x wants y to guest-star on a show.",
        "BadAttitude(x) ::: x has a bad attitude.",
        "HorribleAppearance(x) ::: x has a horrible appearance.",
        "VillainCharacter(x) ::: x is a villain character.",
        "CreatedBy(x, y, z) ::: x is created by y and z.",
        "GagOnAudience(x) ::: x is a gag on the audience."
      ],
      "premises": [
        "Rude(tonyClifton) ∧ LoudMouthed(tonyClifton) ∧ BadAttitude(tonyClifton) ∧ HorribleAppearance(tonyClifton) ::: Tony Clifton is a rude, loud-mouthed lounge singer with a bad attitude and horrible appearance.",
        "WantsGuestStar(andyKaufman, tonyClifton) ::: Andy Kaufman wants Tony Clifton to guest-star on Taxi.",
        "VillainCharacter(tonyClifton) ∧ CreatedBy(tonyClifton, andyKaufman, zmuda) ::: Tony Clifton is a villain character created by Andy Kaufman and Bob Zmuda.",
        "GagOnAudience(tonyClifton) ::: The gag is on the audience when Tony Clifton reveals his true identity.",
        "Conclusion:",
        "¬Rude(tonyClifton) ∧ ¬LoudMouthed(tonyClifton) ∧ ¬BadAttitude(tonyClifton) ∧ ¬HorribleAppearance(tonyClifton) ::: Tony Clifton's rude and loud-mouthed persona is a facade."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "108": [
    {
      "id": 108,
      "context_id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 1,
      "paragraph": "Kaufman is a struggling performer whose act fails in nightclubs because, while the audience wants comedy, he sings children's songs and refuses to tell conventional jokes. As the audience begins to believe that Kaufman may have no real talent, his peculiar \"foreign man\" puts on a rhinestone jacket and does a dead-on Elvis impersonation and song. The audience bursts into applause, realizing Kaufman had tricked them.",
      "question_template": "Kaufman impersonates [[CANDIDATE_ANSWER]] via his \"foreign man\" character.",
      "candidate_answers": [
        "Elvis"
      ],
      "predicates": [
        "StrugglingPerformer(x) ::: x is a struggling performer.",
        "FailsInNightclubs(x) ::: x's act fails in nightclubs.",
        "WantsComedy(a_0) ::: The audience wants comedy.",
        "SingsChildrensSongs(x) ::: x sings children's songs.",
        "RefusesToTellJokes(x) ::: x refuses to tell conventional jokes.",
        "Believes(x, y) ::: x believes that y is true.",
        "HasNoRealTalent(x) ::: x has no real talent.",
        "PutsOnJacket(x) ::: x puts on a rhinestone jacket.",
        "DoesImpersonation(x, y) ::: x does an impersonation of y.",
        "Applauds(a_0) ::: The audience applauds.",
        "Tricked(a_0, x) ::: a_0 is tricked by x."
      ],
      "premises": [
        "StrugglingPerformer(a_2) ∧ FailsInNightclubs(a_2) ∧ WantsComedy(a_0) ∧ SingsChildrensSongs(a_2) ∧ RefusesToTellJokes(a_2) ::: Kaufman is a struggling performer whose act fails in nightclubs because the audience wants comedy, he sings children's songs, and refuses to tell conventional jokes.",
        "∀a_0 (Believes(a_0, HasNoRealTalent(a_2))) ::: The audience begins to believe that Kaufman may have no real talent.",
        "PutsOnJacket(a_2) ∧ DoesImpersonation(a_2, Elvis) ::: Kaufman's peculiar \"foreign man\" puts on a rhinestone jacket and does a dead-on Elvis impersonation and song.",
        "Applauds(a_0) ::: The audience bursts into applause.",
        "Tricked(a_0, a_2) ::: The audience realizes Kaufman had tricked them.",
        "Conclusion:",
        "Tricked(a_0, a_2) ::: The audience was tricked by Kaufman."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "109": [
    {
      "id": 109,
      "context_id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 2,
      "paragraph": "He catches the eye of talent agent George Shapiro (Danny DeVito), who signs Kaufman as a client and immediately lands him a network TV series, Taxi, much to Kaufman's dismay, since he dislikes sitcoms. Because of the money, visibility, and promise that he can do his own television special, Kaufman accepts the role on Taxi, turning his foreign man into a mechanic named Latka Gravas. He secretly hates doing the show, however, and expresses a desire to quit.",
      "question_template": "Kaufman accepts a role on the television sitcom [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Taxi"
      ],
      "predicates": [
        "CatchesEye(x, y) ::: x catches the eye of y.",
        "SignsAsClient(x, y) ::: x signs y as a client.",
        "LandsShow(x, y) ::: x lands y a network TV series.",
        "Dislikes(x, y) ::: x dislikes y.",
        "AcceptsRole(x, y) ::: x accepts the role of y.",
        "HatesDoing(x, y) ::: x hates doing y.",
        "ExpressesDesireToQuit(x) ::: x expresses a desire to quit."
      ],
      "premises": [
        "CatchesEye(andyKaufman, georgeShapiro) ::: Andy Kaufman catches the eye of talent agent George Shapiro.",
        "SignsAsClient(georgeShapiro, andyKaufman) ::: George Shapiro signs Kaufman as a client.",
        "LandsShow(georgeShapiro, taxi) ::: George Shapiro immediately lands Kaufman a network TV series, Taxi.",
        "Dislikes(andyKaufman, sitcoms) ::: Kaufman dislikes sitcoms.",
        "AcceptsRole(andyKaufman, taxi) ::: Kaufman accepts the role on Taxi.",
        "HatesDoing(andyKaufman, taxi) ::: Kaufman secretly hates doing the show.",
        "ExpressesDesireToQuit(andyKaufman) ::: Kaufman expresses a desire to quit."
      ],
      "conclusions": [
        "AcceptsRole(andyKaufman, taxi)"
      ]
    },
    {
      "id": 109,
      "context_id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 3,
      "paragraph": "Invited to catch a different act at a nightclub, Shapiro witnesses a performance from a rude, loud-mouthed lounge singer, Tony Clifton, whom Andy wants to guest-star on Taxi. Clifton's bad attitude is matched by his horrible appearance and demeanor. But backstage, when he meets Shapiro in person, Clifton takes off his sunglasses and reveals that he is actually Kaufman. Clifton is a \"villain character\" created by Kaufman and his creative partner, Bob Zmuda (Paul Giamatti). Once again, the gag is on the audience.",
      "question_template": "Kaufman accepts a role on the television sitcom [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Taxi"
      ],
      "predicates": [
        "Rude(x) ::: x is rude.",
        "LoudMouthed(x) ::: x is loud-mouthed.",
        "WantsGuestStar(x, y) ::: x wants y to guest-star on a show.",
        "BadAttitude(x) ::: x has a bad attitude.",
        "HorribleAppearance(x) ::: x has a horrible appearance.",
        "VillainCharacter(x) ::: x is a villain character.",
        "CreatedBy(x, y, z) ::: x is created by y and z.",
        "GagOnAudience(x) ::: x is a gag on the audience."
      ],
      "premises": [
        "Rude(tonyClifton) ∧ LoudMouthed(tonyClifton) ∧ BadAttitude(tonyClifton) ∧ HorribleAppearance(tonyClifton) ::: Tony Clifton is a rude, loud-mouthed lounge singer with a bad attitude and horrible appearance.",
        "WantsGuestStar(andyKaufman, tonyClifton) ::: Andy Kaufman wants Tony Clifton to guest-star on Taxi.",
        "VillainCharacter(tonyClifton) ∧ CreatedBy(tonyClifton, andyKaufman, zmuda) ::: Tony Clifton is a villain character created by Andy Kaufman and Bob Zmuda.",
        "GagOnAudience(tonyClifton) ::: The gag is on the audience when Tony Clifton reveals his true identity.",
        "Conclusion:",
        "¬Rude(tonyClifton) ∧ ¬LoudMouthed(tonyClifton) ∧ ¬BadAttitude(tonyClifton) ∧ ¬HorribleAppearance(tonyClifton) ::: Tony Clifton's rude and loud-mouthed persona is a facade."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "110": [
    {
      "id": 110,
      "context_id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 0,
      "paragraph": " Andy Kaufman's (Jim Carrey) \"foreign man\" character appears in black and white, declaring that (due to massive editing), this is actually the end of the film, not the beginning. He plays a phonograph record alongside the credits before walking somberly off. Kaufman then comes back, and, in his normal voice, claiming he \"had to get rid of the people who don't understand me, and don't want to try,\" he proceeds to show the story of his life on a film projector, starting with his childhood home in Great Neck, New York, circa 1957.",
      "question_template": "Kaufman feels [[CANDIDATE_ANSWER]] about sitcoms.",
      "candidate_answers": [
        "- He \"had to get rid of the people who don't understand me, and don't want to try\"",
        "- His \"foreign man\" character appears in black and white",
        "- He plays a phonograph record alongside the credits"
      ],
      "predicates": [
        "ForeignManCharacter(x) ::: x is Andy Kaufman's \"foreign man\" character.",
        "Editing(x) ::: x refers to the massive editing of the film.",
        "EndOfFilm(x) ::: x is the end of the film.",
        "PhonographRecord(x) ::: x is a phonograph record played by Andy Kaufman.",
        "Credits(x) ::: x refers to the credits of the film.",
        "NormalVoice(x) ::: x refers to Andy Kaufman's normal voice.",
        "Understand(x, y) ::: x understands y.",
        "ShowStory(x, y) ::: x shows the story of y.",
        "ChildhoodHome(x) ::: x refers to Andy Kaufman's childhood home.",
        "Location(x) ::: x is a location."
      ],
      "premises": [
        "ForeignManCharacter(andy) ∧ Editing(andy) ∧ EndOfFilm(andy) ::: Andy Kaufman's \"foreign man\" character appears in black and white, declaring that (due to massive editing), this is actually the end of the film.",
        "PhonographRecord(andy) ∧ Credits(andy) ::: He plays a phonograph record alongside the credits before walking somberly off.",
        "NormalVoice(andy) ∧ Understand(andy, people) ∧ ShowStory(andy, life) ::: Kaufman then comes back, and, in his normal voice, claiming he \"had to get rid of the people who don't understand me, and don't want to try,\" he proceeds to show the story of his life.",
        "ChildhoodHome(andy) ∧ Location(greatNeck) ∧ Year(1957) ::: starting with his childhood home in Great Neck, New York, circa 1957."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 110,
      "context_id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 2,
      "paragraph": "He catches the eye of talent agent George Shapiro (Danny DeVito), who signs Kaufman as a client and immediately lands him a network TV series, Taxi, much to Kaufman's dismay, since he dislikes sitcoms. Because of the money, visibility, and promise that he can do his own television special, Kaufman accepts the role on Taxi, turning his foreign man into a mechanic named Latka Gravas. He secretly hates doing the show, however, and expresses a desire to quit.",
      "question_template": "Kaufman feels [[CANDIDATE_ANSWER]] about sitcoms.",
      "candidate_answers": [
        "- He dislikes sitcoms",
        "- He secretly hates doing the show"
      ],
      "predicates": [
        "CatchesEye(x, y) ::: x catches the eye of y.",
        "SignsAsClient(x, y) ::: x signs y as a client.",
        "LandsShow(x, y) ::: x lands y a network TV series.",
        "Dislikes(x, y) ::: x dislikes y.",
        "AcceptsRole(x, y) ::: x accepts the role of y.",
        "HatesDoing(x, y) ::: x hates doing y.",
        "ExpressesDesireToQuit(x) ::: x expresses a desire to quit."
      ],
      "premises": [
        "CatchesEye(andyKaufman, georgeShapiro) ::: Andy Kaufman catches the eye of talent agent George Shapiro.",
        "SignsAsClient(georgeShapiro, andyKaufman) ::: George Shapiro signs Kaufman as a client.",
        "LandsShow(georgeShapiro, taxi) ::: George Shapiro immediately lands Kaufman a network TV series, Taxi.",
        "Dislikes(andyKaufman, sitcoms) ::: Kaufman dislikes sitcoms.",
        "AcceptsRole(andyKaufman, taxi) ::: Kaufman accepts the role on Taxi.",
        "HatesDoing(andyKaufman, taxi) ::: Kaufman secretly hates doing the show.",
        "ExpressesDesireToQuit(andyKaufman) ::: Kaufman expresses a desire to quit."
      ],
      "conclusions": [
        "None",
        "HatesDoing(andyKaufman, taxi) ∧ Dislikes(andyKaufman, sitcoms)"
      ]
    }
  ],
  "111": [
    {
      "id": 111,
      "context_id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 8,
      "paragraph": "One year later, in 1985, Tony Clifton appears at Andy Kaufman's tribute at The Comedy Store's main stage performing, \"I Will Survive.\" The camera pans over the crowd and reveals Zmuda in the audience. During the final credits, Kaufman briefly peeks in black-and-white again.",
      "question_template": "Kaufman's fame increases through appearances on [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The Comedy Store's main stage"
      ],
      "predicates": [
        "Appears(x, y) ::: x appears at event y.",
        "Performs(x, y) ::: x performs piece y.",
        "InAudience(x, y) ::: x is in the audience of event y.",
        "PansCamera(x, y) ::: x pans over the crowd at event y.",
        "Peeks(x, y) ::: x briefly peeks in at event y.",
        "BlackAndWhite(x) ::: x is in black-and-white."
      ],
      "premises": [
        "Appears(tonyClifton, tribute) ::: Tony Clifton appears at Andy Kaufman's tribute.",
        "Performs(tonyClifton, \"I Will Survive\") ::: Tony Clifton performs \"I Will Survive.\"",
        "PansCamera(camera, tribute) ::: The camera pans over the crowd at the tribute.",
        "InAudience(zmuda, tribute) ::: Zmuda is in the audience of the tribute.",
        "Peeks(kaufman, credits) ::: Andy Kaufman briefly peeks in during the final credits.",
        "BlackAndWhite(credits) ::: The final credits are in black-and-white.",
        "Conclusion:",
        "∃x (Appears(x, tribute) ∧ Performs(x, \"I Will Survive\")) ::: There exists a person who appears at the tribute and performs \"I Will Survive.\"",
        "∃y (InAudience(zmuda, y) ∧ PansCamera(camera, y)) ::: There exists an event where Zmuda is in the audience and the camera pans over the crowd."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "113": [
    {
      "id": 113,
      "context_id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 5,
      "paragraph": "Kaufman decides to become a professional wrestlerâbut to emphasize the \"villain\" angle, he would wrestle only women (hired actresses) and then berate them after winning, declaring himself \"Inter-Gender Wrestling Champion.\" He becomes smitten with one woman he wrestles, Lynne Margulies (Courtney Love), and they begin a romantic relationship.",
      "question_template": "Kaufman sets the limitation that he will [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "He would wrestle only women"
      ],
      "predicates": [
        "ProfessionalWrestler(x) ::: x is a professional wrestler.",
        "WrestlesOnlyWomen(x) ::: x wrestles only women.",
        "BeratesAfterWinning(x) ::: x berates opponents after winning.",
        "InterGenderChampion(x) ::: x is the Inter-Gender Wrestling Champion.",
        "Smitten(x, y) ::: x is smitten with y.",
        "RomanticRelationship(x, y) ::: x has a romantic relationship with y.",
        "Actress(y) ::: y is an actress."
      ],
      "premises": [
        "ProfessionalWrestler(a_2) ∧ WrestlesOnlyWomen(a_2) ∧ BeratesAfterWinning(a_2) ∧ InterGenderChampion(a_2) ::: Andy Kaufman decides to become a professional wrestler, wrestles only women, berates them after winning, and declares himself the \"Inter-Gender Wrestling Champion.\"",
        "Smitten(a_2, a_1) ∧ RomanticRelationship(a_2, a_1) ::: Andy Kaufman becomes smitten with Lynne Margulies and they begin a romantic relationship.",
        "Actress(a_1) ::: Lynne Margulies is an actress.",
        "Conclusion:",
        "ProfessionalWrestler(a_2) ∧ WrestlesOnlyWomen(a_2) ∧ BeratesAfterWinning(a_2) ∧ InterGenderChampion(a_2) ::: Andy Kaufman is a professional wrestler who wrestles only women, berates them after winning, and is the Inter-Gender Wrestling Champion."
      ],
      "conclusions": [
        "WrestlesOnlyWomen(a_2)"
      ]
    }
  ],
  "114": [
    {
      "id": 114,
      "context_id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 1,
      "paragraph": "Kaufman is a struggling performer whose act fails in nightclubs because, while the audience wants comedy, he sings children's songs and refuses to tell conventional jokes. As the audience begins to believe that Kaufman may have no real talent, his peculiar \"foreign man\" puts on a rhinestone jacket and does a dead-on Elvis impersonation and song. The audience bursts into applause, realizing Kaufman had tricked them.",
      "question_template": "Kaufman refuses to [[CANDIDATE_ANSWER]] on a live ABC show.",
      "candidate_answers": [
        "Refuses to tell conventional jokes"
      ],
      "predicates": [
        "StrugglingPerformer(x) ::: x is a struggling performer.",
        "FailsInNightclubs(x) ::: x's act fails in nightclubs.",
        "WantsComedy(a_0) ::: The audience wants comedy.",
        "SingsChildrensSongs(x) ::: x sings children's songs.",
        "RefusesToTellJokes(x) ::: x refuses to tell conventional jokes.",
        "Believes(x, y) ::: x believes that y is true.",
        "HasNoRealTalent(x) ::: x has no real talent.",
        "PutsOnJacket(x) ::: x puts on a rhinestone jacket.",
        "DoesImpersonation(x, y) ::: x does an impersonation of y.",
        "Applauds(a_0) ::: The audience applauds.",
        "Tricked(a_0, x) ::: a_0 is tricked by x."
      ],
      "premises": [
        "StrugglingPerformer(a_2) ∧ FailsInNightclubs(a_2) ∧ WantsComedy(a_0) ∧ SingsChildrensSongs(a_2) ∧ RefusesToTellJokes(a_2) ::: Kaufman is a struggling performer whose act fails in nightclubs because the audience wants comedy, he sings children's songs, and refuses to tell conventional jokes.",
        "∀a_0 (Believes(a_0, HasNoRealTalent(a_2))) ::: The audience begins to believe that Kaufman may have no real talent.",
        "PutsOnJacket(a_2) ∧ DoesImpersonation(a_2, Elvis) ::: Kaufman's peculiar \"foreign man\" puts on a rhinestone jacket and does a dead-on Elvis impersonation and song.",
        "Applauds(a_0) ::: The audience bursts into applause.",
        "Tricked(a_0, a_2) ::: The audience realizes Kaufman had tricked them.",
        "Conclusion:",
        "Tricked(a_0, a_2) ::: The audience was tricked by Kaufman."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 114,
      "context_id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 2,
      "paragraph": "He catches the eye of talent agent George Shapiro (Danny DeVito), who signs Kaufman as a client and immediately lands him a network TV series, Taxi, much to Kaufman's dismay, since he dislikes sitcoms. Because of the money, visibility, and promise that he can do his own television special, Kaufman accepts the role on Taxi, turning his foreign man into a mechanic named Latka Gravas. He secretly hates doing the show, however, and expresses a desire to quit.",
      "question_template": "Kaufman refuses to [[CANDIDATE_ANSWER]] on a live ABC show.",
      "candidate_answers": [
        "He secretly hates doing the show",
        "Expresses a desire to quit"
      ],
      "predicates": [
        "CatchesEye(x, y) ::: x catches the eye of y.",
        "SignsAsClient(x, y) ::: x signs y as a client.",
        "LandsShow(x, y) ::: x lands y a network TV series.",
        "Dislikes(x, y) ::: x dislikes y.",
        "AcceptsRole(x, y) ::: x accepts the role of y.",
        "HatesDoing(x, y) ::: x hates doing y.",
        "ExpressesDesireToQuit(x) ::: x expresses a desire to quit."
      ],
      "premises": [
        "CatchesEye(andyKaufman, georgeShapiro) ::: Andy Kaufman catches the eye of talent agent George Shapiro.",
        "SignsAsClient(georgeShapiro, andyKaufman) ::: George Shapiro signs Kaufman as a client.",
        "LandsShow(georgeShapiro, taxi) ::: George Shapiro immediately lands Kaufman a network TV series, Taxi.",
        "Dislikes(andyKaufman, sitcoms) ::: Kaufman dislikes sitcoms.",
        "AcceptsRole(andyKaufman, taxi) ::: Kaufman accepts the role on Taxi.",
        "HatesDoing(andyKaufman, taxi) ::: Kaufman secretly hates doing the show.",
        "ExpressesDesireToQuit(andyKaufman) ::: Kaufman expresses a desire to quit."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "118": [
    {
      "id": 118,
      "context_id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 2,
      "paragraph": "He catches the eye of talent agent George Shapiro (Danny DeVito), who signs Kaufman as a client and immediately lands him a network TV series, Taxi, much to Kaufman's dismay, since he dislikes sitcoms. Because of the money, visibility, and promise that he can do his own television special, Kaufman accepts the role on Taxi, turning his foreign man into a mechanic named Latka Gravas. He secretly hates doing the show, however, and expresses a desire to quit.",
      "question_template": "Kaufman is on [[CANDIDATE_ANSWER]] when he refuses to speak his lines.",
      "candidate_answers": [
        "Taxi"
      ],
      "predicates": [
        "CatchesEye(x, y) ::: x catches the eye of y.",
        "SignsAsClient(x, y) ::: x signs y as a client.",
        "LandsShow(x, y) ::: x lands y a network TV series.",
        "Dislikes(x, y) ::: x dislikes y.",
        "AcceptsRole(x, y) ::: x accepts the role of y.",
        "HatesDoing(x, y) ::: x hates doing y.",
        "ExpressesDesireToQuit(x) ::: x expresses a desire to quit."
      ],
      "premises": [
        "CatchesEye(andyKaufman, georgeShapiro) ::: Andy Kaufman catches the eye of talent agent George Shapiro.",
        "SignsAsClient(georgeShapiro, andyKaufman) ::: George Shapiro signs Kaufman as a client.",
        "LandsShow(georgeShapiro, taxi) ::: George Shapiro immediately lands Kaufman a network TV series, Taxi.",
        "Dislikes(andyKaufman, sitcoms) ::: Kaufman dislikes sitcoms.",
        "AcceptsRole(andyKaufman, taxi) ::: Kaufman accepts the role on Taxi.",
        "HatesDoing(andyKaufman, taxi) ::: Kaufman secretly hates doing the show.",
        "ExpressesDesireToQuit(andyKaufman) ::: Kaufman expresses a desire to quit."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "120": [
    {
      "id": 120,
      "context_id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 4,
      "paragraph": "Kaufman's fame increases with his Saturday Night Live appearances, but he has problems with his new-found fame. When he travels to college campuses, audiences dislike his strange sense of humor and demand that he perform as Latka, so he deliberately antagonizes them by reading The Great Gatsby aloud from start to finish. Kaufman shows up on the Taxi set as Clifton and proceeds to cause chaos until he is removed from the studio lot. He relates to Shapiro that he never knows exactly how to entertain an audience \"short of faking my own death or setting the theater on fire.\"",
      "question_template": "Andy is banned from Saturday Night Live because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- He shows up on the Taxi set as Clifton and proceeds to cause chaos until he is removed from the studio lot."
      ],
      "predicates": [
        "Famous(x) ::: x is famous.",
        "Dislikes(x, y) ::: x dislikes y.",
        "Demands(x, y) ::: x demands that y be performed.",
        "Antagonizes(x, y) ::: x deliberately antagonizes y.",
        "Performs(x, y) ::: x performs y.",
        "Chaos(x) ::: x causes chaos.",
        "Removed(x, y) ::: x is removed from y.",
        "KnowsHowToEntertain(x) ::: x knows how to entertain an audience."
      ],
      "premises": [
        "Famous(kaufman) ::: Kaufman's fame increases with his Saturday Night Live appearances.",
        "∀x (Dislikes(x, kaufman) ∧ Demands(x, latka) → Antagonizes(kaufman, x)) ::: When audiences dislike Kaufman's strange sense of humor and demand that he perform as Latka, he deliberately antagonizes them.",
        "Performs(kaufman, theGreatGatsby) ::: Kaufman performs The Great Gatsby aloud from start to finish.",
        "Chaos(clifton) ::: Tony Clifton causes chaos on the Taxi set.",
        "Removed(clifton, studioLot) ::: Tony Clifton is removed from the studio lot.",
        "¬KnowsHowToEntertain(kaufman) ::: Kaufman does not know how to entertain an audience effectively.",
        "∀x (KnowsHowToEntertain(x) → Famous(x)) ::: If someone knows how to entertain an audience, then that person is famous.",
        "Conclusion:",
        "¬KnowsHowToEntertain(kaufman) ::: Kaufman does not know how to entertain an audience effectively."
      ],
      "conclusions": [
        "Removed(clifton, studioLot) ∧ Chaos(clifton)"
      ]
    }
  ],
  "121": [
    {
      "id": 121,
      "context_id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 5,
      "paragraph": "Kaufman decides to become a professional wrestlerâbut to emphasize the \"villain\" angle, he would wrestle only women (hired actresses) and then berate them after winning, declaring himself \"Inter-Gender Wrestling Champion.\" He becomes smitten with one woman he wrestles, Lynne Margulies (Courtney Love), and they begin a romantic relationship.",
      "question_template": "Kaufman meets Lynne in [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "He becomes smitten with one woman he wrestles, Lynne Margulies"
      ],
      "predicates": [
        "ProfessionalWrestler(x) ::: x is a professional wrestler.",
        "WrestlesOnlyWomen(x) ::: x wrestles only women.",
        "BeratesAfterWinning(x) ::: x berates opponents after winning.",
        "InterGenderChampion(x) ::: x is the Inter-Gender Wrestling Champion.",
        "Smitten(x, y) ::: x is smitten with y.",
        "RomanticRelationship(x, y) ::: x has a romantic relationship with y.",
        "Actress(y) ::: y is an actress."
      ],
      "premises": [
        "ProfessionalWrestler(a_2) ∧ WrestlesOnlyWomen(a_2) ∧ BeratesAfterWinning(a_2) ∧ InterGenderChampion(a_2) ::: Andy Kaufman decides to become a professional wrestler, wrestles only women, berates them after winning, and declares himself the \"Inter-Gender Wrestling Champion.\"",
        "Smitten(a_2, a_1) ∧ RomanticRelationship(a_2, a_1) ::: Andy Kaufman becomes smitten with Lynne Margulies and they begin a romantic relationship.",
        "Actress(a_1) ::: Lynne Margulies is an actress.",
        "Conclusion:",
        "ProfessionalWrestler(a_2) ∧ WrestlesOnlyWomen(a_2) ∧ BeratesAfterWinning(a_2) ∧ InterGenderChampion(a_2) ::: Andy Kaufman is a professional wrestler who wrestles only women, berates them after winning, and is the Inter-Gender Wrestling Champion."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 121,
      "context_id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 7,
      "paragraph": "After a show at a comedy club, Kaufman calls together Lynne, Zmuda, and Shapiro to disclose that he has been diagnosed with a rare form of lung cancer and may die soon. They aren't sure whether to believe this, thinking it could be yet another Kaufman stunt, with Zmuda actually believing a fake death would be a fantastic prank. With a short time to live, Kaufman gets a booking at Carnegie Hall, his dream venue. The performance is a memorable success, culminating with Kaufman inviting the entire audience out for milk and cookies. His health deteriorates. Desperate, he heads to the Philippines to seek a medical \"miracle\" (actually psychic surgery), where doctors supposedly pull out infected organs from the body; he discovers the scam and laughs at the irony. He dies soon after. Friends and loved ones do a sing-along with a video of Andy at his funeral.",
      "question_template": "Kaufman meets Lynne in [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The paragraph does not provide any information about where Kaufman meets Lynne."
      ],
      "predicates": [
        "Diagnosed(a_2, lung_cancer) ::: Andy Kaufman has been diagnosed with a rare form of lung cancer.",
        "Believes(a_3, stunt) ::: Zmuda believes that Kaufman's announcement could be a stunt.",
        "Booking(a_2, carnegie_hall) ::: Andy Kaufman gets a booking at Carnegie Hall.",
        "SuccessfulPerformance(c_0) ::: The performance at Carnegie Hall is a memorable success.",
        "InvitesAudience(c_0) ::: Kaufman invites the entire audience out for milk and cookies.",
        "Deteriorates(a_2) ::: Andy Kaufman's health deteriorates.",
        "SeeksMiracle(a_2, philippines) ::: Andy Kaufman heads to the Philippines to seek a medical \"miracle\".",
        "DiscoversScam(a_2) ::: Andy Kaufman discovers the scam regarding the medical \"miracle\".",
        "LaughsAtIrony(a_2) ::: Andy Kaufman laughs at the irony of the situation.",
        "Dies(a_2) ::: Andy Kaufman dies soon after.",
        "SingAlong(d_1) ::: Friends and loved ones do a sing-along at Andy Kaufman's funeral."
      ],
      "premises": [
        "Diagnosed(a_2, lung_cancer) ::: Andy Kaufman has been diagnosed with a rare form of lung cancer.",
        "∀x (Believes(x, stunt) → (x = a_3)) ::: Zmuda believes that Kaufman's announcement could be a stunt.",
        "Booking(a_2, carnegie_hall) ::: Andy Kaufman gets a booking at Carnegie Hall.",
        "SuccessfulPerformance(c_0) ::: The performance at Carnegie Hall is a memorable success.",
        "InvitesAudience(c_0) ::: Kaufman invites the entire audience out for milk and cookies.",
        "Deteriorates(a_2) ::: Andy Kaufman's health deteriorates as he seeks a medical \"miracle\" in the Philippines.",
        "SeeksMiracle(a_2, philippines) ::: Andy Kaufman heads to the Philippines to seek a medical \"miracle\".",
        "DiscoversScam(a_2) ::: Andy Kaufman discovers the scam regarding the medical \"miracle\".",
        "LaughsAtIrony(a_2) ::: Andy Kaufman laughs at the irony of the situation.",
        "Dies(a_2) ::: Andy Kaufman dies soon after.",
        "SingAlong(d_1) ::: Friends and loved ones do a sing-along at Andy Kaufman's funeral."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "122": [
    {
      "id": 122,
      "context_id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 2,
      "paragraph": "He catches the eye of talent agent George Shapiro (Danny DeVito), who signs Kaufman as a client and immediately lands him a network TV series, Taxi, much to Kaufman's dismay, since he dislikes sitcoms. Because of the money, visibility, and promise that he can do his own television special, Kaufman accepts the role on Taxi, turning his foreign man into a mechanic named Latka Gravas. He secretly hates doing the show, however, and expresses a desire to quit.",
      "question_template": "Kaufman feels [[CANDIDATE_ANSWER]] about Taxi.",
      "candidate_answers": [
        "He secretly hates doing the show",
        "Dislikes sitcoms"
      ],
      "predicates": [
        "CatchesEye(x, y) ::: x catches the eye of y.",
        "SignsAsClient(x, y) ::: x signs y as a client.",
        "LandsShow(x, y) ::: x lands y a network TV series.",
        "Dislikes(x, y) ::: x dislikes y.",
        "AcceptsRole(x, y) ::: x accepts the role of y.",
        "HatesDoing(x, y) ::: x hates doing y.",
        "ExpressesDesireToQuit(x) ::: x expresses a desire to quit."
      ],
      "premises": [
        "CatchesEye(andyKaufman, georgeShapiro) ::: Andy Kaufman catches the eye of talent agent George Shapiro.",
        "SignsAsClient(georgeShapiro, andyKaufman) ::: George Shapiro signs Kaufman as a client.",
        "LandsShow(georgeShapiro, taxi) ::: George Shapiro immediately lands Kaufman a network TV series, Taxi.",
        "Dislikes(andyKaufman, sitcoms) ::: Kaufman dislikes sitcoms.",
        "AcceptsRole(andyKaufman, taxi) ::: Kaufman accepts the role on Taxi.",
        "HatesDoing(andyKaufman, taxi) ::: Kaufman secretly hates doing the show.",
        "ExpressesDesireToQuit(andyKaufman) ::: Kaufman expresses a desire to quit."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "126": [
    {
      "id": 126,
      "context_id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 5,
      "paragraph": "Kaufman decides to become a professional wrestlerâbut to emphasize the \"villain\" angle, he would wrestle only women (hired actresses) and then berate them after winning, declaring himself \"Inter-Gender Wrestling Champion.\" He becomes smitten with one woman he wrestles, Lynne Margulies (Courtney Love), and they begin a romantic relationship.",
      "question_template": "Kaufman decides to become a professional of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "professional wrestler",
        "wrestle only women",
        "Inter-Gender Wrestling Champion"
      ],
      "predicates": [
        "ProfessionalWrestler(x) ::: x is a professional wrestler.",
        "WrestlesOnlyWomen(x) ::: x wrestles only women.",
        "BeratesAfterWinning(x) ::: x berates opponents after winning.",
        "InterGenderChampion(x) ::: x is the Inter-Gender Wrestling Champion.",
        "Smitten(x, y) ::: x is smitten with y.",
        "RomanticRelationship(x, y) ::: x has a romantic relationship with y.",
        "Actress(y) ::: y is an actress."
      ],
      "premises": [
        "ProfessionalWrestler(a_2) ∧ WrestlesOnlyWomen(a_2) ∧ BeratesAfterWinning(a_2) ∧ InterGenderChampion(a_2) ::: Andy Kaufman decides to become a professional wrestler, wrestles only women, berates them after winning, and declares himself the \"Inter-Gender Wrestling Champion.\"",
        "Smitten(a_2, a_1) ∧ RomanticRelationship(a_2, a_1) ::: Andy Kaufman becomes smitten with Lynne Margulies and they begin a romantic relationship.",
        "Actress(a_1) ::: Lynne Margulies is an actress.",
        "Conclusion:",
        "ProfessionalWrestler(a_2) ∧ WrestlesOnlyWomen(a_2) ∧ BeratesAfterWinning(a_2) ∧ InterGenderChampion(a_2) ::: Andy Kaufman is a professional wrestler who wrestles only women, berates them after winning, and is the Inter-Gender Wrestling Champion."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 126,
      "context_id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 6,
      "paragraph": "Problems arise when an appearance on a live TV comedy show, ABC's Fridays, turns into a fiasco when Kaufman refuses to speak his lines. Also, the wrestling Kaufman enjoys getting a rise out of the crowds and feuds publicly with Jerry Lawler, a professional male wrestler, who challenges Kaufman to a \"real\" wrestling match, which Kaufman accepts. Lawler easily overpowers and seriously injures Kaufman, resulting in the comedian wearing a neck brace. Lawler and an injured Kaufman appear on NBC's Late Night with David Letterman, theoretically to call a truce, but Lawler insults Kaufman, who throws a drink at the wrestler and spews a vicious tirade of epithets. It is later revealed, however, that Kaufman and Lawler were in fact good friends, and staged the entire feud, but despite this, Andy pays a price when he is banned from Saturday Night Live by a vote of audience members, weary of his wrestling antics. Shapiro advises Kaufman and Lawler not to work together again, and later calls Kaufman to inform him that Taxi has been canceled.",
      "question_template": "Kaufman decides to become a professional of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Wrestling",
        "A \"real\" wrestling match",
        "Feuds publicly with Jerry Lawler"
      ],
      "predicates": [
        "StagedFeud(a_2, a_1) ::: Kaufman and Lawler staged the feud.",
        "Banned(a_2, \"Saturday Night Live\") ::: Kaufman is banned from Saturday Night Live.",
        "WrestlingAntics(a_2) ::: Kaufman engages in wrestling antics.",
        "InConflict(a_2, a_1) ::: Kaufman and Lawler appear to be in conflict.",
        "Injured(a_2) ::: Kaufman is injured.",
        "AppearsOn(a_2, b_0) ::: Kaufman appears on a live TV comedy show.",
        "RefusesToSpeakLines(a_2) ::: Kaufman refuses to speak his lines.",
        "Challenges(a_1, a_2) ::: Lawler challenges Kaufman to a wrestling match.",
        "Overpowers(a_1, a_2) ::: Lawler overpowers Kaufman.",
        "Insults(a_1, a_2) ::: Lawler insults Kaufman.",
        "ThrowsDrink(a_2, a_1) ::: Kaufman throws a drink at Lawler.",
        "SpewsTirade(a_2) ::: Kaufman spews a vicious tirade of epithets.",
        "Advises(a_3, a_2) ::: Shapiro advises Kaufman.",
        "Calls(a_3, a_2) ::: Shapiro calls Kaufman.",
        "Canceled(\"Taxi\") ::: The show Taxi has been canceled."
      ],
      "premises": [
        "StagedFeud(a_2, a_1) ::: Kaufman and Lawler staged the feud despite appearing to be in conflict.",
        "Banned(a_2, \"Saturday Night Live\") ::: Kaufman is banned from Saturday Night Live due to his wrestling antics.",
        "WrestlingAntics(a_2) ::: Kaufman engages in wrestling antics.",
        "InConflict(a_2, a_1) ::: Kaufman and Lawler appear to be in conflict.",
        "Injured(a_2) ::: Kaufman is injured after the wrestling match.",
        "AppearsOn(a_2, b_0) ::: Kaufman appears on a live TV comedy show, ABC's Fridays.",
        "RefusesToSpeakLines(a_2) ::: Kaufman refuses to speak his lines during the show.",
        "Challenges(a_1, a_2) ::: Lawler challenges Kaufman to a \"real\" wrestling match.",
        "Overpowers(a_1, a_2) ::: Lawler easily overpowers Kaufman in the match.",
        "Insults(a_1, a_2) ::: Lawler insults Kaufman during their appearance on NBC's Late Night with David Letterman.",
        "ThrowsDrink(a_2, a_1) ::: Kaufman throws a drink at Lawler after being insulted.",
        "SpewsTirade(a_2) ::: Kaufman spews a vicious tirade of epithets at Lawler.",
        "Advises(a_3, a_2) ::: Shapiro advises Kaufman and Lawler not to work together again.",
        "Calls(a_3, a_2) ::: Shapiro later calls Kaufman to inform him that Taxi has been canceled."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "127": [
    {
      "id": 127,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 0,
      "paragraph": " Stanley Jobson (Hugh Jackman) is a hacker. Having served time for infecting the FBI's Carnivore program with a computer virus, he is now on parole but forbidden from touching computers. His alcoholic ex-wife Melissa (Drea de Matteo), who married a rich porn producer and is currently a part-time porn actress has sole custody over their daughter Holly, and a restraining order preventing him from visiting the latter. One day, he is solicited by Ginger Knowles (Halle Berry), speaking for her boss Gabriel Shear (John Travolta), for his hacking skills. He goes to meet Gabriel in Los Angeles, where he is put on the spot to crack a secure government server within a minute while simultaneously held at gunpoint and receiving fellatio. Successful, Gabriel offers Stanley $10Â million to program multi-headed worm, a \"hydra\", to siphon $9.5Â billion from several government slush funds.",
      "question_template": "Stanley Jobson served time in jail for [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Infecting the FBI's Carnivore program with a computer virus"
      ],
      "predicates": [
        "Hacker(x) ::: x is a hacker.",
        "OnParole(x) ::: x is on parole.",
        "ForbiddenToTouchComputers(x) ::: x is forbidden from touching computers.",
        "Alcoholic(x) ::: x is an alcoholic.",
        "ExWife(x, y) ::: x is the ex-wife of y.",
        "HasCustody(x, y) ::: x has custody over y.",
        "RestrainingOrder(x, y) ::: x has a restraining order preventing y from visiting.",
        "SolicitedBy(x, y) ::: x is solicited by y.",
        "CrackServer(x, y) ::: x cracks a secure government server for y.",
        "Offered(x, y) ::: x is offered y by someone.",
        "Program(x, y) ::: x programs y.",
        "SiphonFunds(x, y) ::: x siphons y from several government slush funds."
      ],
      "premises": [
        "Hacker(Stanley) ∧ OnParole(Stanley) ∧ ForbiddenToTouchComputers(Stanley) ::: Stanley Jobson is a hacker, on parole, and forbidden from touching computers.",
        "Alcoholic(Melissa) ∧ ExWife(Melissa, Stanley) ∧ HasCustody(Melissa, Holly) ∧ RestrainingOrder(Melissa, Stanley) ::: Melissa is an alcoholic, the ex-wife of Stanley, has custody over their daughter Holly, and has a restraining order preventing Stanley from visiting Holly.",
        "SolicitedBy(Stanley, Gabriel) ::: Gabriel Shear solicits Stanley Jobson for hacking skills.",
        "CrackServer(Stanley, Gabriel) ::: Stanley cracks a secure government server for Gabriel while held at gunpoint.",
        "Offered(Stanley, 10Million) ::: Gabriel offers Stanley $10 million.",
        "Program(Stanley, Hydra) ::: Stanley programs a multi-headed worm, a \"hydra\".",
        "SiphonFunds(Stanley, 9.5Billion) ::: Stanley siphons $9.5 billion from several government slush funds.",
        "Conclusion:",
        "Hacker(Stanley) ∧ OnParole(Stanley) ∧ ForbiddenToTouchComputers(Stanley) ∧ SolicitedBy(Stanley, Gabriel) ∧ CrackServer(Stanley, Gabriel) ∧ Offered(Stanley, 10Million) ∧ Program(Stanley, Hydra) ∧ SiphonFunds(Stanley, 9.5Billion) ::: Stanley Jobson is a hacker who is on parole, forbidden from touching computers, solicited by Gabriel for his hacking skills, cracks a secure government server, is offered $10 million, programs a \"hydra\", and siphons $9.5 billion from government slush funds."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "128": [
    {
      "id": 128,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 1,
      "paragraph": "Stanley begins work, learning that Gabriel leads Black Cell, a secret group created by J. Edgar Hoover to launch retaliatory attacks against terrorists that threaten the United States. He also privately discovers Ginger is a DEA agent working undercover, and further is surprised to discover a corpse that looks like Gabriel. He goes to see Holly home from school but finds he is being followed by FBI agent J.T. Roberts (Don Cheadle), who had previously caught Stanley. Roberts, though monitoring Stanley closely, is more interested in Gabriel as he does not appear on any government database, and after learning that another hacker, Axl Torvalds (Rudolf Martin), had been killed by Gabriel's men, warns Stanley to be cautious. Stanley opts to secretly code a back door in his hydra that reverses the money transfer after a short period. Meanwhile, Senator Reisman (Sam Shepard), who oversees Black Cell, learns the FBI has started tracking Gabriel and orders him to stand down. Gabriel refuses, and narrowly avoids an assassination attempt ordered by Reisman. Gabriel personally kills Reisman in revenge and continues his plan.",
      "question_template": "Gabriel Shear wanted to hire Stanley Jobson for [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- To launch retaliatory attacks against terrorists that threaten the United States",
        "- To secretly code a back door in his hydra that reverses the money transfer after a short period"
      ],
      "predicates": [
        "Leads(x, y) ::: x leads group y.",
        "LaunchesAttacks(x, y) ::: x launches retaliatory attacks against y.",
        "Monitors(x, y) ::: x monitors y closely.",
        "MoreInterestedIn(x, y) ::: x is more interested in y than in others.",
        "Orders(x, y) ::: x orders y to take a specific action.",
        "Refuses(x, y) ::: x refuses to comply with y's orders.",
        "Kills(x, y) ::: x kills y.",
        "Threatens(x, y) ::: x threatens y."
      ],
      "premises": [
        "Leads(gabriel, blackCell) ∧ LaunchesAttacks(gabriel, knownTerrorists) ∧ Threatens(knownTerrorists, US) ::: Gabriel leads Black Cell to launch retaliatory attacks against terrorists that threaten the United States.",
        "Monitors(roberts, stanley) ∧ MoreInterestedIn(roberts, gabriel) ::: J.T. Roberts monitors Stanley closely while being more interested in Gabriel.",
        "Orders(reisman, standDown(gabriel)) ::: Senator Reisman oversees Black Cell and orders Gabriel to stand down.",
        "Refuses(gabriel, standDown(reisman)) ∧ Kills(gabriel, reisman) ::: Gabriel refuses Reisman's order to stand down and kills Reisman in revenge."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 128,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 2,
      "paragraph": "Stanley delivers the hydra to Gabriel and leaves to see Holly, only to find that Gabriel has killed Melissa and her husband and kidnapped Holly, framing Stanley. Stanley has no choice but to participate with the bank heist to get Holly back. Gabriel and his men storm a Worldbanc branch, and secure its employees and customers as hostages and fitting each with ball-bearing-based explosives similar to Claymore mines. When police and FBI surround the branch, Gabriel takes Stanley to the coffee shop across the street to meet with Roberts, but Gabriel spends the time to discuss the film Dog Day Afternoon and the nature of misdirection. Once back in the bank, Gabriel has one of his men escort a hostage to demonstrate the situation. A sniper kills the man, and other agents pull the hostage away from the bank, causing the bomb to detonate, ravaging the buildings and vehicles on the street and killing several people, a scene shown in medias res at the start of the film.",
      "question_template": "Gabriel Shear wanted to hire Stanley Jobson for [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- To participate with the bank heist to get Holly back"
      ],
      "predicates": [
        "Delivers(x, y) ::: x delivers y.",
        "Kills(x, y) ::: x kills y.",
        "Kidnaps(x, y) ::: x kidnaps y.",
        "Frames(x, y) ::: x frames y.",
        "ParticipatesIn(x, y) ::: x participates in y.",
        "Storms(x, y) ::: x storms y.",
        "Secures(x, y) ::: x secures y.",
        "FittingWithExplosives(x, y) ::: x is fitted with explosives y.",
        "Surrounds(x, y) ::: x surrounds y.",
        "Takes(x, y) ::: x takes y.",
        "Discusses(x, y) ::: x discusses y.",
        "Demonstrates(x, y) ::: x demonstrates y.",
        "Kills(x, y) ::: x kills y.",
        "Pulls(x, y) ::: x pulls y.",
        "Detonates(x) ::: x detonates.",
        "Causes(x, y) ::: x causes y.",
        "ResultsIn(x, y) ::: x results in y."
      ],
      "premises": [
        "Delivers(stanley, hydra) ::: Stanley delivers the hydra to Gabriel.",
        "Kills(gabriel, melissa) ∧ Kills(gabriel, husband) ::: Gabriel has killed Melissa and her husband.",
        "Kidnaps(gabriel, holly) ::: Gabriel kidnaps Holly.",
        "Frames(gabriel, stanley) ::: Gabriel frames Stanley.",
        "ParticipatesIn(stanley, bank_heist) ::: Stanley participates in the bank heist to get Holly back.",
        "Storms(gabriel, worldbanc) ::: Gabriel storms a Worldbanc branch.",
        "Secures(gabriel, employees) ∧ Secures(gabriel, customers) ::: Gabriel secures the employees and customers as hostages.",
        "FittingWithExplosives(employees, ball_bearing_explosives) ::: Employees and customers are fitted with ball-bearing-based explosives.",
        "Surrounds(police, worldbanc) ∧ Surrounds(FBI, worldbanc) ::: Police and FBI surround the branch.",
        "Takes(gabriel, stanley) ::: Gabriel takes Stanley to the coffee shop.",
        "Discusses(gabriel, dog_day_afternoon) ::: Gabriel discusses the film Dog Day Afternoon.",
        "Demonstrates(gabriel, situation) ::: Gabriel demonstrates the situation with a hostage.",
        "Kills(sniper, man) ::: A sniper kills the man.",
        "Pulls(agents, hostage) ::: Other agents pull the hostage away from the bank.",
        "Detonates(bomb) ::: The bomb detonates.",
        "ResultsIn(detonation, casualties) ∧ ResultsIn(detonation, destruction) ::: The detonation of the bomb results in casualties and destruction.",
        "Conclusion:",
        "Causes(gabriel, kidnapping(holly)) ::: Gabriel's actions lead to the kidnapping of Holly.",
        "Causes(stanley, rescue(holly)) ::: The bank heist is a means for Stanley to attempt to rescue Holly.",
        "ResultsIn(detonation, casualties) ::: The detonation of the bomb results in casualties and destruction."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 128,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 3,
      "paragraph": "Gabriel instructs Stanley to launch the hydra, and turns Holly over to him once completed. However, Stanley's back door triggers before they can leave the bank, and Stanley is recaptured while Holly is rescued. Gabriel threatens to kill Ginger, who he knows is a DEA agent, unless Stanley re-siphons the money back to a Monte Carlo bank. Despite doing so, Gabriel shoots Ginger. Gabriel and his men load the hostages on a bus and demand a plane wait for them at the local airport, but while en route, the bus is lifted off by a S-64 Aircrane and deposited on a roof of a local skyscraper. Gabriel deactivates the bombs and departs with his surviving men on a waiting helicopter, which Stanley shoots down using a rocket-propelled grenade from the bus.",
      "question_template": "Gabriel Shear wanted to hire Stanley Jobson for [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Launch the hydra",
        "- Re-siphons the money back to a Monte Carlo bank"
      ],
      "predicates": [
        "Instructs(x, y) ::: x instructs y to perform an action.",
        "TurnsOver(x, y) ::: x turns over y to someone else.",
        "Triggers(x) ::: x triggers an event.",
        "Recaptured(x) ::: x is recaptured.",
        "Rescued(x) ::: x is rescued.",
        "Threatens(x, y) ::: x threatens y with harm.",
        "IsAgent(x, y) ::: x is an agent of organization y.",
        "ReSiphons(x, y) ::: x re-siphons money back to y.",
        "Shoots(x, y) ::: x shoots y.",
        "Loads(x, y) ::: x loads y onto a vehicle.",
        "Demands(x, y) ::: x demands y.",
        "WaitsFor(x, y) ::: x waits for y to arrive.",
        "Lifts(x, y) ::: x lifts y off the ground.",
        "Deposits(x, y) ::: x deposits y in a location.",
        "Deactivates(x) ::: x deactivates a device.",
        "Departs(x) ::: x leaves a location.",
        "ShootsDown(x, y) ::: x shoots down y using a weapon."
      ],
      "premises": [
        "Instructs(gabriel, stanley) ::: Gabriel instructs Stanley to launch the hydra.",
        "TurnsOver(gabriel, holly) ::: Gabriel turns Holly over to Stanley once the hydra is launched.",
        "Triggers(stanley) ::: Stanley's back door triggers before they can leave the bank.",
        "Recaptured(stanley) ::: Stanley is recaptured while Holly is rescued.",
        "Threatens(gabriel, ginger) ::: Gabriel threatens to kill Ginger.",
        "IsAgent(ginger, DEA) ::: Ginger is a DEA agent.",
        "ReSiphons(stanley, monteCarlo) ::: Stanley re-siphons the money back to a Monte Carlo bank.",
        "Shoots(gabriel, ginger) ::: Gabriel shoots Ginger.",
        "Loads(gabriel, hostages) ::: Gabriel and his men load the hostages on a bus.",
        "Demands(gabriel, plane) ::: Gabriel demands a plane wait for them at the local airport.",
        "Lifts(bus, roof) ::: The bus is lifted off by an S-64 Aircrane.",
        "Deposits(aircrane, roof) ::: The bus is deposited on the roof of a local skyscraper.",
        "Deactivates(gabriel) ::: Gabriel deactivates the bombs.",
        "Departs(gabriel) ::: Gabriel departs with his surviving men on a waiting helicopter.",
        "ShootsDown(stanley, helicopter) ::: Stanley shoots down the helicopter using a rocket-propelled grenade from the bus.",
        "Conclusion:",
        "Threatens(gabriel, ginger) → ReSiphons(stanley, monteCarlo) ::: Gabriel will kill Ginger unless Stanley re-siphons the money back to a Monte Carlo bank."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 128,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 4,
      "paragraph": "Roberts takes Stanley to verify the corpse they found, believing Gabriel was a Mossad agent while there was no record of a DEA agent named Ginger. Stanley recognizes the corpse as the one he discovered earlier and personally realizes that the whole scenario was misdirection. Gabriel had escaped a different route, and Ginger had been wearing a bulletproof vest and was working with Gabriel. Roberts arranges for Stanley to have full custody of Holly, and the two tour the US together. In Monte Carlo Gabriel and Ginger withdraw the money, and later watch as a yacht at sea explodes. Over the film's credits, a news report describes the destruction of the yacht, carrying a known terrorist, as the third such incident in as many weeks.",
      "question_template": "Gabriel Shear wanted to hire Stanley Jobson for [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Gabriel had escaped a different route",
        "- Ginger had been wearing a bulletproof vest and was working with Gabriel",
        "- Roberts arranges for Stanley to have full custody of Holly",
        "- The two tour the US together",
        "- In Monte Carlo Gabriel and Ginger withdraw the money",
        "- A news report describes the destruction of the yacht, carrying a known terrorist"
      ],
      "predicates": [
        "MossadAgent(x) ::: x is a Mossad agent.",
        "DEAAgent(x) ::: x is a DEA agent.",
        "CorpseIdentified(x, y) ::: x recognizes the corpse as y.",
        "Escaped(x) ::: x escaped through a different route.",
        "WearingBulletproofVest(x) ::: x is wearing a bulletproof vest.",
        "WorkingWith(x, y) ::: x is working with y.",
        "FullCustody(x, y) ::: x has full custody of y.",
        "TourTogether(x, y) ::: x and y tour together.",
        "WithdrawMoney(x, y) ::: x and y withdraw money.",
        "Explodes(x) ::: x explodes.",
        "KnownTerrorist(x) ::: x is a known terrorist.",
        "Incident(x) ::: x is an incident."
      ],
      "premises": [
        "MossadAgent(gabriel) ::: Gabriel was a Mossad agent.",
        "¬∃x (DEAAgent(x)) ::: There was no record of a DEA agent named Ginger.",
        "CorpseIdentified(stanley, c) ::: Stanley recognizes the corpse as the one he discovered earlier.",
        "Escaped(gabriel) ::: Gabriel had escaped a different route.",
        "WearingBulletproofVest(ginger) ::: Ginger had been wearing a bulletproof vest.",
        "WorkingWith(ginger, gabriel) ::: Ginger was working with Gabriel.",
        "FullCustody(roberts, holly) ::: Roberts arranges for Stanley to have full custody of Holly.",
        "TourTogether(stanley, b_2) ::: Stanley and Holly tour the US together.",
        "WithdrawMoney(gabriel, ginger) ::: Gabriel and Ginger withdraw the money in Monte Carlo.",
        "Explodes(d) ::: A yacht at sea explodes.",
        "Incident(d) ::: The explosion of the yacht is an incident.",
        "KnownTerrorist(h) ::: The yacht was carrying a known terrorist.",
        "Conclusion:",
        "Gabriel and Ginger were involved in a scheme that led to the destruction of the yacht."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "WithdrawMoney(gabriel, ginger)",
        "None"
      ]
    }
  ],
  "129": [
    {
      "id": 129,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 0,
      "paragraph": " Stanley Jobson (Hugh Jackman) is a hacker. Having served time for infecting the FBI's Carnivore program with a computer virus, he is now on parole but forbidden from touching computers. His alcoholic ex-wife Melissa (Drea de Matteo), who married a rich porn producer and is currently a part-time porn actress has sole custody over their daughter Holly, and a restraining order preventing him from visiting the latter. One day, he is solicited by Ginger Knowles (Halle Berry), speaking for her boss Gabriel Shear (John Travolta), for his hacking skills. He goes to meet Gabriel in Los Angeles, where he is put on the spot to crack a secure government server within a minute while simultaneously held at gunpoint and receiving fellatio. Successful, Gabriel offers Stanley $10Â million to program multi-headed worm, a \"hydra\", to siphon $9.5Â billion from several government slush funds.",
      "question_template": "[[CANDIDATE_ANSWER]] is who Holly is.",
      "candidate_answers": [
        "Holly",
        "Stanley Jobson's daughter",
        "His alcoholic ex-wife Melissa has sole custody over their daughter Holly"
      ],
      "predicates": [
        "Hacker(x) ::: x is a hacker.",
        "OnParole(x) ::: x is on parole.",
        "ForbiddenToTouchComputers(x) ::: x is forbidden from touching computers.",
        "Alcoholic(x) ::: x is an alcoholic.",
        "ExWife(x, y) ::: x is the ex-wife of y.",
        "HasCustody(x, y) ::: x has custody over y.",
        "RestrainingOrder(x, y) ::: x has a restraining order preventing y from visiting.",
        "SolicitedBy(x, y) ::: x is solicited by y.",
        "CrackServer(x, y) ::: x cracks a secure government server for y.",
        "Offered(x, y) ::: x is offered y by someone.",
        "Program(x, y) ::: x programs y.",
        "SiphonFunds(x, y) ::: x siphons y from several government slush funds."
      ],
      "premises": [
        "Hacker(Stanley) ∧ OnParole(Stanley) ∧ ForbiddenToTouchComputers(Stanley) ::: Stanley Jobson is a hacker, on parole, and forbidden from touching computers.",
        "Alcoholic(Melissa) ∧ ExWife(Melissa, Stanley) ∧ HasCustody(Melissa, Holly) ∧ RestrainingOrder(Melissa, Stanley) ::: Melissa is an alcoholic, the ex-wife of Stanley, has custody over their daughter Holly, and has a restraining order preventing Stanley from visiting Holly.",
        "SolicitedBy(Stanley, Gabriel) ::: Gabriel Shear solicits Stanley Jobson for hacking skills.",
        "CrackServer(Stanley, Gabriel) ::: Stanley cracks a secure government server for Gabriel while held at gunpoint.",
        "Offered(Stanley, 10Million) ::: Gabriel offers Stanley $10 million.",
        "Program(Stanley, Hydra) ::: Stanley programs a multi-headed worm, a \"hydra\".",
        "SiphonFunds(Stanley, 9.5Billion) ::: Stanley siphons $9.5 billion from several government slush funds.",
        "Conclusion:",
        "Hacker(Stanley) ∧ OnParole(Stanley) ∧ ForbiddenToTouchComputers(Stanley) ∧ SolicitedBy(Stanley, Gabriel) ∧ CrackServer(Stanley, Gabriel) ∧ Offered(Stanley, 10Million) ∧ Program(Stanley, Hydra) ∧ SiphonFunds(Stanley, 9.5Billion) ::: Stanley Jobson is a hacker who is on parole, forbidden from touching computers, solicited by Gabriel for his hacking skills, cracks a secure government server, is offered $10 million, programs a \"hydra\", and siphons $9.5 billion from government slush funds."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 129,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 1,
      "paragraph": "Stanley begins work, learning that Gabriel leads Black Cell, a secret group created by J. Edgar Hoover to launch retaliatory attacks against terrorists that threaten the United States. He also privately discovers Ginger is a DEA agent working undercover, and further is surprised to discover a corpse that looks like Gabriel. He goes to see Holly home from school but finds he is being followed by FBI agent J.T. Roberts (Don Cheadle), who had previously caught Stanley. Roberts, though monitoring Stanley closely, is more interested in Gabriel as he does not appear on any government database, and after learning that another hacker, Axl Torvalds (Rudolf Martin), had been killed by Gabriel's men, warns Stanley to be cautious. Stanley opts to secretly code a back door in his hydra that reverses the money transfer after a short period. Meanwhile, Senator Reisman (Sam Shepard), who oversees Black Cell, learns the FBI has started tracking Gabriel and orders him to stand down. Gabriel refuses, and narrowly avoids an assassination attempt ordered by Reisman. Gabriel personally kills Reisman in revenge and continues his plan.",
      "question_template": "[[CANDIDATE_ANSWER]] is who Holly is.",
      "candidate_answers": [
        "Holly home from school"
      ],
      "predicates": [
        "Leads(x, y) ::: x leads group y.",
        "LaunchesAttacks(x, y) ::: x launches retaliatory attacks against y.",
        "Monitors(x, y) ::: x monitors y closely.",
        "MoreInterestedIn(x, y) ::: x is more interested in y than in others.",
        "Orders(x, y) ::: x orders y to take a specific action.",
        "Refuses(x, y) ::: x refuses to comply with y's orders.",
        "Kills(x, y) ::: x kills y.",
        "Threatens(x, y) ::: x threatens y."
      ],
      "premises": [
        "Leads(gabriel, blackCell) ∧ LaunchesAttacks(gabriel, knownTerrorists) ∧ Threatens(knownTerrorists, US) ::: Gabriel leads Black Cell to launch retaliatory attacks against terrorists that threaten the United States.",
        "Monitors(roberts, stanley) ∧ MoreInterestedIn(roberts, gabriel) ::: J.T. Roberts monitors Stanley closely while being more interested in Gabriel.",
        "Orders(reisman, standDown(gabriel)) ::: Senator Reisman oversees Black Cell and orders Gabriel to stand down.",
        "Refuses(gabriel, standDown(reisman)) ∧ Kills(gabriel, reisman) ::: Gabriel refuses Reisman's order to stand down and kills Reisman in revenge."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 129,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 2,
      "paragraph": "Stanley delivers the hydra to Gabriel and leaves to see Holly, only to find that Gabriel has killed Melissa and her husband and kidnapped Holly, framing Stanley. Stanley has no choice but to participate with the bank heist to get Holly back. Gabriel and his men storm a Worldbanc branch, and secure its employees and customers as hostages and fitting each with ball-bearing-based explosives similar to Claymore mines. When police and FBI surround the branch, Gabriel takes Stanley to the coffee shop across the street to meet with Roberts, but Gabriel spends the time to discuss the film Dog Day Afternoon and the nature of misdirection. Once back in the bank, Gabriel has one of his men escort a hostage to demonstrate the situation. A sniper kills the man, and other agents pull the hostage away from the bank, causing the bomb to detonate, ravaging the buildings and vehicles on the street and killing several people, a scene shown in medias res at the start of the film.",
      "question_template": "[[CANDIDATE_ANSWER]] is who Holly is.",
      "candidate_answers": [
        "Holly",
        "Gabriel has killed Melissa and her husband and kidnapped Holly",
        "Stanley has no choice but to participate with the bank heist to get Holly back"
      ],
      "predicates": [
        "Delivers(x, y) ::: x delivers y.",
        "Kills(x, y) ::: x kills y.",
        "Kidnaps(x, y) ::: x kidnaps y.",
        "Frames(x, y) ::: x frames y.",
        "ParticipatesIn(x, y) ::: x participates in y.",
        "Storms(x, y) ::: x storms y.",
        "Secures(x, y) ::: x secures y.",
        "FittingWithExplosives(x, y) ::: x is fitted with explosives y.",
        "Surrounds(x, y) ::: x surrounds y.",
        "Takes(x, y) ::: x takes y.",
        "Discusses(x, y) ::: x discusses y.",
        "Demonstrates(x, y) ::: x demonstrates y.",
        "Kills(x, y) ::: x kills y.",
        "Pulls(x, y) ::: x pulls y.",
        "Detonates(x) ::: x detonates.",
        "Causes(x, y) ::: x causes y.",
        "ResultsIn(x, y) ::: x results in y."
      ],
      "premises": [
        "Delivers(stanley, hydra) ::: Stanley delivers the hydra to Gabriel.",
        "Kills(gabriel, melissa) ∧ Kills(gabriel, husband) ::: Gabriel has killed Melissa and her husband.",
        "Kidnaps(gabriel, holly) ::: Gabriel kidnaps Holly.",
        "Frames(gabriel, stanley) ::: Gabriel frames Stanley.",
        "ParticipatesIn(stanley, bank_heist) ::: Stanley participates in the bank heist to get Holly back.",
        "Storms(gabriel, worldbanc) ::: Gabriel storms a Worldbanc branch.",
        "Secures(gabriel, employees) ∧ Secures(gabriel, customers) ::: Gabriel secures the employees and customers as hostages.",
        "FittingWithExplosives(employees, ball_bearing_explosives) ::: Employees and customers are fitted with ball-bearing-based explosives.",
        "Surrounds(police, worldbanc) ∧ Surrounds(FBI, worldbanc) ::: Police and FBI surround the branch.",
        "Takes(gabriel, stanley) ::: Gabriel takes Stanley to the coffee shop.",
        "Discusses(gabriel, dog_day_afternoon) ::: Gabriel discusses the film Dog Day Afternoon.",
        "Demonstrates(gabriel, situation) ::: Gabriel demonstrates the situation with a hostage.",
        "Kills(sniper, man) ::: A sniper kills the man.",
        "Pulls(agents, hostage) ::: Other agents pull the hostage away from the bank.",
        "Detonates(bomb) ::: The bomb detonates.",
        "ResultsIn(detonation, casualties) ∧ ResultsIn(detonation, destruction) ::: The detonation of the bomb results in casualties and destruction.",
        "Conclusion:",
        "Causes(gabriel, kidnapping(holly)) ::: Gabriel's actions lead to the kidnapping of Holly.",
        "Causes(stanley, rescue(holly)) ::: The bank heist is a means for Stanley to attempt to rescue Holly.",
        "ResultsIn(detonation, casualties) ::: The detonation of the bomb results in casualties and destruction."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 129,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 3,
      "paragraph": "Gabriel instructs Stanley to launch the hydra, and turns Holly over to him once completed. However, Stanley's back door triggers before they can leave the bank, and Stanley is recaptured while Holly is rescued. Gabriel threatens to kill Ginger, who he knows is a DEA agent, unless Stanley re-siphons the money back to a Monte Carlo bank. Despite doing so, Gabriel shoots Ginger. Gabriel and his men load the hostages on a bus and demand a plane wait for them at the local airport, but while en route, the bus is lifted off by a S-64 Aircrane and deposited on a roof of a local skyscraper. Gabriel deactivates the bombs and departs with his surviving men on a waiting helicopter, which Stanley shoots down using a rocket-propelled grenade from the bus.",
      "question_template": "[[CANDIDATE_ANSWER]] is who Holly is.",
      "candidate_answers": [
        "Holly is turned over to Stanley",
        "Ginger, who he knows is a DEA agent"
      ],
      "predicates": [
        "Instructs(x, y) ::: x instructs y to perform an action.",
        "TurnsOver(x, y) ::: x turns over y to someone else.",
        "Triggers(x) ::: x triggers an event.",
        "Recaptured(x) ::: x is recaptured.",
        "Rescued(x) ::: x is rescued.",
        "Threatens(x, y) ::: x threatens y with harm.",
        "IsAgent(x, y) ::: x is an agent of organization y.",
        "ReSiphons(x, y) ::: x re-siphons money back to y.",
        "Shoots(x, y) ::: x shoots y.",
        "Loads(x, y) ::: x loads y onto a vehicle.",
        "Demands(x, y) ::: x demands y.",
        "WaitsFor(x, y) ::: x waits for y to arrive.",
        "Lifts(x, y) ::: x lifts y off the ground.",
        "Deposits(x, y) ::: x deposits y in a location.",
        "Deactivates(x) ::: x deactivates a device.",
        "Departs(x) ::: x leaves a location.",
        "ShootsDown(x, y) ::: x shoots down y using a weapon."
      ],
      "premises": [
        "Instructs(gabriel, stanley) ::: Gabriel instructs Stanley to launch the hydra.",
        "TurnsOver(gabriel, holly) ::: Gabriel turns Holly over to Stanley once the hydra is launched.",
        "Triggers(stanley) ::: Stanley's back door triggers before they can leave the bank.",
        "Recaptured(stanley) ::: Stanley is recaptured while Holly is rescued.",
        "Threatens(gabriel, ginger) ::: Gabriel threatens to kill Ginger.",
        "IsAgent(ginger, DEA) ::: Ginger is a DEA agent.",
        "ReSiphons(stanley, monteCarlo) ::: Stanley re-siphons the money back to a Monte Carlo bank.",
        "Shoots(gabriel, ginger) ::: Gabriel shoots Ginger.",
        "Loads(gabriel, hostages) ::: Gabriel and his men load the hostages on a bus.",
        "Demands(gabriel, plane) ::: Gabriel demands a plane wait for them at the local airport.",
        "Lifts(bus, roof) ::: The bus is lifted off by an S-64 Aircrane.",
        "Deposits(aircrane, roof) ::: The bus is deposited on the roof of a local skyscraper.",
        "Deactivates(gabriel) ::: Gabriel deactivates the bombs.",
        "Departs(gabriel) ::: Gabriel departs with his surviving men on a waiting helicopter.",
        "ShootsDown(stanley, helicopter) ::: Stanley shoots down the helicopter using a rocket-propelled grenade from the bus.",
        "Conclusion:",
        "Threatens(gabriel, ginger) → ReSiphons(stanley, monteCarlo) ::: Gabriel will kill Ginger unless Stanley re-siphons the money back to a Monte Carlo bank."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 129,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 4,
      "paragraph": "Roberts takes Stanley to verify the corpse they found, believing Gabriel was a Mossad agent while there was no record of a DEA agent named Ginger. Stanley recognizes the corpse as the one he discovered earlier and personally realizes that the whole scenario was misdirection. Gabriel had escaped a different route, and Ginger had been wearing a bulletproof vest and was working with Gabriel. Roberts arranges for Stanley to have full custody of Holly, and the two tour the US together. In Monte Carlo Gabriel and Ginger withdraw the money, and later watch as a yacht at sea explodes. Over the film's credits, a news report describes the destruction of the yacht, carrying a known terrorist, as the third such incident in as many weeks.",
      "question_template": "[[CANDIDATE_ANSWER]] is who Holly is.",
      "candidate_answers": [
        "Stanley",
        "Roberts arranges for Stanley to have full custody of Holly"
      ],
      "predicates": [
        "MossadAgent(x) ::: x is a Mossad agent.",
        "DEAAgent(x) ::: x is a DEA agent.",
        "CorpseIdentified(x, y) ::: x recognizes the corpse as y.",
        "Escaped(x) ::: x escaped through a different route.",
        "WearingBulletproofVest(x) ::: x is wearing a bulletproof vest.",
        "WorkingWith(x, y) ::: x is working with y.",
        "FullCustody(x, y) ::: x has full custody of y.",
        "TourTogether(x, y) ::: x and y tour together.",
        "WithdrawMoney(x, y) ::: x and y withdraw money.",
        "Explodes(x) ::: x explodes.",
        "KnownTerrorist(x) ::: x is a known terrorist.",
        "Incident(x) ::: x is an incident."
      ],
      "premises": [
        "MossadAgent(gabriel) ::: Gabriel was a Mossad agent.",
        "¬∃x (DEAAgent(x)) ::: There was no record of a DEA agent named Ginger.",
        "CorpseIdentified(stanley, c) ::: Stanley recognizes the corpse as the one he discovered earlier.",
        "Escaped(gabriel) ::: Gabriel had escaped a different route.",
        "WearingBulletproofVest(ginger) ::: Ginger had been wearing a bulletproof vest.",
        "WorkingWith(ginger, gabriel) ::: Ginger was working with Gabriel.",
        "FullCustody(roberts, holly) ::: Roberts arranges for Stanley to have full custody of Holly.",
        "TourTogether(stanley, b_2) ::: Stanley and Holly tour the US together.",
        "WithdrawMoney(gabriel, ginger) ::: Gabriel and Ginger withdraw the money in Monte Carlo.",
        "Explodes(d) ::: A yacht at sea explodes.",
        "Incident(d) ::: The explosion of the yacht is an incident.",
        "KnownTerrorist(h) ::: The yacht was carrying a known terrorist.",
        "Conclusion:",
        "Gabriel and Ginger were involved in a scheme that led to the destruction of the yacht."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "131": [
    {
      "id": 131,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 0,
      "paragraph": " Stanley Jobson (Hugh Jackman) is a hacker. Having served time for infecting the FBI's Carnivore program with a computer virus, he is now on parole but forbidden from touching computers. His alcoholic ex-wife Melissa (Drea de Matteo), who married a rich porn producer and is currently a part-time porn actress has sole custody over their daughter Holly, and a restraining order preventing him from visiting the latter. One day, he is solicited by Ginger Knowles (Halle Berry), speaking for her boss Gabriel Shear (John Travolta), for his hacking skills. He goes to meet Gabriel in Los Angeles, where he is put on the spot to crack a secure government server within a minute while simultaneously held at gunpoint and receiving fellatio. Successful, Gabriel offers Stanley $10Â million to program multi-headed worm, a \"hydra\", to siphon $9.5Â billion from several government slush funds.",
      "question_template": "Gabriel Shear framed Stanley Jobson to force him to participate in the bank heist by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- He is put on the spot to crack a secure government server within a minute while simultaneously held at gunpoint and receiving fellatio."
      ],
      "predicates": [
        "Hacker(x) ::: x is a hacker.",
        "OnParole(x) ::: x is on parole.",
        "ForbiddenToTouchComputers(x) ::: x is forbidden from touching computers.",
        "Alcoholic(x) ::: x is an alcoholic.",
        "ExWife(x, y) ::: x is the ex-wife of y.",
        "HasCustody(x, y) ::: x has custody over y.",
        "RestrainingOrder(x, y) ::: x has a restraining order preventing y from visiting.",
        "SolicitedBy(x, y) ::: x is solicited by y.",
        "CrackServer(x, y) ::: x cracks a secure government server for y.",
        "Offered(x, y) ::: x is offered y by someone.",
        "Program(x, y) ::: x programs y.",
        "SiphonFunds(x, y) ::: x siphons y from several government slush funds."
      ],
      "premises": [
        "Hacker(Stanley) ∧ OnParole(Stanley) ∧ ForbiddenToTouchComputers(Stanley) ::: Stanley Jobson is a hacker, on parole, and forbidden from touching computers.",
        "Alcoholic(Melissa) ∧ ExWife(Melissa, Stanley) ∧ HasCustody(Melissa, Holly) ∧ RestrainingOrder(Melissa, Stanley) ::: Melissa is an alcoholic, the ex-wife of Stanley, has custody over their daughter Holly, and has a restraining order preventing Stanley from visiting Holly.",
        "SolicitedBy(Stanley, Gabriel) ::: Gabriel Shear solicits Stanley Jobson for hacking skills.",
        "CrackServer(Stanley, Gabriel) ::: Stanley cracks a secure government server for Gabriel while held at gunpoint.",
        "Offered(Stanley, 10Million) ::: Gabriel offers Stanley $10 million.",
        "Program(Stanley, Hydra) ::: Stanley programs a multi-headed worm, a \"hydra\".",
        "SiphonFunds(Stanley, 9.5Billion) ::: Stanley siphons $9.5 billion from several government slush funds.",
        "Conclusion:",
        "Hacker(Stanley) ∧ OnParole(Stanley) ∧ ForbiddenToTouchComputers(Stanley) ∧ SolicitedBy(Stanley, Gabriel) ∧ CrackServer(Stanley, Gabriel) ∧ Offered(Stanley, 10Million) ∧ Program(Stanley, Hydra) ∧ SiphonFunds(Stanley, 9.5Billion) ::: Stanley Jobson is a hacker who is on parole, forbidden from touching computers, solicited by Gabriel for his hacking skills, cracks a secure government server, is offered $10 million, programs a \"hydra\", and siphons $9.5 billion from government slush funds."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 131,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 1,
      "paragraph": "Stanley begins work, learning that Gabriel leads Black Cell, a secret group created by J. Edgar Hoover to launch retaliatory attacks against terrorists that threaten the United States. He also privately discovers Ginger is a DEA agent working undercover, and further is surprised to discover a corpse that looks like Gabriel. He goes to see Holly home from school but finds he is being followed by FBI agent J.T. Roberts (Don Cheadle), who had previously caught Stanley. Roberts, though monitoring Stanley closely, is more interested in Gabriel as he does not appear on any government database, and after learning that another hacker, Axl Torvalds (Rudolf Martin), had been killed by Gabriel's men, warns Stanley to be cautious. Stanley opts to secretly code a back door in his hydra that reverses the money transfer after a short period. Meanwhile, Senator Reisman (Sam Shepard), who oversees Black Cell, learns the FBI has started tracking Gabriel and orders him to stand down. Gabriel refuses, and narrowly avoids an assassination attempt ordered by Reisman. Gabriel personally kills Reisman in revenge and continues his plan.",
      "question_template": "Gabriel Shear framed Stanley Jobson to force him to participate in the bank heist by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Gabriel leads Black Cell, a secret group created by J. Edgar Hoover to launch retaliatory attacks against terrorists that threaten the United States.",
        "- Stanley opts to secretly code a back door in his hydra that reverses the money transfer after a short period.",
        "- Gabriel personally kills Reisman in revenge and continues his plan."
      ],
      "predicates": [
        "Leads(x, y) ::: x leads group y.",
        "LaunchesAttacks(x, y) ::: x launches retaliatory attacks against y.",
        "Monitors(x, y) ::: x monitors y closely.",
        "MoreInterestedIn(x, y) ::: x is more interested in y than in others.",
        "Orders(x, y) ::: x orders y to take a specific action.",
        "Refuses(x, y) ::: x refuses to comply with y's orders.",
        "Kills(x, y) ::: x kills y.",
        "Threatens(x, y) ::: x threatens y."
      ],
      "premises": [
        "Leads(gabriel, blackCell) ∧ LaunchesAttacks(gabriel, knownTerrorists) ∧ Threatens(knownTerrorists, US) ::: Gabriel leads Black Cell to launch retaliatory attacks against terrorists that threaten the United States.",
        "Monitors(roberts, stanley) ∧ MoreInterestedIn(roberts, gabriel) ::: J.T. Roberts monitors Stanley closely while being more interested in Gabriel.",
        "Orders(reisman, standDown(gabriel)) ::: Senator Reisman oversees Black Cell and orders Gabriel to stand down.",
        "Refuses(gabriel, standDown(reisman)) ∧ Kills(gabriel, reisman) ::: Gabriel refuses Reisman's order to stand down and kills Reisman in revenge."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 131,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 3,
      "paragraph": "Gabriel instructs Stanley to launch the hydra, and turns Holly over to him once completed. However, Stanley's back door triggers before they can leave the bank, and Stanley is recaptured while Holly is rescued. Gabriel threatens to kill Ginger, who he knows is a DEA agent, unless Stanley re-siphons the money back to a Monte Carlo bank. Despite doing so, Gabriel shoots Ginger. Gabriel and his men load the hostages on a bus and demand a plane wait for them at the local airport, but while en route, the bus is lifted off by a S-64 Aircrane and deposited on a roof of a local skyscraper. Gabriel deactivates the bombs and departs with his surviving men on a waiting helicopter, which Stanley shoots down using a rocket-propelled grenade from the bus.",
      "question_template": "Gabriel Shear framed Stanley Jobson to force him to participate in the bank heist by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Gabriel threatens to kill Ginger, who he knows is a DEA agent, unless Stanley re-siphons the money back to a Monte Carlo bank.",
        "- Gabriel instructs Stanley to launch the hydra, and turns Holly over to him once completed."
      ],
      "predicates": [
        "Instructs(x, y) ::: x instructs y to perform an action.",
        "TurnsOver(x, y) ::: x turns over y to someone else.",
        "Triggers(x) ::: x triggers an event.",
        "Recaptured(x) ::: x is recaptured.",
        "Rescued(x) ::: x is rescued.",
        "Threatens(x, y) ::: x threatens y with harm.",
        "IsAgent(x, y) ::: x is an agent of organization y.",
        "ReSiphons(x, y) ::: x re-siphons money back to y.",
        "Shoots(x, y) ::: x shoots y.",
        "Loads(x, y) ::: x loads y onto a vehicle.",
        "Demands(x, y) ::: x demands y.",
        "WaitsFor(x, y) ::: x waits for y to arrive.",
        "Lifts(x, y) ::: x lifts y off the ground.",
        "Deposits(x, y) ::: x deposits y in a location.",
        "Deactivates(x) ::: x deactivates a device.",
        "Departs(x) ::: x leaves a location.",
        "ShootsDown(x, y) ::: x shoots down y using a weapon."
      ],
      "premises": [
        "Instructs(gabriel, stanley) ::: Gabriel instructs Stanley to launch the hydra.",
        "TurnsOver(gabriel, holly) ::: Gabriel turns Holly over to Stanley once the hydra is launched.",
        "Triggers(stanley) ::: Stanley's back door triggers before they can leave the bank.",
        "Recaptured(stanley) ::: Stanley is recaptured while Holly is rescued.",
        "Threatens(gabriel, ginger) ::: Gabriel threatens to kill Ginger.",
        "IsAgent(ginger, DEA) ::: Ginger is a DEA agent.",
        "ReSiphons(stanley, monteCarlo) ::: Stanley re-siphons the money back to a Monte Carlo bank.",
        "Shoots(gabriel, ginger) ::: Gabriel shoots Ginger.",
        "Loads(gabriel, hostages) ::: Gabriel and his men load the hostages on a bus.",
        "Demands(gabriel, plane) ::: Gabriel demands a plane wait for them at the local airport.",
        "Lifts(bus, roof) ::: The bus is lifted off by an S-64 Aircrane.",
        "Deposits(aircrane, roof) ::: The bus is deposited on the roof of a local skyscraper.",
        "Deactivates(gabriel) ::: Gabriel deactivates the bombs.",
        "Departs(gabriel) ::: Gabriel departs with his surviving men on a waiting helicopter.",
        "ShootsDown(stanley, helicopter) ::: Stanley shoots down the helicopter using a rocket-propelled grenade from the bus.",
        "Conclusion:",
        "Threatens(gabriel, ginger) → ReSiphons(stanley, monteCarlo) ::: Gabriel will kill Ginger unless Stanley re-siphons the money back to a Monte Carlo bank."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 131,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 4,
      "paragraph": "Roberts takes Stanley to verify the corpse they found, believing Gabriel was a Mossad agent while there was no record of a DEA agent named Ginger. Stanley recognizes the corpse as the one he discovered earlier and personally realizes that the whole scenario was misdirection. Gabriel had escaped a different route, and Ginger had been wearing a bulletproof vest and was working with Gabriel. Roberts arranges for Stanley to have full custody of Holly, and the two tour the US together. In Monte Carlo Gabriel and Ginger withdraw the money, and later watch as a yacht at sea explodes. Over the film's credits, a news report describes the destruction of the yacht, carrying a known terrorist, as the third such incident in as many weeks.",
      "question_template": "Gabriel Shear framed Stanley Jobson to force him to participate in the bank heist by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Believing Gabriel was a Mossad agent while there was no record of a DEA agent named Ginger.",
        "- The whole scenario was misdirection.",
        "- Gabriel had escaped a different route, and Ginger had been wearing a bulletproof vest and was working with Gabriel."
      ],
      "predicates": [
        "MossadAgent(x) ::: x is a Mossad agent.",
        "DEAAgent(x) ::: x is a DEA agent.",
        "CorpseIdentified(x, y) ::: x recognizes the corpse as y.",
        "Escaped(x) ::: x escaped through a different route.",
        "WearingBulletproofVest(x) ::: x is wearing a bulletproof vest.",
        "WorkingWith(x, y) ::: x is working with y.",
        "FullCustody(x, y) ::: x has full custody of y.",
        "TourTogether(x, y) ::: x and y tour together.",
        "WithdrawMoney(x, y) ::: x and y withdraw money.",
        "Explodes(x) ::: x explodes.",
        "KnownTerrorist(x) ::: x is a known terrorist.",
        "Incident(x) ::: x is an incident."
      ],
      "premises": [
        "MossadAgent(gabriel) ::: Gabriel was a Mossad agent.",
        "¬∃x (DEAAgent(x)) ::: There was no record of a DEA agent named Ginger.",
        "CorpseIdentified(stanley, c) ::: Stanley recognizes the corpse as the one he discovered earlier.",
        "Escaped(gabriel) ::: Gabriel had escaped a different route.",
        "WearingBulletproofVest(ginger) ::: Ginger had been wearing a bulletproof vest.",
        "WorkingWith(ginger, gabriel) ::: Ginger was working with Gabriel.",
        "FullCustody(roberts, holly) ::: Roberts arranges for Stanley to have full custody of Holly.",
        "TourTogether(stanley, b_2) ::: Stanley and Holly tour the US together.",
        "WithdrawMoney(gabriel, ginger) ::: Gabriel and Ginger withdraw the money in Monte Carlo.",
        "Explodes(d) ::: A yacht at sea explodes.",
        "Incident(d) ::: The explosion of the yacht is an incident.",
        "KnownTerrorist(h) ::: The yacht was carrying a known terrorist.",
        "Conclusion:",
        "Gabriel and Ginger were involved in a scheme that led to the destruction of the yacht."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "132": [
    {
      "id": 132,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 2,
      "paragraph": "Stanley delivers the hydra to Gabriel and leaves to see Holly, only to find that Gabriel has killed Melissa and her husband and kidnapped Holly, framing Stanley. Stanley has no choice but to participate with the bank heist to get Holly back. Gabriel and his men storm a Worldbanc branch, and secure its employees and customers as hostages and fitting each with ball-bearing-based explosives similar to Claymore mines. When police and FBI surround the branch, Gabriel takes Stanley to the coffee shop across the street to meet with Roberts, but Gabriel spends the time to discuss the film Dog Day Afternoon and the nature of misdirection. Once back in the bank, Gabriel has one of his men escort a hostage to demonstrate the situation. A sniper kills the man, and other agents pull the hostage away from the bank, causing the bomb to detonate, ravaging the buildings and vehicles on the street and killing several people, a scene shown in medias res at the start of the film.",
      "question_template": "Melissa actually has [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Melissa has been killed.",
        "Stanley delivers the hydra to Gabriel.",
        "Gabriel has killed Melissa and her husband."
      ],
      "predicates": [
        "Delivers(x, y) ::: x delivers y.",
        "Kills(x, y) ::: x kills y.",
        "Kidnaps(x, y) ::: x kidnaps y.",
        "Frames(x, y) ::: x frames y.",
        "ParticipatesIn(x, y) ::: x participates in y.",
        "Storms(x, y) ::: x storms y.",
        "Secures(x, y) ::: x secures y.",
        "FittingWithExplosives(x, y) ::: x is fitted with explosives y.",
        "Surrounds(x, y) ::: x surrounds y.",
        "Takes(x, y) ::: x takes y.",
        "Discusses(x, y) ::: x discusses y.",
        "Demonstrates(x, y) ::: x demonstrates y.",
        "Kills(x, y) ::: x kills y.",
        "Pulls(x, y) ::: x pulls y.",
        "Detonates(x) ::: x detonates.",
        "Causes(x, y) ::: x causes y.",
        "ResultsIn(x, y) ::: x results in y."
      ],
      "premises": [
        "Delivers(stanley, hydra) ::: Stanley delivers the hydra to Gabriel.",
        "Kills(gabriel, melissa) ∧ Kills(gabriel, husband) ::: Gabriel has killed Melissa and her husband.",
        "Kidnaps(gabriel, holly) ::: Gabriel kidnaps Holly.",
        "Frames(gabriel, stanley) ::: Gabriel frames Stanley.",
        "ParticipatesIn(stanley, bank_heist) ::: Stanley participates in the bank heist to get Holly back.",
        "Storms(gabriel, worldbanc) ::: Gabriel storms a Worldbanc branch.",
        "Secures(gabriel, employees) ∧ Secures(gabriel, customers) ::: Gabriel secures the employees and customers as hostages.",
        "FittingWithExplosives(employees, ball_bearing_explosives) ::: Employees and customers are fitted with ball-bearing-based explosives.",
        "Surrounds(police, worldbanc) ∧ Surrounds(FBI, worldbanc) ::: Police and FBI surround the branch.",
        "Takes(gabriel, stanley) ::: Gabriel takes Stanley to the coffee shop.",
        "Discusses(gabriel, dog_day_afternoon) ::: Gabriel discusses the film Dog Day Afternoon.",
        "Demonstrates(gabriel, situation) ::: Gabriel demonstrates the situation with a hostage.",
        "Kills(sniper, man) ::: A sniper kills the man.",
        "Pulls(agents, hostage) ::: Other agents pull the hostage away from the bank.",
        "Detonates(bomb) ::: The bomb detonates.",
        "ResultsIn(detonation, casualties) ∧ ResultsIn(detonation, destruction) ::: The detonation of the bomb results in casualties and destruction.",
        "Conclusion:",
        "Causes(gabriel, kidnapping(holly)) ::: Gabriel's actions lead to the kidnapping of Holly.",
        "Causes(stanley, rescue(holly)) ::: The bank heist is a means for Stanley to attempt to rescue Holly.",
        "ResultsIn(detonation, casualties) ::: The detonation of the bomb results in casualties and destruction."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "133": [
    {
      "id": 133,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 0,
      "paragraph": " Stanley Jobson (Hugh Jackman) is a hacker. Having served time for infecting the FBI's Carnivore program with a computer virus, he is now on parole but forbidden from touching computers. His alcoholic ex-wife Melissa (Drea de Matteo), who married a rich porn producer and is currently a part-time porn actress has sole custody over their daughter Holly, and a restraining order preventing him from visiting the latter. One day, he is solicited by Ginger Knowles (Halle Berry), speaking for her boss Gabriel Shear (John Travolta), for his hacking skills. He goes to meet Gabriel in Los Angeles, where he is put on the spot to crack a secure government server within a minute while simultaneously held at gunpoint and receiving fellatio. Successful, Gabriel offers Stanley $10Â million to program multi-headed worm, a \"hydra\", to siphon $9.5Â billion from several government slush funds.",
      "question_template": "Stanley Jobson was going to use [[CANDIDATE_ANSWER]] to steal the money for Gabriel Shear.",
      "candidate_answers": [
        "- A multi-headed worm, a \"hydra\"",
        "- To siphon $9.5 billion from several government slush funds"
      ],
      "predicates": [
        "Hacker(x) ::: x is a hacker.",
        "OnParole(x) ::: x is on parole.",
        "ForbiddenToTouchComputers(x) ::: x is forbidden from touching computers.",
        "Alcoholic(x) ::: x is an alcoholic.",
        "ExWife(x, y) ::: x is the ex-wife of y.",
        "HasCustody(x, y) ::: x has custody over y.",
        "RestrainingOrder(x, y) ::: x has a restraining order preventing y from visiting.",
        "SolicitedBy(x, y) ::: x is solicited by y.",
        "CrackServer(x, y) ::: x cracks a secure government server for y.",
        "Offered(x, y) ::: x is offered y by someone.",
        "Program(x, y) ::: x programs y.",
        "SiphonFunds(x, y) ::: x siphons y from several government slush funds."
      ],
      "premises": [
        "Hacker(Stanley) ∧ OnParole(Stanley) ∧ ForbiddenToTouchComputers(Stanley) ::: Stanley Jobson is a hacker, on parole, and forbidden from touching computers.",
        "Alcoholic(Melissa) ∧ ExWife(Melissa, Stanley) ∧ HasCustody(Melissa, Holly) ∧ RestrainingOrder(Melissa, Stanley) ::: Melissa is an alcoholic, the ex-wife of Stanley, has custody over their daughter Holly, and has a restraining order preventing Stanley from visiting Holly.",
        "SolicitedBy(Stanley, Gabriel) ::: Gabriel Shear solicits Stanley Jobson for hacking skills.",
        "CrackServer(Stanley, Gabriel) ::: Stanley cracks a secure government server for Gabriel while held at gunpoint.",
        "Offered(Stanley, 10Million) ::: Gabriel offers Stanley $10 million.",
        "Program(Stanley, Hydra) ::: Stanley programs a multi-headed worm, a \"hydra\".",
        "SiphonFunds(Stanley, 9.5Billion) ::: Stanley siphons $9.5 billion from several government slush funds.",
        "Conclusion:",
        "Hacker(Stanley) ∧ OnParole(Stanley) ∧ ForbiddenToTouchComputers(Stanley) ∧ SolicitedBy(Stanley, Gabriel) ∧ CrackServer(Stanley, Gabriel) ∧ Offered(Stanley, 10Million) ∧ Program(Stanley, Hydra) ∧ SiphonFunds(Stanley, 9.5Billion) ::: Stanley Jobson is a hacker who is on parole, forbidden from touching computers, solicited by Gabriel for his hacking skills, cracks a secure government server, is offered $10 million, programs a \"hydra\", and siphons $9.5 billion from government slush funds."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 133,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 1,
      "paragraph": "Stanley begins work, learning that Gabriel leads Black Cell, a secret group created by J. Edgar Hoover to launch retaliatory attacks against terrorists that threaten the United States. He also privately discovers Ginger is a DEA agent working undercover, and further is surprised to discover a corpse that looks like Gabriel. He goes to see Holly home from school but finds he is being followed by FBI agent J.T. Roberts (Don Cheadle), who had previously caught Stanley. Roberts, though monitoring Stanley closely, is more interested in Gabriel as he does not appear on any government database, and after learning that another hacker, Axl Torvalds (Rudolf Martin), had been killed by Gabriel's men, warns Stanley to be cautious. Stanley opts to secretly code a back door in his hydra that reverses the money transfer after a short period. Meanwhile, Senator Reisman (Sam Shepard), who oversees Black Cell, learns the FBI has started tracking Gabriel and orders him to stand down. Gabriel refuses, and narrowly avoids an assassination attempt ordered by Reisman. Gabriel personally kills Reisman in revenge and continues his plan.",
      "question_template": "Stanley Jobson was going to use [[CANDIDATE_ANSWER]] to steal the money for Gabriel Shear.",
      "candidate_answers": [
        "A back door in his hydra that reverses the money transfer after a short period"
      ],
      "predicates": [
        "Leads(x, y) ::: x leads group y.",
        "LaunchesAttacks(x, y) ::: x launches retaliatory attacks against y.",
        "Monitors(x, y) ::: x monitors y closely.",
        "MoreInterestedIn(x, y) ::: x is more interested in y than in others.",
        "Orders(x, y) ::: x orders y to take a specific action.",
        "Refuses(x, y) ::: x refuses to comply with y's orders.",
        "Kills(x, y) ::: x kills y.",
        "Threatens(x, y) ::: x threatens y."
      ],
      "premises": [
        "Leads(gabriel, blackCell) ∧ LaunchesAttacks(gabriel, knownTerrorists) ∧ Threatens(knownTerrorists, US) ::: Gabriel leads Black Cell to launch retaliatory attacks against terrorists that threaten the United States.",
        "Monitors(roberts, stanley) ∧ MoreInterestedIn(roberts, gabriel) ::: J.T. Roberts monitors Stanley closely while being more interested in Gabriel.",
        "Orders(reisman, standDown(gabriel)) ::: Senator Reisman oversees Black Cell and orders Gabriel to stand down.",
        "Refuses(gabriel, standDown(reisman)) ∧ Kills(gabriel, reisman) ::: Gabriel refuses Reisman's order to stand down and kills Reisman in revenge."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 133,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 2,
      "paragraph": "Stanley delivers the hydra to Gabriel and leaves to see Holly, only to find that Gabriel has killed Melissa and her husband and kidnapped Holly, framing Stanley. Stanley has no choice but to participate with the bank heist to get Holly back. Gabriel and his men storm a Worldbanc branch, and secure its employees and customers as hostages and fitting each with ball-bearing-based explosives similar to Claymore mines. When police and FBI surround the branch, Gabriel takes Stanley to the coffee shop across the street to meet with Roberts, but Gabriel spends the time to discuss the film Dog Day Afternoon and the nature of misdirection. Once back in the bank, Gabriel has one of his men escort a hostage to demonstrate the situation. A sniper kills the man, and other agents pull the hostage away from the bank, causing the bomb to detonate, ravaging the buildings and vehicles on the street and killing several people, a scene shown in medias res at the start of the film.",
      "question_template": "Stanley Jobson was going to use [[CANDIDATE_ANSWER]] to steal the money for Gabriel Shear.",
      "candidate_answers": [
        "- Participate with the bank heist to get Holly back",
        "- Gabriel and his men storm a Worldbanc branch",
        "- Secure its employees and customers as hostages",
        "- Fitting each with ball-bearing-based explosives similar to Claymore mines"
      ],
      "predicates": [
        "Delivers(x, y) ::: x delivers y.",
        "Kills(x, y) ::: x kills y.",
        "Kidnaps(x, y) ::: x kidnaps y.",
        "Frames(x, y) ::: x frames y.",
        "ParticipatesIn(x, y) ::: x participates in y.",
        "Storms(x, y) ::: x storms y.",
        "Secures(x, y) ::: x secures y.",
        "FittingWithExplosives(x, y) ::: x is fitted with explosives y.",
        "Surrounds(x, y) ::: x surrounds y.",
        "Takes(x, y) ::: x takes y.",
        "Discusses(x, y) ::: x discusses y.",
        "Demonstrates(x, y) ::: x demonstrates y.",
        "Kills(x, y) ::: x kills y.",
        "Pulls(x, y) ::: x pulls y.",
        "Detonates(x) ::: x detonates.",
        "Causes(x, y) ::: x causes y.",
        "ResultsIn(x, y) ::: x results in y."
      ],
      "premises": [
        "Delivers(stanley, hydra) ::: Stanley delivers the hydra to Gabriel.",
        "Kills(gabriel, melissa) ∧ Kills(gabriel, husband) ::: Gabriel has killed Melissa and her husband.",
        "Kidnaps(gabriel, holly) ::: Gabriel kidnaps Holly.",
        "Frames(gabriel, stanley) ::: Gabriel frames Stanley.",
        "ParticipatesIn(stanley, bank_heist) ::: Stanley participates in the bank heist to get Holly back.",
        "Storms(gabriel, worldbanc) ::: Gabriel storms a Worldbanc branch.",
        "Secures(gabriel, employees) ∧ Secures(gabriel, customers) ::: Gabriel secures the employees and customers as hostages.",
        "FittingWithExplosives(employees, ball_bearing_explosives) ::: Employees and customers are fitted with ball-bearing-based explosives.",
        "Surrounds(police, worldbanc) ∧ Surrounds(FBI, worldbanc) ::: Police and FBI surround the branch.",
        "Takes(gabriel, stanley) ::: Gabriel takes Stanley to the coffee shop.",
        "Discusses(gabriel, dog_day_afternoon) ::: Gabriel discusses the film Dog Day Afternoon.",
        "Demonstrates(gabriel, situation) ::: Gabriel demonstrates the situation with a hostage.",
        "Kills(sniper, man) ::: A sniper kills the man.",
        "Pulls(agents, hostage) ::: Other agents pull the hostage away from the bank.",
        "Detonates(bomb) ::: The bomb detonates.",
        "ResultsIn(detonation, casualties) ∧ ResultsIn(detonation, destruction) ::: The detonation of the bomb results in casualties and destruction.",
        "Conclusion:",
        "Causes(gabriel, kidnapping(holly)) ::: Gabriel's actions lead to the kidnapping of Holly.",
        "Causes(stanley, rescue(holly)) ::: The bank heist is a means for Stanley to attempt to rescue Holly.",
        "ResultsIn(detonation, casualties) ::: The detonation of the bomb results in casualties and destruction."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "135": [
    {
      "id": 135,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 2,
      "paragraph": "Stanley delivers the hydra to Gabriel and leaves to see Holly, only to find that Gabriel has killed Melissa and her husband and kidnapped Holly, framing Stanley. Stanley has no choice but to participate with the bank heist to get Holly back. Gabriel and his men storm a Worldbanc branch, and secure its employees and customers as hostages and fitting each with ball-bearing-based explosives similar to Claymore mines. When police and FBI surround the branch, Gabriel takes Stanley to the coffee shop across the street to meet with Roberts, but Gabriel spends the time to discuss the film Dog Day Afternoon and the nature of misdirection. Once back in the bank, Gabriel has one of his men escort a hostage to demonstrate the situation. A sniper kills the man, and other agents pull the hostage away from the bank, causing the bomb to detonate, ravaging the buildings and vehicles on the street and killing several people, a scene shown in medias res at the start of the film.",
      "question_template": "The heist occurred at [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Worldbanc branch"
      ],
      "predicates": [
        "Delivers(x, y) ::: x delivers y.",
        "Kills(x, y) ::: x kills y.",
        "Kidnaps(x, y) ::: x kidnaps y.",
        "Frames(x, y) ::: x frames y.",
        "ParticipatesIn(x, y) ::: x participates in y.",
        "Storms(x, y) ::: x storms y.",
        "Secures(x, y) ::: x secures y.",
        "FittingWithExplosives(x, y) ::: x is fitted with explosives y.",
        "Surrounds(x, y) ::: x surrounds y.",
        "Takes(x, y) ::: x takes y.",
        "Discusses(x, y) ::: x discusses y.",
        "Demonstrates(x, y) ::: x demonstrates y.",
        "Kills(x, y) ::: x kills y.",
        "Pulls(x, y) ::: x pulls y.",
        "Detonates(x) ::: x detonates.",
        "Causes(x, y) ::: x causes y.",
        "ResultsIn(x, y) ::: x results in y."
      ],
      "premises": [
        "Delivers(stanley, hydra) ::: Stanley delivers the hydra to Gabriel.",
        "Kills(gabriel, melissa) ∧ Kills(gabriel, husband) ::: Gabriel has killed Melissa and her husband.",
        "Kidnaps(gabriel, holly) ::: Gabriel kidnaps Holly.",
        "Frames(gabriel, stanley) ::: Gabriel frames Stanley.",
        "ParticipatesIn(stanley, bank_heist) ::: Stanley participates in the bank heist to get Holly back.",
        "Storms(gabriel, worldbanc) ::: Gabriel storms a Worldbanc branch.",
        "Secures(gabriel, employees) ∧ Secures(gabriel, customers) ::: Gabriel secures the employees and customers as hostages.",
        "FittingWithExplosives(employees, ball_bearing_explosives) ::: Employees and customers are fitted with ball-bearing-based explosives.",
        "Surrounds(police, worldbanc) ∧ Surrounds(FBI, worldbanc) ::: Police and FBI surround the branch.",
        "Takes(gabriel, stanley) ::: Gabriel takes Stanley to the coffee shop.",
        "Discusses(gabriel, dog_day_afternoon) ::: Gabriel discusses the film Dog Day Afternoon.",
        "Demonstrates(gabriel, situation) ::: Gabriel demonstrates the situation with a hostage.",
        "Kills(sniper, man) ::: A sniper kills the man.",
        "Pulls(agents, hostage) ::: Other agents pull the hostage away from the bank.",
        "Detonates(bomb) ::: The bomb detonates.",
        "ResultsIn(detonation, casualties) ∧ ResultsIn(detonation, destruction) ::: The detonation of the bomb results in casualties and destruction.",
        "Conclusion:",
        "Causes(gabriel, kidnapping(holly)) ::: Gabriel's actions lead to the kidnapping of Holly.",
        "Causes(stanley, rescue(holly)) ::: The bank heist is a means for Stanley to attempt to rescue Holly.",
        "ResultsIn(detonation, casualties) ::: The detonation of the bomb results in casualties and destruction."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "136": [
    {
      "id": 136,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 1,
      "paragraph": "Stanley begins work, learning that Gabriel leads Black Cell, a secret group created by J. Edgar Hoover to launch retaliatory attacks against terrorists that threaten the United States. He also privately discovers Ginger is a DEA agent working undercover, and further is surprised to discover a corpse that looks like Gabriel. He goes to see Holly home from school but finds he is being followed by FBI agent J.T. Roberts (Don Cheadle), who had previously caught Stanley. Roberts, though monitoring Stanley closely, is more interested in Gabriel as he does not appear on any government database, and after learning that another hacker, Axl Torvalds (Rudolf Martin), had been killed by Gabriel's men, warns Stanley to be cautious. Stanley opts to secretly code a back door in his hydra that reverses the money transfer after a short period. Meanwhile, Senator Reisman (Sam Shepard), who oversees Black Cell, learns the FBI has started tracking Gabriel and orders him to stand down. Gabriel refuses, and narrowly avoids an assassination attempt ordered by Reisman. Gabriel personally kills Reisman in revenge and continues his plan.",
      "question_template": "Stanley has to [[CANDIDATE_ANSWER]] to get Holly back.",
      "candidate_answers": [
        "- Stanley begins work, learning that Gabriel leads Black Cell",
        "- He also privately discovers Ginger is a DEA agent working undercover",
        "- He goes to see Holly home from school but finds he is being followed by FBI agent J.T. Roberts",
        "- Stanley opts to secretly code a back door in his hydra that reverses the money transfer after a short period",
        "- Senator Reisman learns the FBI has started tracking Gabriel and orders him to stand down",
        "- Gabriel personally kills Reisman in revenge and continues his plan"
      ],
      "predicates": [
        "Leads(x, y) ::: x leads group y.",
        "LaunchesAttacks(x, y) ::: x launches retaliatory attacks against y.",
        "Monitors(x, y) ::: x monitors y closely.",
        "MoreInterestedIn(x, y) ::: x is more interested in y than in others.",
        "Orders(x, y) ::: x orders y to take a specific action.",
        "Refuses(x, y) ::: x refuses to comply with y's orders.",
        "Kills(x, y) ::: x kills y.",
        "Threatens(x, y) ::: x threatens y."
      ],
      "premises": [
        "Leads(gabriel, blackCell) ∧ LaunchesAttacks(gabriel, knownTerrorists) ∧ Threatens(knownTerrorists, US) ::: Gabriel leads Black Cell to launch retaliatory attacks against terrorists that threaten the United States.",
        "Monitors(roberts, stanley) ∧ MoreInterestedIn(roberts, gabriel) ::: J.T. Roberts monitors Stanley closely while being more interested in Gabriel.",
        "Orders(reisman, standDown(gabriel)) ::: Senator Reisman oversees Black Cell and orders Gabriel to stand down.",
        "Refuses(gabriel, standDown(reisman)) ∧ Kills(gabriel, reisman) ::: Gabriel refuses Reisman's order to stand down and kills Reisman in revenge."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "138": [
    {
      "id": 138,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 0,
      "paragraph": " Stanley Jobson (Hugh Jackman) is a hacker. Having served time for infecting the FBI's Carnivore program with a computer virus, he is now on parole but forbidden from touching computers. His alcoholic ex-wife Melissa (Drea de Matteo), who married a rich porn producer and is currently a part-time porn actress has sole custody over their daughter Holly, and a restraining order preventing him from visiting the latter. One day, he is solicited by Ginger Knowles (Halle Berry), speaking for her boss Gabriel Shear (John Travolta), for his hacking skills. He goes to meet Gabriel in Los Angeles, where he is put on the spot to crack a secure government server within a minute while simultaneously held at gunpoint and receiving fellatio. Successful, Gabriel offers Stanley $10Â million to program multi-headed worm, a \"hydra\", to siphon $9.5Â billion from several government slush funds.",
      "question_template": "Stanley and Holly go [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Los Angeles",
        "- To meet Gabriel"
      ],
      "predicates": [
        "Hacker(x) ::: x is a hacker.",
        "OnParole(x) ::: x is on parole.",
        "ForbiddenToTouchComputers(x) ::: x is forbidden from touching computers.",
        "Alcoholic(x) ::: x is an alcoholic.",
        "ExWife(x, y) ::: x is the ex-wife of y.",
        "HasCustody(x, y) ::: x has custody over y.",
        "RestrainingOrder(x, y) ::: x has a restraining order preventing y from visiting.",
        "SolicitedBy(x, y) ::: x is solicited by y.",
        "CrackServer(x, y) ::: x cracks a secure government server for y.",
        "Offered(x, y) ::: x is offered y by someone.",
        "Program(x, y) ::: x programs y.",
        "SiphonFunds(x, y) ::: x siphons y from several government slush funds."
      ],
      "premises": [
        "Hacker(Stanley) ∧ OnParole(Stanley) ∧ ForbiddenToTouchComputers(Stanley) ::: Stanley Jobson is a hacker, on parole, and forbidden from touching computers.",
        "Alcoholic(Melissa) ∧ ExWife(Melissa, Stanley) ∧ HasCustody(Melissa, Holly) ∧ RestrainingOrder(Melissa, Stanley) ::: Melissa is an alcoholic, the ex-wife of Stanley, has custody over their daughter Holly, and has a restraining order preventing Stanley from visiting Holly.",
        "SolicitedBy(Stanley, Gabriel) ::: Gabriel Shear solicits Stanley Jobson for hacking skills.",
        "CrackServer(Stanley, Gabriel) ::: Stanley cracks a secure government server for Gabriel while held at gunpoint.",
        "Offered(Stanley, 10Million) ::: Gabriel offers Stanley $10 million.",
        "Program(Stanley, Hydra) ::: Stanley programs a multi-headed worm, a \"hydra\".",
        "SiphonFunds(Stanley, 9.5Billion) ::: Stanley siphons $9.5 billion from several government slush funds.",
        "Conclusion:",
        "Hacker(Stanley) ∧ OnParole(Stanley) ∧ ForbiddenToTouchComputers(Stanley) ∧ SolicitedBy(Stanley, Gabriel) ∧ CrackServer(Stanley, Gabriel) ∧ Offered(Stanley, 10Million) ∧ Program(Stanley, Hydra) ∧ SiphonFunds(Stanley, 9.5Billion) ::: Stanley Jobson is a hacker who is on parole, forbidden from touching computers, solicited by Gabriel for his hacking skills, cracks a secure government server, is offered $10 million, programs a \"hydra\", and siphons $9.5 billion from government slush funds."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 138,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 3,
      "paragraph": "Gabriel instructs Stanley to launch the hydra, and turns Holly over to him once completed. However, Stanley's back door triggers before they can leave the bank, and Stanley is recaptured while Holly is rescued. Gabriel threatens to kill Ginger, who he knows is a DEA agent, unless Stanley re-siphons the money back to a Monte Carlo bank. Despite doing so, Gabriel shoots Ginger. Gabriel and his men load the hostages on a bus and demand a plane wait for them at the local airport, but while en route, the bus is lifted off by a S-64 Aircrane and deposited on a roof of a local skyscraper. Gabriel deactivates the bombs and departs with his surviving men on a waiting helicopter, which Stanley shoots down using a rocket-propelled grenade from the bus.",
      "question_template": "Stanley and Holly go [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- The bank",
        "- A Monte Carlo bank",
        "- A local airport",
        "- A roof of a local skyscraper"
      ],
      "predicates": [
        "Instructs(x, y) ::: x instructs y to perform an action.",
        "TurnsOver(x, y) ::: x turns over y to someone else.",
        "Triggers(x) ::: x triggers an event.",
        "Recaptured(x) ::: x is recaptured.",
        "Rescued(x) ::: x is rescued.",
        "Threatens(x, y) ::: x threatens y with harm.",
        "IsAgent(x, y) ::: x is an agent of organization y.",
        "ReSiphons(x, y) ::: x re-siphons money back to y.",
        "Shoots(x, y) ::: x shoots y.",
        "Loads(x, y) ::: x loads y onto a vehicle.",
        "Demands(x, y) ::: x demands y.",
        "WaitsFor(x, y) ::: x waits for y to arrive.",
        "Lifts(x, y) ::: x lifts y off the ground.",
        "Deposits(x, y) ::: x deposits y in a location.",
        "Deactivates(x) ::: x deactivates a device.",
        "Departs(x) ::: x leaves a location.",
        "ShootsDown(x, y) ::: x shoots down y using a weapon."
      ],
      "premises": [
        "Instructs(gabriel, stanley) ::: Gabriel instructs Stanley to launch the hydra.",
        "TurnsOver(gabriel, holly) ::: Gabriel turns Holly over to Stanley once the hydra is launched.",
        "Triggers(stanley) ::: Stanley's back door triggers before they can leave the bank.",
        "Recaptured(stanley) ::: Stanley is recaptured while Holly is rescued.",
        "Threatens(gabriel, ginger) ::: Gabriel threatens to kill Ginger.",
        "IsAgent(ginger, DEA) ::: Ginger is a DEA agent.",
        "ReSiphons(stanley, monteCarlo) ::: Stanley re-siphons the money back to a Monte Carlo bank.",
        "Shoots(gabriel, ginger) ::: Gabriel shoots Ginger.",
        "Loads(gabriel, hostages) ::: Gabriel and his men load the hostages on a bus.",
        "Demands(gabriel, plane) ::: Gabriel demands a plane wait for them at the local airport.",
        "Lifts(bus, roof) ::: The bus is lifted off by an S-64 Aircrane.",
        "Deposits(aircrane, roof) ::: The bus is deposited on the roof of a local skyscraper.",
        "Deactivates(gabriel) ::: Gabriel deactivates the bombs.",
        "Departs(gabriel) ::: Gabriel departs with his surviving men on a waiting helicopter.",
        "ShootsDown(stanley, helicopter) ::: Stanley shoots down the helicopter using a rocket-propelled grenade from the bus.",
        "Conclusion:",
        "Threatens(gabriel, ginger) → ReSiphons(stanley, monteCarlo) ::: Gabriel will kill Ginger unless Stanley re-siphons the money back to a Monte Carlo bank."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "139": [
    {
      "id": 139,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 0,
      "paragraph": " Stanley Jobson (Hugh Jackman) is a hacker. Having served time for infecting the FBI's Carnivore program with a computer virus, he is now on parole but forbidden from touching computers. His alcoholic ex-wife Melissa (Drea de Matteo), who married a rich porn producer and is currently a part-time porn actress has sole custody over their daughter Holly, and a restraining order preventing him from visiting the latter. One day, he is solicited by Ginger Knowles (Halle Berry), speaking for her boss Gabriel Shear (John Travolta), for his hacking skills. He goes to meet Gabriel in Los Angeles, where he is put on the spot to crack a secure government server within a minute while simultaneously held at gunpoint and receiving fellatio. Successful, Gabriel offers Stanley $10Â million to program multi-headed worm, a \"hydra\", to siphon $9.5Â billion from several government slush funds.",
      "question_template": "[[CANDIDATE_ANSWER]] are hackers.",
      "candidate_answers": [
        "Stanley Jobson",
        "Gabriel Shear"
      ],
      "predicates": [
        "Hacker(x) ::: x is a hacker.",
        "OnParole(x) ::: x is on parole.",
        "ForbiddenToTouchComputers(x) ::: x is forbidden from touching computers.",
        "Alcoholic(x) ::: x is an alcoholic.",
        "ExWife(x, y) ::: x is the ex-wife of y.",
        "HasCustody(x, y) ::: x has custody over y.",
        "RestrainingOrder(x, y) ::: x has a restraining order preventing y from visiting.",
        "SolicitedBy(x, y) ::: x is solicited by y.",
        "CrackServer(x, y) ::: x cracks a secure government server for y.",
        "Offered(x, y) ::: x is offered y by someone.",
        "Program(x, y) ::: x programs y.",
        "SiphonFunds(x, y) ::: x siphons y from several government slush funds."
      ],
      "premises": [
        "Hacker(Stanley) ∧ OnParole(Stanley) ∧ ForbiddenToTouchComputers(Stanley) ::: Stanley Jobson is a hacker, on parole, and forbidden from touching computers.",
        "Alcoholic(Melissa) ∧ ExWife(Melissa, Stanley) ∧ HasCustody(Melissa, Holly) ∧ RestrainingOrder(Melissa, Stanley) ::: Melissa is an alcoholic, the ex-wife of Stanley, has custody over their daughter Holly, and has a restraining order preventing Stanley from visiting Holly.",
        "SolicitedBy(Stanley, Gabriel) ::: Gabriel Shear solicits Stanley Jobson for hacking skills.",
        "CrackServer(Stanley, Gabriel) ::: Stanley cracks a secure government server for Gabriel while held at gunpoint.",
        "Offered(Stanley, 10Million) ::: Gabriel offers Stanley $10 million.",
        "Program(Stanley, Hydra) ::: Stanley programs a multi-headed worm, a \"hydra\".",
        "SiphonFunds(Stanley, 9.5Billion) ::: Stanley siphons $9.5 billion from several government slush funds.",
        "Conclusion:",
        "Hacker(Stanley) ∧ OnParole(Stanley) ∧ ForbiddenToTouchComputers(Stanley) ∧ SolicitedBy(Stanley, Gabriel) ∧ CrackServer(Stanley, Gabriel) ∧ Offered(Stanley, 10Million) ∧ Program(Stanley, Hydra) ∧ SiphonFunds(Stanley, 9.5Billion) ::: Stanley Jobson is a hacker who is on parole, forbidden from touching computers, solicited by Gabriel for his hacking skills, cracks a secure government server, is offered $10 million, programs a \"hydra\", and siphons $9.5 billion from government slush funds."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 139,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 3,
      "paragraph": "Gabriel instructs Stanley to launch the hydra, and turns Holly over to him once completed. However, Stanley's back door triggers before they can leave the bank, and Stanley is recaptured while Holly is rescued. Gabriel threatens to kill Ginger, who he knows is a DEA agent, unless Stanley re-siphons the money back to a Monte Carlo bank. Despite doing so, Gabriel shoots Ginger. Gabriel and his men load the hostages on a bus and demand a plane wait for them at the local airport, but while en route, the bus is lifted off by a S-64 Aircrane and deposited on a roof of a local skyscraper. Gabriel deactivates the bombs and departs with his surviving men on a waiting helicopter, which Stanley shoots down using a rocket-propelled grenade from the bus.",
      "question_template": "[[CANDIDATE_ANSWER]] are hackers.",
      "candidate_answers": [
        "Gabriel",
        "Stanley",
        "Ginger"
      ],
      "predicates": [
        "Instructs(x, y) ::: x instructs y to perform an action.",
        "TurnsOver(x, y) ::: x turns over y to someone else.",
        "Triggers(x) ::: x triggers an event.",
        "Recaptured(x) ::: x is recaptured.",
        "Rescued(x) ::: x is rescued.",
        "Threatens(x, y) ::: x threatens y with harm.",
        "IsAgent(x, y) ::: x is an agent of organization y.",
        "ReSiphons(x, y) ::: x re-siphons money back to y.",
        "Shoots(x, y) ::: x shoots y.",
        "Loads(x, y) ::: x loads y onto a vehicle.",
        "Demands(x, y) ::: x demands y.",
        "WaitsFor(x, y) ::: x waits for y to arrive.",
        "Lifts(x, y) ::: x lifts y off the ground.",
        "Deposits(x, y) ::: x deposits y in a location.",
        "Deactivates(x) ::: x deactivates a device.",
        "Departs(x) ::: x leaves a location.",
        "ShootsDown(x, y) ::: x shoots down y using a weapon."
      ],
      "premises": [
        "Instructs(gabriel, stanley) ::: Gabriel instructs Stanley to launch the hydra.",
        "TurnsOver(gabriel, holly) ::: Gabriel turns Holly over to Stanley once the hydra is launched.",
        "Triggers(stanley) ::: Stanley's back door triggers before they can leave the bank.",
        "Recaptured(stanley) ::: Stanley is recaptured while Holly is rescued.",
        "Threatens(gabriel, ginger) ::: Gabriel threatens to kill Ginger.",
        "IsAgent(ginger, DEA) ::: Ginger is a DEA agent.",
        "ReSiphons(stanley, monteCarlo) ::: Stanley re-siphons the money back to a Monte Carlo bank.",
        "Shoots(gabriel, ginger) ::: Gabriel shoots Ginger.",
        "Loads(gabriel, hostages) ::: Gabriel and his men load the hostages on a bus.",
        "Demands(gabriel, plane) ::: Gabriel demands a plane wait for them at the local airport.",
        "Lifts(bus, roof) ::: The bus is lifted off by an S-64 Aircrane.",
        "Deposits(aircrane, roof) ::: The bus is deposited on the roof of a local skyscraper.",
        "Deactivates(gabriel) ::: Gabriel deactivates the bombs.",
        "Departs(gabriel) ::: Gabriel departs with his surviving men on a waiting helicopter.",
        "ShootsDown(stanley, helicopter) ::: Stanley shoots down the helicopter using a rocket-propelled grenade from the bus.",
        "Conclusion:",
        "Threatens(gabriel, ginger) → ReSiphons(stanley, monteCarlo) ::: Gabriel will kill Ginger unless Stanley re-siphons the money back to a Monte Carlo bank."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "142": [
    {
      "id": 142,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 0,
      "paragraph": " Stanley Jobson (Hugh Jackman) is a hacker. Having served time for infecting the FBI's Carnivore program with a computer virus, he is now on parole but forbidden from touching computers. His alcoholic ex-wife Melissa (Drea de Matteo), who married a rich porn producer and is currently a part-time porn actress has sole custody over their daughter Holly, and a restraining order preventing him from visiting the latter. One day, he is solicited by Ginger Knowles (Halle Berry), speaking for her boss Gabriel Shear (John Travolta), for his hacking skills. He goes to meet Gabriel in Los Angeles, where he is put on the spot to crack a secure government server within a minute while simultaneously held at gunpoint and receiving fellatio. Successful, Gabriel offers Stanley $10Â million to program multi-headed worm, a \"hydra\", to siphon $9.5Â billion from several government slush funds.",
      "question_template": "Melissa has been [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Melissa , who married a rich porn producer and is currently a part-time porn actress",
        "- She has sole custody over their daughter Holly",
        "- A restraining order preventing him from visiting the latter"
      ],
      "predicates": [
        "Hacker(x) ::: x is a hacker.",
        "OnParole(x) ::: x is on parole.",
        "ForbiddenToTouchComputers(x) ::: x is forbidden from touching computers.",
        "Alcoholic(x) ::: x is an alcoholic.",
        "ExWife(x, y) ::: x is the ex-wife of y.",
        "HasCustody(x, y) ::: x has custody over y.",
        "RestrainingOrder(x, y) ::: x has a restraining order preventing y from visiting.",
        "SolicitedBy(x, y) ::: x is solicited by y.",
        "CrackServer(x, y) ::: x cracks a secure government server for y.",
        "Offered(x, y) ::: x is offered y by someone.",
        "Program(x, y) ::: x programs y.",
        "SiphonFunds(x, y) ::: x siphons y from several government slush funds."
      ],
      "premises": [
        "Hacker(Stanley) ∧ OnParole(Stanley) ∧ ForbiddenToTouchComputers(Stanley) ::: Stanley Jobson is a hacker, on parole, and forbidden from touching computers.",
        "Alcoholic(Melissa) ∧ ExWife(Melissa, Stanley) ∧ HasCustody(Melissa, Holly) ∧ RestrainingOrder(Melissa, Stanley) ::: Melissa is an alcoholic, the ex-wife of Stanley, has custody over their daughter Holly, and has a restraining order preventing Stanley from visiting Holly.",
        "SolicitedBy(Stanley, Gabriel) ::: Gabriel Shear solicits Stanley Jobson for hacking skills.",
        "CrackServer(Stanley, Gabriel) ::: Stanley cracks a secure government server for Gabriel while held at gunpoint.",
        "Offered(Stanley, 10Million) ::: Gabriel offers Stanley $10 million.",
        "Program(Stanley, Hydra) ::: Stanley programs a multi-headed worm, a \"hydra\".",
        "SiphonFunds(Stanley, 9.5Billion) ::: Stanley siphons $9.5 billion from several government slush funds.",
        "Conclusion:",
        "Hacker(Stanley) ∧ OnParole(Stanley) ∧ ForbiddenToTouchComputers(Stanley) ∧ SolicitedBy(Stanley, Gabriel) ∧ CrackServer(Stanley, Gabriel) ∧ Offered(Stanley, 10Million) ∧ Program(Stanley, Hydra) ∧ SiphonFunds(Stanley, 9.5Billion) ::: Stanley Jobson is a hacker who is on parole, forbidden from touching computers, solicited by Gabriel for his hacking skills, cracks a secure government server, is offered $10 million, programs a \"hydra\", and siphons $9.5 billion from government slush funds."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "143": [
    {
      "id": 143,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 1,
      "paragraph": "Stanley begins work, learning that Gabriel leads Black Cell, a secret group created by J. Edgar Hoover to launch retaliatory attacks against terrorists that threaten the United States. He also privately discovers Ginger is a DEA agent working undercover, and further is surprised to discover a corpse that looks like Gabriel. He goes to see Holly home from school but finds he is being followed by FBI agent J.T. Roberts (Don Cheadle), who had previously caught Stanley. Roberts, though monitoring Stanley closely, is more interested in Gabriel as he does not appear on any government database, and after learning that another hacker, Axl Torvalds (Rudolf Martin), had been killed by Gabriel's men, warns Stanley to be cautious. Stanley opts to secretly code a back door in his hydra that reverses the money transfer after a short period. Meanwhile, Senator Reisman (Sam Shepard), who oversees Black Cell, learns the FBI has started tracking Gabriel and orders him to stand down. Gabriel refuses, and narrowly avoids an assassination attempt ordered by Reisman. Gabriel personally kills Reisman in revenge and continues his plan.",
      "question_template": "[[CANDIDATE_ANSWER]] is what Black Cell does.",
      "candidate_answers": [
        "A secret group created by J. Edgar Hoover to launch retaliatory attacks against terrorists that threaten the United States"
      ],
      "predicates": [
        "Leads(x, y) ::: x leads group y.",
        "LaunchesAttacks(x, y) ::: x launches retaliatory attacks against y.",
        "Monitors(x, y) ::: x monitors y closely.",
        "MoreInterestedIn(x, y) ::: x is more interested in y than in others.",
        "Orders(x, y) ::: x orders y to take a specific action.",
        "Refuses(x, y) ::: x refuses to comply with y's orders.",
        "Kills(x, y) ::: x kills y.",
        "Threatens(x, y) ::: x threatens y."
      ],
      "premises": [
        "Leads(gabriel, blackCell) ∧ LaunchesAttacks(gabriel, knownTerrorists) ∧ Threatens(knownTerrorists, US) ::: Gabriel leads Black Cell to launch retaliatory attacks against terrorists that threaten the United States.",
        "Monitors(roberts, stanley) ∧ MoreInterestedIn(roberts, gabriel) ::: J.T. Roberts monitors Stanley closely while being more interested in Gabriel.",
        "Orders(reisman, standDown(gabriel)) ::: Senator Reisman oversees Black Cell and orders Gabriel to stand down.",
        "Refuses(gabriel, standDown(reisman)) ∧ Kills(gabriel, reisman) ::: Gabriel refuses Reisman's order to stand down and kills Reisman in revenge."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "146": [
    {
      "id": 146,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 0,
      "paragraph": " Stanley Jobson (Hugh Jackman) is a hacker. Having served time for infecting the FBI's Carnivore program with a computer virus, he is now on parole but forbidden from touching computers. His alcoholic ex-wife Melissa (Drea de Matteo), who married a rich porn producer and is currently a part-time porn actress has sole custody over their daughter Holly, and a restraining order preventing him from visiting the latter. One day, he is solicited by Ginger Knowles (Halle Berry), speaking for her boss Gabriel Shear (John Travolta), for his hacking skills. He goes to meet Gabriel in Los Angeles, where he is put on the spot to crack a secure government server within a minute while simultaneously held at gunpoint and receiving fellatio. Successful, Gabriel offers Stanley $10Â million to program multi-headed worm, a \"hydra\", to siphon $9.5Â billion from several government slush funds.",
      "question_template": "Stanley was in jail because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Having served time for infecting the FBI's Carnivore program with a computer virus"
      ],
      "predicates": [
        "Hacker(x) ::: x is a hacker.",
        "OnParole(x) ::: x is on parole.",
        "ForbiddenToTouchComputers(x) ::: x is forbidden from touching computers.",
        "Alcoholic(x) ::: x is an alcoholic.",
        "ExWife(x, y) ::: x is the ex-wife of y.",
        "HasCustody(x, y) ::: x has custody over y.",
        "RestrainingOrder(x, y) ::: x has a restraining order preventing y from visiting.",
        "SolicitedBy(x, y) ::: x is solicited by y.",
        "CrackServer(x, y) ::: x cracks a secure government server for y.",
        "Offered(x, y) ::: x is offered y by someone.",
        "Program(x, y) ::: x programs y.",
        "SiphonFunds(x, y) ::: x siphons y from several government slush funds."
      ],
      "premises": [
        "Hacker(Stanley) ∧ OnParole(Stanley) ∧ ForbiddenToTouchComputers(Stanley) ::: Stanley Jobson is a hacker, on parole, and forbidden from touching computers.",
        "Alcoholic(Melissa) ∧ ExWife(Melissa, Stanley) ∧ HasCustody(Melissa, Holly) ∧ RestrainingOrder(Melissa, Stanley) ::: Melissa is an alcoholic, the ex-wife of Stanley, has custody over their daughter Holly, and has a restraining order preventing Stanley from visiting Holly.",
        "SolicitedBy(Stanley, Gabriel) ::: Gabriel Shear solicits Stanley Jobson for hacking skills.",
        "CrackServer(Stanley, Gabriel) ::: Stanley cracks a secure government server for Gabriel while held at gunpoint.",
        "Offered(Stanley, 10Million) ::: Gabriel offers Stanley $10 million.",
        "Program(Stanley, Hydra) ::: Stanley programs a multi-headed worm, a \"hydra\".",
        "SiphonFunds(Stanley, 9.5Billion) ::: Stanley siphons $9.5 billion from several government slush funds.",
        "Conclusion:",
        "Hacker(Stanley) ∧ OnParole(Stanley) ∧ ForbiddenToTouchComputers(Stanley) ∧ SolicitedBy(Stanley, Gabriel) ∧ CrackServer(Stanley, Gabriel) ∧ Offered(Stanley, 10Million) ∧ Program(Stanley, Hydra) ∧ SiphonFunds(Stanley, 9.5Billion) ::: Stanley Jobson is a hacker who is on parole, forbidden from touching computers, solicited by Gabriel for his hacking skills, cracks a secure government server, is offered $10 million, programs a \"hydra\", and siphons $9.5 billion from government slush funds."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 146,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 1,
      "paragraph": "Stanley begins work, learning that Gabriel leads Black Cell, a secret group created by J. Edgar Hoover to launch retaliatory attacks against terrorists that threaten the United States. He also privately discovers Ginger is a DEA agent working undercover, and further is surprised to discover a corpse that looks like Gabriel. He goes to see Holly home from school but finds he is being followed by FBI agent J.T. Roberts (Don Cheadle), who had previously caught Stanley. Roberts, though monitoring Stanley closely, is more interested in Gabriel as he does not appear on any government database, and after learning that another hacker, Axl Torvalds (Rudolf Martin), had been killed by Gabriel's men, warns Stanley to be cautious. Stanley opts to secretly code a back door in his hydra that reverses the money transfer after a short period. Meanwhile, Senator Reisman (Sam Shepard), who oversees Black Cell, learns the FBI has started tracking Gabriel and orders him to stand down. Gabriel refuses, and narrowly avoids an assassination attempt ordered by Reisman. Gabriel personally kills Reisman in revenge and continues his plan.",
      "question_template": "Stanley was in jail because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- He had previously caught Stanley",
        "- Stanley opts to secretly code a back door in his hydra that reverses the money transfer after a short period."
      ],
      "predicates": [
        "Leads(x, y) ::: x leads group y.",
        "LaunchesAttacks(x, y) ::: x launches retaliatory attacks against y.",
        "Monitors(x, y) ::: x monitors y closely.",
        "MoreInterestedIn(x, y) ::: x is more interested in y than in others.",
        "Orders(x, y) ::: x orders y to take a specific action.",
        "Refuses(x, y) ::: x refuses to comply with y's orders.",
        "Kills(x, y) ::: x kills y.",
        "Threatens(x, y) ::: x threatens y."
      ],
      "premises": [
        "Leads(gabriel, blackCell) ∧ LaunchesAttacks(gabriel, knownTerrorists) ∧ Threatens(knownTerrorists, US) ::: Gabriel leads Black Cell to launch retaliatory attacks against terrorists that threaten the United States.",
        "Monitors(roberts, stanley) ∧ MoreInterestedIn(roberts, gabriel) ::: J.T. Roberts monitors Stanley closely while being more interested in Gabriel.",
        "Orders(reisman, standDown(gabriel)) ::: Senator Reisman oversees Black Cell and orders Gabriel to stand down.",
        "Refuses(gabriel, standDown(reisman)) ∧ Kills(gabriel, reisman) ::: Gabriel refuses Reisman's order to stand down and kills Reisman in revenge."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "147": [
    {
      "id": 147,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 0,
      "paragraph": " Stanley Jobson (Hugh Jackman) is a hacker. Having served time for infecting the FBI's Carnivore program with a computer virus, he is now on parole but forbidden from touching computers. His alcoholic ex-wife Melissa (Drea de Matteo), who married a rich porn producer and is currently a part-time porn actress has sole custody over their daughter Holly, and a restraining order preventing him from visiting the latter. One day, he is solicited by Ginger Knowles (Halle Berry), speaking for her boss Gabriel Shear (John Travolta), for his hacking skills. He goes to meet Gabriel in Los Angeles, where he is put on the spot to crack a secure government server within a minute while simultaneously held at gunpoint and receiving fellatio. Successful, Gabriel offers Stanley $10Â million to program multi-headed worm, a \"hydra\", to siphon $9.5Â billion from several government slush funds.",
      "question_template": "Gabriel leads Black Cell.",
      "candidate_answers": [
        "Gabriel Shear"
      ],
      "predicates": [
        "Hacker(x) ::: x is a hacker.",
        "OnParole(x) ::: x is on parole.",
        "ForbiddenToTouchComputers(x) ::: x is forbidden from touching computers.",
        "Alcoholic(x) ::: x is an alcoholic.",
        "ExWife(x, y) ::: x is the ex-wife of y.",
        "HasCustody(x, y) ::: x has custody over y.",
        "RestrainingOrder(x, y) ::: x has a restraining order preventing y from visiting.",
        "SolicitedBy(x, y) ::: x is solicited by y.",
        "CrackServer(x, y) ::: x cracks a secure government server for y.",
        "Offered(x, y) ::: x is offered y by someone.",
        "Program(x, y) ::: x programs y.",
        "SiphonFunds(x, y) ::: x siphons y from several government slush funds."
      ],
      "premises": [
        "Hacker(Stanley) ∧ OnParole(Stanley) ∧ ForbiddenToTouchComputers(Stanley) ::: Stanley Jobson is a hacker, on parole, and forbidden from touching computers.",
        "Alcoholic(Melissa) ∧ ExWife(Melissa, Stanley) ∧ HasCustody(Melissa, Holly) ∧ RestrainingOrder(Melissa, Stanley) ::: Melissa is an alcoholic, the ex-wife of Stanley, has custody over their daughter Holly, and has a restraining order preventing Stanley from visiting Holly.",
        "SolicitedBy(Stanley, Gabriel) ::: Gabriel Shear solicits Stanley Jobson for hacking skills.",
        "CrackServer(Stanley, Gabriel) ::: Stanley cracks a secure government server for Gabriel while held at gunpoint.",
        "Offered(Stanley, 10Million) ::: Gabriel offers Stanley $10 million.",
        "Program(Stanley, Hydra) ::: Stanley programs a multi-headed worm, a \"hydra\".",
        "SiphonFunds(Stanley, 9.5Billion) ::: Stanley siphons $9.5 billion from several government slush funds.",
        "Conclusion:",
        "Hacker(Stanley) ∧ OnParole(Stanley) ∧ ForbiddenToTouchComputers(Stanley) ∧ SolicitedBy(Stanley, Gabriel) ∧ CrackServer(Stanley, Gabriel) ∧ Offered(Stanley, 10Million) ∧ Program(Stanley, Hydra) ∧ SiphonFunds(Stanley, 9.5Billion) ::: Stanley Jobson is a hacker who is on parole, forbidden from touching computers, solicited by Gabriel for his hacking skills, cracks a secure government server, is offered $10 million, programs a \"hydra\", and siphons $9.5 billion from government slush funds."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 147,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 3,
      "paragraph": "Gabriel instructs Stanley to launch the hydra, and turns Holly over to him once completed. However, Stanley's back door triggers before they can leave the bank, and Stanley is recaptured while Holly is rescued. Gabriel threatens to kill Ginger, who he knows is a DEA agent, unless Stanley re-siphons the money back to a Monte Carlo bank. Despite doing so, Gabriel shoots Ginger. Gabriel and his men load the hostages on a bus and demand a plane wait for them at the local airport, but while en route, the bus is lifted off by a S-64 Aircrane and deposited on a roof of a local skyscraper. Gabriel deactivates the bombs and departs with his surviving men on a waiting helicopter, which Stanley shoots down using a rocket-propelled grenade from the bus.",
      "question_template": "Gabriel leads Black Cell.",
      "candidate_answers": [
        "Gabriel"
      ],
      "predicates": [
        "Instructs(x, y) ::: x instructs y to perform an action.",
        "TurnsOver(x, y) ::: x turns over y to someone else.",
        "Triggers(x) ::: x triggers an event.",
        "Recaptured(x) ::: x is recaptured.",
        "Rescued(x) ::: x is rescued.",
        "Threatens(x, y) ::: x threatens y with harm.",
        "IsAgent(x, y) ::: x is an agent of organization y.",
        "ReSiphons(x, y) ::: x re-siphons money back to y.",
        "Shoots(x, y) ::: x shoots y.",
        "Loads(x, y) ::: x loads y onto a vehicle.",
        "Demands(x, y) ::: x demands y.",
        "WaitsFor(x, y) ::: x waits for y to arrive.",
        "Lifts(x, y) ::: x lifts y off the ground.",
        "Deposits(x, y) ::: x deposits y in a location.",
        "Deactivates(x) ::: x deactivates a device.",
        "Departs(x) ::: x leaves a location.",
        "ShootsDown(x, y) ::: x shoots down y using a weapon."
      ],
      "premises": [
        "Instructs(gabriel, stanley) ::: Gabriel instructs Stanley to launch the hydra.",
        "TurnsOver(gabriel, holly) ::: Gabriel turns Holly over to Stanley once the hydra is launched.",
        "Triggers(stanley) ::: Stanley's back door triggers before they can leave the bank.",
        "Recaptured(stanley) ::: Stanley is recaptured while Holly is rescued.",
        "Threatens(gabriel, ginger) ::: Gabriel threatens to kill Ginger.",
        "IsAgent(ginger, DEA) ::: Ginger is a DEA agent.",
        "ReSiphons(stanley, monteCarlo) ::: Stanley re-siphons the money back to a Monte Carlo bank.",
        "Shoots(gabriel, ginger) ::: Gabriel shoots Ginger.",
        "Loads(gabriel, hostages) ::: Gabriel and his men load the hostages on a bus.",
        "Demands(gabriel, plane) ::: Gabriel demands a plane wait for them at the local airport.",
        "Lifts(bus, roof) ::: The bus is lifted off by an S-64 Aircrane.",
        "Deposits(aircrane, roof) ::: The bus is deposited on the roof of a local skyscraper.",
        "Deactivates(gabriel) ::: Gabriel deactivates the bombs.",
        "Departs(gabriel) ::: Gabriel departs with his surviving men on a waiting helicopter.",
        "ShootsDown(stanley, helicopter) ::: Stanley shoots down the helicopter using a rocket-propelled grenade from the bus.",
        "Conclusion:",
        "Threatens(gabriel, ginger) → ReSiphons(stanley, monteCarlo) ::: Gabriel will kill Ginger unless Stanley re-siphons the money back to a Monte Carlo bank."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "149": [
    {
      "id": 149,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 4,
      "paragraph": "Roberts takes Stanley to verify the corpse they found, believing Gabriel was a Mossad agent while there was no record of a DEA agent named Ginger. Stanley recognizes the corpse as the one he discovered earlier and personally realizes that the whole scenario was misdirection. Gabriel had escaped a different route, and Ginger had been wearing a bulletproof vest and was working with Gabriel. Roberts arranges for Stanley to have full custody of Holly, and the two tour the US together. In Monte Carlo Gabriel and Ginger withdraw the money, and later watch as a yacht at sea explodes. Over the film's credits, a news report describes the destruction of the yacht, carrying a known terrorist, as the third such incident in as many weeks.",
      "question_template": "Senator Reisman attempted to assassinate Gabriel because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Gabriel was a Mossad agent",
        "- There was no record of a DEA agent named Ginger",
        "- The whole scenario was misdirection",
        "- Gabriel had escaped a different route",
        "- Ginger had been wearing a bulletproof vest and was working with Gabriel"
      ],
      "predicates": [
        "MossadAgent(x) ::: x is a Mossad agent.",
        "DEAAgent(x) ::: x is a DEA agent.",
        "CorpseIdentified(x, y) ::: x recognizes the corpse as y.",
        "Escaped(x) ::: x escaped through a different route.",
        "WearingBulletproofVest(x) ::: x is wearing a bulletproof vest.",
        "WorkingWith(x, y) ::: x is working with y.",
        "FullCustody(x, y) ::: x has full custody of y.",
        "TourTogether(x, y) ::: x and y tour together.",
        "WithdrawMoney(x, y) ::: x and y withdraw money.",
        "Explodes(x) ::: x explodes.",
        "KnownTerrorist(x) ::: x is a known terrorist.",
        "Incident(x) ::: x is an incident."
      ],
      "premises": [
        "MossadAgent(gabriel) ::: Gabriel was a Mossad agent.",
        "¬∃x (DEAAgent(x)) ::: There was no record of a DEA agent named Ginger.",
        "CorpseIdentified(stanley, c) ::: Stanley recognizes the corpse as the one he discovered earlier.",
        "Escaped(gabriel) ::: Gabriel had escaped a different route.",
        "WearingBulletproofVest(ginger) ::: Ginger had been wearing a bulletproof vest.",
        "WorkingWith(ginger, gabriel) ::: Ginger was working with Gabriel.",
        "FullCustody(roberts, holly) ::: Roberts arranges for Stanley to have full custody of Holly.",
        "TourTogether(stanley, b_2) ::: Stanley and Holly tour the US together.",
        "WithdrawMoney(gabriel, ginger) ::: Gabriel and Ginger withdraw the money in Monte Carlo.",
        "Explodes(d) ::: A yacht at sea explodes.",
        "Incident(d) ::: The explosion of the yacht is an incident.",
        "KnownTerrorist(h) ::: The yacht was carrying a known terrorist.",
        "Conclusion:",
        "Gabriel and Ginger were involved in a scheme that led to the destruction of the yacht."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "WearingBulletproofVest(ginger) ∧ WorkingWith(ginger, gabriel) → AssassinationAttempt(reisman, gabriel)"
      ]
    }
  ],
  "152": [
    {
      "id": 152,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 2,
      "paragraph": "Stanley delivers the hydra to Gabriel and leaves to see Holly, only to find that Gabriel has killed Melissa and her husband and kidnapped Holly, framing Stanley. Stanley has no choice but to participate with the bank heist to get Holly back. Gabriel and his men storm a Worldbanc branch, and secure its employees and customers as hostages and fitting each with ball-bearing-based explosives similar to Claymore mines. When police and FBI surround the branch, Gabriel takes Stanley to the coffee shop across the street to meet with Roberts, but Gabriel spends the time to discuss the film Dog Day Afternoon and the nature of misdirection. Once back in the bank, Gabriel has one of his men escort a hostage to demonstrate the situation. A sniper kills the man, and other agents pull the hostage away from the bank, causing the bomb to detonate, ravaging the buildings and vehicles on the street and killing several people, a scene shown in medias res at the start of the film.",
      "question_template": "Gabriel escapes the bank robbery by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Gabriel has one of his men escort a hostage to demonstrate the situation.",
        "- A sniper kills the man, and other agents pull the hostage away from the bank, causing the bomb to detonate, ravaging the buildings and vehicles on the street and killing several people."
      ],
      "predicates": [
        "Delivers(x, y) ::: x delivers y.",
        "Kills(x, y) ::: x kills y.",
        "Kidnaps(x, y) ::: x kidnaps y.",
        "Frames(x, y) ::: x frames y.",
        "ParticipatesIn(x, y) ::: x participates in y.",
        "Storms(x, y) ::: x storms y.",
        "Secures(x, y) ::: x secures y.",
        "FittingWithExplosives(x, y) ::: x is fitted with explosives y.",
        "Surrounds(x, y) ::: x surrounds y.",
        "Takes(x, y) ::: x takes y.",
        "Discusses(x, y) ::: x discusses y.",
        "Demonstrates(x, y) ::: x demonstrates y.",
        "Kills(x, y) ::: x kills y.",
        "Pulls(x, y) ::: x pulls y.",
        "Detonates(x) ::: x detonates.",
        "Causes(x, y) ::: x causes y.",
        "ResultsIn(x, y) ::: x results in y."
      ],
      "premises": [
        "Delivers(stanley, hydra) ::: Stanley delivers the hydra to Gabriel.",
        "Kills(gabriel, melissa) ∧ Kills(gabriel, husband) ::: Gabriel has killed Melissa and her husband.",
        "Kidnaps(gabriel, holly) ::: Gabriel kidnaps Holly.",
        "Frames(gabriel, stanley) ::: Gabriel frames Stanley.",
        "ParticipatesIn(stanley, bank_heist) ::: Stanley participates in the bank heist to get Holly back.",
        "Storms(gabriel, worldbanc) ::: Gabriel storms a Worldbanc branch.",
        "Secures(gabriel, employees) ∧ Secures(gabriel, customers) ::: Gabriel secures the employees and customers as hostages.",
        "FittingWithExplosives(employees, ball_bearing_explosives) ::: Employees and customers are fitted with ball-bearing-based explosives.",
        "Surrounds(police, worldbanc) ∧ Surrounds(FBI, worldbanc) ::: Police and FBI surround the branch.",
        "Takes(gabriel, stanley) ::: Gabriel takes Stanley to the coffee shop.",
        "Discusses(gabriel, dog_day_afternoon) ::: Gabriel discusses the film Dog Day Afternoon.",
        "Demonstrates(gabriel, situation) ::: Gabriel demonstrates the situation with a hostage.",
        "Kills(sniper, man) ::: A sniper kills the man.",
        "Pulls(agents, hostage) ::: Other agents pull the hostage away from the bank.",
        "Detonates(bomb) ::: The bomb detonates.",
        "ResultsIn(detonation, casualties) ∧ ResultsIn(detonation, destruction) ::: The detonation of the bomb results in casualties and destruction.",
        "Conclusion:",
        "Causes(gabriel, kidnapping(holly)) ::: Gabriel's actions lead to the kidnapping of Holly.",
        "Causes(stanley, rescue(holly)) ::: The bank heist is a means for Stanley to attempt to rescue Holly.",
        "ResultsIn(detonation, casualties) ::: The detonation of the bomb results in casualties and destruction."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 152,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 3,
      "paragraph": "Gabriel instructs Stanley to launch the hydra, and turns Holly over to him once completed. However, Stanley's back door triggers before they can leave the bank, and Stanley is recaptured while Holly is rescued. Gabriel threatens to kill Ginger, who he knows is a DEA agent, unless Stanley re-siphons the money back to a Monte Carlo bank. Despite doing so, Gabriel shoots Ginger. Gabriel and his men load the hostages on a bus and demand a plane wait for them at the local airport, but while en route, the bus is lifted off by a S-64 Aircrane and deposited on a roof of a local skyscraper. Gabriel deactivates the bombs and departs with his surviving men on a waiting helicopter, which Stanley shoots down using a rocket-propelled grenade from the bus.",
      "question_template": "Gabriel escapes the bank robbery by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Gabriel instructs Stanley to launch the hydra",
        "Gabriel threatens to kill Ginger",
        "Gabriel and his men load the hostages on a bus",
        "Gabriel deactivates the bombs and departs with his surviving men on a waiting helicopter"
      ],
      "predicates": [
        "Instructs(x, y) ::: x instructs y to perform an action.",
        "TurnsOver(x, y) ::: x turns over y to someone else.",
        "Triggers(x) ::: x triggers an event.",
        "Recaptured(x) ::: x is recaptured.",
        "Rescued(x) ::: x is rescued.",
        "Threatens(x, y) ::: x threatens y with harm.",
        "IsAgent(x, y) ::: x is an agent of organization y.",
        "ReSiphons(x, y) ::: x re-siphons money back to y.",
        "Shoots(x, y) ::: x shoots y.",
        "Loads(x, y) ::: x loads y onto a vehicle.",
        "Demands(x, y) ::: x demands y.",
        "WaitsFor(x, y) ::: x waits for y to arrive.",
        "Lifts(x, y) ::: x lifts y off the ground.",
        "Deposits(x, y) ::: x deposits y in a location.",
        "Deactivates(x) ::: x deactivates a device.",
        "Departs(x) ::: x leaves a location.",
        "ShootsDown(x, y) ::: x shoots down y using a weapon."
      ],
      "premises": [
        "Instructs(gabriel, stanley) ::: Gabriel instructs Stanley to launch the hydra.",
        "TurnsOver(gabriel, holly) ::: Gabriel turns Holly over to Stanley once the hydra is launched.",
        "Triggers(stanley) ::: Stanley's back door triggers before they can leave the bank.",
        "Recaptured(stanley) ::: Stanley is recaptured while Holly is rescued.",
        "Threatens(gabriel, ginger) ::: Gabriel threatens to kill Ginger.",
        "IsAgent(ginger, DEA) ::: Ginger is a DEA agent.",
        "ReSiphons(stanley, monteCarlo) ::: Stanley re-siphons the money back to a Monte Carlo bank.",
        "Shoots(gabriel, ginger) ::: Gabriel shoots Ginger.",
        "Loads(gabriel, hostages) ::: Gabriel and his men load the hostages on a bus.",
        "Demands(gabriel, plane) ::: Gabriel demands a plane wait for them at the local airport.",
        "Lifts(bus, roof) ::: The bus is lifted off by an S-64 Aircrane.",
        "Deposits(aircrane, roof) ::: The bus is deposited on the roof of a local skyscraper.",
        "Deactivates(gabriel) ::: Gabriel deactivates the bombs.",
        "Departs(gabriel) ::: Gabriel departs with his surviving men on a waiting helicopter.",
        "ShootsDown(stanley, helicopter) ::: Stanley shoots down the helicopter using a rocket-propelled grenade from the bus.",
        "Conclusion:",
        "Threatens(gabriel, ginger) → ReSiphons(stanley, monteCarlo) ::: Gabriel will kill Ginger unless Stanley re-siphons the money back to a Monte Carlo bank."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "Deactivates(gabriel) ∧ Departs(gabriel)"
      ]
    },
    {
      "id": 152,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 4,
      "paragraph": "Roberts takes Stanley to verify the corpse they found, believing Gabriel was a Mossad agent while there was no record of a DEA agent named Ginger. Stanley recognizes the corpse as the one he discovered earlier and personally realizes that the whole scenario was misdirection. Gabriel had escaped a different route, and Ginger had been wearing a bulletproof vest and was working with Gabriel. Roberts arranges for Stanley to have full custody of Holly, and the two tour the US together. In Monte Carlo Gabriel and Ginger withdraw the money, and later watch as a yacht at sea explodes. Over the film's credits, a news report describes the destruction of the yacht, carrying a known terrorist, as the third such incident in as many weeks.",
      "question_template": "Gabriel escapes the bank robbery by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Gabriel had escaped a different route",
        "Ginger had been wearing a bulletproof vest and was working with Gabriel"
      ],
      "predicates": [
        "MossadAgent(x) ::: x is a Mossad agent.",
        "DEAAgent(x) ::: x is a DEA agent.",
        "CorpseIdentified(x, y) ::: x recognizes the corpse as y.",
        "Escaped(x) ::: x escaped through a different route.",
        "WearingBulletproofVest(x) ::: x is wearing a bulletproof vest.",
        "WorkingWith(x, y) ::: x is working with y.",
        "FullCustody(x, y) ::: x has full custody of y.",
        "TourTogether(x, y) ::: x and y tour together.",
        "WithdrawMoney(x, y) ::: x and y withdraw money.",
        "Explodes(x) ::: x explodes.",
        "KnownTerrorist(x) ::: x is a known terrorist.",
        "Incident(x) ::: x is an incident."
      ],
      "premises": [
        "MossadAgent(gabriel) ::: Gabriel was a Mossad agent.",
        "¬∃x (DEAAgent(x)) ::: There was no record of a DEA agent named Ginger.",
        "CorpseIdentified(stanley, c) ::: Stanley recognizes the corpse as the one he discovered earlier.",
        "Escaped(gabriel) ::: Gabriel had escaped a different route.",
        "WearingBulletproofVest(ginger) ::: Ginger had been wearing a bulletproof vest.",
        "WorkingWith(ginger, gabriel) ::: Ginger was working with Gabriel.",
        "FullCustody(roberts, holly) ::: Roberts arranges for Stanley to have full custody of Holly.",
        "TourTogether(stanley, b_2) ::: Stanley and Holly tour the US together.",
        "WithdrawMoney(gabriel, ginger) ::: Gabriel and Ginger withdraw the money in Monte Carlo.",
        "Explodes(d) ::: A yacht at sea explodes.",
        "Incident(d) ::: The explosion of the yacht is an incident.",
        "KnownTerrorist(h) ::: The yacht was carrying a known terrorist.",
        "Conclusion:",
        "Gabriel and Ginger were involved in a scheme that led to the destruction of the yacht."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "158": [
    {
      "id": 158,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 2,
      "paragraph": "Stanley delivers the hydra to Gabriel and leaves to see Holly, only to find that Gabriel has killed Melissa and her husband and kidnapped Holly, framing Stanley. Stanley has no choice but to participate with the bank heist to get Holly back. Gabriel and his men storm a Worldbanc branch, and secure its employees and customers as hostages and fitting each with ball-bearing-based explosives similar to Claymore mines. When police and FBI surround the branch, Gabriel takes Stanley to the coffee shop across the street to meet with Roberts, but Gabriel spends the time to discuss the film Dog Day Afternoon and the nature of misdirection. Once back in the bank, Gabriel has one of his men escort a hostage to demonstrate the situation. A sniper kills the man, and other agents pull the hostage away from the bank, causing the bomb to detonate, ravaging the buildings and vehicles on the street and killing several people, a scene shown in medias res at the start of the film.",
      "question_template": "Stanley is presented with the distractions of [[CANDIDATE_ANSWER]] while attempting to crack a secure government server in under 1 minute.",
      "candidate_answers": [
        "- Discuss the film Dog Day Afternoon",
        "- The nature of misdirection"
      ],
      "predicates": [
        "Delivers(x, y) ::: x delivers y.",
        "Kills(x, y) ::: x kills y.",
        "Kidnaps(x, y) ::: x kidnaps y.",
        "Frames(x, y) ::: x frames y.",
        "ParticipatesIn(x, y) ::: x participates in y.",
        "Storms(x, y) ::: x storms y.",
        "Secures(x, y) ::: x secures y.",
        "FittingWithExplosives(x, y) ::: x is fitted with explosives y.",
        "Surrounds(x, y) ::: x surrounds y.",
        "Takes(x, y) ::: x takes y.",
        "Discusses(x, y) ::: x discusses y.",
        "Demonstrates(x, y) ::: x demonstrates y.",
        "Kills(x, y) ::: x kills y.",
        "Pulls(x, y) ::: x pulls y.",
        "Detonates(x) ::: x detonates.",
        "Causes(x, y) ::: x causes y.",
        "ResultsIn(x, y) ::: x results in y."
      ],
      "premises": [
        "Delivers(stanley, hydra) ::: Stanley delivers the hydra to Gabriel.",
        "Kills(gabriel, melissa) ∧ Kills(gabriel, husband) ::: Gabriel has killed Melissa and her husband.",
        "Kidnaps(gabriel, holly) ::: Gabriel kidnaps Holly.",
        "Frames(gabriel, stanley) ::: Gabriel frames Stanley.",
        "ParticipatesIn(stanley, bank_heist) ::: Stanley participates in the bank heist to get Holly back.",
        "Storms(gabriel, worldbanc) ::: Gabriel storms a Worldbanc branch.",
        "Secures(gabriel, employees) ∧ Secures(gabriel, customers) ::: Gabriel secures the employees and customers as hostages.",
        "FittingWithExplosives(employees, ball_bearing_explosives) ::: Employees and customers are fitted with ball-bearing-based explosives.",
        "Surrounds(police, worldbanc) ∧ Surrounds(FBI, worldbanc) ::: Police and FBI surround the branch.",
        "Takes(gabriel, stanley) ::: Gabriel takes Stanley to the coffee shop.",
        "Discusses(gabriel, dog_day_afternoon) ::: Gabriel discusses the film Dog Day Afternoon.",
        "Demonstrates(gabriel, situation) ::: Gabriel demonstrates the situation with a hostage.",
        "Kills(sniper, man) ::: A sniper kills the man.",
        "Pulls(agents, hostage) ::: Other agents pull the hostage away from the bank.",
        "Detonates(bomb) ::: The bomb detonates.",
        "ResultsIn(detonation, casualties) ∧ ResultsIn(detonation, destruction) ::: The detonation of the bomb results in casualties and destruction.",
        "Conclusion:",
        "Causes(gabriel, kidnapping(holly)) ::: Gabriel's actions lead to the kidnapping of Holly.",
        "Causes(stanley, rescue(holly)) ::: The bank heist is a means for Stanley to attempt to rescue Holly.",
        "ResultsIn(detonation, casualties) ::: The detonation of the bomb results in casualties and destruction."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 158,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 3,
      "paragraph": "Gabriel instructs Stanley to launch the hydra, and turns Holly over to him once completed. However, Stanley's back door triggers before they can leave the bank, and Stanley is recaptured while Holly is rescued. Gabriel threatens to kill Ginger, who he knows is a DEA agent, unless Stanley re-siphons the money back to a Monte Carlo bank. Despite doing so, Gabriel shoots Ginger. Gabriel and his men load the hostages on a bus and demand a plane wait for them at the local airport, but while en route, the bus is lifted off by a S-64 Aircrane and deposited on a roof of a local skyscraper. Gabriel deactivates the bombs and departs with his surviving men on a waiting helicopter, which Stanley shoots down using a rocket-propelled grenade from the bus.",
      "question_template": "Stanley is presented with the distractions of [[CANDIDATE_ANSWER]] while attempting to crack a secure government server in under 1 minute.",
      "candidate_answers": [
        "1. Launch the hydra",
        "2. Turn over Holly",
        "3. Threatens to kill Ginger",
        "4. Deactivates the bombs"
      ],
      "predicates": [
        "Instructs(x, y) ::: x instructs y to perform an action.",
        "TurnsOver(x, y) ::: x turns over y to someone else.",
        "Triggers(x) ::: x triggers an event.",
        "Recaptured(x) ::: x is recaptured.",
        "Rescued(x) ::: x is rescued.",
        "Threatens(x, y) ::: x threatens y with harm.",
        "IsAgent(x, y) ::: x is an agent of organization y.",
        "ReSiphons(x, y) ::: x re-siphons money back to y.",
        "Shoots(x, y) ::: x shoots y.",
        "Loads(x, y) ::: x loads y onto a vehicle.",
        "Demands(x, y) ::: x demands y.",
        "WaitsFor(x, y) ::: x waits for y to arrive.",
        "Lifts(x, y) ::: x lifts y off the ground.",
        "Deposits(x, y) ::: x deposits y in a location.",
        "Deactivates(x) ::: x deactivates a device.",
        "Departs(x) ::: x leaves a location.",
        "ShootsDown(x, y) ::: x shoots down y using a weapon."
      ],
      "premises": [
        "Instructs(gabriel, stanley) ::: Gabriel instructs Stanley to launch the hydra.",
        "TurnsOver(gabriel, holly) ::: Gabriel turns Holly over to Stanley once the hydra is launched.",
        "Triggers(stanley) ::: Stanley's back door triggers before they can leave the bank.",
        "Recaptured(stanley) ::: Stanley is recaptured while Holly is rescued.",
        "Threatens(gabriel, ginger) ::: Gabriel threatens to kill Ginger.",
        "IsAgent(ginger, DEA) ::: Ginger is a DEA agent.",
        "ReSiphons(stanley, monteCarlo) ::: Stanley re-siphons the money back to a Monte Carlo bank.",
        "Shoots(gabriel, ginger) ::: Gabriel shoots Ginger.",
        "Loads(gabriel, hostages) ::: Gabriel and his men load the hostages on a bus.",
        "Demands(gabriel, plane) ::: Gabriel demands a plane wait for them at the local airport.",
        "Lifts(bus, roof) ::: The bus is lifted off by an S-64 Aircrane.",
        "Deposits(aircrane, roof) ::: The bus is deposited on the roof of a local skyscraper.",
        "Deactivates(gabriel) ::: Gabriel deactivates the bombs.",
        "Departs(gabriel) ::: Gabriel departs with his surviving men on a waiting helicopter.",
        "ShootsDown(stanley, helicopter) ::: Stanley shoots down the helicopter using a rocket-propelled grenade from the bus.",
        "Conclusion:",
        "Threatens(gabriel, ginger) → ReSiphons(stanley, monteCarlo) ::: Gabriel will kill Ginger unless Stanley re-siphons the money back to a Monte Carlo bank."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 158,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 4,
      "paragraph": "Roberts takes Stanley to verify the corpse they found, believing Gabriel was a Mossad agent while there was no record of a DEA agent named Ginger. Stanley recognizes the corpse as the one he discovered earlier and personally realizes that the whole scenario was misdirection. Gabriel had escaped a different route, and Ginger had been wearing a bulletproof vest and was working with Gabriel. Roberts arranges for Stanley to have full custody of Holly, and the two tour the US together. In Monte Carlo Gabriel and Ginger withdraw the money, and later watch as a yacht at sea explodes. Over the film's credits, a news report describes the destruction of the yacht, carrying a known terrorist, as the third such incident in as many weeks.",
      "question_template": "Stanley is presented with the distractions of [[CANDIDATE_ANSWER]] while attempting to crack a secure government server in under 1 minute.",
      "candidate_answers": [
        "- A corpse they found",
        "- Misdirection",
        "- Wearing a bulletproof vest",
        "- Working with Gabriel",
        "- Full custody of Holly",
        "- Tour the US together",
        "- Withdraw the money",
        "- Watch as a yacht at sea explodes",
        "- A news report describes the destruction of the yacht"
      ],
      "predicates": [
        "MossadAgent(x) ::: x is a Mossad agent.",
        "DEAAgent(x) ::: x is a DEA agent.",
        "CorpseIdentified(x, y) ::: x recognizes the corpse as y.",
        "Escaped(x) ::: x escaped through a different route.",
        "WearingBulletproofVest(x) ::: x is wearing a bulletproof vest.",
        "WorkingWith(x, y) ::: x is working with y.",
        "FullCustody(x, y) ::: x has full custody of y.",
        "TourTogether(x, y) ::: x and y tour together.",
        "WithdrawMoney(x, y) ::: x and y withdraw money.",
        "Explodes(x) ::: x explodes.",
        "KnownTerrorist(x) ::: x is a known terrorist.",
        "Incident(x) ::: x is an incident."
      ],
      "premises": [
        "MossadAgent(gabriel) ::: Gabriel was a Mossad agent.",
        "¬∃x (DEAAgent(x)) ::: There was no record of a DEA agent named Ginger.",
        "CorpseIdentified(stanley, c) ::: Stanley recognizes the corpse as the one he discovered earlier.",
        "Escaped(gabriel) ::: Gabriel had escaped a different route.",
        "WearingBulletproofVest(ginger) ::: Ginger had been wearing a bulletproof vest.",
        "WorkingWith(ginger, gabriel) ::: Ginger was working with Gabriel.",
        "FullCustody(roberts, holly) ::: Roberts arranges for Stanley to have full custody of Holly.",
        "TourTogether(stanley, b_2) ::: Stanley and Holly tour the US together.",
        "WithdrawMoney(gabriel, ginger) ::: Gabriel and Ginger withdraw the money in Monte Carlo.",
        "Explodes(d) ::: A yacht at sea explodes.",
        "Incident(d) ::: The explosion of the yacht is an incident.",
        "KnownTerrorist(h) ::: The yacht was carrying a known terrorist.",
        "Conclusion:",
        "Gabriel and Ginger were involved in a scheme that led to the destruction of the yacht."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "160": [
    {
      "id": 160,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 1,
      "paragraph": "Stanley begins work, learning that Gabriel leads Black Cell, a secret group created by J. Edgar Hoover to launch retaliatory attacks against terrorists that threaten the United States. He also privately discovers Ginger is a DEA agent working undercover, and further is surprised to discover a corpse that looks like Gabriel. He goes to see Holly home from school but finds he is being followed by FBI agent J.T. Roberts (Don Cheadle), who had previously caught Stanley. Roberts, though monitoring Stanley closely, is more interested in Gabriel as he does not appear on any government database, and after learning that another hacker, Axl Torvalds (Rudolf Martin), had been killed by Gabriel's men, warns Stanley to be cautious. Stanley opts to secretly code a back door in his hydra that reverses the money transfer after a short period. Meanwhile, Senator Reisman (Sam Shepard), who oversees Black Cell, learns the FBI has started tracking Gabriel and orders him to stand down. Gabriel refuses, and narrowly avoids an assassination attempt ordered by Reisman. Gabriel personally kills Reisman in revenge and continues his plan.",
      "question_template": "Stanley neutralizes the hydra program that he delivers to Gabriel by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Stanley opts to secretly code a back door in his hydra that reverses the money transfer after a short period."
      ],
      "predicates": [
        "Leads(x, y) ::: x leads group y.",
        "LaunchesAttacks(x, y) ::: x launches retaliatory attacks against y.",
        "Monitors(x, y) ::: x monitors y closely.",
        "MoreInterestedIn(x, y) ::: x is more interested in y than in others.",
        "Orders(x, y) ::: x orders y to take a specific action.",
        "Refuses(x, y) ::: x refuses to comply with y's orders.",
        "Kills(x, y) ::: x kills y.",
        "Threatens(x, y) ::: x threatens y."
      ],
      "premises": [
        "Leads(gabriel, blackCell) ∧ LaunchesAttacks(gabriel, knownTerrorists) ∧ Threatens(knownTerrorists, US) ::: Gabriel leads Black Cell to launch retaliatory attacks against terrorists that threaten the United States.",
        "Monitors(roberts, stanley) ∧ MoreInterestedIn(roberts, gabriel) ::: J.T. Roberts monitors Stanley closely while being more interested in Gabriel.",
        "Orders(reisman, standDown(gabriel)) ::: Senator Reisman oversees Black Cell and orders Gabriel to stand down.",
        "Refuses(gabriel, standDown(reisman)) ∧ Kills(gabriel, reisman) ::: Gabriel refuses Reisman's order to stand down and kills Reisman in revenge."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 160,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 2,
      "paragraph": "Stanley delivers the hydra to Gabriel and leaves to see Holly, only to find that Gabriel has killed Melissa and her husband and kidnapped Holly, framing Stanley. Stanley has no choice but to participate with the bank heist to get Holly back. Gabriel and his men storm a Worldbanc branch, and secure its employees and customers as hostages and fitting each with ball-bearing-based explosives similar to Claymore mines. When police and FBI surround the branch, Gabriel takes Stanley to the coffee shop across the street to meet with Roberts, but Gabriel spends the time to discuss the film Dog Day Afternoon and the nature of misdirection. Once back in the bank, Gabriel has one of his men escort a hostage to demonstrate the situation. A sniper kills the man, and other agents pull the hostage away from the bank, causing the bomb to detonate, ravaging the buildings and vehicles on the street and killing several people, a scene shown in medias res at the start of the film.",
      "question_template": "Stanley neutralizes the hydra program that he delivers to Gabriel by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Stanley delivers the hydra to Gabriel",
        "Gabriel has killed Melissa and her husband and kidnapped Holly",
        "Stanley has no choice but to participate with the bank heist to get Holly back",
        "Gabriel and his men storm a Worldbanc branch",
        "Gabriel takes Stanley to the coffee shop across the street to meet with Roberts",
        "Gabriel spends the time to discuss the film Dog Day Afternoon and the nature of misdirection",
        "A sniper kills the man, and other agents pull the hostage away from the bank, causing the bomb to detonate, ravaging the buildings and vehicles on the street and killing several people"
      ],
      "predicates": [
        "Delivers(x, y) ::: x delivers y.",
        "Kills(x, y) ::: x kills y.",
        "Kidnaps(x, y) ::: x kidnaps y.",
        "Frames(x, y) ::: x frames y.",
        "ParticipatesIn(x, y) ::: x participates in y.",
        "Storms(x, y) ::: x storms y.",
        "Secures(x, y) ::: x secures y.",
        "FittingWithExplosives(x, y) ::: x is fitted with explosives y.",
        "Surrounds(x, y) ::: x surrounds y.",
        "Takes(x, y) ::: x takes y.",
        "Discusses(x, y) ::: x discusses y.",
        "Demonstrates(x, y) ::: x demonstrates y.",
        "Kills(x, y) ::: x kills y.",
        "Pulls(x, y) ::: x pulls y.",
        "Detonates(x) ::: x detonates.",
        "Causes(x, y) ::: x causes y.",
        "ResultsIn(x, y) ::: x results in y."
      ],
      "premises": [
        "Delivers(stanley, hydra) ::: Stanley delivers the hydra to Gabriel.",
        "Kills(gabriel, melissa) ∧ Kills(gabriel, husband) ::: Gabriel has killed Melissa and her husband.",
        "Kidnaps(gabriel, holly) ::: Gabriel kidnaps Holly.",
        "Frames(gabriel, stanley) ::: Gabriel frames Stanley.",
        "ParticipatesIn(stanley, bank_heist) ::: Stanley participates in the bank heist to get Holly back.",
        "Storms(gabriel, worldbanc) ::: Gabriel storms a Worldbanc branch.",
        "Secures(gabriel, employees) ∧ Secures(gabriel, customers) ::: Gabriel secures the employees and customers as hostages.",
        "FittingWithExplosives(employees, ball_bearing_explosives) ::: Employees and customers are fitted with ball-bearing-based explosives.",
        "Surrounds(police, worldbanc) ∧ Surrounds(FBI, worldbanc) ::: Police and FBI surround the branch.",
        "Takes(gabriel, stanley) ::: Gabriel takes Stanley to the coffee shop.",
        "Discusses(gabriel, dog_day_afternoon) ::: Gabriel discusses the film Dog Day Afternoon.",
        "Demonstrates(gabriel, situation) ::: Gabriel demonstrates the situation with a hostage.",
        "Kills(sniper, man) ::: A sniper kills the man.",
        "Pulls(agents, hostage) ::: Other agents pull the hostage away from the bank.",
        "Detonates(bomb) ::: The bomb detonates.",
        "ResultsIn(detonation, casualties) ∧ ResultsIn(detonation, destruction) ::: The detonation of the bomb results in casualties and destruction.",
        "Conclusion:",
        "Causes(gabriel, kidnapping(holly)) ::: Gabriel's actions lead to the kidnapping of Holly.",
        "Causes(stanley, rescue(holly)) ::: The bank heist is a means for Stanley to attempt to rescue Holly.",
        "ResultsIn(detonation, casualties) ::: The detonation of the bomb results in casualties and destruction."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 160,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 3,
      "paragraph": "Gabriel instructs Stanley to launch the hydra, and turns Holly over to him once completed. However, Stanley's back door triggers before they can leave the bank, and Stanley is recaptured while Holly is rescued. Gabriel threatens to kill Ginger, who he knows is a DEA agent, unless Stanley re-siphons the money back to a Monte Carlo bank. Despite doing so, Gabriel shoots Ginger. Gabriel and his men load the hostages on a bus and demand a plane wait for them at the local airport, but while en route, the bus is lifted off by a S-64 Aircrane and deposited on a roof of a local skyscraper. Gabriel deactivates the bombs and departs with his surviving men on a waiting helicopter, which Stanley shoots down using a rocket-propelled grenade from the bus.",
      "question_template": "Stanley neutralizes the hydra program that he delivers to Gabriel by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Launch the hydra",
        "- Stanley is recaptured while Holly is rescued",
        "- Gabriel threatens to kill Ginger",
        "- Stanley re-siphons the money back to a Monte Carlo bank",
        "- Gabriel shoots Ginger",
        "- Gabriel and his men load the hostages on a bus",
        "- The bus is lifted off by a S-64 Aircrane",
        "- Gabriel deactivates the bombs",
        "- Stanley shoots down the helicopter using a rocket-propelled grenade"
      ],
      "predicates": [
        "Instructs(x, y) ::: x instructs y to perform an action.",
        "TurnsOver(x, y) ::: x turns over y to someone else.",
        "Triggers(x) ::: x triggers an event.",
        "Recaptured(x) ::: x is recaptured.",
        "Rescued(x) ::: x is rescued.",
        "Threatens(x, y) ::: x threatens y with harm.",
        "IsAgent(x, y) ::: x is an agent of organization y.",
        "ReSiphons(x, y) ::: x re-siphons money back to y.",
        "Shoots(x, y) ::: x shoots y.",
        "Loads(x, y) ::: x loads y onto a vehicle.",
        "Demands(x, y) ::: x demands y.",
        "WaitsFor(x, y) ::: x waits for y to arrive.",
        "Lifts(x, y) ::: x lifts y off the ground.",
        "Deposits(x, y) ::: x deposits y in a location.",
        "Deactivates(x) ::: x deactivates a device.",
        "Departs(x) ::: x leaves a location.",
        "ShootsDown(x, y) ::: x shoots down y using a weapon."
      ],
      "premises": [
        "Instructs(gabriel, stanley) ::: Gabriel instructs Stanley to launch the hydra.",
        "TurnsOver(gabriel, holly) ::: Gabriel turns Holly over to Stanley once the hydra is launched.",
        "Triggers(stanley) ::: Stanley's back door triggers before they can leave the bank.",
        "Recaptured(stanley) ::: Stanley is recaptured while Holly is rescued.",
        "Threatens(gabriel, ginger) ::: Gabriel threatens to kill Ginger.",
        "IsAgent(ginger, DEA) ::: Ginger is a DEA agent.",
        "ReSiphons(stanley, monteCarlo) ::: Stanley re-siphons the money back to a Monte Carlo bank.",
        "Shoots(gabriel, ginger) ::: Gabriel shoots Ginger.",
        "Loads(gabriel, hostages) ::: Gabriel and his men load the hostages on a bus.",
        "Demands(gabriel, plane) ::: Gabriel demands a plane wait for them at the local airport.",
        "Lifts(bus, roof) ::: The bus is lifted off by an S-64 Aircrane.",
        "Deposits(aircrane, roof) ::: The bus is deposited on the roof of a local skyscraper.",
        "Deactivates(gabriel) ::: Gabriel deactivates the bombs.",
        "Departs(gabriel) ::: Gabriel departs with his surviving men on a waiting helicopter.",
        "ShootsDown(stanley, helicopter) ::: Stanley shoots down the helicopter using a rocket-propelled grenade from the bus.",
        "Conclusion:",
        "Threatens(gabriel, ginger) → ReSiphons(stanley, monteCarlo) ::: Gabriel will kill Ginger unless Stanley re-siphons the money back to a Monte Carlo bank."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 160,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 4,
      "paragraph": "Roberts takes Stanley to verify the corpse they found, believing Gabriel was a Mossad agent while there was no record of a DEA agent named Ginger. Stanley recognizes the corpse as the one he discovered earlier and personally realizes that the whole scenario was misdirection. Gabriel had escaped a different route, and Ginger had been wearing a bulletproof vest and was working with Gabriel. Roberts arranges for Stanley to have full custody of Holly, and the two tour the US together. In Monte Carlo Gabriel and Ginger withdraw the money, and later watch as a yacht at sea explodes. Over the film's credits, a news report describes the destruction of the yacht, carrying a known terrorist, as the third such incident in as many weeks.",
      "question_template": "Stanley neutralizes the hydra program that he delivers to Gabriel by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- The whole scenario was misdirection.",
        "- Gabriel had escaped a different route.",
        "- Ginger had been wearing a bulletproof vest and was working with Gabriel.",
        "- Roberts arranges for Stanley to have full custody of Holly.",
        "- The two tour the US together.",
        "- In Monte Carlo Gabriel and Ginger withdraw the money.",
        "- A yacht at sea explodes.",
        "- A news report describes the destruction of the yacht, carrying a known terrorist, as the third such incident in as many weeks."
      ],
      "predicates": [
        "MossadAgent(x) ::: x is a Mossad agent.",
        "DEAAgent(x) ::: x is a DEA agent.",
        "CorpseIdentified(x, y) ::: x recognizes the corpse as y.",
        "Escaped(x) ::: x escaped through a different route.",
        "WearingBulletproofVest(x) ::: x is wearing a bulletproof vest.",
        "WorkingWith(x, y) ::: x is working with y.",
        "FullCustody(x, y) ::: x has full custody of y.",
        "TourTogether(x, y) ::: x and y tour together.",
        "WithdrawMoney(x, y) ::: x and y withdraw money.",
        "Explodes(x) ::: x explodes.",
        "KnownTerrorist(x) ::: x is a known terrorist.",
        "Incident(x) ::: x is an incident."
      ],
      "premises": [
        "MossadAgent(gabriel) ::: Gabriel was a Mossad agent.",
        "¬∃x (DEAAgent(x)) ::: There was no record of a DEA agent named Ginger.",
        "CorpseIdentified(stanley, c) ::: Stanley recognizes the corpse as the one he discovered earlier.",
        "Escaped(gabriel) ::: Gabriel had escaped a different route.",
        "WearingBulletproofVest(ginger) ::: Ginger had been wearing a bulletproof vest.",
        "WorkingWith(ginger, gabriel) ::: Ginger was working with Gabriel.",
        "FullCustody(roberts, holly) ::: Roberts arranges for Stanley to have full custody of Holly.",
        "TourTogether(stanley, b_2) ::: Stanley and Holly tour the US together.",
        "WithdrawMoney(gabriel, ginger) ::: Gabriel and Ginger withdraw the money in Monte Carlo.",
        "Explodes(d) ::: A yacht at sea explodes.",
        "Incident(d) ::: The explosion of the yacht is an incident.",
        "KnownTerrorist(h) ::: The yacht was carrying a known terrorist.",
        "Conclusion:",
        "Gabriel and Ginger were involved in a scheme that led to the destruction of the yacht."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "161": [
    {
      "id": 161,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 0,
      "paragraph": " Stanley Jobson (Hugh Jackman) is a hacker. Having served time for infecting the FBI's Carnivore program with a computer virus, he is now on parole but forbidden from touching computers. His alcoholic ex-wife Melissa (Drea de Matteo), who married a rich porn producer and is currently a part-time porn actress has sole custody over their daughter Holly, and a restraining order preventing him from visiting the latter. One day, he is solicited by Ginger Knowles (Halle Berry), speaking for her boss Gabriel Shear (John Travolta), for his hacking skills. He goes to meet Gabriel in Los Angeles, where he is put on the spot to crack a secure government server within a minute while simultaneously held at gunpoint and receiving fellatio. Successful, Gabriel offers Stanley $10Â million to program multi-headed worm, a \"hydra\", to siphon $9.5Â billion from several government slush funds.",
      "question_template": "Gabriel does [[CANDIDATE_ANSWER]] to cause Stanley trouble after Stanley delivers the hydra.",
      "candidate_answers": [
        "- He puts Stanley on the spot to crack a secure government server within a minute while simultaneously held at gunpoint.",
        "- Gabriel offers Stanley $10 million to program multi-headed worm, a \"hydra\", to siphon $9.5 billion from several government slush funds."
      ],
      "predicates": [
        "Hacker(x) ::: x is a hacker.",
        "OnParole(x) ::: x is on parole.",
        "ForbiddenToTouchComputers(x) ::: x is forbidden from touching computers.",
        "Alcoholic(x) ::: x is an alcoholic.",
        "ExWife(x, y) ::: x is the ex-wife of y.",
        "HasCustody(x, y) ::: x has custody over y.",
        "RestrainingOrder(x, y) ::: x has a restraining order preventing y from visiting.",
        "SolicitedBy(x, y) ::: x is solicited by y.",
        "CrackServer(x, y) ::: x cracks a secure government server for y.",
        "Offered(x, y) ::: x is offered y by someone.",
        "Program(x, y) ::: x programs y.",
        "SiphonFunds(x, y) ::: x siphons y from several government slush funds."
      ],
      "premises": [
        "Hacker(Stanley) ∧ OnParole(Stanley) ∧ ForbiddenToTouchComputers(Stanley) ::: Stanley Jobson is a hacker, on parole, and forbidden from touching computers.",
        "Alcoholic(Melissa) ∧ ExWife(Melissa, Stanley) ∧ HasCustody(Melissa, Holly) ∧ RestrainingOrder(Melissa, Stanley) ::: Melissa is an alcoholic, the ex-wife of Stanley, has custody over their daughter Holly, and has a restraining order preventing Stanley from visiting Holly.",
        "SolicitedBy(Stanley, Gabriel) ::: Gabriel Shear solicits Stanley Jobson for hacking skills.",
        "CrackServer(Stanley, Gabriel) ::: Stanley cracks a secure government server for Gabriel while held at gunpoint.",
        "Offered(Stanley, 10Million) ::: Gabriel offers Stanley $10 million.",
        "Program(Stanley, Hydra) ::: Stanley programs a multi-headed worm, a \"hydra\".",
        "SiphonFunds(Stanley, 9.5Billion) ::: Stanley siphons $9.5 billion from several government slush funds.",
        "Conclusion:",
        "Hacker(Stanley) ∧ OnParole(Stanley) ∧ ForbiddenToTouchComputers(Stanley) ∧ SolicitedBy(Stanley, Gabriel) ∧ CrackServer(Stanley, Gabriel) ∧ Offered(Stanley, 10Million) ∧ Program(Stanley, Hydra) ∧ SiphonFunds(Stanley, 9.5Billion) ::: Stanley Jobson is a hacker who is on parole, forbidden from touching computers, solicited by Gabriel for his hacking skills, cracks a secure government server, is offered $10 million, programs a \"hydra\", and siphons $9.5 billion from government slush funds."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "162": [
    {
      "id": 162,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 0,
      "paragraph": " Stanley Jobson (Hugh Jackman) is a hacker. Having served time for infecting the FBI's Carnivore program with a computer virus, he is now on parole but forbidden from touching computers. His alcoholic ex-wife Melissa (Drea de Matteo), who married a rich porn producer and is currently a part-time porn actress has sole custody over their daughter Holly, and a restraining order preventing him from visiting the latter. One day, he is solicited by Ginger Knowles (Halle Berry), speaking for her boss Gabriel Shear (John Travolta), for his hacking skills. He goes to meet Gabriel in Los Angeles, where he is put on the spot to crack a secure government server within a minute while simultaneously held at gunpoint and receiving fellatio. Successful, Gabriel offers Stanley $10Â million to program multi-headed worm, a \"hydra\", to siphon $9.5Â billion from several government slush funds.",
      "question_template": "Stanley agrees to help Gabriel in the Worldbanc heist after being double-crossed by him because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- He is solicited by Ginger Knowles for his hacking skills.",
        "- Gabriel offers Stanley $10 million to program a multi-headed worm, a \"hydra\", to siphon $9.5 billion from several government slush funds."
      ],
      "predicates": [
        "Hacker(x) ::: x is a hacker.",
        "OnParole(x) ::: x is on parole.",
        "ForbiddenToTouchComputers(x) ::: x is forbidden from touching computers.",
        "Alcoholic(x) ::: x is an alcoholic.",
        "ExWife(x, y) ::: x is the ex-wife of y.",
        "HasCustody(x, y) ::: x has custody over y.",
        "RestrainingOrder(x, y) ::: x has a restraining order preventing y from visiting.",
        "SolicitedBy(x, y) ::: x is solicited by y.",
        "CrackServer(x, y) ::: x cracks a secure government server for y.",
        "Offered(x, y) ::: x is offered y by someone.",
        "Program(x, y) ::: x programs y.",
        "SiphonFunds(x, y) ::: x siphons y from several government slush funds."
      ],
      "premises": [
        "Hacker(Stanley) ∧ OnParole(Stanley) ∧ ForbiddenToTouchComputers(Stanley) ::: Stanley Jobson is a hacker, on parole, and forbidden from touching computers.",
        "Alcoholic(Melissa) ∧ ExWife(Melissa, Stanley) ∧ HasCustody(Melissa, Holly) ∧ RestrainingOrder(Melissa, Stanley) ::: Melissa is an alcoholic, the ex-wife of Stanley, has custody over their daughter Holly, and has a restraining order preventing Stanley from visiting Holly.",
        "SolicitedBy(Stanley, Gabriel) ::: Gabriel Shear solicits Stanley Jobson for hacking skills.",
        "CrackServer(Stanley, Gabriel) ::: Stanley cracks a secure government server for Gabriel while held at gunpoint.",
        "Offered(Stanley, 10Million) ::: Gabriel offers Stanley $10 million.",
        "Program(Stanley, Hydra) ::: Stanley programs a multi-headed worm, a \"hydra\".",
        "SiphonFunds(Stanley, 9.5Billion) ::: Stanley siphons $9.5 billion from several government slush funds.",
        "Conclusion:",
        "Hacker(Stanley) ∧ OnParole(Stanley) ∧ ForbiddenToTouchComputers(Stanley) ∧ SolicitedBy(Stanley, Gabriel) ∧ CrackServer(Stanley, Gabriel) ∧ Offered(Stanley, 10Million) ∧ Program(Stanley, Hydra) ∧ SiphonFunds(Stanley, 9.5Billion) ::: Stanley Jobson is a hacker who is on parole, forbidden from touching computers, solicited by Gabriel for his hacking skills, cracks a secure government server, is offered $10 million, programs a \"hydra\", and siphons $9.5 billion from government slush funds."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 162,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 1,
      "paragraph": "Stanley begins work, learning that Gabriel leads Black Cell, a secret group created by J. Edgar Hoover to launch retaliatory attacks against terrorists that threaten the United States. He also privately discovers Ginger is a DEA agent working undercover, and further is surprised to discover a corpse that looks like Gabriel. He goes to see Holly home from school but finds he is being followed by FBI agent J.T. Roberts (Don Cheadle), who had previously caught Stanley. Roberts, though monitoring Stanley closely, is more interested in Gabriel as he does not appear on any government database, and after learning that another hacker, Axl Torvalds (Rudolf Martin), had been killed by Gabriel's men, warns Stanley to be cautious. Stanley opts to secretly code a back door in his hydra that reverses the money transfer after a short period. Meanwhile, Senator Reisman (Sam Shepard), who oversees Black Cell, learns the FBI has started tracking Gabriel and orders him to stand down. Gabriel refuses, and narrowly avoids an assassination attempt ordered by Reisman. Gabriel personally kills Reisman in revenge and continues his plan.",
      "question_template": "Stanley agrees to help Gabriel in the Worldbanc heist after being double-crossed by him because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Stanley begins work, learning that Gabriel leads Black Cell",
        "- He also privately discovers Ginger is a DEA agent working undercover",
        "- He goes to see Holly home from school but finds he is being followed by FBI agent J.T. Roberts",
        "- Roberts, though monitoring Stanley closely, is more interested in Gabriel",
        "- Stanley opts to secretly code a back door in his hydra that reverses the money transfer after a short period",
        "- Senator Reisman learns the FBI has started tracking Gabriel and orders him to stand down",
        "- Gabriel refuses, and narrowly avoids an assassination attempt ordered by Reisman",
        "- Gabriel personally kills Reisman in revenge and continues his plan"
      ],
      "predicates": [
        "Leads(x, y) ::: x leads group y.",
        "LaunchesAttacks(x, y) ::: x launches retaliatory attacks against y.",
        "Monitors(x, y) ::: x monitors y closely.",
        "MoreInterestedIn(x, y) ::: x is more interested in y than in others.",
        "Orders(x, y) ::: x orders y to take a specific action.",
        "Refuses(x, y) ::: x refuses to comply with y's orders.",
        "Kills(x, y) ::: x kills y.",
        "Threatens(x, y) ::: x threatens y."
      ],
      "premises": [
        "Leads(gabriel, blackCell) ∧ LaunchesAttacks(gabriel, knownTerrorists) ∧ Threatens(knownTerrorists, US) ::: Gabriel leads Black Cell to launch retaliatory attacks against terrorists that threaten the United States.",
        "Monitors(roberts, stanley) ∧ MoreInterestedIn(roberts, gabriel) ::: J.T. Roberts monitors Stanley closely while being more interested in Gabriel.",
        "Orders(reisman, standDown(gabriel)) ::: Senator Reisman oversees Black Cell and orders Gabriel to stand down.",
        "Refuses(gabriel, standDown(reisman)) ∧ Kills(gabriel, reisman) ::: Gabriel refuses Reisman's order to stand down and kills Reisman in revenge."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 162,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 3,
      "paragraph": "Gabriel instructs Stanley to launch the hydra, and turns Holly over to him once completed. However, Stanley's back door triggers before they can leave the bank, and Stanley is recaptured while Holly is rescued. Gabriel threatens to kill Ginger, who he knows is a DEA agent, unless Stanley re-siphons the money back to a Monte Carlo bank. Despite doing so, Gabriel shoots Ginger. Gabriel and his men load the hostages on a bus and demand a plane wait for them at the local airport, but while en route, the bus is lifted off by a S-64 Aircrane and deposited on a roof of a local skyscraper. Gabriel deactivates the bombs and departs with his surviving men on a waiting helicopter, which Stanley shoots down using a rocket-propelled grenade from the bus.",
      "question_template": "Stanley agrees to help Gabriel in the Worldbanc heist after being double-crossed by him because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Gabriel threatens to kill Ginger, who he knows is a DEA agent, unless Stanley re-siphons the money back to a Monte Carlo bank.",
        "- Despite doing so, Gabriel shoots Ginger."
      ],
      "predicates": [
        "Instructs(x, y) ::: x instructs y to perform an action.",
        "TurnsOver(x, y) ::: x turns over y to someone else.",
        "Triggers(x) ::: x triggers an event.",
        "Recaptured(x) ::: x is recaptured.",
        "Rescued(x) ::: x is rescued.",
        "Threatens(x, y) ::: x threatens y with harm.",
        "IsAgent(x, y) ::: x is an agent of organization y.",
        "ReSiphons(x, y) ::: x re-siphons money back to y.",
        "Shoots(x, y) ::: x shoots y.",
        "Loads(x, y) ::: x loads y onto a vehicle.",
        "Demands(x, y) ::: x demands y.",
        "WaitsFor(x, y) ::: x waits for y to arrive.",
        "Lifts(x, y) ::: x lifts y off the ground.",
        "Deposits(x, y) ::: x deposits y in a location.",
        "Deactivates(x) ::: x deactivates a device.",
        "Departs(x) ::: x leaves a location.",
        "ShootsDown(x, y) ::: x shoots down y using a weapon."
      ],
      "premises": [
        "Instructs(gabriel, stanley) ::: Gabriel instructs Stanley to launch the hydra.",
        "TurnsOver(gabriel, holly) ::: Gabriel turns Holly over to Stanley once the hydra is launched.",
        "Triggers(stanley) ::: Stanley's back door triggers before they can leave the bank.",
        "Recaptured(stanley) ::: Stanley is recaptured while Holly is rescued.",
        "Threatens(gabriel, ginger) ::: Gabriel threatens to kill Ginger.",
        "IsAgent(ginger, DEA) ::: Ginger is a DEA agent.",
        "ReSiphons(stanley, monteCarlo) ::: Stanley re-siphons the money back to a Monte Carlo bank.",
        "Shoots(gabriel, ginger) ::: Gabriel shoots Ginger.",
        "Loads(gabriel, hostages) ::: Gabriel and his men load the hostages on a bus.",
        "Demands(gabriel, plane) ::: Gabriel demands a plane wait for them at the local airport.",
        "Lifts(bus, roof) ::: The bus is lifted off by an S-64 Aircrane.",
        "Deposits(aircrane, roof) ::: The bus is deposited on the roof of a local skyscraper.",
        "Deactivates(gabriel) ::: Gabriel deactivates the bombs.",
        "Departs(gabriel) ::: Gabriel departs with his surviving men on a waiting helicopter.",
        "ShootsDown(stanley, helicopter) ::: Stanley shoots down the helicopter using a rocket-propelled grenade from the bus.",
        "Conclusion:",
        "Threatens(gabriel, ginger) → ReSiphons(stanley, monteCarlo) ::: Gabriel will kill Ginger unless Stanley re-siphons the money back to a Monte Carlo bank."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "163": [
    {
      "id": 163,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 0,
      "paragraph": " Stanley Jobson (Hugh Jackman) is a hacker. Having served time for infecting the FBI's Carnivore program with a computer virus, he is now on parole but forbidden from touching computers. His alcoholic ex-wife Melissa (Drea de Matteo), who married a rich porn producer and is currently a part-time porn actress has sole custody over their daughter Holly, and a restraining order preventing him from visiting the latter. One day, he is solicited by Ginger Knowles (Halle Berry), speaking for her boss Gabriel Shear (John Travolta), for his hacking skills. He goes to meet Gabriel in Los Angeles, where he is put on the spot to crack a secure government server within a minute while simultaneously held at gunpoint and receiving fellatio. Successful, Gabriel offers Stanley $10Â million to program multi-headed worm, a \"hydra\", to siphon $9.5Â billion from several government slush funds.",
      "question_template": "Gabriel uses [[CANDIDATE_ANSWER]] to get Stanley to reverse the backdoor and regain control of the stolen money.",
      "candidate_answers": [
        "- He is put on the spot to crack a secure government server within a minute while simultaneously held at gunpoint and receiving fellatio.",
        "- Gabriel offers Stanley $10 million to program a multi-headed worm, a \"hydra\", to siphon $9.5 billion from several government slush funds."
      ],
      "predicates": [
        "Hacker(x) ::: x is a hacker.",
        "OnParole(x) ::: x is on parole.",
        "ForbiddenToTouchComputers(x) ::: x is forbidden from touching computers.",
        "Alcoholic(x) ::: x is an alcoholic.",
        "ExWife(x, y) ::: x is the ex-wife of y.",
        "HasCustody(x, y) ::: x has custody over y.",
        "RestrainingOrder(x, y) ::: x has a restraining order preventing y from visiting.",
        "SolicitedBy(x, y) ::: x is solicited by y.",
        "CrackServer(x, y) ::: x cracks a secure government server for y.",
        "Offered(x, y) ::: x is offered y by someone.",
        "Program(x, y) ::: x programs y.",
        "SiphonFunds(x, y) ::: x siphons y from several government slush funds."
      ],
      "premises": [
        "Hacker(Stanley) ∧ OnParole(Stanley) ∧ ForbiddenToTouchComputers(Stanley) ::: Stanley Jobson is a hacker, on parole, and forbidden from touching computers.",
        "Alcoholic(Melissa) ∧ ExWife(Melissa, Stanley) ∧ HasCustody(Melissa, Holly) ∧ RestrainingOrder(Melissa, Stanley) ::: Melissa is an alcoholic, the ex-wife of Stanley, has custody over their daughter Holly, and has a restraining order preventing Stanley from visiting Holly.",
        "SolicitedBy(Stanley, Gabriel) ::: Gabriel Shear solicits Stanley Jobson for hacking skills.",
        "CrackServer(Stanley, Gabriel) ::: Stanley cracks a secure government server for Gabriel while held at gunpoint.",
        "Offered(Stanley, 10Million) ::: Gabriel offers Stanley $10 million.",
        "Program(Stanley, Hydra) ::: Stanley programs a multi-headed worm, a \"hydra\".",
        "SiphonFunds(Stanley, 9.5Billion) ::: Stanley siphons $9.5 billion from several government slush funds.",
        "Conclusion:",
        "Hacker(Stanley) ∧ OnParole(Stanley) ∧ ForbiddenToTouchComputers(Stanley) ∧ SolicitedBy(Stanley, Gabriel) ∧ CrackServer(Stanley, Gabriel) ∧ Offered(Stanley, 10Million) ∧ Program(Stanley, Hydra) ∧ SiphonFunds(Stanley, 9.5Billion) ::: Stanley Jobson is a hacker who is on parole, forbidden from touching computers, solicited by Gabriel for his hacking skills, cracks a secure government server, is offered $10 million, programs a \"hydra\", and siphons $9.5 billion from government slush funds."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 163,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 1,
      "paragraph": "Stanley begins work, learning that Gabriel leads Black Cell, a secret group created by J. Edgar Hoover to launch retaliatory attacks against terrorists that threaten the United States. He also privately discovers Ginger is a DEA agent working undercover, and further is surprised to discover a corpse that looks like Gabriel. He goes to see Holly home from school but finds he is being followed by FBI agent J.T. Roberts (Don Cheadle), who had previously caught Stanley. Roberts, though monitoring Stanley closely, is more interested in Gabriel as he does not appear on any government database, and after learning that another hacker, Axl Torvalds (Rudolf Martin), had been killed by Gabriel's men, warns Stanley to be cautious. Stanley opts to secretly code a back door in his hydra that reverses the money transfer after a short period. Meanwhile, Senator Reisman (Sam Shepard), who oversees Black Cell, learns the FBI has started tracking Gabriel and orders him to stand down. Gabriel refuses, and narrowly avoids an assassination attempt ordered by Reisman. Gabriel personally kills Reisman in revenge and continues his plan.",
      "question_template": "Gabriel uses [[CANDIDATE_ANSWER]] to get Stanley to reverse the backdoor and regain control of the stolen money.",
      "candidate_answers": [
        "- Gabriel leads Black Cell, a secret group created by J. Edgar Hoover to launch retaliatory attacks against terrorists that threaten the United States.",
        "- Stanley opts to secretly code a back door in his hydra that reverses the money transfer after a short period.",
        "- Gabriel refuses, and narrowly avoids an assassination attempt ordered by Reisman.",
        "- Gabriel personally kills Reisman in revenge and continues his plan."
      ],
      "predicates": [
        "Leads(x, y) ::: x leads group y.",
        "LaunchesAttacks(x, y) ::: x launches retaliatory attacks against y.",
        "Monitors(x, y) ::: x monitors y closely.",
        "MoreInterestedIn(x, y) ::: x is more interested in y than in others.",
        "Orders(x, y) ::: x orders y to take a specific action.",
        "Refuses(x, y) ::: x refuses to comply with y's orders.",
        "Kills(x, y) ::: x kills y.",
        "Threatens(x, y) ::: x threatens y."
      ],
      "premises": [
        "Leads(gabriel, blackCell) ∧ LaunchesAttacks(gabriel, knownTerrorists) ∧ Threatens(knownTerrorists, US) ::: Gabriel leads Black Cell to launch retaliatory attacks against terrorists that threaten the United States.",
        "Monitors(roberts, stanley) ∧ MoreInterestedIn(roberts, gabriel) ::: J.T. Roberts monitors Stanley closely while being more interested in Gabriel.",
        "Orders(reisman, standDown(gabriel)) ::: Senator Reisman oversees Black Cell and orders Gabriel to stand down.",
        "Refuses(gabriel, standDown(reisman)) ∧ Kills(gabriel, reisman) ::: Gabriel refuses Reisman's order to stand down and kills Reisman in revenge."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 163,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 2,
      "paragraph": "Stanley delivers the hydra to Gabriel and leaves to see Holly, only to find that Gabriel has killed Melissa and her husband and kidnapped Holly, framing Stanley. Stanley has no choice but to participate with the bank heist to get Holly back. Gabriel and his men storm a Worldbanc branch, and secure its employees and customers as hostages and fitting each with ball-bearing-based explosives similar to Claymore mines. When police and FBI surround the branch, Gabriel takes Stanley to the coffee shop across the street to meet with Roberts, but Gabriel spends the time to discuss the film Dog Day Afternoon and the nature of misdirection. Once back in the bank, Gabriel has one of his men escort a hostage to demonstrate the situation. A sniper kills the man, and other agents pull the hostage away from the bank, causing the bomb to detonate, ravaging the buildings and vehicles on the street and killing several people, a scene shown in medias res at the start of the film.",
      "question_template": "Gabriel uses [[CANDIDATE_ANSWER]] to get Stanley to reverse the backdoor and regain control of the stolen money.",
      "candidate_answers": [
        "- Gabriel has one of his men escort a hostage to demonstrate the situation.",
        "- Gabriel spends the time to discuss the film Dog Day Afternoon and the nature of misdirection."
      ],
      "predicates": [
        "Delivers(x, y) ::: x delivers y.",
        "Kills(x, y) ::: x kills y.",
        "Kidnaps(x, y) ::: x kidnaps y.",
        "Frames(x, y) ::: x frames y.",
        "ParticipatesIn(x, y) ::: x participates in y.",
        "Storms(x, y) ::: x storms y.",
        "Secures(x, y) ::: x secures y.",
        "FittingWithExplosives(x, y) ::: x is fitted with explosives y.",
        "Surrounds(x, y) ::: x surrounds y.",
        "Takes(x, y) ::: x takes y.",
        "Discusses(x, y) ::: x discusses y.",
        "Demonstrates(x, y) ::: x demonstrates y.",
        "Kills(x, y) ::: x kills y.",
        "Pulls(x, y) ::: x pulls y.",
        "Detonates(x) ::: x detonates.",
        "Causes(x, y) ::: x causes y.",
        "ResultsIn(x, y) ::: x results in y."
      ],
      "premises": [
        "Delivers(stanley, hydra) ::: Stanley delivers the hydra to Gabriel.",
        "Kills(gabriel, melissa) ∧ Kills(gabriel, husband) ::: Gabriel has killed Melissa and her husband.",
        "Kidnaps(gabriel, holly) ::: Gabriel kidnaps Holly.",
        "Frames(gabriel, stanley) ::: Gabriel frames Stanley.",
        "ParticipatesIn(stanley, bank_heist) ::: Stanley participates in the bank heist to get Holly back.",
        "Storms(gabriel, worldbanc) ::: Gabriel storms a Worldbanc branch.",
        "Secures(gabriel, employees) ∧ Secures(gabriel, customers) ::: Gabriel secures the employees and customers as hostages.",
        "FittingWithExplosives(employees, ball_bearing_explosives) ::: Employees and customers are fitted with ball-bearing-based explosives.",
        "Surrounds(police, worldbanc) ∧ Surrounds(FBI, worldbanc) ::: Police and FBI surround the branch.",
        "Takes(gabriel, stanley) ::: Gabriel takes Stanley to the coffee shop.",
        "Discusses(gabriel, dog_day_afternoon) ::: Gabriel discusses the film Dog Day Afternoon.",
        "Demonstrates(gabriel, situation) ::: Gabriel demonstrates the situation with a hostage.",
        "Kills(sniper, man) ::: A sniper kills the man.",
        "Pulls(agents, hostage) ::: Other agents pull the hostage away from the bank.",
        "Detonates(bomb) ::: The bomb detonates.",
        "ResultsIn(detonation, casualties) ∧ ResultsIn(detonation, destruction) ::: The detonation of the bomb results in casualties and destruction.",
        "Conclusion:",
        "Causes(gabriel, kidnapping(holly)) ::: Gabriel's actions lead to the kidnapping of Holly.",
        "Causes(stanley, rescue(holly)) ::: The bank heist is a means for Stanley to attempt to rescue Holly.",
        "ResultsIn(detonation, casualties) ::: The detonation of the bomb results in casualties and destruction."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 163,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 4,
      "paragraph": "Roberts takes Stanley to verify the corpse they found, believing Gabriel was a Mossad agent while there was no record of a DEA agent named Ginger. Stanley recognizes the corpse as the one he discovered earlier and personally realizes that the whole scenario was misdirection. Gabriel had escaped a different route, and Ginger had been wearing a bulletproof vest and was working with Gabriel. Roberts arranges for Stanley to have full custody of Holly, and the two tour the US together. In Monte Carlo Gabriel and Ginger withdraw the money, and later watch as a yacht at sea explodes. Over the film's credits, a news report describes the destruction of the yacht, carrying a known terrorist, as the third such incident in as many weeks.",
      "question_template": "Gabriel uses [[CANDIDATE_ANSWER]] to get Stanley to reverse the backdoor and regain control of the stolen money.",
      "candidate_answers": [
        "- Gabriel had escaped a different route",
        "- Ginger had been wearing a bulletproof vest and was working with Gabriel",
        "- The whole scenario was misdirection"
      ],
      "predicates": [
        "MossadAgent(x) ::: x is a Mossad agent.",
        "DEAAgent(x) ::: x is a DEA agent.",
        "CorpseIdentified(x, y) ::: x recognizes the corpse as y.",
        "Escaped(x) ::: x escaped through a different route.",
        "WearingBulletproofVest(x) ::: x is wearing a bulletproof vest.",
        "WorkingWith(x, y) ::: x is working with y.",
        "FullCustody(x, y) ::: x has full custody of y.",
        "TourTogether(x, y) ::: x and y tour together.",
        "WithdrawMoney(x, y) ::: x and y withdraw money.",
        "Explodes(x) ::: x explodes.",
        "KnownTerrorist(x) ::: x is a known terrorist.",
        "Incident(x) ::: x is an incident."
      ],
      "premises": [
        "MossadAgent(gabriel) ::: Gabriel was a Mossad agent.",
        "¬∃x (DEAAgent(x)) ::: There was no record of a DEA agent named Ginger.",
        "CorpseIdentified(stanley, c) ::: Stanley recognizes the corpse as the one he discovered earlier.",
        "Escaped(gabriel) ::: Gabriel had escaped a different route.",
        "WearingBulletproofVest(ginger) ::: Ginger had been wearing a bulletproof vest.",
        "WorkingWith(ginger, gabriel) ::: Ginger was working with Gabriel.",
        "FullCustody(roberts, holly) ::: Roberts arranges for Stanley to have full custody of Holly.",
        "TourTogether(stanley, b_2) ::: Stanley and Holly tour the US together.",
        "WithdrawMoney(gabriel, ginger) ::: Gabriel and Ginger withdraw the money in Monte Carlo.",
        "Explodes(d) ::: A yacht at sea explodes.",
        "Incident(d) ::: The explosion of the yacht is an incident.",
        "KnownTerrorist(h) ::: The yacht was carrying a known terrorist.",
        "Conclusion:",
        "Gabriel and Ginger were involved in a scheme that led to the destruction of the yacht."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "164": [
    {
      "id": 164,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 0,
      "paragraph": " Stanley Jobson (Hugh Jackman) is a hacker. Having served time for infecting the FBI's Carnivore program with a computer virus, he is now on parole but forbidden from touching computers. His alcoholic ex-wife Melissa (Drea de Matteo), who married a rich porn producer and is currently a part-time porn actress has sole custody over their daughter Holly, and a restraining order preventing him from visiting the latter. One day, he is solicited by Ginger Knowles (Halle Berry), speaking for her boss Gabriel Shear (John Travolta), for his hacking skills. He goes to meet Gabriel in Los Angeles, where he is put on the spot to crack a secure government server within a minute while simultaneously held at gunpoint and receiving fellatio. Successful, Gabriel offers Stanley $10Â million to program multi-headed worm, a \"hydra\", to siphon $9.5Â billion from several government slush funds.",
      "question_template": "Stanley knows that Gabriel is most likely not dead after shooting down Gabriel's helicopter with a rocket-propelled grenade because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- He is solicited by Ginger Knowles for his hacking skills.",
        "- He goes to meet Gabriel in Los Angeles.",
        "- Gabriel offers Stanley $10 million to program multi-headed worm, a \"hydra\"."
      ],
      "predicates": [
        "Hacker(x) ::: x is a hacker.",
        "OnParole(x) ::: x is on parole.",
        "ForbiddenToTouchComputers(x) ::: x is forbidden from touching computers.",
        "Alcoholic(x) ::: x is an alcoholic.",
        "ExWife(x, y) ::: x is the ex-wife of y.",
        "HasCustody(x, y) ::: x has custody over y.",
        "RestrainingOrder(x, y) ::: x has a restraining order preventing y from visiting.",
        "SolicitedBy(x, y) ::: x is solicited by y.",
        "CrackServer(x, y) ::: x cracks a secure government server for y.",
        "Offered(x, y) ::: x is offered y by someone.",
        "Program(x, y) ::: x programs y.",
        "SiphonFunds(x, y) ::: x siphons y from several government slush funds."
      ],
      "premises": [
        "Hacker(Stanley) ∧ OnParole(Stanley) ∧ ForbiddenToTouchComputers(Stanley) ::: Stanley Jobson is a hacker, on parole, and forbidden from touching computers.",
        "Alcoholic(Melissa) ∧ ExWife(Melissa, Stanley) ∧ HasCustody(Melissa, Holly) ∧ RestrainingOrder(Melissa, Stanley) ::: Melissa is an alcoholic, the ex-wife of Stanley, has custody over their daughter Holly, and has a restraining order preventing Stanley from visiting Holly.",
        "SolicitedBy(Stanley, Gabriel) ::: Gabriel Shear solicits Stanley Jobson for hacking skills.",
        "CrackServer(Stanley, Gabriel) ::: Stanley cracks a secure government server for Gabriel while held at gunpoint.",
        "Offered(Stanley, 10Million) ::: Gabriel offers Stanley $10 million.",
        "Program(Stanley, Hydra) ::: Stanley programs a multi-headed worm, a \"hydra\".",
        "SiphonFunds(Stanley, 9.5Billion) ::: Stanley siphons $9.5 billion from several government slush funds.",
        "Conclusion:",
        "Hacker(Stanley) ∧ OnParole(Stanley) ∧ ForbiddenToTouchComputers(Stanley) ∧ SolicitedBy(Stanley, Gabriel) ∧ CrackServer(Stanley, Gabriel) ∧ Offered(Stanley, 10Million) ∧ Program(Stanley, Hydra) ∧ SiphonFunds(Stanley, 9.5Billion) ::: Stanley Jobson is a hacker who is on parole, forbidden from touching computers, solicited by Gabriel for his hacking skills, cracks a secure government server, is offered $10 million, programs a \"hydra\", and siphons $9.5 billion from government slush funds."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 164,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 1,
      "paragraph": "Stanley begins work, learning that Gabriel leads Black Cell, a secret group created by J. Edgar Hoover to launch retaliatory attacks against terrorists that threaten the United States. He also privately discovers Ginger is a DEA agent working undercover, and further is surprised to discover a corpse that looks like Gabriel. He goes to see Holly home from school but finds he is being followed by FBI agent J.T. Roberts (Don Cheadle), who had previously caught Stanley. Roberts, though monitoring Stanley closely, is more interested in Gabriel as he does not appear on any government database, and after learning that another hacker, Axl Torvalds (Rudolf Martin), had been killed by Gabriel's men, warns Stanley to be cautious. Stanley opts to secretly code a back door in his hydra that reverses the money transfer after a short period. Meanwhile, Senator Reisman (Sam Shepard), who oversees Black Cell, learns the FBI has started tracking Gabriel and orders him to stand down. Gabriel refuses, and narrowly avoids an assassination attempt ordered by Reisman. Gabriel personally kills Reisman in revenge and continues his plan.",
      "question_template": "Stanley knows that Gabriel is most likely not dead after shooting down Gabriel's helicopter with a rocket-propelled grenade because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- He discovers a corpse that looks like Gabriel.",
        "- Gabriel does not appear on any government database.",
        "- Gabriel narrowly avoids an assassination attempt ordered by Reisman."
      ],
      "predicates": [
        "Leads(x, y) ::: x leads group y.",
        "LaunchesAttacks(x, y) ::: x launches retaliatory attacks against y.",
        "Monitors(x, y) ::: x monitors y closely.",
        "MoreInterestedIn(x, y) ::: x is more interested in y than in others.",
        "Orders(x, y) ::: x orders y to take a specific action.",
        "Refuses(x, y) ::: x refuses to comply with y's orders.",
        "Kills(x, y) ::: x kills y.",
        "Threatens(x, y) ::: x threatens y."
      ],
      "premises": [
        "Leads(gabriel, blackCell) ∧ LaunchesAttacks(gabriel, knownTerrorists) ∧ Threatens(knownTerrorists, US) ::: Gabriel leads Black Cell to launch retaliatory attacks against terrorists that threaten the United States.",
        "Monitors(roberts, stanley) ∧ MoreInterestedIn(roberts, gabriel) ::: J.T. Roberts monitors Stanley closely while being more interested in Gabriel.",
        "Orders(reisman, standDown(gabriel)) ::: Senator Reisman oversees Black Cell and orders Gabriel to stand down.",
        "Refuses(gabriel, standDown(reisman)) ∧ Kills(gabriel, reisman) ::: Gabriel refuses Reisman's order to stand down and kills Reisman in revenge."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "165": [
    {
      "id": 165,
      "context_id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 3,
      "paragraph": "Gabriel instructs Stanley to launch the hydra, and turns Holly over to him once completed. However, Stanley's back door triggers before they can leave the bank, and Stanley is recaptured while Holly is rescued. Gabriel threatens to kill Ginger, who he knows is a DEA agent, unless Stanley re-siphons the money back to a Monte Carlo bank. Despite doing so, Gabriel shoots Ginger. Gabriel and his men load the hostages on a bus and demand a plane wait for them at the local airport, but while en route, the bus is lifted off by a S-64 Aircrane and deposited on a roof of a local skyscraper. Gabriel deactivates the bombs and departs with his surviving men on a waiting helicopter, which Stanley shoots down using a rocket-propelled grenade from the bus.",
      "question_template": "The end of the story implies that [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Gabriel threatens to kill Ginger",
        "Gabriel shoots Ginger",
        "Gabriel and his men load the hostages on a bus",
        "Gabriel deactivates the bombs and departs with his surviving men on a waiting helicopter",
        "Stanley shoots down the helicopter using a rocket-propelled grenade from the bus"
      ],
      "predicates": [
        "Instructs(x, y) ::: x instructs y to perform an action.",
        "TurnsOver(x, y) ::: x turns over y to someone else.",
        "Triggers(x) ::: x triggers an event.",
        "Recaptured(x) ::: x is recaptured.",
        "Rescued(x) ::: x is rescued.",
        "Threatens(x, y) ::: x threatens y with harm.",
        "IsAgent(x, y) ::: x is an agent of organization y.",
        "ReSiphons(x, y) ::: x re-siphons money back to y.",
        "Shoots(x, y) ::: x shoots y.",
        "Loads(x, y) ::: x loads y onto a vehicle.",
        "Demands(x, y) ::: x demands y.",
        "WaitsFor(x, y) ::: x waits for y to arrive.",
        "Lifts(x, y) ::: x lifts y off the ground.",
        "Deposits(x, y) ::: x deposits y in a location.",
        "Deactivates(x) ::: x deactivates a device.",
        "Departs(x) ::: x leaves a location.",
        "ShootsDown(x, y) ::: x shoots down y using a weapon."
      ],
      "premises": [
        "Instructs(gabriel, stanley) ::: Gabriel instructs Stanley to launch the hydra.",
        "TurnsOver(gabriel, holly) ::: Gabriel turns Holly over to Stanley once the hydra is launched.",
        "Triggers(stanley) ::: Stanley's back door triggers before they can leave the bank.",
        "Recaptured(stanley) ::: Stanley is recaptured while Holly is rescued.",
        "Threatens(gabriel, ginger) ::: Gabriel threatens to kill Ginger.",
        "IsAgent(ginger, DEA) ::: Ginger is a DEA agent.",
        "ReSiphons(stanley, monteCarlo) ::: Stanley re-siphons the money back to a Monte Carlo bank.",
        "Shoots(gabriel, ginger) ::: Gabriel shoots Ginger.",
        "Loads(gabriel, hostages) ::: Gabriel and his men load the hostages on a bus.",
        "Demands(gabriel, plane) ::: Gabriel demands a plane wait for them at the local airport.",
        "Lifts(bus, roof) ::: The bus is lifted off by an S-64 Aircrane.",
        "Deposits(aircrane, roof) ::: The bus is deposited on the roof of a local skyscraper.",
        "Deactivates(gabriel) ::: Gabriel deactivates the bombs.",
        "Departs(gabriel) ::: Gabriel departs with his surviving men on a waiting helicopter.",
        "ShootsDown(stanley, helicopter) ::: Stanley shoots down the helicopter using a rocket-propelled grenade from the bus.",
        "Conclusion:",
        "Threatens(gabriel, ginger) → ReSiphons(stanley, monteCarlo) ::: Gabriel will kill Ginger unless Stanley re-siphons the money back to a Monte Carlo bank."
      ],
      "conclusions": [
        "None",
        "None",
        "Loads(gabriel, hostages)",
        "Deactivates(gabriel) ∧ Departs(gabriel)",
        "None"
      ]
    }
  ],
  "166": [
    {
      "id": 166,
      "context_id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 1,
      "paragraph": "Years later, Carl still lives in the house, stubbornly holding out as the surrounding neighborhood is torn down for new construction, but when he accidentally injures a construction worker over damage to his mailbox, a court orders him to move to a retirement home. However, Carl comes up with a scheme to keep his promise to Ellie, and turns his house into a makeshift airship, using thousands of helium balloons. Russell, a young Wilderness Explorer, becomes an accidental stowaway in his effort to earn his final merit badge for assisting the elderly. After surviving a thunderstorm, the flying house lands on a tepui opposite Paradise Falls. Carl and Russell harness themselves to the still-buoyant house and begin to walk it across the mesa, hoping to reach the falls before the balloons deflate. Russell encounters a tall, colorful flightless bird, whom he names \"Kevin\". They then meet a Golden Retriever named Dug, who wears a special collar that allows him to speak, and who vows to take the bird to his master.",
      "question_template": "Carl gives Russell [[CANDIDATE_ANSWER]] as his final badge.",
      "candidate_answers": [
        "Russell's final merit badge for assisting the elderly"
      ],
      "predicates": [
        "LivesIn(x, y) ::: x lives in y.",
        "Injures(x, y) ::: x injures y.",
        "CourtOrders(x, y) ::: x is ordered by the court to do y.",
        "TurnsInto(x, y) ::: x turns into y.",
        "AccidentalStowaway(x, y) ::: x is an accidental stowaway in y's effort.",
        "Survives(x, y) ::: x survives y.",
        "Lands(x, y) ::: x lands in y.",
        "Harnesses(x, y) ::: x harnesses y.",
        "Walks(x, y) ::: x walks y.",
        "Encounters(x, y) ::: x encounters y.",
        "Names(x, y) ::: x names y.",
        "Vows(x, y) ::: x vows to do y."
      ],
      "premises": [
        "LivesIn(carl, house) ::: Carl still lives in the house.",
        "Injures(carl, construction_worker) ::: Carl accidentally injures a construction worker.",
        "CourtOrders(court, move_to_retirement_home) ::: A court orders Carl to move to a retirement home.",
        "TurnsInto(carl, makeshift_airship) ::: Carl turns his house into a makeshift airship.",
        "AccidentalStowaway(russell, carl) ::: Russell becomes an accidental stowaway in Carl's effort.",
        "Survives(russell, thunderstorm) ::: Russell survives a thunderstorm.",
        "Lands(carl_airship, tepui) ::: The flying house lands on a tepui opposite Paradise Falls.",
        "Harnesses(carl, house) ::: Carl harnesses himself to the still-buoyant house.",
        "Walks(carl, mesa) ::: Carl walks the house across the mesa.",
        "Encounters(russell, kevin) ::: Russell encounters a tall, colorful flightless bird, whom he names \"Kevin\".",
        "Names(russell, kevin) ::: Russell names the bird \"Kevin\".",
        "Vows(dug, take_kevin_to_master) ::: Dug vows to take Kevin to his master.",
        "Aims(carl, reach_paradise_falls) ::: Carl aims to reach Paradise Falls before the balloons deflate.",
        "Aims(russell, reach_paradise_falls) ::: Russell aims to reach Paradise Falls before the balloons deflate."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "167": [
    {
      "id": 167,
      "context_id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 0,
      "paragraph": " In 1940, Carl Fredricksen is a young 9-year-old boy who idolizes famous explorer Charles Muntz. Muntz has been accused of fabricating the skeleton of a giant exotic bird he says he discovered at Paradise Falls, and vows to return there to catch one alive. One day, Carl befriends a girl named Ellie, who is also a fan of Muntz. She confides to Carl her desire to move her \"clubhouse\"âan abandoned house in the neighborhoodâto a cliff overlooking Paradise Falls. Carl and Ellie eventually get married and live together in the restored house. Carl sells toy balloons from a cart at a zoo Ellie opens. After suffering a miscarriage and being told they cannot have a child, the two decide to realize their dream of visiting Paradise Falls. They try to save for the trip, but repeatedly end up spending the money on more pressing needs. Finally, an elderly Carl arranges for the trip, but Ellie suddenly becomes ill and dies.",
      "question_template": "Carl has a job at the zoo as [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Sells toy balloons from a cart at a zoo"
      ],
      "predicates": [
        "Young(x) ::: x is a young boy.",
        "Idolizes(x, y) ::: x idolizes y.",
        "Accused(x, y) ::: x is accused of y.",
        "WantsTo(x, y) ::: x wants to do y.",
        "Married(x, y) ::: x is married to y.",
        "LivesIn(x, y) ::: x lives in y.",
        "Sells(x, y) ::: x sells y.",
        "Opens(x, y) ::: x opens y.",
        "Suffers(x, y) ::: x suffers from y.",
        "Decides(x, y) ::: x decides to do y.",
        "Spends(x, y) ::: x spends y.",
        "ArrangesFor(x, y) ::: x arranges for y.",
        "BecomesIll(x) ::: x becomes ill.",
        "Dies(x) ::: x dies."
      ],
      "premises": [
        "Young(carl) ::: Carl Fredricksen is a young 9-year-old boy.",
        "Idolizes(carl, charlesMuntz) ::: Carl idolizes famous explorer Charles Muntz.",
        "Accused(charlesMuntz, fabricatingSkeleton) ::: Muntz has been accused of fabricating the skeleton of a giant exotic bird.",
        "WantsTo(ellie, move(clubhouse, cliff)) ::: Ellie confides to Carl her desire to move her \"clubhouse\" to a cliff overlooking Paradise Falls.",
        "Married(carl, ellie) ::: Carl and Ellie are married.",
        "LivesIn(carl, restoredHouse) ::: Carl and Ellie live together in the restored house.",
        "Sells(carl, toyBalloons) ::: Carl sells toy balloons from a cart at a zoo Ellie opens.",
        "Suffers(carl, miscarriage) ::: Carl and Ellie suffer a miscarriage.",
        "Decides(carl, visitParadiseFalls) ::: They decide to realize their dream of visiting Paradise Falls.",
        "Spends(carl, money) ::: They try to save for the trip but repeatedly end up spending the money on more pressing needs.",
        "ArrangesFor(carl, trip) ::: Carl arranges for the trip.",
        "BecomesIll(ellie) ::: Ellie suddenly becomes ill.",
        "Dies(ellie) ::: Ellie dies.",
        "Conclusion:",
        "¬(∃x (Child(x) ∧ (Parent(carl, x) ∧ Parent(ellie, x)))) ::: Carl Fredricksen and Ellie are unable to have a child after suffering a miscarriage."
      ],
      "conclusions": [
        "Sells(carl, toyBalloons)"
      ]
    }
  ],
  "169": [
    {
      "id": 169,
      "context_id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 3,
      "paragraph": "Settling into his home, Carl looks through Ellie's childhood scrapbook, and is surprised to find that she has filled in the blank pages with photos of their marriage, along with a note thanking him for the \"adventure\" and encouraging him to go have a new one. Reinvigorated, he goes to find Russell, only to see him sailing off with some balloons to save Kevin on his own. Carl empties the house of furniture and possessions, lightening it, and pursues him. Russell is captured by Muntz, but Carl manages to board the dirigible in flight and free both him and Kevin. Dug accidentally defeats Alpha and becomes the dogs' new leader. Muntz pursues them around the airship, finally cornering Dug, Kevin, and Russell inside Carl's tethered house. Carl lures Kevin back onto the airship with Dug and Russell clinging to her back, but when Muntz leaps after them, he snags his foot on some balloon lines and falls to his death. The house then descends out of sight through the clouds.",
      "question_template": "[[CANDIDATE_ANSWER]] is Alpha.",
      "candidate_answers": [
        "Muntz's dog",
        "Dug accidentally defeats Alpha and becomes the dogs' new leader"
      ],
      "predicates": [
        "Home(x) ::: x is a home.",
        "Scrapbook(x) ::: x is a scrapbook.",
        "Filled(x, y) ::: x is filled with y.",
        "Thank(x, y) ::: x thanks y.",
        "Adventure(x) ::: x is an adventure.",
        "Lighten(x) ::: x is lightened of possessions.",
        "Pursue(x, y) ::: x pursues y.",
        "Captured(x, y) ::: x is captured by y.",
        "Board(x, y) ::: x boards y.",
        "Free(x, y) ::: x frees y.",
        "AccidentallyDefeat(x, y) ::: x accidentally defeats y.",
        "Leader(x, y) ::: x becomes the leader of y.",
        "Pursue(x, y) ::: x pursues y.",
        "Corner(x, y, z) ::: x corners y and z.",
        "Lure(x, y) ::: x lures y.",
        "Fall(x) ::: x falls.",
        "Death(x) ::: x meets death."
      ],
      "premises": [
        "Home(carlHome) ∧ Scrapbook(ellieScrapbook) ∧ Filled(ellieScrapbook, photosOfMarriage) ∧ Thank(ellie, carl) ∧ Adventure(adventureNote) ::: Carl looks through Ellie's childhood scrapbook and finds it filled with photos of their marriage and a note thanking him for the adventure.",
        "Lighten(carlHome) ∧ Pursue(carl, russell) ::: Carl empties the house of furniture and possessions, lightening it, and pursues Russell.",
        "Captured(russell, muntz) ∧ Board(carl, dirigible) ∧ Free(carl, russell) ∧ Free(carl, kevin) ::: Russell is captured by Muntz, but Carl manages to board the dirigible in flight and free both him and Kevin.",
        "AccidentallyDefeat(dug, alpha) ∧ Leader(dug, dogs) ::: Dug accidentally defeats Alpha and becomes the new leader of the dogs.",
        "Pursue(muntz, carl) ∧ Fall(muntz) ∧ Death(muntz) ::: Muntz pursues them around the airship, but ends with his death after falling from the airship.",
        "Lure(carl, kevin) ∧ Corner(muntz, dug, russell) ::: Carl lures Kevin back onto the airship while Muntz corners Dug, Kevin, and Russell inside Carl's tethered house.",
        "Conclusion:",
        "Pursue(carl, russell) ::: Carl pursues Russell after being reinvigorated.",
        "Free(carl, russell) ∧ Free(carl, kevin) ::: Carl frees both Russell and Kevin."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "171": [
    {
      "id": 171,
      "context_id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 1,
      "paragraph": "Years later, Carl still lives in the house, stubbornly holding out as the surrounding neighborhood is torn down for new construction, but when he accidentally injures a construction worker over damage to his mailbox, a court orders him to move to a retirement home. However, Carl comes up with a scheme to keep his promise to Ellie, and turns his house into a makeshift airship, using thousands of helium balloons. Russell, a young Wilderness Explorer, becomes an accidental stowaway in his effort to earn his final merit badge for assisting the elderly. After surviving a thunderstorm, the flying house lands on a tepui opposite Paradise Falls. Carl and Russell harness themselves to the still-buoyant house and begin to walk it across the mesa, hoping to reach the falls before the balloons deflate. Russell encounters a tall, colorful flightless bird, whom he names \"Kevin\". They then meet a Golden Retriever named Dug, who wears a special collar that allows him to speak, and who vows to take the bird to his master.",
      "question_template": "Carl [[CANDIDATE_ANSWER]] when Muntz sets his house on fire and captures Kevin.",
      "candidate_answers": [
        "- Carl comes up with a scheme to keep his promise to Ellie",
        "- Carl turns his house into a makeshift airship",
        "- Carl and Russell harness themselves to the still-buoyant house and begin to walk it across the mesa"
      ],
      "predicates": [
        "LivesIn(x, y) ::: x lives in y.",
        "Injures(x, y) ::: x injures y.",
        "CourtOrders(x, y) ::: x is ordered by the court to do y.",
        "TurnsInto(x, y) ::: x turns into y.",
        "AccidentalStowaway(x, y) ::: x is an accidental stowaway in y's effort.",
        "Survives(x, y) ::: x survives y.",
        "Lands(x, y) ::: x lands in y.",
        "Harnesses(x, y) ::: x harnesses y.",
        "Walks(x, y) ::: x walks y.",
        "Encounters(x, y) ::: x encounters y.",
        "Names(x, y) ::: x names y.",
        "Vows(x, y) ::: x vows to do y."
      ],
      "premises": [
        "LivesIn(carl, house) ::: Carl still lives in the house.",
        "Injures(carl, construction_worker) ::: Carl accidentally injures a construction worker.",
        "CourtOrders(court, move_to_retirement_home) ::: A court orders Carl to move to a retirement home.",
        "TurnsInto(carl, makeshift_airship) ::: Carl turns his house into a makeshift airship.",
        "AccidentalStowaway(russell, carl) ::: Russell becomes an accidental stowaway in Carl's effort.",
        "Survives(russell, thunderstorm) ::: Russell survives a thunderstorm.",
        "Lands(carl_airship, tepui) ::: The flying house lands on a tepui opposite Paradise Falls.",
        "Harnesses(carl, house) ::: Carl harnesses himself to the still-buoyant house.",
        "Walks(carl, mesa) ::: Carl walks the house across the mesa.",
        "Encounters(russell, kevin) ::: Russell encounters a tall, colorful flightless bird, whom he names \"Kevin\".",
        "Names(russell, kevin) ::: Russell names the bird \"Kevin\".",
        "Vows(dug, take_kevin_to_master) ::: Dug vows to take Kevin to his master.",
        "Aims(carl, reach_paradise_falls) ::: Carl aims to reach Paradise Falls before the balloons deflate.",
        "Aims(russell, reach_paradise_falls) ::: Russell aims to reach Paradise Falls before the balloons deflate."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 171,
      "context_id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 2,
      "paragraph": "The group is set upon by a pack of aggressive dogs led by Alpha, a doberman (who is also seeking the bird), and are taken to their master, who turns out to be an elderly Charles Muntz. Muntz invites Carl and Russell aboard his dirigible, where he explains that he has spent years since his disgrace searching for the giant bird. When Russell notes the bird's similarity to Kevin, Muntz becomes hostile, believing they have been attempting to steal the bird. The pair flees with Kevin and Dug, but Muntz catches up with them, captures Kevin and starts a fire beneath Carl's house, forcing him to choose between saving it or Kevin. Carl rushes to put out the fire, allowing Muntz to take the bird. He and Russell eventually reach the falls, though Russell is disappointed in Carl over his decision to abandon Kevin.",
      "question_template": "Carl [[CANDIDATE_ANSWER]] when Muntz sets his house on fire and captures Kevin.",
      "candidate_answers": [
        "- Carl rushes to put out the fire",
        "- Allowing Muntz to take the bird"
      ],
      "predicates": [
        "Hostile(x) ::: x is hostile.",
        "Seeking(x, y) ::: x is seeking y.",
        "Captured(x, y) ::: x captures y.",
        "Invites(x, y) ::: x invites y aboard y.",
        "Explains(x, y) ::: x explains y.",
        "Flees(x, y) ::: x flees with y.",
        "CatchesUp(x, y) ::: x catches up with y.",
        "StartsFire(x, y) ::: x starts a fire beneath y.",
        "Chooses(x, y, z) ::: x chooses between y and z.",
        "Disappointed(x, y) ::: x is disappointed in y."
      ],
      "premises": [
        "Hostile(muntz) ∧ Believes(muntz, Stealing(carl, russell, bird)) ::: Charles Muntz becomes hostile when he believes Carl and Russell are attempting to steal the bird.",
        "Forced(carl, Choose(carl, house, kevin)) ::: Carl is forced to choose between saving his house or Kevin.",
        "Seeking(muntz, bird) ::: Muntz is seeking the bird.",
        "Captured(muntz, kevin) ::: Muntz captures Kevin.",
        "Invites(muntz, dirigible) ::: Muntz invites Carl and Russell aboard his dirigible.",
        "Explains(muntz, searchingForGiantBird) ::: Muntz explains that he has spent years searching for the giant bird.",
        "Flees(carl, russell) ::: Carl flees with Russell.",
        "CatchesUp(muntz, carl) ::: Muntz catches up with Carl.",
        "StartsFire(muntz, house) ::: Muntz starts a fire beneath Carl's house.",
        "Chooses(carl, house, kevin) ::: Carl chooses between saving his house or Kevin.",
        "Disappointed(russell, carl) ::: Russell is disappointed in Carl over his decision to abandon Kevin."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "172": [
    {
      "id": 172,
      "context_id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 0,
      "paragraph": " In 1940, Carl Fredricksen is a young 9-year-old boy who idolizes famous explorer Charles Muntz. Muntz has been accused of fabricating the skeleton of a giant exotic bird he says he discovered at Paradise Falls, and vows to return there to catch one alive. One day, Carl befriends a girl named Ellie, who is also a fan of Muntz. She confides to Carl her desire to move her \"clubhouse\"âan abandoned house in the neighborhoodâto a cliff overlooking Paradise Falls. Carl and Ellie eventually get married and live together in the restored house. Carl sells toy balloons from a cart at a zoo Ellie opens. After suffering a miscarriage and being told they cannot have a child, the two decide to realize their dream of visiting Paradise Falls. They try to save for the trip, but repeatedly end up spending the money on more pressing needs. Finally, an elderly Carl arranges for the trip, but Ellie suddenly becomes ill and dies.",
      "question_template": "Carl's house lands at [[CANDIDATE_ANSWER]] at the end of the story.",
      "candidate_answers": [
        "Carl's house lands at a cliff overlooking Paradise Falls"
      ],
      "predicates": [
        "Young(x) ::: x is a young boy.",
        "Idolizes(x, y) ::: x idolizes y.",
        "Accused(x, y) ::: x is accused of y.",
        "WantsTo(x, y) ::: x wants to do y.",
        "Married(x, y) ::: x is married to y.",
        "LivesIn(x, y) ::: x lives in y.",
        "Sells(x, y) ::: x sells y.",
        "Opens(x, y) ::: x opens y.",
        "Suffers(x, y) ::: x suffers from y.",
        "Decides(x, y) ::: x decides to do y.",
        "Spends(x, y) ::: x spends y.",
        "ArrangesFor(x, y) ::: x arranges for y.",
        "BecomesIll(x) ::: x becomes ill.",
        "Dies(x) ::: x dies."
      ],
      "premises": [
        "Young(carl) ::: Carl Fredricksen is a young 9-year-old boy.",
        "Idolizes(carl, charlesMuntz) ::: Carl idolizes famous explorer Charles Muntz.",
        "Accused(charlesMuntz, fabricatingSkeleton) ::: Muntz has been accused of fabricating the skeleton of a giant exotic bird.",
        "WantsTo(ellie, move(clubhouse, cliff)) ::: Ellie confides to Carl her desire to move her \"clubhouse\" to a cliff overlooking Paradise Falls.",
        "Married(carl, ellie) ::: Carl and Ellie are married.",
        "LivesIn(carl, restoredHouse) ::: Carl and Ellie live together in the restored house.",
        "Sells(carl, toyBalloons) ::: Carl sells toy balloons from a cart at a zoo Ellie opens.",
        "Suffers(carl, miscarriage) ::: Carl and Ellie suffer a miscarriage.",
        "Decides(carl, visitParadiseFalls) ::: They decide to realize their dream of visiting Paradise Falls.",
        "Spends(carl, money) ::: They try to save for the trip but repeatedly end up spending the money on more pressing needs.",
        "ArrangesFor(carl, trip) ::: Carl arranges for the trip.",
        "BecomesIll(ellie) ::: Ellie suddenly becomes ill.",
        "Dies(ellie) ::: Ellie dies.",
        "Conclusion:",
        "¬(∃x (Child(x) ∧ (Parent(carl, x) ∧ Parent(ellie, x)))) ::: Carl Fredricksen and Ellie are unable to have a child after suffering a miscarriage."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 172,
      "context_id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 4,
      "paragraph": "Carl and Russell reunite Kevin with her chicks, then fly the dirigible back to the city. Carl presents Russell with his final badge: a grape soda cap that Ellie gave to Carl when they first met and made their promise. The two and Dug then enjoy some ice cream together. Meanwhile, Carl's house has landed on the cliff beside Paradise Falls, fulfilling his promise to Ellie.",
      "question_template": "Carl's house lands at [[CANDIDATE_ANSWER]] at the end of the story.",
      "candidate_answers": [
        "On the cliff beside Paradise Falls"
      ],
      "predicates": [
        "Reunites(x, y) ::: x reunites y with her chicks.",
        "Flies(x, y) ::: x flies y back to the city.",
        "Presents(x, y, z) ::: x presents y with z.",
        "Enjoys(x, y) ::: x enjoys y.",
        "Lands(x, y) ::: x lands on y.",
        "FulfillsPromise(x, y) ::: x fulfills a promise to y.",
        "Symbolizes(x, y) ::: x symbolizes y."
      ],
      "premises": [
        "Reunites(carl, chicks) ::: Carl reunites Kevin with her chicks.",
        "Flies(carl, dirigible) ::: Carl flies the dirigible back to the city.",
        "Presents(carl, russell, grapeSodaCap) ::: Carl presents Russell with his final badge: a grape soda cap that Ellie gave to Carl when they first met and made their promise.",
        "Enjoys(carl, iceCream) ∧ Enjoys(russell, iceCream) ∧ Enjoys(dug, iceCream) ::: The two and Dug enjoy some ice cream together.",
        "Lands(carl'sHouse, cliff) ::: Carl's house has landed on the cliff beside Paradise Falls.",
        "FulfillsPromise(carl, ellie) ::: Carl fulfills his promise to Ellie.",
        "Symbolizes(grapeSodaCap, promise) ::: The grape soda cap symbolizes the promise made between Carl and Ellie."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "174": [
    {
      "id": 174,
      "context_id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 0,
      "paragraph": " In 1940, Carl Fredricksen is a young 9-year-old boy who idolizes famous explorer Charles Muntz. Muntz has been accused of fabricating the skeleton of a giant exotic bird he says he discovered at Paradise Falls, and vows to return there to catch one alive. One day, Carl befriends a girl named Ellie, who is also a fan of Muntz. She confides to Carl her desire to move her \"clubhouse\"âan abandoned house in the neighborhoodâto a cliff overlooking Paradise Falls. Carl and Ellie eventually get married and live together in the restored house. Carl sells toy balloons from a cart at a zoo Ellie opens. After suffering a miscarriage and being told they cannot have a child, the two decide to realize their dream of visiting Paradise Falls. They try to save for the trip, but repeatedly end up spending the money on more pressing needs. Finally, an elderly Carl arranges for the trip, but Ellie suddenly becomes ill and dies.",
      "question_template": "Russell and Carl initially meet because of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Carl befriends a girl named Ellie",
        "- Carl and Ellie eventually get married and live together in the restored house",
        "- Carl sells toy balloons from a cart at a zoo Ellie opens",
        "- They try to save for the trip, but repeatedly end up spending the money on more pressing needs"
      ],
      "predicates": [
        "Young(x) ::: x is a young boy.",
        "Idolizes(x, y) ::: x idolizes y.",
        "Accused(x, y) ::: x is accused of y.",
        "WantsTo(x, y) ::: x wants to do y.",
        "Married(x, y) ::: x is married to y.",
        "LivesIn(x, y) ::: x lives in y.",
        "Sells(x, y) ::: x sells y.",
        "Opens(x, y) ::: x opens y.",
        "Suffers(x, y) ::: x suffers from y.",
        "Decides(x, y) ::: x decides to do y.",
        "Spends(x, y) ::: x spends y.",
        "ArrangesFor(x, y) ::: x arranges for y.",
        "BecomesIll(x) ::: x becomes ill.",
        "Dies(x) ::: x dies."
      ],
      "premises": [
        "Young(carl) ::: Carl Fredricksen is a young 9-year-old boy.",
        "Idolizes(carl, charlesMuntz) ::: Carl idolizes famous explorer Charles Muntz.",
        "Accused(charlesMuntz, fabricatingSkeleton) ::: Muntz has been accused of fabricating the skeleton of a giant exotic bird.",
        "WantsTo(ellie, move(clubhouse, cliff)) ::: Ellie confides to Carl her desire to move her \"clubhouse\" to a cliff overlooking Paradise Falls.",
        "Married(carl, ellie) ::: Carl and Ellie are married.",
        "LivesIn(carl, restoredHouse) ::: Carl and Ellie live together in the restored house.",
        "Sells(carl, toyBalloons) ::: Carl sells toy balloons from a cart at a zoo Ellie opens.",
        "Suffers(carl, miscarriage) ::: Carl and Ellie suffer a miscarriage.",
        "Decides(carl, visitParadiseFalls) ::: They decide to realize their dream of visiting Paradise Falls.",
        "Spends(carl, money) ::: They try to save for the trip but repeatedly end up spending the money on more pressing needs.",
        "ArrangesFor(carl, trip) ::: Carl arranges for the trip.",
        "BecomesIll(ellie) ::: Ellie suddenly becomes ill.",
        "Dies(ellie) ::: Ellie dies.",
        "Conclusion:",
        "¬(∃x (Child(x) ∧ (Parent(carl, x) ∧ Parent(ellie, x)))) ::: Carl Fredricksen and Ellie are unable to have a child after suffering a miscarriage."
      ],
      "conclusions": [
        "None",
        "None",
        "Sells(carl, toyBalloons) ∧ Opens(ellie, zoo)",
        "None"
      ]
    },
    {
      "id": 174,
      "context_id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 1,
      "paragraph": "Years later, Carl still lives in the house, stubbornly holding out as the surrounding neighborhood is torn down for new construction, but when he accidentally injures a construction worker over damage to his mailbox, a court orders him to move to a retirement home. However, Carl comes up with a scheme to keep his promise to Ellie, and turns his house into a makeshift airship, using thousands of helium balloons. Russell, a young Wilderness Explorer, becomes an accidental stowaway in his effort to earn his final merit badge for assisting the elderly. After surviving a thunderstorm, the flying house lands on a tepui opposite Paradise Falls. Carl and Russell harness themselves to the still-buoyant house and begin to walk it across the mesa, hoping to reach the falls before the balloons deflate. Russell encounters a tall, colorful flightless bird, whom he names \"Kevin\". They then meet a Golden Retriever named Dug, who wears a special collar that allows him to speak, and who vows to take the bird to his master.",
      "question_template": "Russell and Carl initially meet because of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Russell, a young Wilderness Explorer, becomes an accidental stowaway in his effort to earn his final merit badge for assisting the elderly.",
        "- Carl comes up with a scheme to keep his promise to Ellie, and turns his house into a makeshift airship."
      ],
      "predicates": [
        "LivesIn(x, y) ::: x lives in y.",
        "Injures(x, y) ::: x injures y.",
        "CourtOrders(x, y) ::: x is ordered by the court to do y.",
        "TurnsInto(x, y) ::: x turns into y.",
        "AccidentalStowaway(x, y) ::: x is an accidental stowaway in y's effort.",
        "Survives(x, y) ::: x survives y.",
        "Lands(x, y) ::: x lands in y.",
        "Harnesses(x, y) ::: x harnesses y.",
        "Walks(x, y) ::: x walks y.",
        "Encounters(x, y) ::: x encounters y.",
        "Names(x, y) ::: x names y.",
        "Vows(x, y) ::: x vows to do y."
      ],
      "premises": [
        "LivesIn(carl, house) ::: Carl still lives in the house.",
        "Injures(carl, construction_worker) ::: Carl accidentally injures a construction worker.",
        "CourtOrders(court, move_to_retirement_home) ::: A court orders Carl to move to a retirement home.",
        "TurnsInto(carl, makeshift_airship) ::: Carl turns his house into a makeshift airship.",
        "AccidentalStowaway(russell, carl) ::: Russell becomes an accidental stowaway in Carl's effort.",
        "Survives(russell, thunderstorm) ::: Russell survives a thunderstorm.",
        "Lands(carl_airship, tepui) ::: The flying house lands on a tepui opposite Paradise Falls.",
        "Harnesses(carl, house) ::: Carl harnesses himself to the still-buoyant house.",
        "Walks(carl, mesa) ::: Carl walks the house across the mesa.",
        "Encounters(russell, kevin) ::: Russell encounters a tall, colorful flightless bird, whom he names \"Kevin\".",
        "Names(russell, kevin) ::: Russell names the bird \"Kevin\".",
        "Vows(dug, take_kevin_to_master) ::: Dug vows to take Kevin to his master.",
        "Aims(carl, reach_paradise_falls) ::: Carl aims to reach Paradise Falls before the balloons deflate.",
        "Aims(russell, reach_paradise_falls) ::: Russell aims to reach Paradise Falls before the balloons deflate."
      ],
      "conclusions": [
        "AccidentalStowaway(russell, carl)",
        "None"
      ]
    }
  ],
  "175": [
    {
      "id": 175,
      "context_id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 2,
      "paragraph": "The group is set upon by a pack of aggressive dogs led by Alpha, a doberman (who is also seeking the bird), and are taken to their master, who turns out to be an elderly Charles Muntz. Muntz invites Carl and Russell aboard his dirigible, where he explains that he has spent years since his disgrace searching for the giant bird. When Russell notes the bird's similarity to Kevin, Muntz becomes hostile, believing they have been attempting to steal the bird. The pair flees with Kevin and Dug, but Muntz catches up with them, captures Kevin and starts a fire beneath Carl's house, forcing him to choose between saving it or Kevin. Carl rushes to put out the fire, allowing Muntz to take the bird. He and Russell eventually reach the falls, though Russell is disappointed in Carl over his decision to abandon Kevin.",
      "question_template": "[[CANDIDATE_ANSWER]] was the famous explorer that Carl idolized.",
      "candidate_answers": [
        "Charles Muntz"
      ],
      "predicates": [
        "Hostile(x) ::: x is hostile.",
        "Seeking(x, y) ::: x is seeking y.",
        "Captured(x, y) ::: x captures y.",
        "Invites(x, y) ::: x invites y aboard y.",
        "Explains(x, y) ::: x explains y.",
        "Flees(x, y) ::: x flees with y.",
        "CatchesUp(x, y) ::: x catches up with y.",
        "StartsFire(x, y) ::: x starts a fire beneath y.",
        "Chooses(x, y, z) ::: x chooses between y and z.",
        "Disappointed(x, y) ::: x is disappointed in y."
      ],
      "premises": [
        "Hostile(muntz) ∧ Believes(muntz, Stealing(carl, russell, bird)) ::: Charles Muntz becomes hostile when he believes Carl and Russell are attempting to steal the bird.",
        "Forced(carl, Choose(carl, house, kevin)) ::: Carl is forced to choose between saving his house or Kevin.",
        "Seeking(muntz, bird) ::: Muntz is seeking the bird.",
        "Captured(muntz, kevin) ::: Muntz captures Kevin.",
        "Invites(muntz, dirigible) ::: Muntz invites Carl and Russell aboard his dirigible.",
        "Explains(muntz, searchingForGiantBird) ::: Muntz explains that he has spent years searching for the giant bird.",
        "Flees(carl, russell) ::: Carl flees with Russell.",
        "CatchesUp(muntz, carl) ::: Muntz catches up with Carl.",
        "StartsFire(muntz, house) ::: Muntz starts a fire beneath Carl's house.",
        "Chooses(carl, house, kevin) ::: Carl chooses between saving his house or Kevin.",
        "Disappointed(russell, carl) ::: Russell is disappointed in Carl over his decision to abandon Kevin."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "177": [
    {
      "id": 177,
      "context_id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 1,
      "paragraph": "Years later, Carl still lives in the house, stubbornly holding out as the surrounding neighborhood is torn down for new construction, but when he accidentally injures a construction worker over damage to his mailbox, a court orders him to move to a retirement home. However, Carl comes up with a scheme to keep his promise to Ellie, and turns his house into a makeshift airship, using thousands of helium balloons. Russell, a young Wilderness Explorer, becomes an accidental stowaway in his effort to earn his final merit badge for assisting the elderly. After surviving a thunderstorm, the flying house lands on a tepui opposite Paradise Falls. Carl and Russell harness themselves to the still-buoyant house and begin to walk it across the mesa, hoping to reach the falls before the balloons deflate. Russell encounters a tall, colorful flightless bird, whom he names \"Kevin\". They then meet a Golden Retriever named Dug, who wears a special collar that allows him to speak, and who vows to take the bird to his master.",
      "question_template": "[[CANDIDATE_ANSWER]] became Carl's wife.",
      "candidate_answers": [
        "Ellie"
      ],
      "predicates": [
        "LivesIn(x, y) ::: x lives in y.",
        "Injures(x, y) ::: x injures y.",
        "CourtOrders(x, y) ::: x is ordered by the court to do y.",
        "TurnsInto(x, y) ::: x turns into y.",
        "AccidentalStowaway(x, y) ::: x is an accidental stowaway in y's effort.",
        "Survives(x, y) ::: x survives y.",
        "Lands(x, y) ::: x lands in y.",
        "Harnesses(x, y) ::: x harnesses y.",
        "Walks(x, y) ::: x walks y.",
        "Encounters(x, y) ::: x encounters y.",
        "Names(x, y) ::: x names y.",
        "Vows(x, y) ::: x vows to do y."
      ],
      "premises": [
        "LivesIn(carl, house) ::: Carl still lives in the house.",
        "Injures(carl, construction_worker) ::: Carl accidentally injures a construction worker.",
        "CourtOrders(court, move_to_retirement_home) ::: A court orders Carl to move to a retirement home.",
        "TurnsInto(carl, makeshift_airship) ::: Carl turns his house into a makeshift airship.",
        "AccidentalStowaway(russell, carl) ::: Russell becomes an accidental stowaway in Carl's effort.",
        "Survives(russell, thunderstorm) ::: Russell survives a thunderstorm.",
        "Lands(carl_airship, tepui) ::: The flying house lands on a tepui opposite Paradise Falls.",
        "Harnesses(carl, house) ::: Carl harnesses himself to the still-buoyant house.",
        "Walks(carl, mesa) ::: Carl walks the house across the mesa.",
        "Encounters(russell, kevin) ::: Russell encounters a tall, colorful flightless bird, whom he names \"Kevin\".",
        "Names(russell, kevin) ::: Russell names the bird \"Kevin\".",
        "Vows(dug, take_kevin_to_master) ::: Dug vows to take Kevin to his master.",
        "Aims(carl, reach_paradise_falls) ::: Carl aims to reach Paradise Falls before the balloons deflate.",
        "Aims(russell, reach_paradise_falls) ::: Russell aims to reach Paradise Falls before the balloons deflate."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 177,
      "context_id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 4,
      "paragraph": "Carl and Russell reunite Kevin with her chicks, then fly the dirigible back to the city. Carl presents Russell with his final badge: a grape soda cap that Ellie gave to Carl when they first met and made their promise. The two and Dug then enjoy some ice cream together. Meanwhile, Carl's house has landed on the cliff beside Paradise Falls, fulfilling his promise to Ellie.",
      "question_template": "[[CANDIDATE_ANSWER]] became Carl's wife.",
      "candidate_answers": [
        "Ellie"
      ],
      "predicates": [
        "Reunites(x, y) ::: x reunites y with her chicks.",
        "Flies(x, y) ::: x flies y back to the city.",
        "Presents(x, y, z) ::: x presents y with z.",
        "Enjoys(x, y) ::: x enjoys y.",
        "Lands(x, y) ::: x lands on y.",
        "FulfillsPromise(x, y) ::: x fulfills a promise to y.",
        "Symbolizes(x, y) ::: x symbolizes y."
      ],
      "premises": [
        "Reunites(carl, chicks) ::: Carl reunites Kevin with her chicks.",
        "Flies(carl, dirigible) ::: Carl flies the dirigible back to the city.",
        "Presents(carl, russell, grapeSodaCap) ::: Carl presents Russell with his final badge: a grape soda cap that Ellie gave to Carl when they first met and made their promise.",
        "Enjoys(carl, iceCream) ∧ Enjoys(russell, iceCream) ∧ Enjoys(dug, iceCream) ::: The two and Dug enjoy some ice cream together.",
        "Lands(carl'sHouse, cliff) ::: Carl's house has landed on the cliff beside Paradise Falls.",
        "FulfillsPromise(carl, ellie) ::: Carl fulfills his promise to Ellie.",
        "Symbolizes(grapeSodaCap, promise) ::: The grape soda cap symbolizes the promise made between Carl and Ellie."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "179": [
    {
      "id": 179,
      "context_id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 4,
      "paragraph": "Carl and Russell reunite Kevin with her chicks, then fly the dirigible back to the city. Carl presents Russell with his final badge: a grape soda cap that Ellie gave to Carl when they first met and made their promise. The two and Dug then enjoy some ice cream together. Meanwhile, Carl's house has landed on the cliff beside Paradise Falls, fulfilling his promise to Ellie.",
      "question_template": "Carl planned to get his home to Paradise Falls by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Carl presents Russell with his final badge: a grape soda cap that Ellie gave to Carl when they first met and made their promise.",
        "Carl's house has landed on the cliff beside Paradise Falls, fulfilling his promise to Ellie."
      ],
      "predicates": [
        "Reunites(x, y) ::: x reunites y with her chicks.",
        "Flies(x, y) ::: x flies y back to the city.",
        "Presents(x, y, z) ::: x presents y with z.",
        "Enjoys(x, y) ::: x enjoys y.",
        "Lands(x, y) ::: x lands on y.",
        "FulfillsPromise(x, y) ::: x fulfills a promise to y.",
        "Symbolizes(x, y) ::: x symbolizes y."
      ],
      "premises": [
        "Reunites(carl, chicks) ::: Carl reunites Kevin with her chicks.",
        "Flies(carl, dirigible) ::: Carl flies the dirigible back to the city.",
        "Presents(carl, russell, grapeSodaCap) ::: Carl presents Russell with his final badge: a grape soda cap that Ellie gave to Carl when they first met and made their promise.",
        "Enjoys(carl, iceCream) ∧ Enjoys(russell, iceCream) ∧ Enjoys(dug, iceCream) ::: The two and Dug enjoy some ice cream together.",
        "Lands(carl'sHouse, cliff) ::: Carl's house has landed on the cliff beside Paradise Falls.",
        "FulfillsPromise(carl, ellie) ::: Carl fulfills his promise to Ellie.",
        "Symbolizes(grapeSodaCap, promise) ::: The grape soda cap symbolizes the promise made between Carl and Ellie."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "180": [
    {
      "id": 180,
      "context_id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 1,
      "paragraph": "Years later, Carl still lives in the house, stubbornly holding out as the surrounding neighborhood is torn down for new construction, but when he accidentally injures a construction worker over damage to his mailbox, a court orders him to move to a retirement home. However, Carl comes up with a scheme to keep his promise to Ellie, and turns his house into a makeshift airship, using thousands of helium balloons. Russell, a young Wilderness Explorer, becomes an accidental stowaway in his effort to earn his final merit badge for assisting the elderly. After surviving a thunderstorm, the flying house lands on a tepui opposite Paradise Falls. Carl and Russell harness themselves to the still-buoyant house and begin to walk it across the mesa, hoping to reach the falls before the balloons deflate. Russell encounters a tall, colorful flightless bird, whom he names \"Kevin\". They then meet a Golden Retriever named Dug, who wears a special collar that allows him to speak, and who vows to take the bird to his master.",
      "question_template": "[[CANDIDATE_ANSWER]] was Ellie to Carl.",
      "candidate_answers": [
        "Ellie",
        "Carl's promise to Ellie"
      ],
      "predicates": [
        "LivesIn(x, y) ::: x lives in y.",
        "Injures(x, y) ::: x injures y.",
        "CourtOrders(x, y) ::: x is ordered by the court to do y.",
        "TurnsInto(x, y) ::: x turns into y.",
        "AccidentalStowaway(x, y) ::: x is an accidental stowaway in y's effort.",
        "Survives(x, y) ::: x survives y.",
        "Lands(x, y) ::: x lands in y.",
        "Harnesses(x, y) ::: x harnesses y.",
        "Walks(x, y) ::: x walks y.",
        "Encounters(x, y) ::: x encounters y.",
        "Names(x, y) ::: x names y.",
        "Vows(x, y) ::: x vows to do y."
      ],
      "premises": [
        "LivesIn(carl, house) ::: Carl still lives in the house.",
        "Injures(carl, construction_worker) ::: Carl accidentally injures a construction worker.",
        "CourtOrders(court, move_to_retirement_home) ::: A court orders Carl to move to a retirement home.",
        "TurnsInto(carl, makeshift_airship) ::: Carl turns his house into a makeshift airship.",
        "AccidentalStowaway(russell, carl) ::: Russell becomes an accidental stowaway in Carl's effort.",
        "Survives(russell, thunderstorm) ::: Russell survives a thunderstorm.",
        "Lands(carl_airship, tepui) ::: The flying house lands on a tepui opposite Paradise Falls.",
        "Harnesses(carl, house) ::: Carl harnesses himself to the still-buoyant house.",
        "Walks(carl, mesa) ::: Carl walks the house across the mesa.",
        "Encounters(russell, kevin) ::: Russell encounters a tall, colorful flightless bird, whom he names \"Kevin\".",
        "Names(russell, kevin) ::: Russell names the bird \"Kevin\".",
        "Vows(dug, take_kevin_to_master) ::: Dug vows to take Kevin to his master.",
        "Aims(carl, reach_paradise_falls) ::: Carl aims to reach Paradise Falls before the balloons deflate.",
        "Aims(russell, reach_paradise_falls) ::: Russell aims to reach Paradise Falls before the balloons deflate."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "181": [
    {
      "id": 181,
      "context_id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 1,
      "paragraph": "Years later, Carl still lives in the house, stubbornly holding out as the surrounding neighborhood is torn down for new construction, but when he accidentally injures a construction worker over damage to his mailbox, a court orders him to move to a retirement home. However, Carl comes up with a scheme to keep his promise to Ellie, and turns his house into a makeshift airship, using thousands of helium balloons. Russell, a young Wilderness Explorer, becomes an accidental stowaway in his effort to earn his final merit badge for assisting the elderly. After surviving a thunderstorm, the flying house lands on a tepui opposite Paradise Falls. Carl and Russell harness themselves to the still-buoyant house and begin to walk it across the mesa, hoping to reach the falls before the balloons deflate. Russell encounters a tall, colorful flightless bird, whom he names \"Kevin\". They then meet a Golden Retriever named Dug, who wears a special collar that allows him to speak, and who vows to take the bird to his master.",
      "question_template": "[[CANDIDATE_ANSWER]] was Russell's occupation.",
      "candidate_answers": [
        "Wilderness Explorer",
        "Accidental stowaway",
        "Earn his final merit badge for assisting the elderly"
      ],
      "predicates": [
        "LivesIn(x, y) ::: x lives in y.",
        "Injures(x, y) ::: x injures y.",
        "CourtOrders(x, y) ::: x is ordered by the court to do y.",
        "TurnsInto(x, y) ::: x turns into y.",
        "AccidentalStowaway(x, y) ::: x is an accidental stowaway in y's effort.",
        "Survives(x, y) ::: x survives y.",
        "Lands(x, y) ::: x lands in y.",
        "Harnesses(x, y) ::: x harnesses y.",
        "Walks(x, y) ::: x walks y.",
        "Encounters(x, y) ::: x encounters y.",
        "Names(x, y) ::: x names y.",
        "Vows(x, y) ::: x vows to do y."
      ],
      "premises": [
        "LivesIn(carl, house) ::: Carl still lives in the house.",
        "Injures(carl, construction_worker) ::: Carl accidentally injures a construction worker.",
        "CourtOrders(court, move_to_retirement_home) ::: A court orders Carl to move to a retirement home.",
        "TurnsInto(carl, makeshift_airship) ::: Carl turns his house into a makeshift airship.",
        "AccidentalStowaway(russell, carl) ::: Russell becomes an accidental stowaway in Carl's effort.",
        "Survives(russell, thunderstorm) ::: Russell survives a thunderstorm.",
        "Lands(carl_airship, tepui) ::: The flying house lands on a tepui opposite Paradise Falls.",
        "Harnesses(carl, house) ::: Carl harnesses himself to the still-buoyant house.",
        "Walks(carl, mesa) ::: Carl walks the house across the mesa.",
        "Encounters(russell, kevin) ::: Russell encounters a tall, colorful flightless bird, whom he names \"Kevin\".",
        "Names(russell, kevin) ::: Russell names the bird \"Kevin\".",
        "Vows(dug, take_kevin_to_master) ::: Dug vows to take Kevin to his master.",
        "Aims(carl, reach_paradise_falls) ::: Carl aims to reach Paradise Falls before the balloons deflate.",
        "Aims(russell, reach_paradise_falls) ::: Russell aims to reach Paradise Falls before the balloons deflate."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 181,
      "context_id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 2,
      "paragraph": "The group is set upon by a pack of aggressive dogs led by Alpha, a doberman (who is also seeking the bird), and are taken to their master, who turns out to be an elderly Charles Muntz. Muntz invites Carl and Russell aboard his dirigible, where he explains that he has spent years since his disgrace searching for the giant bird. When Russell notes the bird's similarity to Kevin, Muntz becomes hostile, believing they have been attempting to steal the bird. The pair flees with Kevin and Dug, but Muntz catches up with them, captures Kevin and starts a fire beneath Carl's house, forcing him to choose between saving it or Kevin. Carl rushes to put out the fire, allowing Muntz to take the bird. He and Russell eventually reach the falls, though Russell is disappointed in Carl over his decision to abandon Kevin.",
      "question_template": "[[CANDIDATE_ANSWER]] was Russell's occupation.",
      "candidate_answers": [
        "Russell",
        "A boy scout"
      ],
      "predicates": [
        "Hostile(x) ::: x is hostile.",
        "Seeking(x, y) ::: x is seeking y.",
        "Captured(x, y) ::: x captures y.",
        "Invites(x, y) ::: x invites y aboard y.",
        "Explains(x, y) ::: x explains y.",
        "Flees(x, y) ::: x flees with y.",
        "CatchesUp(x, y) ::: x catches up with y.",
        "StartsFire(x, y) ::: x starts a fire beneath y.",
        "Chooses(x, y, z) ::: x chooses between y and z.",
        "Disappointed(x, y) ::: x is disappointed in y."
      ],
      "premises": [
        "Hostile(muntz) ∧ Believes(muntz, Stealing(carl, russell, bird)) ::: Charles Muntz becomes hostile when he believes Carl and Russell are attempting to steal the bird.",
        "Forced(carl, Choose(carl, house, kevin)) ::: Carl is forced to choose between saving his house or Kevin.",
        "Seeking(muntz, bird) ::: Muntz is seeking the bird.",
        "Captured(muntz, kevin) ::: Muntz captures Kevin.",
        "Invites(muntz, dirigible) ::: Muntz invites Carl and Russell aboard his dirigible.",
        "Explains(muntz, searchingForGiantBird) ::: Muntz explains that he has spent years searching for the giant bird.",
        "Flees(carl, russell) ::: Carl flees with Russell.",
        "CatchesUp(muntz, carl) ::: Muntz catches up with Carl.",
        "StartsFire(muntz, house) ::: Muntz starts a fire beneath Carl's house.",
        "Chooses(carl, house, kevin) ::: Carl chooses between saving his house or Kevin.",
        "Disappointed(russell, carl) ::: Russell is disappointed in Carl over his decision to abandon Kevin."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 181,
      "context_id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 3,
      "paragraph": "Settling into his home, Carl looks through Ellie's childhood scrapbook, and is surprised to find that she has filled in the blank pages with photos of their marriage, along with a note thanking him for the \"adventure\" and encouraging him to go have a new one. Reinvigorated, he goes to find Russell, only to see him sailing off with some balloons to save Kevin on his own. Carl empties the house of furniture and possessions, lightening it, and pursues him. Russell is captured by Muntz, but Carl manages to board the dirigible in flight and free both him and Kevin. Dug accidentally defeats Alpha and becomes the dogs' new leader. Muntz pursues them around the airship, finally cornering Dug, Kevin, and Russell inside Carl's tethered house. Carl lures Kevin back onto the airship with Dug and Russell clinging to her back, but when Muntz leaps after them, he snags his foot on some balloon lines and falls to his death. The house then descends out of sight through the clouds.",
      "question_template": "[[CANDIDATE_ANSWER]] was Russell's occupation.",
      "candidate_answers": [
        "Russell",
        "A boy",
        "A scout"
      ],
      "predicates": [
        "Home(x) ::: x is a home.",
        "Scrapbook(x) ::: x is a scrapbook.",
        "Filled(x, y) ::: x is filled with y.",
        "Thank(x, y) ::: x thanks y.",
        "Adventure(x) ::: x is an adventure.",
        "Lighten(x) ::: x is lightened of possessions.",
        "Pursue(x, y) ::: x pursues y.",
        "Captured(x, y) ::: x is captured by y.",
        "Board(x, y) ::: x boards y.",
        "Free(x, y) ::: x frees y.",
        "AccidentallyDefeat(x, y) ::: x accidentally defeats y.",
        "Leader(x, y) ::: x becomes the leader of y.",
        "Pursue(x, y) ::: x pursues y.",
        "Corner(x, y, z) ::: x corners y and z.",
        "Lure(x, y) ::: x lures y.",
        "Fall(x) ::: x falls.",
        "Death(x) ::: x meets death."
      ],
      "premises": [
        "Home(carlHome) ∧ Scrapbook(ellieScrapbook) ∧ Filled(ellieScrapbook, photosOfMarriage) ∧ Thank(ellie, carl) ∧ Adventure(adventureNote) ::: Carl looks through Ellie's childhood scrapbook and finds it filled with photos of their marriage and a note thanking him for the adventure.",
        "Lighten(carlHome) ∧ Pursue(carl, russell) ::: Carl empties the house of furniture and possessions, lightening it, and pursues Russell.",
        "Captured(russell, muntz) ∧ Board(carl, dirigible) ∧ Free(carl, russell) ∧ Free(carl, kevin) ::: Russell is captured by Muntz, but Carl manages to board the dirigible in flight and free both him and Kevin.",
        "AccidentallyDefeat(dug, alpha) ∧ Leader(dug, dogs) ::: Dug accidentally defeats Alpha and becomes the new leader of the dogs.",
        "Pursue(muntz, carl) ∧ Fall(muntz) ∧ Death(muntz) ::: Muntz pursues them around the airship, but ends with his death after falling from the airship.",
        "Lure(carl, kevin) ∧ Corner(muntz, dug, russell) ::: Carl lures Kevin back onto the airship while Muntz corners Dug, Kevin, and Russell inside Carl's tethered house.",
        "Conclusion:",
        "Pursue(carl, russell) ::: Carl pursues Russell after being reinvigorated.",
        "Free(carl, russell) ∧ Free(carl, kevin) ::: Carl frees both Russell and Kevin."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "182": [
    {
      "id": 182,
      "context_id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 1,
      "paragraph": "Years later, Carl still lives in the house, stubbornly holding out as the surrounding neighborhood is torn down for new construction, but when he accidentally injures a construction worker over damage to his mailbox, a court orders him to move to a retirement home. However, Carl comes up with a scheme to keep his promise to Ellie, and turns his house into a makeshift airship, using thousands of helium balloons. Russell, a young Wilderness Explorer, becomes an accidental stowaway in his effort to earn his final merit badge for assisting the elderly. After surviving a thunderstorm, the flying house lands on a tepui opposite Paradise Falls. Carl and Russell harness themselves to the still-buoyant house and begin to walk it across the mesa, hoping to reach the falls before the balloons deflate. Russell encounters a tall, colorful flightless bird, whom he names \"Kevin\". They then meet a Golden Retriever named Dug, who wears a special collar that allows him to speak, and who vows to take the bird to his master.",
      "question_template": "[[CANDIDATE_ANSWER]] allowed Dug to speak.",
      "candidate_answers": [
        "A special collar that allows him to speak"
      ],
      "predicates": [
        "LivesIn(x, y) ::: x lives in y.",
        "Injures(x, y) ::: x injures y.",
        "CourtOrders(x, y) ::: x is ordered by the court to do y.",
        "TurnsInto(x, y) ::: x turns into y.",
        "AccidentalStowaway(x, y) ::: x is an accidental stowaway in y's effort.",
        "Survives(x, y) ::: x survives y.",
        "Lands(x, y) ::: x lands in y.",
        "Harnesses(x, y) ::: x harnesses y.",
        "Walks(x, y) ::: x walks y.",
        "Encounters(x, y) ::: x encounters y.",
        "Names(x, y) ::: x names y.",
        "Vows(x, y) ::: x vows to do y."
      ],
      "premises": [
        "LivesIn(carl, house) ::: Carl still lives in the house.",
        "Injures(carl, construction_worker) ::: Carl accidentally injures a construction worker.",
        "CourtOrders(court, move_to_retirement_home) ::: A court orders Carl to move to a retirement home.",
        "TurnsInto(carl, makeshift_airship) ::: Carl turns his house into a makeshift airship.",
        "AccidentalStowaway(russell, carl) ::: Russell becomes an accidental stowaway in Carl's effort.",
        "Survives(russell, thunderstorm) ::: Russell survives a thunderstorm.",
        "Lands(carl_airship, tepui) ::: The flying house lands on a tepui opposite Paradise Falls.",
        "Harnesses(carl, house) ::: Carl harnesses himself to the still-buoyant house.",
        "Walks(carl, mesa) ::: Carl walks the house across the mesa.",
        "Encounters(russell, kevin) ::: Russell encounters a tall, colorful flightless bird, whom he names \"Kevin\".",
        "Names(russell, kevin) ::: Russell names the bird \"Kevin\".",
        "Vows(dug, take_kevin_to_master) ::: Dug vows to take Kevin to his master.",
        "Aims(carl, reach_paradise_falls) ::: Carl aims to reach Paradise Falls before the balloons deflate.",
        "Aims(russell, reach_paradise_falls) ::: Russell aims to reach Paradise Falls before the balloons deflate."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 182,
      "context_id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 3,
      "paragraph": "Settling into his home, Carl looks through Ellie's childhood scrapbook, and is surprised to find that she has filled in the blank pages with photos of their marriage, along with a note thanking him for the \"adventure\" and encouraging him to go have a new one. Reinvigorated, he goes to find Russell, only to see him sailing off with some balloons to save Kevin on his own. Carl empties the house of furniture and possessions, lightening it, and pursues him. Russell is captured by Muntz, but Carl manages to board the dirigible in flight and free both him and Kevin. Dug accidentally defeats Alpha and becomes the dogs' new leader. Muntz pursues them around the airship, finally cornering Dug, Kevin, and Russell inside Carl's tethered house. Carl lures Kevin back onto the airship with Dug and Russell clinging to her back, but when Muntz leaps after them, he snags his foot on some balloon lines and falls to his death. The house then descends out of sight through the clouds.",
      "question_template": "[[CANDIDATE_ANSWER]] allowed Dug to speak.",
      "candidate_answers": [
        "Dug accidentally defeats Alpha and becomes the dogs' new leader."
      ],
      "predicates": [
        "Home(x) ::: x is a home.",
        "Scrapbook(x) ::: x is a scrapbook.",
        "Filled(x, y) ::: x is filled with y.",
        "Thank(x, y) ::: x thanks y.",
        "Adventure(x) ::: x is an adventure.",
        "Lighten(x) ::: x is lightened of possessions.",
        "Pursue(x, y) ::: x pursues y.",
        "Captured(x, y) ::: x is captured by y.",
        "Board(x, y) ::: x boards y.",
        "Free(x, y) ::: x frees y.",
        "AccidentallyDefeat(x, y) ::: x accidentally defeats y.",
        "Leader(x, y) ::: x becomes the leader of y.",
        "Pursue(x, y) ::: x pursues y.",
        "Corner(x, y, z) ::: x corners y and z.",
        "Lure(x, y) ::: x lures y.",
        "Fall(x) ::: x falls.",
        "Death(x) ::: x meets death."
      ],
      "premises": [
        "Home(carlHome) ∧ Scrapbook(ellieScrapbook) ∧ Filled(ellieScrapbook, photosOfMarriage) ∧ Thank(ellie, carl) ∧ Adventure(adventureNote) ::: Carl looks through Ellie's childhood scrapbook and finds it filled with photos of their marriage and a note thanking him for the adventure.",
        "Lighten(carlHome) ∧ Pursue(carl, russell) ::: Carl empties the house of furniture and possessions, lightening it, and pursues Russell.",
        "Captured(russell, muntz) ∧ Board(carl, dirigible) ∧ Free(carl, russell) ∧ Free(carl, kevin) ::: Russell is captured by Muntz, but Carl manages to board the dirigible in flight and free both him and Kevin.",
        "AccidentallyDefeat(dug, alpha) ∧ Leader(dug, dogs) ::: Dug accidentally defeats Alpha and becomes the new leader of the dogs.",
        "Pursue(muntz, carl) ∧ Fall(muntz) ∧ Death(muntz) ::: Muntz pursues them around the airship, but ends with his death after falling from the airship.",
        "Lure(carl, kevin) ∧ Corner(muntz, dug, russell) ::: Carl lures Kevin back onto the airship while Muntz corners Dug, Kevin, and Russell inside Carl's tethered house.",
        "Conclusion:",
        "Pursue(carl, russell) ::: Carl pursues Russell after being reinvigorated.",
        "Free(carl, russell) ∧ Free(carl, kevin) ::: Carl frees both Russell and Kevin."
      ],
      "conclusions": [
        "AccidentallyDefeat(dug, alpha) ∧ Leader(dug, dogs)"
      ]
    }
  ],
  "183": [
    {
      "id": 183,
      "context_id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 1,
      "paragraph": "Years later, Carl still lives in the house, stubbornly holding out as the surrounding neighborhood is torn down for new construction, but when he accidentally injures a construction worker over damage to his mailbox, a court orders him to move to a retirement home. However, Carl comes up with a scheme to keep his promise to Ellie, and turns his house into a makeshift airship, using thousands of helium balloons. Russell, a young Wilderness Explorer, becomes an accidental stowaway in his effort to earn his final merit badge for assisting the elderly. After surviving a thunderstorm, the flying house lands on a tepui opposite Paradise Falls. Carl and Russell harness themselves to the still-buoyant house and begin to walk it across the mesa, hoping to reach the falls before the balloons deflate. Russell encounters a tall, colorful flightless bird, whom he names \"Kevin\". They then meet a Golden Retriever named Dug, who wears a special collar that allows him to speak, and who vows to take the bird to his master.",
      "question_template": "Russell's final reward for helping Carl was [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Russell becomes an accidental stowaway in his effort to earn his final merit badge for assisting the elderly."
      ],
      "predicates": [
        "LivesIn(x, y) ::: x lives in y.",
        "Injures(x, y) ::: x injures y.",
        "CourtOrders(x, y) ::: x is ordered by the court to do y.",
        "TurnsInto(x, y) ::: x turns into y.",
        "AccidentalStowaway(x, y) ::: x is an accidental stowaway in y's effort.",
        "Survives(x, y) ::: x survives y.",
        "Lands(x, y) ::: x lands in y.",
        "Harnesses(x, y) ::: x harnesses y.",
        "Walks(x, y) ::: x walks y.",
        "Encounters(x, y) ::: x encounters y.",
        "Names(x, y) ::: x names y.",
        "Vows(x, y) ::: x vows to do y."
      ],
      "premises": [
        "LivesIn(carl, house) ::: Carl still lives in the house.",
        "Injures(carl, construction_worker) ::: Carl accidentally injures a construction worker.",
        "CourtOrders(court, move_to_retirement_home) ::: A court orders Carl to move to a retirement home.",
        "TurnsInto(carl, makeshift_airship) ::: Carl turns his house into a makeshift airship.",
        "AccidentalStowaway(russell, carl) ::: Russell becomes an accidental stowaway in Carl's effort.",
        "Survives(russell, thunderstorm) ::: Russell survives a thunderstorm.",
        "Lands(carl_airship, tepui) ::: The flying house lands on a tepui opposite Paradise Falls.",
        "Harnesses(carl, house) ::: Carl harnesses himself to the still-buoyant house.",
        "Walks(carl, mesa) ::: Carl walks the house across the mesa.",
        "Encounters(russell, kevin) ::: Russell encounters a tall, colorful flightless bird, whom he names \"Kevin\".",
        "Names(russell, kevin) ::: Russell names the bird \"Kevin\".",
        "Vows(dug, take_kevin_to_master) ::: Dug vows to take Kevin to his master.",
        "Aims(carl, reach_paradise_falls) ::: Carl aims to reach Paradise Falls before the balloons deflate.",
        "Aims(russell, reach_paradise_falls) ::: Russell aims to reach Paradise Falls before the balloons deflate."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 183,
      "context_id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 2,
      "paragraph": "The group is set upon by a pack of aggressive dogs led by Alpha, a doberman (who is also seeking the bird), and are taken to their master, who turns out to be an elderly Charles Muntz. Muntz invites Carl and Russell aboard his dirigible, where he explains that he has spent years since his disgrace searching for the giant bird. When Russell notes the bird's similarity to Kevin, Muntz becomes hostile, believing they have been attempting to steal the bird. The pair flees with Kevin and Dug, but Muntz catches up with them, captures Kevin and starts a fire beneath Carl's house, forcing him to choose between saving it or Kevin. Carl rushes to put out the fire, allowing Muntz to take the bird. He and Russell eventually reach the falls, though Russell is disappointed in Carl over his decision to abandon Kevin.",
      "question_template": "Russell's final reward for helping Carl was [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Russell is disappointed in Carl over his decision to abandon Kevin."
      ],
      "predicates": [
        "Hostile(x) ::: x is hostile.",
        "Seeking(x, y) ::: x is seeking y.",
        "Captured(x, y) ::: x captures y.",
        "Invites(x, y) ::: x invites y aboard y.",
        "Explains(x, y) ::: x explains y.",
        "Flees(x, y) ::: x flees with y.",
        "CatchesUp(x, y) ::: x catches up with y.",
        "StartsFire(x, y) ::: x starts a fire beneath y.",
        "Chooses(x, y, z) ::: x chooses between y and z.",
        "Disappointed(x, y) ::: x is disappointed in y."
      ],
      "premises": [
        "Hostile(muntz) ∧ Believes(muntz, Stealing(carl, russell, bird)) ::: Charles Muntz becomes hostile when he believes Carl and Russell are attempting to steal the bird.",
        "Forced(carl, Choose(carl, house, kevin)) ::: Carl is forced to choose between saving his house or Kevin.",
        "Seeking(muntz, bird) ::: Muntz is seeking the bird.",
        "Captured(muntz, kevin) ::: Muntz captures Kevin.",
        "Invites(muntz, dirigible) ::: Muntz invites Carl and Russell aboard his dirigible.",
        "Explains(muntz, searchingForGiantBird) ::: Muntz explains that he has spent years searching for the giant bird.",
        "Flees(carl, russell) ::: Carl flees with Russell.",
        "CatchesUp(muntz, carl) ::: Muntz catches up with Carl.",
        "StartsFire(muntz, house) ::: Muntz starts a fire beneath Carl's house.",
        "Chooses(carl, house, kevin) ::: Carl chooses between saving his house or Kevin.",
        "Disappointed(russell, carl) ::: Russell is disappointed in Carl over his decision to abandon Kevin."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 183,
      "context_id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 4,
      "paragraph": "Carl and Russell reunite Kevin with her chicks, then fly the dirigible back to the city. Carl presents Russell with his final badge: a grape soda cap that Ellie gave to Carl when they first met and made their promise. The two and Dug then enjoy some ice cream together. Meanwhile, Carl's house has landed on the cliff beside Paradise Falls, fulfilling his promise to Ellie.",
      "question_template": "Russell's final reward for helping Carl was [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "his final badge: a grape soda cap that Ellie gave to Carl when they first met and made their promise"
      ],
      "predicates": [
        "Reunites(x, y) ::: x reunites y with her chicks.",
        "Flies(x, y) ::: x flies y back to the city.",
        "Presents(x, y, z) ::: x presents y with z.",
        "Enjoys(x, y) ::: x enjoys y.",
        "Lands(x, y) ::: x lands on y.",
        "FulfillsPromise(x, y) ::: x fulfills a promise to y.",
        "Symbolizes(x, y) ::: x symbolizes y."
      ],
      "premises": [
        "Reunites(carl, chicks) ::: Carl reunites Kevin with her chicks.",
        "Flies(carl, dirigible) ::: Carl flies the dirigible back to the city.",
        "Presents(carl, russell, grapeSodaCap) ::: Carl presents Russell with his final badge: a grape soda cap that Ellie gave to Carl when they first met and made their promise.",
        "Enjoys(carl, iceCream) ∧ Enjoys(russell, iceCream) ∧ Enjoys(dug, iceCream) ::: The two and Dug enjoy some ice cream together.",
        "Lands(carl'sHouse, cliff) ::: Carl's house has landed on the cliff beside Paradise Falls.",
        "FulfillsPromise(carl, ellie) ::: Carl fulfills his promise to Ellie.",
        "Symbolizes(grapeSodaCap, promise) ::: The grape soda cap symbolizes the promise made between Carl and Ellie."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "185": [
    {
      "id": 185,
      "context_id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 1,
      "paragraph": "Years later, Carl still lives in the house, stubbornly holding out as the surrounding neighborhood is torn down for new construction, but when he accidentally injures a construction worker over damage to his mailbox, a court orders him to move to a retirement home. However, Carl comes up with a scheme to keep his promise to Ellie, and turns his house into a makeshift airship, using thousands of helium balloons. Russell, a young Wilderness Explorer, becomes an accidental stowaway in his effort to earn his final merit badge for assisting the elderly. After surviving a thunderstorm, the flying house lands on a tepui opposite Paradise Falls. Carl and Russell harness themselves to the still-buoyant house and begin to walk it across the mesa, hoping to reach the falls before the balloons deflate. Russell encounters a tall, colorful flightless bird, whom he names \"Kevin\". They then meet a Golden Retriever named Dug, who wears a special collar that allows him to speak, and who vows to take the bird to his master.",
      "question_template": "[[CANDIDATE_ANSWER]] is what Charles Muntz is famous for.",
      "candidate_answers": [
        "Charles Muntz",
        "A tall, colorful flightless bird",
        "A Golden Retriever named Dug"
      ],
      "predicates": [
        "LivesIn(x, y) ::: x lives in y.",
        "Injures(x, y) ::: x injures y.",
        "CourtOrders(x, y) ::: x is ordered by the court to do y.",
        "TurnsInto(x, y) ::: x turns into y.",
        "AccidentalStowaway(x, y) ::: x is an accidental stowaway in y's effort.",
        "Survives(x, y) ::: x survives y.",
        "Lands(x, y) ::: x lands in y.",
        "Harnesses(x, y) ::: x harnesses y.",
        "Walks(x, y) ::: x walks y.",
        "Encounters(x, y) ::: x encounters y.",
        "Names(x, y) ::: x names y.",
        "Vows(x, y) ::: x vows to do y."
      ],
      "premises": [
        "LivesIn(carl, house) ::: Carl still lives in the house.",
        "Injures(carl, construction_worker) ::: Carl accidentally injures a construction worker.",
        "CourtOrders(court, move_to_retirement_home) ::: A court orders Carl to move to a retirement home.",
        "TurnsInto(carl, makeshift_airship) ::: Carl turns his house into a makeshift airship.",
        "AccidentalStowaway(russell, carl) ::: Russell becomes an accidental stowaway in Carl's effort.",
        "Survives(russell, thunderstorm) ::: Russell survives a thunderstorm.",
        "Lands(carl_airship, tepui) ::: The flying house lands on a tepui opposite Paradise Falls.",
        "Harnesses(carl, house) ::: Carl harnesses himself to the still-buoyant house.",
        "Walks(carl, mesa) ::: Carl walks the house across the mesa.",
        "Encounters(russell, kevin) ::: Russell encounters a tall, colorful flightless bird, whom he names \"Kevin\".",
        "Names(russell, kevin) ::: Russell names the bird \"Kevin\".",
        "Vows(dug, take_kevin_to_master) ::: Dug vows to take Kevin to his master.",
        "Aims(carl, reach_paradise_falls) ::: Carl aims to reach Paradise Falls before the balloons deflate.",
        "Aims(russell, reach_paradise_falls) ::: Russell aims to reach Paradise Falls before the balloons deflate."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 185,
      "context_id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 2,
      "paragraph": "The group is set upon by a pack of aggressive dogs led by Alpha, a doberman (who is also seeking the bird), and are taken to their master, who turns out to be an elderly Charles Muntz. Muntz invites Carl and Russell aboard his dirigible, where he explains that he has spent years since his disgrace searching for the giant bird. When Russell notes the bird's similarity to Kevin, Muntz becomes hostile, believing they have been attempting to steal the bird. The pair flees with Kevin and Dug, but Muntz catches up with them, captures Kevin and starts a fire beneath Carl's house, forcing him to choose between saving it or Kevin. Carl rushes to put out the fire, allowing Muntz to take the bird. He and Russell eventually reach the falls, though Russell is disappointed in Carl over his decision to abandon Kevin.",
      "question_template": "[[CANDIDATE_ANSWER]] is what Charles Muntz is famous for.",
      "candidate_answers": [
        "An elderly Charles Muntz",
        "Searching for the giant bird",
        "His disgrace"
      ],
      "predicates": [
        "Hostile(x) ::: x is hostile.",
        "Seeking(x, y) ::: x is seeking y.",
        "Captured(x, y) ::: x captures y.",
        "Invites(x, y) ::: x invites y aboard y.",
        "Explains(x, y) ::: x explains y.",
        "Flees(x, y) ::: x flees with y.",
        "CatchesUp(x, y) ::: x catches up with y.",
        "StartsFire(x, y) ::: x starts a fire beneath y.",
        "Chooses(x, y, z) ::: x chooses between y and z.",
        "Disappointed(x, y) ::: x is disappointed in y."
      ],
      "premises": [
        "Hostile(muntz) ∧ Believes(muntz, Stealing(carl, russell, bird)) ::: Charles Muntz becomes hostile when he believes Carl and Russell are attempting to steal the bird.",
        "Forced(carl, Choose(carl, house, kevin)) ::: Carl is forced to choose between saving his house or Kevin.",
        "Seeking(muntz, bird) ::: Muntz is seeking the bird.",
        "Captured(muntz, kevin) ::: Muntz captures Kevin.",
        "Invites(muntz, dirigible) ::: Muntz invites Carl and Russell aboard his dirigible.",
        "Explains(muntz, searchingForGiantBird) ::: Muntz explains that he has spent years searching for the giant bird.",
        "Flees(carl, russell) ::: Carl flees with Russell.",
        "CatchesUp(muntz, carl) ::: Muntz catches up with Carl.",
        "StartsFire(muntz, house) ::: Muntz starts a fire beneath Carl's house.",
        "Chooses(carl, house, kevin) ::: Carl chooses between saving his house or Kevin.",
        "Disappointed(russell, carl) ::: Russell is disappointed in Carl over his decision to abandon Kevin."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "186": [
    {
      "id": 186,
      "context_id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 1,
      "paragraph": "Years later, Carl still lives in the house, stubbornly holding out as the surrounding neighborhood is torn down for new construction, but when he accidentally injures a construction worker over damage to his mailbox, a court orders him to move to a retirement home. However, Carl comes up with a scheme to keep his promise to Ellie, and turns his house into a makeshift airship, using thousands of helium balloons. Russell, a young Wilderness Explorer, becomes an accidental stowaway in his effort to earn his final merit badge for assisting the elderly. After surviving a thunderstorm, the flying house lands on a tepui opposite Paradise Falls. Carl and Russell harness themselves to the still-buoyant house and begin to walk it across the mesa, hoping to reach the falls before the balloons deflate. Russell encounters a tall, colorful flightless bird, whom he names \"Kevin\". They then meet a Golden Retriever named Dug, who wears a special collar that allows him to speak, and who vows to take the bird to his master.",
      "question_template": "Carl and Ellie make a plan involving [[CANDIDATE_ANSWER]] after Ellie miscarries.",
      "candidate_answers": [
        "- Carl comes up with a scheme to keep his promise to Ellie",
        "- Turns his house into a makeshift airship",
        "- Using thousands of helium balloons"
      ],
      "predicates": [
        "LivesIn(x, y) ::: x lives in y.",
        "Injures(x, y) ::: x injures y.",
        "CourtOrders(x, y) ::: x is ordered by the court to do y.",
        "TurnsInto(x, y) ::: x turns into y.",
        "AccidentalStowaway(x, y) ::: x is an accidental stowaway in y's effort.",
        "Survives(x, y) ::: x survives y.",
        "Lands(x, y) ::: x lands in y.",
        "Harnesses(x, y) ::: x harnesses y.",
        "Walks(x, y) ::: x walks y.",
        "Encounters(x, y) ::: x encounters y.",
        "Names(x, y) ::: x names y.",
        "Vows(x, y) ::: x vows to do y."
      ],
      "premises": [
        "LivesIn(carl, house) ::: Carl still lives in the house.",
        "Injures(carl, construction_worker) ::: Carl accidentally injures a construction worker.",
        "CourtOrders(court, move_to_retirement_home) ::: A court orders Carl to move to a retirement home.",
        "TurnsInto(carl, makeshift_airship) ::: Carl turns his house into a makeshift airship.",
        "AccidentalStowaway(russell, carl) ::: Russell becomes an accidental stowaway in Carl's effort.",
        "Survives(russell, thunderstorm) ::: Russell survives a thunderstorm.",
        "Lands(carl_airship, tepui) ::: The flying house lands on a tepui opposite Paradise Falls.",
        "Harnesses(carl, house) ::: Carl harnesses himself to the still-buoyant house.",
        "Walks(carl, mesa) ::: Carl walks the house across the mesa.",
        "Encounters(russell, kevin) ::: Russell encounters a tall, colorful flightless bird, whom he names \"Kevin\".",
        "Names(russell, kevin) ::: Russell names the bird \"Kevin\".",
        "Vows(dug, take_kevin_to_master) ::: Dug vows to take Kevin to his master.",
        "Aims(carl, reach_paradise_falls) ::: Carl aims to reach Paradise Falls before the balloons deflate.",
        "Aims(russell, reach_paradise_falls) ::: Russell aims to reach Paradise Falls before the balloons deflate."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 186,
      "context_id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 3,
      "paragraph": "Settling into his home, Carl looks through Ellie's childhood scrapbook, and is surprised to find that she has filled in the blank pages with photos of their marriage, along with a note thanking him for the \"adventure\" and encouraging him to go have a new one. Reinvigorated, he goes to find Russell, only to see him sailing off with some balloons to save Kevin on his own. Carl empties the house of furniture and possessions, lightening it, and pursues him. Russell is captured by Muntz, but Carl manages to board the dirigible in flight and free both him and Kevin. Dug accidentally defeats Alpha and becomes the dogs' new leader. Muntz pursues them around the airship, finally cornering Dug, Kevin, and Russell inside Carl's tethered house. Carl lures Kevin back onto the airship with Dug and Russell clinging to her back, but when Muntz leaps after them, he snags his foot on some balloon lines and falls to his death. The house then descends out of sight through the clouds.",
      "question_template": "Carl and Ellie make a plan involving [[CANDIDATE_ANSWER]] after Ellie miscarries.",
      "candidate_answers": [
        "- Filled in the blank pages with photos of their marriage",
        "- A note thanking him for the \"adventure\" and encouraging him to go have a new one"
      ],
      "predicates": [
        "Home(x) ::: x is a home.",
        "Scrapbook(x) ::: x is a scrapbook.",
        "Filled(x, y) ::: x is filled with y.",
        "Thank(x, y) ::: x thanks y.",
        "Adventure(x) ::: x is an adventure.",
        "Lighten(x) ::: x is lightened of possessions.",
        "Pursue(x, y) ::: x pursues y.",
        "Captured(x, y) ::: x is captured by y.",
        "Board(x, y) ::: x boards y.",
        "Free(x, y) ::: x frees y.",
        "AccidentallyDefeat(x, y) ::: x accidentally defeats y.",
        "Leader(x, y) ::: x becomes the leader of y.",
        "Pursue(x, y) ::: x pursues y.",
        "Corner(x, y, z) ::: x corners y and z.",
        "Lure(x, y) ::: x lures y.",
        "Fall(x) ::: x falls.",
        "Death(x) ::: x meets death."
      ],
      "premises": [
        "Home(carlHome) ∧ Scrapbook(ellieScrapbook) ∧ Filled(ellieScrapbook, photosOfMarriage) ∧ Thank(ellie, carl) ∧ Adventure(adventureNote) ::: Carl looks through Ellie's childhood scrapbook and finds it filled with photos of their marriage and a note thanking him for the adventure.",
        "Lighten(carlHome) ∧ Pursue(carl, russell) ::: Carl empties the house of furniture and possessions, lightening it, and pursues Russell.",
        "Captured(russell, muntz) ∧ Board(carl, dirigible) ∧ Free(carl, russell) ∧ Free(carl, kevin) ::: Russell is captured by Muntz, but Carl manages to board the dirigible in flight and free both him and Kevin.",
        "AccidentallyDefeat(dug, alpha) ∧ Leader(dug, dogs) ::: Dug accidentally defeats Alpha and becomes the new leader of the dogs.",
        "Pursue(muntz, carl) ∧ Fall(muntz) ∧ Death(muntz) ::: Muntz pursues them around the airship, but ends with his death after falling from the airship.",
        "Lure(carl, kevin) ∧ Corner(muntz, dug, russell) ::: Carl lures Kevin back onto the airship while Muntz corners Dug, Kevin, and Russell inside Carl's tethered house.",
        "Conclusion:",
        "Pursue(carl, russell) ::: Carl pursues Russell after being reinvigorated.",
        "Free(carl, russell) ∧ Free(carl, kevin) ::: Carl frees both Russell and Kevin."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "187": [
    {
      "id": 187,
      "context_id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 1,
      "paragraph": "Years later, Carl still lives in the house, stubbornly holding out as the surrounding neighborhood is torn down for new construction, but when he accidentally injures a construction worker over damage to his mailbox, a court orders him to move to a retirement home. However, Carl comes up with a scheme to keep his promise to Ellie, and turns his house into a makeshift airship, using thousands of helium balloons. Russell, a young Wilderness Explorer, becomes an accidental stowaway in his effort to earn his final merit badge for assisting the elderly. After surviving a thunderstorm, the flying house lands on a tepui opposite Paradise Falls. Carl and Russell harness themselves to the still-buoyant house and begin to walk it across the mesa, hoping to reach the falls before the balloons deflate. Russell encounters a tall, colorful flightless bird, whom he names \"Kevin\". They then meet a Golden Retriever named Dug, who wears a special collar that allows him to speak, and who vows to take the bird to his master.",
      "question_template": "After Carl injures a construction worker for messing up his mailbox, [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- A court orders him to move to a retirement home.",
        "- Carl comes up with a scheme to keep his promise to Ellie.",
        "- He turns his house into a makeshift airship, using thousands of helium balloons."
      ],
      "predicates": [
        "LivesIn(x, y) ::: x lives in y.",
        "Injures(x, y) ::: x injures y.",
        "CourtOrders(x, y) ::: x is ordered by the court to do y.",
        "TurnsInto(x, y) ::: x turns into y.",
        "AccidentalStowaway(x, y) ::: x is an accidental stowaway in y's effort.",
        "Survives(x, y) ::: x survives y.",
        "Lands(x, y) ::: x lands in y.",
        "Harnesses(x, y) ::: x harnesses y.",
        "Walks(x, y) ::: x walks y.",
        "Encounters(x, y) ::: x encounters y.",
        "Names(x, y) ::: x names y.",
        "Vows(x, y) ::: x vows to do y."
      ],
      "premises": [
        "LivesIn(carl, house) ::: Carl still lives in the house.",
        "Injures(carl, construction_worker) ::: Carl accidentally injures a construction worker.",
        "CourtOrders(court, move_to_retirement_home) ::: A court orders Carl to move to a retirement home.",
        "TurnsInto(carl, makeshift_airship) ::: Carl turns his house into a makeshift airship.",
        "AccidentalStowaway(russell, carl) ::: Russell becomes an accidental stowaway in Carl's effort.",
        "Survives(russell, thunderstorm) ::: Russell survives a thunderstorm.",
        "Lands(carl_airship, tepui) ::: The flying house lands on a tepui opposite Paradise Falls.",
        "Harnesses(carl, house) ::: Carl harnesses himself to the still-buoyant house.",
        "Walks(carl, mesa) ::: Carl walks the house across the mesa.",
        "Encounters(russell, kevin) ::: Russell encounters a tall, colorful flightless bird, whom he names \"Kevin\".",
        "Names(russell, kevin) ::: Russell names the bird \"Kevin\".",
        "Vows(dug, take_kevin_to_master) ::: Dug vows to take Kevin to his master.",
        "Aims(carl, reach_paradise_falls) ::: Carl aims to reach Paradise Falls before the balloons deflate.",
        "Aims(russell, reach_paradise_falls) ::: Russell aims to reach Paradise Falls before the balloons deflate."
      ],
      "conclusions": [
        "CourtOrders(court, move_to_retirement_home) ∧ Injures(carl, construction_worker)",
        "TurnsInto(carl, makeshift_airship) ∧ Injures(carl, construction_worker)",
        "TurnsInto(carl, makeshift_airship)"
      ]
    }
  ],
  "189": [
    {
      "id": 189,
      "context_id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 1,
      "paragraph": "Years later, Carl still lives in the house, stubbornly holding out as the surrounding neighborhood is torn down for new construction, but when he accidentally injures a construction worker over damage to his mailbox, a court orders him to move to a retirement home. However, Carl comes up with a scheme to keep his promise to Ellie, and turns his house into a makeshift airship, using thousands of helium balloons. Russell, a young Wilderness Explorer, becomes an accidental stowaway in his effort to earn his final merit badge for assisting the elderly. After surviving a thunderstorm, the flying house lands on a tepui opposite Paradise Falls. Carl and Russell harness themselves to the still-buoyant house and begin to walk it across the mesa, hoping to reach the falls before the balloons deflate. Russell encounters a tall, colorful flightless bird, whom he names \"Kevin\". They then meet a Golden Retriever named Dug, who wears a special collar that allows him to speak, and who vows to take the bird to his master.",
      "question_template": "[[CANDIDATE_ANSWER]] is Kevin.",
      "candidate_answers": [
        "A tall, colorful flightless bird"
      ],
      "predicates": [
        "LivesIn(x, y) ::: x lives in y.",
        "Injures(x, y) ::: x injures y.",
        "CourtOrders(x, y) ::: x is ordered by the court to do y.",
        "TurnsInto(x, y) ::: x turns into y.",
        "AccidentalStowaway(x, y) ::: x is an accidental stowaway in y's effort.",
        "Survives(x, y) ::: x survives y.",
        "Lands(x, y) ::: x lands in y.",
        "Harnesses(x, y) ::: x harnesses y.",
        "Walks(x, y) ::: x walks y.",
        "Encounters(x, y) ::: x encounters y.",
        "Names(x, y) ::: x names y.",
        "Vows(x, y) ::: x vows to do y."
      ],
      "premises": [
        "LivesIn(carl, house) ::: Carl still lives in the house.",
        "Injures(carl, construction_worker) ::: Carl accidentally injures a construction worker.",
        "CourtOrders(court, move_to_retirement_home) ::: A court orders Carl to move to a retirement home.",
        "TurnsInto(carl, makeshift_airship) ::: Carl turns his house into a makeshift airship.",
        "AccidentalStowaway(russell, carl) ::: Russell becomes an accidental stowaway in Carl's effort.",
        "Survives(russell, thunderstorm) ::: Russell survives a thunderstorm.",
        "Lands(carl_airship, tepui) ::: The flying house lands on a tepui opposite Paradise Falls.",
        "Harnesses(carl, house) ::: Carl harnesses himself to the still-buoyant house.",
        "Walks(carl, mesa) ::: Carl walks the house across the mesa.",
        "Encounters(russell, kevin) ::: Russell encounters a tall, colorful flightless bird, whom he names \"Kevin\".",
        "Names(russell, kevin) ::: Russell names the bird \"Kevin\".",
        "Vows(dug, take_kevin_to_master) ::: Dug vows to take Kevin to his master.",
        "Aims(carl, reach_paradise_falls) ::: Carl aims to reach Paradise Falls before the balloons deflate.",
        "Aims(russell, reach_paradise_falls) ::: Russell aims to reach Paradise Falls before the balloons deflate."
      ],
      "conclusions": [
        "Names(russell, kevin)"
      ]
    },
    {
      "id": 189,
      "context_id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 2,
      "paragraph": "The group is set upon by a pack of aggressive dogs led by Alpha, a doberman (who is also seeking the bird), and are taken to their master, who turns out to be an elderly Charles Muntz. Muntz invites Carl and Russell aboard his dirigible, where he explains that he has spent years since his disgrace searching for the giant bird. When Russell notes the bird's similarity to Kevin, Muntz becomes hostile, believing they have been attempting to steal the bird. The pair flees with Kevin and Dug, but Muntz catches up with them, captures Kevin and starts a fire beneath Carl's house, forcing him to choose between saving it or Kevin. Carl rushes to put out the fire, allowing Muntz to take the bird. He and Russell eventually reach the falls, though Russell is disappointed in Carl over his decision to abandon Kevin.",
      "question_template": "[[CANDIDATE_ANSWER]] is Kevin.",
      "candidate_answers": [
        "the giant bird",
        "the bird's similarity to Kevin"
      ],
      "predicates": [
        "Hostile(x) ::: x is hostile.",
        "Seeking(x, y) ::: x is seeking y.",
        "Captured(x, y) ::: x captures y.",
        "Invites(x, y) ::: x invites y aboard y.",
        "Explains(x, y) ::: x explains y.",
        "Flees(x, y) ::: x flees with y.",
        "CatchesUp(x, y) ::: x catches up with y.",
        "StartsFire(x, y) ::: x starts a fire beneath y.",
        "Chooses(x, y, z) ::: x chooses between y and z.",
        "Disappointed(x, y) ::: x is disappointed in y."
      ],
      "premises": [
        "Hostile(muntz) ∧ Believes(muntz, Stealing(carl, russell, bird)) ::: Charles Muntz becomes hostile when he believes Carl and Russell are attempting to steal the bird.",
        "Forced(carl, Choose(carl, house, kevin)) ::: Carl is forced to choose between saving his house or Kevin.",
        "Seeking(muntz, bird) ::: Muntz is seeking the bird.",
        "Captured(muntz, kevin) ::: Muntz captures Kevin.",
        "Invites(muntz, dirigible) ::: Muntz invites Carl and Russell aboard his dirigible.",
        "Explains(muntz, searchingForGiantBird) ::: Muntz explains that he has spent years searching for the giant bird.",
        "Flees(carl, russell) ::: Carl flees with Russell.",
        "CatchesUp(muntz, carl) ::: Muntz catches up with Carl.",
        "StartsFire(muntz, house) ::: Muntz starts a fire beneath Carl's house.",
        "Chooses(carl, house, kevin) ::: Carl chooses between saving his house or Kevin.",
        "Disappointed(russell, carl) ::: Russell is disappointed in Carl over his decision to abandon Kevin."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 189,
      "context_id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 4,
      "paragraph": "Carl and Russell reunite Kevin with her chicks, then fly the dirigible back to the city. Carl presents Russell with his final badge: a grape soda cap that Ellie gave to Carl when they first met and made their promise. The two and Dug then enjoy some ice cream together. Meanwhile, Carl's house has landed on the cliff beside Paradise Falls, fulfilling his promise to Ellie.",
      "question_template": "[[CANDIDATE_ANSWER]] is Kevin.",
      "candidate_answers": [
        "Kevin is a character that is reunited with her chicks."
      ],
      "predicates": [
        "Reunites(x, y) ::: x reunites y with her chicks.",
        "Flies(x, y) ::: x flies y back to the city.",
        "Presents(x, y, z) ::: x presents y with z.",
        "Enjoys(x, y) ::: x enjoys y.",
        "Lands(x, y) ::: x lands on y.",
        "FulfillsPromise(x, y) ::: x fulfills a promise to y.",
        "Symbolizes(x, y) ::: x symbolizes y."
      ],
      "premises": [
        "Reunites(carl, chicks) ::: Carl reunites Kevin with her chicks.",
        "Flies(carl, dirigible) ::: Carl flies the dirigible back to the city.",
        "Presents(carl, russell, grapeSodaCap) ::: Carl presents Russell with his final badge: a grape soda cap that Ellie gave to Carl when they first met and made their promise.",
        "Enjoys(carl, iceCream) ∧ Enjoys(russell, iceCream) ∧ Enjoys(dug, iceCream) ::: The two and Dug enjoy some ice cream together.",
        "Lands(carl'sHouse, cliff) ::: Carl's house has landed on the cliff beside Paradise Falls.",
        "FulfillsPromise(carl, ellie) ::: Carl fulfills his promise to Ellie.",
        "Symbolizes(grapeSodaCap, promise) ::: The grape soda cap symbolizes the promise made between Carl and Ellie."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "190": [
    {
      "id": 190,
      "context_id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 1,
      "paragraph": "Years later, Carl still lives in the house, stubbornly holding out as the surrounding neighborhood is torn down for new construction, but when he accidentally injures a construction worker over damage to his mailbox, a court orders him to move to a retirement home. However, Carl comes up with a scheme to keep his promise to Ellie, and turns his house into a makeshift airship, using thousands of helium balloons. Russell, a young Wilderness Explorer, becomes an accidental stowaway in his effort to earn his final merit badge for assisting the elderly. After surviving a thunderstorm, the flying house lands on a tepui opposite Paradise Falls. Carl and Russell harness themselves to the still-buoyant house and begin to walk it across the mesa, hoping to reach the falls before the balloons deflate. Russell encounters a tall, colorful flightless bird, whom he names \"Kevin\". They then meet a Golden Retriever named Dug, who wears a special collar that allows him to speak, and who vows to take the bird to his master.",
      "question_template": "[[CANDIDATE_ANSWER]] is special about Dug the golden retriever.",
      "candidate_answers": [
        "A special collar that allows him to speak"
      ],
      "predicates": [
        "LivesIn(x, y) ::: x lives in y.",
        "Injures(x, y) ::: x injures y.",
        "CourtOrders(x, y) ::: x is ordered by the court to do y.",
        "TurnsInto(x, y) ::: x turns into y.",
        "AccidentalStowaway(x, y) ::: x is an accidental stowaway in y's effort.",
        "Survives(x, y) ::: x survives y.",
        "Lands(x, y) ::: x lands in y.",
        "Harnesses(x, y) ::: x harnesses y.",
        "Walks(x, y) ::: x walks y.",
        "Encounters(x, y) ::: x encounters y.",
        "Names(x, y) ::: x names y.",
        "Vows(x, y) ::: x vows to do y."
      ],
      "premises": [
        "LivesIn(carl, house) ::: Carl still lives in the house.",
        "Injures(carl, construction_worker) ::: Carl accidentally injures a construction worker.",
        "CourtOrders(court, move_to_retirement_home) ::: A court orders Carl to move to a retirement home.",
        "TurnsInto(carl, makeshift_airship) ::: Carl turns his house into a makeshift airship.",
        "AccidentalStowaway(russell, carl) ::: Russell becomes an accidental stowaway in Carl's effort.",
        "Survives(russell, thunderstorm) ::: Russell survives a thunderstorm.",
        "Lands(carl_airship, tepui) ::: The flying house lands on a tepui opposite Paradise Falls.",
        "Harnesses(carl, house) ::: Carl harnesses himself to the still-buoyant house.",
        "Walks(carl, mesa) ::: Carl walks the house across the mesa.",
        "Encounters(russell, kevin) ::: Russell encounters a tall, colorful flightless bird, whom he names \"Kevin\".",
        "Names(russell, kevin) ::: Russell names the bird \"Kevin\".",
        "Vows(dug, take_kevin_to_master) ::: Dug vows to take Kevin to his master.",
        "Aims(carl, reach_paradise_falls) ::: Carl aims to reach Paradise Falls before the balloons deflate.",
        "Aims(russell, reach_paradise_falls) ::: Russell aims to reach Paradise Falls before the balloons deflate."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 190,
      "context_id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 3,
      "paragraph": "Settling into his home, Carl looks through Ellie's childhood scrapbook, and is surprised to find that she has filled in the blank pages with photos of their marriage, along with a note thanking him for the \"adventure\" and encouraging him to go have a new one. Reinvigorated, he goes to find Russell, only to see him sailing off with some balloons to save Kevin on his own. Carl empties the house of furniture and possessions, lightening it, and pursues him. Russell is captured by Muntz, but Carl manages to board the dirigible in flight and free both him and Kevin. Dug accidentally defeats Alpha and becomes the dogs' new leader. Muntz pursues them around the airship, finally cornering Dug, Kevin, and Russell inside Carl's tethered house. Carl lures Kevin back onto the airship with Dug and Russell clinging to her back, but when Muntz leaps after them, he snags his foot on some balloon lines and falls to his death. The house then descends out of sight through the clouds.",
      "question_template": "[[CANDIDATE_ANSWER]] is special about Dug the golden retriever.",
      "candidate_answers": [
        "Dug accidentally defeats Alpha and becomes the dogs' new leader."
      ],
      "predicates": [
        "Home(x) ::: x is a home.",
        "Scrapbook(x) ::: x is a scrapbook.",
        "Filled(x, y) ::: x is filled with y.",
        "Thank(x, y) ::: x thanks y.",
        "Adventure(x) ::: x is an adventure.",
        "Lighten(x) ::: x is lightened of possessions.",
        "Pursue(x, y) ::: x pursues y.",
        "Captured(x, y) ::: x is captured by y.",
        "Board(x, y) ::: x boards y.",
        "Free(x, y) ::: x frees y.",
        "AccidentallyDefeat(x, y) ::: x accidentally defeats y.",
        "Leader(x, y) ::: x becomes the leader of y.",
        "Pursue(x, y) ::: x pursues y.",
        "Corner(x, y, z) ::: x corners y and z.",
        "Lure(x, y) ::: x lures y.",
        "Fall(x) ::: x falls.",
        "Death(x) ::: x meets death."
      ],
      "premises": [
        "Home(carlHome) ∧ Scrapbook(ellieScrapbook) ∧ Filled(ellieScrapbook, photosOfMarriage) ∧ Thank(ellie, carl) ∧ Adventure(adventureNote) ::: Carl looks through Ellie's childhood scrapbook and finds it filled with photos of their marriage and a note thanking him for the adventure.",
        "Lighten(carlHome) ∧ Pursue(carl, russell) ::: Carl empties the house of furniture and possessions, lightening it, and pursues Russell.",
        "Captured(russell, muntz) ∧ Board(carl, dirigible) ∧ Free(carl, russell) ∧ Free(carl, kevin) ::: Russell is captured by Muntz, but Carl manages to board the dirigible in flight and free both him and Kevin.",
        "AccidentallyDefeat(dug, alpha) ∧ Leader(dug, dogs) ::: Dug accidentally defeats Alpha and becomes the new leader of the dogs.",
        "Pursue(muntz, carl) ∧ Fall(muntz) ∧ Death(muntz) ::: Muntz pursues them around the airship, but ends with his death after falling from the airship.",
        "Lure(carl, kevin) ∧ Corner(muntz, dug, russell) ::: Carl lures Kevin back onto the airship while Muntz corners Dug, Kevin, and Russell inside Carl's tethered house.",
        "Conclusion:",
        "Pursue(carl, russell) ::: Carl pursues Russell after being reinvigorated.",
        "Free(carl, russell) ∧ Free(carl, kevin) ::: Carl frees both Russell and Kevin."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "192": [
    {
      "id": 192,
      "context_id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 1,
      "paragraph": "Years later, Carl still lives in the house, stubbornly holding out as the surrounding neighborhood is torn down for new construction, but when he accidentally injures a construction worker over damage to his mailbox, a court orders him to move to a retirement home. However, Carl comes up with a scheme to keep his promise to Ellie, and turns his house into a makeshift airship, using thousands of helium balloons. Russell, a young Wilderness Explorer, becomes an accidental stowaway in his effort to earn his final merit badge for assisting the elderly. After surviving a thunderstorm, the flying house lands on a tepui opposite Paradise Falls. Carl and Russell harness themselves to the still-buoyant house and begin to walk it across the mesa, hoping to reach the falls before the balloons deflate. Russell encounters a tall, colorful flightless bird, whom he names \"Kevin\". They then meet a Golden Retriever named Dug, who wears a special collar that allows him to speak, and who vows to take the bird to his master.",
      "question_template": "Carl gave [[CANDIDATE_ANSWER]] to Russell for his final merit badge.",
      "candidate_answers": [
        "Russell, a young Wilderness Explorer",
        "An accidental stowaway in his effort to earn his final merit badge for assisting the elderly",
        "A tall, colorful flightless bird, whom he names \"Kevin\"",
        "A Golden Retriever named Dug, who wears a special collar that allows him to speak"
      ],
      "predicates": [
        "LivesIn(x, y) ::: x lives in y.",
        "Injures(x, y) ::: x injures y.",
        "CourtOrders(x, y) ::: x is ordered by the court to do y.",
        "TurnsInto(x, y) ::: x turns into y.",
        "AccidentalStowaway(x, y) ::: x is an accidental stowaway in y's effort.",
        "Survives(x, y) ::: x survives y.",
        "Lands(x, y) ::: x lands in y.",
        "Harnesses(x, y) ::: x harnesses y.",
        "Walks(x, y) ::: x walks y.",
        "Encounters(x, y) ::: x encounters y.",
        "Names(x, y) ::: x names y.",
        "Vows(x, y) ::: x vows to do y."
      ],
      "premises": [
        "LivesIn(carl, house) ::: Carl still lives in the house.",
        "Injures(carl, construction_worker) ::: Carl accidentally injures a construction worker.",
        "CourtOrders(court, move_to_retirement_home) ::: A court orders Carl to move to a retirement home.",
        "TurnsInto(carl, makeshift_airship) ::: Carl turns his house into a makeshift airship.",
        "AccidentalStowaway(russell, carl) ::: Russell becomes an accidental stowaway in Carl's effort.",
        "Survives(russell, thunderstorm) ::: Russell survives a thunderstorm.",
        "Lands(carl_airship, tepui) ::: The flying house lands on a tepui opposite Paradise Falls.",
        "Harnesses(carl, house) ::: Carl harnesses himself to the still-buoyant house.",
        "Walks(carl, mesa) ::: Carl walks the house across the mesa.",
        "Encounters(russell, kevin) ::: Russell encounters a tall, colorful flightless bird, whom he names \"Kevin\".",
        "Names(russell, kevin) ::: Russell names the bird \"Kevin\".",
        "Vows(dug, take_kevin_to_master) ::: Dug vows to take Kevin to his master.",
        "Aims(carl, reach_paradise_falls) ::: Carl aims to reach Paradise Falls before the balloons deflate.",
        "Aims(russell, reach_paradise_falls) ::: Russell aims to reach Paradise Falls before the balloons deflate."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "194": [
    {
      "id": 194,
      "context_id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 0,
      "paragraph": " Travel agent Paul Barnell (Robin Williams) finds a body in a dumpster that, unbeknownst to him, was left there by Mafia hitmen. Heavily in debt and attempting to find a cure for his wife Margaret's (Holly Hunter) apparent Tourette Syndrome, he stages a disfiguring animal attack with the body in order to cash in his missing brother's life-insurance policy, for which a corpse is required.",
      "question_template": "Paul finds [[CANDIDATE_ANSWER]] in a dumpster.",
      "candidate_answers": [
        "a body in a dumpster",
        "the body left there by Mafia hitmen"
      ],
      "predicates": [
        "HeavilyInDebt(x) ::: x is heavily in debt.",
        "FindsBody(x, y) ::: x finds body y.",
        "LeftByMafiaHitmen(y) ::: body y was left by Mafia hitmen.",
        "AttemptsToFindCure(x, y) ::: x attempts to find a cure for y.",
        "StagesAttack(x, y) ::: x stages an attack involving y.",
        "DisfiguringAnimalAttack(y) ::: y is a disfiguring animal attack.",
        "CashInPolicy(x, y) ::: x cashes in y's life-insurance policy.",
        "CorpseRequired(y) ::: y requires a corpse."
      ],
      "premises": [
        "HeavilyInDebt(a_1) ::: Paul Barnell is heavily in debt.",
        "FindsBody(a_1, b) ::: Paul finds a body in a dumpster.",
        "LeftByMafiaHitmen(b) ::: The body was left there by Mafia hitmen.",
        "AttemptsToFindCure(a_1, a_3) ::: Paul attempts to find a cure for his wife Margaret's apparent Tourette Syndrome.",
        "StagesAttack(a_1, b) ::: Paul stages a disfiguring animal attack with the body.",
        "CashInPolicy(a_1, b_1) ::: Paul cashes in his missing brother's life-insurance policy.",
        "CorpseRequired(b_1) ::: The life-insurance policy requires a corpse.",
        "Conclusion:",
        "MotivatedByDebtAndCorpse(a_1) ::: Paul Barnell's actions are motivated by his debt and the need for a corpse to claim the life-insurance policy."
      ],
      "conclusions": [
        "None",
        "FindsBody(a_1, b) ∧ LeftByMafiaHitmen(b)"
      ]
    }
  ],
  "197": [
    {
      "id": 197,
      "context_id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 2,
      "paragraph": "Paul's missing brother Raymond (Woody Harrelson) returns home, beats him up, and demands a portion of the insurance money. By suggesting that Ted assaulted him, Paul speeds up the delivery of the million dollar insurance payment. He has the body exhumed and agrees to exchange it and a portion of the money for Margaret. Fearing that Raymond will attempt to kill Margaret to keep her quiet, Paul considers killing his brother in his sleep, but cannot bring himself to do so.",
      "question_template": "Paul wishes to inherit [[CANDIDATE_ANSWER]] from his missing brother.",
      "candidate_answers": [
        "A portion of the insurance money",
        "The million dollar insurance payment"
      ],
      "predicates": [
        "MissingBrother(x) ::: x is a missing brother.",
        "Beats(x, y) ::: x beats y.",
        "Demands(x, y) ::: x demands y.",
        "Suggests(x, y) ::: x suggests that y.",
        "SpeedsUpDelivery(x, y) ::: x speeds up the delivery of y.",
        "Exhume(x) ::: x is exhumed.",
        "AgreesToExchange(x, y, z) ::: x agrees to exchange y for z.",
        "Fears(x, y) ::: x fears y.",
        "ConsidersKilling(x, y) ::: x considers killing y.",
        "CannotDo(x) ::: x cannot do something."
      ],
      "premises": [
        "MissingBrother(raymond) ∧ Beats(raymond, paul) ∧ Demands(raymond, portionOfInsurance) ::: Raymond is Paul's missing brother, beats him up, and demands a portion of the insurance money.",
        "Suggests(pauls, TedAssaulted(raymond)) ∧ SpeedsUpDelivery(pauls, millionDollarInsurancePayment) ::: Paul speeds up the delivery of the million dollar insurance payment by suggesting that Ted assaulted Raymond.",
        "Exhume(body) ∧ AgreesToExchange(pauls, body, margaret) ::: Paul has the body exhumed and agrees to exchange it and a portion of the money for Margaret.",
        "Fears(pauls, RaymondWillKill(margaret)) ::: Paul fears that Raymond will attempt to kill Margaret to keep her quiet.",
        "ConsidersKilling(pauls, raymond) ∧ CannotDo(pauls) ::: Paul considers killing Raymond but cannot bring himself to do so."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 197,
      "context_id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 3,
      "paragraph": "The next morning Paul leaves his brother asleep and meets the hit-men for the exchange. Raymond is angered at his brother's deception and arrives as well, and is told by the insurance agent, who has finally pieced together what has happened, about his million dollar policy. Raymond then pulls out a pistol and shoots Margaret in the back as she flees. He is in turn shot in the stomach by one of the hit-men (Tim Nelson). Paul finds Margaret alive; he had hidden the insurance money in her jacket, and it stopped the bullet. The brothers say goodbye as Raymond dies. Paul tells Ted that he only committed fraud out of love for his wife, which appeals to Ted's renewed feelings for Tiffany; touched, he lets them go. Using the money, Paul takes Margaret on a tropical vacation.",
      "question_template": "Paul wishes to inherit [[CANDIDATE_ANSWER]] from his missing brother.",
      "candidate_answers": [
        "- A million dollar policy",
        "- The insurance money"
      ],
      "predicates": [
        "Asleep(x) ::: x is asleep.",
        "Meets(x, y) ::: x meets y.",
        "Angered(x, y) ::: x is angered at y's actions.",
        "ToldBy(x, y, z) ::: x is told by y about z.",
        "Shoots(x, y) ::: x shoots y.",
        "ShotBy(x, y) ::: x is shot by y.",
        "Finds(x, y) ::: x finds y.",
        "Hidden(x, y) ::: x has hidden y.",
        "CommitsFraud(x, y) ::: x commits fraud out of love for y.",
        "LetsGo(x, y) ::: x lets y go.",
        "TakesOnVacation(x, y) ::: x takes y on vacation."
      ],
      "premises": [
        "Asleep(a_2) ::: Raymond is asleep.",
        "Meets(a_1, hit_men) ::: Paul meets the hit-men for the exchange.",
        "Angered(a_2, a_1) ::: Raymond is angered at Paul's deception.",
        "ToldBy(a_2, insurance_agent, million_dollar_policy) ::: Raymond is told by the insurance agent about his million dollar policy.",
        "Shoots(a_2, a_3) ::: Raymond shoots Margaret in the back.",
        "ShotBy(a_2, hit_man) ::: Raymond is shot in the stomach by one of the hit-men (Tim Nelson).",
        "Finds(a_1, a_3) ::: Paul finds Margaret alive.",
        "Hidden(a_1, insurance_money) ::: Paul has hidden the insurance money in Margaret's jacket.",
        "CommitsFraud(a_1, a_3) ::: Paul commits fraud out of love for his wife (Margaret).",
        "LetsGo(a_4, a_1) ::: Ted lets Paul and Margaret go.",
        "TakesOnVacation(a_1, tropical_vacation) ::: Paul takes Margaret on a tropical vacation.",
        "Conclusion:",
        "Raymond dies after being shot by a hit-man.",
        "Paul's actions are motivated by love for his wife."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "198": [
    {
      "id": 198,
      "context_id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 1,
      "paragraph": "Local police are convinced, but promotion-hungry insurance agent Ted Waters (Giovanni Ribisi) is not. The hitmen who dumped the body are also in search of the corpse for proof to collect their payment. They take Margaret hostage to ensure that they will get the body. Meanwhile, Ted is having problems with his girlfriend, Tiffany (Alison Lohman), who he neglects as he works his way up in his firm.",
      "question_template": "[[CANDIDATE_ANSWER]] is Ted Waters' occupation.",
      "candidate_answers": [
        "insurance agent"
      ],
      "predicates": [
        "Convinced(x) ::: x is convinced by the local police.",
        "PromotionHungry(x) ::: x is eager for promotion.",
        "InSearchOf(x, y) ::: x is in search of y.",
        "Hostage(x, y) ::: x is holding y hostage.",
        "Neglects(x, y) ::: x neglects y.",
        "WorksUp(x) ::: x is working his way up in his firm."
      ],
      "premises": [
        "Convinced(localPolice) ∧ ¬Convinced(ted) ::: Local police are convinced, but promotion-hungry insurance agent Ted Waters is not.",
        "∀x (InSearchOf(hitmen, corpse) ∧ Hostage(hitmen, margaret)) ::: The hitmen who dumped the body are also in search of the corpse for proof to collect their payment and take Margaret hostage to ensure that they will get the body.",
        "Neglects(ted, tiffany) ∧ WorksUp(ted) ::: Ted is having problems with his girlfriend, Tiffany, whom he neglects as he works his way up in his firm."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "199": [
    {
      "id": 199,
      "context_id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 1,
      "paragraph": "Local police are convinced, but promotion-hungry insurance agent Ted Waters (Giovanni Ribisi) is not. The hitmen who dumped the body are also in search of the corpse for proof to collect their payment. They take Margaret hostage to ensure that they will get the body. Meanwhile, Ted is having problems with his girlfriend, Tiffany (Alison Lohman), who he neglects as he works his way up in his firm.",
      "question_template": "The mafia hitmen take [[CANDIDATE_ANSWER]] hostage.",
      "candidate_answers": [
        "Margaret"
      ],
      "predicates": [
        "Convinced(x) ::: x is convinced by the local police.",
        "PromotionHungry(x) ::: x is eager for promotion.",
        "InSearchOf(x, y) ::: x is in search of y.",
        "Hostage(x, y) ::: x is holding y hostage.",
        "Neglects(x, y) ::: x neglects y.",
        "WorksUp(x) ::: x is working his way up in his firm."
      ],
      "premises": [
        "Convinced(localPolice) ∧ ¬Convinced(ted) ::: Local police are convinced, but promotion-hungry insurance agent Ted Waters is not.",
        "∀x (InSearchOf(hitmen, corpse) ∧ Hostage(hitmen, margaret)) ::: The hitmen who dumped the body are also in search of the corpse for proof to collect their payment and take Margaret hostage to ensure that they will get the body.",
        "Neglects(ted, tiffany) ∧ WorksUp(ted) ::: Ted is having problems with his girlfriend, Tiffany, whom he neglects as he works his way up in his firm."
      ],
      "conclusions": [
        "Hostage(hitmen, margaret)"
      ]
    },
    {
      "id": 199,
      "context_id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 2,
      "paragraph": "Paul's missing brother Raymond (Woody Harrelson) returns home, beats him up, and demands a portion of the insurance money. By suggesting that Ted assaulted him, Paul speeds up the delivery of the million dollar insurance payment. He has the body exhumed and agrees to exchange it and a portion of the money for Margaret. Fearing that Raymond will attempt to kill Margaret to keep her quiet, Paul considers killing his brother in his sleep, but cannot bring himself to do so.",
      "question_template": "The mafia hitmen take [[CANDIDATE_ANSWER]] hostage.",
      "candidate_answers": [
        "Margaret"
      ],
      "predicates": [
        "MissingBrother(x) ::: x is a missing brother.",
        "Beats(x, y) ::: x beats y.",
        "Demands(x, y) ::: x demands y.",
        "Suggests(x, y) ::: x suggests that y.",
        "SpeedsUpDelivery(x, y) ::: x speeds up the delivery of y.",
        "Exhume(x) ::: x is exhumed.",
        "AgreesToExchange(x, y, z) ::: x agrees to exchange y for z.",
        "Fears(x, y) ::: x fears y.",
        "ConsidersKilling(x, y) ::: x considers killing y.",
        "CannotDo(x) ::: x cannot do something."
      ],
      "premises": [
        "MissingBrother(raymond) ∧ Beats(raymond, paul) ∧ Demands(raymond, portionOfInsurance) ::: Raymond is Paul's missing brother, beats him up, and demands a portion of the insurance money.",
        "Suggests(pauls, TedAssaulted(raymond)) ∧ SpeedsUpDelivery(pauls, millionDollarInsurancePayment) ::: Paul speeds up the delivery of the million dollar insurance payment by suggesting that Ted assaulted Raymond.",
        "Exhume(body) ∧ AgreesToExchange(pauls, body, margaret) ::: Paul has the body exhumed and agrees to exchange it and a portion of the money for Margaret.",
        "Fears(pauls, RaymondWillKill(margaret)) ::: Paul fears that Raymond will attempt to kill Margaret to keep her quiet.",
        "ConsidersKilling(pauls, raymond) ∧ CannotDo(pauls) ::: Paul considers killing Raymond but cannot bring himself to do so."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "200": [
    {
      "id": 200,
      "context_id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 2,
      "paragraph": "Paul's missing brother Raymond (Woody Harrelson) returns home, beats him up, and demands a portion of the insurance money. By suggesting that Ted assaulted him, Paul speeds up the delivery of the million dollar insurance payment. He has the body exhumed and agrees to exchange it and a portion of the money for Margaret. Fearing that Raymond will attempt to kill Margaret to keep her quiet, Paul considers killing his brother in his sleep, but cannot bring himself to do so.",
      "question_template": "[[CANDIDATE_ANSWER]] beats up Paul.",
      "candidate_answers": [
        "Raymond"
      ],
      "predicates": [
        "MissingBrother(x) ::: x is a missing brother.",
        "Beats(x, y) ::: x beats y.",
        "Demands(x, y) ::: x demands y.",
        "Suggests(x, y) ::: x suggests that y.",
        "SpeedsUpDelivery(x, y) ::: x speeds up the delivery of y.",
        "Exhume(x) ::: x is exhumed.",
        "AgreesToExchange(x, y, z) ::: x agrees to exchange y for z.",
        "Fears(x, y) ::: x fears y.",
        "ConsidersKilling(x, y) ::: x considers killing y.",
        "CannotDo(x) ::: x cannot do something."
      ],
      "premises": [
        "MissingBrother(raymond) ∧ Beats(raymond, paul) ∧ Demands(raymond, portionOfInsurance) ::: Raymond is Paul's missing brother, beats him up, and demands a portion of the insurance money.",
        "Suggests(pauls, TedAssaulted(raymond)) ∧ SpeedsUpDelivery(pauls, millionDollarInsurancePayment) ::: Paul speeds up the delivery of the million dollar insurance payment by suggesting that Ted assaulted Raymond.",
        "Exhume(body) ∧ AgreesToExchange(pauls, body, margaret) ::: Paul has the body exhumed and agrees to exchange it and a portion of the money for Margaret.",
        "Fears(pauls, RaymondWillKill(margaret)) ::: Paul fears that Raymond will attempt to kill Margaret to keep her quiet.",
        "ConsidersKilling(pauls, raymond) ∧ CannotDo(pauls) ::: Paul considers killing Raymond but cannot bring himself to do so."
      ],
      "conclusions": [
        "Beats(raymond, paul)"
      ]
    }
  ],
  "201": [
    {
      "id": 201,
      "context_id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 3,
      "paragraph": "The next morning Paul leaves his brother asleep and meets the hit-men for the exchange. Raymond is angered at his brother's deception and arrives as well, and is told by the insurance agent, who has finally pieced together what has happened, about his million dollar policy. Raymond then pulls out a pistol and shoots Margaret in the back as she flees. He is in turn shot in the stomach by one of the hit-men (Tim Nelson). Paul finds Margaret alive; he had hidden the insurance money in her jacket, and it stopped the bullet. The brothers say goodbye as Raymond dies. Paul tells Ted that he only committed fraud out of love for his wife, which appeals to Ted's renewed feelings for Tiffany; touched, he lets them go. Using the money, Paul takes Margaret on a tropical vacation.",
      "question_template": "Raymond demands [[CANDIDATE_ANSWER]] from Paul.",
      "candidate_answers": [
        "Raymond is angered at his brother's deception",
        "Raymond then pulls out a pistol and shoots Margaret in the back"
      ],
      "predicates": [
        "Asleep(x) ::: x is asleep.",
        "Meets(x, y) ::: x meets y.",
        "Angered(x, y) ::: x is angered at y's actions.",
        "ToldBy(x, y, z) ::: x is told by y about z.",
        "Shoots(x, y) ::: x shoots y.",
        "ShotBy(x, y) ::: x is shot by y.",
        "Finds(x, y) ::: x finds y.",
        "Hidden(x, y) ::: x has hidden y.",
        "CommitsFraud(x, y) ::: x commits fraud out of love for y.",
        "LetsGo(x, y) ::: x lets y go.",
        "TakesOnVacation(x, y) ::: x takes y on vacation."
      ],
      "premises": [
        "Asleep(a_2) ::: Raymond is asleep.",
        "Meets(a_1, hit_men) ::: Paul meets the hit-men for the exchange.",
        "Angered(a_2, a_1) ::: Raymond is angered at Paul's deception.",
        "ToldBy(a_2, insurance_agent, million_dollar_policy) ::: Raymond is told by the insurance agent about his million dollar policy.",
        "Shoots(a_2, a_3) ::: Raymond shoots Margaret in the back.",
        "ShotBy(a_2, hit_man) ::: Raymond is shot in the stomach by one of the hit-men (Tim Nelson).",
        "Finds(a_1, a_3) ::: Paul finds Margaret alive.",
        "Hidden(a_1, insurance_money) ::: Paul has hidden the insurance money in Margaret's jacket.",
        "CommitsFraud(a_1, a_3) ::: Paul commits fraud out of love for his wife (Margaret).",
        "LetsGo(a_4, a_1) ::: Ted lets Paul and Margaret go.",
        "TakesOnVacation(a_1, tropical_vacation) ::: Paul takes Margaret on a tropical vacation.",
        "Conclusion:",
        "Raymond dies after being shot by a hit-man.",
        "Paul's actions are motivated by love for his wife."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "202": [
    {
      "id": 202,
      "context_id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 0,
      "paragraph": " Travel agent Paul Barnell (Robin Williams) finds a body in a dumpster that, unbeknownst to him, was left there by Mafia hitmen. Heavily in debt and attempting to find a cure for his wife Margaret's (Holly Hunter) apparent Tourette Syndrome, he stages a disfiguring animal attack with the body in order to cash in his missing brother's life-insurance policy, for which a corpse is required.",
      "question_template": "Paul ends up doing [[CANDIDATE_ANSWER]] for Margaret with the insurance money.",
      "candidate_answers": [
        "- Cash in his missing brother's life-insurance policy",
        "- Stages a disfiguring animal attack with the body"
      ],
      "predicates": [
        "HeavilyInDebt(x) ::: x is heavily in debt.",
        "FindsBody(x, y) ::: x finds body y.",
        "LeftByMafiaHitmen(y) ::: body y was left by Mafia hitmen.",
        "AttemptsToFindCure(x, y) ::: x attempts to find a cure for y.",
        "StagesAttack(x, y) ::: x stages an attack involving y.",
        "DisfiguringAnimalAttack(y) ::: y is a disfiguring animal attack.",
        "CashInPolicy(x, y) ::: x cashes in y's life-insurance policy.",
        "CorpseRequired(y) ::: y requires a corpse."
      ],
      "premises": [
        "HeavilyInDebt(a_1) ::: Paul Barnell is heavily in debt.",
        "FindsBody(a_1, b) ::: Paul finds a body in a dumpster.",
        "LeftByMafiaHitmen(b) ::: The body was left there by Mafia hitmen.",
        "AttemptsToFindCure(a_1, a_3) ::: Paul attempts to find a cure for his wife Margaret's apparent Tourette Syndrome.",
        "StagesAttack(a_1, b) ::: Paul stages a disfiguring animal attack with the body.",
        "CashInPolicy(a_1, b_1) ::: Paul cashes in his missing brother's life-insurance policy.",
        "CorpseRequired(b_1) ::: The life-insurance policy requires a corpse.",
        "Conclusion:",
        "MotivatedByDebtAndCorpse(a_1) ::: Paul Barnell's actions are motivated by his debt and the need for a corpse to claim the life-insurance policy."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 202,
      "context_id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 2,
      "paragraph": "Paul's missing brother Raymond (Woody Harrelson) returns home, beats him up, and demands a portion of the insurance money. By suggesting that Ted assaulted him, Paul speeds up the delivery of the million dollar insurance payment. He has the body exhumed and agrees to exchange it and a portion of the money for Margaret. Fearing that Raymond will attempt to kill Margaret to keep her quiet, Paul considers killing his brother in his sleep, but cannot bring himself to do so.",
      "question_template": "Paul ends up doing [[CANDIDATE_ANSWER]] for Margaret with the insurance money.",
      "candidate_answers": [
        "- Speeds up the delivery of the million dollar insurance payment",
        "- Agrees to exchange it and a portion of the money for Margaret"
      ],
      "predicates": [
        "MissingBrother(x) ::: x is a missing brother.",
        "Beats(x, y) ::: x beats y.",
        "Demands(x, y) ::: x demands y.",
        "Suggests(x, y) ::: x suggests that y.",
        "SpeedsUpDelivery(x, y) ::: x speeds up the delivery of y.",
        "Exhume(x) ::: x is exhumed.",
        "AgreesToExchange(x, y, z) ::: x agrees to exchange y for z.",
        "Fears(x, y) ::: x fears y.",
        "ConsidersKilling(x, y) ::: x considers killing y.",
        "CannotDo(x) ::: x cannot do something."
      ],
      "premises": [
        "MissingBrother(raymond) ∧ Beats(raymond, paul) ∧ Demands(raymond, portionOfInsurance) ::: Raymond is Paul's missing brother, beats him up, and demands a portion of the insurance money.",
        "Suggests(pauls, TedAssaulted(raymond)) ∧ SpeedsUpDelivery(pauls, millionDollarInsurancePayment) ::: Paul speeds up the delivery of the million dollar insurance payment by suggesting that Ted assaulted Raymond.",
        "Exhume(body) ∧ AgreesToExchange(pauls, body, margaret) ::: Paul has the body exhumed and agrees to exchange it and a portion of the money for Margaret.",
        "Fears(pauls, RaymondWillKill(margaret)) ::: Paul fears that Raymond will attempt to kill Margaret to keep her quiet.",
        "ConsidersKilling(pauls, raymond) ∧ CannotDo(pauls) ::: Paul considers killing Raymond but cannot bring himself to do so."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 202,
      "context_id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 3,
      "paragraph": "The next morning Paul leaves his brother asleep and meets the hit-men for the exchange. Raymond is angered at his brother's deception and arrives as well, and is told by the insurance agent, who has finally pieced together what has happened, about his million dollar policy. Raymond then pulls out a pistol and shoots Margaret in the back as she flees. He is in turn shot in the stomach by one of the hit-men (Tim Nelson). Paul finds Margaret alive; he had hidden the insurance money in her jacket, and it stopped the bullet. The brothers say goodbye as Raymond dies. Paul tells Ted that he only committed fraud out of love for his wife, which appeals to Ted's renewed feelings for Tiffany; touched, he lets them go. Using the money, Paul takes Margaret on a tropical vacation.",
      "question_template": "Paul ends up doing [[CANDIDATE_ANSWER]] for Margaret with the insurance money.",
      "candidate_answers": [
        "- Paul takes Margaret on a tropical vacation."
      ],
      "predicates": [
        "Asleep(x) ::: x is asleep.",
        "Meets(x, y) ::: x meets y.",
        "Angered(x, y) ::: x is angered at y's actions.",
        "ToldBy(x, y, z) ::: x is told by y about z.",
        "Shoots(x, y) ::: x shoots y.",
        "ShotBy(x, y) ::: x is shot by y.",
        "Finds(x, y) ::: x finds y.",
        "Hidden(x, y) ::: x has hidden y.",
        "CommitsFraud(x, y) ::: x commits fraud out of love for y.",
        "LetsGo(x, y) ::: x lets y go.",
        "TakesOnVacation(x, y) ::: x takes y on vacation."
      ],
      "premises": [
        "Asleep(a_2) ::: Raymond is asleep.",
        "Meets(a_1, hit_men) ::: Paul meets the hit-men for the exchange.",
        "Angered(a_2, a_1) ::: Raymond is angered at Paul's deception.",
        "ToldBy(a_2, insurance_agent, million_dollar_policy) ::: Raymond is told by the insurance agent about his million dollar policy.",
        "Shoots(a_2, a_3) ::: Raymond shoots Margaret in the back.",
        "ShotBy(a_2, hit_man) ::: Raymond is shot in the stomach by one of the hit-men (Tim Nelson).",
        "Finds(a_1, a_3) ::: Paul finds Margaret alive.",
        "Hidden(a_1, insurance_money) ::: Paul has hidden the insurance money in Margaret's jacket.",
        "CommitsFraud(a_1, a_3) ::: Paul commits fraud out of love for his wife (Margaret).",
        "LetsGo(a_4, a_1) ::: Ted lets Paul and Margaret go.",
        "TakesOnVacation(a_1, tropical_vacation) ::: Paul takes Margaret on a tropical vacation.",
        "Conclusion:",
        "Raymond dies after being shot by a hit-man.",
        "Paul's actions are motivated by love for his wife."
      ],
      "conclusions": [
        "TakesOnVacation(pauls, margaret) ∧ Hidden(pauls, insurance_money)"
      ]
    }
  ],
  "203": [
    {
      "id": 203,
      "context_id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 0,
      "paragraph": " Travel agent Paul Barnell (Robin Williams) finds a body in a dumpster that, unbeknownst to him, was left there by Mafia hitmen. Heavily in debt and attempting to find a cure for his wife Margaret's (Holly Hunter) apparent Tourette Syndrome, he stages a disfiguring animal attack with the body in order to cash in his missing brother's life-insurance policy, for which a corpse is required.",
      "question_template": "Paul Barnell found [[CANDIDATE_ANSWER]] in a dumpster.",
      "candidate_answers": [
        "a body in a dumpster"
      ],
      "predicates": [
        "HeavilyInDebt(x) ::: x is heavily in debt.",
        "FindsBody(x, y) ::: x finds body y.",
        "LeftByMafiaHitmen(y) ::: body y was left by Mafia hitmen.",
        "AttemptsToFindCure(x, y) ::: x attempts to find a cure for y.",
        "StagesAttack(x, y) ::: x stages an attack involving y.",
        "DisfiguringAnimalAttack(y) ::: y is a disfiguring animal attack.",
        "CashInPolicy(x, y) ::: x cashes in y's life-insurance policy.",
        "CorpseRequired(y) ::: y requires a corpse."
      ],
      "premises": [
        "HeavilyInDebt(a_1) ::: Paul Barnell is heavily in debt.",
        "FindsBody(a_1, b) ::: Paul finds a body in a dumpster.",
        "LeftByMafiaHitmen(b) ::: The body was left there by Mafia hitmen.",
        "AttemptsToFindCure(a_1, a_3) ::: Paul attempts to find a cure for his wife Margaret's apparent Tourette Syndrome.",
        "StagesAttack(a_1, b) ::: Paul stages a disfiguring animal attack with the body.",
        "CashInPolicy(a_1, b_1) ::: Paul cashes in his missing brother's life-insurance policy.",
        "CorpseRequired(b_1) ::: The life-insurance policy requires a corpse.",
        "Conclusion:",
        "MotivatedByDebtAndCorpse(a_1) ::: Paul Barnell's actions are motivated by his debt and the need for a corpse to claim the life-insurance policy."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 203,
      "context_id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 3,
      "paragraph": "The next morning Paul leaves his brother asleep and meets the hit-men for the exchange. Raymond is angered at his brother's deception and arrives as well, and is told by the insurance agent, who has finally pieced together what has happened, about his million dollar policy. Raymond then pulls out a pistol and shoots Margaret in the back as she flees. He is in turn shot in the stomach by one of the hit-men (Tim Nelson). Paul finds Margaret alive; he had hidden the insurance money in her jacket, and it stopped the bullet. The brothers say goodbye as Raymond dies. Paul tells Ted that he only committed fraud out of love for his wife, which appeals to Ted's renewed feelings for Tiffany; touched, he lets them go. Using the money, Paul takes Margaret on a tropical vacation.",
      "question_template": "Paul Barnell found [[CANDIDATE_ANSWER]] in a dumpster.",
      "candidate_answers": [
        "The insurance money",
        "Hidden the insurance money in her jacket"
      ],
      "predicates": [
        "Asleep(x) ::: x is asleep.",
        "Meets(x, y) ::: x meets y.",
        "Angered(x, y) ::: x is angered at y's actions.",
        "ToldBy(x, y, z) ::: x is told by y about z.",
        "Shoots(x, y) ::: x shoots y.",
        "ShotBy(x, y) ::: x is shot by y.",
        "Finds(x, y) ::: x finds y.",
        "Hidden(x, y) ::: x has hidden y.",
        "CommitsFraud(x, y) ::: x commits fraud out of love for y.",
        "LetsGo(x, y) ::: x lets y go.",
        "TakesOnVacation(x, y) ::: x takes y on vacation."
      ],
      "premises": [
        "Asleep(a_2) ::: Raymond is asleep.",
        "Meets(a_1, hit_men) ::: Paul meets the hit-men for the exchange.",
        "Angered(a_2, a_1) ::: Raymond is angered at Paul's deception.",
        "ToldBy(a_2, insurance_agent, million_dollar_policy) ::: Raymond is told by the insurance agent about his million dollar policy.",
        "Shoots(a_2, a_3) ::: Raymond shoots Margaret in the back.",
        "ShotBy(a_2, hit_man) ::: Raymond is shot in the stomach by one of the hit-men (Tim Nelson).",
        "Finds(a_1, a_3) ::: Paul finds Margaret alive.",
        "Hidden(a_1, insurance_money) ::: Paul has hidden the insurance money in Margaret's jacket.",
        "CommitsFraud(a_1, a_3) ::: Paul commits fraud out of love for his wife (Margaret).",
        "LetsGo(a_4, a_1) ::: Ted lets Paul and Margaret go.",
        "TakesOnVacation(a_1, tropical_vacation) ::: Paul takes Margaret on a tropical vacation.",
        "Conclusion:",
        "Raymond dies after being shot by a hit-man.",
        "Paul's actions are motivated by love for his wife."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "204": [
    {
      "id": 204,
      "context_id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 1,
      "paragraph": "Local police are convinced, but promotion-hungry insurance agent Ted Waters (Giovanni Ribisi) is not. The hitmen who dumped the body are also in search of the corpse for proof to collect their payment. They take Margaret hostage to ensure that they will get the body. Meanwhile, Ted is having problems with his girlfriend, Tiffany (Alison Lohman), who he neglects as he works his way up in his firm.",
      "question_template": "[[CANDIDATE_ANSWER]] was responsible for the body found by the travel agent.",
      "candidate_answers": [
        "The hitmen who dumped the body",
        "Ted Waters"
      ],
      "predicates": [
        "Convinced(x) ::: x is convinced by the local police.",
        "PromotionHungry(x) ::: x is eager for promotion.",
        "InSearchOf(x, y) ::: x is in search of y.",
        "Hostage(x, y) ::: x is holding y hostage.",
        "Neglects(x, y) ::: x neglects y.",
        "WorksUp(x) ::: x is working his way up in his firm."
      ],
      "premises": [
        "Convinced(localPolice) ∧ ¬Convinced(ted) ::: Local police are convinced, but promotion-hungry insurance agent Ted Waters is not.",
        "∀x (InSearchOf(hitmen, corpse) ∧ Hostage(hitmen, margaret)) ::: The hitmen who dumped the body are also in search of the corpse for proof to collect their payment and take Margaret hostage to ensure that they will get the body.",
        "Neglects(ted, tiffany) ∧ WorksUp(ted) ::: Ted is having problems with his girlfriend, Tiffany, whom he neglects as he works his way up in his firm."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 204,
      "context_id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 3,
      "paragraph": "The next morning Paul leaves his brother asleep and meets the hit-men for the exchange. Raymond is angered at his brother's deception and arrives as well, and is told by the insurance agent, who has finally pieced together what has happened, about his million dollar policy. Raymond then pulls out a pistol and shoots Margaret in the back as she flees. He is in turn shot in the stomach by one of the hit-men (Tim Nelson). Paul finds Margaret alive; he had hidden the insurance money in her jacket, and it stopped the bullet. The brothers say goodbye as Raymond dies. Paul tells Ted that he only committed fraud out of love for his wife, which appeals to Ted's renewed feelings for Tiffany; touched, he lets them go. Using the money, Paul takes Margaret on a tropical vacation.",
      "question_template": "[[CANDIDATE_ANSWER]] was responsible for the body found by the travel agent.",
      "candidate_answers": [
        "Raymond",
        "Paul",
        "The hit-men"
      ],
      "predicates": [
        "Asleep(x) ::: x is asleep.",
        "Meets(x, y) ::: x meets y.",
        "Angered(x, y) ::: x is angered at y's actions.",
        "ToldBy(x, y, z) ::: x is told by y about z.",
        "Shoots(x, y) ::: x shoots y.",
        "ShotBy(x, y) ::: x is shot by y.",
        "Finds(x, y) ::: x finds y.",
        "Hidden(x, y) ::: x has hidden y.",
        "CommitsFraud(x, y) ::: x commits fraud out of love for y.",
        "LetsGo(x, y) ::: x lets y go.",
        "TakesOnVacation(x, y) ::: x takes y on vacation."
      ],
      "premises": [
        "Asleep(a_2) ::: Raymond is asleep.",
        "Meets(a_1, hit_men) ::: Paul meets the hit-men for the exchange.",
        "Angered(a_2, a_1) ::: Raymond is angered at Paul's deception.",
        "ToldBy(a_2, insurance_agent, million_dollar_policy) ::: Raymond is told by the insurance agent about his million dollar policy.",
        "Shoots(a_2, a_3) ::: Raymond shoots Margaret in the back.",
        "ShotBy(a_2, hit_man) ::: Raymond is shot in the stomach by one of the hit-men (Tim Nelson).",
        "Finds(a_1, a_3) ::: Paul finds Margaret alive.",
        "Hidden(a_1, insurance_money) ::: Paul has hidden the insurance money in Margaret's jacket.",
        "CommitsFraud(a_1, a_3) ::: Paul commits fraud out of love for his wife (Margaret).",
        "LetsGo(a_4, a_1) ::: Ted lets Paul and Margaret go.",
        "TakesOnVacation(a_1, tropical_vacation) ::: Paul takes Margaret on a tropical vacation.",
        "Conclusion:",
        "Raymond dies after being shot by a hit-man.",
        "Paul's actions are motivated by love for his wife."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "207": [
    {
      "id": 207,
      "context_id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 0,
      "paragraph": " Travel agent Paul Barnell (Robin Williams) finds a body in a dumpster that, unbeknownst to him, was left there by Mafia hitmen. Heavily in debt and attempting to find a cure for his wife Margaret's (Holly Hunter) apparent Tourette Syndrome, he stages a disfiguring animal attack with the body in order to cash in his missing brother's life-insurance policy, for which a corpse is required.",
      "question_template": "The Mafia hitmen did [[CANDIDATE_ANSWER]] to make sure they will get the body.",
      "candidate_answers": [
        "Left a body in a dumpster"
      ],
      "predicates": [
        "HeavilyInDebt(x) ::: x is heavily in debt.",
        "FindsBody(x, y) ::: x finds body y.",
        "LeftByMafiaHitmen(y) ::: body y was left by Mafia hitmen.",
        "AttemptsToFindCure(x, y) ::: x attempts to find a cure for y.",
        "StagesAttack(x, y) ::: x stages an attack involving y.",
        "DisfiguringAnimalAttack(y) ::: y is a disfiguring animal attack.",
        "CashInPolicy(x, y) ::: x cashes in y's life-insurance policy.",
        "CorpseRequired(y) ::: y requires a corpse."
      ],
      "premises": [
        "HeavilyInDebt(a_1) ::: Paul Barnell is heavily in debt.",
        "FindsBody(a_1, b) ::: Paul finds a body in a dumpster.",
        "LeftByMafiaHitmen(b) ::: The body was left there by Mafia hitmen.",
        "AttemptsToFindCure(a_1, a_3) ::: Paul attempts to find a cure for his wife Margaret's apparent Tourette Syndrome.",
        "StagesAttack(a_1, b) ::: Paul stages a disfiguring animal attack with the body.",
        "CashInPolicy(a_1, b_1) ::: Paul cashes in his missing brother's life-insurance policy.",
        "CorpseRequired(b_1) ::: The life-insurance policy requires a corpse.",
        "Conclusion:",
        "MotivatedByDebtAndCorpse(a_1) ::: Paul Barnell's actions are motivated by his debt and the need for a corpse to claim the life-insurance policy."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 207,
      "context_id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 1,
      "paragraph": "Local police are convinced, but promotion-hungry insurance agent Ted Waters (Giovanni Ribisi) is not. The hitmen who dumped the body are also in search of the corpse for proof to collect their payment. They take Margaret hostage to ensure that they will get the body. Meanwhile, Ted is having problems with his girlfriend, Tiffany (Alison Lohman), who he neglects as he works his way up in his firm.",
      "question_template": "The Mafia hitmen did [[CANDIDATE_ANSWER]] to make sure they will get the body.",
      "candidate_answers": [
        "Take Margaret hostage to ensure that they will get the body"
      ],
      "predicates": [
        "Convinced(x) ::: x is convinced by the local police.",
        "PromotionHungry(x) ::: x is eager for promotion.",
        "InSearchOf(x, y) ::: x is in search of y.",
        "Hostage(x, y) ::: x is holding y hostage.",
        "Neglects(x, y) ::: x neglects y.",
        "WorksUp(x) ::: x is working his way up in his firm."
      ],
      "premises": [
        "Convinced(localPolice) ∧ ¬Convinced(ted) ::: Local police are convinced, but promotion-hungry insurance agent Ted Waters is not.",
        "∀x (InSearchOf(hitmen, corpse) ∧ Hostage(hitmen, margaret)) ::: The hitmen who dumped the body are also in search of the corpse for proof to collect their payment and take Margaret hostage to ensure that they will get the body.",
        "Neglects(ted, tiffany) ∧ WorksUp(ted) ::: Ted is having problems with his girlfriend, Tiffany, whom he neglects as he works his way up in his firm."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "208": [
    {
      "id": 208,
      "context_id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 0,
      "paragraph": " Travel agent Paul Barnell (Robin Williams) finds a body in a dumpster that, unbeknownst to him, was left there by Mafia hitmen. Heavily in debt and attempting to find a cure for his wife Margaret's (Holly Hunter) apparent Tourette Syndrome, he stages a disfiguring animal attack with the body in order to cash in his missing brother's life-insurance policy, for which a corpse is required.",
      "question_template": "Paul and Margaret used the money for [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Heavily in debt",
        "Find a cure for his wife Margaret's apparent Tourette Syndrome",
        "Cash in his missing brother's life-insurance policy"
      ],
      "predicates": [
        "HeavilyInDebt(x) ::: x is heavily in debt.",
        "FindsBody(x, y) ::: x finds body y.",
        "LeftByMafiaHitmen(y) ::: body y was left by Mafia hitmen.",
        "AttemptsToFindCure(x, y) ::: x attempts to find a cure for y.",
        "StagesAttack(x, y) ::: x stages an attack involving y.",
        "DisfiguringAnimalAttack(y) ::: y is a disfiguring animal attack.",
        "CashInPolicy(x, y) ::: x cashes in y's life-insurance policy.",
        "CorpseRequired(y) ::: y requires a corpse."
      ],
      "premises": [
        "HeavilyInDebt(a_1) ::: Paul Barnell is heavily in debt.",
        "FindsBody(a_1, b) ::: Paul finds a body in a dumpster.",
        "LeftByMafiaHitmen(b) ::: The body was left there by Mafia hitmen.",
        "AttemptsToFindCure(a_1, a_3) ::: Paul attempts to find a cure for his wife Margaret's apparent Tourette Syndrome.",
        "StagesAttack(a_1, b) ::: Paul stages a disfiguring animal attack with the body.",
        "CashInPolicy(a_1, b_1) ::: Paul cashes in his missing brother's life-insurance policy.",
        "CorpseRequired(b_1) ::: The life-insurance policy requires a corpse.",
        "Conclusion:",
        "MotivatedByDebtAndCorpse(a_1) ::: Paul Barnell's actions are motivated by his debt and the need for a corpse to claim the life-insurance policy."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 208,
      "context_id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 3,
      "paragraph": "The next morning Paul leaves his brother asleep and meets the hit-men for the exchange. Raymond is angered at his brother's deception and arrives as well, and is told by the insurance agent, who has finally pieced together what has happened, about his million dollar policy. Raymond then pulls out a pistol and shoots Margaret in the back as she flees. He is in turn shot in the stomach by one of the hit-men (Tim Nelson). Paul finds Margaret alive; he had hidden the insurance money in her jacket, and it stopped the bullet. The brothers say goodbye as Raymond dies. Paul tells Ted that he only committed fraud out of love for his wife, which appeals to Ted's renewed feelings for Tiffany; touched, he lets them go. Using the money, Paul takes Margaret on a tropical vacation.",
      "question_template": "Paul and Margaret used the money for [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Paul takes Margaret on a tropical vacation."
      ],
      "predicates": [
        "Asleep(x) ::: x is asleep.",
        "Meets(x, y) ::: x meets y.",
        "Angered(x, y) ::: x is angered at y's actions.",
        "ToldBy(x, y, z) ::: x is told by y about z.",
        "Shoots(x, y) ::: x shoots y.",
        "ShotBy(x, y) ::: x is shot by y.",
        "Finds(x, y) ::: x finds y.",
        "Hidden(x, y) ::: x has hidden y.",
        "CommitsFraud(x, y) ::: x commits fraud out of love for y.",
        "LetsGo(x, y) ::: x lets y go.",
        "TakesOnVacation(x, y) ::: x takes y on vacation."
      ],
      "premises": [
        "Asleep(a_2) ::: Raymond is asleep.",
        "Meets(a_1, hit_men) ::: Paul meets the hit-men for the exchange.",
        "Angered(a_2, a_1) ::: Raymond is angered at Paul's deception.",
        "ToldBy(a_2, insurance_agent, million_dollar_policy) ::: Raymond is told by the insurance agent about his million dollar policy.",
        "Shoots(a_2, a_3) ::: Raymond shoots Margaret in the back.",
        "ShotBy(a_2, hit_man) ::: Raymond is shot in the stomach by one of the hit-men (Tim Nelson).",
        "Finds(a_1, a_3) ::: Paul finds Margaret alive.",
        "Hidden(a_1, insurance_money) ::: Paul has hidden the insurance money in Margaret's jacket.",
        "CommitsFraud(a_1, a_3) ::: Paul commits fraud out of love for his wife (Margaret).",
        "LetsGo(a_4, a_1) ::: Ted lets Paul and Margaret go.",
        "TakesOnVacation(a_1, tropical_vacation) ::: Paul takes Margaret on a tropical vacation.",
        "Conclusion:",
        "Raymond dies after being shot by a hit-man.",
        "Paul's actions are motivated by love for his wife."
      ],
      "conclusions": [
        "TakesOnVacation(pauls, tropical_vacation)"
      ]
    }
  ],
  "211": [
    {
      "id": 211,
      "context_id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 3,
      "paragraph": "The next morning Paul leaves his brother asleep and meets the hit-men for the exchange. Raymond is angered at his brother's deception and arrives as well, and is told by the insurance agent, who has finally pieced together what has happened, about his million dollar policy. Raymond then pulls out a pistol and shoots Margaret in the back as she flees. He is in turn shot in the stomach by one of the hit-men (Tim Nelson). Paul finds Margaret alive; he had hidden the insurance money in her jacket, and it stopped the bullet. The brothers say goodbye as Raymond dies. Paul tells Ted that he only committed fraud out of love for his wife, which appeals to Ted's renewed feelings for Tiffany; touched, he lets them go. Using the money, Paul takes Margaret on a tropical vacation.",
      "question_template": "[[CANDIDATE_ANSWER]] killed Raymond.",
      "candidate_answers": [
        "Raymond is shot in the back by Margaret",
        "He is in turn shot in the stomach by one of the hit-men"
      ],
      "predicates": [
        "Asleep(x) ::: x is asleep.",
        "Meets(x, y) ::: x meets y.",
        "Angered(x, y) ::: x is angered at y's actions.",
        "ToldBy(x, y, z) ::: x is told by y about z.",
        "Shoots(x, y) ::: x shoots y.",
        "ShotBy(x, y) ::: x is shot by y.",
        "Finds(x, y) ::: x finds y.",
        "Hidden(x, y) ::: x has hidden y.",
        "CommitsFraud(x, y) ::: x commits fraud out of love for y.",
        "LetsGo(x, y) ::: x lets y go.",
        "TakesOnVacation(x, y) ::: x takes y on vacation."
      ],
      "premises": [
        "Asleep(a_2) ::: Raymond is asleep.",
        "Meets(a_1, hit_men) ::: Paul meets the hit-men for the exchange.",
        "Angered(a_2, a_1) ::: Raymond is angered at Paul's deception.",
        "ToldBy(a_2, insurance_agent, million_dollar_policy) ::: Raymond is told by the insurance agent about his million dollar policy.",
        "Shoots(a_2, a_3) ::: Raymond shoots Margaret in the back.",
        "ShotBy(a_2, hit_man) ::: Raymond is shot in the stomach by one of the hit-men (Tim Nelson).",
        "Finds(a_1, a_3) ::: Paul finds Margaret alive.",
        "Hidden(a_1, insurance_money) ::: Paul has hidden the insurance money in Margaret's jacket.",
        "CommitsFraud(a_1, a_3) ::: Paul commits fraud out of love for his wife (Margaret).",
        "LetsGo(a_4, a_1) ::: Ted lets Paul and Margaret go.",
        "TakesOnVacation(a_1, tropical_vacation) ::: Paul takes Margaret on a tropical vacation.",
        "Conclusion:",
        "Raymond dies after being shot by a hit-man.",
        "Paul's actions are motivated by love for his wife."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "212": [
    {
      "id": 212,
      "context_id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 2,
      "paragraph": "Paul's missing brother Raymond (Woody Harrelson) returns home, beats him up, and demands a portion of the insurance money. By suggesting that Ted assaulted him, Paul speeds up the delivery of the million dollar insurance payment. He has the body exhumed and agrees to exchange it and a portion of the money for Margaret. Fearing that Raymond will attempt to kill Margaret to keep her quiet, Paul considers killing his brother in his sleep, but cannot bring himself to do so.",
      "question_template": "[[CANDIDATE_ANSWER]] is what Paul's brother demanded from him when he returned.",
      "candidate_answers": [
        "A portion of the insurance money"
      ],
      "predicates": [
        "MissingBrother(x) ::: x is a missing brother.",
        "Beats(x, y) ::: x beats y.",
        "Demands(x, y) ::: x demands y.",
        "Suggests(x, y) ::: x suggests that y.",
        "SpeedsUpDelivery(x, y) ::: x speeds up the delivery of y.",
        "Exhume(x) ::: x is exhumed.",
        "AgreesToExchange(x, y, z) ::: x agrees to exchange y for z.",
        "Fears(x, y) ::: x fears y.",
        "ConsidersKilling(x, y) ::: x considers killing y.",
        "CannotDo(x) ::: x cannot do something."
      ],
      "premises": [
        "MissingBrother(raymond) ∧ Beats(raymond, paul) ∧ Demands(raymond, portionOfInsurance) ::: Raymond is Paul's missing brother, beats him up, and demands a portion of the insurance money.",
        "Suggests(pauls, TedAssaulted(raymond)) ∧ SpeedsUpDelivery(pauls, millionDollarInsurancePayment) ::: Paul speeds up the delivery of the million dollar insurance payment by suggesting that Ted assaulted Raymond.",
        "Exhume(body) ∧ AgreesToExchange(pauls, body, margaret) ::: Paul has the body exhumed and agrees to exchange it and a portion of the money for Margaret.",
        "Fears(pauls, RaymondWillKill(margaret)) ::: Paul fears that Raymond will attempt to kill Margaret to keep her quiet.",
        "ConsidersKilling(pauls, raymond) ∧ CannotDo(pauls) ::: Paul considers killing Raymond but cannot bring himself to do so."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "213": [
    {
      "id": 213,
      "context_id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 0,
      "paragraph": " Travel agent Paul Barnell (Robin Williams) finds a body in a dumpster that, unbeknownst to him, was left there by Mafia hitmen. Heavily in debt and attempting to find a cure for his wife Margaret's (Holly Hunter) apparent Tourette Syndrome, he stages a disfiguring animal attack with the body in order to cash in his missing brother's life-insurance policy, for which a corpse is required.",
      "question_template": "Paul Barnell found [[CANDIDATE_ANSWER]] in a dumpster.",
      "candidate_answers": [
        "a body in a dumpster"
      ],
      "predicates": [
        "HeavilyInDebt(x) ::: x is heavily in debt.",
        "FindsBody(x, y) ::: x finds body y.",
        "LeftByMafiaHitmen(y) ::: body y was left by Mafia hitmen.",
        "AttemptsToFindCure(x, y) ::: x attempts to find a cure for y.",
        "StagesAttack(x, y) ::: x stages an attack involving y.",
        "DisfiguringAnimalAttack(y) ::: y is a disfiguring animal attack.",
        "CashInPolicy(x, y) ::: x cashes in y's life-insurance policy.",
        "CorpseRequired(y) ::: y requires a corpse."
      ],
      "premises": [
        "HeavilyInDebt(a_1) ::: Paul Barnell is heavily in debt.",
        "FindsBody(a_1, b) ::: Paul finds a body in a dumpster.",
        "LeftByMafiaHitmen(b) ::: The body was left there by Mafia hitmen.",
        "AttemptsToFindCure(a_1, a_3) ::: Paul attempts to find a cure for his wife Margaret's apparent Tourette Syndrome.",
        "StagesAttack(a_1, b) ::: Paul stages a disfiguring animal attack with the body.",
        "CashInPolicy(a_1, b_1) ::: Paul cashes in his missing brother's life-insurance policy.",
        "CorpseRequired(b_1) ::: The life-insurance policy requires a corpse.",
        "Conclusion:",
        "MotivatedByDebtAndCorpse(a_1) ::: Paul Barnell's actions are motivated by his debt and the need for a corpse to claim the life-insurance policy."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "215": [
    {
      "id": 215,
      "context_id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 0,
      "paragraph": " Travel agent Paul Barnell (Robin Williams) finds a body in a dumpster that, unbeknownst to him, was left there by Mafia hitmen. Heavily in debt and attempting to find a cure for his wife Margaret's (Holly Hunter) apparent Tourette Syndrome, he stages a disfiguring animal attack with the body in order to cash in his missing brother's life-insurance policy, for which a corpse is required.",
      "question_template": "Margaret was [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Margaret",
        "His wife"
      ],
      "predicates": [
        "HeavilyInDebt(x) ::: x is heavily in debt.",
        "FindsBody(x, y) ::: x finds body y.",
        "LeftByMafiaHitmen(y) ::: body y was left by Mafia hitmen.",
        "AttemptsToFindCure(x, y) ::: x attempts to find a cure for y.",
        "StagesAttack(x, y) ::: x stages an attack involving y.",
        "DisfiguringAnimalAttack(y) ::: y is a disfiguring animal attack.",
        "CashInPolicy(x, y) ::: x cashes in y's life-insurance policy.",
        "CorpseRequired(y) ::: y requires a corpse."
      ],
      "premises": [
        "HeavilyInDebt(a_1) ::: Paul Barnell is heavily in debt.",
        "FindsBody(a_1, b) ::: Paul finds a body in a dumpster.",
        "LeftByMafiaHitmen(b) ::: The body was left there by Mafia hitmen.",
        "AttemptsToFindCure(a_1, a_3) ::: Paul attempts to find a cure for his wife Margaret's apparent Tourette Syndrome.",
        "StagesAttack(a_1, b) ::: Paul stages a disfiguring animal attack with the body.",
        "CashInPolicy(a_1, b_1) ::: Paul cashes in his missing brother's life-insurance policy.",
        "CorpseRequired(b_1) ::: The life-insurance policy requires a corpse.",
        "Conclusion:",
        "MotivatedByDebtAndCorpse(a_1) ::: Paul Barnell's actions are motivated by his debt and the need for a corpse to claim the life-insurance policy."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 215,
      "context_id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 1,
      "paragraph": "Local police are convinced, but promotion-hungry insurance agent Ted Waters (Giovanni Ribisi) is not. The hitmen who dumped the body are also in search of the corpse for proof to collect their payment. They take Margaret hostage to ensure that they will get the body. Meanwhile, Ted is having problems with his girlfriend, Tiffany (Alison Lohman), who he neglects as he works his way up in his firm.",
      "question_template": "Margaret was [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Margaret"
      ],
      "predicates": [
        "Convinced(x) ::: x is convinced by the local police.",
        "PromotionHungry(x) ::: x is eager for promotion.",
        "InSearchOf(x, y) ::: x is in search of y.",
        "Hostage(x, y) ::: x is holding y hostage.",
        "Neglects(x, y) ::: x neglects y.",
        "WorksUp(x) ::: x is working his way up in his firm."
      ],
      "premises": [
        "Convinced(localPolice) ∧ ¬Convinced(ted) ::: Local police are convinced, but promotion-hungry insurance agent Ted Waters is not.",
        "∀x (InSearchOf(hitmen, corpse) ∧ Hostage(hitmen, margaret)) ::: The hitmen who dumped the body are also in search of the corpse for proof to collect their payment and take Margaret hostage to ensure that they will get the body.",
        "Neglects(ted, tiffany) ∧ WorksUp(ted) ::: Ted is having problems with his girlfriend, Tiffany, whom he neglects as he works his way up in his firm."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 215,
      "context_id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 2,
      "paragraph": "Paul's missing brother Raymond (Woody Harrelson) returns home, beats him up, and demands a portion of the insurance money. By suggesting that Ted assaulted him, Paul speeds up the delivery of the million dollar insurance payment. He has the body exhumed and agrees to exchange it and a portion of the money for Margaret. Fearing that Raymond will attempt to kill Margaret to keep her quiet, Paul considers killing his brother in his sleep, but cannot bring himself to do so.",
      "question_template": "Margaret was [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Margaret"
      ],
      "predicates": [
        "MissingBrother(x) ::: x is a missing brother.",
        "Beats(x, y) ::: x beats y.",
        "Demands(x, y) ::: x demands y.",
        "Suggests(x, y) ::: x suggests that y.",
        "SpeedsUpDelivery(x, y) ::: x speeds up the delivery of y.",
        "Exhume(x) ::: x is exhumed.",
        "AgreesToExchange(x, y, z) ::: x agrees to exchange y for z.",
        "Fears(x, y) ::: x fears y.",
        "ConsidersKilling(x, y) ::: x considers killing y.",
        "CannotDo(x) ::: x cannot do something."
      ],
      "premises": [
        "MissingBrother(raymond) ∧ Beats(raymond, paul) ∧ Demands(raymond, portionOfInsurance) ::: Raymond is Paul's missing brother, beats him up, and demands a portion of the insurance money.",
        "Suggests(pauls, TedAssaulted(raymond)) ∧ SpeedsUpDelivery(pauls, millionDollarInsurancePayment) ::: Paul speeds up the delivery of the million dollar insurance payment by suggesting that Ted assaulted Raymond.",
        "Exhume(body) ∧ AgreesToExchange(pauls, body, margaret) ::: Paul has the body exhumed and agrees to exchange it and a portion of the money for Margaret.",
        "Fears(pauls, RaymondWillKill(margaret)) ::: Paul fears that Raymond will attempt to kill Margaret to keep her quiet.",
        "ConsidersKilling(pauls, raymond) ∧ CannotDo(pauls) ::: Paul considers killing Raymond but cannot bring himself to do so."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 215,
      "context_id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 3,
      "paragraph": "The next morning Paul leaves his brother asleep and meets the hit-men for the exchange. Raymond is angered at his brother's deception and arrives as well, and is told by the insurance agent, who has finally pieced together what has happened, about his million dollar policy. Raymond then pulls out a pistol and shoots Margaret in the back as she flees. He is in turn shot in the stomach by one of the hit-men (Tim Nelson). Paul finds Margaret alive; he had hidden the insurance money in her jacket, and it stopped the bullet. The brothers say goodbye as Raymond dies. Paul tells Ted that he only committed fraud out of love for his wife, which appeals to Ted's renewed feelings for Tiffany; touched, he lets them go. Using the money, Paul takes Margaret on a tropical vacation.",
      "question_template": "Margaret was [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Margaret",
        "Paul's wife",
        "The insurance money was hidden in her jacket"
      ],
      "predicates": [
        "Asleep(x) ::: x is asleep.",
        "Meets(x, y) ::: x meets y.",
        "Angered(x, y) ::: x is angered at y's actions.",
        "ToldBy(x, y, z) ::: x is told by y about z.",
        "Shoots(x, y) ::: x shoots y.",
        "ShotBy(x, y) ::: x is shot by y.",
        "Finds(x, y) ::: x finds y.",
        "Hidden(x, y) ::: x has hidden y.",
        "CommitsFraud(x, y) ::: x commits fraud out of love for y.",
        "LetsGo(x, y) ::: x lets y go.",
        "TakesOnVacation(x, y) ::: x takes y on vacation."
      ],
      "premises": [
        "Asleep(a_2) ::: Raymond is asleep.",
        "Meets(a_1, hit_men) ::: Paul meets the hit-men for the exchange.",
        "Angered(a_2, a_1) ::: Raymond is angered at Paul's deception.",
        "ToldBy(a_2, insurance_agent, million_dollar_policy) ::: Raymond is told by the insurance agent about his million dollar policy.",
        "Shoots(a_2, a_3) ::: Raymond shoots Margaret in the back.",
        "ShotBy(a_2, hit_man) ::: Raymond is shot in the stomach by one of the hit-men (Tim Nelson).",
        "Finds(a_1, a_3) ::: Paul finds Margaret alive.",
        "Hidden(a_1, insurance_money) ::: Paul has hidden the insurance money in Margaret's jacket.",
        "CommitsFraud(a_1, a_3) ::: Paul commits fraud out of love for his wife (Margaret).",
        "LetsGo(a_4, a_1) ::: Ted lets Paul and Margaret go.",
        "TakesOnVacation(a_1, tropical_vacation) ::: Paul takes Margaret on a tropical vacation.",
        "Conclusion:",
        "Raymond dies after being shot by a hit-man.",
        "Paul's actions are motivated by love for his wife."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "217": [
    {
      "id": 217,
      "context_id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 1,
      "paragraph": "Local police are convinced, but promotion-hungry insurance agent Ted Waters (Giovanni Ribisi) is not. The hitmen who dumped the body are also in search of the corpse for proof to collect their payment. They take Margaret hostage to ensure that they will get the body. Meanwhile, Ted is having problems with his girlfriend, Tiffany (Alison Lohman), who he neglects as he works his way up in his firm.",
      "question_template": "[[CANDIDATE_ANSWER]] was Ted Waters.",
      "candidate_answers": [
        "insurance agent Ted Waters",
        "promotion-hungry insurance agent"
      ],
      "predicates": [
        "Convinced(x) ::: x is convinced by the local police.",
        "PromotionHungry(x) ::: x is eager for promotion.",
        "InSearchOf(x, y) ::: x is in search of y.",
        "Hostage(x, y) ::: x is holding y hostage.",
        "Neglects(x, y) ::: x neglects y.",
        "WorksUp(x) ::: x is working his way up in his firm."
      ],
      "premises": [
        "Convinced(localPolice) ∧ ¬Convinced(ted) ::: Local police are convinced, but promotion-hungry insurance agent Ted Waters is not.",
        "∀x (InSearchOf(hitmen, corpse) ∧ Hostage(hitmen, margaret)) ::: The hitmen who dumped the body are also in search of the corpse for proof to collect their payment and take Margaret hostage to ensure that they will get the body.",
        "Neglects(ted, tiffany) ∧ WorksUp(ted) ::: Ted is having problems with his girlfriend, Tiffany, whom he neglects as he works his way up in his firm."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 217,
      "context_id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 3,
      "paragraph": "The next morning Paul leaves his brother asleep and meets the hit-men for the exchange. Raymond is angered at his brother's deception and arrives as well, and is told by the insurance agent, who has finally pieced together what has happened, about his million dollar policy. Raymond then pulls out a pistol and shoots Margaret in the back as she flees. He is in turn shot in the stomach by one of the hit-men (Tim Nelson). Paul finds Margaret alive; he had hidden the insurance money in her jacket, and it stopped the bullet. The brothers say goodbye as Raymond dies. Paul tells Ted that he only committed fraud out of love for his wife, which appeals to Ted's renewed feelings for Tiffany; touched, he lets them go. Using the money, Paul takes Margaret on a tropical vacation.",
      "question_template": "[[CANDIDATE_ANSWER]] was Ted Waters.",
      "candidate_answers": [
        "Ted Waters",
        "The insurance agent",
        "Paul's friend"
      ],
      "predicates": [
        "Asleep(x) ::: x is asleep.",
        "Meets(x, y) ::: x meets y.",
        "Angered(x, y) ::: x is angered at y's actions.",
        "ToldBy(x, y, z) ::: x is told by y about z.",
        "Shoots(x, y) ::: x shoots y.",
        "ShotBy(x, y) ::: x is shot by y.",
        "Finds(x, y) ::: x finds y.",
        "Hidden(x, y) ::: x has hidden y.",
        "CommitsFraud(x, y) ::: x commits fraud out of love for y.",
        "LetsGo(x, y) ::: x lets y go.",
        "TakesOnVacation(x, y) ::: x takes y on vacation."
      ],
      "premises": [
        "Asleep(a_2) ::: Raymond is asleep.",
        "Meets(a_1, hit_men) ::: Paul meets the hit-men for the exchange.",
        "Angered(a_2, a_1) ::: Raymond is angered at Paul's deception.",
        "ToldBy(a_2, insurance_agent, million_dollar_policy) ::: Raymond is told by the insurance agent about his million dollar policy.",
        "Shoots(a_2, a_3) ::: Raymond shoots Margaret in the back.",
        "ShotBy(a_2, hit_man) ::: Raymond is shot in the stomach by one of the hit-men (Tim Nelson).",
        "Finds(a_1, a_3) ::: Paul finds Margaret alive.",
        "Hidden(a_1, insurance_money) ::: Paul has hidden the insurance money in Margaret's jacket.",
        "CommitsFraud(a_1, a_3) ::: Paul commits fraud out of love for his wife (Margaret).",
        "LetsGo(a_4, a_1) ::: Ted lets Paul and Margaret go.",
        "TakesOnVacation(a_1, tropical_vacation) ::: Paul takes Margaret on a tropical vacation.",
        "Conclusion:",
        "Raymond dies after being shot by a hit-man.",
        "Paul's actions are motivated by love for his wife."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "218": [
    {
      "id": 218,
      "context_id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 1,
      "paragraph": "Local police are convinced, but promotion-hungry insurance agent Ted Waters (Giovanni Ribisi) is not. The hitmen who dumped the body are also in search of the corpse for proof to collect their payment. They take Margaret hostage to ensure that they will get the body. Meanwhile, Ted is having problems with his girlfriend, Tiffany (Alison Lohman), who he neglects as he works his way up in his firm.",
      "question_template": "Tiffany was [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Ted's girlfriend",
        "Having problems with his girlfriend"
      ],
      "predicates": [
        "Convinced(x) ::: x is convinced by the local police.",
        "PromotionHungry(x) ::: x is eager for promotion.",
        "InSearchOf(x, y) ::: x is in search of y.",
        "Hostage(x, y) ::: x is holding y hostage.",
        "Neglects(x, y) ::: x neglects y.",
        "WorksUp(x) ::: x is working his way up in his firm."
      ],
      "premises": [
        "Convinced(localPolice) ∧ ¬Convinced(ted) ::: Local police are convinced, but promotion-hungry insurance agent Ted Waters is not.",
        "∀x (InSearchOf(hitmen, corpse) ∧ Hostage(hitmen, margaret)) ::: The hitmen who dumped the body are also in search of the corpse for proof to collect their payment and take Margaret hostage to ensure that they will get the body.",
        "Neglects(ted, tiffany) ∧ WorksUp(ted) ::: Ted is having problems with his girlfriend, Tiffany, whom he neglects as he works his way up in his firm."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "219": [
    {
      "id": 219,
      "context_id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 2,
      "paragraph": "Paul's missing brother Raymond (Woody Harrelson) returns home, beats him up, and demands a portion of the insurance money. By suggesting that Ted assaulted him, Paul speeds up the delivery of the million dollar insurance payment. He has the body exhumed and agrees to exchange it and a portion of the money for Margaret. Fearing that Raymond will attempt to kill Margaret to keep her quiet, Paul considers killing his brother in his sleep, but cannot bring himself to do so.",
      "question_template": "Paul collected [[CANDIDATE_ANSWER]] for his brother's life insurance.",
      "candidate_answers": [
        "a portion of the insurance money",
        "the million dollar insurance payment"
      ],
      "predicates": [
        "MissingBrother(x) ::: x is a missing brother.",
        "Beats(x, y) ::: x beats y.",
        "Demands(x, y) ::: x demands y.",
        "Suggests(x, y) ::: x suggests that y.",
        "SpeedsUpDelivery(x, y) ::: x speeds up the delivery of y.",
        "Exhume(x) ::: x is exhumed.",
        "AgreesToExchange(x, y, z) ::: x agrees to exchange y for z.",
        "Fears(x, y) ::: x fears y.",
        "ConsidersKilling(x, y) ::: x considers killing y.",
        "CannotDo(x) ::: x cannot do something."
      ],
      "premises": [
        "MissingBrother(raymond) ∧ Beats(raymond, paul) ∧ Demands(raymond, portionOfInsurance) ::: Raymond is Paul's missing brother, beats him up, and demands a portion of the insurance money.",
        "Suggests(pauls, TedAssaulted(raymond)) ∧ SpeedsUpDelivery(pauls, millionDollarInsurancePayment) ::: Paul speeds up the delivery of the million dollar insurance payment by suggesting that Ted assaulted Raymond.",
        "Exhume(body) ∧ AgreesToExchange(pauls, body, margaret) ::: Paul has the body exhumed and agrees to exchange it and a portion of the money for Margaret.",
        "Fears(pauls, RaymondWillKill(margaret)) ::: Paul fears that Raymond will attempt to kill Margaret to keep her quiet.",
        "ConsidersKilling(pauls, raymond) ∧ CannotDo(pauls) ::: Paul considers killing Raymond but cannot bring himself to do so."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 219,
      "context_id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 3,
      "paragraph": "The next morning Paul leaves his brother asleep and meets the hit-men for the exchange. Raymond is angered at his brother's deception and arrives as well, and is told by the insurance agent, who has finally pieced together what has happened, about his million dollar policy. Raymond then pulls out a pistol and shoots Margaret in the back as she flees. He is in turn shot in the stomach by one of the hit-men (Tim Nelson). Paul finds Margaret alive; he had hidden the insurance money in her jacket, and it stopped the bullet. The brothers say goodbye as Raymond dies. Paul tells Ted that he only committed fraud out of love for his wife, which appeals to Ted's renewed feelings for Tiffany; touched, he lets them go. Using the money, Paul takes Margaret on a tropical vacation.",
      "question_template": "Paul collected [[CANDIDATE_ANSWER]] for his brother's life insurance.",
      "candidate_answers": [
        "a million dollar policy"
      ],
      "predicates": [
        "Asleep(x) ::: x is asleep.",
        "Meets(x, y) ::: x meets y.",
        "Angered(x, y) ::: x is angered at y's actions.",
        "ToldBy(x, y, z) ::: x is told by y about z.",
        "Shoots(x, y) ::: x shoots y.",
        "ShotBy(x, y) ::: x is shot by y.",
        "Finds(x, y) ::: x finds y.",
        "Hidden(x, y) ::: x has hidden y.",
        "CommitsFraud(x, y) ::: x commits fraud out of love for y.",
        "LetsGo(x, y) ::: x lets y go.",
        "TakesOnVacation(x, y) ::: x takes y on vacation."
      ],
      "premises": [
        "Asleep(a_2) ::: Raymond is asleep.",
        "Meets(a_1, hit_men) ::: Paul meets the hit-men for the exchange.",
        "Angered(a_2, a_1) ::: Raymond is angered at Paul's deception.",
        "ToldBy(a_2, insurance_agent, million_dollar_policy) ::: Raymond is told by the insurance agent about his million dollar policy.",
        "Shoots(a_2, a_3) ::: Raymond shoots Margaret in the back.",
        "ShotBy(a_2, hit_man) ::: Raymond is shot in the stomach by one of the hit-men (Tim Nelson).",
        "Finds(a_1, a_3) ::: Paul finds Margaret alive.",
        "Hidden(a_1, insurance_money) ::: Paul has hidden the insurance money in Margaret's jacket.",
        "CommitsFraud(a_1, a_3) ::: Paul commits fraud out of love for his wife (Margaret).",
        "LetsGo(a_4, a_1) ::: Ted lets Paul and Margaret go.",
        "TakesOnVacation(a_1, tropical_vacation) ::: Paul takes Margaret on a tropical vacation.",
        "Conclusion:",
        "Raymond dies after being shot by a hit-man.",
        "Paul's actions are motivated by love for his wife."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "220": [
    {
      "id": 220,
      "context_id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 3,
      "paragraph": "The next morning Paul leaves his brother asleep and meets the hit-men for the exchange. Raymond is angered at his brother's deception and arrives as well, and is told by the insurance agent, who has finally pieced together what has happened, about his million dollar policy. Raymond then pulls out a pistol and shoots Margaret in the back as she flees. He is in turn shot in the stomach by one of the hit-men (Tim Nelson). Paul finds Margaret alive; he had hidden the insurance money in her jacket, and it stopped the bullet. The brothers say goodbye as Raymond dies. Paul tells Ted that he only committed fraud out of love for his wife, which appeals to Ted's renewed feelings for Tiffany; touched, he lets them go. Using the money, Paul takes Margaret on a tropical vacation.",
      "question_template": "[[CANDIDATE_ANSWER]] was Raymond.",
      "candidate_answers": [
        "Raymond is Paul’s brother",
        "Raymond is angered at his brother's deception",
        "Raymond pulls out a pistol and shoots Margaret in the back",
        "Raymond is shot in the stomach by one of the hit-men",
        "Raymond dies"
      ],
      "predicates": [
        "Asleep(x) ::: x is asleep.",
        "Meets(x, y) ::: x meets y.",
        "Angered(x, y) ::: x is angered at y's actions.",
        "ToldBy(x, y, z) ::: x is told by y about z.",
        "Shoots(x, y) ::: x shoots y.",
        "ShotBy(x, y) ::: x is shot by y.",
        "Finds(x, y) ::: x finds y.",
        "Hidden(x, y) ::: x has hidden y.",
        "CommitsFraud(x, y) ::: x commits fraud out of love for y.",
        "LetsGo(x, y) ::: x lets y go.",
        "TakesOnVacation(x, y) ::: x takes y on vacation."
      ],
      "premises": [
        "Asleep(a_2) ::: Raymond is asleep.",
        "Meets(a_1, hit_men) ::: Paul meets the hit-men for the exchange.",
        "Angered(a_2, a_1) ::: Raymond is angered at Paul's deception.",
        "ToldBy(a_2, insurance_agent, million_dollar_policy) ::: Raymond is told by the insurance agent about his million dollar policy.",
        "Shoots(a_2, a_3) ::: Raymond shoots Margaret in the back.",
        "ShotBy(a_2, hit_man) ::: Raymond is shot in the stomach by one of the hit-men (Tim Nelson).",
        "Finds(a_1, a_3) ::: Paul finds Margaret alive.",
        "Hidden(a_1, insurance_money) ::: Paul has hidden the insurance money in Margaret's jacket.",
        "CommitsFraud(a_1, a_3) ::: Paul commits fraud out of love for his wife (Margaret).",
        "LetsGo(a_4, a_1) ::: Ted lets Paul and Margaret go.",
        "TakesOnVacation(a_1, tropical_vacation) ::: Paul takes Margaret on a tropical vacation.",
        "Conclusion:",
        "Raymond dies after being shot by a hit-man.",
        "Paul's actions are motivated by love for his wife."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "221": [
    {
      "id": 221,
      "context_id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 3,
      "paragraph": "The next morning Paul leaves his brother asleep and meets the hit-men for the exchange. Raymond is angered at his brother's deception and arrives as well, and is told by the insurance agent, who has finally pieced together what has happened, about his million dollar policy. Raymond then pulls out a pistol and shoots Margaret in the back as she flees. He is in turn shot in the stomach by one of the hit-men (Tim Nelson). Paul finds Margaret alive; he had hidden the insurance money in her jacket, and it stopped the bullet. The brothers say goodbye as Raymond dies. Paul tells Ted that he only committed fraud out of love for his wife, which appeals to Ted's renewed feelings for Tiffany; touched, he lets them go. Using the money, Paul takes Margaret on a tropical vacation.",
      "question_template": "[[CANDIDATE_ANSWER]] shot Raymond.",
      "candidate_answers": [
        "Raymond is shot in the stomach by one of the hit-men ."
      ],
      "predicates": [
        "Asleep(x) ::: x is asleep.",
        "Meets(x, y) ::: x meets y.",
        "Angered(x, y) ::: x is angered at y's actions.",
        "ToldBy(x, y, z) ::: x is told by y about z.",
        "Shoots(x, y) ::: x shoots y.",
        "ShotBy(x, y) ::: x is shot by y.",
        "Finds(x, y) ::: x finds y.",
        "Hidden(x, y) ::: x has hidden y.",
        "CommitsFraud(x, y) ::: x commits fraud out of love for y.",
        "LetsGo(x, y) ::: x lets y go.",
        "TakesOnVacation(x, y) ::: x takes y on vacation."
      ],
      "premises": [
        "Asleep(a_2) ::: Raymond is asleep.",
        "Meets(a_1, hit_men) ::: Paul meets the hit-men for the exchange.",
        "Angered(a_2, a_1) ::: Raymond is angered at Paul's deception.",
        "ToldBy(a_2, insurance_agent, million_dollar_policy) ::: Raymond is told by the insurance agent about his million dollar policy.",
        "Shoots(a_2, a_3) ::: Raymond shoots Margaret in the back.",
        "ShotBy(a_2, hit_man) ::: Raymond is shot in the stomach by one of the hit-men (Tim Nelson).",
        "Finds(a_1, a_3) ::: Paul finds Margaret alive.",
        "Hidden(a_1, insurance_money) ::: Paul has hidden the insurance money in Margaret's jacket.",
        "CommitsFraud(a_1, a_3) ::: Paul commits fraud out of love for his wife (Margaret).",
        "LetsGo(a_4, a_1) ::: Ted lets Paul and Margaret go.",
        "TakesOnVacation(a_1, tropical_vacation) ::: Paul takes Margaret on a tropical vacation.",
        "Conclusion:",
        "Raymond dies after being shot by a hit-man.",
        "Paul's actions are motivated by love for his wife."
      ],
      "conclusions": [
        "ShotBy(raymond, hit_man)"
      ]
    }
  ],
  "223": [
    {
      "id": 223,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 1,
      "paragraph": "The book place when Conan is about forty-five, during his reign as King of Aquilonia, and follows a plot by a group of conspirators to depose him in favor of Valerius, heir to Conan's predecessor Numedides, whom he had slain to gain the throne. To accomplish this they resort to necromancy, resurrecting Xaltotun, an ancient sorcerer from the pre-Hyborian empire of Acheron. With his aid the Aquilonian army is defeated by that of the rival kingdom of Nemedia and occupied. Conan, captured, is slated for execution until the sympathetic slave girl Zenobia risks her life to free him.",
      "question_template": "Conan wants to make [[CANDIDATE_ANSWER]] his queen.",
      "candidate_answers": [
        "Zenobia"
      ],
      "predicates": [
        "King(x) ::: x is a king.",
        "Reign(x, y) ::: x reigns in the year y.",
        "Conspirators(x) ::: x is a group of conspirators.",
        "Depose(x, y) ::: x attempts to depose y.",
        "Heir(x, y) ::: x is the heir to y.",
        "Slain(x, y) ::: x has slain y.",
        "ResortToNecromancy(x) ::: x resorts to necromancy.",
        "Resurrect(x, y) ::: x resurrects y.",
        "AncientSorcerer(x) ::: x is an ancient sorcerer.",
        "DefeatedBy(x, y) ::: x is defeated by y.",
        "Captured(x) ::: x is captured.",
        "SlatedForExecution(x) ::: x is slated for execution.",
        "RisksLife(x, y) ::: x risks their life to save y."
      ],
      "premises": [
        "King(conan) ∧ Reign(conan, fortyFive) ::: Conan is a king during his reign at the age of forty-five.",
        "Conspirators(group) ∧ Depose(group, conan) ∧ Heir(valerius, numedides) ∧ Slain(conan, numedides) ::: A group of conspirators attempts to depose Conan in favor of Valerius, who is the heir to Numedides, whom Conan has slain.",
        "ResortToNecromancy(group) ∧ Resurrect(xaltotun, ancientSorcerer) ::: The conspirators resort to necromancy, resurrecting Xaltotun, an ancient sorcerer.",
        "DefeatedBy(aquilonianArmy, nemediaArmy) ::: The Aquilonian army is defeated by the army of the rival kingdom of Nemedia.",
        "Captured(conan) ∧ SlatedForExecution(conan) ::: Conan is captured and slated for execution.",
        "RisksLife(zenobia, conan) ::: Zenobia risks her life to free Conan."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "224": [
    {
      "id": 224,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 0,
      "paragraph": " The plot is a loosely based on a melange of motifs from previous Conan short stories, most notably \"The Scarlet Citadel\", with which its early chapters shares an almost identical storyline: Conan defeated in battle, captured and placed in a monster-infested dungeon, finds an unexpected ally and escapes; meanwhile, the population of the Aquilonian capital, believing him dead, riots and is ready to accept an alternative King. From here the two diverge: The Scarlet Citadel, a short story, ends with Conan coming back when the rioting just started and making short work of his foes; in the book-length Hour of the Dragon it is much more complicated, Aquilonia has to live under a long and harrowing foreign occupation while Conan goes through a long hazardous quest, before he could finally come back and dispose of his foes.",
      "question_template": "Conan was king of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Aquilonia"
      ],
      "predicates": [
        "Defeated(a_2) ::: The individual is defeated in battle.",
        "Captured(a_2) ::: The individual is captured.",
        "PlacedInDungeon(a_2) ::: The individual is placed in a monster-infested dungeon.",
        "FindsAlly(a_2) ::: The individual finds an unexpected ally.",
        "Escapes(a_2) ::: The individual escapes from the dungeon.",
        "Riots(a_0) ::: The population of the Aquilonian capital riots.",
        "BelievesDead(a_0, a_2) ::: The population believes the individual is dead.",
        "AcceptsAlternativeKing(a_0) ::: The population is ready to accept an alternative King.",
        "Returns(a_2) ::: The individual returns.",
        "DisposesFoes(a_2) ::: The individual disposes of his foes.",
        "LongHarrowingOccupation(a_0) ::: Aquilonia lives under a long and harrowing foreign occupation.",
        "HazardousQuest(a_2) ::: The individual goes through a long hazardous quest."
      ],
      "premises": [
        "Defeated(a_2) ∧ Captured(a_2) ∧ PlacedInDungeon(a_2) ∧ FindsAlly(a_2) ∧ Escapes(a_2) ::: The individual is defeated in battle, captured, placed in a monster-infested dungeon, finds an unexpected ally, and escapes.",
        "Riots(a_0) ∧ BelievesDead(a_0, a_2) ∧ AcceptsAlternativeKing(a_0) ::: The population of the Aquilonian capital riots, believing the individual is dead and ready to accept an alternative King.",
        "Returns(a_2) ∧ LongHarrowingOccupation(a_0) ∧ HazardousQuest(a_2) ∧ DisposesFoes(a_2) ::: The individual returns after Aquilonia has lived under a long and harrowing foreign occupation and goes through a long hazardous quest before he could finally dispose of his foes."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 224,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 2,
      "paragraph": "Conan's quest to retrieve the Heart of Ahriman in order to defeat the wizard and regain his throne takes him through all the lands of Hyboria.",
      "question_template": "Conan was king of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Hyboria"
      ],
      "predicates": [
        "Quest(x) ::: x is on a quest.",
        "Retrieve(x, y) ::: x retrieves y.",
        "Defeat(x, y) ::: x defeats y.",
        "Regain(x, y) ::: x regains y.",
        "Throne(x) ::: x is a throne.",
        "Land(x) ::: x is a land.",
        "In(x, y) ::: x is in y."
      ],
      "premises": [
        "Quest(conan) ∧ Retrieve(conan, heartOfAhriman) ∧ Defeat(wizard, conan) ∧ Regain(conan, throne) ::: Conan's quest to retrieve the Heart of Ahriman in order to defeat the wizard and regain his throne.",
        "∀x (In(conan, x) → Land(x)) ::: Conan travels through all the lands of Hyboria.",
        "Conclusion:",
        "Quest(conan) ::: Conan is on a quest.",
        "∃y (Land(y) ∧ In(conan, y)) ::: There exists a land that Conan is in."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 224,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 3,
      "paragraph": "After his eventual triumph he vows to make Zenobia his queen.",
      "question_template": "Conan was king of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Zenobia"
      ],
      "predicates": [
        "Triumph(x) ::: x achieves a significant victory.",
        "Vows(x, y) ::: x makes a solemn promise regarding y.",
        "Queen(y) ::: y is a queen.",
        "Elevate(x, y) ::: x raises y to a higher status."
      ],
      "premises": [
        "Triumph(a_2) ∧ Vows(a_2, a_1) ::: After his eventual triumph, the individual vows to make Zenobia his queen.",
        "Elevate(a_2, a_1) ::: The individual intends to elevate Zenobia to the status of queen."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "225": [
    {
      "id": 225,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 2,
      "paragraph": "Conan's quest to retrieve the Heart of Ahriman in order to defeat the wizard and regain his throne takes him through all the lands of Hyboria.",
      "question_template": "Conan wants to retrieve [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The Heart of Ahriman"
      ],
      "predicates": [
        "Quest(x) ::: x is on a quest.",
        "Retrieve(x, y) ::: x retrieves y.",
        "Defeat(x, y) ::: x defeats y.",
        "Regain(x, y) ::: x regains y.",
        "Throne(x) ::: x is a throne.",
        "Land(x) ::: x is a land.",
        "In(x, y) ::: x is in y."
      ],
      "premises": [
        "Quest(conan) ∧ Retrieve(conan, heartOfAhriman) ∧ Defeat(wizard, conan) ∧ Regain(conan, throne) ::: Conan's quest to retrieve the Heart of Ahriman in order to defeat the wizard and regain his throne.",
        "∀x (In(conan, x) → Land(x)) ::: Conan travels through all the lands of Hyboria.",
        "Conclusion:",
        "Quest(conan) ::: Conan is on a quest.",
        "∃y (Land(y) ∧ In(conan, y)) ::: There exists a land that Conan is in."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "226": [
    {
      "id": 226,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 0,
      "paragraph": " The plot is a loosely based on a melange of motifs from previous Conan short stories, most notably \"The Scarlet Citadel\", with which its early chapters shares an almost identical storyline: Conan defeated in battle, captured and placed in a monster-infested dungeon, finds an unexpected ally and escapes; meanwhile, the population of the Aquilonian capital, believing him dead, riots and is ready to accept an alternative King. From here the two diverge: The Scarlet Citadel, a short story, ends with Conan coming back when the rioting just started and making short work of his foes; in the book-length Hour of the Dragon it is much more complicated, Aquilonia has to live under a long and harrowing foreign occupation while Conan goes through a long hazardous quest, before he could finally come back and dispose of his foes.",
      "question_template": "The conspirators resort to [[CANDIDATE_ANSWER]] to get rid of Conan.",
      "candidate_answers": [
        "- The population of the Aquilonian capital, believing him dead, riots and is ready to accept an alternative King.",
        "- Aquilonia has to live under a long and harrowing foreign occupation."
      ],
      "predicates": [
        "Defeated(a_2) ::: The individual is defeated in battle.",
        "Captured(a_2) ::: The individual is captured.",
        "PlacedInDungeon(a_2) ::: The individual is placed in a monster-infested dungeon.",
        "FindsAlly(a_2) ::: The individual finds an unexpected ally.",
        "Escapes(a_2) ::: The individual escapes from the dungeon.",
        "Riots(a_0) ::: The population of the Aquilonian capital riots.",
        "BelievesDead(a_0, a_2) ::: The population believes the individual is dead.",
        "AcceptsAlternativeKing(a_0) ::: The population is ready to accept an alternative King.",
        "Returns(a_2) ::: The individual returns.",
        "DisposesFoes(a_2) ::: The individual disposes of his foes.",
        "LongHarrowingOccupation(a_0) ::: Aquilonia lives under a long and harrowing foreign occupation.",
        "HazardousQuest(a_2) ::: The individual goes through a long hazardous quest."
      ],
      "premises": [
        "Defeated(a_2) ∧ Captured(a_2) ∧ PlacedInDungeon(a_2) ∧ FindsAlly(a_2) ∧ Escapes(a_2) ::: The individual is defeated in battle, captured, placed in a monster-infested dungeon, finds an unexpected ally, and escapes.",
        "Riots(a_0) ∧ BelievesDead(a_0, a_2) ∧ AcceptsAlternativeKing(a_0) ::: The population of the Aquilonian capital riots, believing the individual is dead and ready to accept an alternative King.",
        "Returns(a_2) ∧ LongHarrowingOccupation(a_0) ∧ HazardousQuest(a_2) ∧ DisposesFoes(a_2) ::: The individual returns after Aquilonia has lived under a long and harrowing foreign occupation and goes through a long hazardous quest before he could finally dispose of his foes."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 226,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 1,
      "paragraph": "The book place when Conan is about forty-five, during his reign as King of Aquilonia, and follows a plot by a group of conspirators to depose him in favor of Valerius, heir to Conan's predecessor Numedides, whom he had slain to gain the throne. To accomplish this they resort to necromancy, resurrecting Xaltotun, an ancient sorcerer from the pre-Hyborian empire of Acheron. With his aid the Aquilonian army is defeated by that of the rival kingdom of Nemedia and occupied. Conan, captured, is slated for execution until the sympathetic slave girl Zenobia risks her life to free him.",
      "question_template": "The conspirators resort to [[CANDIDATE_ANSWER]] to get rid of Conan.",
      "candidate_answers": [
        "- Necromancy",
        "- Resurrecting Xaltotun, an ancient sorcerer from the pre-Hyborian empire of Acheron"
      ],
      "predicates": [
        "King(x) ::: x is a king.",
        "Reign(x, y) ::: x reigns in the year y.",
        "Conspirators(x) ::: x is a group of conspirators.",
        "Depose(x, y) ::: x attempts to depose y.",
        "Heir(x, y) ::: x is the heir to y.",
        "Slain(x, y) ::: x has slain y.",
        "ResortToNecromancy(x) ::: x resorts to necromancy.",
        "Resurrect(x, y) ::: x resurrects y.",
        "AncientSorcerer(x) ::: x is an ancient sorcerer.",
        "DefeatedBy(x, y) ::: x is defeated by y.",
        "Captured(x) ::: x is captured.",
        "SlatedForExecution(x) ::: x is slated for execution.",
        "RisksLife(x, y) ::: x risks their life to save y."
      ],
      "premises": [
        "King(conan) ∧ Reign(conan, fortyFive) ::: Conan is a king during his reign at the age of forty-five.",
        "Conspirators(group) ∧ Depose(group, conan) ∧ Heir(valerius, numedides) ∧ Slain(conan, numedides) ::: A group of conspirators attempts to depose Conan in favor of Valerius, who is the heir to Numedides, whom Conan has slain.",
        "ResortToNecromancy(group) ∧ Resurrect(xaltotun, ancientSorcerer) ::: The conspirators resort to necromancy, resurrecting Xaltotun, an ancient sorcerer.",
        "DefeatedBy(aquilonianArmy, nemediaArmy) ::: The Aquilonian army is defeated by the army of the rival kingdom of Nemedia.",
        "Captured(conan) ∧ SlatedForExecution(conan) ::: Conan is captured and slated for execution.",
        "RisksLife(zenobia, conan) ::: Zenobia risks her life to free Conan."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "227": [
    {
      "id": 227,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 1,
      "paragraph": "The book place when Conan is about forty-five, during his reign as King of Aquilonia, and follows a plot by a group of conspirators to depose him in favor of Valerius, heir to Conan's predecessor Numedides, whom he had slain to gain the throne. To accomplish this they resort to necromancy, resurrecting Xaltotun, an ancient sorcerer from the pre-Hyborian empire of Acheron. With his aid the Aquilonian army is defeated by that of the rival kingdom of Nemedia and occupied. Conan, captured, is slated for execution until the sympathetic slave girl Zenobia risks her life to free him.",
      "question_template": "[[CANDIDATE_ANSWER]] is the heir to Numedides.",
      "candidate_answers": [
        "Valerius"
      ],
      "predicates": [
        "King(x) ::: x is a king.",
        "Reign(x, y) ::: x reigns in the year y.",
        "Conspirators(x) ::: x is a group of conspirators.",
        "Depose(x, y) ::: x attempts to depose y.",
        "Heir(x, y) ::: x is the heir to y.",
        "Slain(x, y) ::: x has slain y.",
        "ResortToNecromancy(x) ::: x resorts to necromancy.",
        "Resurrect(x, y) ::: x resurrects y.",
        "AncientSorcerer(x) ::: x is an ancient sorcerer.",
        "DefeatedBy(x, y) ::: x is defeated by y.",
        "Captured(x) ::: x is captured.",
        "SlatedForExecution(x) ::: x is slated for execution.",
        "RisksLife(x, y) ::: x risks their life to save y."
      ],
      "premises": [
        "King(conan) ∧ Reign(conan, fortyFive) ::: Conan is a king during his reign at the age of forty-five.",
        "Conspirators(group) ∧ Depose(group, conan) ∧ Heir(valerius, numedides) ∧ Slain(conan, numedides) ::: A group of conspirators attempts to depose Conan in favor of Valerius, who is the heir to Numedides, whom Conan has slain.",
        "ResortToNecromancy(group) ∧ Resurrect(xaltotun, ancientSorcerer) ::: The conspirators resort to necromancy, resurrecting Xaltotun, an ancient sorcerer.",
        "DefeatedBy(aquilonianArmy, nemediaArmy) ::: The Aquilonian army is defeated by the army of the rival kingdom of Nemedia.",
        "Captured(conan) ∧ SlatedForExecution(conan) ::: Conan is captured and slated for execution.",
        "RisksLife(zenobia, conan) ::: Zenobia risks her life to free Conan."
      ],
      "conclusions": [
        "Heir(valerius, numedides)"
      ]
    },
    {
      "id": 227,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 3,
      "paragraph": "After his eventual triumph he vows to make Zenobia his queen.",
      "question_template": "[[CANDIDATE_ANSWER]] is the heir to Numedides.",
      "candidate_answers": [
        "Zenobia"
      ],
      "predicates": [
        "Triumph(x) ::: x achieves a significant victory.",
        "Vows(x, y) ::: x makes a solemn promise regarding y.",
        "Queen(y) ::: y is a queen.",
        "Elevate(x, y) ::: x raises y to a higher status."
      ],
      "premises": [
        "Triumph(a_2) ∧ Vows(a_2, a_1) ::: After his eventual triumph, the individual vows to make Zenobia his queen.",
        "Elevate(a_2, a_1) ::: The individual intends to elevate Zenobia to the status of queen."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "228": [
    {
      "id": 228,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 0,
      "paragraph": " The plot is a loosely based on a melange of motifs from previous Conan short stories, most notably \"The Scarlet Citadel\", with which its early chapters shares an almost identical storyline: Conan defeated in battle, captured and placed in a monster-infested dungeon, finds an unexpected ally and escapes; meanwhile, the population of the Aquilonian capital, believing him dead, riots and is ready to accept an alternative King. From here the two diverge: The Scarlet Citadel, a short story, ends with Conan coming back when the rioting just started and making short work of his foes; in the book-length Hour of the Dragon it is much more complicated, Aquilonia has to live under a long and harrowing foreign occupation while Conan goes through a long hazardous quest, before he could finally come back and dispose of his foes.",
      "question_template": "[[CANDIDATE_ANSWER]] defeats the Aquilonian army.",
      "candidate_answers": [
        "The population of the Aquilonian capital, believing him dead, riots and is ready to accept an alternative King",
        "Aquilonia has to live under a long and harrowing foreign occupation"
      ],
      "predicates": [
        "Defeated(a_2) ::: The individual is defeated in battle.",
        "Captured(a_2) ::: The individual is captured.",
        "PlacedInDungeon(a_2) ::: The individual is placed in a monster-infested dungeon.",
        "FindsAlly(a_2) ::: The individual finds an unexpected ally.",
        "Escapes(a_2) ::: The individual escapes from the dungeon.",
        "Riots(a_0) ::: The population of the Aquilonian capital riots.",
        "BelievesDead(a_0, a_2) ::: The population believes the individual is dead.",
        "AcceptsAlternativeKing(a_0) ::: The population is ready to accept an alternative King.",
        "Returns(a_2) ::: The individual returns.",
        "DisposesFoes(a_2) ::: The individual disposes of his foes.",
        "LongHarrowingOccupation(a_0) ::: Aquilonia lives under a long and harrowing foreign occupation.",
        "HazardousQuest(a_2) ::: The individual goes through a long hazardous quest."
      ],
      "premises": [
        "Defeated(a_2) ∧ Captured(a_2) ∧ PlacedInDungeon(a_2) ∧ FindsAlly(a_2) ∧ Escapes(a_2) ::: The individual is defeated in battle, captured, placed in a monster-infested dungeon, finds an unexpected ally, and escapes.",
        "Riots(a_0) ∧ BelievesDead(a_0, a_2) ∧ AcceptsAlternativeKing(a_0) ::: The population of the Aquilonian capital riots, believing the individual is dead and ready to accept an alternative King.",
        "Returns(a_2) ∧ LongHarrowingOccupation(a_0) ∧ HazardousQuest(a_2) ∧ DisposesFoes(a_2) ::: The individual returns after Aquilonia has lived under a long and harrowing foreign occupation and goes through a long hazardous quest before he could finally dispose of his foes."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 228,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 1,
      "paragraph": "The book place when Conan is about forty-five, during his reign as King of Aquilonia, and follows a plot by a group of conspirators to depose him in favor of Valerius, heir to Conan's predecessor Numedides, whom he had slain to gain the throne. To accomplish this they resort to necromancy, resurrecting Xaltotun, an ancient sorcerer from the pre-Hyborian empire of Acheron. With his aid the Aquilonian army is defeated by that of the rival kingdom of Nemedia and occupied. Conan, captured, is slated for execution until the sympathetic slave girl Zenobia risks her life to free him.",
      "question_template": "[[CANDIDATE_ANSWER]] defeats the Aquilonian army.",
      "candidate_answers": [
        "Nemedia",
        "The rival kingdom of Nemedia"
      ],
      "predicates": [
        "King(x) ::: x is a king.",
        "Reign(x, y) ::: x reigns in the year y.",
        "Conspirators(x) ::: x is a group of conspirators.",
        "Depose(x, y) ::: x attempts to depose y.",
        "Heir(x, y) ::: x is the heir to y.",
        "Slain(x, y) ::: x has slain y.",
        "ResortToNecromancy(x) ::: x resorts to necromancy.",
        "Resurrect(x, y) ::: x resurrects y.",
        "AncientSorcerer(x) ::: x is an ancient sorcerer.",
        "DefeatedBy(x, y) ::: x is defeated by y.",
        "Captured(x) ::: x is captured.",
        "SlatedForExecution(x) ::: x is slated for execution.",
        "RisksLife(x, y) ::: x risks their life to save y."
      ],
      "premises": [
        "King(conan) ∧ Reign(conan, fortyFive) ::: Conan is a king during his reign at the age of forty-five.",
        "Conspirators(group) ∧ Depose(group, conan) ∧ Heir(valerius, numedides) ∧ Slain(conan, numedides) ::: A group of conspirators attempts to depose Conan in favor of Valerius, who is the heir to Numedides, whom Conan has slain.",
        "ResortToNecromancy(group) ∧ Resurrect(xaltotun, ancientSorcerer) ::: The conspirators resort to necromancy, resurrecting Xaltotun, an ancient sorcerer.",
        "DefeatedBy(aquilonianArmy, nemediaArmy) ::: The Aquilonian army is defeated by the army of the rival kingdom of Nemedia.",
        "Captured(conan) ∧ SlatedForExecution(conan) ::: Conan is captured and slated for execution.",
        "RisksLife(zenobia, conan) ::: Zenobia risks her life to free Conan."
      ],
      "conclusions": [
        "DefeatedBy(aquilonianArmy, nemediaArmy)",
        "DefeatedBy(aquilonianArmy, nemediaArmy)"
      ]
    }
  ],
  "229": [
    {
      "id": 229,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 1,
      "paragraph": "The book place when Conan is about forty-five, during his reign as King of Aquilonia, and follows a plot by a group of conspirators to depose him in favor of Valerius, heir to Conan's predecessor Numedides, whom he had slain to gain the throne. To accomplish this they resort to necromancy, resurrecting Xaltotun, an ancient sorcerer from the pre-Hyborian empire of Acheron. With his aid the Aquilonian army is defeated by that of the rival kingdom of Nemedia and occupied. Conan, captured, is slated for execution until the sympathetic slave girl Zenobia risks her life to free him.",
      "question_template": "The conspirators resurrect [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Xaltotun, an ancient sorcerer from the pre-Hyborian empire of Acheron"
      ],
      "predicates": [
        "King(x) ::: x is a king.",
        "Reign(x, y) ::: x reigns in the year y.",
        "Conspirators(x) ::: x is a group of conspirators.",
        "Depose(x, y) ::: x attempts to depose y.",
        "Heir(x, y) ::: x is the heir to y.",
        "Slain(x, y) ::: x has slain y.",
        "ResortToNecromancy(x) ::: x resorts to necromancy.",
        "Resurrect(x, y) ::: x resurrects y.",
        "AncientSorcerer(x) ::: x is an ancient sorcerer.",
        "DefeatedBy(x, y) ::: x is defeated by y.",
        "Captured(x) ::: x is captured.",
        "SlatedForExecution(x) ::: x is slated for execution.",
        "RisksLife(x, y) ::: x risks their life to save y."
      ],
      "premises": [
        "King(conan) ∧ Reign(conan, fortyFive) ::: Conan is a king during his reign at the age of forty-five.",
        "Conspirators(group) ∧ Depose(group, conan) ∧ Heir(valerius, numedides) ∧ Slain(conan, numedides) ::: A group of conspirators attempts to depose Conan in favor of Valerius, who is the heir to Numedides, whom Conan has slain.",
        "ResortToNecromancy(group) ∧ Resurrect(xaltotun, ancientSorcerer) ::: The conspirators resort to necromancy, resurrecting Xaltotun, an ancient sorcerer.",
        "DefeatedBy(aquilonianArmy, nemediaArmy) ::: The Aquilonian army is defeated by the army of the rival kingdom of Nemedia.",
        "Captured(conan) ∧ SlatedForExecution(conan) ::: Conan is captured and slated for execution.",
        "RisksLife(zenobia, conan) ::: Zenobia risks her life to free Conan."
      ],
      "conclusions": [
        "ResortToNecromancy(group) ∧ Resurrect(xaltotun, ancientSorcerer)"
      ]
    },
    {
      "id": 229,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 3,
      "paragraph": "After his eventual triumph he vows to make Zenobia his queen.",
      "question_template": "The conspirators resurrect [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Zenobia"
      ],
      "predicates": [
        "Triumph(x) ::: x achieves a significant victory.",
        "Vows(x, y) ::: x makes a solemn promise regarding y.",
        "Queen(y) ::: y is a queen.",
        "Elevate(x, y) ::: x raises y to a higher status."
      ],
      "premises": [
        "Triumph(a_2) ∧ Vows(a_2, a_1) ::: After his eventual triumph, the individual vows to make Zenobia his queen.",
        "Elevate(a_2, a_1) ::: The individual intends to elevate Zenobia to the status of queen."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "230": [
    {
      "id": 230,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 0,
      "paragraph": " The plot is a loosely based on a melange of motifs from previous Conan short stories, most notably \"The Scarlet Citadel\", with which its early chapters shares an almost identical storyline: Conan defeated in battle, captured and placed in a monster-infested dungeon, finds an unexpected ally and escapes; meanwhile, the population of the Aquilonian capital, believing him dead, riots and is ready to accept an alternative King. From here the two diverge: The Scarlet Citadel, a short story, ends with Conan coming back when the rioting just started and making short work of his foes; in the book-length Hour of the Dragon it is much more complicated, Aquilonia has to live under a long and harrowing foreign occupation while Conan goes through a long hazardous quest, before he could finally come back and dispose of his foes.",
      "question_template": "[[CANDIDATE_ANSWER]] defeats the Aquilonian army.",
      "candidate_answers": [
        "- Placed in a monster-infested dungeon",
        "- The population of the Aquilonian capital, believing him dead, riots and is ready to accept an alternative King"
      ],
      "predicates": [
        "Defeated(a_2) ::: The individual is defeated in battle.",
        "Captured(a_2) ::: The individual is captured.",
        "PlacedInDungeon(a_2) ::: The individual is placed in a monster-infested dungeon.",
        "FindsAlly(a_2) ::: The individual finds an unexpected ally.",
        "Escapes(a_2) ::: The individual escapes from the dungeon.",
        "Riots(a_0) ::: The population of the Aquilonian capital riots.",
        "BelievesDead(a_0, a_2) ::: The population believes the individual is dead.",
        "AcceptsAlternativeKing(a_0) ::: The population is ready to accept an alternative King.",
        "Returns(a_2) ::: The individual returns.",
        "DisposesFoes(a_2) ::: The individual disposes of his foes.",
        "LongHarrowingOccupation(a_0) ::: Aquilonia lives under a long and harrowing foreign occupation.",
        "HazardousQuest(a_2) ::: The individual goes through a long hazardous quest."
      ],
      "premises": [
        "Defeated(a_2) ∧ Captured(a_2) ∧ PlacedInDungeon(a_2) ∧ FindsAlly(a_2) ∧ Escapes(a_2) ::: The individual is defeated in battle, captured, placed in a monster-infested dungeon, finds an unexpected ally, and escapes.",
        "Riots(a_0) ∧ BelievesDead(a_0, a_2) ∧ AcceptsAlternativeKing(a_0) ::: The population of the Aquilonian capital riots, believing the individual is dead and ready to accept an alternative King.",
        "Returns(a_2) ∧ LongHarrowingOccupation(a_0) ∧ HazardousQuest(a_2) ∧ DisposesFoes(a_2) ::: The individual returns after Aquilonia has lived under a long and harrowing foreign occupation and goes through a long hazardous quest before he could finally dispose of his foes."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 230,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 1,
      "paragraph": "The book place when Conan is about forty-five, during his reign as King of Aquilonia, and follows a plot by a group of conspirators to depose him in favor of Valerius, heir to Conan's predecessor Numedides, whom he had slain to gain the throne. To accomplish this they resort to necromancy, resurrecting Xaltotun, an ancient sorcerer from the pre-Hyborian empire of Acheron. With his aid the Aquilonian army is defeated by that of the rival kingdom of Nemedia and occupied. Conan, captured, is slated for execution until the sympathetic slave girl Zenobia risks her life to free him.",
      "question_template": "[[CANDIDATE_ANSWER]] defeats the Aquilonian army.",
      "candidate_answers": [
        "Slated for execution"
      ],
      "predicates": [
        "King(x) ::: x is a king.",
        "Reign(x, y) ::: x reigns in the year y.",
        "Conspirators(x) ::: x is a group of conspirators.",
        "Depose(x, y) ::: x attempts to depose y.",
        "Heir(x, y) ::: x is the heir to y.",
        "Slain(x, y) ::: x has slain y.",
        "ResortToNecromancy(x) ::: x resorts to necromancy.",
        "Resurrect(x, y) ::: x resurrects y.",
        "AncientSorcerer(x) ::: x is an ancient sorcerer.",
        "DefeatedBy(x, y) ::: x is defeated by y.",
        "Captured(x) ::: x is captured.",
        "SlatedForExecution(x) ::: x is slated for execution.",
        "RisksLife(x, y) ::: x risks their life to save y."
      ],
      "premises": [
        "King(conan) ∧ Reign(conan, fortyFive) ::: Conan is a king during his reign at the age of forty-five.",
        "Conspirators(group) ∧ Depose(group, conan) ∧ Heir(valerius, numedides) ∧ Slain(conan, numedides) ::: A group of conspirators attempts to depose Conan in favor of Valerius, who is the heir to Numedides, whom Conan has slain.",
        "ResortToNecromancy(group) ∧ Resurrect(xaltotun, ancientSorcerer) ::: The conspirators resort to necromancy, resurrecting Xaltotun, an ancient sorcerer.",
        "DefeatedBy(aquilonianArmy, nemediaArmy) ::: The Aquilonian army is defeated by the army of the rival kingdom of Nemedia.",
        "Captured(conan) ∧ SlatedForExecution(conan) ::: Conan is captured and slated for execution.",
        "RisksLife(zenobia, conan) ::: Zenobia risks her life to free Conan."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 230,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 3,
      "paragraph": "After his eventual triumph he vows to make Zenobia his queen.",
      "question_template": "[[CANDIDATE_ANSWER]] defeats the Aquilonian army.",
      "candidate_answers": [
        "Zenobia was going to be made queen."
      ],
      "predicates": [
        "Triumph(x) ::: x achieves a significant victory.",
        "Vows(x, y) ::: x makes a solemn promise regarding y.",
        "Queen(y) ::: y is a queen.",
        "Elevate(x, y) ::: x raises y to a higher status."
      ],
      "premises": [
        "Triumph(a_2) ∧ Vows(a_2, a_1) ::: After his eventual triumph, the individual vows to make Zenobia his queen.",
        "Elevate(a_2, a_1) ::: The individual intends to elevate Zenobia to the status of queen."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "231": [
    {
      "id": 231,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 0,
      "paragraph": " The plot is a loosely based on a melange of motifs from previous Conan short stories, most notably \"The Scarlet Citadel\", with which its early chapters shares an almost identical storyline: Conan defeated in battle, captured and placed in a monster-infested dungeon, finds an unexpected ally and escapes; meanwhile, the population of the Aquilonian capital, believing him dead, riots and is ready to accept an alternative King. From here the two diverge: The Scarlet Citadel, a short story, ends with Conan coming back when the rioting just started and making short work of his foes; in the book-length Hour of the Dragon it is much more complicated, Aquilonia has to live under a long and harrowing foreign occupation while Conan goes through a long hazardous quest, before he could finally come back and dispose of his foes.",
      "question_template": "The conspirators resurrect [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Aquilonian capital",
        "Aquilonia",
        "Conan"
      ],
      "predicates": [
        "Defeated(a_2) ::: The individual is defeated in battle.",
        "Captured(a_2) ::: The individual is captured.",
        "PlacedInDungeon(a_2) ::: The individual is placed in a monster-infested dungeon.",
        "FindsAlly(a_2) ::: The individual finds an unexpected ally.",
        "Escapes(a_2) ::: The individual escapes from the dungeon.",
        "Riots(a_0) ::: The population of the Aquilonian capital riots.",
        "BelievesDead(a_0, a_2) ::: The population believes the individual is dead.",
        "AcceptsAlternativeKing(a_0) ::: The population is ready to accept an alternative King.",
        "Returns(a_2) ::: The individual returns.",
        "DisposesFoes(a_2) ::: The individual disposes of his foes.",
        "LongHarrowingOccupation(a_0) ::: Aquilonia lives under a long and harrowing foreign occupation.",
        "HazardousQuest(a_2) ::: The individual goes through a long hazardous quest."
      ],
      "premises": [
        "Defeated(a_2) ∧ Captured(a_2) ∧ PlacedInDungeon(a_2) ∧ FindsAlly(a_2) ∧ Escapes(a_2) ::: The individual is defeated in battle, captured, placed in a monster-infested dungeon, finds an unexpected ally, and escapes.",
        "Riots(a_0) ∧ BelievesDead(a_0, a_2) ∧ AcceptsAlternativeKing(a_0) ::: The population of the Aquilonian capital riots, believing the individual is dead and ready to accept an alternative King.",
        "Returns(a_2) ∧ LongHarrowingOccupation(a_0) ∧ HazardousQuest(a_2) ∧ DisposesFoes(a_2) ::: The individual returns after Aquilonia has lived under a long and harrowing foreign occupation and goes through a long hazardous quest before he could finally dispose of his foes."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 231,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 1,
      "paragraph": "The book place when Conan is about forty-five, during his reign as King of Aquilonia, and follows a plot by a group of conspirators to depose him in favor of Valerius, heir to Conan's predecessor Numedides, whom he had slain to gain the throne. To accomplish this they resort to necromancy, resurrecting Xaltotun, an ancient sorcerer from the pre-Hyborian empire of Acheron. With his aid the Aquilonian army is defeated by that of the rival kingdom of Nemedia and occupied. Conan, captured, is slated for execution until the sympathetic slave girl Zenobia risks her life to free him.",
      "question_template": "The conspirators resurrect [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "the pre-Hyborian empire of Acheron"
      ],
      "predicates": [
        "King(x) ::: x is a king.",
        "Reign(x, y) ::: x reigns in the year y.",
        "Conspirators(x) ::: x is a group of conspirators.",
        "Depose(x, y) ::: x attempts to depose y.",
        "Heir(x, y) ::: x is the heir to y.",
        "Slain(x, y) ::: x has slain y.",
        "ResortToNecromancy(x) ::: x resorts to necromancy.",
        "Resurrect(x, y) ::: x resurrects y.",
        "AncientSorcerer(x) ::: x is an ancient sorcerer.",
        "DefeatedBy(x, y) ::: x is defeated by y.",
        "Captured(x) ::: x is captured.",
        "SlatedForExecution(x) ::: x is slated for execution.",
        "RisksLife(x, y) ::: x risks their life to save y."
      ],
      "premises": [
        "King(conan) ∧ Reign(conan, fortyFive) ::: Conan is a king during his reign at the age of forty-five.",
        "Conspirators(group) ∧ Depose(group, conan) ∧ Heir(valerius, numedides) ∧ Slain(conan, numedides) ::: A group of conspirators attempts to depose Conan in favor of Valerius, who is the heir to Numedides, whom Conan has slain.",
        "ResortToNecromancy(group) ∧ Resurrect(xaltotun, ancientSorcerer) ::: The conspirators resort to necromancy, resurrecting Xaltotun, an ancient sorcerer.",
        "DefeatedBy(aquilonianArmy, nemediaArmy) ::: The Aquilonian army is defeated by the army of the rival kingdom of Nemedia.",
        "Captured(conan) ∧ SlatedForExecution(conan) ::: Conan is captured and slated for execution.",
        "RisksLife(zenobia, conan) ::: Zenobia risks her life to free Conan."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "232": [
    {
      "id": 232,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 1,
      "paragraph": "The book place when Conan is about forty-five, during his reign as King of Aquilonia, and follows a plot by a group of conspirators to depose him in favor of Valerius, heir to Conan's predecessor Numedides, whom he had slain to gain the throne. To accomplish this they resort to necromancy, resurrecting Xaltotun, an ancient sorcerer from the pre-Hyborian empire of Acheron. With his aid the Aquilonian army is defeated by that of the rival kingdom of Nemedia and occupied. Conan, captured, is slated for execution until the sympathetic slave girl Zenobia risks her life to free him.",
      "question_template": "[[CANDIDATE_ANSWER]] was going to be done to Conan after he was captured.",
      "candidate_answers": [
        "Zenobia"
      ],
      "predicates": [
        "King(x) ::: x is a king.",
        "Reign(x, y) ::: x reigns in the year y.",
        "Conspirators(x) ::: x is a group of conspirators.",
        "Depose(x, y) ::: x attempts to depose y.",
        "Heir(x, y) ::: x is the heir to y.",
        "Slain(x, y) ::: x has slain y.",
        "ResortToNecromancy(x) ::: x resorts to necromancy.",
        "Resurrect(x, y) ::: x resurrects y.",
        "AncientSorcerer(x) ::: x is an ancient sorcerer.",
        "DefeatedBy(x, y) ::: x is defeated by y.",
        "Captured(x) ::: x is captured.",
        "SlatedForExecution(x) ::: x is slated for execution.",
        "RisksLife(x, y) ::: x risks their life to save y."
      ],
      "premises": [
        "King(conan) ∧ Reign(conan, fortyFive) ::: Conan is a king during his reign at the age of forty-five.",
        "Conspirators(group) ∧ Depose(group, conan) ∧ Heir(valerius, numedides) ∧ Slain(conan, numedides) ::: A group of conspirators attempts to depose Conan in favor of Valerius, who is the heir to Numedides, whom Conan has slain.",
        "ResortToNecromancy(group) ∧ Resurrect(xaltotun, ancientSorcerer) ::: The conspirators resort to necromancy, resurrecting Xaltotun, an ancient sorcerer.",
        "DefeatedBy(aquilonianArmy, nemediaArmy) ::: The Aquilonian army is defeated by the army of the rival kingdom of Nemedia.",
        "Captured(conan) ∧ SlatedForExecution(conan) ::: Conan is captured and slated for execution.",
        "RisksLife(zenobia, conan) ::: Zenobia risks her life to free Conan."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "233": [
    {
      "id": 233,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 0,
      "paragraph": " The plot is a loosely based on a melange of motifs from previous Conan short stories, most notably \"The Scarlet Citadel\", with which its early chapters shares an almost identical storyline: Conan defeated in battle, captured and placed in a monster-infested dungeon, finds an unexpected ally and escapes; meanwhile, the population of the Aquilonian capital, believing him dead, riots and is ready to accept an alternative King. From here the two diverge: The Scarlet Citadel, a short story, ends with Conan coming back when the rioting just started and making short work of his foes; in the book-length Hour of the Dragon it is much more complicated, Aquilonia has to live under a long and harrowing foreign occupation while Conan goes through a long hazardous quest, before he could finally come back and dispose of his foes.",
      "question_template": "[[CANDIDATE_ANSWER]] is from Xaltotun.",
      "candidate_answers": [
        "- Captured and placed in a monster-infested dungeon"
      ],
      "predicates": [
        "Defeated(a_2) ::: The individual is defeated in battle.",
        "Captured(a_2) ::: The individual is captured.",
        "PlacedInDungeon(a_2) ::: The individual is placed in a monster-infested dungeon.",
        "FindsAlly(a_2) ::: The individual finds an unexpected ally.",
        "Escapes(a_2) ::: The individual escapes from the dungeon.",
        "Riots(a_0) ::: The population of the Aquilonian capital riots.",
        "BelievesDead(a_0, a_2) ::: The population believes the individual is dead.",
        "AcceptsAlternativeKing(a_0) ::: The population is ready to accept an alternative King.",
        "Returns(a_2) ::: The individual returns.",
        "DisposesFoes(a_2) ::: The individual disposes of his foes.",
        "LongHarrowingOccupation(a_0) ::: Aquilonia lives under a long and harrowing foreign occupation.",
        "HazardousQuest(a_2) ::: The individual goes through a long hazardous quest."
      ],
      "premises": [
        "Defeated(a_2) ∧ Captured(a_2) ∧ PlacedInDungeon(a_2) ∧ FindsAlly(a_2) ∧ Escapes(a_2) ::: The individual is defeated in battle, captured, placed in a monster-infested dungeon, finds an unexpected ally, and escapes.",
        "Riots(a_0) ∧ BelievesDead(a_0, a_2) ∧ AcceptsAlternativeKing(a_0) ::: The population of the Aquilonian capital riots, believing the individual is dead and ready to accept an alternative King.",
        "Returns(a_2) ∧ LongHarrowingOccupation(a_0) ∧ HazardousQuest(a_2) ∧ DisposesFoes(a_2) ::: The individual returns after Aquilonia has lived under a long and harrowing foreign occupation and goes through a long hazardous quest before he could finally dispose of his foes."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 233,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 1,
      "paragraph": "The book place when Conan is about forty-five, during his reign as King of Aquilonia, and follows a plot by a group of conspirators to depose him in favor of Valerius, heir to Conan's predecessor Numedides, whom he had slain to gain the throne. To accomplish this they resort to necromancy, resurrecting Xaltotun, an ancient sorcerer from the pre-Hyborian empire of Acheron. With his aid the Aquilonian army is defeated by that of the rival kingdom of Nemedia and occupied. Conan, captured, is slated for execution until the sympathetic slave girl Zenobia risks her life to free him.",
      "question_template": "[[CANDIDATE_ANSWER]] is from Xaltotun.",
      "candidate_answers": [
        "Conan, captured, is slated for execution"
      ],
      "predicates": [
        "King(x) ::: x is a king.",
        "Reign(x, y) ::: x reigns in the year y.",
        "Conspirators(x) ::: x is a group of conspirators.",
        "Depose(x, y) ::: x attempts to depose y.",
        "Heir(x, y) ::: x is the heir to y.",
        "Slain(x, y) ::: x has slain y.",
        "ResortToNecromancy(x) ::: x resorts to necromancy.",
        "Resurrect(x, y) ::: x resurrects y.",
        "AncientSorcerer(x) ::: x is an ancient sorcerer.",
        "DefeatedBy(x, y) ::: x is defeated by y.",
        "Captured(x) ::: x is captured.",
        "SlatedForExecution(x) ::: x is slated for execution.",
        "RisksLife(x, y) ::: x risks their life to save y."
      ],
      "premises": [
        "King(conan) ∧ Reign(conan, fortyFive) ::: Conan is a king during his reign at the age of forty-five.",
        "Conspirators(group) ∧ Depose(group, conan) ∧ Heir(valerius, numedides) ∧ Slain(conan, numedides) ::: A group of conspirators attempts to depose Conan in favor of Valerius, who is the heir to Numedides, whom Conan has slain.",
        "ResortToNecromancy(group) ∧ Resurrect(xaltotun, ancientSorcerer) ::: The conspirators resort to necromancy, resurrecting Xaltotun, an ancient sorcerer.",
        "DefeatedBy(aquilonianArmy, nemediaArmy) ::: The Aquilonian army is defeated by the army of the rival kingdom of Nemedia.",
        "Captured(conan) ∧ SlatedForExecution(conan) ::: Conan is captured and slated for execution.",
        "RisksLife(zenobia, conan) ::: Zenobia risks her life to free Conan."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "234": [
    {
      "id": 234,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 0,
      "paragraph": " The plot is a loosely based on a melange of motifs from previous Conan short stories, most notably \"The Scarlet Citadel\", with which its early chapters shares an almost identical storyline: Conan defeated in battle, captured and placed in a monster-infested dungeon, finds an unexpected ally and escapes; meanwhile, the population of the Aquilonian capital, believing him dead, riots and is ready to accept an alternative King. From here the two diverge: The Scarlet Citadel, a short story, ends with Conan coming back when the rioting just started and making short work of his foes; in the book-length Hour of the Dragon it is much more complicated, Aquilonia has to live under a long and harrowing foreign occupation while Conan goes through a long hazardous quest, before he could finally come back and dispose of his foes.",
      "question_template": "[[CANDIDATE_ANSWER]] risks their life to save Conan.",
      "candidate_answers": [
        "The population of the Aquilonian capital, believing him dead, riots and is ready to accept an alternative King",
        "Conan"
      ],
      "predicates": [
        "Defeated(a_2) ::: The individual is defeated in battle.",
        "Captured(a_2) ::: The individual is captured.",
        "PlacedInDungeon(a_2) ::: The individual is placed in a monster-infested dungeon.",
        "FindsAlly(a_2) ::: The individual finds an unexpected ally.",
        "Escapes(a_2) ::: The individual escapes from the dungeon.",
        "Riots(a_0) ::: The population of the Aquilonian capital riots.",
        "BelievesDead(a_0, a_2) ::: The population believes the individual is dead.",
        "AcceptsAlternativeKing(a_0) ::: The population is ready to accept an alternative King.",
        "Returns(a_2) ::: The individual returns.",
        "DisposesFoes(a_2) ::: The individual disposes of his foes.",
        "LongHarrowingOccupation(a_0) ::: Aquilonia lives under a long and harrowing foreign occupation.",
        "HazardousQuest(a_2) ::: The individual goes through a long hazardous quest."
      ],
      "premises": [
        "Defeated(a_2) ∧ Captured(a_2) ∧ PlacedInDungeon(a_2) ∧ FindsAlly(a_2) ∧ Escapes(a_2) ::: The individual is defeated in battle, captured, placed in a monster-infested dungeon, finds an unexpected ally, and escapes.",
        "Riots(a_0) ∧ BelievesDead(a_0, a_2) ∧ AcceptsAlternativeKing(a_0) ::: The population of the Aquilonian capital riots, believing the individual is dead and ready to accept an alternative King.",
        "Returns(a_2) ∧ LongHarrowingOccupation(a_0) ∧ HazardousQuest(a_2) ∧ DisposesFoes(a_2) ::: The individual returns after Aquilonia has lived under a long and harrowing foreign occupation and goes through a long hazardous quest before he could finally dispose of his foes."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 234,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 1,
      "paragraph": "The book place when Conan is about forty-five, during his reign as King of Aquilonia, and follows a plot by a group of conspirators to depose him in favor of Valerius, heir to Conan's predecessor Numedides, whom he had slain to gain the throne. To accomplish this they resort to necromancy, resurrecting Xaltotun, an ancient sorcerer from the pre-Hyborian empire of Acheron. With his aid the Aquilonian army is defeated by that of the rival kingdom of Nemedia and occupied. Conan, captured, is slated for execution until the sympathetic slave girl Zenobia risks her life to free him.",
      "question_template": "[[CANDIDATE_ANSWER]] risks their life to save Conan.",
      "candidate_answers": [
        "Conan",
        "Valerius",
        "Numedides"
      ],
      "predicates": [
        "King(x) ::: x is a king.",
        "Reign(x, y) ::: x reigns in the year y.",
        "Conspirators(x) ::: x is a group of conspirators.",
        "Depose(x, y) ::: x attempts to depose y.",
        "Heir(x, y) ::: x is the heir to y.",
        "Slain(x, y) ::: x has slain y.",
        "ResortToNecromancy(x) ::: x resorts to necromancy.",
        "Resurrect(x, y) ::: x resurrects y.",
        "AncientSorcerer(x) ::: x is an ancient sorcerer.",
        "DefeatedBy(x, y) ::: x is defeated by y.",
        "Captured(x) ::: x is captured.",
        "SlatedForExecution(x) ::: x is slated for execution.",
        "RisksLife(x, y) ::: x risks their life to save y."
      ],
      "premises": [
        "King(conan) ∧ Reign(conan, fortyFive) ::: Conan is a king during his reign at the age of forty-five.",
        "Conspirators(group) ∧ Depose(group, conan) ∧ Heir(valerius, numedides) ∧ Slain(conan, numedides) ::: A group of conspirators attempts to depose Conan in favor of Valerius, who is the heir to Numedides, whom Conan has slain.",
        "ResortToNecromancy(group) ∧ Resurrect(xaltotun, ancientSorcerer) ::: The conspirators resort to necromancy, resurrecting Xaltotun, an ancient sorcerer.",
        "DefeatedBy(aquilonianArmy, nemediaArmy) ::: The Aquilonian army is defeated by the army of the rival kingdom of Nemedia.",
        "Captured(conan) ∧ SlatedForExecution(conan) ::: Conan is captured and slated for execution.",
        "RisksLife(zenobia, conan) ::: Zenobia risks her life to free Conan."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "235": [
    {
      "id": 235,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 0,
      "paragraph": " The plot is a loosely based on a melange of motifs from previous Conan short stories, most notably \"The Scarlet Citadel\", with which its early chapters shares an almost identical storyline: Conan defeated in battle, captured and placed in a monster-infested dungeon, finds an unexpected ally and escapes; meanwhile, the population of the Aquilonian capital, believing him dead, riots and is ready to accept an alternative King. From here the two diverge: The Scarlet Citadel, a short story, ends with Conan coming back when the rioting just started and making short work of his foes; in the book-length Hour of the Dragon it is much more complicated, Aquilonia has to live under a long and harrowing foreign occupation while Conan goes through a long hazardous quest, before he could finally come back and dispose of his foes.",
      "question_template": "Conan is placed in [[CANDIDATE_ANSWER]] after he loses in the battle.",
      "candidate_answers": [
        "The population of the Aquilonian capital, believing him dead, riots and is ready to accept an alternative King."
      ],
      "predicates": [
        "Defeated(a_2) ::: The individual is defeated in battle.",
        "Captured(a_2) ::: The individual is captured.",
        "PlacedInDungeon(a_2) ::: The individual is placed in a monster-infested dungeon.",
        "FindsAlly(a_2) ::: The individual finds an unexpected ally.",
        "Escapes(a_2) ::: The individual escapes from the dungeon.",
        "Riots(a_0) ::: The population of the Aquilonian capital riots.",
        "BelievesDead(a_0, a_2) ::: The population believes the individual is dead.",
        "AcceptsAlternativeKing(a_0) ::: The population is ready to accept an alternative King.",
        "Returns(a_2) ::: The individual returns.",
        "DisposesFoes(a_2) ::: The individual disposes of his foes.",
        "LongHarrowingOccupation(a_0) ::: Aquilonia lives under a long and harrowing foreign occupation.",
        "HazardousQuest(a_2) ::: The individual goes through a long hazardous quest."
      ],
      "premises": [
        "Defeated(a_2) ∧ Captured(a_2) ∧ PlacedInDungeon(a_2) ∧ FindsAlly(a_2) ∧ Escapes(a_2) ::: The individual is defeated in battle, captured, placed in a monster-infested dungeon, finds an unexpected ally, and escapes.",
        "Riots(a_0) ∧ BelievesDead(a_0, a_2) ∧ AcceptsAlternativeKing(a_0) ::: The population of the Aquilonian capital riots, believing the individual is dead and ready to accept an alternative King.",
        "Returns(a_2) ∧ LongHarrowingOccupation(a_0) ∧ HazardousQuest(a_2) ∧ DisposesFoes(a_2) ::: The individual returns after Aquilonia has lived under a long and harrowing foreign occupation and goes through a long hazardous quest before he could finally dispose of his foes."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 235,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 1,
      "paragraph": "The book place when Conan is about forty-five, during his reign as King of Aquilonia, and follows a plot by a group of conspirators to depose him in favor of Valerius, heir to Conan's predecessor Numedides, whom he had slain to gain the throne. To accomplish this they resort to necromancy, resurrecting Xaltotun, an ancient sorcerer from the pre-Hyborian empire of Acheron. With his aid the Aquilonian army is defeated by that of the rival kingdom of Nemedia and occupied. Conan, captured, is slated for execution until the sympathetic slave girl Zenobia risks her life to free him.",
      "question_template": "Conan is placed in [[CANDIDATE_ANSWER]] after he loses in the battle.",
      "candidate_answers": [
        "Valerius, heir to Conan's predecessor Numedides"
      ],
      "predicates": [
        "King(x) ::: x is a king.",
        "Reign(x, y) ::: x reigns in the year y.",
        "Conspirators(x) ::: x is a group of conspirators.",
        "Depose(x, y) ::: x attempts to depose y.",
        "Heir(x, y) ::: x is the heir to y.",
        "Slain(x, y) ::: x has slain y.",
        "ResortToNecromancy(x) ::: x resorts to necromancy.",
        "Resurrect(x, y) ::: x resurrects y.",
        "AncientSorcerer(x) ::: x is an ancient sorcerer.",
        "DefeatedBy(x, y) ::: x is defeated by y.",
        "Captured(x) ::: x is captured.",
        "SlatedForExecution(x) ::: x is slated for execution.",
        "RisksLife(x, y) ::: x risks their life to save y."
      ],
      "premises": [
        "King(conan) ∧ Reign(conan, fortyFive) ::: Conan is a king during his reign at the age of forty-five.",
        "Conspirators(group) ∧ Depose(group, conan) ∧ Heir(valerius, numedides) ∧ Slain(conan, numedides) ::: A group of conspirators attempts to depose Conan in favor of Valerius, who is the heir to Numedides, whom Conan has slain.",
        "ResortToNecromancy(group) ∧ Resurrect(xaltotun, ancientSorcerer) ::: The conspirators resort to necromancy, resurrecting Xaltotun, an ancient sorcerer.",
        "DefeatedBy(aquilonianArmy, nemediaArmy) ::: The Aquilonian army is defeated by the army of the rival kingdom of Nemedia.",
        "Captured(conan) ∧ SlatedForExecution(conan) ::: Conan is captured and slated for execution.",
        "RisksLife(zenobia, conan) ::: Zenobia risks her life to free Conan."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 235,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 3,
      "paragraph": "After his eventual triumph he vows to make Zenobia his queen.",
      "question_template": "Conan is placed in [[CANDIDATE_ANSWER]] after he loses in the battle.",
      "candidate_answers": [
        "Zenobia"
      ],
      "predicates": [
        "Triumph(x) ::: x achieves a significant victory.",
        "Vows(x, y) ::: x makes a solemn promise regarding y.",
        "Queen(y) ::: y is a queen.",
        "Elevate(x, y) ::: x raises y to a higher status."
      ],
      "premises": [
        "Triumph(a_2) ∧ Vows(a_2, a_1) ::: After his eventual triumph, the individual vows to make Zenobia his queen.",
        "Elevate(a_2, a_1) ::: The individual intends to elevate Zenobia to the status of queen."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "236": [
    {
      "id": 236,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 0,
      "paragraph": " The plot is a loosely based on a melange of motifs from previous Conan short stories, most notably \"The Scarlet Citadel\", with which its early chapters shares an almost identical storyline: Conan defeated in battle, captured and placed in a monster-infested dungeon, finds an unexpected ally and escapes; meanwhile, the population of the Aquilonian capital, believing him dead, riots and is ready to accept an alternative King. From here the two diverge: The Scarlet Citadel, a short story, ends with Conan coming back when the rioting just started and making short work of his foes; in the book-length Hour of the Dragon it is much more complicated, Aquilonia has to live under a long and harrowing foreign occupation while Conan goes through a long hazardous quest, before he could finally come back and dispose of his foes.",
      "question_template": "[[CANDIDATE_ANSWER]] becomes King of Aquilonia.",
      "candidate_answers": [
        "The population of the Aquilonian capital, believing him dead, riots and is ready to accept an alternative King."
      ],
      "predicates": [
        "Defeated(a_2) ::: The individual is defeated in battle.",
        "Captured(a_2) ::: The individual is captured.",
        "PlacedInDungeon(a_2) ::: The individual is placed in a monster-infested dungeon.",
        "FindsAlly(a_2) ::: The individual finds an unexpected ally.",
        "Escapes(a_2) ::: The individual escapes from the dungeon.",
        "Riots(a_0) ::: The population of the Aquilonian capital riots.",
        "BelievesDead(a_0, a_2) ::: The population believes the individual is dead.",
        "AcceptsAlternativeKing(a_0) ::: The population is ready to accept an alternative King.",
        "Returns(a_2) ::: The individual returns.",
        "DisposesFoes(a_2) ::: The individual disposes of his foes.",
        "LongHarrowingOccupation(a_0) ::: Aquilonia lives under a long and harrowing foreign occupation.",
        "HazardousQuest(a_2) ::: The individual goes through a long hazardous quest."
      ],
      "premises": [
        "Defeated(a_2) ∧ Captured(a_2) ∧ PlacedInDungeon(a_2) ∧ FindsAlly(a_2) ∧ Escapes(a_2) ::: The individual is defeated in battle, captured, placed in a monster-infested dungeon, finds an unexpected ally, and escapes.",
        "Riots(a_0) ∧ BelievesDead(a_0, a_2) ∧ AcceptsAlternativeKing(a_0) ::: The population of the Aquilonian capital riots, believing the individual is dead and ready to accept an alternative King.",
        "Returns(a_2) ∧ LongHarrowingOccupation(a_0) ∧ HazardousQuest(a_2) ∧ DisposesFoes(a_2) ::: The individual returns after Aquilonia has lived under a long and harrowing foreign occupation and goes through a long hazardous quest before he could finally dispose of his foes."
      ],
      "conclusions": [
        "Riots(a_0) ∧ BelievesDead(a_0, a_2) ∧ AcceptsAlternativeKing(a_0)"
      ]
    },
    {
      "id": 236,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 3,
      "paragraph": "After his eventual triumph he vows to make Zenobia his queen.",
      "question_template": "[[CANDIDATE_ANSWER]] becomes King of Aquilonia.",
      "candidate_answers": [
        "Zenobia"
      ],
      "predicates": [
        "Triumph(x) ::: x achieves a significant victory.",
        "Vows(x, y) ::: x makes a solemn promise regarding y.",
        "Queen(y) ::: y is a queen.",
        "Elevate(x, y) ::: x raises y to a higher status."
      ],
      "premises": [
        "Triumph(a_2) ∧ Vows(a_2, a_1) ::: After his eventual triumph, the individual vows to make Zenobia his queen.",
        "Elevate(a_2, a_1) ::: The individual intends to elevate Zenobia to the status of queen."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "237": [
    {
      "id": 237,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 1,
      "paragraph": "The book place when Conan is about forty-five, during his reign as King of Aquilonia, and follows a plot by a group of conspirators to depose him in favor of Valerius, heir to Conan's predecessor Numedides, whom he had slain to gain the throne. To accomplish this they resort to necromancy, resurrecting Xaltotun, an ancient sorcerer from the pre-Hyborian empire of Acheron. With his aid the Aquilonian army is defeated by that of the rival kingdom of Nemedia and occupied. Conan, captured, is slated for execution until the sympathetic slave girl Zenobia risks her life to free him.",
      "question_template": "The group of conspirators wants to replace Conan with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Conan",
        "A group of conspirators",
        "Valerius, heir to Conan's predecessor Numedides"
      ],
      "predicates": [
        "King(x) ::: x is a king.",
        "Reign(x, y) ::: x reigns in the year y.",
        "Conspirators(x) ::: x is a group of conspirators.",
        "Depose(x, y) ::: x attempts to depose y.",
        "Heir(x, y) ::: x is the heir to y.",
        "Slain(x, y) ::: x has slain y.",
        "ResortToNecromancy(x) ::: x resorts to necromancy.",
        "Resurrect(x, y) ::: x resurrects y.",
        "AncientSorcerer(x) ::: x is an ancient sorcerer.",
        "DefeatedBy(x, y) ::: x is defeated by y.",
        "Captured(x) ::: x is captured.",
        "SlatedForExecution(x) ::: x is slated for execution.",
        "RisksLife(x, y) ::: x risks their life to save y."
      ],
      "premises": [
        "King(conan) ∧ Reign(conan, fortyFive) ::: Conan is a king during his reign at the age of forty-five.",
        "Conspirators(group) ∧ Depose(group, conan) ∧ Heir(valerius, numedides) ∧ Slain(conan, numedides) ::: A group of conspirators attempts to depose Conan in favor of Valerius, who is the heir to Numedides, whom Conan has slain.",
        "ResortToNecromancy(group) ∧ Resurrect(xaltotun, ancientSorcerer) ::: The conspirators resort to necromancy, resurrecting Xaltotun, an ancient sorcerer.",
        "DefeatedBy(aquilonianArmy, nemediaArmy) ::: The Aquilonian army is defeated by the army of the rival kingdom of Nemedia.",
        "Captured(conan) ∧ SlatedForExecution(conan) ::: Conan is captured and slated for execution.",
        "RisksLife(zenobia, conan) ::: Zenobia risks her life to free Conan."
      ],
      "conclusions": [
        "None",
        "None",
        "Conspirators(group) ∧ Depose(group, conan) ∧ Heir(valerius, numedides) ::: The group of conspirators wants to replace Conan with Valerius, heir to Conan's predecessor Numedides."
      ]
    }
  ],
  "238": [
    {
      "id": 238,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 1,
      "paragraph": "The book place when Conan is about forty-five, during his reign as King of Aquilonia, and follows a plot by a group of conspirators to depose him in favor of Valerius, heir to Conan's predecessor Numedides, whom he had slain to gain the throne. To accomplish this they resort to necromancy, resurrecting Xaltotun, an ancient sorcerer from the pre-Hyborian empire of Acheron. With his aid the Aquilonian army is defeated by that of the rival kingdom of Nemedia and occupied. Conan, captured, is slated for execution until the sympathetic slave girl Zenobia risks her life to free him.",
      "question_template": "Valerius was supposed to be the next ruler after [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Xaltotun, an ancient sorcerer from the pre-Hyborian empire of Acheron"
      ],
      "predicates": [
        "King(x) ::: x is a king.",
        "Reign(x, y) ::: x reigns in the year y.",
        "Conspirators(x) ::: x is a group of conspirators.",
        "Depose(x, y) ::: x attempts to depose y.",
        "Heir(x, y) ::: x is the heir to y.",
        "Slain(x, y) ::: x has slain y.",
        "ResortToNecromancy(x) ::: x resorts to necromancy.",
        "Resurrect(x, y) ::: x resurrects y.",
        "AncientSorcerer(x) ::: x is an ancient sorcerer.",
        "DefeatedBy(x, y) ::: x is defeated by y.",
        "Captured(x) ::: x is captured.",
        "SlatedForExecution(x) ::: x is slated for execution.",
        "RisksLife(x, y) ::: x risks their life to save y."
      ],
      "premises": [
        "King(conan) ∧ Reign(conan, fortyFive) ::: Conan is a king during his reign at the age of forty-five.",
        "Conspirators(group) ∧ Depose(group, conan) ∧ Heir(valerius, numedides) ∧ Slain(conan, numedides) ::: A group of conspirators attempts to depose Conan in favor of Valerius, who is the heir to Numedides, whom Conan has slain.",
        "ResortToNecromancy(group) ∧ Resurrect(xaltotun, ancientSorcerer) ::: The conspirators resort to necromancy, resurrecting Xaltotun, an ancient sorcerer.",
        "DefeatedBy(aquilonianArmy, nemediaArmy) ::: The Aquilonian army is defeated by the army of the rival kingdom of Nemedia.",
        "Captured(conan) ∧ SlatedForExecution(conan) ::: Conan is captured and slated for execution.",
        "RisksLife(zenobia, conan) ::: Zenobia risks her life to free Conan."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "239": [
    {
      "id": 239,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 0,
      "paragraph": " The plot is a loosely based on a melange of motifs from previous Conan short stories, most notably \"The Scarlet Citadel\", with which its early chapters shares an almost identical storyline: Conan defeated in battle, captured and placed in a monster-infested dungeon, finds an unexpected ally and escapes; meanwhile, the population of the Aquilonian capital, believing him dead, riots and is ready to accept an alternative King. From here the two diverge: The Scarlet Citadel, a short story, ends with Conan coming back when the rioting just started and making short work of his foes; in the book-length Hour of the Dragon it is much more complicated, Aquilonia has to live under a long and harrowing foreign occupation while Conan goes through a long hazardous quest, before he could finally come back and dispose of his foes.",
      "question_template": "[[CANDIDATE_ANSWER]] killed Numedides.",
      "candidate_answers": [
        "Conan",
        "Conan coming back when the rioting just started",
        "Conan goes through a long hazardous quest, before he could finally come back and dispose of his foes"
      ],
      "predicates": [
        "Defeated(a_2) ::: The individual is defeated in battle.",
        "Captured(a_2) ::: The individual is captured.",
        "PlacedInDungeon(a_2) ::: The individual is placed in a monster-infested dungeon.",
        "FindsAlly(a_2) ::: The individual finds an unexpected ally.",
        "Escapes(a_2) ::: The individual escapes from the dungeon.",
        "Riots(a_0) ::: The population of the Aquilonian capital riots.",
        "BelievesDead(a_0, a_2) ::: The population believes the individual is dead.",
        "AcceptsAlternativeKing(a_0) ::: The population is ready to accept an alternative King.",
        "Returns(a_2) ::: The individual returns.",
        "DisposesFoes(a_2) ::: The individual disposes of his foes.",
        "LongHarrowingOccupation(a_0) ::: Aquilonia lives under a long and harrowing foreign occupation.",
        "HazardousQuest(a_2) ::: The individual goes through a long hazardous quest."
      ],
      "premises": [
        "Defeated(a_2) ∧ Captured(a_2) ∧ PlacedInDungeon(a_2) ∧ FindsAlly(a_2) ∧ Escapes(a_2) ::: The individual is defeated in battle, captured, placed in a monster-infested dungeon, finds an unexpected ally, and escapes.",
        "Riots(a_0) ∧ BelievesDead(a_0, a_2) ∧ AcceptsAlternativeKing(a_0) ::: The population of the Aquilonian capital riots, believing the individual is dead and ready to accept an alternative King.",
        "Returns(a_2) ∧ LongHarrowingOccupation(a_0) ∧ HazardousQuest(a_2) ∧ DisposesFoes(a_2) ::: The individual returns after Aquilonia has lived under a long and harrowing foreign occupation and goes through a long hazardous quest before he could finally dispose of his foes."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 239,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 1,
      "paragraph": "The book place when Conan is about forty-five, during his reign as King of Aquilonia, and follows a plot by a group of conspirators to depose him in favor of Valerius, heir to Conan's predecessor Numedides, whom he had slain to gain the throne. To accomplish this they resort to necromancy, resurrecting Xaltotun, an ancient sorcerer from the pre-Hyborian empire of Acheron. With his aid the Aquilonian army is defeated by that of the rival kingdom of Nemedia and occupied. Conan, captured, is slated for execution until the sympathetic slave girl Zenobia risks her life to free him.",
      "question_template": "[[CANDIDATE_ANSWER]] killed Numedides.",
      "candidate_answers": [
        "Nemedia",
        "The rival kingdom of Nemedia"
      ],
      "predicates": [
        "King(x) ::: x is a king.",
        "Reign(x, y) ::: x reigns in the year y.",
        "Conspirators(x) ::: x is a group of conspirators.",
        "Depose(x, y) ::: x attempts to depose y.",
        "Heir(x, y) ::: x is the heir to y.",
        "Slain(x, y) ::: x has slain y.",
        "ResortToNecromancy(x) ::: x resorts to necromancy.",
        "Resurrect(x, y) ::: x resurrects y.",
        "AncientSorcerer(x) ::: x is an ancient sorcerer.",
        "DefeatedBy(x, y) ::: x is defeated by y.",
        "Captured(x) ::: x is captured.",
        "SlatedForExecution(x) ::: x is slated for execution.",
        "RisksLife(x, y) ::: x risks their life to save y."
      ],
      "premises": [
        "King(conan) ∧ Reign(conan, fortyFive) ::: Conan is a king during his reign at the age of forty-five.",
        "Conspirators(group) ∧ Depose(group, conan) ∧ Heir(valerius, numedides) ∧ Slain(conan, numedides) ::: A group of conspirators attempts to depose Conan in favor of Valerius, who is the heir to Numedides, whom Conan has slain.",
        "ResortToNecromancy(group) ∧ Resurrect(xaltotun, ancientSorcerer) ::: The conspirators resort to necromancy, resurrecting Xaltotun, an ancient sorcerer.",
        "DefeatedBy(aquilonianArmy, nemediaArmy) ::: The Aquilonian army is defeated by the army of the rival kingdom of Nemedia.",
        "Captured(conan) ∧ SlatedForExecution(conan) ::: Conan is captured and slated for execution.",
        "RisksLife(zenobia, conan) ::: Zenobia risks her life to free Conan."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 239,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 3,
      "paragraph": "After his eventual triumph he vows to make Zenobia his queen.",
      "question_template": "[[CANDIDATE_ANSWER]] killed Numedides.",
      "candidate_answers": [
        "After his eventual triumph"
      ],
      "predicates": [
        "Triumph(x) ::: x achieves a significant victory.",
        "Vows(x, y) ::: x makes a solemn promise regarding y.",
        "Queen(y) ::: y is a queen.",
        "Elevate(x, y) ::: x raises y to a higher status."
      ],
      "premises": [
        "Triumph(a_2) ∧ Vows(a_2, a_1) ::: After his eventual triumph, the individual vows to make Zenobia his queen.",
        "Elevate(a_2, a_1) ::: The individual intends to elevate Zenobia to the status of queen."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "240": [
    {
      "id": 240,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 1,
      "paragraph": "The book place when Conan is about forty-five, during his reign as King of Aquilonia, and follows a plot by a group of conspirators to depose him in favor of Valerius, heir to Conan's predecessor Numedides, whom he had slain to gain the throne. To accomplish this they resort to necromancy, resurrecting Xaltotun, an ancient sorcerer from the pre-Hyborian empire of Acheron. With his aid the Aquilonian army is defeated by that of the rival kingdom of Nemedia and occupied. Conan, captured, is slated for execution until the sympathetic slave girl Zenobia risks her life to free him.",
      "question_template": "[[CANDIDATE_ANSWER]] gets resurrected to fight Conan.",
      "candidate_answers": [
        "The sympathetic slave girl Zenobia risks her life to free him."
      ],
      "predicates": [
        "King(x) ::: x is a king.",
        "Reign(x, y) ::: x reigns in the year y.",
        "Conspirators(x) ::: x is a group of conspirators.",
        "Depose(x, y) ::: x attempts to depose y.",
        "Heir(x, y) ::: x is the heir to y.",
        "Slain(x, y) ::: x has slain y.",
        "ResortToNecromancy(x) ::: x resorts to necromancy.",
        "Resurrect(x, y) ::: x resurrects y.",
        "AncientSorcerer(x) ::: x is an ancient sorcerer.",
        "DefeatedBy(x, y) ::: x is defeated by y.",
        "Captured(x) ::: x is captured.",
        "SlatedForExecution(x) ::: x is slated for execution.",
        "RisksLife(x, y) ::: x risks their life to save y."
      ],
      "premises": [
        "King(conan) ∧ Reign(conan, fortyFive) ::: Conan is a king during his reign at the age of forty-five.",
        "Conspirators(group) ∧ Depose(group, conan) ∧ Heir(valerius, numedides) ∧ Slain(conan, numedides) ::: A group of conspirators attempts to depose Conan in favor of Valerius, who is the heir to Numedides, whom Conan has slain.",
        "ResortToNecromancy(group) ∧ Resurrect(xaltotun, ancientSorcerer) ::: The conspirators resort to necromancy, resurrecting Xaltotun, an ancient sorcerer.",
        "DefeatedBy(aquilonianArmy, nemediaArmy) ::: The Aquilonian army is defeated by the army of the rival kingdom of Nemedia.",
        "Captured(conan) ∧ SlatedForExecution(conan) ::: Conan is captured and slated for execution.",
        "RisksLife(zenobia, conan) ::: Zenobia risks her life to free Conan."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 240,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 3,
      "paragraph": "After his eventual triumph he vows to make Zenobia his queen.",
      "question_template": "[[CANDIDATE_ANSWER]] gets resurrected to fight Conan.",
      "candidate_answers": [
        "Make Zenobia his queen"
      ],
      "predicates": [
        "Triumph(x) ::: x achieves a significant victory.",
        "Vows(x, y) ::: x makes a solemn promise regarding y.",
        "Queen(y) ::: y is a queen.",
        "Elevate(x, y) ::: x raises y to a higher status."
      ],
      "premises": [
        "Triumph(a_2) ∧ Vows(a_2, a_1) ::: After his eventual triumph, the individual vows to make Zenobia his queen.",
        "Elevate(a_2, a_1) ::: The individual intends to elevate Zenobia to the status of queen."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "241": [
    {
      "id": 241,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 0,
      "paragraph": " The plot is a loosely based on a melange of motifs from previous Conan short stories, most notably \"The Scarlet Citadel\", with which its early chapters shares an almost identical storyline: Conan defeated in battle, captured and placed in a monster-infested dungeon, finds an unexpected ally and escapes; meanwhile, the population of the Aquilonian capital, believing him dead, riots and is ready to accept an alternative King. From here the two diverge: The Scarlet Citadel, a short story, ends with Conan coming back when the rioting just started and making short work of his foes; in the book-length Hour of the Dragon it is much more complicated, Aquilonia has to live under a long and harrowing foreign occupation while Conan goes through a long hazardous quest, before he could finally come back and dispose of his foes.",
      "question_template": "[[CANDIDATE_ANSWER]] defeats the Aquilonian army.",
      "candidate_answers": [
        "- A monster-infested dungeon",
        "- An unexpected ally",
        "- A long hazardous quest",
        "- His foes"
      ],
      "predicates": [
        "Defeated(a_2) ::: The individual is defeated in battle.",
        "Captured(a_2) ::: The individual is captured.",
        "PlacedInDungeon(a_2) ::: The individual is placed in a monster-infested dungeon.",
        "FindsAlly(a_2) ::: The individual finds an unexpected ally.",
        "Escapes(a_2) ::: The individual escapes from the dungeon.",
        "Riots(a_0) ::: The population of the Aquilonian capital riots.",
        "BelievesDead(a_0, a_2) ::: The population believes the individual is dead.",
        "AcceptsAlternativeKing(a_0) ::: The population is ready to accept an alternative King.",
        "Returns(a_2) ::: The individual returns.",
        "DisposesFoes(a_2) ::: The individual disposes of his foes.",
        "LongHarrowingOccupation(a_0) ::: Aquilonia lives under a long and harrowing foreign occupation.",
        "HazardousQuest(a_2) ::: The individual goes through a long hazardous quest."
      ],
      "premises": [
        "Defeated(a_2) ∧ Captured(a_2) ∧ PlacedInDungeon(a_2) ∧ FindsAlly(a_2) ∧ Escapes(a_2) ::: The individual is defeated in battle, captured, placed in a monster-infested dungeon, finds an unexpected ally, and escapes.",
        "Riots(a_0) ∧ BelievesDead(a_0, a_2) ∧ AcceptsAlternativeKing(a_0) ::: The population of the Aquilonian capital riots, believing the individual is dead and ready to accept an alternative King.",
        "Returns(a_2) ∧ LongHarrowingOccupation(a_0) ∧ HazardousQuest(a_2) ∧ DisposesFoes(a_2) ::: The individual returns after Aquilonia has lived under a long and harrowing foreign occupation and goes through a long hazardous quest before he could finally dispose of his foes."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 241,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 3,
      "paragraph": "After his eventual triumph he vows to make Zenobia his queen.",
      "question_template": "[[CANDIDATE_ANSWER]] defeats the Aquilonian army.",
      "candidate_answers": [
        "Zenobia"
      ],
      "predicates": [
        "Triumph(x) ::: x achieves a significant victory.",
        "Vows(x, y) ::: x makes a solemn promise regarding y.",
        "Queen(y) ::: y is a queen.",
        "Elevate(x, y) ::: x raises y to a higher status."
      ],
      "premises": [
        "Triumph(a_2) ∧ Vows(a_2, a_1) ::: After his eventual triumph, the individual vows to make Zenobia his queen.",
        "Elevate(a_2, a_1) ::: The individual intends to elevate Zenobia to the status of queen."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "242": [
    {
      "id": 242,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 1,
      "paragraph": "The book place when Conan is about forty-five, during his reign as King of Aquilonia, and follows a plot by a group of conspirators to depose him in favor of Valerius, heir to Conan's predecessor Numedides, whom he had slain to gain the throne. To accomplish this they resort to necromancy, resurrecting Xaltotun, an ancient sorcerer from the pre-Hyborian empire of Acheron. With his aid the Aquilonian army is defeated by that of the rival kingdom of Nemedia and occupied. Conan, captured, is slated for execution until the sympathetic slave girl Zenobia risks her life to free him.",
      "question_template": "Conan intends to [[CANDIDATE_ANSWER]] with Zenobia.",
      "candidate_answers": [
        "Conan, captured, is slated for execution"
      ],
      "predicates": [
        "King(x) ::: x is a king.",
        "Reign(x, y) ::: x reigns in the year y.",
        "Conspirators(x) ::: x is a group of conspirators.",
        "Depose(x, y) ::: x attempts to depose y.",
        "Heir(x, y) ::: x is the heir to y.",
        "Slain(x, y) ::: x has slain y.",
        "ResortToNecromancy(x) ::: x resorts to necromancy.",
        "Resurrect(x, y) ::: x resurrects y.",
        "AncientSorcerer(x) ::: x is an ancient sorcerer.",
        "DefeatedBy(x, y) ::: x is defeated by y.",
        "Captured(x) ::: x is captured.",
        "SlatedForExecution(x) ::: x is slated for execution.",
        "RisksLife(x, y) ::: x risks their life to save y."
      ],
      "premises": [
        "King(conan) ∧ Reign(conan, fortyFive) ::: Conan is a king during his reign at the age of forty-five.",
        "Conspirators(group) ∧ Depose(group, conan) ∧ Heir(valerius, numedides) ∧ Slain(conan, numedides) ::: A group of conspirators attempts to depose Conan in favor of Valerius, who is the heir to Numedides, whom Conan has slain.",
        "ResortToNecromancy(group) ∧ Resurrect(xaltotun, ancientSorcerer) ::: The conspirators resort to necromancy, resurrecting Xaltotun, an ancient sorcerer.",
        "DefeatedBy(aquilonianArmy, nemediaArmy) ::: The Aquilonian army is defeated by the army of the rival kingdom of Nemedia.",
        "Captured(conan) ∧ SlatedForExecution(conan) ::: Conan is captured and slated for execution.",
        "RisksLife(zenobia, conan) ::: Zenobia risks her life to free Conan."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "243": [
    {
      "id": 243,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 0,
      "paragraph": " The plot is a loosely based on a melange of motifs from previous Conan short stories, most notably \"The Scarlet Citadel\", with which its early chapters shares an almost identical storyline: Conan defeated in battle, captured and placed in a monster-infested dungeon, finds an unexpected ally and escapes; meanwhile, the population of the Aquilonian capital, believing him dead, riots and is ready to accept an alternative King. From here the two diverge: The Scarlet Citadel, a short story, ends with Conan coming back when the rioting just started and making short work of his foes; in the book-length Hour of the Dragon it is much more complicated, Aquilonia has to live under a long and harrowing foreign occupation while Conan goes through a long hazardous quest, before he could finally come back and dispose of his foes.",
      "question_template": "Conan sets out to capture [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The population of the Aquilonian capital, believing him dead, riots and is ready to accept an alternative King."
      ],
      "predicates": [
        "Defeated(a_2) ::: The individual is defeated in battle.",
        "Captured(a_2) ::: The individual is captured.",
        "PlacedInDungeon(a_2) ::: The individual is placed in a monster-infested dungeon.",
        "FindsAlly(a_2) ::: The individual finds an unexpected ally.",
        "Escapes(a_2) ::: The individual escapes from the dungeon.",
        "Riots(a_0) ::: The population of the Aquilonian capital riots.",
        "BelievesDead(a_0, a_2) ::: The population believes the individual is dead.",
        "AcceptsAlternativeKing(a_0) ::: The population is ready to accept an alternative King.",
        "Returns(a_2) ::: The individual returns.",
        "DisposesFoes(a_2) ::: The individual disposes of his foes.",
        "LongHarrowingOccupation(a_0) ::: Aquilonia lives under a long and harrowing foreign occupation.",
        "HazardousQuest(a_2) ::: The individual goes through a long hazardous quest."
      ],
      "premises": [
        "Defeated(a_2) ∧ Captured(a_2) ∧ PlacedInDungeon(a_2) ∧ FindsAlly(a_2) ∧ Escapes(a_2) ::: The individual is defeated in battle, captured, placed in a monster-infested dungeon, finds an unexpected ally, and escapes.",
        "Riots(a_0) ∧ BelievesDead(a_0, a_2) ∧ AcceptsAlternativeKing(a_0) ::: The population of the Aquilonian capital riots, believing the individual is dead and ready to accept an alternative King.",
        "Returns(a_2) ∧ LongHarrowingOccupation(a_0) ∧ HazardousQuest(a_2) ∧ DisposesFoes(a_2) ::: The individual returns after Aquilonia has lived under a long and harrowing foreign occupation and goes through a long hazardous quest before he could finally dispose of his foes."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 243,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 1,
      "paragraph": "The book place when Conan is about forty-five, during his reign as King of Aquilonia, and follows a plot by a group of conspirators to depose him in favor of Valerius, heir to Conan's predecessor Numedides, whom he had slain to gain the throne. To accomplish this they resort to necromancy, resurrecting Xaltotun, an ancient sorcerer from the pre-Hyborian empire of Acheron. With his aid the Aquilonian army is defeated by that of the rival kingdom of Nemedia and occupied. Conan, captured, is slated for execution until the sympathetic slave girl Zenobia risks her life to free him.",
      "question_template": "Conan sets out to capture [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- A plot by a group of conspirators to depose him in favor of Valerius",
        "- The Aquilonian army is defeated by that of the rival kingdom of Nemedia and occupied"
      ],
      "predicates": [
        "King(x) ::: x is a king.",
        "Reign(x, y) ::: x reigns in the year y.",
        "Conspirators(x) ::: x is a group of conspirators.",
        "Depose(x, y) ::: x attempts to depose y.",
        "Heir(x, y) ::: x is the heir to y.",
        "Slain(x, y) ::: x has slain y.",
        "ResortToNecromancy(x) ::: x resorts to necromancy.",
        "Resurrect(x, y) ::: x resurrects y.",
        "AncientSorcerer(x) ::: x is an ancient sorcerer.",
        "DefeatedBy(x, y) ::: x is defeated by y.",
        "Captured(x) ::: x is captured.",
        "SlatedForExecution(x) ::: x is slated for execution.",
        "RisksLife(x, y) ::: x risks their life to save y."
      ],
      "premises": [
        "King(conan) ∧ Reign(conan, fortyFive) ::: Conan is a king during his reign at the age of forty-five.",
        "Conspirators(group) ∧ Depose(group, conan) ∧ Heir(valerius, numedides) ∧ Slain(conan, numedides) ::: A group of conspirators attempts to depose Conan in favor of Valerius, who is the heir to Numedides, whom Conan has slain.",
        "ResortToNecromancy(group) ∧ Resurrect(xaltotun, ancientSorcerer) ::: The conspirators resort to necromancy, resurrecting Xaltotun, an ancient sorcerer.",
        "DefeatedBy(aquilonianArmy, nemediaArmy) ::: The Aquilonian army is defeated by the army of the rival kingdom of Nemedia.",
        "Captured(conan) ∧ SlatedForExecution(conan) ::: Conan is captured and slated for execution.",
        "RisksLife(zenobia, conan) ::: Zenobia risks her life to free Conan."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "244": [
    {
      "id": 244,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 1,
      "paragraph": "The book place when Conan is about forty-five, during his reign as King of Aquilonia, and follows a plot by a group of conspirators to depose him in favor of Valerius, heir to Conan's predecessor Numedides, whom he had slain to gain the throne. To accomplish this they resort to necromancy, resurrecting Xaltotun, an ancient sorcerer from the pre-Hyborian empire of Acheron. With his aid the Aquilonian army is defeated by that of the rival kingdom of Nemedia and occupied. Conan, captured, is slated for execution until the sympathetic slave girl Zenobia risks her life to free him.",
      "question_template": "Conan is placed in [[CANDIDATE_ANSWER]] when defeated in battle.",
      "candidate_answers": [
        "about forty-five"
      ],
      "predicates": [
        "King(x) ::: x is a king.",
        "Reign(x, y) ::: x reigns in the year y.",
        "Conspirators(x) ::: x is a group of conspirators.",
        "Depose(x, y) ::: x attempts to depose y.",
        "Heir(x, y) ::: x is the heir to y.",
        "Slain(x, y) ::: x has slain y.",
        "ResortToNecromancy(x) ::: x resorts to necromancy.",
        "Resurrect(x, y) ::: x resurrects y.",
        "AncientSorcerer(x) ::: x is an ancient sorcerer.",
        "DefeatedBy(x, y) ::: x is defeated by y.",
        "Captured(x) ::: x is captured.",
        "SlatedForExecution(x) ::: x is slated for execution.",
        "RisksLife(x, y) ::: x risks their life to save y."
      ],
      "premises": [
        "King(conan) ∧ Reign(conan, fortyFive) ::: Conan is a king during his reign at the age of forty-five.",
        "Conspirators(group) ∧ Depose(group, conan) ∧ Heir(valerius, numedides) ∧ Slain(conan, numedides) ::: A group of conspirators attempts to depose Conan in favor of Valerius, who is the heir to Numedides, whom Conan has slain.",
        "ResortToNecromancy(group) ∧ Resurrect(xaltotun, ancientSorcerer) ::: The conspirators resort to necromancy, resurrecting Xaltotun, an ancient sorcerer.",
        "DefeatedBy(aquilonianArmy, nemediaArmy) ::: The Aquilonian army is defeated by the army of the rival kingdom of Nemedia.",
        "Captured(conan) ∧ SlatedForExecution(conan) ::: Conan is captured and slated for execution.",
        "RisksLife(zenobia, conan) ::: Zenobia risks her life to free Conan."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "245": [
    {
      "id": 245,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 0,
      "paragraph": " The plot is a loosely based on a melange of motifs from previous Conan short stories, most notably \"The Scarlet Citadel\", with which its early chapters shares an almost identical storyline: Conan defeated in battle, captured and placed in a monster-infested dungeon, finds an unexpected ally and escapes; meanwhile, the population of the Aquilonian capital, believing him dead, riots and is ready to accept an alternative King. From here the two diverge: The Scarlet Citadel, a short story, ends with Conan coming back when the rioting just started and making short work of his foes; in the book-length Hour of the Dragon it is much more complicated, Aquilonia has to live under a long and harrowing foreign occupation while Conan goes through a long hazardous quest, before he could finally come back and dispose of his foes.",
      "question_template": "The people of Aquilonian riot because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- The population of the Aquilonian capital, believing him dead, riots and is ready to accept an alternative King.",
        "- Aquilonia has to live under a long and harrowing foreign occupation."
      ],
      "predicates": [
        "Defeated(a_2) ::: The individual is defeated in battle.",
        "Captured(a_2) ::: The individual is captured.",
        "PlacedInDungeon(a_2) ::: The individual is placed in a monster-infested dungeon.",
        "FindsAlly(a_2) ::: The individual finds an unexpected ally.",
        "Escapes(a_2) ::: The individual escapes from the dungeon.",
        "Riots(a_0) ::: The population of the Aquilonian capital riots.",
        "BelievesDead(a_0, a_2) ::: The population believes the individual is dead.",
        "AcceptsAlternativeKing(a_0) ::: The population is ready to accept an alternative King.",
        "Returns(a_2) ::: The individual returns.",
        "DisposesFoes(a_2) ::: The individual disposes of his foes.",
        "LongHarrowingOccupation(a_0) ::: Aquilonia lives under a long and harrowing foreign occupation.",
        "HazardousQuest(a_2) ::: The individual goes through a long hazardous quest."
      ],
      "premises": [
        "Defeated(a_2) ∧ Captured(a_2) ∧ PlacedInDungeon(a_2) ∧ FindsAlly(a_2) ∧ Escapes(a_2) ::: The individual is defeated in battle, captured, placed in a monster-infested dungeon, finds an unexpected ally, and escapes.",
        "Riots(a_0) ∧ BelievesDead(a_0, a_2) ∧ AcceptsAlternativeKing(a_0) ::: The population of the Aquilonian capital riots, believing the individual is dead and ready to accept an alternative King.",
        "Returns(a_2) ∧ LongHarrowingOccupation(a_0) ∧ HazardousQuest(a_2) ∧ DisposesFoes(a_2) ::: The individual returns after Aquilonia has lived under a long and harrowing foreign occupation and goes through a long hazardous quest before he could finally dispose of his foes."
      ],
      "conclusions": [
        "Riots(a_0) ∧ BelievesDead(a_0, a_2) ∧ AcceptsAlternativeKing(a_0)",
        "None"
      ]
    },
    {
      "id": 245,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 1,
      "paragraph": "The book place when Conan is about forty-five, during his reign as King of Aquilonia, and follows a plot by a group of conspirators to depose him in favor of Valerius, heir to Conan's predecessor Numedides, whom he had slain to gain the throne. To accomplish this they resort to necromancy, resurrecting Xaltotun, an ancient sorcerer from the pre-Hyborian empire of Acheron. With his aid the Aquilonian army is defeated by that of the rival kingdom of Nemedia and occupied. Conan, captured, is slated for execution until the sympathetic slave girl Zenobia risks her life to free him.",
      "question_template": "The people of Aquilonian riot because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- A plot by a group of conspirators to depose him in favor of Valerius",
        "- Heir to Conan's predecessor Numedides, whom he had slain to gain the throne"
      ],
      "predicates": [
        "King(x) ::: x is a king.",
        "Reign(x, y) ::: x reigns in the year y.",
        "Conspirators(x) ::: x is a group of conspirators.",
        "Depose(x, y) ::: x attempts to depose y.",
        "Heir(x, y) ::: x is the heir to y.",
        "Slain(x, y) ::: x has slain y.",
        "ResortToNecromancy(x) ::: x resorts to necromancy.",
        "Resurrect(x, y) ::: x resurrects y.",
        "AncientSorcerer(x) ::: x is an ancient sorcerer.",
        "DefeatedBy(x, y) ::: x is defeated by y.",
        "Captured(x) ::: x is captured.",
        "SlatedForExecution(x) ::: x is slated for execution.",
        "RisksLife(x, y) ::: x risks their life to save y."
      ],
      "premises": [
        "King(conan) ∧ Reign(conan, fortyFive) ::: Conan is a king during his reign at the age of forty-five.",
        "Conspirators(group) ∧ Depose(group, conan) ∧ Heir(valerius, numedides) ∧ Slain(conan, numedides) ::: A group of conspirators attempts to depose Conan in favor of Valerius, who is the heir to Numedides, whom Conan has slain.",
        "ResortToNecromancy(group) ∧ Resurrect(xaltotun, ancientSorcerer) ::: The conspirators resort to necromancy, resurrecting Xaltotun, an ancient sorcerer.",
        "DefeatedBy(aquilonianArmy, nemediaArmy) ::: The Aquilonian army is defeated by the army of the rival kingdom of Nemedia.",
        "Captured(conan) ∧ SlatedForExecution(conan) ::: Conan is captured and slated for execution.",
        "RisksLife(zenobia, conan) ::: Zenobia risks her life to free Conan."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "246": [
    {
      "id": 246,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 0,
      "paragraph": " The plot is a loosely based on a melange of motifs from previous Conan short stories, most notably \"The Scarlet Citadel\", with which its early chapters shares an almost identical storyline: Conan defeated in battle, captured and placed in a monster-infested dungeon, finds an unexpected ally and escapes; meanwhile, the population of the Aquilonian capital, believing him dead, riots and is ready to accept an alternative King. From here the two diverge: The Scarlet Citadel, a short story, ends with Conan coming back when the rioting just started and making short work of his foes; in the book-length Hour of the Dragon it is much more complicated, Aquilonia has to live under a long and harrowing foreign occupation while Conan goes through a long hazardous quest, before he could finally come back and dispose of his foes.",
      "question_template": "About what age is [[CANDIDATE_ANSWER]]?",
      "candidate_answers": [
        "The population of the Aquilonian capital, believing him dead, riots and is ready to accept an alternative King."
      ],
      "predicates": [
        "Defeated(a_2) ::: The individual is defeated in battle.",
        "Captured(a_2) ::: The individual is captured.",
        "PlacedInDungeon(a_2) ::: The individual is placed in a monster-infested dungeon.",
        "FindsAlly(a_2) ::: The individual finds an unexpected ally.",
        "Escapes(a_2) ::: The individual escapes from the dungeon.",
        "Riots(a_0) ::: The population of the Aquilonian capital riots.",
        "BelievesDead(a_0, a_2) ::: The population believes the individual is dead.",
        "AcceptsAlternativeKing(a_0) ::: The population is ready to accept an alternative King.",
        "Returns(a_2) ::: The individual returns.",
        "DisposesFoes(a_2) ::: The individual disposes of his foes.",
        "LongHarrowingOccupation(a_0) ::: Aquilonia lives under a long and harrowing foreign occupation.",
        "HazardousQuest(a_2) ::: The individual goes through a long hazardous quest."
      ],
      "premises": [
        "Defeated(a_2) ∧ Captured(a_2) ∧ PlacedInDungeon(a_2) ∧ FindsAlly(a_2) ∧ Escapes(a_2) ::: The individual is defeated in battle, captured, placed in a monster-infested dungeon, finds an unexpected ally, and escapes.",
        "Riots(a_0) ∧ BelievesDead(a_0, a_2) ∧ AcceptsAlternativeKing(a_0) ::: The population of the Aquilonian capital riots, believing the individual is dead and ready to accept an alternative King.",
        "Returns(a_2) ∧ LongHarrowingOccupation(a_0) ∧ HazardousQuest(a_2) ∧ DisposesFoes(a_2) ::: The individual returns after Aquilonia has lived under a long and harrowing foreign occupation and goes through a long hazardous quest before he could finally dispose of his foes."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 246,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 1,
      "paragraph": "The book place when Conan is about forty-five, during his reign as King of Aquilonia, and follows a plot by a group of conspirators to depose him in favor of Valerius, heir to Conan's predecessor Numedides, whom he had slain to gain the throne. To accomplish this they resort to necromancy, resurrecting Xaltotun, an ancient sorcerer from the pre-Hyborian empire of Acheron. With his aid the Aquilonian army is defeated by that of the rival kingdom of Nemedia and occupied. Conan, captured, is slated for execution until the sympathetic slave girl Zenobia risks her life to free him.",
      "question_template": "About what age is [[CANDIDATE_ANSWER]]?",
      "candidate_answers": [
        "Numedides"
      ],
      "predicates": [
        "King(x) ::: x is a king.",
        "Reign(x, y) ::: x reigns in the year y.",
        "Conspirators(x) ::: x is a group of conspirators.",
        "Depose(x, y) ::: x attempts to depose y.",
        "Heir(x, y) ::: x is the heir to y.",
        "Slain(x, y) ::: x has slain y.",
        "ResortToNecromancy(x) ::: x resorts to necromancy.",
        "Resurrect(x, y) ::: x resurrects y.",
        "AncientSorcerer(x) ::: x is an ancient sorcerer.",
        "DefeatedBy(x, y) ::: x is defeated by y.",
        "Captured(x) ::: x is captured.",
        "SlatedForExecution(x) ::: x is slated for execution.",
        "RisksLife(x, y) ::: x risks their life to save y."
      ],
      "premises": [
        "King(conan) ∧ Reign(conan, fortyFive) ::: Conan is a king during his reign at the age of forty-five.",
        "Conspirators(group) ∧ Depose(group, conan) ∧ Heir(valerius, numedides) ∧ Slain(conan, numedides) ::: A group of conspirators attempts to depose Conan in favor of Valerius, who is the heir to Numedides, whom Conan has slain.",
        "ResortToNecromancy(group) ∧ Resurrect(xaltotun, ancientSorcerer) ::: The conspirators resort to necromancy, resurrecting Xaltotun, an ancient sorcerer.",
        "DefeatedBy(aquilonianArmy, nemediaArmy) ::: The Aquilonian army is defeated by the army of the rival kingdom of Nemedia.",
        "Captured(conan) ∧ SlatedForExecution(conan) ::: Conan is captured and slated for execution.",
        "RisksLife(zenobia, conan) ::: Zenobia risks her life to free Conan."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 246,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 3,
      "paragraph": "After his eventual triumph he vows to make Zenobia his queen.",
      "question_template": "About what age is [[CANDIDATE_ANSWER]]?",
      "candidate_answers": [
        "Zenobia"
      ],
      "predicates": [
        "Triumph(x) ::: x achieves a significant victory.",
        "Vows(x, y) ::: x makes a solemn promise regarding y.",
        "Queen(y) ::: y is a queen.",
        "Elevate(x, y) ::: x raises y to a higher status."
      ],
      "premises": [
        "Triumph(a_2) ∧ Vows(a_2, a_1) ::: After his eventual triumph, the individual vows to make Zenobia his queen.",
        "Elevate(a_2, a_1) ::: The individual intends to elevate Zenobia to the status of queen."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "247": [
    {
      "id": 247,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 1,
      "paragraph": "The book place when Conan is about forty-five, during his reign as King of Aquilonia, and follows a plot by a group of conspirators to depose him in favor of Valerius, heir to Conan's predecessor Numedides, whom he had slain to gain the throne. To accomplish this they resort to necromancy, resurrecting Xaltotun, an ancient sorcerer from the pre-Hyborian empire of Acheron. With his aid the Aquilonian army is defeated by that of the rival kingdom of Nemedia and occupied. Conan, captured, is slated for execution until the sympathetic slave girl Zenobia risks her life to free him.",
      "question_template": "The conspirators want to depose Conan because of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Conan",
        "A group of conspirators"
      ],
      "predicates": [
        "King(x) ::: x is a king.",
        "Reign(x, y) ::: x reigns in the year y.",
        "Conspirators(x) ::: x is a group of conspirators.",
        "Depose(x, y) ::: x attempts to depose y.",
        "Heir(x, y) ::: x is the heir to y.",
        "Slain(x, y) ::: x has slain y.",
        "ResortToNecromancy(x) ::: x resorts to necromancy.",
        "Resurrect(x, y) ::: x resurrects y.",
        "AncientSorcerer(x) ::: x is an ancient sorcerer.",
        "DefeatedBy(x, y) ::: x is defeated by y.",
        "Captured(x) ::: x is captured.",
        "SlatedForExecution(x) ::: x is slated for execution.",
        "RisksLife(x, y) ::: x risks their life to save y."
      ],
      "premises": [
        "King(conan) ∧ Reign(conan, fortyFive) ::: Conan is a king during his reign at the age of forty-five.",
        "Conspirators(group) ∧ Depose(group, conan) ∧ Heir(valerius, numedides) ∧ Slain(conan, numedides) ::: A group of conspirators attempts to depose Conan in favor of Valerius, who is the heir to Numedides, whom Conan has slain.",
        "ResortToNecromancy(group) ∧ Resurrect(xaltotun, ancientSorcerer) ::: The conspirators resort to necromancy, resurrecting Xaltotun, an ancient sorcerer.",
        "DefeatedBy(aquilonianArmy, nemediaArmy) ::: The Aquilonian army is defeated by the army of the rival kingdom of Nemedia.",
        "Captured(conan) ∧ SlatedForExecution(conan) ::: Conan is captured and slated for execution.",
        "RisksLife(zenobia, conan) ::: Zenobia risks her life to free Conan."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "248": [
    {
      "id": 248,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 1,
      "paragraph": "The book place when Conan is about forty-five, during his reign as King of Aquilonia, and follows a plot by a group of conspirators to depose him in favor of Valerius, heir to Conan's predecessor Numedides, whom he had slain to gain the throne. To accomplish this they resort to necromancy, resurrecting Xaltotun, an ancient sorcerer from the pre-Hyborian empire of Acheron. With his aid the Aquilonian army is defeated by that of the rival kingdom of Nemedia and occupied. Conan, captured, is slated for execution until the sympathetic slave girl Zenobia risks her life to free him.",
      "question_template": "[[CANDIDATE_ANSWER]] was Conan's predecessor as king.",
      "candidate_answers": [
        "Necromancy"
      ],
      "predicates": [
        "King(x) ::: x is a king.",
        "Reign(x, y) ::: x reigns in the year y.",
        "Conspirators(x) ::: x is a group of conspirators.",
        "Depose(x, y) ::: x attempts to depose y.",
        "Heir(x, y) ::: x is the heir to y.",
        "Slain(x, y) ::: x has slain y.",
        "ResortToNecromancy(x) ::: x resorts to necromancy.",
        "Resurrect(x, y) ::: x resurrects y.",
        "AncientSorcerer(x) ::: x is an ancient sorcerer.",
        "DefeatedBy(x, y) ::: x is defeated by y.",
        "Captured(x) ::: x is captured.",
        "SlatedForExecution(x) ::: x is slated for execution.",
        "RisksLife(x, y) ::: x risks their life to save y."
      ],
      "premises": [
        "King(conan) ∧ Reign(conan, fortyFive) ::: Conan is a king during his reign at the age of forty-five.",
        "Conspirators(group) ∧ Depose(group, conan) ∧ Heir(valerius, numedides) ∧ Slain(conan, numedides) ::: A group of conspirators attempts to depose Conan in favor of Valerius, who is the heir to Numedides, whom Conan has slain.",
        "ResortToNecromancy(group) ∧ Resurrect(xaltotun, ancientSorcerer) ::: The conspirators resort to necromancy, resurrecting Xaltotun, an ancient sorcerer.",
        "DefeatedBy(aquilonianArmy, nemediaArmy) ::: The Aquilonian army is defeated by the army of the rival kingdom of Nemedia.",
        "Captured(conan) ∧ SlatedForExecution(conan) ::: Conan is captured and slated for execution.",
        "RisksLife(zenobia, conan) ::: Zenobia risks her life to free Conan."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "249": [
    {
      "id": 249,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 0,
      "paragraph": " The plot is a loosely based on a melange of motifs from previous Conan short stories, most notably \"The Scarlet Citadel\", with which its early chapters shares an almost identical storyline: Conan defeated in battle, captured and placed in a monster-infested dungeon, finds an unexpected ally and escapes; meanwhile, the population of the Aquilonian capital, believing him dead, riots and is ready to accept an alternative King. From here the two diverge: The Scarlet Citadel, a short story, ends with Conan coming back when the rioting just started and making short work of his foes; in the book-length Hour of the Dragon it is much more complicated, Aquilonia has to live under a long and harrowing foreign occupation while Conan goes through a long hazardous quest, before he could finally come back and dispose of his foes.",
      "question_template": "[[CANDIDATE_ANSWER]] killed Numedides.",
      "candidate_answers": [
        "Aquilonian capital",
        "Aquilonia"
      ],
      "predicates": [
        "Defeated(a_2) ::: The individual is defeated in battle.",
        "Captured(a_2) ::: The individual is captured.",
        "PlacedInDungeon(a_2) ::: The individual is placed in a monster-infested dungeon.",
        "FindsAlly(a_2) ::: The individual finds an unexpected ally.",
        "Escapes(a_2) ::: The individual escapes from the dungeon.",
        "Riots(a_0) ::: The population of the Aquilonian capital riots.",
        "BelievesDead(a_0, a_2) ::: The population believes the individual is dead.",
        "AcceptsAlternativeKing(a_0) ::: The population is ready to accept an alternative King.",
        "Returns(a_2) ::: The individual returns.",
        "DisposesFoes(a_2) ::: The individual disposes of his foes.",
        "LongHarrowingOccupation(a_0) ::: Aquilonia lives under a long and harrowing foreign occupation.",
        "HazardousQuest(a_2) ::: The individual goes through a long hazardous quest."
      ],
      "premises": [
        "Defeated(a_2) ∧ Captured(a_2) ∧ PlacedInDungeon(a_2) ∧ FindsAlly(a_2) ∧ Escapes(a_2) ::: The individual is defeated in battle, captured, placed in a monster-infested dungeon, finds an unexpected ally, and escapes.",
        "Riots(a_0) ∧ BelievesDead(a_0, a_2) ∧ AcceptsAlternativeKing(a_0) ::: The population of the Aquilonian capital riots, believing the individual is dead and ready to accept an alternative King.",
        "Returns(a_2) ∧ LongHarrowingOccupation(a_0) ∧ HazardousQuest(a_2) ∧ DisposesFoes(a_2) ::: The individual returns after Aquilonia has lived under a long and harrowing foreign occupation and goes through a long hazardous quest before he could finally dispose of his foes."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 249,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 1,
      "paragraph": "The book place when Conan is about forty-five, during his reign as King of Aquilonia, and follows a plot by a group of conspirators to depose him in favor of Valerius, heir to Conan's predecessor Numedides, whom he had slain to gain the throne. To accomplish this they resort to necromancy, resurrecting Xaltotun, an ancient sorcerer from the pre-Hyborian empire of Acheron. With his aid the Aquilonian army is defeated by that of the rival kingdom of Nemedia and occupied. Conan, captured, is slated for execution until the sympathetic slave girl Zenobia risks her life to free him.",
      "question_template": "[[CANDIDATE_ANSWER]] killed Numedides.",
      "candidate_answers": [
        "Nemedia"
      ],
      "predicates": [
        "King(x) ::: x is a king.",
        "Reign(x, y) ::: x reigns in the year y.",
        "Conspirators(x) ::: x is a group of conspirators.",
        "Depose(x, y) ::: x attempts to depose y.",
        "Heir(x, y) ::: x is the heir to y.",
        "Slain(x, y) ::: x has slain y.",
        "ResortToNecromancy(x) ::: x resorts to necromancy.",
        "Resurrect(x, y) ::: x resurrects y.",
        "AncientSorcerer(x) ::: x is an ancient sorcerer.",
        "DefeatedBy(x, y) ::: x is defeated by y.",
        "Captured(x) ::: x is captured.",
        "SlatedForExecution(x) ::: x is slated for execution.",
        "RisksLife(x, y) ::: x risks their life to save y."
      ],
      "premises": [
        "King(conan) ∧ Reign(conan, fortyFive) ::: Conan is a king during his reign at the age of forty-five.",
        "Conspirators(group) ∧ Depose(group, conan) ∧ Heir(valerius, numedides) ∧ Slain(conan, numedides) ::: A group of conspirators attempts to depose Conan in favor of Valerius, who is the heir to Numedides, whom Conan has slain.",
        "ResortToNecromancy(group) ∧ Resurrect(xaltotun, ancientSorcerer) ::: The conspirators resort to necromancy, resurrecting Xaltotun, an ancient sorcerer.",
        "DefeatedBy(aquilonianArmy, nemediaArmy) ::: The Aquilonian army is defeated by the army of the rival kingdom of Nemedia.",
        "Captured(conan) ∧ SlatedForExecution(conan) ::: Conan is captured and slated for execution.",
        "RisksLife(zenobia, conan) ::: Zenobia risks her life to free Conan."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 249,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 3,
      "paragraph": "After his eventual triumph he vows to make Zenobia his queen.",
      "question_template": "[[CANDIDATE_ANSWER]] killed Numedides.",
      "candidate_answers": [
        "Zenobia"
      ],
      "predicates": [
        "Triumph(x) ::: x achieves a significant victory.",
        "Vows(x, y) ::: x makes a solemn promise regarding y.",
        "Queen(y) ::: y is a queen.",
        "Elevate(x, y) ::: x raises y to a higher status."
      ],
      "premises": [
        "Triumph(a_2) ∧ Vows(a_2, a_1) ::: After his eventual triumph, the individual vows to make Zenobia his queen.",
        "Elevate(a_2, a_1) ::: The individual intends to elevate Zenobia to the status of queen."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "250": [
    {
      "id": 250,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 0,
      "paragraph": " The plot is a loosely based on a melange of motifs from previous Conan short stories, most notably \"The Scarlet Citadel\", with which its early chapters shares an almost identical storyline: Conan defeated in battle, captured and placed in a monster-infested dungeon, finds an unexpected ally and escapes; meanwhile, the population of the Aquilonian capital, believing him dead, riots and is ready to accept an alternative King. From here the two diverge: The Scarlet Citadel, a short story, ends with Conan coming back when the rioting just started and making short work of his foes; in the book-length Hour of the Dragon it is much more complicated, Aquilonia has to live under a long and harrowing foreign occupation while Conan goes through a long hazardous quest, before he could finally come back and dispose of his foes.",
      "question_template": "Necromancy is the form of magic used to resurrect Xaltotun.",
      "candidate_answers": [
        "- A monster-infested dungeon",
        "- Aquilonia",
        "- A long hazardous quest"
      ],
      "predicates": [
        "Defeated(a_2) ::: The individual is defeated in battle.",
        "Captured(a_2) ::: The individual is captured.",
        "PlacedInDungeon(a_2) ::: The individual is placed in a monster-infested dungeon.",
        "FindsAlly(a_2) ::: The individual finds an unexpected ally.",
        "Escapes(a_2) ::: The individual escapes from the dungeon.",
        "Riots(a_0) ::: The population of the Aquilonian capital riots.",
        "BelievesDead(a_0, a_2) ::: The population believes the individual is dead.",
        "AcceptsAlternativeKing(a_0) ::: The population is ready to accept an alternative King.",
        "Returns(a_2) ::: The individual returns.",
        "DisposesFoes(a_2) ::: The individual disposes of his foes.",
        "LongHarrowingOccupation(a_0) ::: Aquilonia lives under a long and harrowing foreign occupation.",
        "HazardousQuest(a_2) ::: The individual goes through a long hazardous quest."
      ],
      "premises": [
        "Defeated(a_2) ∧ Captured(a_2) ∧ PlacedInDungeon(a_2) ∧ FindsAlly(a_2) ∧ Escapes(a_2) ::: The individual is defeated in battle, captured, placed in a monster-infested dungeon, finds an unexpected ally, and escapes.",
        "Riots(a_0) ∧ BelievesDead(a_0, a_2) ∧ AcceptsAlternativeKing(a_0) ::: The population of the Aquilonian capital riots, believing the individual is dead and ready to accept an alternative King.",
        "Returns(a_2) ∧ LongHarrowingOccupation(a_0) ∧ HazardousQuest(a_2) ∧ DisposesFoes(a_2) ::: The individual returns after Aquilonia has lived under a long and harrowing foreign occupation and goes through a long hazardous quest before he could finally dispose of his foes."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 250,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 1,
      "paragraph": "The book place when Conan is about forty-five, during his reign as King of Aquilonia, and follows a plot by a group of conspirators to depose him in favor of Valerius, heir to Conan's predecessor Numedides, whom he had slain to gain the throne. To accomplish this they resort to necromancy, resurrecting Xaltotun, an ancient sorcerer from the pre-Hyborian empire of Acheron. With his aid the Aquilonian army is defeated by that of the rival kingdom of Nemedia and occupied. Conan, captured, is slated for execution until the sympathetic slave girl Zenobia risks her life to free him.",
      "question_template": "Necromancy is the form of magic used to resurrect Xaltotun.",
      "candidate_answers": [
        "- The pre-Hyborian empire of Acheron",
        "- The rival kingdom of Nemedia"
      ],
      "predicates": [
        "King(x) ::: x is a king.",
        "Reign(x, y) ::: x reigns in the year y.",
        "Conspirators(x) ::: x is a group of conspirators.",
        "Depose(x, y) ::: x attempts to depose y.",
        "Heir(x, y) ::: x is the heir to y.",
        "Slain(x, y) ::: x has slain y.",
        "ResortToNecromancy(x) ::: x resorts to necromancy.",
        "Resurrect(x, y) ::: x resurrects y.",
        "AncientSorcerer(x) ::: x is an ancient sorcerer.",
        "DefeatedBy(x, y) ::: x is defeated by y.",
        "Captured(x) ::: x is captured.",
        "SlatedForExecution(x) ::: x is slated for execution.",
        "RisksLife(x, y) ::: x risks their life to save y."
      ],
      "premises": [
        "King(conan) ∧ Reign(conan, fortyFive) ::: Conan is a king during his reign at the age of forty-five.",
        "Conspirators(group) ∧ Depose(group, conan) ∧ Heir(valerius, numedides) ∧ Slain(conan, numedides) ::: A group of conspirators attempts to depose Conan in favor of Valerius, who is the heir to Numedides, whom Conan has slain.",
        "ResortToNecromancy(group) ∧ Resurrect(xaltotun, ancientSorcerer) ::: The conspirators resort to necromancy, resurrecting Xaltotun, an ancient sorcerer.",
        "DefeatedBy(aquilonianArmy, nemediaArmy) ::: The Aquilonian army is defeated by the army of the rival kingdom of Nemedia.",
        "Captured(conan) ∧ SlatedForExecution(conan) ::: Conan is captured and slated for execution.",
        "RisksLife(zenobia, conan) ::: Zenobia risks her life to free Conan."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 250,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 3,
      "paragraph": "After his eventual triumph he vows to make Zenobia his queen.",
      "question_template": "Necromancy is the form of magic used to resurrect Xaltotun.",
      "candidate_answers": [
        "Zenobia"
      ],
      "predicates": [
        "Triumph(x) ::: x achieves a significant victory.",
        "Vows(x, y) ::: x makes a solemn promise regarding y.",
        "Queen(y) ::: y is a queen.",
        "Elevate(x, y) ::: x raises y to a higher status."
      ],
      "premises": [
        "Triumph(a_2) ∧ Vows(a_2, a_1) ::: After his eventual triumph, the individual vows to make Zenobia his queen.",
        "Elevate(a_2, a_1) ::: The individual intends to elevate Zenobia to the status of queen."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "251": [
    {
      "id": 251,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 1,
      "paragraph": "The book place when Conan is about forty-five, during his reign as King of Aquilonia, and follows a plot by a group of conspirators to depose him in favor of Valerius, heir to Conan's predecessor Numedides, whom he had slain to gain the throne. To accomplish this they resort to necromancy, resurrecting Xaltotun, an ancient sorcerer from the pre-Hyborian empire of Acheron. With his aid the Aquilonian army is defeated by that of the rival kingdom of Nemedia and occupied. Conan, captured, is slated for execution until the sympathetic slave girl Zenobia risks her life to free him.",
      "question_template": "The kingdom that defeats the Aquilonian army is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Zenobia"
      ],
      "predicates": [
        "King(x) ::: x is a king.",
        "Reign(x, y) ::: x reigns in the year y.",
        "Conspirators(x) ::: x is a group of conspirators.",
        "Depose(x, y) ::: x attempts to depose y.",
        "Heir(x, y) ::: x is the heir to y.",
        "Slain(x, y) ::: x has slain y.",
        "ResortToNecromancy(x) ::: x resorts to necromancy.",
        "Resurrect(x, y) ::: x resurrects y.",
        "AncientSorcerer(x) ::: x is an ancient sorcerer.",
        "DefeatedBy(x, y) ::: x is defeated by y.",
        "Captured(x) ::: x is captured.",
        "SlatedForExecution(x) ::: x is slated for execution.",
        "RisksLife(x, y) ::: x risks their life to save y."
      ],
      "premises": [
        "King(conan) ∧ Reign(conan, fortyFive) ::: Conan is a king during his reign at the age of forty-five.",
        "Conspirators(group) ∧ Depose(group, conan) ∧ Heir(valerius, numedides) ∧ Slain(conan, numedides) ::: A group of conspirators attempts to depose Conan in favor of Valerius, who is the heir to Numedides, whom Conan has slain.",
        "ResortToNecromancy(group) ∧ Resurrect(xaltotun, ancientSorcerer) ::: The conspirators resort to necromancy, resurrecting Xaltotun, an ancient sorcerer.",
        "DefeatedBy(aquilonianArmy, nemediaArmy) ::: The Aquilonian army is defeated by the army of the rival kingdom of Nemedia.",
        "Captured(conan) ∧ SlatedForExecution(conan) ::: Conan is captured and slated for execution.",
        "RisksLife(zenobia, conan) ::: Zenobia risks her life to free Conan."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 251,
      "context_id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 3,
      "paragraph": "After his eventual triumph he vows to make Zenobia his queen.",
      "question_template": "The kingdom that defeats the Aquilonian army is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Zenobia"
      ],
      "predicates": [
        "Triumph(x) ::: x achieves a significant victory.",
        "Vows(x, y) ::: x makes a solemn promise regarding y.",
        "Queen(y) ::: y is a queen.",
        "Elevate(x, y) ::: x raises y to a higher status."
      ],
      "premises": [
        "Triumph(a_2) ∧ Vows(a_2, a_1) ::: After his eventual triumph, the individual vows to make Zenobia his queen.",
        "Elevate(a_2, a_1) ::: The individual intends to elevate Zenobia to the status of queen."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "253": [
    {
      "id": 253,
      "context_id": "1b548ec72908f9447446bdb24e8c179df19a8999",
      "paragraph_id": 2,
      "paragraph": "They begin to duel with each other over who should get Emily, but are thwarted by the arrival of Theseus, who sentences them both to gather 100 men apiece and to fight a mass judicial tournament, the winner of which is to marry Emily. The forces assemble. Palamon prays to Venus to make Emily his wife; Emily prays to Diana to remain unmarried, or else to marry the one who truly loves her; and Arcite prays to Mars for victory. Theseus lays down rules for the tournament so that, if any man becomes seriously injured, he must be dragged out of the battle and is no longer in combat. Because of this, the story seems to claim at the end that there were almost no deaths on either side.",
      "question_template": "Conan vows to make [[CANDIDATE_ANSWER]] his Queen.",
      "candidate_answers": [
        "Theseus",
        "The story seems to claim at the end that there were almost no deaths on either side."
      ],
      "predicates": [
        "Duel(x, y) ::: x and y are dueling with each other.",
        "Gather(x, n) ::: x gathers n men.",
        "Fight(x, y) ::: x fights in a tournament against y.",
        "Marry(x, y) ::: x marries y.",
        "PrayTo(x, y) ::: x prays to y.",
        "InCombat(x) ::: x is in combat.",
        "SeriouslyInjured(x) ::: x is seriously injured.",
        "Winner(x) ::: x is the winner of the tournament."
      ],
      "premises": [
        "Duel(palamon, arcite) ::: Palamon and Arcite begin to duel with each other over who should get Emily.",
        "Gather(palamon, 100) ∧ Gather(arcite, 100) ::: Theseus sentences both Palamon and Arcite to gather 100 men apiece.",
        "Fight(palamon, arcite) ::: The winner of the tournament fights against the other.",
        "Marry(winner, emily) ::: The winner of the tournament marries Emily.",
        "PrayTo(palamon, venus) ::: Palamon prays to Venus to make Emily his wife.",
        "PrayTo(emily, diana) ::: Emily prays to Diana to remain unmarried, or else to marry the one who truly loves her.",
        "PrayTo(arcite, mars) ::: Arcite prays to Mars for victory.",
        "∀x (SeriouslyInjured(x) → ¬InCombat(x)) ::: If any man becomes seriously injured, he is no longer in combat.",
        "∀x (InCombat(x) → ¬SeriouslyInjured(x)) ::: Because of the rules laid down by Theseus, there were almost no deaths on either side.",
        "Conclusion:",
        "Winner(palamon) ∧ Marry(winner, emily) ::: The winner of the tournament marries Emily."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "254": [
    {
      "id": 254,
      "context_id": "1b548ec72908f9447446bdb24e8c179df19a8999",
      "paragraph_id": 1,
      "paragraph": "The competition brought about by this love causes them to fight one another. After some years, Arcite is released from prison through the good offices of Theseus's friend Pirithoos, amending Arcite's sentence to exile. Arcite secretly returns to Athens in disguise and enters service in Emily's household to get close to her. Palamon eventually escapes by drugging the jailer and, while hiding in a grove, overhears Arcite singing about love and fortune.",
      "question_template": "Theseus declared [[CANDIDATE_ANSWER]] to be the winner.",
      "candidate_answers": [
        "Emily"
      ],
      "predicates": [
        "ReturnsInDisguise(x, y) ::: x returns to y in disguise.",
        "EntersService(x, y) ::: x enters service in y's household.",
        "CloseTo(x, y) ::: x gets close to y.",
        "EscapesFromPrison(x) ::: x escapes from prison.",
        "Overhears(x, y) ::: x overhears y."
      ],
      "premises": [
        "ReturnsInDisguise(arcite, athens) ∧ CloseTo(arcite, emily) ::: Arcite returns to Athens in disguise to get close to Emily.",
        "EscapesFromPrison(palamon) ∧ Overhears(palamon, arcite) ::: Palamon escapes from prison to overhear Arcite."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "255": [
    {
      "id": 255,
      "context_id": "1b548ec72908f9447446bdb24e8c179df19a8999",
      "paragraph_id": 1,
      "paragraph": "The competition brought about by this love causes them to fight one another. After some years, Arcite is released from prison through the good offices of Theseus's friend Pirithoos, amending Arcite's sentence to exile. Arcite secretly returns to Athens in disguise and enters service in Emily's household to get close to her. Palamon eventually escapes by drugging the jailer and, while hiding in a grove, overhears Arcite singing about love and fortune.",
      "question_template": "[[CANDIDATE_ANSWER]] intervenes to kill Arcite.",
      "candidate_answers": [
        "- Arcite is released from prison through the good offices of Theseus's friend Pirithoos",
        "- Arcite secretly returns to Athens in disguise and enters service in Emily's household to get close to her",
        "- Palamon eventually escapes by drugging the jailer",
        "- Palamon, while hiding in a grove, overhears Arcite singing about love and fortune"
      ],
      "predicates": [
        "ReturnsInDisguise(x, y) ::: x returns to y in disguise.",
        "EntersService(x, y) ::: x enters service in y's household.",
        "CloseTo(x, y) ::: x gets close to y.",
        "EscapesFromPrison(x) ::: x escapes from prison.",
        "Overhears(x, y) ::: x overhears y."
      ],
      "premises": [
        "ReturnsInDisguise(arcite, athens) ∧ CloseTo(arcite, emily) ::: Arcite returns to Athens in disguise to get close to Emily.",
        "EscapesFromPrison(palamon) ∧ Overhears(palamon, arcite) ::: Palamon escapes from prison to overhear Arcite."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "256": [
    {
      "id": 256,
      "context_id": "1b548ec72908f9447446bdb24e8c179df19a8999",
      "paragraph_id": 1,
      "paragraph": "The competition brought about by this love causes them to fight one another. After some years, Arcite is released from prison through the good offices of Theseus's friend Pirithoos, amending Arcite's sentence to exile. Arcite secretly returns to Athens in disguise and enters service in Emily's household to get close to her. Palamon eventually escapes by drugging the jailer and, while hiding in a grove, overhears Arcite singing about love and fortune.",
      "question_template": "[[CANDIDATE_ANSWER]] is the name of the woman Palamon and Arcite fight over.",
      "candidate_answers": [
        "Theseus's friend Pirithoos"
      ],
      "predicates": [
        "ReturnsInDisguise(x, y) ::: x returns to y in disguise.",
        "EntersService(x, y) ::: x enters service in y's household.",
        "CloseTo(x, y) ::: x gets close to y.",
        "EscapesFromPrison(x) ::: x escapes from prison.",
        "Overhears(x, y) ::: x overhears y."
      ],
      "premises": [
        "ReturnsInDisguise(arcite, athens) ∧ CloseTo(arcite, emily) ::: Arcite returns to Athens in disguise to get close to Emily.",
        "EscapesFromPrison(palamon) ∧ Overhears(palamon, arcite) ::: Palamon escapes from prison to overhear Arcite."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "257": [
    {
      "id": 257,
      "context_id": "1b548ec72908f9447446bdb24e8c179df19a8999",
      "paragraph_id": 1,
      "paragraph": "The competition brought about by this love causes them to fight one another. After some years, Arcite is released from prison through the good offices of Theseus's friend Pirithoos, amending Arcite's sentence to exile. Arcite secretly returns to Athens in disguise and enters service in Emily's household to get close to her. Palamon eventually escapes by drugging the jailer and, while hiding in a grove, overhears Arcite singing about love and fortune.",
      "question_template": "The relationship between Palamon and Arcite is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Emily's household",
        "In disguise"
      ],
      "predicates": [
        "ReturnsInDisguise(x, y) ::: x returns to y in disguise.",
        "EntersService(x, y) ::: x enters service in y's household.",
        "CloseTo(x, y) ::: x gets close to y.",
        "EscapesFromPrison(x) ::: x escapes from prison.",
        "Overhears(x, y) ::: x overhears y."
      ],
      "premises": [
        "ReturnsInDisguise(arcite, athens) ∧ CloseTo(arcite, emily) ::: Arcite returns to Athens in disguise to get close to Emily.",
        "EscapesFromPrison(palamon) ∧ Overhears(palamon, arcite) ::: Palamon escapes from prison to overhear Arcite."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 257,
      "context_id": "1b548ec72908f9447446bdb24e8c179df19a8999",
      "paragraph_id": 2,
      "paragraph": "They begin to duel with each other over who should get Emily, but are thwarted by the arrival of Theseus, who sentences them both to gather 100 men apiece and to fight a mass judicial tournament, the winner of which is to marry Emily. The forces assemble. Palamon prays to Venus to make Emily his wife; Emily prays to Diana to remain unmarried, or else to marry the one who truly loves her; and Arcite prays to Mars for victory. Theseus lays down rules for the tournament so that, if any man becomes seriously injured, he must be dragged out of the battle and is no longer in combat. Because of this, the story seems to claim at the end that there were almost no deaths on either side.",
      "question_template": "The relationship between Palamon and Arcite is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Emily is prayed for by Palamon and Arcite",
        "Emily prays to Diana to remain unmarried"
      ],
      "predicates": [
        "Duel(x, y) ::: x and y are dueling with each other.",
        "Gather(x, n) ::: x gathers n men.",
        "Fight(x, y) ::: x fights in a tournament against y.",
        "Marry(x, y) ::: x marries y.",
        "PrayTo(x, y) ::: x prays to y.",
        "InCombat(x) ::: x is in combat.",
        "SeriouslyInjured(x) ::: x is seriously injured.",
        "Winner(x) ::: x is the winner of the tournament."
      ],
      "premises": [
        "Duel(palamon, arcite) ::: Palamon and Arcite begin to duel with each other over who should get Emily.",
        "Gather(palamon, 100) ∧ Gather(arcite, 100) ::: Theseus sentences both Palamon and Arcite to gather 100 men apiece.",
        "Fight(palamon, arcite) ::: The winner of the tournament fights against the other.",
        "Marry(winner, emily) ::: The winner of the tournament marries Emily.",
        "PrayTo(palamon, venus) ::: Palamon prays to Venus to make Emily his wife.",
        "PrayTo(emily, diana) ::: Emily prays to Diana to remain unmarried, or else to marry the one who truly loves her.",
        "PrayTo(arcite, mars) ::: Arcite prays to Mars for victory.",
        "∀x (SeriouslyInjured(x) → ¬InCombat(x)) ::: If any man becomes seriously injured, he is no longer in combat.",
        "∀x (InCombat(x) → ¬SeriouslyInjured(x)) ::: Because of the rules laid down by Theseus, there were almost no deaths on either side.",
        "Conclusion:",
        "Winner(palamon) ∧ Marry(winner, emily) ::: The winner of the tournament marries Emily."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "258": [
    {
      "id": 258,
      "context_id": "1b548ec72908f9447446bdb24e8c179df19a8999",
      "paragraph_id": 1,
      "paragraph": "The competition brought about by this love causes them to fight one another. After some years, Arcite is released from prison through the good offices of Theseus's friend Pirithoos, amending Arcite's sentence to exile. Arcite secretly returns to Athens in disguise and enters service in Emily's household to get close to her. Palamon eventually escapes by drugging the jailer and, while hiding in a grove, overhears Arcite singing about love and fortune.",
      "question_template": "[[CANDIDATE_ANSWER]] is Theseus' title.",
      "candidate_answers": [
        "- Palamon eventually escapes by drugging the jailer",
        "- Hiding in a grove, overhears Arcite singing about love and fortune"
      ],
      "predicates": [
        "ReturnsInDisguise(x, y) ::: x returns to y in disguise.",
        "EntersService(x, y) ::: x enters service in y's household.",
        "CloseTo(x, y) ::: x gets close to y.",
        "EscapesFromPrison(x) ::: x escapes from prison.",
        "Overhears(x, y) ::: x overhears y."
      ],
      "premises": [
        "ReturnsInDisguise(arcite, athens) ∧ CloseTo(arcite, emily) ::: Arcite returns to Athens in disguise to get close to Emily.",
        "EscapesFromPrison(palamon) ∧ Overhears(palamon, arcite) ::: Palamon escapes from prison to overhear Arcite."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "263": [
    {
      "id": 263,
      "context_id": "1b548ec72908f9447446bdb24e8c179df19a8999",
      "paragraph_id": 0,
      "paragraph": " Cousins and knights Palamon and Arcite are captured and imprisoned by Theseus, duke of Athens, after being found unconscious following his battle against Creon. Their cell is in the tower of Theseus's castle, with a window which overlooks his palace garden. The imprisoned Palamon wakes early one morning in May and catches sight of Princess Emily (Emelye), the sister of Theseus's wife Hippolyta, down in the courtyard picking flowers for a garland. He instantly falls in love with her; his moan is heard by Arcite, who then also wakes and sees Emily. He falls in love with her as well, claiming that, because Palamon first recognized Emily as mortal and not as a goddess, Arcite alone has the right to woo her.",
      "question_template": "The number of men in each army for Palamon and Arcite is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Palamon"
      ],
      "predicates": [
        "Captured(x) ::: x is captured.",
        "Imprisoned(x) ::: x is imprisoned.",
        "InCell(x, y) ::: x is in cell y.",
        "WakesEarly(x) ::: x wakes early.",
        "Sees(x, y) ::: x sees y.",
        "FallsInLove(x, y) ::: x falls in love with y.",
        "Claims(x, y) ::: x claims y.",
        "Recognizes(x, y) ::: x recognizes y."
      ],
      "premises": [
        "Captured(palamon) ∧ Captured(arcite) ∧ Imprisoned(palamon) ∧ Imprisoned(arcite) ∧ InCell(palamon, tower) ∧ InCell(arcite, tower) ::: Palamon and Arcite are captured and imprisoned by Theseus in the tower of his castle.",
        "WakesEarly(palamon) ::: Palamon wakes early one morning in May.",
        "Sees(palamon, emily) ::: Palamon sees Emily down in the courtyard picking flowers.",
        "FallsInLove(palamon, emily) ::: Palamon instantly falls in love with Emily.",
        "WakesEarly(arcite) ::: Arcite wakes after hearing Palamon's moan.",
        "Sees(arcite, emily) ::: Arcite sees Emily.",
        "FallsInLove(arcite, emily) ::: Arcite falls in love with Emily.",
        "Recognizes(palamon, emily) ::: Palamon recognizes Emily as mortal and not as a goddess.",
        "Claims(arcite, rightToWoo) ::: Arcite claims that he has the right to woo Emily over Palamon.",
        "Conclusion:",
        "Claims(arcite, woo(emily)) ::: Arcite believes he has the right to woo Princess Emily over Palamon."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 263,
      "context_id": "1b548ec72908f9447446bdb24e8c179df19a8999",
      "paragraph_id": 2,
      "paragraph": "They begin to duel with each other over who should get Emily, but are thwarted by the arrival of Theseus, who sentences them both to gather 100 men apiece and to fight a mass judicial tournament, the winner of which is to marry Emily. The forces assemble. Palamon prays to Venus to make Emily his wife; Emily prays to Diana to remain unmarried, or else to marry the one who truly loves her; and Arcite prays to Mars for victory. Theseus lays down rules for the tournament so that, if any man becomes seriously injured, he must be dragged out of the battle and is no longer in combat. Because of this, the story seems to claim at the end that there were almost no deaths on either side.",
      "question_template": "The number of men in each army for Palamon and Arcite is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Palamon"
      ],
      "predicates": [
        "Duel(x, y) ::: x and y are dueling with each other.",
        "Gather(x, n) ::: x gathers n men.",
        "Fight(x, y) ::: x fights in a tournament against y.",
        "Marry(x, y) ::: x marries y.",
        "PrayTo(x, y) ::: x prays to y.",
        "InCombat(x) ::: x is in combat.",
        "SeriouslyInjured(x) ::: x is seriously injured.",
        "Winner(x) ::: x is the winner of the tournament."
      ],
      "premises": [
        "Duel(palamon, arcite) ::: Palamon and Arcite begin to duel with each other over who should get Emily.",
        "Gather(palamon, 100) ∧ Gather(arcite, 100) ::: Theseus sentences both Palamon and Arcite to gather 100 men apiece.",
        "Fight(palamon, arcite) ::: The winner of the tournament fights against the other.",
        "Marry(winner, emily) ::: The winner of the tournament marries Emily.",
        "PrayTo(palamon, venus) ::: Palamon prays to Venus to make Emily his wife.",
        "PrayTo(emily, diana) ::: Emily prays to Diana to remain unmarried, or else to marry the one who truly loves her.",
        "PrayTo(arcite, mars) ::: Arcite prays to Mars for victory.",
        "∀x (SeriouslyInjured(x) → ¬InCombat(x)) ::: If any man becomes seriously injured, he is no longer in combat.",
        "∀x (InCombat(x) → ¬SeriouslyInjured(x)) ::: Because of the rules laid down by Theseus, there were almost no deaths on either side.",
        "Conclusion:",
        "Winner(palamon) ∧ Marry(winner, emily) ::: The winner of the tournament marries Emily."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "264": [
    {
      "id": 264,
      "context_id": "1b548ec72908f9447446bdb24e8c179df19a8999",
      "paragraph_id": 1,
      "paragraph": "The competition brought about by this love causes them to fight one another. After some years, Arcite is released from prison through the good offices of Theseus's friend Pirithoos, amending Arcite's sentence to exile. Arcite secretly returns to Athens in disguise and enters service in Emily's household to get close to her. Palamon eventually escapes by drugging the jailer and, while hiding in a grove, overhears Arcite singing about love and fortune.",
      "question_template": "Princess Emily is related to the Duke of Athens through [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Arcite secretly returns to Athens in disguise",
        "- Enters service in Emily's household to get close to her"
      ],
      "predicates": [
        "ReturnsInDisguise(x, y) ::: x returns to y in disguise.",
        "EntersService(x, y) ::: x enters service in y's household.",
        "CloseTo(x, y) ::: x gets close to y.",
        "EscapesFromPrison(x) ::: x escapes from prison.",
        "Overhears(x, y) ::: x overhears y."
      ],
      "premises": [
        "ReturnsInDisguise(arcite, athens) ∧ CloseTo(arcite, emily) ::: Arcite returns to Athens in disguise to get close to Emily.",
        "EscapesFromPrison(palamon) ∧ Overhears(palamon, arcite) ::: Palamon escapes from prison to overhear Arcite."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 264,
      "context_id": "1b548ec72908f9447446bdb24e8c179df19a8999",
      "paragraph_id": 3,
      "paragraph": "Both Palamon and Arcite fight valiantly, but Palamon is wounded by a sword thrust from one of Arcite's men and is unhorsed. Theseus declares the fight to be over and Arcite thus wins the battle. But before he can claim Emily as his prize, through a divine intervention by Saturn, he is mortally injured by his horse throwing him off and then falling on him. As he dies, he tells Emily that she should marry Palamon, because he would make a good husband for her. Palamon marries Emily, and thus all three prayers are fulfilled.Theseus begins with a reference to the First Mover, the primum movens, or unmoved mover of Aristotelian philosophy creating the âGreat Chain of Loveâ, the kyndely enclyning, or natural inclination, that holds the universe together in Medieval cosmology. He describes the inevitability of death for all things at their proper time, using the destruction of an oak tree, a stone, and a river as examples, and listing all the classes of medieval society as universally subject to death. He then shifts to a discussion of the proper way to respond to this inevitability of death. Theseus maintains that, since every man must die when his time comes, that it is best to die with a good name and reputation, on good terms with his friends, and having died with honour. Theseus's comfort to Emily and Palamon is that Arcite died in just such a manner, having acquitted himself well in a feat of arms.",
      "question_template": "Princess Emily is related to the Duke of Athens through [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Arcite wins the battle",
        "- He tells Emily that she should marry Palamon",
        "- He is mortally injured by his horse throwing him off and then falling on him"
      ],
      "predicates": [
        "Wounded(x) ::: x is wounded.",
        "Unhorsed(x) ::: x is unhorsed.",
        "Wins(x, y) ::: x wins against y.",
        "MortallyInjured(x) ::: x is mortally injured.",
        "Tells(x, y, z) ::: x tells y to do z.",
        "Marries(x, y) ::: x marries y.",
        "GoodNameAndReputation(x) ::: x has a good name and reputation.",
        "Honour(x) ::: x has honour.",
        "AcquittedWell(x) ::: x acquitted himself well in a feat of arms.",
        "SubjectToDeath(x) ::: x is subject to death.",
        "InGoodTerms(x, y) ::: x is on good terms with y."
      ],
      "premises": [
        "Wounded(a_1) ∧ Unhorsed(a_1) ∧ Wins(a_2, a_1) ::: Palamon is wounded by a sword thrust from one of Arcite's men and is unhorsed, and Arcite wins the battle.",
        "MortallyInjured(a_2) ::: Arcite is mortally injured by his horse throwing him off and then falling on him.",
        "Tells(a_2, a_4, a_1) ::: Arcite tells Emily that she should marry Palamon.",
        "Marries(a_1, a_4) ::: Palamon marries Emily.",
        "GoodNameAndReputation(a_2) ∧ InGoodTerms(a_2, a_3) ∧ Honour(a_2) ::: It is best to die with a good name and reputation, on good terms with friends, and with honour.",
        "AcquittedWell(a_2) ::: Arcite died in just such a manner, having acquitted himself well in a feat of arms.",
        "∀x (SubjectToDeath(x) → (x = a_3 ∨ x = a_4 ∨ x = a_1 ∨ x = a_2)) ::: All classes of medieval society are universally subject to death.",
        "Conclusion:",
        "AcquittedWell(a_2) ::: Arcite's death is honorable as he acquitted himself well in a feat of arms.",
        "Tells(a_2, a_4, a_1) ::: Emily should marry Palamon as Arcite suggested."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "265": [
    {
      "id": 265,
      "context_id": "1b548ec72908f9447446bdb24e8c179df19a8999",
      "paragraph_id": 2,
      "paragraph": "They begin to duel with each other over who should get Emily, but are thwarted by the arrival of Theseus, who sentences them both to gather 100 men apiece and to fight a mass judicial tournament, the winner of which is to marry Emily. The forces assemble. Palamon prays to Venus to make Emily his wife; Emily prays to Diana to remain unmarried, or else to marry the one who truly loves her; and Arcite prays to Mars for victory. Theseus lays down rules for the tournament so that, if any man becomes seriously injured, he must be dragged out of the battle and is no longer in combat. Because of this, the story seems to claim at the end that there were almost no deaths on either side.",
      "question_template": "Arcite competes against [[CANDIDATE_ANSWER]] for the love of Emily.",
      "candidate_answers": [
        "- Gather 100 men apiece",
        "- Fight a mass judicial tournament",
        "- The winner of which is to marry Emily"
      ],
      "predicates": [
        "Duel(x, y) ::: x and y are dueling with each other.",
        "Gather(x, n) ::: x gathers n men.",
        "Fight(x, y) ::: x fights in a tournament against y.",
        "Marry(x, y) ::: x marries y.",
        "PrayTo(x, y) ::: x prays to y.",
        "InCombat(x) ::: x is in combat.",
        "SeriouslyInjured(x) ::: x is seriously injured.",
        "Winner(x) ::: x is the winner of the tournament."
      ],
      "premises": [
        "Duel(palamon, arcite) ::: Palamon and Arcite begin to duel with each other over who should get Emily.",
        "Gather(palamon, 100) ∧ Gather(arcite, 100) ::: Theseus sentences both Palamon and Arcite to gather 100 men apiece.",
        "Fight(palamon, arcite) ::: The winner of the tournament fights against the other.",
        "Marry(winner, emily) ::: The winner of the tournament marries Emily.",
        "PrayTo(palamon, venus) ::: Palamon prays to Venus to make Emily his wife.",
        "PrayTo(emily, diana) ::: Emily prays to Diana to remain unmarried, or else to marry the one who truly loves her.",
        "PrayTo(arcite, mars) ::: Arcite prays to Mars for victory.",
        "∀x (SeriouslyInjured(x) → ¬InCombat(x)) ::: If any man becomes seriously injured, he is no longer in combat.",
        "∀x (InCombat(x) → ¬SeriouslyInjured(x)) ::: Because of the rules laid down by Theseus, there were almost no deaths on either side.",
        "Conclusion:",
        "Winner(palamon) ∧ Marry(winner, emily) ::: The winner of the tournament marries Emily."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 265,
      "context_id": "1b548ec72908f9447446bdb24e8c179df19a8999",
      "paragraph_id": 3,
      "paragraph": "Both Palamon and Arcite fight valiantly, but Palamon is wounded by a sword thrust from one of Arcite's men and is unhorsed. Theseus declares the fight to be over and Arcite thus wins the battle. But before he can claim Emily as his prize, through a divine intervention by Saturn, he is mortally injured by his horse throwing him off and then falling on him. As he dies, he tells Emily that she should marry Palamon, because he would make a good husband for her. Palamon marries Emily, and thus all three prayers are fulfilled.Theseus begins with a reference to the First Mover, the primum movens, or unmoved mover of Aristotelian philosophy creating the âGreat Chain of Loveâ, the kyndely enclyning, or natural inclination, that holds the universe together in Medieval cosmology. He describes the inevitability of death for all things at their proper time, using the destruction of an oak tree, a stone, and a river as examples, and listing all the classes of medieval society as universally subject to death. He then shifts to a discussion of the proper way to respond to this inevitability of death. Theseus maintains that, since every man must die when his time comes, that it is best to die with a good name and reputation, on good terms with his friends, and having died with honour. Theseus's comfort to Emily and Palamon is that Arcite died in just such a manner, having acquitted himself well in a feat of arms.",
      "question_template": "Arcite competes against [[CANDIDATE_ANSWER]] for the love of Emily.",
      "candidate_answers": [
        "Theseus declares the fight to be over",
        "Arcite thus wins the battle"
      ],
      "predicates": [
        "Wounded(x) ::: x is wounded.",
        "Unhorsed(x) ::: x is unhorsed.",
        "Wins(x, y) ::: x wins against y.",
        "MortallyInjured(x) ::: x is mortally injured.",
        "Tells(x, y, z) ::: x tells y to do z.",
        "Marries(x, y) ::: x marries y.",
        "GoodNameAndReputation(x) ::: x has a good name and reputation.",
        "Honour(x) ::: x has honour.",
        "AcquittedWell(x) ::: x acquitted himself well in a feat of arms.",
        "SubjectToDeath(x) ::: x is subject to death.",
        "InGoodTerms(x, y) ::: x is on good terms with y."
      ],
      "premises": [
        "Wounded(a_1) ∧ Unhorsed(a_1) ∧ Wins(a_2, a_1) ::: Palamon is wounded by a sword thrust from one of Arcite's men and is unhorsed, and Arcite wins the battle.",
        "MortallyInjured(a_2) ::: Arcite is mortally injured by his horse throwing him off and then falling on him.",
        "Tells(a_2, a_4, a_1) ::: Arcite tells Emily that she should marry Palamon.",
        "Marries(a_1, a_4) ::: Palamon marries Emily.",
        "GoodNameAndReputation(a_2) ∧ InGoodTerms(a_2, a_3) ∧ Honour(a_2) ::: It is best to die with a good name and reputation, on good terms with friends, and with honour.",
        "AcquittedWell(a_2) ::: Arcite died in just such a manner, having acquitted himself well in a feat of arms.",
        "∀x (SubjectToDeath(x) → (x = a_3 ∨ x = a_4 ∨ x = a_1 ∨ x = a_2)) ::: All classes of medieval society are universally subject to death.",
        "Conclusion:",
        "AcquittedWell(a_2) ::: Arcite's death is honorable as he acquitted himself well in a feat of arms.",
        "Tells(a_2, a_4, a_1) ::: Emily should marry Palamon as Arcite suggested."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "266": [
    {
      "id": 266,
      "context_id": "1b548ec72908f9447446bdb24e8c179df19a8999",
      "paragraph_id": 2,
      "paragraph": "They begin to duel with each other over who should get Emily, but are thwarted by the arrival of Theseus, who sentences them both to gather 100 men apiece and to fight a mass judicial tournament, the winner of which is to marry Emily. The forces assemble. Palamon prays to Venus to make Emily his wife; Emily prays to Diana to remain unmarried, or else to marry the one who truly loves her; and Arcite prays to Mars for victory. Theseus lays down rules for the tournament so that, if any man becomes seriously injured, he must be dragged out of the battle and is no longer in combat. Because of this, the story seems to claim at the end that there were almost no deaths on either side.",
      "question_template": "Arcite does [[CANDIDATE_ANSWER]] in order to get closer to Emily after being put in exile.",
      "candidate_answers": [
        "Venus",
        "Diana",
        "Mars"
      ],
      "predicates": [
        "Duel(x, y) ::: x and y are dueling with each other.",
        "Gather(x, n) ::: x gathers n men.",
        "Fight(x, y) ::: x fights in a tournament against y.",
        "Marry(x, y) ::: x marries y.",
        "PrayTo(x, y) ::: x prays to y.",
        "InCombat(x) ::: x is in combat.",
        "SeriouslyInjured(x) ::: x is seriously injured.",
        "Winner(x) ::: x is the winner of the tournament."
      ],
      "premises": [
        "Duel(palamon, arcite) ::: Palamon and Arcite begin to duel with each other over who should get Emily.",
        "Gather(palamon, 100) ∧ Gather(arcite, 100) ::: Theseus sentences both Palamon and Arcite to gather 100 men apiece.",
        "Fight(palamon, arcite) ::: The winner of the tournament fights against the other.",
        "Marry(winner, emily) ::: The winner of the tournament marries Emily.",
        "PrayTo(palamon, venus) ::: Palamon prays to Venus to make Emily his wife.",
        "PrayTo(emily, diana) ::: Emily prays to Diana to remain unmarried, or else to marry the one who truly loves her.",
        "PrayTo(arcite, mars) ::: Arcite prays to Mars for victory.",
        "∀x (SeriouslyInjured(x) → ¬InCombat(x)) ::: If any man becomes seriously injured, he is no longer in combat.",
        "∀x (InCombat(x) → ¬SeriouslyInjured(x)) ::: Because of the rules laid down by Theseus, there were almost no deaths on either side.",
        "Conclusion:",
        "Winner(palamon) ∧ Marry(winner, emily) ::: The winner of the tournament marries Emily."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "272": [
    {
      "id": 272,
      "context_id": "1b548ec72908f9447446bdb24e8c179df19a8999",
      "paragraph_id": 3,
      "paragraph": "Both Palamon and Arcite fight valiantly, but Palamon is wounded by a sword thrust from one of Arcite's men and is unhorsed. Theseus declares the fight to be over and Arcite thus wins the battle. But before he can claim Emily as his prize, through a divine intervention by Saturn, he is mortally injured by his horse throwing him off and then falling on him. As he dies, he tells Emily that she should marry Palamon, because he would make a good husband for her. Palamon marries Emily, and thus all three prayers are fulfilled.Theseus begins with a reference to the First Mover, the primum movens, or unmoved mover of Aristotelian philosophy creating the âGreat Chain of Loveâ, the kyndely enclyning, or natural inclination, that holds the universe together in Medieval cosmology. He describes the inevitability of death for all things at their proper time, using the destruction of an oak tree, a stone, and a river as examples, and listing all the classes of medieval society as universally subject to death. He then shifts to a discussion of the proper way to respond to this inevitability of death. Theseus maintains that, since every man must die when his time comes, that it is best to die with a good name and reputation, on good terms with his friends, and having died with honour. Theseus's comfort to Emily and Palamon is that Arcite died in just such a manner, having acquitted himself well in a feat of arms.",
      "question_template": "[[CANDIDATE_ANSWER]] is how Arcite is killed after the tournament.",
      "candidate_answers": [
        "Theseus declares the fight to be over and Arcite thus wins the battle.",
        "Theseus begins with a reference to the First Mover, the primum movens, or unmoved mover of Aristotelian philosophy creating the “Great Chain of Love”.",
        "He describes the inevitability of death for all things at their proper time.",
        "Theseus maintains that, since every man must die when his time comes, that it is best to die with a good name and reputation."
      ],
      "predicates": [
        "Wounded(x) ::: x is wounded.",
        "Unhorsed(x) ::: x is unhorsed.",
        "Wins(x, y) ::: x wins against y.",
        "MortallyInjured(x) ::: x is mortally injured.",
        "Tells(x, y, z) ::: x tells y to do z.",
        "Marries(x, y) ::: x marries y.",
        "GoodNameAndReputation(x) ::: x has a good name and reputation.",
        "Honour(x) ::: x has honour.",
        "AcquittedWell(x) ::: x acquitted himself well in a feat of arms.",
        "SubjectToDeath(x) ::: x is subject to death.",
        "InGoodTerms(x, y) ::: x is on good terms with y."
      ],
      "premises": [
        "Wounded(a_1) ∧ Unhorsed(a_1) ∧ Wins(a_2, a_1) ::: Palamon is wounded by a sword thrust from one of Arcite's men and is unhorsed, and Arcite wins the battle.",
        "MortallyInjured(a_2) ::: Arcite is mortally injured by his horse throwing him off and then falling on him.",
        "Tells(a_2, a_4, a_1) ::: Arcite tells Emily that she should marry Palamon.",
        "Marries(a_1, a_4) ::: Palamon marries Emily.",
        "GoodNameAndReputation(a_2) ∧ InGoodTerms(a_2, a_3) ∧ Honour(a_2) ::: It is best to die with a good name and reputation, on good terms with friends, and with honour.",
        "AcquittedWell(a_2) ::: Arcite died in just such a manner, having acquitted himself well in a feat of arms.",
        "∀x (SubjectToDeath(x) → (x = a_3 ∨ x = a_4 ∨ x = a_1 ∨ x = a_2)) ::: All classes of medieval society are universally subject to death.",
        "Conclusion:",
        "AcquittedWell(a_2) ::: Arcite's death is honorable as he acquitted himself well in a feat of arms.",
        "Tells(a_2, a_4, a_1) ::: Emily should marry Palamon as Arcite suggested."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "274": [
    {
      "id": 274,
      "context_id": "1b548ec72908f9447446bdb24e8c179df19a8999",
      "paragraph_id": 3,
      "paragraph": "Both Palamon and Arcite fight valiantly, but Palamon is wounded by a sword thrust from one of Arcite's men and is unhorsed. Theseus declares the fight to be over and Arcite thus wins the battle. But before he can claim Emily as his prize, through a divine intervention by Saturn, he is mortally injured by his horse throwing him off and then falling on him. As he dies, he tells Emily that she should marry Palamon, because he would make a good husband for her. Palamon marries Emily, and thus all three prayers are fulfilled.Theseus begins with a reference to the First Mover, the primum movens, or unmoved mover of Aristotelian philosophy creating the âGreat Chain of Loveâ, the kyndely enclyning, or natural inclination, that holds the universe together in Medieval cosmology. He describes the inevitability of death for all things at their proper time, using the destruction of an oak tree, a stone, and a river as examples, and listing all the classes of medieval society as universally subject to death. He then shifts to a discussion of the proper way to respond to this inevitability of death. Theseus maintains that, since every man must die when his time comes, that it is best to die with a good name and reputation, on good terms with his friends, and having died with honour. Theseus's comfort to Emily and Palamon is that Arcite died in just such a manner, having acquitted himself well in a feat of arms.",
      "question_template": "Theseus does [[CANDIDATE_ANSWER]] when he captures Palamon and Arcite.",
      "candidate_answers": [
        "Arcite",
        "Their father, Theseus"
      ],
      "predicates": [
        "Wounded(x) ::: x is wounded.",
        "Unhorsed(x) ::: x is unhorsed.",
        "Wins(x, y) ::: x wins against y.",
        "MortallyInjured(x) ::: x is mortally injured.",
        "Tells(x, y, z) ::: x tells y to do z.",
        "Marries(x, y) ::: x marries y.",
        "GoodNameAndReputation(x) ::: x has a good name and reputation.",
        "Honour(x) ::: x has honour.",
        "AcquittedWell(x) ::: x acquitted himself well in a feat of arms.",
        "SubjectToDeath(x) ::: x is subject to death.",
        "InGoodTerms(x, y) ::: x is on good terms with y."
      ],
      "premises": [
        "Wounded(a_1) ∧ Unhorsed(a_1) ∧ Wins(a_2, a_1) ::: Palamon is wounded by a sword thrust from one of Arcite's men and is unhorsed, and Arcite wins the battle.",
        "MortallyInjured(a_2) ::: Arcite is mortally injured by his horse throwing him off and then falling on him.",
        "Tells(a_2, a_4, a_1) ::: Arcite tells Emily that she should marry Palamon.",
        "Marries(a_1, a_4) ::: Palamon marries Emily.",
        "GoodNameAndReputation(a_2) ∧ InGoodTerms(a_2, a_3) ∧ Honour(a_2) ::: It is best to die with a good name and reputation, on good terms with friends, and with honour.",
        "AcquittedWell(a_2) ::: Arcite died in just such a manner, having acquitted himself well in a feat of arms.",
        "∀x (SubjectToDeath(x) → (x = a_3 ∨ x = a_4 ∨ x = a_1 ∨ x = a_2)) ::: All classes of medieval society are universally subject to death.",
        "Conclusion:",
        "AcquittedWell(a_2) ::: Arcite's death is honorable as he acquitted himself well in a feat of arms.",
        "Tells(a_2, a_4, a_1) ::: Emily should marry Palamon as Arcite suggested."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "281": [
    {
      "id": 281,
      "context_id": "1b548ec72908f9447446bdb24e8c179df19a8999",
      "paragraph_id": 2,
      "paragraph": "They begin to duel with each other over who should get Emily, but are thwarted by the arrival of Theseus, who sentences them both to gather 100 men apiece and to fight a mass judicial tournament, the winner of which is to marry Emily. The forces assemble. Palamon prays to Venus to make Emily his wife; Emily prays to Diana to remain unmarried, or else to marry the one who truly loves her; and Arcite prays to Mars for victory. Theseus lays down rules for the tournament so that, if any man becomes seriously injured, he must be dragged out of the battle and is no longer in combat. Because of this, the story seems to claim at the end that there were almost no deaths on either side.",
      "question_template": "[[CANDIDATE_ANSWER]] wounds Palamon with a sword.",
      "candidate_answers": [
        "The winner of which is to marry Emily"
      ],
      "predicates": [
        "Duel(x, y) ::: x and y are dueling with each other.",
        "Gather(x, n) ::: x gathers n men.",
        "Fight(x, y) ::: x fights in a tournament against y.",
        "Marry(x, y) ::: x marries y.",
        "PrayTo(x, y) ::: x prays to y.",
        "InCombat(x) ::: x is in combat.",
        "SeriouslyInjured(x) ::: x is seriously injured.",
        "Winner(x) ::: x is the winner of the tournament."
      ],
      "premises": [
        "Duel(palamon, arcite) ::: Palamon and Arcite begin to duel with each other over who should get Emily.",
        "Gather(palamon, 100) ∧ Gather(arcite, 100) ::: Theseus sentences both Palamon and Arcite to gather 100 men apiece.",
        "Fight(palamon, arcite) ::: The winner of the tournament fights against the other.",
        "Marry(winner, emily) ::: The winner of the tournament marries Emily.",
        "PrayTo(palamon, venus) ::: Palamon prays to Venus to make Emily his wife.",
        "PrayTo(emily, diana) ::: Emily prays to Diana to remain unmarried, or else to marry the one who truly loves her.",
        "PrayTo(arcite, mars) ::: Arcite prays to Mars for victory.",
        "∀x (SeriouslyInjured(x) → ¬InCombat(x)) ::: If any man becomes seriously injured, he is no longer in combat.",
        "∀x (InCombat(x) → ¬SeriouslyInjured(x)) ::: Because of the rules laid down by Theseus, there were almost no deaths on either side.",
        "Conclusion:",
        "Winner(palamon) ∧ Marry(winner, emily) ::: The winner of the tournament marries Emily."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "282": [
    {
      "id": 282,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 2,
      "paragraph": "Benjamin learns to walk in 1925; he declares it a miracle, after which he uses crutches in place of a wheelchair. On Thanksgiving 1930, Benjamin meets seven-year-old Daisy, whose grandmother lives in the nursing home. He and Daisy become good friends. Later, he accepts work on a tugboat captained by Mike Clark. Benjamin also meets Thomas Button, who does not reveal that he is Benjamin's father. In Autumn 1936, Benjamin leaves New Orleans for a long-term work engagement with the tugboat crew; Daisy later is accepted into a dance company in New York City under choreographer George Balanchine.",
      "question_template": "[[CANDIDATE_ANSWER]] wins the battle to marry Emily.",
      "candidate_answers": [
        "- Benjamin learns to walk in 1925",
        "- He declares it a miracle",
        "- He uses crutches in place of a wheelchair",
        "- Benjamin meets seven-year-old Daisy",
        "- He and Daisy become good friends",
        "- He accepts work on a tugboat captained by Mike Clark",
        "- Benjamin meets Thomas Button",
        "- Benjamin leaves New Orleans for a long-term work engagement with the tugboat crew",
        "- Daisy later is accepted into a dance company in New York City under choreographer George Balanchine"
      ],
      "predicates": [
        "LearnsToWalk(x, y) ::: x learns to walk in year y.",
        "Declares(x, y) ::: x declares y.",
        "UsesCrutches(x) ::: x uses crutches.",
        "Meets(x, y) ::: x meets y.",
        "BecomesGoodFriends(x, y) ::: x and y become good friends.",
        "AcceptsWork(x, y) ::: x accepts work on y.",
        "CaptainedBy(x, y) ::: y captains x.",
        "Reveals(x, y) ::: x reveals y.",
        "Leaves(x, y) ::: x leaves y for a long-term engagement.",
        "AcceptedInto(x, y) ::: x is accepted into y under z."
      ],
      "premises": [
        "LearnsToWalk(benjamin, 1925) ∧ Declares(benjamin, miracle) ∧ UsesCrutches(benjamin) ::: Benjamin learns to walk in 1925; he declares it a miracle, after which he uses crutches in place of a wheelchair.",
        "Meets(benjamin, daisy) ∧ Age(daisy, 7) ∧ LivesIn(daisy, nursing_home) ::: On Thanksgiving 1930, Benjamin meets seven-year-old Daisy, whose grandmother lives in the nursing home.",
        "BecomesGoodFriends(benjamin, daisy) ::: Benjamin and Daisy become good friends.",
        "AcceptsWork(benjamin, tugboat) ∧ CaptainedBy(tugboat, mike_clark) ::: Later, he accepts work on a tugboat captained by Mike Clark.",
        "Meets(benjamin, thomas_button) ∧ ¬Reveals(thomas_button, benjamin) ::: Benjamin also meets Thomas Button, who does not reveal that he is Benjamin's father.",
        "Leaves(benjamin, new_orleans) ∧ LongTermEngagement(benjamin, tugboat_crew) ::: In Autumn 1936, Benjamin leaves New Orleans for a long-term work engagement with the tugboat crew.",
        "AcceptedInto(daisy, dance_company) ∧ Under(dance_company, george_balanchine) ::: Daisy later is accepted into a dance company in New York City under choreographer George Balanchine."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 282,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 4,
      "paragraph": "In May 1945, Benjamin returns to New Orleans and reunites with Queenie. A few weeks later, he reunites with Daisy; they go out for dinner. Upon failing to seduce him afterward, she departs. Benjamin later reunites with Thomas Button, who, terminally ill, reveals he is Benjamin's father and wills Benjamin his button company and his estate.",
      "question_template": "[[CANDIDATE_ANSWER]] wins the battle to marry Emily.",
      "candidate_answers": [
        "- Benjamin returns to New Orleans and reunites with Queenie.",
        "- A few weeks later, he reunites with Daisy; they go out for dinner.",
        "- Upon failing to seduce him afterward, she departs.",
        "- Benjamin later reunites with Thomas Button, who, terminally ill, reveals he is Benjamin's father and wills Benjamin his button company and his estate."
      ],
      "predicates": [
        "Returns(x, y) ::: x returns to location y.",
        "Reunites(x, y) ::: x reunites with person y.",
        "GoesOutForDinner(x, y) ::: x goes out for dinner with person y.",
        "FailsToSeduce(x, y) ::: x fails to seduce person y.",
        "Departs(x) ::: x departs.",
        "Reveals(x, y) ::: x reveals information to person y.",
        "Wills(x, y, z) ::: x wills y to person z.",
        "TerminallyIll(x) ::: x is terminally ill.",
        "FatherOf(x, y) ::: x is the father of person y.",
        "Owns(x, y) ::: x owns y."
      ],
      "premises": [
        "Returns(benjamin, newOrleans) ::: Benjamin returns to New Orleans.",
        "Reunites(benjamin, queenie) ::: Benjamin reunites with Queenie.",
        "Reunites(benjamin, daisy) ::: Benjamin reunites with Daisy.",
        "GoesOutForDinner(benjamin, daisy) ::: Benjamin and Daisy go out for dinner.",
        "FailsToSeduce(daisy, benjamin) ::: Daisy fails to seduce Benjamin.",
        "Departs(daisy) ::: Daisy departs after failing to seduce Benjamin.",
        "Reunites(benjamin, thomasButton) ::: Benjamin reunites with Thomas Button.",
        "TerminallyIll(thomasButton) ::: Thomas Button is terminally ill.",
        "Reveals(thomasButton, benjamin) ::: Thomas Button reveals to Benjamin that he is his father.",
        "Wills(thomasButton, buttonCompany, benjamin) ::: Thomas Button wills his button company to Benjamin.",
        "Wills(thomasButton, estate, benjamin) ::: Thomas Button wills his estate to Benjamin.",
        "FatherOf(thomasButton, benjamin) ::: Thomas Button is the father of Benjamin."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 282,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 7,
      "paragraph": "Benjamin returns to Daisy in 1980. Now married, Daisy introduces him, as a family friend, to her husband and daughter. Daisy admits that he was right to leave; she could not have coped otherwise. She later visits Benjamin at his hotel, where they again share their passion for each other, then part once more.",
      "question_template": "[[CANDIDATE_ANSWER]] wins the battle to marry Emily.",
      "candidate_answers": [
        "- Benjamin returns to Daisy in 1980.",
        "- Daisy introduces him, as a family friend, to her husband and daughter.",
        "- Daisy admits that he was right to leave; she could not have coped otherwise.",
        "- She later visits Benjamin at his hotel, where they again share their passion for each other, then part once more."
      ],
      "predicates": [
        "Married(x) ::: x is married.",
        "Introduces(x, y, z) ::: x introduces y to z.",
        "Coped(x) ::: x coped with her situation.",
        "SharesPassion(x, y) ::: x shares passion with y.",
        "Visits(x, y) ::: x visits y.",
        "PartOnceMore(x, y) ::: x and y part once more."
      ],
      "premises": [
        "Married(daisy) ::: Daisy is now married.",
        "Introduces(daisy, benjamin, husband) ::: Daisy introduces Benjamin to her husband.",
        "Coped(daisy) → ¬Coped(daisy) ::: Daisy admits that she could not have coped otherwise.",
        "Visits(daisy, hotel) ::: Daisy visits Benjamin at his hotel.",
        "SharesPassion(benjamin, daisy) ::: Benjamin and Daisy share their passion for each other.",
        "PartOnceMore(benjamin, daisy) ::: Benjamin and Daisy part once more.",
        "Daisy acknowledges difficulty → ¬Coped(daisy) ::: Daisy's admission indicates that she acknowledges the difficulty of her situation without Benjamin."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "Visits(daisy, hotel) ∧ SharesPassion(benjamin, daisy) ∧ PartOnceMore(benjamin, daisy)"
      ]
    }
  ],
  "283": [
    {
      "id": 283,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 0,
      "paragraph": " In 2005, elderly Daisy Fuller is on her deathbed in a New Orleans hospital as Hurricane Katrina approaches; she asks her daughter, Caroline, to read aloud from the diary of Benjamin Button.",
      "question_template": "[[CANDIDATE_ANSWER]] finally marries Emily.",
      "candidate_answers": [
        "Caroline is Daisy's daughter"
      ],
      "predicates": [
        "OnDeathbed(a_1) ::: Daisy Fuller is on her deathbed.",
        "Asks(a_1, a_0, c_0) ::: Daisy asks her daughter, Caroline, to read aloud.",
        "Reads(a_0, a_2) ::: Caroline reads aloud from the diary of Benjamin Button.",
        "Approaches(c_1, b_0) ::: Hurricane Katrina approaches the New Orleans hospital."
      ],
      "premises": [
        "OnDeathbed(daisy) ∧ Approaches(hurricaneKatrina, newOrleansHospital) ::: In 2005, elderly Daisy Fuller is on her deathbed in a New Orleans hospital as Hurricane Katrina approaches.",
        "Asks(daisy, caroline, readDiary) ::: Daisy asks her daughter, Caroline, to read aloud from the diary of Benjamin Button.",
        "Reads(caroline, benjamin) ::: Caroline reads aloud from the diary of Benjamin Button."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 283,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 7,
      "paragraph": "Benjamin returns to Daisy in 1980. Now married, Daisy introduces him, as a family friend, to her husband and daughter. Daisy admits that he was right to leave; she could not have coped otherwise. She later visits Benjamin at his hotel, where they again share their passion for each other, then part once more.",
      "question_template": "[[CANDIDATE_ANSWER]] finally marries Emily.",
      "candidate_answers": [
        "Daisy introduces him, as a family friend, to her husband and daughter",
        "Daisy later visits Benjamin at his hotel"
      ],
      "predicates": [
        "Married(x) ::: x is married.",
        "Introduces(x, y, z) ::: x introduces y to z.",
        "Coped(x) ::: x coped with her situation.",
        "SharesPassion(x, y) ::: x shares passion with y.",
        "Visits(x, y) ::: x visits y.",
        "PartOnceMore(x, y) ::: x and y part once more."
      ],
      "premises": [
        "Married(daisy) ::: Daisy is now married.",
        "Introduces(daisy, benjamin, husband) ::: Daisy introduces Benjamin to her husband.",
        "Coped(daisy) → ¬Coped(daisy) ::: Daisy admits that she could not have coped otherwise.",
        "Visits(daisy, hotel) ::: Daisy visits Benjamin at his hotel.",
        "SharesPassion(benjamin, daisy) ::: Benjamin and Daisy share their passion for each other.",
        "PartOnceMore(benjamin, daisy) ::: Benjamin and Daisy part once more.",
        "Daisy acknowledges difficulty → ¬Coped(daisy) ::: Daisy's admission indicates that she acknowledges the difficulty of her situation without Benjamin."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "284": [
    {
      "id": 284,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 0,
      "paragraph": " In 2005, elderly Daisy Fuller is on her deathbed in a New Orleans hospital as Hurricane Katrina approaches; she asks her daughter, Caroline, to read aloud from the diary of Benjamin Button.",
      "question_template": "As Benjamin Button ages chronologically, [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Hurricane Katrina"
      ],
      "predicates": [
        "OnDeathbed(a_1) ::: Daisy Fuller is on her deathbed.",
        "Asks(a_1, a_0, c_0) ::: Daisy asks her daughter, Caroline, to read aloud.",
        "Reads(a_0, a_2) ::: Caroline reads aloud from the diary of Benjamin Button.",
        "Approaches(c_1, b_0) ::: Hurricane Katrina approaches the New Orleans hospital."
      ],
      "premises": [
        "OnDeathbed(daisy) ∧ Approaches(hurricaneKatrina, newOrleansHospital) ::: In 2005, elderly Daisy Fuller is on her deathbed in a New Orleans hospital as Hurricane Katrina approaches.",
        "Asks(daisy, caroline, readDiary) ::: Daisy asks her daughter, Caroline, to read aloud from the diary of Benjamin Button.",
        "Reads(caroline, benjamin) ::: Caroline reads aloud from the diary of Benjamin Button."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "285": [
    {
      "id": 285,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 2,
      "paragraph": "Benjamin learns to walk in 1925; he declares it a miracle, after which he uses crutches in place of a wheelchair. On Thanksgiving 1930, Benjamin meets seven-year-old Daisy, whose grandmother lives in the nursing home. He and Daisy become good friends. Later, he accepts work on a tugboat captained by Mike Clark. Benjamin also meets Thomas Button, who does not reveal that he is Benjamin's father. In Autumn 1936, Benjamin leaves New Orleans for a long-term work engagement with the tugboat crew; Daisy later is accepted into a dance company in New York City under choreographer George Balanchine.",
      "question_template": "Caroline is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Daisy later is accepted into a dance company in New York City under choreographer George Balanchine."
      ],
      "predicates": [
        "LearnsToWalk(x, y) ::: x learns to walk in year y.",
        "Declares(x, y) ::: x declares y.",
        "UsesCrutches(x) ::: x uses crutches.",
        "Meets(x, y) ::: x meets y.",
        "BecomesGoodFriends(x, y) ::: x and y become good friends.",
        "AcceptsWork(x, y) ::: x accepts work on y.",
        "CaptainedBy(x, y) ::: y captains x.",
        "Reveals(x, y) ::: x reveals y.",
        "Leaves(x, y) ::: x leaves y for a long-term engagement.",
        "AcceptedInto(x, y) ::: x is accepted into y under z."
      ],
      "premises": [
        "LearnsToWalk(benjamin, 1925) ∧ Declares(benjamin, miracle) ∧ UsesCrutches(benjamin) ::: Benjamin learns to walk in 1925; he declares it a miracle, after which he uses crutches in place of a wheelchair.",
        "Meets(benjamin, daisy) ∧ Age(daisy, 7) ∧ LivesIn(daisy, nursing_home) ::: On Thanksgiving 1930, Benjamin meets seven-year-old Daisy, whose grandmother lives in the nursing home.",
        "BecomesGoodFriends(benjamin, daisy) ::: Benjamin and Daisy become good friends.",
        "AcceptsWork(benjamin, tugboat) ∧ CaptainedBy(tugboat, mike_clark) ::: Later, he accepts work on a tugboat captained by Mike Clark.",
        "Meets(benjamin, thomas_button) ∧ ¬Reveals(thomas_button, benjamin) ::: Benjamin also meets Thomas Button, who does not reveal that he is Benjamin's father.",
        "Leaves(benjamin, new_orleans) ∧ LongTermEngagement(benjamin, tugboat_crew) ::: In Autumn 1936, Benjamin leaves New Orleans for a long-term work engagement with the tugboat crew.",
        "AcceptedInto(daisy, dance_company) ∧ Under(dance_company, george_balanchine) ::: Daisy later is accepted into a dance company in New York City under choreographer George Balanchine."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 285,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 5,
      "paragraph": "In 1947, Benjamin visits Daisy in New York unannounced but departs upon seeing that she has fallen in love with someone else. In 1954, Daisy's dancing career ends when her leg is crushed in an automobile accident in Paris. When Benjamin visits her, Daisy is amazed by his youthful appearance, but, frustrated by her injuries, she tells him to stay out of her life.",
      "question_template": "Caroline is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Daisy's dancing career"
      ],
      "predicates": [
        "Visits(x, y) ::: x visits y.",
        "InLocation(x, y) ::: x is in location y.",
        "Injured(x) ::: x is injured.",
        "DancingCareerEnds(x) ::: x's dancing career ends.",
        "Frustrated(x) ::: x is frustrated.",
        "YoungAppearance(x) ::: x has a youthful appearance.",
        "InLoveWith(x, y) ::: x is in love with y.",
        "Departs(x, y) ::: x departs from y."
      ],
      "premises": [
        "Visits(benjamin, daisy) ∧ InLocation(benjamin, new_york) ∧ ¬InLoveWith(daisy, benjamin) ::: In 1947, Benjamin visits Daisy in New York unannounced but departs upon seeing that she has fallen in love with someone else.",
        "Visits(daisy, benjamin) ∧ Injured(daisy) ∧ DancingCareerEnds(daisy) ::: In 1954, Daisy's dancing career ends when her leg is crushed in an automobile accident in Paris.",
        "Frustrated(daisy) ∧ YoungAppearance(benjamin) ∧ ¬InLocation(benjamin, daisy) ::: When Benjamin visits her, Daisy is amazed by his youthful appearance, but, frustrated by her injuries, she tells him to stay out of her life.",
        "DancingCareerEnds(daisy) → Injured(daisy) ::: Daisy's injuries lead to the end of her dancing career."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 285,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 6,
      "paragraph": "In spring 1962, Daisy returns to New Orleans and reunites with Benjamin. Now of comparable physical age, they fall in love and go sailing together. They return to learn that Queenie has died, then move in together. In 1967, Daisy, who has opened a ballet studio, tells Benjamin that she is pregnant; she gives birth to a girl, Caroline, in the spring of 1968. Believing he can not be a proper father to his daughter due to his reverse aging, Benjamin departs after selling his belongings, leaving a bank account book holding the proceeds behind for Daisy and Caroline; he travels alone during the 1970s.",
      "question_template": "Caroline is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Opened a ballet studio"
      ],
      "predicates": [
        "Returns(a_1, b_0) ::: Daisy returns to New Orleans.",
        "Reunites(a_1, a_2) ::: Daisy reunites with Benjamin.",
        "FallsInLove(a_1, a_2) ::: Daisy and Benjamin fall in love.",
        "Sails(a_1, a_2) ::: Daisy and Benjamin go sailing together.",
        "Dies(a_1) ::: Queenie has died.",
        "MovesIn(a_1, a_2) ::: Daisy and Benjamin move in together.",
        "Opens(a_1, c_0) ::: Daisy opens a ballet studio.",
        "Pregnant(a_1) ::: Daisy is pregnant.",
        "GivesBirth(a_1, a_2) ::: Daisy gives birth to Caroline.",
        "Departs(a_2) ::: Benjamin departs.",
        "SellsBelongings(a_2) ::: Benjamin sells his belongings.",
        "Leaves(a_2, b_0) ::: Benjamin leaves a bank account book for Daisy and Caroline.",
        "TravelsAlone(a_2) ::: Benjamin travels alone during the 1970s."
      ],
      "premises": [
        "Returns(a_1, b_0) ::: Daisy returns to New Orleans.",
        "Reunites(a_1, a_2) ::: Daisy reunites with Benjamin.",
        "FallsInLove(a_1, a_2) ::: Daisy and Benjamin fall in love.",
        "Sails(a_1, a_2) ::: Daisy and Benjamin go sailing together.",
        "Dies(a_1) ::: Queenie has died.",
        "MovesIn(a_1, a_2) ::: Daisy and Benjamin move in together.",
        "Opens(a_1, c_0) ::: Daisy opens a ballet studio.",
        "Pregnant(a_1) ::: Daisy is pregnant.",
        "GivesBirth(a_1, a_2) ::: Daisy gives birth to Caroline.",
        "Departs(a_2) ::: Benjamin departs after selling his belongings.",
        "SellsBelongings(a_2) ::: Benjamin sells his belongings.",
        "Leaves(a_2, b_0) ::: Benjamin leaves a bank account book for Daisy and Caroline.",
        "TravelsAlone(a_2) ::: Benjamin travels alone during the 1970s.",
        "Conclusion:",
        "FallsInLove(a_1, a_2) ::: Daisy and Benjamin's relationship evolves as they fall in love and start a family."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "287": [
    {
      "id": 287,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 2,
      "paragraph": "Benjamin learns to walk in 1925; he declares it a miracle, after which he uses crutches in place of a wheelchair. On Thanksgiving 1930, Benjamin meets seven-year-old Daisy, whose grandmother lives in the nursing home. He and Daisy become good friends. Later, he accepts work on a tugboat captained by Mike Clark. Benjamin also meets Thomas Button, who does not reveal that he is Benjamin's father. In Autumn 1936, Benjamin leaves New Orleans for a long-term work engagement with the tugboat crew; Daisy later is accepted into a dance company in New York City under choreographer George Balanchine.",
      "question_template": "Daisy partook in the profession of [[CANDIDATE_ANSWER]] before having a car accident.",
      "candidate_answers": [
        "Daisy",
        "Daisy later is accepted into a dance company in New York City under choreographer George Balanchine."
      ],
      "predicates": [
        "LearnsToWalk(x, y) ::: x learns to walk in year y.",
        "Declares(x, y) ::: x declares y.",
        "UsesCrutches(x) ::: x uses crutches.",
        "Meets(x, y) ::: x meets y.",
        "BecomesGoodFriends(x, y) ::: x and y become good friends.",
        "AcceptsWork(x, y) ::: x accepts work on y.",
        "CaptainedBy(x, y) ::: y captains x.",
        "Reveals(x, y) ::: x reveals y.",
        "Leaves(x, y) ::: x leaves y for a long-term engagement.",
        "AcceptedInto(x, y) ::: x is accepted into y under z."
      ],
      "premises": [
        "LearnsToWalk(benjamin, 1925) ∧ Declares(benjamin, miracle) ∧ UsesCrutches(benjamin) ::: Benjamin learns to walk in 1925; he declares it a miracle, after which he uses crutches in place of a wheelchair.",
        "Meets(benjamin, daisy) ∧ Age(daisy, 7) ∧ LivesIn(daisy, nursing_home) ::: On Thanksgiving 1930, Benjamin meets seven-year-old Daisy, whose grandmother lives in the nursing home.",
        "BecomesGoodFriends(benjamin, daisy) ::: Benjamin and Daisy become good friends.",
        "AcceptsWork(benjamin, tugboat) ∧ CaptainedBy(tugboat, mike_clark) ::: Later, he accepts work on a tugboat captained by Mike Clark.",
        "Meets(benjamin, thomas_button) ∧ ¬Reveals(thomas_button, benjamin) ::: Benjamin also meets Thomas Button, who does not reveal that he is Benjamin's father.",
        "Leaves(benjamin, new_orleans) ∧ LongTermEngagement(benjamin, tugboat_crew) ::: In Autumn 1936, Benjamin leaves New Orleans for a long-term work engagement with the tugboat crew.",
        "AcceptedInto(daisy, dance_company) ∧ Under(dance_company, george_balanchine) ::: Daisy later is accepted into a dance company in New York City under choreographer George Balanchine."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 287,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 4,
      "paragraph": "In May 1945, Benjamin returns to New Orleans and reunites with Queenie. A few weeks later, he reunites with Daisy; they go out for dinner. Upon failing to seduce him afterward, she departs. Benjamin later reunites with Thomas Button, who, terminally ill, reveals he is Benjamin's father and wills Benjamin his button company and his estate.",
      "question_template": "Daisy partook in the profession of [[CANDIDATE_ANSWER]] before having a car accident.",
      "candidate_answers": [
        "Queenie",
        "Daisy"
      ],
      "predicates": [
        "Returns(x, y) ::: x returns to location y.",
        "Reunites(x, y) ::: x reunites with person y.",
        "GoesOutForDinner(x, y) ::: x goes out for dinner with person y.",
        "FailsToSeduce(x, y) ::: x fails to seduce person y.",
        "Departs(x) ::: x departs.",
        "Reveals(x, y) ::: x reveals information to person y.",
        "Wills(x, y, z) ::: x wills y to person z.",
        "TerminallyIll(x) ::: x is terminally ill.",
        "FatherOf(x, y) ::: x is the father of person y.",
        "Owns(x, y) ::: x owns y."
      ],
      "premises": [
        "Returns(benjamin, newOrleans) ::: Benjamin returns to New Orleans.",
        "Reunites(benjamin, queenie) ::: Benjamin reunites with Queenie.",
        "Reunites(benjamin, daisy) ::: Benjamin reunites with Daisy.",
        "GoesOutForDinner(benjamin, daisy) ::: Benjamin and Daisy go out for dinner.",
        "FailsToSeduce(daisy, benjamin) ::: Daisy fails to seduce Benjamin.",
        "Departs(daisy) ::: Daisy departs after failing to seduce Benjamin.",
        "Reunites(benjamin, thomasButton) ::: Benjamin reunites with Thomas Button.",
        "TerminallyIll(thomasButton) ::: Thomas Button is terminally ill.",
        "Reveals(thomasButton, benjamin) ::: Thomas Button reveals to Benjamin that he is his father.",
        "Wills(thomasButton, buttonCompany, benjamin) ::: Thomas Button wills his button company to Benjamin.",
        "Wills(thomasButton, estate, benjamin) ::: Thomas Button wills his estate to Benjamin.",
        "FatherOf(thomasButton, benjamin) ::: Thomas Button is the father of Benjamin."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 287,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 5,
      "paragraph": "In 1947, Benjamin visits Daisy in New York unannounced but departs upon seeing that she has fallen in love with someone else. In 1954, Daisy's dancing career ends when her leg is crushed in an automobile accident in Paris. When Benjamin visits her, Daisy is amazed by his youthful appearance, but, frustrated by her injuries, she tells him to stay out of her life.",
      "question_template": "Daisy partook in the profession of [[CANDIDATE_ANSWER]] before having a car accident.",
      "candidate_answers": [
        "Daisy",
        "Daisy's dancing career ends when her leg is crushed in an automobile accident in Paris",
        "Daisy is amazed by his youthful appearance"
      ],
      "predicates": [
        "Visits(x, y) ::: x visits y.",
        "InLocation(x, y) ::: x is in location y.",
        "Injured(x) ::: x is injured.",
        "DancingCareerEnds(x) ::: x's dancing career ends.",
        "Frustrated(x) ::: x is frustrated.",
        "YoungAppearance(x) ::: x has a youthful appearance.",
        "InLoveWith(x, y) ::: x is in love with y.",
        "Departs(x, y) ::: x departs from y."
      ],
      "premises": [
        "Visits(benjamin, daisy) ∧ InLocation(benjamin, new_york) ∧ ¬InLoveWith(daisy, benjamin) ::: In 1947, Benjamin visits Daisy in New York unannounced but departs upon seeing that she has fallen in love with someone else.",
        "Visits(daisy, benjamin) ∧ Injured(daisy) ∧ DancingCareerEnds(daisy) ::: In 1954, Daisy's dancing career ends when her leg is crushed in an automobile accident in Paris.",
        "Frustrated(daisy) ∧ YoungAppearance(benjamin) ∧ ¬InLocation(benjamin, daisy) ::: When Benjamin visits her, Daisy is amazed by his youthful appearance, but, frustrated by her injuries, she tells him to stay out of her life.",
        "DancingCareerEnds(daisy) → Injured(daisy) ::: Daisy's injuries lead to the end of her dancing career."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 287,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 6,
      "paragraph": "In spring 1962, Daisy returns to New Orleans and reunites with Benjamin. Now of comparable physical age, they fall in love and go sailing together. They return to learn that Queenie has died, then move in together. In 1967, Daisy, who has opened a ballet studio, tells Benjamin that she is pregnant; she gives birth to a girl, Caroline, in the spring of 1968. Believing he can not be a proper father to his daughter due to his reverse aging, Benjamin departs after selling his belongings, leaving a bank account book holding the proceeds behind for Daisy and Caroline; he travels alone during the 1970s.",
      "question_template": "Daisy partook in the profession of [[CANDIDATE_ANSWER]] before having a car accident.",
      "candidate_answers": [
        "Daisy",
        "Reunites with Benjamin",
        "Falls in love and goes sailing together",
        "Tells Benjamin that she is pregnant",
        "Gives birth to a girl, Caroline"
      ],
      "predicates": [
        "Returns(a_1, b_0) ::: Daisy returns to New Orleans.",
        "Reunites(a_1, a_2) ::: Daisy reunites with Benjamin.",
        "FallsInLove(a_1, a_2) ::: Daisy and Benjamin fall in love.",
        "Sails(a_1, a_2) ::: Daisy and Benjamin go sailing together.",
        "Dies(a_1) ::: Queenie has died.",
        "MovesIn(a_1, a_2) ::: Daisy and Benjamin move in together.",
        "Opens(a_1, c_0) ::: Daisy opens a ballet studio.",
        "Pregnant(a_1) ::: Daisy is pregnant.",
        "GivesBirth(a_1, a_2) ::: Daisy gives birth to Caroline.",
        "Departs(a_2) ::: Benjamin departs.",
        "SellsBelongings(a_2) ::: Benjamin sells his belongings.",
        "Leaves(a_2, b_0) ::: Benjamin leaves a bank account book for Daisy and Caroline.",
        "TravelsAlone(a_2) ::: Benjamin travels alone during the 1970s."
      ],
      "premises": [
        "Returns(a_1, b_0) ::: Daisy returns to New Orleans.",
        "Reunites(a_1, a_2) ::: Daisy reunites with Benjamin.",
        "FallsInLove(a_1, a_2) ::: Daisy and Benjamin fall in love.",
        "Sails(a_1, a_2) ::: Daisy and Benjamin go sailing together.",
        "Dies(a_1) ::: Queenie has died.",
        "MovesIn(a_1, a_2) ::: Daisy and Benjamin move in together.",
        "Opens(a_1, c_0) ::: Daisy opens a ballet studio.",
        "Pregnant(a_1) ::: Daisy is pregnant.",
        "GivesBirth(a_1, a_2) ::: Daisy gives birth to Caroline.",
        "Departs(a_2) ::: Benjamin departs after selling his belongings.",
        "SellsBelongings(a_2) ::: Benjamin sells his belongings.",
        "Leaves(a_2, b_0) ::: Benjamin leaves a bank account book for Daisy and Caroline.",
        "TravelsAlone(a_2) ::: Benjamin travels alone during the 1970s.",
        "Conclusion:",
        "FallsInLove(a_1, a_2) ::: Daisy and Benjamin's relationship evolves as they fall in love and start a family."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "289": [
    {
      "id": 289,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 2,
      "paragraph": "Benjamin learns to walk in 1925; he declares it a miracle, after which he uses crutches in place of a wheelchair. On Thanksgiving 1930, Benjamin meets seven-year-old Daisy, whose grandmother lives in the nursing home. He and Daisy become good friends. Later, he accepts work on a tugboat captained by Mike Clark. Benjamin also meets Thomas Button, who does not reveal that he is Benjamin's father. In Autumn 1936, Benjamin leaves New Orleans for a long-term work engagement with the tugboat crew; Daisy later is accepted into a dance company in New York City under choreographer George Balanchine.",
      "question_template": "Benjamin has an affair with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "No relevant information found in the paragraph."
      ],
      "predicates": [
        "LearnsToWalk(x, y) ::: x learns to walk in year y.",
        "Declares(x, y) ::: x declares y.",
        "UsesCrutches(x) ::: x uses crutches.",
        "Meets(x, y) ::: x meets y.",
        "BecomesGoodFriends(x, y) ::: x and y become good friends.",
        "AcceptsWork(x, y) ::: x accepts work on y.",
        "CaptainedBy(x, y) ::: y captains x.",
        "Reveals(x, y) ::: x reveals y.",
        "Leaves(x, y) ::: x leaves y for a long-term engagement.",
        "AcceptedInto(x, y) ::: x is accepted into y under z."
      ],
      "premises": [
        "LearnsToWalk(benjamin, 1925) ∧ Declares(benjamin, miracle) ∧ UsesCrutches(benjamin) ::: Benjamin learns to walk in 1925; he declares it a miracle, after which he uses crutches in place of a wheelchair.",
        "Meets(benjamin, daisy) ∧ Age(daisy, 7) ∧ LivesIn(daisy, nursing_home) ::: On Thanksgiving 1930, Benjamin meets seven-year-old Daisy, whose grandmother lives in the nursing home.",
        "BecomesGoodFriends(benjamin, daisy) ::: Benjamin and Daisy become good friends.",
        "AcceptsWork(benjamin, tugboat) ∧ CaptainedBy(tugboat, mike_clark) ::: Later, he accepts work on a tugboat captained by Mike Clark.",
        "Meets(benjamin, thomas_button) ∧ ¬Reveals(thomas_button, benjamin) ::: Benjamin also meets Thomas Button, who does not reveal that he is Benjamin's father.",
        "Leaves(benjamin, new_orleans) ∧ LongTermEngagement(benjamin, tugboat_crew) ::: In Autumn 1936, Benjamin leaves New Orleans for a long-term work engagement with the tugboat crew.",
        "AcceptedInto(daisy, dance_company) ∧ Under(dance_company, george_balanchine) ::: Daisy later is accepted into a dance company in New York City under choreographer George Balanchine."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 289,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 6,
      "paragraph": "In spring 1962, Daisy returns to New Orleans and reunites with Benjamin. Now of comparable physical age, they fall in love and go sailing together. They return to learn that Queenie has died, then move in together. In 1967, Daisy, who has opened a ballet studio, tells Benjamin that she is pregnant; she gives birth to a girl, Caroline, in the spring of 1968. Believing he can not be a proper father to his daughter due to his reverse aging, Benjamin departs after selling his belongings, leaving a bank account book holding the proceeds behind for Daisy and Caroline; he travels alone during the 1970s.",
      "question_template": "Benjamin has an affair with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "He travels alone during the 1970s."
      ],
      "predicates": [
        "Returns(a_1, b_0) ::: Daisy returns to New Orleans.",
        "Reunites(a_1, a_2) ::: Daisy reunites with Benjamin.",
        "FallsInLove(a_1, a_2) ::: Daisy and Benjamin fall in love.",
        "Sails(a_1, a_2) ::: Daisy and Benjamin go sailing together.",
        "Dies(a_1) ::: Queenie has died.",
        "MovesIn(a_1, a_2) ::: Daisy and Benjamin move in together.",
        "Opens(a_1, c_0) ::: Daisy opens a ballet studio.",
        "Pregnant(a_1) ::: Daisy is pregnant.",
        "GivesBirth(a_1, a_2) ::: Daisy gives birth to Caroline.",
        "Departs(a_2) ::: Benjamin departs.",
        "SellsBelongings(a_2) ::: Benjamin sells his belongings.",
        "Leaves(a_2, b_0) ::: Benjamin leaves a bank account book for Daisy and Caroline.",
        "TravelsAlone(a_2) ::: Benjamin travels alone during the 1970s."
      ],
      "premises": [
        "Returns(a_1, b_0) ::: Daisy returns to New Orleans.",
        "Reunites(a_1, a_2) ::: Daisy reunites with Benjamin.",
        "FallsInLove(a_1, a_2) ::: Daisy and Benjamin fall in love.",
        "Sails(a_1, a_2) ::: Daisy and Benjamin go sailing together.",
        "Dies(a_1) ::: Queenie has died.",
        "MovesIn(a_1, a_2) ::: Daisy and Benjamin move in together.",
        "Opens(a_1, c_0) ::: Daisy opens a ballet studio.",
        "Pregnant(a_1) ::: Daisy is pregnant.",
        "GivesBirth(a_1, a_2) ::: Daisy gives birth to Caroline.",
        "Departs(a_2) ::: Benjamin departs after selling his belongings.",
        "SellsBelongings(a_2) ::: Benjamin sells his belongings.",
        "Leaves(a_2, b_0) ::: Benjamin leaves a bank account book for Daisy and Caroline.",
        "TravelsAlone(a_2) ::: Benjamin travels alone during the 1970s.",
        "Conclusion:",
        "FallsInLove(a_1, a_2) ::: Daisy and Benjamin's relationship evolves as they fall in love and start a family."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "290": [
    {
      "id": 290,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 6,
      "paragraph": "In spring 1962, Daisy returns to New Orleans and reunites with Benjamin. Now of comparable physical age, they fall in love and go sailing together. They return to learn that Queenie has died, then move in together. In 1967, Daisy, who has opened a ballet studio, tells Benjamin that she is pregnant; she gives birth to a girl, Caroline, in the spring of 1968. Believing he can not be a proper father to his daughter due to his reverse aging, Benjamin departs after selling his belongings, leaving a bank account book holding the proceeds behind for Daisy and Caroline; he travels alone during the 1970s.",
      "question_template": "Benjamin Button eventually dies [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "No relevant information found in the paragraph."
      ],
      "predicates": [
        "Returns(a_1, b_0) ::: Daisy returns to New Orleans.",
        "Reunites(a_1, a_2) ::: Daisy reunites with Benjamin.",
        "FallsInLove(a_1, a_2) ::: Daisy and Benjamin fall in love.",
        "Sails(a_1, a_2) ::: Daisy and Benjamin go sailing together.",
        "Dies(a_1) ::: Queenie has died.",
        "MovesIn(a_1, a_2) ::: Daisy and Benjamin move in together.",
        "Opens(a_1, c_0) ::: Daisy opens a ballet studio.",
        "Pregnant(a_1) ::: Daisy is pregnant.",
        "GivesBirth(a_1, a_2) ::: Daisy gives birth to Caroline.",
        "Departs(a_2) ::: Benjamin departs.",
        "SellsBelongings(a_2) ::: Benjamin sells his belongings.",
        "Leaves(a_2, b_0) ::: Benjamin leaves a bank account book for Daisy and Caroline.",
        "TravelsAlone(a_2) ::: Benjamin travels alone during the 1970s."
      ],
      "premises": [
        "Returns(a_1, b_0) ::: Daisy returns to New Orleans.",
        "Reunites(a_1, a_2) ::: Daisy reunites with Benjamin.",
        "FallsInLove(a_1, a_2) ::: Daisy and Benjamin fall in love.",
        "Sails(a_1, a_2) ::: Daisy and Benjamin go sailing together.",
        "Dies(a_1) ::: Queenie has died.",
        "MovesIn(a_1, a_2) ::: Daisy and Benjamin move in together.",
        "Opens(a_1, c_0) ::: Daisy opens a ballet studio.",
        "Pregnant(a_1) ::: Daisy is pregnant.",
        "GivesBirth(a_1, a_2) ::: Daisy gives birth to Caroline.",
        "Departs(a_2) ::: Benjamin departs after selling his belongings.",
        "SellsBelongings(a_2) ::: Benjamin sells his belongings.",
        "Leaves(a_2, b_0) ::: Benjamin leaves a bank account book for Daisy and Caroline.",
        "TravelsAlone(a_2) ::: Benjamin travels alone during the 1970s.",
        "Conclusion:",
        "FallsInLove(a_1, a_2) ::: Daisy and Benjamin's relationship evolves as they fall in love and start a family."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "291": [
    {
      "id": 291,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 4,
      "paragraph": "In May 1945, Benjamin returns to New Orleans and reunites with Queenie. A few weeks later, he reunites with Daisy; they go out for dinner. Upon failing to seduce him afterward, she departs. Benjamin later reunites with Thomas Button, who, terminally ill, reveals he is Benjamin's father and wills Benjamin his button company and his estate.",
      "question_template": "Benjamin Button is at the life stage of [[CANDIDATE_ANSWER]] when he passes away.",
      "candidate_answers": [
        "his button company",
        "his estate"
      ],
      "predicates": [
        "Returns(x, y) ::: x returns to location y.",
        "Reunites(x, y) ::: x reunites with person y.",
        "GoesOutForDinner(x, y) ::: x goes out for dinner with person y.",
        "FailsToSeduce(x, y) ::: x fails to seduce person y.",
        "Departs(x) ::: x departs.",
        "Reveals(x, y) ::: x reveals information to person y.",
        "Wills(x, y, z) ::: x wills y to person z.",
        "TerminallyIll(x) ::: x is terminally ill.",
        "FatherOf(x, y) ::: x is the father of person y.",
        "Owns(x, y) ::: x owns y."
      ],
      "premises": [
        "Returns(benjamin, newOrleans) ::: Benjamin returns to New Orleans.",
        "Reunites(benjamin, queenie) ::: Benjamin reunites with Queenie.",
        "Reunites(benjamin, daisy) ::: Benjamin reunites with Daisy.",
        "GoesOutForDinner(benjamin, daisy) ::: Benjamin and Daisy go out for dinner.",
        "FailsToSeduce(daisy, benjamin) ::: Daisy fails to seduce Benjamin.",
        "Departs(daisy) ::: Daisy departs after failing to seduce Benjamin.",
        "Reunites(benjamin, thomasButton) ::: Benjamin reunites with Thomas Button.",
        "TerminallyIll(thomasButton) ::: Thomas Button is terminally ill.",
        "Reveals(thomasButton, benjamin) ::: Thomas Button reveals to Benjamin that he is his father.",
        "Wills(thomasButton, buttonCompany, benjamin) ::: Thomas Button wills his button company to Benjamin.",
        "Wills(thomasButton, estate, benjamin) ::: Thomas Button wills his estate to Benjamin.",
        "FatherOf(thomasButton, benjamin) ::: Thomas Button is the father of Benjamin."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "292": [
    {
      "id": 292,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 0,
      "paragraph": " In 2005, elderly Daisy Fuller is on her deathbed in a New Orleans hospital as Hurricane Katrina approaches; she asks her daughter, Caroline, to read aloud from the diary of Benjamin Button.",
      "question_template": "Benjamin is [[CANDIDATE_ANSWER]] when he dies.",
      "candidate_answers": [
        "elderly Daisy Fuller"
      ],
      "predicates": [
        "OnDeathbed(a_1) ::: Daisy Fuller is on her deathbed.",
        "Asks(a_1, a_0, c_0) ::: Daisy asks her daughter, Caroline, to read aloud.",
        "Reads(a_0, a_2) ::: Caroline reads aloud from the diary of Benjamin Button.",
        "Approaches(c_1, b_0) ::: Hurricane Katrina approaches the New Orleans hospital."
      ],
      "premises": [
        "OnDeathbed(daisy) ∧ Approaches(hurricaneKatrina, newOrleansHospital) ::: In 2005, elderly Daisy Fuller is on her deathbed in a New Orleans hospital as Hurricane Katrina approaches.",
        "Asks(daisy, caroline, readDiary) ::: Daisy asks her daughter, Caroline, to read aloud from the diary of Benjamin Button.",
        "Reads(caroline, benjamin) ::: Caroline reads aloud from the diary of Benjamin Button."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 292,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 4,
      "paragraph": "In May 1945, Benjamin returns to New Orleans and reunites with Queenie. A few weeks later, he reunites with Daisy; they go out for dinner. Upon failing to seduce him afterward, she departs. Benjamin later reunites with Thomas Button, who, terminally ill, reveals he is Benjamin's father and wills Benjamin his button company and his estate.",
      "question_template": "Benjamin is [[CANDIDATE_ANSWER]] when he dies.",
      "candidate_answers": [
        "terminally ill",
        "Thomas Button"
      ],
      "predicates": [
        "Returns(x, y) ::: x returns to location y.",
        "Reunites(x, y) ::: x reunites with person y.",
        "GoesOutForDinner(x, y) ::: x goes out for dinner with person y.",
        "FailsToSeduce(x, y) ::: x fails to seduce person y.",
        "Departs(x) ::: x departs.",
        "Reveals(x, y) ::: x reveals information to person y.",
        "Wills(x, y, z) ::: x wills y to person z.",
        "TerminallyIll(x) ::: x is terminally ill.",
        "FatherOf(x, y) ::: x is the father of person y.",
        "Owns(x, y) ::: x owns y."
      ],
      "premises": [
        "Returns(benjamin, newOrleans) ::: Benjamin returns to New Orleans.",
        "Reunites(benjamin, queenie) ::: Benjamin reunites with Queenie.",
        "Reunites(benjamin, daisy) ::: Benjamin reunites with Daisy.",
        "GoesOutForDinner(benjamin, daisy) ::: Benjamin and Daisy go out for dinner.",
        "FailsToSeduce(daisy, benjamin) ::: Daisy fails to seduce Benjamin.",
        "Departs(daisy) ::: Daisy departs after failing to seduce Benjamin.",
        "Reunites(benjamin, thomasButton) ::: Benjamin reunites with Thomas Button.",
        "TerminallyIll(thomasButton) ::: Thomas Button is terminally ill.",
        "Reveals(thomasButton, benjamin) ::: Thomas Button reveals to Benjamin that he is his father.",
        "Wills(thomasButton, buttonCompany, benjamin) ::: Thomas Button wills his button company to Benjamin.",
        "Wills(thomasButton, estate, benjamin) ::: Thomas Button wills his estate to Benjamin.",
        "FatherOf(thomasButton, benjamin) ::: Thomas Button is the father of Benjamin."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 292,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 8,
      "paragraph": "In 1990, widowed Daisy is contacted by social workers who have found Benjamin窶馬ow physically a pre-teen. When she arrives, they explain that he was living in a condemned building and was taken to the hospital in poor physical condition, and that they found her name in his diary. The bewildered social workers also say he is displaying early signs of dementia. Daisy moves into the nursing home in 1997 and cares for Benjamin for the rest of his life. In the spring of 2003, Benjamin dies in Daisy's arms, physically an infant but chronologically 84 years of age. Having finally revealed the story of Caroline's father to her, Daisy dies as Hurricane Katrina approaches.",
      "question_template": "Benjamin is [[CANDIDATE_ANSWER]] when he dies.",
      "candidate_answers": [
        "Daisy",
        "Benjamin"
      ],
      "predicates": [
        "CaresFor(x, y) ::: x cares for y.",
        "PhysicallyInfant(x) ::: x is physically an infant.",
        "ChronologicallyAge(x, y) ::: x is chronologically y years old.",
        "DiesInArmsOf(x, y) ::: x dies in the arms of y.",
        "ContactedBy(x, y) ::: x is contacted by y.",
        "FoundInDiary(x, y) ::: x is found in the diary of y.",
        "LivingIn(x, y) ::: x is living in y.",
        "TakenToHospital(x) ::: x is taken to the hospital.",
        "DisplayingSignsOfDementia(x) ::: x is displaying early signs of dementia.",
        "MovesInto(x, y) ::: x moves into y.",
        "Year(x, y) ::: x is in the year y."
      ],
      "premises": [
        "ContactedBy(a_1, social_workers) ∧ FoundInDiary(a_2, a_1) ∧ LivingIn(a_2, b_2) ∧ TakenToHospital(a_2) ∧ DisplayingSignsOfDementia(a_2) ::: In 1990, Daisy is contacted by social workers who have found Benjamin living in a condemned building and was taken to the hospital in poor physical condition, and that they found her name in his diary.",
        "MovesInto(a_1, b_1) ∧ CaresFor(a_1, a_2) ::: Daisy moves into the nursing home in 1997 and cares for Benjamin for the rest of his life.",
        "DiesInArmsOf(a_2, a_1) ∧ PhysicallyInfant(a_2) ∧ ChronologicallyAge(a_2, 84) ::: In the spring of 2003, Benjamin dies in Daisy's arms, physically an infant but chronologically 84 years of age.",
        "Dies(a_1) ∧ Year(a_1, 2005) ::: Daisy dies as Hurricane Katrina approaches.",
        "Conclusion:",
        "CaresFor(a_1, a_2) ::: Daisy cares for Benjamin until his death."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "293": [
    {
      "id": 293,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 6,
      "paragraph": "In spring 1962, Daisy returns to New Orleans and reunites with Benjamin. Now of comparable physical age, they fall in love and go sailing together. They return to learn that Queenie has died, then move in together. In 1967, Daisy, who has opened a ballet studio, tells Benjamin that she is pregnant; she gives birth to a girl, Caroline, in the spring of 1968. Believing he can not be a proper father to his daughter due to his reverse aging, Benjamin departs after selling his belongings, leaving a bank account book holding the proceeds behind for Daisy and Caroline; he travels alone during the 1970s.",
      "question_template": "Benjamin eventually inherits [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Caroline"
      ],
      "predicates": [
        "Returns(a_1, b_0) ::: Daisy returns to New Orleans.",
        "Reunites(a_1, a_2) ::: Daisy reunites with Benjamin.",
        "FallsInLove(a_1, a_2) ::: Daisy and Benjamin fall in love.",
        "Sails(a_1, a_2) ::: Daisy and Benjamin go sailing together.",
        "Dies(a_1) ::: Queenie has died.",
        "MovesIn(a_1, a_2) ::: Daisy and Benjamin move in together.",
        "Opens(a_1, c_0) ::: Daisy opens a ballet studio.",
        "Pregnant(a_1) ::: Daisy is pregnant.",
        "GivesBirth(a_1, a_2) ::: Daisy gives birth to Caroline.",
        "Departs(a_2) ::: Benjamin departs.",
        "SellsBelongings(a_2) ::: Benjamin sells his belongings.",
        "Leaves(a_2, b_0) ::: Benjamin leaves a bank account book for Daisy and Caroline.",
        "TravelsAlone(a_2) ::: Benjamin travels alone during the 1970s."
      ],
      "premises": [
        "Returns(a_1, b_0) ::: Daisy returns to New Orleans.",
        "Reunites(a_1, a_2) ::: Daisy reunites with Benjamin.",
        "FallsInLove(a_1, a_2) ::: Daisy and Benjamin fall in love.",
        "Sails(a_1, a_2) ::: Daisy and Benjamin go sailing together.",
        "Dies(a_1) ::: Queenie has died.",
        "MovesIn(a_1, a_2) ::: Daisy and Benjamin move in together.",
        "Opens(a_1, c_0) ::: Daisy opens a ballet studio.",
        "Pregnant(a_1) ::: Daisy is pregnant.",
        "GivesBirth(a_1, a_2) ::: Daisy gives birth to Caroline.",
        "Departs(a_2) ::: Benjamin departs after selling his belongings.",
        "SellsBelongings(a_2) ::: Benjamin sells his belongings.",
        "Leaves(a_2, b_0) ::: Benjamin leaves a bank account book for Daisy and Caroline.",
        "TravelsAlone(a_2) ::: Benjamin travels alone during the 1970s.",
        "Conclusion:",
        "FallsInLove(a_1, a_2) ::: Daisy and Benjamin's relationship evolves as they fall in love and start a family."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 293,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 7,
      "paragraph": "Benjamin returns to Daisy in 1980. Now married, Daisy introduces him, as a family friend, to her husband and daughter. Daisy admits that he was right to leave; she could not have coped otherwise. She later visits Benjamin at his hotel, where they again share their passion for each other, then part once more.",
      "question_template": "Benjamin eventually inherits [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Daisy introduces him, as a family friend, to her husband and daughter."
      ],
      "predicates": [
        "Married(x) ::: x is married.",
        "Introduces(x, y, z) ::: x introduces y to z.",
        "Coped(x) ::: x coped with her situation.",
        "SharesPassion(x, y) ::: x shares passion with y.",
        "Visits(x, y) ::: x visits y.",
        "PartOnceMore(x, y) ::: x and y part once more."
      ],
      "premises": [
        "Married(daisy) ::: Daisy is now married.",
        "Introduces(daisy, benjamin, husband) ::: Daisy introduces Benjamin to her husband.",
        "Coped(daisy) → ¬Coped(daisy) ::: Daisy admits that she could not have coped otherwise.",
        "Visits(daisy, hotel) ::: Daisy visits Benjamin at his hotel.",
        "SharesPassion(benjamin, daisy) ::: Benjamin and Daisy share their passion for each other.",
        "PartOnceMore(benjamin, daisy) ::: Benjamin and Daisy part once more.",
        "Daisy acknowledges difficulty → ¬Coped(daisy) ::: Daisy's admission indicates that she acknowledges the difficulty of her situation without Benjamin."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 293,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 8,
      "paragraph": "In 1990, widowed Daisy is contacted by social workers who have found Benjamin窶馬ow physically a pre-teen. When she arrives, they explain that he was living in a condemned building and was taken to the hospital in poor physical condition, and that they found her name in his diary. The bewildered social workers also say he is displaying early signs of dementia. Daisy moves into the nursing home in 1997 and cares for Benjamin for the rest of his life. In the spring of 2003, Benjamin dies in Daisy's arms, physically an infant but chronologically 84 years of age. Having finally revealed the story of Caroline's father to her, Daisy dies as Hurricane Katrina approaches.",
      "question_template": "Benjamin eventually inherits [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Caroline"
      ],
      "predicates": [
        "CaresFor(x, y) ::: x cares for y.",
        "PhysicallyInfant(x) ::: x is physically an infant.",
        "ChronologicallyAge(x, y) ::: x is chronologically y years old.",
        "DiesInArmsOf(x, y) ::: x dies in the arms of y.",
        "ContactedBy(x, y) ::: x is contacted by y.",
        "FoundInDiary(x, y) ::: x is found in the diary of y.",
        "LivingIn(x, y) ::: x is living in y.",
        "TakenToHospital(x) ::: x is taken to the hospital.",
        "DisplayingSignsOfDementia(x) ::: x is displaying early signs of dementia.",
        "MovesInto(x, y) ::: x moves into y.",
        "Year(x, y) ::: x is in the year y."
      ],
      "premises": [
        "ContactedBy(a_1, social_workers) ∧ FoundInDiary(a_2, a_1) ∧ LivingIn(a_2, b_2) ∧ TakenToHospital(a_2) ∧ DisplayingSignsOfDementia(a_2) ::: In 1990, Daisy is contacted by social workers who have found Benjamin living in a condemned building and was taken to the hospital in poor physical condition, and that they found her name in his diary.",
        "MovesInto(a_1, b_1) ∧ CaresFor(a_1, a_2) ::: Daisy moves into the nursing home in 1997 and cares for Benjamin for the rest of his life.",
        "DiesInArmsOf(a_2, a_1) ∧ PhysicallyInfant(a_2) ∧ ChronologicallyAge(a_2, 84) ::: In the spring of 2003, Benjamin dies in Daisy's arms, physically an infant but chronologically 84 years of age.",
        "Dies(a_1) ∧ Year(a_1, 2005) ::: Daisy dies as Hurricane Katrina approaches.",
        "Conclusion:",
        "CaresFor(a_1, a_2) ::: Daisy cares for Benjamin until his death."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "294": [
    {
      "id": 294,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 1,
      "paragraph": "From the reading, it is revealed that on the evening of November 11, 1918, a boy was born with the appearance and physical maladies of an elderly man. The baby's mother died after giving birth, and the father, Thomas Button, abandons the infant on the porch of a nursing home. Queenie and Mr. \"Tizzy\" Weathers, workers at the nursing home, find the baby, and Queenie decides to care for him as her own.",
      "question_template": "[[CANDIDATE_ANSWER]] is on their deathbed at the beginning of the story.",
      "candidate_answers": [
        "Queenie"
      ],
      "predicates": [
        "BornOnNovember11_1918(x) ::: x is born on the evening of November 11, 1918.",
        "ElderlyAppearance(x) ::: x has the appearance and physical maladies of an elderly man.",
        "MotherDiedAfterBirth(x) ::: x's mother died after giving birth.",
        "Abandoned(x) ::: x is abandoned by the father.",
        "CaresFor(x, y) ::: x cares for y as their own.",
        "Finds(x, y) ::: x finds y.",
        "WorkerAtNursingHome(x) ::: x is a worker at the nursing home.",
        "DecidesToCareFor(x, y) ::: x decides to care for y."
      ],
      "premises": [
        "BornOnNovember11_1918(baby) ∧ ElderlyAppearance(baby) ∧ MotherDiedAfterBirth(baby) ∧ Abandoned(baby) ::: A boy was born on the evening of November 11, 1918, with the appearance and physical maladies of an elderly man, and his mother died after giving birth, leading to his abandonment.",
        "∃x (Finds(queenie, x) ∧ Finds(tizzy, x) ∧ Abandoned(x)) ::: Queenie and Mr. \"Tizzy\" Weathers find the abandoned baby.",
        "WorkerAtNursingHome(queenie) ∧ WorkerAtNursingHome(tizzy) ::: Queenie and Mr. \"Tizzy\" Weathers are workers at the nursing home.",
        "DecidesToCareFor(queenie, baby) ::: Queenie decides to care for the baby as her own."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 294,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 3,
      "paragraph": "In 1941, Benjamin is in Murmansk, where he begins having an affair with Elizabeth Abbott, wife of the British Trade Minister. That December, Japan attacks Pearl Harbor, thrusting the United States into World War II. Mike volunteers the boat for the U.S. Navy; the crew is assigned to salvage duties. During a patrol, the tugboat finds a sunken U.S. transport and the bodies of many American troops. A German submarine surfaces; Mike steers the tugboat full speed towards it while a German gunner fires on the tugboat, killing most of the crew, including Mike. The tugboat rams the submarine, causing it to explode, sinking both vessels. Benjamin and another crewman are rescued by U.S. Navy ships the next day.",
      "question_template": "[[CANDIDATE_ANSWER]] is on their deathbed at the beginning of the story.",
      "candidate_answers": [
        "Elizabeth Abbott"
      ],
      "predicates": [
        "InLocation(x, y) ::: x is in location y.",
        "Affair(x, y) ::: x has an affair with y.",
        "Volunteers(x, y) ::: x volunteers y for a specific purpose.",
        "AssignedTo(x, y) ::: x is assigned to y.",
        "Finds(x, y) ::: x finds y.",
        "Steers(x, y) ::: x steers y.",
        "FiresOn(x, y) ::: x fires on y.",
        "Kills(x, y) ::: x kills y.",
        "Rams(x, y) ::: x rams y.",
        "Explodes(x) ::: x explodes.",
        "Sinks(x) ::: x sinks.",
        "Rescued(x, y) ::: x is rescued by y."
      ],
      "premises": [
        "InLocation(benjamin, murmansk) ∧ Affair(benjamin, elizabeth) ∧ InLocation(elizabeth, murmansk) ∧ InLocation(benjamin, worldWarII) ::: Benjamin is in Murmansk, where he begins having an affair with Elizabeth Abbott during World War II.",
        "Volunteers(mike, tugboat) ∧ AssignedTo(crew, salvageDuties) ::: Mike volunteers the boat for the U.S. Navy; the crew is assigned to salvage duties.",
        "Finds(tugboat, sunkenTransport) ∧ Finds(tugboat, bodiesOfTroops) ::: During a patrol, the tugboat finds a sunken U.S. transport and the bodies of many American troops.",
        "InLocation(mike, tugboat) ∧ InLocation(germanSubmarine, ocean) ::: Mike is in the tugboat while a German submarine is in the ocean.",
        "Steers(mike, tugboat) ∧ FiresOn(germanGunner, tugboat) ∧ Kills(germanGunner, crew) ::: Mike steers the tugboat full speed towards the German submarine while a German gunner fires on the tugboat, killing most of the crew.",
        "Rams(tugboat, germanSubmarine) ∧ Explodes(germanSubmarine) ∧ Sinks(tugboat) ::: The tugboat rams the submarine, causing it to explode and sinking both vessels.",
        "Rescued(benjamin, uSNavyShips) ∧ Rescued(crewman, uSNavyShips) ::: Benjamin and another crewman are rescued by U.S. Navy ships the next day."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 294,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 4,
      "paragraph": "In May 1945, Benjamin returns to New Orleans and reunites with Queenie. A few weeks later, he reunites with Daisy; they go out for dinner. Upon failing to seduce him afterward, she departs. Benjamin later reunites with Thomas Button, who, terminally ill, reveals he is Benjamin's father and wills Benjamin his button company and his estate.",
      "question_template": "[[CANDIDATE_ANSWER]] is on their deathbed at the beginning of the story.",
      "candidate_answers": [
        "Queenie"
      ],
      "predicates": [
        "Returns(x, y) ::: x returns to location y.",
        "Reunites(x, y) ::: x reunites with person y.",
        "GoesOutForDinner(x, y) ::: x goes out for dinner with person y.",
        "FailsToSeduce(x, y) ::: x fails to seduce person y.",
        "Departs(x) ::: x departs.",
        "Reveals(x, y) ::: x reveals information to person y.",
        "Wills(x, y, z) ::: x wills y to person z.",
        "TerminallyIll(x) ::: x is terminally ill.",
        "FatherOf(x, y) ::: x is the father of person y.",
        "Owns(x, y) ::: x owns y."
      ],
      "premises": [
        "Returns(benjamin, newOrleans) ::: Benjamin returns to New Orleans.",
        "Reunites(benjamin, queenie) ::: Benjamin reunites with Queenie.",
        "Reunites(benjamin, daisy) ::: Benjamin reunites with Daisy.",
        "GoesOutForDinner(benjamin, daisy) ::: Benjamin and Daisy go out for dinner.",
        "FailsToSeduce(daisy, benjamin) ::: Daisy fails to seduce Benjamin.",
        "Departs(daisy) ::: Daisy departs after failing to seduce Benjamin.",
        "Reunites(benjamin, thomasButton) ::: Benjamin reunites with Thomas Button.",
        "TerminallyIll(thomasButton) ::: Thomas Button is terminally ill.",
        "Reveals(thomasButton, benjamin) ::: Thomas Button reveals to Benjamin that he is his father.",
        "Wills(thomasButton, buttonCompany, benjamin) ::: Thomas Button wills his button company to Benjamin.",
        "Wills(thomasButton, estate, benjamin) ::: Thomas Button wills his estate to Benjamin.",
        "FatherOf(thomasButton, benjamin) ::: Thomas Button is the father of Benjamin."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 294,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 6,
      "paragraph": "In spring 1962, Daisy returns to New Orleans and reunites with Benjamin. Now of comparable physical age, they fall in love and go sailing together. They return to learn that Queenie has died, then move in together. In 1967, Daisy, who has opened a ballet studio, tells Benjamin that she is pregnant; she gives birth to a girl, Caroline, in the spring of 1968. Believing he can not be a proper father to his daughter due to his reverse aging, Benjamin departs after selling his belongings, leaving a bank account book holding the proceeds behind for Daisy and Caroline; he travels alone during the 1970s.",
      "question_template": "[[CANDIDATE_ANSWER]] is on their deathbed at the beginning of the story.",
      "candidate_answers": [
        "Daisy",
        "Queenie",
        "Daisy, who has opened a ballet studio"
      ],
      "predicates": [
        "Returns(a_1, b_0) ::: Daisy returns to New Orleans.",
        "Reunites(a_1, a_2) ::: Daisy reunites with Benjamin.",
        "FallsInLove(a_1, a_2) ::: Daisy and Benjamin fall in love.",
        "Sails(a_1, a_2) ::: Daisy and Benjamin go sailing together.",
        "Dies(a_1) ::: Queenie has died.",
        "MovesIn(a_1, a_2) ::: Daisy and Benjamin move in together.",
        "Opens(a_1, c_0) ::: Daisy opens a ballet studio.",
        "Pregnant(a_1) ::: Daisy is pregnant.",
        "GivesBirth(a_1, a_2) ::: Daisy gives birth to Caroline.",
        "Departs(a_2) ::: Benjamin departs.",
        "SellsBelongings(a_2) ::: Benjamin sells his belongings.",
        "Leaves(a_2, b_0) ::: Benjamin leaves a bank account book for Daisy and Caroline.",
        "TravelsAlone(a_2) ::: Benjamin travels alone during the 1970s."
      ],
      "premises": [
        "Returns(a_1, b_0) ::: Daisy returns to New Orleans.",
        "Reunites(a_1, a_2) ::: Daisy reunites with Benjamin.",
        "FallsInLove(a_1, a_2) ::: Daisy and Benjamin fall in love.",
        "Sails(a_1, a_2) ::: Daisy and Benjamin go sailing together.",
        "Dies(a_1) ::: Queenie has died.",
        "MovesIn(a_1, a_2) ::: Daisy and Benjamin move in together.",
        "Opens(a_1, c_0) ::: Daisy opens a ballet studio.",
        "Pregnant(a_1) ::: Daisy is pregnant.",
        "GivesBirth(a_1, a_2) ::: Daisy gives birth to Caroline.",
        "Departs(a_2) ::: Benjamin departs after selling his belongings.",
        "SellsBelongings(a_2) ::: Benjamin sells his belongings.",
        "Leaves(a_2, b_0) ::: Benjamin leaves a bank account book for Daisy and Caroline.",
        "TravelsAlone(a_2) ::: Benjamin travels alone during the 1970s.",
        "Conclusion:",
        "FallsInLove(a_1, a_2) ::: Daisy and Benjamin's relationship evolves as they fall in love and start a family."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "297": [
    {
      "id": 297,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 2,
      "paragraph": "Benjamin learns to walk in 1925; he declares it a miracle, after which he uses crutches in place of a wheelchair. On Thanksgiving 1930, Benjamin meets seven-year-old Daisy, whose grandmother lives in the nursing home. He and Daisy become good friends. Later, he accepts work on a tugboat captained by Mike Clark. Benjamin also meets Thomas Button, who does not reveal that he is Benjamin's father. In Autumn 1936, Benjamin leaves New Orleans for a long-term work engagement with the tugboat crew; Daisy later is accepted into a dance company in New York City under choreographer George Balanchine.",
      "question_template": "The main character's name is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Daisy",
        "Daisy later is accepted into a dance company in New York City under choreographer George Balanchine."
      ],
      "predicates": [
        "LearnsToWalk(x, y) ::: x learns to walk in year y.",
        "Declares(x, y) ::: x declares y.",
        "UsesCrutches(x) ::: x uses crutches.",
        "Meets(x, y) ::: x meets y.",
        "BecomesGoodFriends(x, y) ::: x and y become good friends.",
        "AcceptsWork(x, y) ::: x accepts work on y.",
        "CaptainedBy(x, y) ::: y captains x.",
        "Reveals(x, y) ::: x reveals y.",
        "Leaves(x, y) ::: x leaves y for a long-term engagement.",
        "AcceptedInto(x, y) ::: x is accepted into y under z."
      ],
      "premises": [
        "LearnsToWalk(benjamin, 1925) ∧ Declares(benjamin, miracle) ∧ UsesCrutches(benjamin) ::: Benjamin learns to walk in 1925; he declares it a miracle, after which he uses crutches in place of a wheelchair.",
        "Meets(benjamin, daisy) ∧ Age(daisy, 7) ∧ LivesIn(daisy, nursing_home) ::: On Thanksgiving 1930, Benjamin meets seven-year-old Daisy, whose grandmother lives in the nursing home.",
        "BecomesGoodFriends(benjamin, daisy) ::: Benjamin and Daisy become good friends.",
        "AcceptsWork(benjamin, tugboat) ∧ CaptainedBy(tugboat, mike_clark) ::: Later, he accepts work on a tugboat captained by Mike Clark.",
        "Meets(benjamin, thomas_button) ∧ ¬Reveals(thomas_button, benjamin) ::: Benjamin also meets Thomas Button, who does not reveal that he is Benjamin's father.",
        "Leaves(benjamin, new_orleans) ∧ LongTermEngagement(benjamin, tugboat_crew) ::: In Autumn 1936, Benjamin leaves New Orleans for a long-term work engagement with the tugboat crew.",
        "AcceptedInto(daisy, dance_company) ∧ Under(dance_company, george_balanchine) ::: Daisy later is accepted into a dance company in New York City under choreographer George Balanchine."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 297,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 4,
      "paragraph": "In May 1945, Benjamin returns to New Orleans and reunites with Queenie. A few weeks later, he reunites with Daisy; they go out for dinner. Upon failing to seduce him afterward, she departs. Benjamin later reunites with Thomas Button, who, terminally ill, reveals he is Benjamin's father and wills Benjamin his button company and his estate.",
      "question_template": "The main character's name is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Queenie",
        "Daisy"
      ],
      "predicates": [
        "Returns(x, y) ::: x returns to location y.",
        "Reunites(x, y) ::: x reunites with person y.",
        "GoesOutForDinner(x, y) ::: x goes out for dinner with person y.",
        "FailsToSeduce(x, y) ::: x fails to seduce person y.",
        "Departs(x) ::: x departs.",
        "Reveals(x, y) ::: x reveals information to person y.",
        "Wills(x, y, z) ::: x wills y to person z.",
        "TerminallyIll(x) ::: x is terminally ill.",
        "FatherOf(x, y) ::: x is the father of person y.",
        "Owns(x, y) ::: x owns y."
      ],
      "premises": [
        "Returns(benjamin, newOrleans) ::: Benjamin returns to New Orleans.",
        "Reunites(benjamin, queenie) ::: Benjamin reunites with Queenie.",
        "Reunites(benjamin, daisy) ::: Benjamin reunites with Daisy.",
        "GoesOutForDinner(benjamin, daisy) ::: Benjamin and Daisy go out for dinner.",
        "FailsToSeduce(daisy, benjamin) ::: Daisy fails to seduce Benjamin.",
        "Departs(daisy) ::: Daisy departs after failing to seduce Benjamin.",
        "Reunites(benjamin, thomasButton) ::: Benjamin reunites with Thomas Button.",
        "TerminallyIll(thomasButton) ::: Thomas Button is terminally ill.",
        "Reveals(thomasButton, benjamin) ::: Thomas Button reveals to Benjamin that he is his father.",
        "Wills(thomasButton, buttonCompany, benjamin) ::: Thomas Button wills his button company to Benjamin.",
        "Wills(thomasButton, estate, benjamin) ::: Thomas Button wills his estate to Benjamin.",
        "FatherOf(thomasButton, benjamin) ::: Thomas Button is the father of Benjamin."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "298": [
    {
      "id": 298,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 4,
      "paragraph": "In May 1945, Benjamin returns to New Orleans and reunites with Queenie. A few weeks later, he reunites with Daisy; they go out for dinner. Upon failing to seduce him afterward, she departs. Benjamin later reunites with Thomas Button, who, terminally ill, reveals he is Benjamin's father and wills Benjamin his button company and his estate.",
      "question_template": "Benjamin meets [[CANDIDATE_ANSWER]] on Thanksgiving.",
      "candidate_answers": [
        "New Orleans"
      ],
      "predicates": [
        "Returns(x, y) ::: x returns to location y.",
        "Reunites(x, y) ::: x reunites with person y.",
        "GoesOutForDinner(x, y) ::: x goes out for dinner with person y.",
        "FailsToSeduce(x, y) ::: x fails to seduce person y.",
        "Departs(x) ::: x departs.",
        "Reveals(x, y) ::: x reveals information to person y.",
        "Wills(x, y, z) ::: x wills y to person z.",
        "TerminallyIll(x) ::: x is terminally ill.",
        "FatherOf(x, y) ::: x is the father of person y.",
        "Owns(x, y) ::: x owns y."
      ],
      "premises": [
        "Returns(benjamin, newOrleans) ::: Benjamin returns to New Orleans.",
        "Reunites(benjamin, queenie) ::: Benjamin reunites with Queenie.",
        "Reunites(benjamin, daisy) ::: Benjamin reunites with Daisy.",
        "GoesOutForDinner(benjamin, daisy) ::: Benjamin and Daisy go out for dinner.",
        "FailsToSeduce(daisy, benjamin) ::: Daisy fails to seduce Benjamin.",
        "Departs(daisy) ::: Daisy departs after failing to seduce Benjamin.",
        "Reunites(benjamin, thomasButton) ::: Benjamin reunites with Thomas Button.",
        "TerminallyIll(thomasButton) ::: Thomas Button is terminally ill.",
        "Reveals(thomasButton, benjamin) ::: Thomas Button reveals to Benjamin that he is his father.",
        "Wills(thomasButton, buttonCompany, benjamin) ::: Thomas Button wills his button company to Benjamin.",
        "Wills(thomasButton, estate, benjamin) ::: Thomas Button wills his estate to Benjamin.",
        "FatherOf(thomasButton, benjamin) ::: Thomas Button is the father of Benjamin."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "299": [
    {
      "id": 299,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 6,
      "paragraph": "In spring 1962, Daisy returns to New Orleans and reunites with Benjamin. Now of comparable physical age, they fall in love and go sailing together. They return to learn that Queenie has died, then move in together. In 1967, Daisy, who has opened a ballet studio, tells Benjamin that she is pregnant; she gives birth to a girl, Caroline, in the spring of 1968. Believing he can not be a proper father to his daughter due to his reverse aging, Benjamin departs after selling his belongings, leaving a bank account book holding the proceeds behind for Daisy and Caroline; he travels alone during the 1970s.",
      "question_template": "Benjamin has an affair with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- They go sailing together.",
        "- They return to learn that Queenie has died."
      ],
      "predicates": [
        "Returns(a_1, b_0) ::: Daisy returns to New Orleans.",
        "Reunites(a_1, a_2) ::: Daisy reunites with Benjamin.",
        "FallsInLove(a_1, a_2) ::: Daisy and Benjamin fall in love.",
        "Sails(a_1, a_2) ::: Daisy and Benjamin go sailing together.",
        "Dies(a_1) ::: Queenie has died.",
        "MovesIn(a_1, a_2) ::: Daisy and Benjamin move in together.",
        "Opens(a_1, c_0) ::: Daisy opens a ballet studio.",
        "Pregnant(a_1) ::: Daisy is pregnant.",
        "GivesBirth(a_1, a_2) ::: Daisy gives birth to Caroline.",
        "Departs(a_2) ::: Benjamin departs.",
        "SellsBelongings(a_2) ::: Benjamin sells his belongings.",
        "Leaves(a_2, b_0) ::: Benjamin leaves a bank account book for Daisy and Caroline.",
        "TravelsAlone(a_2) ::: Benjamin travels alone during the 1970s."
      ],
      "premises": [
        "Returns(a_1, b_0) ::: Daisy returns to New Orleans.",
        "Reunites(a_1, a_2) ::: Daisy reunites with Benjamin.",
        "FallsInLove(a_1, a_2) ::: Daisy and Benjamin fall in love.",
        "Sails(a_1, a_2) ::: Daisy and Benjamin go sailing together.",
        "Dies(a_1) ::: Queenie has died.",
        "MovesIn(a_1, a_2) ::: Daisy and Benjamin move in together.",
        "Opens(a_1, c_0) ::: Daisy opens a ballet studio.",
        "Pregnant(a_1) ::: Daisy is pregnant.",
        "GivesBirth(a_1, a_2) ::: Daisy gives birth to Caroline.",
        "Departs(a_2) ::: Benjamin departs after selling his belongings.",
        "SellsBelongings(a_2) ::: Benjamin sells his belongings.",
        "Leaves(a_2, b_0) ::: Benjamin leaves a bank account book for Daisy and Caroline.",
        "TravelsAlone(a_2) ::: Benjamin travels alone during the 1970s.",
        "Conclusion:",
        "FallsInLove(a_1, a_2) ::: Daisy and Benjamin's relationship evolves as they fall in love and start a family."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 299,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 7,
      "paragraph": "Benjamin returns to Daisy in 1980. Now married, Daisy introduces him, as a family friend, to her husband and daughter. Daisy admits that he was right to leave; she could not have coped otherwise. She later visits Benjamin at his hotel, where they again share their passion for each other, then part once more.",
      "question_template": "Benjamin has an affair with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Share their passion for each other"
      ],
      "predicates": [
        "Married(x) ::: x is married.",
        "Introduces(x, y, z) ::: x introduces y to z.",
        "Coped(x) ::: x coped with her situation.",
        "SharesPassion(x, y) ::: x shares passion with y.",
        "Visits(x, y) ::: x visits y.",
        "PartOnceMore(x, y) ::: x and y part once more."
      ],
      "premises": [
        "Married(daisy) ::: Daisy is now married.",
        "Introduces(daisy, benjamin, husband) ::: Daisy introduces Benjamin to her husband.",
        "Coped(daisy) → ¬Coped(daisy) ::: Daisy admits that she could not have coped otherwise.",
        "Visits(daisy, hotel) ::: Daisy visits Benjamin at his hotel.",
        "SharesPassion(benjamin, daisy) ::: Benjamin and Daisy share their passion for each other.",
        "PartOnceMore(benjamin, daisy) ::: Benjamin and Daisy part once more.",
        "Daisy acknowledges difficulty → ¬Coped(daisy) ::: Daisy's admission indicates that she acknowledges the difficulty of her situation without Benjamin."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "301": [
    {
      "id": 301,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 0,
      "paragraph": " In 2005, elderly Daisy Fuller is on her deathbed in a New Orleans hospital as Hurricane Katrina approaches; she asks her daughter, Caroline, to read aloud from the diary of Benjamin Button.",
      "question_template": "Benjamin and Daisy do [[CANDIDATE_ANSWER]] soon after falling in love.",
      "candidate_answers": [
        "Caroline",
        "Daisy Fuller",
        "Benjamin Button"
      ],
      "predicates": [
        "OnDeathbed(a_1) ::: Daisy Fuller is on her deathbed.",
        "Asks(a_1, a_0, c_0) ::: Daisy asks her daughter, Caroline, to read aloud.",
        "Reads(a_0, a_2) ::: Caroline reads aloud from the diary of Benjamin Button.",
        "Approaches(c_1, b_0) ::: Hurricane Katrina approaches the New Orleans hospital."
      ],
      "premises": [
        "OnDeathbed(daisy) ∧ Approaches(hurricaneKatrina, newOrleansHospital) ::: In 2005, elderly Daisy Fuller is on her deathbed in a New Orleans hospital as Hurricane Katrina approaches.",
        "Asks(daisy, caroline, readDiary) ::: Daisy asks her daughter, Caroline, to read aloud from the diary of Benjamin Button.",
        "Reads(caroline, benjamin) ::: Caroline reads aloud from the diary of Benjamin Button."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 301,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 1,
      "paragraph": "From the reading, it is revealed that on the evening of November 11, 1918, a boy was born with the appearance and physical maladies of an elderly man. The baby's mother died after giving birth, and the father, Thomas Button, abandons the infant on the porch of a nursing home. Queenie and Mr. \"Tizzy\" Weathers, workers at the nursing home, find the baby, and Queenie decides to care for him as her own.",
      "question_template": "Benjamin and Daisy do [[CANDIDATE_ANSWER]] soon after falling in love.",
      "candidate_answers": [
        "Thomas Button"
      ],
      "predicates": [
        "BornOnNovember11_1918(x) ::: x is born on the evening of November 11, 1918.",
        "ElderlyAppearance(x) ::: x has the appearance and physical maladies of an elderly man.",
        "MotherDiedAfterBirth(x) ::: x's mother died after giving birth.",
        "Abandoned(x) ::: x is abandoned by the father.",
        "CaresFor(x, y) ::: x cares for y as their own.",
        "Finds(x, y) ::: x finds y.",
        "WorkerAtNursingHome(x) ::: x is a worker at the nursing home.",
        "DecidesToCareFor(x, y) ::: x decides to care for y."
      ],
      "premises": [
        "BornOnNovember11_1918(baby) ∧ ElderlyAppearance(baby) ∧ MotherDiedAfterBirth(baby) ∧ Abandoned(baby) ::: A boy was born on the evening of November 11, 1918, with the appearance and physical maladies of an elderly man, and his mother died after giving birth, leading to his abandonment.",
        "∃x (Finds(queenie, x) ∧ Finds(tizzy, x) ∧ Abandoned(x)) ::: Queenie and Mr. \"Tizzy\" Weathers find the abandoned baby.",
        "WorkerAtNursingHome(queenie) ∧ WorkerAtNursingHome(tizzy) ::: Queenie and Mr. \"Tizzy\" Weathers are workers at the nursing home.",
        "DecidesToCareFor(queenie, baby) ::: Queenie decides to care for the baby as her own."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 301,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 8,
      "paragraph": "In 1990, widowed Daisy is contacted by social workers who have found Benjamin窶馬ow physically a pre-teen. When she arrives, they explain that he was living in a condemned building and was taken to the hospital in poor physical condition, and that they found her name in his diary. The bewildered social workers also say he is displaying early signs of dementia. Daisy moves into the nursing home in 1997 and cares for Benjamin for the rest of his life. In the spring of 2003, Benjamin dies in Daisy's arms, physically an infant but chronologically 84 years of age. Having finally revealed the story of Caroline's father to her, Daisy dies as Hurricane Katrina approaches.",
      "question_template": "Benjamin and Daisy do [[CANDIDATE_ANSWER]] soon after falling in love.",
      "candidate_answers": [
        "The story of Caroline's father",
        "Benjamin"
      ],
      "predicates": [
        "CaresFor(x, y) ::: x cares for y.",
        "PhysicallyInfant(x) ::: x is physically an infant.",
        "ChronologicallyAge(x, y) ::: x is chronologically y years old.",
        "DiesInArmsOf(x, y) ::: x dies in the arms of y.",
        "ContactedBy(x, y) ::: x is contacted by y.",
        "FoundInDiary(x, y) ::: x is found in the diary of y.",
        "LivingIn(x, y) ::: x is living in y.",
        "TakenToHospital(x) ::: x is taken to the hospital.",
        "DisplayingSignsOfDementia(x) ::: x is displaying early signs of dementia.",
        "MovesInto(x, y) ::: x moves into y.",
        "Year(x, y) ::: x is in the year y."
      ],
      "premises": [
        "ContactedBy(a_1, social_workers) ∧ FoundInDiary(a_2, a_1) ∧ LivingIn(a_2, b_2) ∧ TakenToHospital(a_2) ∧ DisplayingSignsOfDementia(a_2) ::: In 1990, Daisy is contacted by social workers who have found Benjamin living in a condemned building and was taken to the hospital in poor physical condition, and that they found her name in his diary.",
        "MovesInto(a_1, b_1) ∧ CaresFor(a_1, a_2) ::: Daisy moves into the nursing home in 1997 and cares for Benjamin for the rest of his life.",
        "DiesInArmsOf(a_2, a_1) ∧ PhysicallyInfant(a_2) ∧ ChronologicallyAge(a_2, 84) ::: In the spring of 2003, Benjamin dies in Daisy's arms, physically an infant but chronologically 84 years of age.",
        "Dies(a_1) ∧ Year(a_1, 2005) ::: Daisy dies as Hurricane Katrina approaches.",
        "Conclusion:",
        "CaresFor(a_1, a_2) ::: Daisy cares for Benjamin until his death."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "304": [
    {
      "id": 304,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 5,
      "paragraph": "In 1947, Benjamin visits Daisy in New York unannounced but departs upon seeing that she has fallen in love with someone else. In 1954, Daisy's dancing career ends when her leg is crushed in an automobile accident in Paris. When Benjamin visits her, Daisy is amazed by his youthful appearance, but, frustrated by her injuries, she tells him to stay out of her life.",
      "question_template": "Daisy Fuller asks her daughter to read a story because of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Frustrated by her injuries",
        "Her leg is crushed in an automobile accident in Paris"
      ],
      "predicates": [
        "Visits(x, y) ::: x visits y.",
        "InLocation(x, y) ::: x is in location y.",
        "Injured(x) ::: x is injured.",
        "DancingCareerEnds(x) ::: x's dancing career ends.",
        "Frustrated(x) ::: x is frustrated.",
        "YoungAppearance(x) ::: x has a youthful appearance.",
        "InLoveWith(x, y) ::: x is in love with y.",
        "Departs(x, y) ::: x departs from y."
      ],
      "premises": [
        "Visits(benjamin, daisy) ∧ InLocation(benjamin, new_york) ∧ ¬InLoveWith(daisy, benjamin) ::: In 1947, Benjamin visits Daisy in New York unannounced but departs upon seeing that she has fallen in love with someone else.",
        "Visits(daisy, benjamin) ∧ Injured(daisy) ∧ DancingCareerEnds(daisy) ::: In 1954, Daisy's dancing career ends when her leg is crushed in an automobile accident in Paris.",
        "Frustrated(daisy) ∧ YoungAppearance(benjamin) ∧ ¬InLocation(benjamin, daisy) ::: When Benjamin visits her, Daisy is amazed by his youthful appearance, but, frustrated by her injuries, she tells him to stay out of her life.",
        "DancingCareerEnds(daisy) → Injured(daisy) ::: Daisy's injuries lead to the end of her dancing career."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "305": [
    {
      "id": 305,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 4,
      "paragraph": "In May 1945, Benjamin returns to New Orleans and reunites with Queenie. A few weeks later, he reunites with Daisy; they go out for dinner. Upon failing to seduce him afterward, she departs. Benjamin later reunites with Thomas Button, who, terminally ill, reveals he is Benjamin's father and wills Benjamin his button company and his estate.",
      "question_template": "In 1925, Benjamin declares that a miracle happened because he was previously not able to [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Reunites with Daisy; they go out for dinner",
        "- Failing to seduce him afterward, she departs"
      ],
      "predicates": [
        "Returns(x, y) ::: x returns to location y.",
        "Reunites(x, y) ::: x reunites with person y.",
        "GoesOutForDinner(x, y) ::: x goes out for dinner with person y.",
        "FailsToSeduce(x, y) ::: x fails to seduce person y.",
        "Departs(x) ::: x departs.",
        "Reveals(x, y) ::: x reveals information to person y.",
        "Wills(x, y, z) ::: x wills y to person z.",
        "TerminallyIll(x) ::: x is terminally ill.",
        "FatherOf(x, y) ::: x is the father of person y.",
        "Owns(x, y) ::: x owns y."
      ],
      "premises": [
        "Returns(benjamin, newOrleans) ::: Benjamin returns to New Orleans.",
        "Reunites(benjamin, queenie) ::: Benjamin reunites with Queenie.",
        "Reunites(benjamin, daisy) ::: Benjamin reunites with Daisy.",
        "GoesOutForDinner(benjamin, daisy) ::: Benjamin and Daisy go out for dinner.",
        "FailsToSeduce(daisy, benjamin) ::: Daisy fails to seduce Benjamin.",
        "Departs(daisy) ::: Daisy departs after failing to seduce Benjamin.",
        "Reunites(benjamin, thomasButton) ::: Benjamin reunites with Thomas Button.",
        "TerminallyIll(thomasButton) ::: Thomas Button is terminally ill.",
        "Reveals(thomasButton, benjamin) ::: Thomas Button reveals to Benjamin that he is his father.",
        "Wills(thomasButton, buttonCompany, benjamin) ::: Thomas Button wills his button company to Benjamin.",
        "Wills(thomasButton, estate, benjamin) ::: Thomas Button wills his estate to Benjamin.",
        "FatherOf(thomasButton, benjamin) ::: Thomas Button is the father of Benjamin."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 305,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 5,
      "paragraph": "In 1947, Benjamin visits Daisy in New York unannounced but departs upon seeing that she has fallen in love with someone else. In 1954, Daisy's dancing career ends when her leg is crushed in an automobile accident in Paris. When Benjamin visits her, Daisy is amazed by his youthful appearance, but, frustrated by her injuries, she tells him to stay out of her life.",
      "question_template": "In 1925, Benjamin declares that a miracle happened because he was previously not able to [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Benjamin visits Daisy in New York unannounced",
        "- Daisy is amazed by his youthful appearance",
        "- Frustrated by her injuries, she tells him to stay out of her life"
      ],
      "predicates": [
        "Visits(x, y) ::: x visits y.",
        "InLocation(x, y) ::: x is in location y.",
        "Injured(x) ::: x is injured.",
        "DancingCareerEnds(x) ::: x's dancing career ends.",
        "Frustrated(x) ::: x is frustrated.",
        "YoungAppearance(x) ::: x has a youthful appearance.",
        "InLoveWith(x, y) ::: x is in love with y.",
        "Departs(x, y) ::: x departs from y."
      ],
      "premises": [
        "Visits(benjamin, daisy) ∧ InLocation(benjamin, new_york) ∧ ¬InLoveWith(daisy, benjamin) ::: In 1947, Benjamin visits Daisy in New York unannounced but departs upon seeing that she has fallen in love with someone else.",
        "Visits(daisy, benjamin) ∧ Injured(daisy) ∧ DancingCareerEnds(daisy) ::: In 1954, Daisy's dancing career ends when her leg is crushed in an automobile accident in Paris.",
        "Frustrated(daisy) ∧ YoungAppearance(benjamin) ∧ ¬InLocation(benjamin, daisy) ::: When Benjamin visits her, Daisy is amazed by his youthful appearance, but, frustrated by her injuries, she tells him to stay out of her life.",
        "DancingCareerEnds(daisy) → Injured(daisy) ::: Daisy's injuries lead to the end of her dancing career."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ]
}