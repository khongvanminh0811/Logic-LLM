{
  "04d0a3d15a1e39a94524a3958e433a88ca01fdf9": [
    {
      "id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "King(x) ::: x is a king  ",
        "DefeatedInCivilWar(x) ::: x was defeated in the civil war  ",
        "FledFromTo(x, y, z) ::: x fled from place y to place z  ",
        "SentToSearch(x, y) ::: x (group) was sent to search place y  ",
        "Burn(x, y) ::: x burns place y  ",
        "HouseOf(x, y) ::: y is the house of x  ",
        "Officer(x) ::: x is an officer  ",
        "KilledAtBattle(x, y) ::: x was killed at battle y  ",
        "OrphanChildrenOf(x, y) ::: x are the orphan children of y  ",
        "BelievedDead(x) ::: x are believed to be dead  ",
        "SavedBy(x, y) ::: x was saved by y  ",
        "HidesIn(x, y, z) ::: x hides y in place z  ",
        "DisguisesAs(x, y, z) ::: x disguises y as z  ",
        "IsolatedCottage(x) ::: x is an isolated cottage  ",
        "Verderer(x) ::: x is a verderer  ",
        "FourOrphanChildren(x) ::: x is the group of four orphan children  ",
        "",
        "Premises:  ",
        "King(kingCharlesI) ∧ DefeatedInCivilWar(kingCharlesI) ∧ FledFromTo(kingCharlesI, london, newForest)  ",
        "SentToSearch(parliamentarySoldiers, newForest)  ",
        "Burn(parliamentarySoldiers, arnwoodEstate) ∧ HouseOf(colonelBeverley, arnwoodEstate) ∧ Officer(colonelBeverley) ∧ KilledAtBattle(colonelBeverley, battleOfNaseby)  ",
        "OrphanChildrenOf({edward, humphrey, alice, edith}, arnwoodEstate) ∧ BelievedDead({edward, humphrey, alice, edith})  ",
        "Verderer(jacobArmitage) ∧ IsolatedCottage(jacobArmitageCottage)  ",
        "SavedBy({edward, humphrey, alice, edith}, jacobArmitage)  ",
        "SavedBy({edward, humphrey, alice, edith}, jacobArmitage) → (HidesIn(jacobArmitage, {edward, humphrey, alice, edith}, jacobArmitageCottage) ∧ DisguisesAs(jacobArmitage, {edward, humphrey, alice, edith}, grandchildren))"
      ]
    },
    {
      "id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "AristocraticLifestyle(x) ::: x has an aristocratic lifestyle  ",
        "SimpleForesterLifestyle(x) ::: x has a simple forester lifestyle  ",
        "GuidedBy(x, y) ::: x is guided by y  ",
        "TakesCharge(x, y) ::: x takes charge after y's death  ",
        "DevelopsFarmstead(x) ::: x develops the farmstead  ",
        "ExpandsFarmstead(x) ::: x expands the farmstead  ",
        "Aids(x, y) ::: x aids y  ",
        "Rescues(x, y) ::: x rescues y  ",
        "Hostile(x) ::: x is hostile  ",
        "SeeksToHarm(x, y) ::: x seeks to harm y  ",
        "Sympathetic(x) ::: x is sympathetic  ",
        "InChargeOf(x, y) ::: x is in charge of y  ",
        "WorksAsSecretary(x, y) ::: x works as a secretary for y  ",
        "MaintainsPretence(x, p) ::: x maintains the pretence p  ",
        "GrandsonOf(x, y) ::: x is the grandson of y  ",
        "",
        "Premises:  ",
        "∀x ((x = a_5) → (AristocraticLifestyle(x) ∧ GuidedBy(x, a_0))) ::: The children (Edward's sisters) have an aristocratic lifestyle and are guided by Armitage  ",
        "∀x ((x = a_5) → SimpleForesterLifestyle(x)) ::: The children adapt to a simple forester lifestyle  ",
        "GuidedBy(a_5, a_0) ::: The children are guided by Armitage  ",
        "TakesCharge(a_1, ArmitageDeath) ::: Edward takes charge after Armitage's death  ",
        "Aids(a_6, a_5) ::: Humphrey aids the children  ",
        "DevelopsFarmstead(a_5) ∧ ExpandsFarmstead(a_5) ::: The children develop and expand the farmstead  ",
        "Rescues(a_5, a_7) ::: The children rescue Pablo (a_7 is the gypsy boy, implied but not explicitly given an ID)  ",
        "Hostile(a_8) ∧ SeeksToHarm(a_8, a_1) ::: Corbould is hostile and seeks to harm Edward  ",
        "Sympathetic(a_3) ∧ InChargeOf(a_3, b_1) ::: Heatherstone is sympathetic and in charge of the Royal land in New Forest  ",
        "Rescues(a_1, a_4) ::: Edward rescues Patience  ",
        "WorksAsSecretary(a_1, a_3) ::: Edward works as a secretary for Heatherstone  ",
        "MaintainsPretence(a_1, GrandsonOf(a_1, JacobArmitage)) ::: Edward maintains the pretence that he is the grandson of Jacob Armitage"
      ]
    },
    {
      "id": "04d0a3d15a1e39a94524a3958e433a88ca01fdf9",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "Joins(a_1, c_0) ::: Edward joins the army of the future King Charles II (Royalists).  ",
        "DefeatedAt(c_1, b_4) ::: The Royalists are defeated at the Battle of Worcester.  ",
        "ReturnsTo(a_1, b_1) ::: Edward returns to the New Forest.  ",
        "Awarded(a_3, b_3) ::: Heatherstone has been awarded the Arnwood estate.  ",
        "DisillusionedBy(a_1, a_4) ::: Edward is disillusioned by Patience's apparent rejection of his declarations of love.  ",
        "FleesTo(a_1, b_2) ::: Edward flees to France.  ",
        "BroughtUpAs(a_5, aristocraticLadies) ::: Edward's sisters are sent away to be brought up as aristocratic ladies.  ",
        "LivesIn(a_6, b_1) ::: Edward's brother continues to live in the New Forest.  ",
        "Loves(a_4, a_1) ::: Patience loves Edward.  ",
        "AcquiresFor(a_3, b_3, a_1) ::: Heatherstone acquired the Arnwood estate for Edward.  ",
        "WorksAsMercenaryInExile(a_1) ::: Edward works as a mercenary soldier in exile.  ",
        "ReunitedAtRestoration(a_1, a_4) ::: Edward and Patience are reunited at the Restoration.  ",
        "RightfulOwner(a_1, b_3) ::: Edward is the rightful owner of the Arnwood estate.  ",
        "",
        "Premises:  ",
        "Awarded(a_3, b_3) ∧ AcquiresFor(a_3, b_3, a_1) → RightfulOwner(a_1, b_3) ::: If Heatherstone acquires the Arnwood estate for Edward, then Edward is the rightful owner of the Arnwood estate.  ",
        "DisillusionedBy(a_1, a_4) → FleesTo(a_1, b_2) ::: If Edward is disillusioned by Patience's apparent rejection of Edward's declarations of love, then Edward flees to France.  ",
        "WorksAsMercenaryInExile(a_1) → ReunitedAtRestoration(a_1, a_4) ::: If Edward works as a mercenary soldier in exile until the Restoration, then Edward is reunited with Patience at the Restoration.  ",
        "",
        "Additional facts from the context (not rules but stated facts):  ",
        "Joins(a_1, c_0) ::: Edward joins the army of the future King Charles II.  ",
        "DefeatedAt(c_1, b_4) ::: The Royalists are defeated at the Battle of Worcester.  ",
        "ReturnsTo(a_1, b_1) ::: Edward returns to the New Forest.  ",
        "BroughtUpAs(a_5, aristocraticLadies) ::: Edward's sisters are sent away to be brought up as aristocratic ladies.  ",
        "LivesIn(a_6, b_1) ::: Edward's brother continues to live in the New Forest.  ",
        "Loves(a_4, a_1) ::: Patience loves Edward.  ",
        "AcquiresFor(a_3, b_3, a_1) ::: Heatherstone acquired the Arnwood estate for Edward.  ",
        "WorksAsMercenaryInExile(a_1) ::: Edward works as a mercenary soldier in exile."
      ]
    }
  ],
  "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea": [
    {
      "id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "YoungScientist(x) ::: x is a young scientist  ",
        "ElderlyPoet(x) ::: x is an elderly poet  ",
        "Writer(x) ::: x is a writer  ",
        "AuthorOf(x, y) ::: x is the author of y  ",
        "LetterFromTo(x, y, z) ::: x is a letter from person y to person z  ",
        "PartOfGroup(x, g) ::: x is part of group g  ",
        "RadicalLiteraryGroup(g) ::: g is a radical literary group  ",
        "KnownAs(g, n) ::: group g is known as name n  ",
        "Novel(n) ::: n is a novel  ",
        "PresentsDiscussion(n, t) ::: novel n presents a discussion of topic t  ",
        "DiscussionForm(n, f) ::: novel n is written in form f  ",
        "SeriesOfLetters(f) ::: f is a series of letters  ",
        "Between(f, x, y) ::: f is between persons x and y  ",
        "SanFrancisco(s) ::: s is San Francisco  ",
        "Late19thCentury(t) ::: t is the late 19th century  ",
        "TimePeriod(t) ::: t is a time period  ",
        "",
        "Premises:  ",
        "Novel(novel) ∧ PresentsDiscussion(novel, philosophyOfLoveAndSex) ∧ DiscussionForm(novel, form) ∧ SeriesOfLetters(form) ∧ Between(form, a_1, a_2)  ",
        "::: The novel presents a discussion of the philosophy of love and sex, written as a series of letters between Herbert Wace (a_1) and Dane Kempton (a_2).  ",
        "",
        "YoungScientist(a_1) ∧ ElderlyPoet(a_2)  ",
        "::: Herbert Wace is a young scientist and Dane Kempton is an elderly poet.  ",
        "",
        "Writer(a_1) ∧ Writer(a_2)  ",
        "::: Both Herbert Wace and Dane Kempton are writers (letters are written by them).  ",
        "",
        "AuthorOf(a_1, lettersWace) ∧ AuthorOf(a_2, lettersKempton)  ",
        "::: Jack London wrote Wace’s letters and Anna Strunsky wrote Kempton’s letters.  ",
        "",
        "a_1 = JackLondon ∧ a_2 = AnnaStrunsky  ",
        "::: Assigning referents: a_1 is Jack London, a_2 is Anna Strunsky.  ",
        "",
        "PartOfGroup(a_1, crowd) ∧ PartOfGroup(a_2, crowd) ∧ RadicalLiteraryGroup(crowd) ∧ KnownAs(crowd, \"The Crowd\") ∧ SanFrancisco(s) ∧ Late19thCentury(t) ∧ TimePeriod(t)  ",
        "::: In the late 19th century, London and Strunsky were part of a San Francisco radical literary group known as \"The Crowd.\""
      ]
    },
    {
      "id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 1,
      "fols": [
        "Predicates:",
        "MakesCaseFor(x, y) ::: x makes the case for y (e.g., feeling and emotion).",
        "ProceedsScientifically(x) ::: x proceeds scientifically.",
        "AnalyzesInTerms(x, y, z) ::: x analyzes y in terms of z.",
        "",
        "Premises:",
        "MakesCaseFor(kempton, feelingAndEmotion) ::: Kempton makes the case for feeling and emotion.",
        "ProceedsScientifically(wace) ::: Wace proceeds \"scientifically\".",
        "AnalyzesInTerms(wace, love, darwinianTerms) ::: Wace analyzes love in Darwinian terms."
      ]
    },
    {
      "id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "PurposeToOrderAffairsRationally(a_0) ::: The speaker (a_0) purposes to order their affairs in a rational manner.  ",
        "Marry(a_0, a_4) ::: The speaker (a_0) marries Hester Stebbins (a_4).  ",
        "NotImpelledBySexMadness(a_0) ::: The speaker is not impelled by the archaic sex madness of the beast.  ",
        "NotImpelledByRomanceMadness(a_0) ::: The speaker is not impelled by the obsolescent romance madness of later-day man.  ",
        "ContractTie(a_0) ::: The speaker contracts a tie.  ",
        "TieBasedOnHealth(a_0) ::: The tie contracted by the speaker is based upon health.  ",
        "TieBasedOnSanity(a_0) ::: The tie contracted by the speaker is based upon sanity.  ",
        "TieBasedOnCompatibility(a_0) ::: The tie contracted by the speaker is based upon compatibility.  ",
        "IntellectDelightsInTie(a_0) ::: The speaker’s intellect delights in the tie.  ",
        "",
        "Premises:  ",
        "PurposeToOrderAffairsRationally(a_0) ::: The speaker purposes to order their affairs in a rational manner.  ",
        "Marry(a_0, a_4) ::: The speaker marries Hester Stebbins.  ",
        "¬ImpelledBySexMadness(a_0) ::: The speaker is not impelled by archaic sex madness.  ",
        "¬ImpelledByRomanceMadness(a_0) ::: The speaker is not impelled by obsolescent romance madness.  ",
        "ContractTie(a_0) ∧ (TieBasedOnHealth(a_0) ∧ TieBasedOnSanity(a_0) ∧ TieBasedOnCompatibility(a_0)) ::: The speaker contracts a tie based upon health, sanity, and compatibility.  ",
        "IntellectDelightsInTie(a_0) ::: The speaker’s intellect delights in the tie."
      ]
    },
    {
      "id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "Piqued(x) ::: x was piqued (public was piqued)",
        "AnonymousWriters(x) ::: x are anonymous writers",
        "Successful(b) ::: b was successful",
        "ModeratelySuccessful(b) ::: b was moderately successful",
        "Biographer(x) ::: x is a biographer",
        "LondonBiographer(x) ::: x is a biographer from London",
        "Praised(x, b) ::: x praised b",
        "Quoted(x, source, content) ::: x quoted source as saying content",
        "Admired(source, content) ::: source admired content",
        "HoldsPlace(b, rank) ::: b holds firmly its place in rank",
        "Publication(b) ::: b is a publication",
        "BestOfSeason(b) ::: b is among the best of the season's publications",
        "",
        "Premises:",
        "Piqued(public) ::: Initially the public was piqued by the anonymity of the writers.",
        "ModeratelySuccessful(book) ::: The book was moderately successful.",
        "LondonBiographer(russKingman) ∧ Praised(russKingman, book) ::: London biographer Russ Kingman praised the book.",
        "Quoted(russKingman, buffaloCommercial, \"sheer charm of its prose\") ∧ Admired(buffaloCommercial, \"sheer charm of its prose\") ::: Russ Kingman quoted the Buffalo Commercial as admiring the \"sheer charm of its prose\".",
        "Quoted(russKingman, buffaloCommercial, \"holds firmly its place in the front rank of the best of the season's publications\") ∧ HoldsPlace(book, frontRankBestSeason) ::: The Buffalo Commercial said the book \"holds firmly its place in the front rank of the best of the season's publications.\"",
        "",
        "Note:  ",
        "- public, book, russKingman, buffaloCommercial are entities implicitly referenced; if needed, assign IDs (e.g., public: a_public, book: b_book, russKingman: a_russKingman, buffaloCommercial: b_buffaloCommercial).  ",
        "- Since no explicit IDs were given for public, book, russKingman, or Buffalo Commercial, they are represented here as constants or variables.  ",
        "- The quoted content is represented as strings for clarity.  ",
        "",
        "If IDs are required, they can be assigned as:  ",
        "public: a_0  ",
        "book: b_0  ",
        "russKingman: a_1  ",
        "buffaloCommercial: b_1  ",
        "",
        "Then the predicates become:  ",
        "Piqued(a_0)  ",
        "ModeratelySuccessful(b_0)  ",
        "LondonBiographer(a_1) ∧ Praised(a_1, b_0)  ",
        "Quoted(a_1, b_1, \"sheer charm of its prose\") ∧ Admired(b_1, \"sheer charm of its prose\")  ",
        "Quoted(a_1, b_1, \"holds firmly its place in the front rank of the best of the season's publications\") ∧ HoldsPlace(b_0, frontRankBestSeason)"
      ]
    },
    {
      "id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 4,
      "fols": [
        "Predicates:",
        "NYTimes(b_0) ::: b_0 is The New York Times.",
        "Review(b_0, r) ::: b_0 has a review r.",
        "OpensWith(r, s) ::: review r opens with sentence s.",
        "Complains(r, c) ::: review r contains complaint c.",
        "SaysScientistNew(r) ::: the scientist says something new in review r.",
        "SaysPoetNew(r) ::: the poet says something new in review r.",
        "ThrashedOutManyTimes(t) ::: the thing has been thrashed out many times.",
        "UnnamedAuthorInfuses(r, x) ::: the unnamed author infuses x into Wace or Kempton in review r.",
        "GivesHumanPersonalityOrAppeal(x) ::: x has human personality or appeal.",
        "StoryFallsFlat(r) ::: as a story, review r falls flat.",
        "DiscussionOldTopic(r) ::: as a discussion, review r is about a topic as old as interesting and overworked.",
        "",
        "Premises:",
        "NYTimes(b_0) ::: The New York Times was less charitable.",
        "∃r (Review(b_0, r) ∧ OpensWith(r, \"The sex problem again.\")) ::: The New York Times opened its review with the line \"The sex problem again.\"",
        "∃r (Review(b_0, r) ∧ Complains(r, \"Nothing that the scientist says is new\")) ::: The review complains that nothing the scientist says is new.",
        "∃r (Review(b_0, r) ∧ Complains(r, \"Nothing that the poet says is new\")) ::: The review complains that nothing the poet says is new.",
        "ThrashedOutManyTimes(t) ::: The thing has been thrashed out some millions of times.",
        "∃r (Review(b_0, r) ∧ ¬UnnamedAuthorInfuses(r, Wace)) ::: The unnamed author does not infuse into Wace anything to give human personality or appeal.",
        "∃r (Review(b_0, r) ∧ ¬UnnamedAuthorInfuses(r, Kempton)) ::: The unnamed author does not infuse into Kempton anything to give human personality or appeal.",
        "∃r (Review(b_0, r) ∧ StoryFallsFlat(r)) ::: As a story, the review falls flat.",
        "∃r (Review(b_0, r) ∧ DiscussionOldTopic(r)) ::: As a discussion, the review is about a topic as old as interesting and overworked."
      ]
    },
    {
      "id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 5,
      "fols": [
        "Predicates:",
        "Says(a_0, x) ::: Joseph Noel says x.",
        "Describes(a_0, a_2, b_0) ::: Joseph Noel says that George Sterling described The Masses.",
        "PortionOf(b_0, a_1) ::: London's portion of the book.",
        "Quote1(x) ::: x is the quote \"a spiritual misprint, a typographical error half a volume long\".",
        "Quote2(x) ::: x is the quote \"His vocabulary, in the letters of Herbert Wace, sounds as if taken that day from an encyclopedia by a conscientious sophomore.\"",
        "VocabularyOf(a_2, lettersOfHerbertWace) ::: George Sterling's vocabulary in the letters of Herbert Wace.",
        "",
        "Premises:",
        "Says(a_0, Describes(a_2, PortionOf(b_0, a_1))) ::: Joseph Noel says that George Sterling described London's portion of the book.",
        "Describes(a_2, PortionOf(b_0, a_1)) → Quote1(quote1) ::: George Sterling described London's portion of the book as \"a spiritual misprint, a typographical error half a volume long\".",
        "Says(a_0, Quote2(quote2)) ::: Joseph Noel says \"His vocabulary, in the letters of Herbert Wace, sounds as if taken that day from an encyclopedia by a conscientious sophomore.\"",
        "",
        "Note:  ",
        "- a_0 = Joseph Noel  ",
        "- a_1 = London  ",
        "- a_2 = George Sterling (implied from context, though not explicitly given an ID, but needed for the description)  ",
        "- b_0 = The Masses (publication)  ",
        "- quotes are represented as Quote1 and Quote2 predicates with variables quote1 and quote2 respectively.  ",
        "- lettersOfHerbertWace is a term representing the letters of Herbert Wace mentioned in the quote."
      ]
    },
    {
      "id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 6,
      "fols": [
        "Predicates:  ",
        "MemberOf(a, g) ::: a is a member of group g  ",
        "ParticipatesIn(a, s) ::: a participates in social/political movement s  ",
        "CoRespondent(a, b) ::: a is the co-respondent in b's divorce  ",
        "RelationPlatonic(a, b) ::: the relation between a and b is platonic  ",
        "ActiveIn(a, g) ::: a is active in group g  ",
        "ActiveIn(a, s) ::: a is active in social/political movement s  ",
        "",
        "Premises:  ",
        "MemberOf(a_1, crowd) ∧ MemberOf(a_2, crowd) ::: Jack London and the younger Strunsky are members of the literary group \"The Crowd\" in San Francisco.  ",
        "ParticipatesIn(a_1, socialism) ∧ ParticipatesIn(a_2, socialism) ::: Jack London and the younger Strunsky participate in socialism.  ",
        "CoRespondent(a_2, divorce(a_1, a_3)) ::: Strunsky was named as the co-respondent in Jack London's divorce from his first wife, Bessie.  ",
        "RelationPlatonic(a_1, a_2) ::: Biographers generally agree that Jack London's relation with the younger Strunsky was platonic.  ",
        "ActiveIn(a_1, crowd) ∧ ActiveIn(a_2, crowd) ::: Jack London and the younger Strunsky were active in the literary group \"The Crowd\".  ",
        "ActiveIn(a_1, socialism) ∧ ActiveIn(a_2, socialism) ::: Jack London and the younger Strunsky were active in socialism.  ",
        "",
        "(Note: The group \"The Crowd\" and socialism are treated as constants: crowd, socialism.)"
      ]
    },
    {
      "id": "06b1c16f9343dfe145570e28e0fe81ddc66cf1ea",
      "paragraph_id": 7,
      "fols": [
        "Predicates:  ",
        "ExpressesTheory(x, y) ::: x expresses theory y  ",
        "RoleCorrespondsTo(y, r) ::: theory or concept y corresponds to role r  ",
        "FirstWife(a_3) ::: a_3 is London’s first wife  ",
        "SecondWife(a_4) ::: a_4 is London’s second wife  ",
        "DiedIn(a_1, year1916) ::: London died in 1916  ",
        "Published(x, y, z) ::: x published y in year z  ",
        "About(y, r) ::: publication y is about relationship r  ",
        "Relationship(a_1, a_3, a_4) ::: relationship between London, his first wife, and his second wife  ",
        "",
        "Premises:  ",
        "ExpressesTheory(a_1, c_1) ∧ ExpressesTheory(a_1, c_2) ::: London expresses his theories about the \"Mother-Woman\" and the \"Mate-Woman\"  ",
        "RoleCorrespondsTo(c_1, a_3) ∧ RoleCorrespondsTo(c_2, a_4) ::: The roles \"Mother-Woman\" and \"Mate-Woman\" correspond to London’s first wife and second wife respectively  ",
        "DiedIn(a_1, year1916) ::: London died in 1916  ",
        "Published(a_2, b_2, year1917) ∧ About(b_2, Relationship(a_1, a_3, a_4)) ∧ Published(a_2, b_2, year1917) ∧ Published(b_2, b_1, year1917) ::: After London’s death, Strunsky published a memoir in The Masses in 1917 about their relationship  ",
        "",
        "Note:  ",
        "- The predicate Published(x, y, z) can be read as \"x published y in year z.\"  ",
        "- The predicate About(y, r) means \"publication y is about relationship r.\"  ",
        "- Relationship(a_1, a_3, a_4) denotes the relationship between London and his two wives."
      ]
    }
  ],
  "09333c7d604bd412e6aef5d3e56b046ed301c5e5": [
    {
      "id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "CalledToTend(a_3, a_1) ::: Watson is called to tend Holmes.  ",
        "DyingOfRareDisease(a_1) ::: Holmes is dying of a rare disease.  ",
        "ContractedWhileOnCase(a_1) ::: Holmes contracted the disease while on a case.  ",
        "Shocked(a_3) ::: Watson was shocked.  ",
        "HeardAboutIllness(a_3, a_1) ::: Watson heard about Holmes’ illness.  ",
        "SaysMrsHudson(a_0, Statement) ::: Mrs. Hudson says Statement.  ",
        "NotEaten(a_1, days3) ::: Holmes has not eaten anything in three days.  ",
        "NotDrunk(a_1, days3) ::: Holmes has not drunk anything in three days.  ",
        "",
        "Premises:  ",
        "CalledToTend(a_3, a_1) ::: Dr Watson is called to tend Holmes.  ",
        "DyingOfRareDisease(a_1) ∧ ContractedWhileOnCase(a_1) ::: Holmes is apparently dying of a rare disease contracted while on a case.  ",
        "Shocked(a_3) ∧ HeardAboutIllness(a_3, a_1) ::: Watson was shocked, having heard about Holmes’ illness.  ",
        "SaysMrsHudson(a_0, NotEaten(a_1, days3) ∧ NotDrunk(a_1, days3)) ::: Mrs. Hudson says that Holmes has neither eaten nor drunk anything in three days."
      ]
    },
    {
      "id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "IllnessHighlyInfectious(x) ::: The illness of person x is highly infectious.  ",
        "InstructNotComeNear(x, y) ::: Person x instructs person y not to come near x.  ",
        "WishesExamine(x, y) ::: Person x wishes to examine person y.  ",
        "WishesSendForSpecialist(x) ::: Person x wishes to send for a specialist.  ",
        "DemandsWait(x, y) ::: Person x demands that person y wait several hours before seeking help.  ",
        "WaitsSeveralHours(x) ::: Person x waits several hours before seeking help.  ",
        "Worried(x) ::: Person x is in extreme worry.  ",
        "MuttersNonsense(x) ::: Person x mutters nonsense.  ",
        "",
        "Premises:  ",
        "IllnessHighlyInfectious(a_1) → InstructNotComeNear(a_1, a_3)  ",
        "DemandsWait(a_1, a_3) → WaitsSeveralHours(a_3)  ",
        "",
        "Additional premises from context (expressed as facts):  ",
        "WishesExamine(a_3, a_1)  ",
        "WishesSendForSpecialist(a_3)  ",
        "Worried(a_3)  ",
        "MuttersNonsense(a_1)"
      ]
    },
    {
      "id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "Watson(x) ::: x is Watson  ",
        "Holmes(x) ::: x is Holmes  ",
        "InRoom(x, y) ::: x is in y's room  ",
        "Touches(x, y) ::: x touches y  ",
        "GrowsAngry(x) ::: x grows angry  ",
        "LikesThingsUntouched(x) ::: x likes his things not touched  ",
        "Item(y) ::: y is an item (object)  ",
        "BelongsTo(y, x) ::: y belongs to x  ",
        "",
        "Premises:  ",
        "∀x ∀y ((Watson(x) ∧ Holmes(y) ∧ InRoom(x, y) ∧ Item(z) ∧ BelongsTo(z, y) ∧ Touches(x, z)) → GrowsAngry(y))  ",
        "::: If Watson touches items in Holmes’s room then Holmes grows angry.",
        "",
        "∀x ∀y ((Watson(x) ∧ Holmes(y) ∧ InRoom(x, y) ∧ Item(z) ∧ BelongsTo(z, y) ∧ Touches(x, z)) → ¬LikesThingsUntouched(y))  ",
        "::: If Watson touches items in Holmes’s room then Holmes does not like Holmes’s things touched."
      ]
    },
    {
      "id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "Tells(x, y, z) ::: x tells y to do z  ",
        "TurnOn(y, b_0, level) ::: y turns on the gaslight (b_0) at a certain level  ",
        "Instructs(x, y, action) ::: x instructs y to perform action  ",
        "Bring(y, x, z) ::: y brings person x to see z  ",
        "ReturnsBefore(y, location, x) ::: y returns to location before x arrives  ",
        "",
        "Premises:  ",
        "Instructs(a_1, a_3, Bring(a_3, a_2, a_1)) → ReturnsBefore(a_3, BakerStreet, a_2) ::: If Holmes instructs Watson to bring Mr Culverton Smith to see Holmes then Watson returns to Baker Street before Mr Culverton Smith arrives.  ",
        "",
        "Tells(a_1, a_3, TurnOn(a_3, b_0, halfFull)) ::: Holmes tells Watson to turn the gaslight on, but only half-full.  ",
        "",
        "Instructs(a_1, a_3, Bring(a_3, a_2, a_1)) ::: Holmes instructs Watson to bring Mr Culverton Smith of 13 Lower Burke Street to see Holmes."
      ]
    },
    {
      "id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 4,
      "fols": [
        "Predicates:  ",
        "GoesTo(a_3, a_2) ::: Watson goes to Smith's address.  ",
        "RefusesToSee(a_2, a_0) ::: Smith refuses to see anyone.  ",
        "ForcesWayIn(a_3, a_2) ::: Watson forces his way in to Smith's place.  ",
        "ExplainsErrandOnBehalf(a_3, a_1, a_2) ::: Watson explains his errand on behalf of Sherlock Holmes to Smith.  ",
        "AttitudeChangesDrastically(a_2) ::: Smith's attitude changes drastically.  ",
        "AgreesToComeWithinHalfHour(a_2) ::: Smith agrees to come to Baker Street within a half hour.  ",
        "ExcusesHimself(a_3) ::: Watson excuses himself.  ",
        "HasAnotherAppointment(a_3) ::: Watson has another appointment.  ",
        "ReturnsTo(a_3, b_0) ::: Watson returns to Baker Street (b_0 is Baker Street, assumed from context).  ",
        "BeforeArrival(a_3, a_2) ::: Watson returns before Smith's arrival.  ",
        "",
        "Premises:  ",
        "(ExplainsErrandOnBehalf(a_3, a_1, a_2) → AttitudeChangesDrastically(a_2)) ::: If Watson explains an errand on behalf of Sherlock Holmes to Smith then Smith's attitude changes drastically.  ",
        "(AttitudeChangesDrastically(a_2) → AgreesToComeWithinHalfHour(a_2)) ::: If Smith's attitude changes drastically then Smith agrees to come to Baker Street within a half hour.  ",
        "",
        "Additional premises from the context:  ",
        "GoesTo(a_3, a_2) ::: Watson goes to Smith's address.  ",
        "RefusesToSee(a_2, a_0) ::: Smith refuses to see anyone.  ",
        "ForcesWayIn(a_3, a_2) ::: Watson forces his way in.  ",
        "ExcusesHimself(a_3) ∧ HasAnotherAppointment(a_3) ::: Watson excuses himself, saying he has another appointment.  ",
        "ReturnsTo(a_3, b_0) ∧ BeforeArrival(a_3, a_2) ::: Watson returns to Baker Street before Smith's arrival."
      ]
    },
    {
      "id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 5,
      "fols": [
        "Predicates:  ",
        "FrankWith(a_2, a_1) ::: Smith is frank with Holmes.  ",
        "Hiding(a_3) ::: Watson is hiding.  ",
        "SickenedBy(a_1, c_1) ::: Holmes has been sickened by the same illness that killed Victor (feigned illness).  ",
        "KilledBy(a_4, c_1) ::: Holmes' nephew Victor was killed by the illness (feigned illness).  ",
        "SentByPost(a_2, a_1, b_1) ::: Smith sent the little ivory box to Holmes by post.  ",
        "Contains(b_1, c_3) ::: The little ivory box contains a sharp spring infected with the illness (disease's infectious nature).  ",
        "Pockets(a_2, b_1) ::: Smith pockets the little ivory box.  ",
        "RemovesEvidence(a_2) ::: Smith removes the evidence of his crime.  ",
        "ResolvesToStayAndWatchDie(a_2, a_1) ::: Smith resolves to stay and watch Holmes die.  ",
        "",
        "Premises:  ",
        "SickenedBy(a_1, c_1) ∧ KilledBy(a_4, c_1) ::: Holmes sickened by the same illness that killed Victor.  ",
        "FrankWith(a_2, a_1) ∧ Hiding(a_3) ::: Smith is frank with Holmes while Watson is hiding.  ",
        "SentByPost(a_2, a_1, b_1) ∧ Contains(b_1, c_3) ::: Smith sent Holmes the little ivory box containing the infected spring.  ",
        "Pockets(a_2, b_1) → RemovesEvidence(a_2) ::: If Smith pockets the box, then he removes evidence of his crime.  ",
        "ResolvesToStayAndWatchDie(a_2, a_1) ::: Smith resolves to stay and watch Holmes die."
      ]
    },
    {
      "id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 6,
      "fols": [
        "Predicates:  ",
        "FullGaslightOn() ::: The full gaslight is on.  ",
        "SignalToMoveIn() ::: The signal to move in is given.  ",
        "TellsToArrest(x, y, z) ::: Person x tells person y to arrest person z.  ",
        "AccusedOfMurder(x, y) ::: Person x is accused of the murder of person y.  ",
        "AccusedOfAttemptedMurder(x, y) ::: Person x is accused of the attempted murder of person y.  ",
        "PresentsAsWitness(x, c) ::: Person x presents himself as a witness to conversation c.  ",
        "IsWitness(x, c) ::: Person x is a witness to conversation c.  ",
        "",
        "Premises:  ",
        "FullGaslightOn() → SignalToMoveIn()  ",
        "TellsToArrest(a_1, a_0, a_2) → AccusedOfMurder(a_2, a_4)  ",
        "TellsToArrest(a_1, a_0, a_2) → AccusedOfAttemptedMurder(a_2, a_1)  ",
        "PresentsAsWitness(a_3, conversation) → IsWitness(a_3, conversation)  ",
        "",
        "Explanation:  ",
        "- The full gaslight being on signals the move-in.  ",
        "- Holmes (a_1) tells Morton (a_0) to arrest Smith (a_2) for the murder of Holmes’s nephew (a_4), so Smith is accused of that murder.  ",
        "- Holmes also tells Morton to arrest Smith for the attempted murder of Holmes himself (a_1), so Smith is accused of that as well.  ",
        "- Watson (a_3) presents himself as a witness to the conversation, so he is a witness.  ",
        "",
        "Note:  ",
        "- The conversation is an implicit event/context; it can be represented as a constant or variable (here named \"conversation\").  ",
        "- Morton is a_0 (from the people group), Holmes is a_1, Smith is a_2, Watson is a_3, Holmes’ nephew is a_4."
      ]
    },
    {
      "id": "09333c7d604bd412e6aef5d3e56b046ed301c5e5",
      "paragraph_id": 7,
      "fols": [
        "Predicates:  ",
        "FeignsIllness(a_1) ::: Holmes feigns illness.  ",
        "ClaimsInfectiousNature(a_1) ::: Holmes claims the disease's infectious nature.  ",
        "DoesNotExamine(a_3, a_1) ::: Watson does not examine Holmes.  ",
        "DoesNotDiscoverRuse(a_3) ::: Watson does not discover the ruse.  ",
        "Ruse(c_2) ::: The feigned illness is a ruse.  ",
        "InducesConfession(a_1, a_2) ::: Holmes' ruse induces Smith to confess.  ",
        "NotInfected(a_1, b_1) ::: Holmes is not infected by the little box.  ",
        "HasEnemies(a_1) ::: Holmes has enough enemies.  ",
        "ExaminesMailCarefully(a_1) ::: Holmes always examines his mail carefully before opening it.  ",
        "StarvesSelf(a_1, days3) ::: Holmes starves himself for three days.  ",
        "",
        "Premises:  ",
        "FeignsIllness(a_1) ∧ ClaimsInfectiousNature(a_1) → (DoesNotExamine(a_3, a_1) ∧ DoesNotDiscoverRuse(a_3))  ",
        "Ruse(c_2) ∧ InducesConfession(a_1, a_2)  ",
        "¬Infected(a_1, b_1)  ",
        "HasEnemies(a_1) ∧ ExaminesMailCarefully(a_1)  ",
        "StarvesSelf(a_1, days3) ∧ ClaimsInfectiousNature(a_1) → DoesNotExamine(a_3, a_1) ∧ DoesNotDiscoverRuse(a_3)"
      ]
    }
  ],
  "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d": [
    {
      "id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "ForeignManCharacter(a_2) ::: Andy Kaufman's \"foreign man\" character  ",
        "AppearsInBlackAndWhite(a_2) ::: Andy Kaufman's \"foreign man\" character appears in black and white  ",
        "DeclaresEndNotBeginning(a_2) ::: Andy Kaufman's \"foreign man\" character declares that this is the end of the film, not the beginning  ",
        "PlaysPhonographRecord(a_2) ::: Andy Kaufman's \"foreign man\" character plays a phonograph record alongside the credits  ",
        "WalksSomberlyOff(a_2) ::: Andy Kaufman's \"foreign man\" character walks somberly off  ",
        "ReturnsNormalVoice(a_2) ::: Andy Kaufman comes back in his normal voice  ",
        "ClaimsGetRidPeople(a_2) ::: Andy Kaufman claims he \"had to get rid of the people who don't understand me, and don't want to try\"  ",
        "ShowsLifeStoryOnProjector(a_2) ::: Andy Kaufman proceeds to show the story of his life on a film projector  ",
        "StartsWithChildhoodHome(a_2, b_0) ::: The story starts with his childhood home in Great Neck, New York, circa 1957  ",
        "ChildhoodHome(b_0) ::: The childhood home in Great Neck, New York, circa 1957  ",
        "",
        "Premises:  ",
        "ForeignManCharacter(a_2) ∧ AppearsInBlackAndWhite(a_2) ∧ DeclaresEndNotBeginning(a_2) ∧ PlaysPhonographRecord(a_2) ∧ WalksSomberlyOff(a_2) ::: Andy Kaufman's \"foreign man\" character appears in black and white, declares this is the end of the film, plays a phonograph record alongside the credits, then walks somberly off.  ",
        "ReturnsNormalVoice(a_2) ∧ ClaimsGetRidPeople(a_2) ∧ ShowsLifeStoryOnProjector(a_2) ∧ StartsWithChildhoodHome(a_2, b_0) ∧ ChildhoodHome(b_0) ::: Andy Kaufman then comes back in his normal voice, claims he had to get rid of people who don't understand him and don't want to try, and proceeds to show the story of his life on a film projector, starting with his childhood home in Great Neck, New York, circa 1957."
      ]
    },
    {
      "id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "StrugglingPerformer(x) ::: x is a struggling performer  ",
        "FailsInNightclubs(x) ::: x's act fails in nightclubs  ",
        "AudienceWantsComedy(x) ::: the audience wants comedy at x's performance  ",
        "SingsChildrensSongs(x) ::: x sings children's songs  ",
        "RefusesToTellJokes(x) ::: x refuses to tell conventional jokes  ",
        "PeculiarCharacter(x, y) ::: y is a peculiar character/persona of x  ",
        "WearsRhinestoneJacket(x) ::: x wears a rhinestone jacket  ",
        "DoesElvisImpersonation(x) ::: x does a dead-on Elvis impersonation and song  ",
        "AudienceBurstsApplause(x) ::: the audience bursts into applause at x's performance  ",
        "AudienceBelievesNoTalent(x) ::: the audience begins to believe that x may have no real talent  ",
        "TrickedAudience(x) ::: x tricked the audience  ",
        "",
        "Premises:  ",
        "StrugglingPerformer(andyKaufman) ∧ FailsInNightclubs(andyKaufman) ∧ AudienceWantsComedy(performance) ∧ SingsChildrensSongs(andyKaufman) ∧ RefusesToTellJokes(andyKaufman)  ",
        "PeculiarCharacter(andyKaufman, foreignMan) ∧ WearsRhinestoneJacket(foreignMan) ∧ DoesElvisImpersonation(foreignMan)  ",
        "AudienceBelievesNoTalent(andyKaufman) → AudienceBurstsApplause(performance) ∧ TrickedAudience(andyKaufman)  ",
        "",
        "Explanation:  ",
        "- Andy Kaufman is a struggling performer whose act fails in nightclubs because the audience wants comedy but he sings children's songs and refuses to tell conventional jokes.  ",
        "- Andy Kaufman's peculiar \"foreign man\" character wears a rhinestone jacket and does a dead-on Elvis impersonation and song.  ",
        "- The audience begins to believe Kaufman has no real talent, but then bursts into applause realizing he tricked them."
      ]
    },
    {
      "id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "TalentAgent(x) ::: x is a talent agent  ",
        "Signs(x, y) ::: x signs y as a client  ",
        "ClientOf(x, y) ::: x is a client of y  ",
        "LandsRole(x, y, r) ::: x lands role r for y  ",
        "TVSeries(r) ::: r is a TV series  ",
        "Dislikes(x, y) ::: x dislikes y  ",
        "Money(r) ::: role r offers money  ",
        "Visibility(r) ::: role r offers visibility  ",
        "PromiseSpecial(r) ::: role r offers a promise to do own television special  ",
        "AcceptsRole(x, r) ::: x accepts role r  ",
        "RoleOnSeries(r, s) ::: role r is on TV series s  ",
        "CharacterName(r, c) ::: role r has character name c  ",
        "SecretlyHates(x, r) ::: x secretly hates doing role r  ",
        "ExpressesDesireToQuit(x, r) ::: x expresses desire to quit role r  ",
        "",
        "Premises:  ",
        "∃x (TalentAgent(x) ∧ Signs(x, andy) ∧ ClientOf(andy, x)) ::: George Shapiro is a talent agent who signs Andy Kaufman as a client.  ",
        "LandsRole(george, andy, taxi) ∧ TVSeries(taxi) ::: George Shapiro immediately lands Andy Kaufman a role on the TV series Taxi.  ",
        "Dislikes(andy, sitcoms) ::: Kaufman dislikes sitcoms.  ",
        "(Money(taxiRole) ∧ Visibility(taxiRole) ∧ PromiseSpecial(taxiRole)) → AcceptsRole(andy, taxiRole) ::: Kaufman accepts a role on a TV series if the role offers money, visibility, and a promise to do his own television special.  ",
        "RoleOnSeries(taxiRole, taxi) ∧ CharacterName(taxiRole, latkaGravas) ::: The role on Taxi is a mechanic named Latka Gravas.  ",
        "AcceptsRole(andy, taxiRole) ::: Kaufman accepts the role on Taxi.  ",
        "SecretlyHates(andy, taxiRole) ∧ ExpressesDesireToQuit(andy, taxiRole) ::: Kaufman secretly hates doing the show and expresses a desire to quit."
      ]
    },
    {
      "id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "Rude(a_1) ::: Tony Clifton is rude.  ",
        "LoudMouthed(a_1) ::: Tony Clifton is loud-mouthed.  ",
        "LoungeSinger(a_1) ::: Tony Clifton is a lounge singer.  ",
        "WantsGuestStar(a_2, a_1) ::: Andy Kaufman wants Tony Clifton to guest-star on Taxi.  ",
        "BadAttitude(a_1) ::: Tony Clifton has a bad attitude.  ",
        "HorribleAppearance(a_1) ::: Tony Clifton has a horrible appearance.  ",
        "HorribleDemeanor(a_1) ::: Tony Clifton has a horrible demeanor.  ",
        "MeetsBackstage(a_1, a_0) ::: Tony Clifton meets Shapiro backstage.  ",
        "TakesOffSunglasses(a_1) ::: Tony Clifton takes off his sunglasses.  ",
        "IsActually(a_1, a_2) ::: Tony Clifton is actually Andy Kaufman.  ",
        "VillainCharacter(a_1) ::: Tony Clifton is a villain character.  ",
        "CreatedBy(a_1, a_2) ::: Tony Clifton was created by Andy Kaufman.  ",
        "CreatedBy(a_1, a_3) ::: Tony Clifton was created by Bob Zmuda.  ",
        "CreativePartner(a_3, a_2) ::: Bob Zmuda is Andy Kaufman’s creative partner.  ",
        "GagOnAudience ::: The gag is on the audience.  ",
        "",
        "Premises:  ",
        "Rude(a_1) ∧ LoudMouthed(a_1) ∧ LoungeSinger(a_1) ∧ WantsGuestStar(a_2, a_1) ∧ BadAttitude(a_1) ∧ HorribleAppearance(a_1) ∧ HorribleDemeanor(a_1) ::: Tony Clifton is a rude, loud-mouthed lounge singer with a bad attitude, horrible appearance and demeanor, and Andy Kaufman wants him to guest-star on Taxi.  ",
        "MeetsBackstage(a_1, a_0) ∧ TakesOffSunglasses(a_1) ∧ IsActually(a_1, a_2) ::: Backstage, Tony Clifton meets Shapiro and reveals he is actually Andy Kaufman.  ",
        "VillainCharacter(a_1) ∧ CreatedBy(a_1, a_2) ∧ CreatedBy(a_1, a_3) ∧ CreativePartner(a_3, a_2) ::: Tony Clifton is a villain character created by Andy Kaufman and his creative partner Bob Zmuda.  ",
        "GagOnAudience ::: The gag is on the audience."
      ]
    },
    {
      "id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 4,
      "fols": [
        "Predicates:  ",
        "FameIncreases(a_2) ::: Kaufman's fame increases with his Saturday Night Live appearances.  ",
        "HasProblems(a_2) ::: Kaufman has problems with his new-found fame.  ",
        "TravelsTo(a_2, b_campus) ::: Kaufman travels to college campuses.  ",
        "AudienceDislikes(audience, StrangeHumor(a_2)) ::: Audiences dislike Kaufman's strange sense of humor.  ",
        "AudienceDemandsPerformAs(audience, a_2, a_1) ::: Audiences demand Kaufman perform as Latka (Tony Clifton).  ",
        "Antagonizes(a_2, audience) ::: Kaufman deliberately antagonizes the audiences.  ",
        "ReadsAloud(a_2, TheGreatGatsby) ::: Kaufman reads The Great Gatsby aloud from start to finish.  ",
        "ShowsUpOnSet(a_2, TaxiSet, a_1) ::: Kaufman shows up on the Taxi set as Clifton.  ",
        "CausesChaosUntilRemoved(a_2, StudioLot) ::: Kaufman causes chaos until removed from the studio lot.  ",
        "RelatesTo(a_2, a_3, Statement) ::: Kaufman relates to Shapiro a statement.  ",
        "Statement = \"never knows exactly how to entertain an audience short of faking my own death or setting the theater on fire\" ::: The content of Kaufman's statement.  ",
        "",
        "Premises:  ",
        "FameIncreases(a_2) ∧ HasProblems(a_2) ::: Kaufman's fame increases with SNL appearances but he has problems with his new-found fame.  ",
        "TravelsTo(a_2, b_campus) ∧ AudienceDislikes(audience, StrangeHumor(a_2)) ∧ AudienceDemandsPerformAs(audience, a_2, a_1) → Antagonizes(a_2, audience) ∧ ReadsAloud(a_2, TheGreatGatsby) ::: When Kaufman travels to college campuses, audiences dislike his strange humor and demand he perform as Latka, so he antagonizes them by reading The Great Gatsby aloud.  ",
        "ShowsUpOnSet(a_2, TaxiSet, a_1) → CausesChaosUntilRemoved(a_2, StudioLot) ::: Kaufman shows up on the Taxi set as Clifton and causes chaos until removed.  ",
        "RelatesTo(a_2, a_3, Statement) ::: Kaufman tells Shapiro he never knows how to entertain an audience except by faking death or setting theater on fire."
      ]
    },
    {
      "id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 5,
      "fols": [
        "Predicates:  ",
        "Wrestler(x) ::: x is a professional wrestler.  ",
        "VillainAngle(x) ::: x emphasizes the \"villain\" angle in wrestling.  ",
        "WrestlesOnlyWomen(x) ::: x wrestles only women (hired actresses).  ",
        "BeratesAfterWinning(x) ::: x berates women after winning.  ",
        "ChampionTitle(x, y) ::: x declares himself y (a champion title).  ",
        "SmittenWith(x, y) ::: x is smitten with y.  ",
        "RomanticRelationship(x, y) ::: x and y have a romantic relationship.  ",
        "Person(x) ::: x is a person.  ",
        "Woman(x) ::: x is a woman.  ",
        "",
        "Premises:  ",
        "Wrestler(a_2) ::: Andy Kaufman is a professional wrestler.  ",
        "VillainAngle(a_2) ::: Andy Kaufman emphasizes the \"villain\" angle.  ",
        "WrestlesOnlyWomen(a_2) ::: Andy Kaufman wrestles only women (hired actresses).  ",
        "BeratesAfterWinning(a_2) ::: Andy Kaufman berates women after winning.  ",
        "ChampionTitle(a_2, \"Inter-Gender Wrestling Champion\") ::: Andy Kaufman declares himself \"Inter-Gender Wrestling Champion.\"  ",
        "SmittenWith(a_2, a_0) ::: Andy Kaufman is smitten with Lynne Margulies (a_0).  ",
        "RomanticRelationship(a_2, a_0) ::: Andy Kaufman and Lynne Margulies have a romantic relationship.  ",
        "Woman(a_0) ::: Lynne Margulies is a woman.  ",
        "Person(a_2) ::: Andy Kaufman is a person.  ",
        "Person(a_0) ::: Lynne Margulies is a person."
      ]
    },
    {
      "id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 6,
      "fols": [
        "Predicates:  ",
        "FeudPublicly(a_2, a_lawler) ::: Andy Kaufman and Jerry Lawler feud publicly.  ",
        "ChallengeToMatch(a_lawler, a_2) ::: Jerry Lawler challenges Andy Kaufman to a real wrestling match.  ",
        "AcceptChallenge(a_2) ::: Andy Kaufman accepts the challenge.  ",
        "OverpowersAndInjures(a_lawler, a_2) ::: Jerry Lawler easily overpowers and seriously injures Andy Kaufman.  ",
        "WearNeckBrace(a_2) ::: Andy Kaufman wears a neck brace.  ",
        "AppearOnShow(a_2, a_lawler, lateNight) ::: Kaufman and Lawler appear on NBC's Late Night with David Letterman.  ",
        "Insult(a_lawler, a_2) ::: Jerry Lawler insults Andy Kaufman.  ",
        "ThrowDrink(a_2, a_lawler) ::: Andy Kaufman throws a drink at Jerry Lawler.  ",
        "SpewTirade(a_2, a_lawler) ::: Andy Kaufman spews a vicious tirade of epithets at Jerry Lawler.  ",
        "StagedFeud(a_2, a_lawler) ::: Kaufman and Lawler staged the entire feud.  ",
        "WearyAudience(audience) ::: Audience members are weary of Andy's wrestling antics.  ",
        "BannedFromSNL(a_2) ::: Andy Kaufman is banned from Saturday Night Live by a vote of audience members.  ",
        "",
        "Premises:  ",
        "(FeudPublicly(a_2, a_lawler) ∧ ChallengeToMatch(a_lawler, a_2) ∧ AcceptChallenge(a_2) ∧ OverpowersAndInjures(a_lawler, a_2)) → WearNeckBrace(a_2)  ",
        "::: If Kaufman and Lawler feud publicly, Lawler challenges Kaufman to a real wrestling match, Kaufman accepts, and Lawler easily overpowers and seriously injures Kaufman, then Kaufman wears a neck brace.  ",
        "",
        "(AppearOnShow(a_2, a_lawler, lateNight) ∧ Insult(a_lawler, a_2) ∧ ThrowDrink(a_2, a_lawler) ∧ SpewTirade(a_2, a_lawler)) → StagedFeud(a_2, a_lawler)  ",
        "::: If Kaufman and Lawler appear on NBC's Late Night with David Letterman, Lawler insults Kaufman, Kaufman throws a drink at Lawler, and Kaufman spews a vicious tirade at Lawler, then Kaufman and Lawler staged the entire feud.  ",
        "",
        "WearyAudience(audience) → BannedFromSNL(a_2)  ",
        "::: If audience members are weary of Andy's wrestling antics, then Andy Kaufman is banned from Saturday Night Live by a vote of audience members."
      ]
    },
    {
      "id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 7,
      "fols": [
        "Predicates:  ",
        "DiagnosedWithRareLungCancer(a_2) ::: Andy Kaufman has been diagnosed with a rare form of lung cancer.  ",
        "MayDieSoon(a_2) ::: Andy Kaufman may die soon.  ",
        "CallsTogether(a_2, a_3) ::: Andy Kaufman calls together Zmuda.  ",
        "CallsTogether(a_2, a_0) ::: Andy Kaufman calls together Lynne (a_0 represents people including Lynne).  ",
        "CallsTogether(a_2, a_4) ::: Andy Kaufman calls together Shapiro (assuming a_4 for Shapiro, if not given, can be omitted or generalized).  ",
        "UnsureBelieve(a_0) ::: They (friends) are unsure whether to believe Kaufman.  ",
        "BelievesFakeDeathPrank(a_3) ::: Zmuda believes a fake death would be a fantastic prank.  ",
        "ShortTimeToLive(a_2) ::: Kaufman has a short time to live.  ",
        "BookingAtCarnegieHall(a_2) ::: Kaufman gets a booking at Carnegie Hall.  ",
        "DreamVenue(a_2, carnegieHall) ::: Carnegie Hall is Kaufman’s dream venue.  ",
        "PerformanceSuccess(d_0) ::: The performance is a memorable success.  ",
        "InvitesAudienceMilkCookies(a_2) ::: Kaufman invites the entire audience out for milk and cookies.  ",
        "HealthDeteriorates(a_2) ::: Kaufman’s health deteriorates.  ",
        "GoesToPhilippines(a_2) ::: Kaufman goes to the Philippines to seek a medical \"miracle\".  ",
        "DiscoversScam(a_2) ::: Kaufman discovers the medical \"miracle\" is a scam.  ",
        "LaughsAtIrony(a_2) ::: Kaufman laughs at the irony.  ",
        "DiesSoon(a_2) ::: Kaufman dies soon after.  ",
        "SingAlongAtFuneral(a_0, a_2) ::: Friends and loved ones do a sing-along with a video of Andy at his funeral.",
        "",
        "Premises:  ",
        "ShortTimeToLive(a_2) → BookingAtCarnegieHall(a_2) ::: If Kaufman has a short time to live then Kaufman gets a booking at Carnegie Hall.  ",
        "BookingAtCarnegieHall(a_2) → InvitesAudienceMilkCookies(a_2) ::: If Kaufman performs at Carnegie Hall then Kaufman invites the entire audience out for milk and cookies.  ",
        "GoesToPhilippines(a_2) → DiscoversScam(a_2) ::: If Kaufman goes to the Philippines to seek a medical \"miracle\" then Kaufman discovers the medical \"miracle\" is a scam.  ",
        "DiscoversScam(a_2) → LaughsAtIrony(a_2) ::: If Kaufman discovers the medical \"miracle\" is a scam then Kaufman laughs at the irony.  ",
        "",
        "Additional facts from the context (not explicitly in rules but from narrative):  ",
        "DiagnosedWithRareLungCancer(a_2) ∧ MayDieSoon(a_2) ::: Kaufman was diagnosed with rare lung cancer and may die soon.  ",
        "CallsTogether(a_2, a_0) ∧ CallsTogether(a_2, a_3) ::: Kaufman calls together Lynne, Zmuda, and Shapiro.  ",
        "UnsureBelieve(a_0) ∧ BelievesFakeDeathPrank(a_3) ::: They are unsure whether to believe Kaufman, with Zmuda believing it is a prank.  ",
        "PerformanceSuccess(d_0) ∧ DreamVenue(a_2, carnegieHall) ::: The Carnegie Hall performance is a memorable success and is Kaufman’s dream venue.  ",
        "HealthDeteriorates(a_2) ∧ DiesSoon(a_2) ::: Kaufman’s health deteriorates and he dies soon after.  ",
        "SingAlongAtFuneral(a_0, a_2) ::: Friends and loved ones do a sing-along with a video of Andy at his funeral."
      ]
    },
    {
      "id": "0bd270c8c46f84a4abd99d65e2f17a9e11a7f76d",
      "paragraph_id": 8,
      "fols": [
        "Predicates:  ",
        "Appears(a_1, c_1, year1985) ::: Tony Clifton appears at Andy Kaufman's tribute in 1985.  ",
        "Performs(a_1, d_1, b_1) ::: Tony Clifton performs \"I Will Survive\" at The Comedy Store.  ",
        "AtAudience(a_3, c_1) ::: Zmuda is in the audience at Andy Kaufman's tribute.  ",
        "CameraPansOverCrowd() ::: The camera pans over the crowd.  ",
        "PeeksInBlackAndWhite(a_2, c_2) ::: Kaufman briefly peeks in black-and-white during the final credits.  ",
        "FinalCredits(c_2) ::: The final credits of the event.  ",
        "MainStage(b_1) ::: The Comedy Store's main stage.  ",
        "",
        "Premises:  ",
        "Appears(a_1, c_1, year1985) ∧ Performs(a_1, d_1, b_1) ::: Tony Clifton appears at Andy Kaufman's tribute in 1985 performing \"I Will Survive\" at The Comedy Store.  ",
        "CameraPansOverCrowd() ∧ AtAudience(a_3, c_1) ::: The camera pans over the crowd and reveals Zmuda in the audience.  ",
        "PeeksInBlackAndWhite(a_2, c_2) ::: During the final credits, Kaufman briefly peeks in black-and-white again."
      ]
    }
  ],
  "0c1274df8299049d4959ef8a1ea23a6a68e26f6e": [
    {
      "id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "Hacker(a_2) ::: Stanley Jobson is a hacker.  ",
        "ServedTime(a_2) ::: Stanley served time for infecting the FBI's Carnivore program with a computer virus.  ",
        "OnParole(a_2) ::: Stanley is on parole.  ",
        "ForbiddenFromUsingComputers(a_2) ::: Stanley is forbidden from touching computers.  ",
        "Alcoholic(a_1) ::: Melissa (ex-wife) is alcoholic.  ",
        "ExWife(a_1, a_2) ::: Melissa is Stanley's ex-wife.  ",
        "MarriedToRichPornProducer(a_1) ::: Melissa married a rich porn producer.  ",
        "PartTimePornActress(a_1) ::: Melissa is currently a part-time porn actress.  ",
        "SoleCustody(a_1, a_5) ::: Melissa has sole custody over their daughter Holly.  ",
        "RestrainingOrder(a_2, a_5) ::: Stanley has a restraining order preventing him from visiting Holly.  ",
        "SolicitedBy(a_4, a_2) ::: Ginger solicited Stanley for his hacking skills.  ",
        "Represents(a_4, a_3) ::: Ginger speaks for her boss Gabriel.  ",
        "MeetsIn(a_2, a_3, b_0) ::: Stanley goes to meet Gabriel in Los Angeles (b_0).  ",
        "CracksServerUnderPressure(a_2) ::: Stanley cracks a secure government server within a minute while held at gunpoint and receiving fellatio.  ",
        "OffersMoney(a_3, a_2, 10_000_000) ::: Gabriel offers Stanley $10 million.  ",
        "ProgramsMultiHeadedWorm(a_2, hydra) ::: Stanley is asked to program a multi-headed worm called \"hydra\".  ",
        "Hydra ::: The multi-headed worm called \"hydra\".  ",
        "",
        "Premises:  ",
        "∀x (CracksServerUnderPressure(x) → OffersMoney(a_3, x, 10_000_000) ∧ ProgramsMultiHeadedWorm(x, hydra)) ::: If Stanley cracks a secure government server within a minute while held at gunpoint and receiving fellatio then Gabriel offers Stanley $10 million to program a multi-headed worm called \"hydra\".  ",
        "",
        "StanleyJobsonFacts:  ",
        "Hacker(a_2) ∧ ServedTime(a_2) ∧ OnParole(a_2) ∧ ForbiddenFromUsingComputers(a_2) ∧ ExWife(a_1, a_2) ∧ Alcoholic(a_1) ∧ MarriedToRichPornProducer(a_1) ∧ PartTimePornActress(a_1) ∧ SoleCustody(a_1, a_5) ∧ RestrainingOrder(a_2, a_5) ∧ SolicitedBy(a_4, a_2) ∧ Represents(a_4, a_3) ∧ MeetsIn(a_2, a_3, b_0) ∧ CracksServerUnderPressure(a_2) ::: Description of Stanley's background and the event of cracking the server.  ",
        "",
        "Conclusion:  ",
        "OffersMoney(a_3, a_2, 10_000_000) ∧ ProgramsMultiHeadedWorm(a_2, hydra) ::: Gabriel offers Stanley $10 million to program the multi-headed worm \"hydra\"."
      ]
    },
    {
      "id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "SecretGroup(x) ::: x is a secret group  ",
        "CreatedBy(x, y) ::: x is created by y  ",
        "LaunchesRetaliatoryAttacks(x, y) ::: x launches retaliatory attacks against y  ",
        "Threatens(t, z) ::: t threatens z  ",
        "Oversees(x, y) ::: x oversees y  ",
        "OrdersToStandDown(x, y) ::: x orders y to stand down  ",
        "StartsTracking(x, y) ::: x starts tracking y  ",
        "RefusesToStandDown(x) ::: x refuses to stand down  ",
        "NarrowlyAvoidsAssassination(x, y) ::: x narrowly avoids an assassination attempt ordered by y  ",
        "PersonallyKills(x, y) ::: x personally kills y  ",
        "SecretAgent(x) ::: x is a secret agent  ",
        "Undercover(x) ::: x is undercover  ",
        "Follows(x, y) ::: x follows y  ",
        "CaughtBy(x, y) ::: x was caught by y  ",
        "Warns(x, y) ::: x warns y  ",
        "CodesBackDoor(x) ::: x codes a back door  ",
        "ReversesMoneyTransfer(x) ::: x reverses the money transfer  ",
        "Leads(x, y) ::: x leads y  ",
        "CreatedGroupBy(x, y, z) ::: x is a group created by y (alternative to CreatedBy)  ",
        "IsCorpseLike(x, y) ::: x is a corpse that looks like y  ",
        "",
        "Premises:  ",
        "SecretGroup(blackCell) ∧ CreatedBy(blackCell, jEdgarHoover) → LaunchesRetaliatoryAttacks(blackCell, terroristsThreateningUS)  ",
        "Oversees(senatorReisman, blackCell) ∧ StartsTracking(FBI, gabriel) → OrdersToStandDown(senatorReisman, gabriel)  ",
        "RefusesToStandDown(gabriel) → NarrowlyAvoidsAssassination(gabriel, senatorReisman)  ",
        "NarrowlyAvoidsAssassination(gabriel, senatorReisman) → PersonallyKills(gabriel, senatorReisman)  ",
        "",
        "Leads(gabriel, blackCell)  ",
        "SecretAgent(ginger) ∧ Undercover(ginger)  ",
        "Follows(roberts, stanley)  ",
        "CaughtBy(stanley, roberts)  ",
        "Warns(roberts, stanley)  ",
        "CodesBackDoor(stanley) ∧ ReversesMoneyTransfer(stanley)  ",
        "IsCorpseLike(corpse, gabriel)  ",
        "",
        "Explanation:  ",
        "- Black Cell is a secret group created by J. Edgar Hoover and launches retaliatory attacks against terrorists threatening the US.  ",
        "- Senator Reisman oversees Black Cell and orders Gabriel to stand down when FBI starts tracking Gabriel.  ",
        "- Gabriel refuses to stand down, narrowly avoids an assassination attempt ordered by Reisman, and kills Reisman in revenge.  ",
        "- Gabriel leads Black Cell.  ",
        "- Ginger is a DEA agent working undercover.  ",
        "- Roberts follows and previously caught Stanley, warns him to be cautious.  ",
        "- Stanley codes a back door that reverses money transfer.  ",
        "- A corpse looks like Gabriel."
      ]
    },
    {
      "id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "Delivers(x, y, z) ::: x delivers object z to person y  ",
        "LeavesToSee(x, y) ::: x leaves to see person y  ",
        "Kills(x, y) ::: x kills person y  ",
        "Kidnaps(x, y) ::: x kidnaps person y  ",
        "Frames(x, y) ::: x frames person y  ",
        "ParticipatesIn(x, e) ::: x participates in event e  ",
        "Storms(x, b) ::: x storms building b  ",
        "SecuresAsHostages(x, g) ::: x secures group g as hostages  ",
        "FitsWithExplosives(x, h) ::: x fits hostage h with explosives  ",
        "Surrounds(p, b) ::: police/FBI p surround building b  ",
        "TakesToMeet(x, y, z, l) ::: x takes person y to meet person z at location l  ",
        "Discusses(x, t) ::: x discusses topic t  ",
        "Escorts(x, h) ::: x escorts hostage h  ",
        "KillsSniper(s, h) ::: sniper s kills hostage h  ",
        "PullsAway(a, h, b) ::: agents a pull hostage h away from building b  ",
        "DetonatesBomb(bomb, b) ::: bomb detonates at building b  ",
        "Ravages(bomb, loc) ::: bomb ravages location loc  ",
        "KillsPeople(bomb, n) ::: bomb kills n people  ",
        "",
        "Entities:  ",
        "People: a_0 (general people), a_1 Roberts, a_2 Stanley, a_3 Gabriel, a_4 Ginger, a_5 Holly  ",
        "Places: b_0 (bank branch), b_1 (coffee shop across the street)  ",
        "Events: d_0 (bank heist), d_2 (misdirection scenario)  ",
        "",
        "Premises:  ",
        "Delivers(a_2, a_3, hydra) ::: Stanley delivers the hydra to Gabriel  ",
        "LeavesToSee(a_2, a_5) ::: Stanley leaves to see Holly  ",
        "Kills(a_3, Melissa) ∧ Kills(a_3, MelissaHusband) ::: Gabriel kills Melissa and her husband  ",
        "Kidnaps(a_3, a_5) ::: Gabriel kidnaps Holly  ",
        "Frames(a_3, a_2) ::: Gabriel frames Stanley  ",
        "ParticipatesIn(a_2, d_0) ::: Stanley participates in the bank heist to get Holly back  ",
        "Storms(a_3 ∧ menOf(a_3), b_0) ::: Gabriel and his men storm the bank branch  ",
        "SecuresAsHostages(a_3 ∧ menOf(a_3), employeesAndCustomers(b_0)) ::: Gabriel and men secure employees and customers as hostages  ",
        "∀h (Hostage(h, b_0) → FitsWithExplosives(a_3 ∧ menOf(a_3), h)) ::: Each hostage is fitted with ball-bearing-based explosives  ",
        "Surrounds(policeAndFBI, b_0) ::: Police and FBI surround the bank branch  ",
        "TakesToMeet(a_3, a_2, a_1, b_1) ::: Gabriel takes Stanley to meet Roberts at the coffee shop across the street  ",
        "Discusses(a_3, d_2) ::: Gabriel discusses the film Dog Day Afternoon and misdirection  ",
        "∃h (Escorts(manOf(a_3), h) ∧ KillsSniper(sniper, h) ∧ PullsAway(agents, h, b_0) ∧ DetonatesBomb(bomb, b_0) ∧ Ravages(bomb, street) ∧ KillsPeople(bomb, several)) ::: A sniper kills a hostage escorted by Gabriel’s men, agents pull the hostage away causing the bomb to detonate, ravaging buildings and killing several people"
      ]
    },
    {
      "id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "Instructs(x, y, z) ::: x instructs y to do z  ",
        "TurnsOver(x, y, z) ::: x turns z over to y  ",
        "Trigger(x, y) ::: x triggers y  ",
        "Recaptured(x) ::: x is recaptured  ",
        "Rescued(x) ::: x is rescued  ",
        "ThreatensToKill(x, y) ::: x threatens to kill y  ",
        "Knows(x, y) ::: x knows y  ",
        "DEAAgent(x) ::: x is a DEA agent  ",
        "ReSiphonMoney(x, y) ::: x re-siphons money back to y  ",
        "Shoots(x, y) ::: x shoots y  ",
        "LoadOnBus(x, y) ::: x loads y on a bus  ",
        "DemandPlaneWait(x, y, z) ::: x demands that plane z wait for them at y  ",
        "LiftedOffBy(x, y) ::: x is lifted off by y  ",
        "DepositedOn(x, y) ::: x is deposited on y  ",
        "Deactivates(x, y) ::: x deactivates y  ",
        "DepartsWith(x, y, z) ::: x departs with y on z  ",
        "ShootsDown(x, y, z) ::: x shoots down y using z  ",
        "WaitingHelicopter(x) ::: x is a waiting helicopter  ",
        "RocketPropelledGrenade(x) ::: x is a rocket-propelled grenade  ",
        "",
        "Premises:  ",
        "Instructs(gabriel, stanley, launchHydra) ::: Gabriel instructs Stanley to launch the hydra  ",
        "TurnsOver(gabriel, stanley, holly) ::: Gabriel turns Holly over to Stanley once completed  ",
        "Trigger(backDoorStanley, event) ::: Stanley's back door triggers before they can leave the bank  ",
        "Recaptured(stanley) ::: Stanley is recaptured  ",
        "Rescued(holly) ::: Holly is rescued  ",
        "Knows(gabriel, ginger) ∧ DEAAgent(ginger) → ThreatensToKill(gabriel, ginger) → ¬ReSiphonMoney(stanley, monteCarlo) ::: Gabriel threatens to kill Ginger, who he knows is a DEA agent, unless Stanley re-siphons the money back to a Monte Carlo bank  ",
        "ReSiphonMoney(stanley, monteCarlo) ∧ ThreatensToKill(gabriel, ginger) → Shoots(gabriel, ginger) ::: Despite doing so, Gabriel shoots Ginger  ",
        "LoadOnBus(gabrielMen, hostages) ::: Gabriel and his men load the hostages on a bus  ",
        "DemandPlaneWait(gabrielMen, localAirport, plane) ::: Gabriel and his men demand a plane wait for them at the local airport  ",
        "LiftedOffBy(bus, s64Aircrane) ∧ DepositedOn(bus, skyscraperRoof) ::: While en route, the bus is lifted off by a S-64 Aircrane and deposited on a roof of a local skyscraper  ",
        "Deactivates(gabriel, bombs) ::: Gabriel deactivates the bombs  ",
        "DepartsWith(gabriel, survivingMen, waitingHelicopter) ::: Gabriel departs with his surviving men on a waiting helicopter  ",
        "ShootsDown(stanley, waitingHelicopter, rocketPropelledGrenade) ::: Stanley shoots down the helicopter using a rocket-propelled grenade from the bus"
      ]
    },
    {
      "id": "0c1274df8299049d4959ef8a1ea23a6a68e26f6e",
      "paragraph_id": 4,
      "fols": [
        "Predicates:  ",
        "Takes(a_1, a_2, c_1) ::: Roberts takes Stanley to verify the corpse.  ",
        "Believes(a_1, Agent(a_3, Mossad)) ::: Roberts believes Gabriel was a Mossad agent.  ",
        "NoRecord(AgentName(DEA, a_4)) ::: There was no record of a DEA agent named Ginger.  ",
        "Recognizes(a_2, c_1) ::: Stanley recognizes the corpse.  ",
        "DiscoveredEarlier(a_2, c_1) ::: Stanley discovered the corpse earlier.  ",
        "Realizes(a_2, d_2) ::: Stanley personally realizes the whole scenario was misdirection.  ",
        "EscapedDifferentRoute(a_3) ::: Gabriel had escaped a different route.  ",
        "Wears(a_4, c_2) ::: Ginger was wearing a bulletproof vest.  ",
        "WorksWith(a_4, a_3) ::: Ginger was working with Gabriel.  ",
        "Arranges(a_1, a_2, Custody(a_5)) ::: Roberts arranges for Stanley to have full custody of Holly.  ",
        "ToursTogether(a_1, a_2, b_2) ::: Roberts and Stanley tour the US together.  ",
        "WithdrawsMoney(a_3, b_1) ::: Gabriel withdraws money in Monte Carlo.  ",
        "WithdrawsMoney(a_4, b_1) ::: Ginger withdraws money in Monte Carlo.  ",
        "Watches(a_3, d_1) ::: Gabriel watches the destruction of the yacht.  ",
        "Watches(a_4, d_1) ::: Ginger watches the destruction of the yacht.  ",
        "Explodes(c_3, b_3) ::: The yacht explodes at sea.  ",
        "NewsReport(d_1, TerroristKnown) ::: News report describes the destruction of the yacht carrying a known terrorist.  ",
        "ThirdIncidentInWeeks(d_1) ::: The destruction is the third such incident in as many weeks.  ",
        "MisdirectionScenario(d_2) ::: The whole scenario is misdirection.  ",
        "",
        "Premises:  ",
        "(Wears(a_4, c_2) ∧ WorksWith(a_4, a_3)) → MisdirectionScenario(d_2) ::: If Ginger was wearing a bulletproof vest and was working with Gabriel then the whole scenario is misdirection.  ",
        "",
        "Additional implicit premises from context:  ",
        "Takes(a_1, a_2, c_1) ∧ Recognizes(a_2, c_1) ∧ DiscoveredEarlier(a_2, c_1) ∧ Realizes(a_2, d_2) ::: Stanley verifies and recognizes the corpse and realizes the scenario is misdirection.  ",
        "Arranges(a_1, a_2, Custody(a_5)) ∧ ToursTogether(a_1, a_2, b_2) ::: Roberts arranges custody of Holly to Stanley and they tour the US together.  ",
        "WithdrawsMoney(a_3, b_1) ∧ WithdrawsMoney(a_4, b_1) ∧ Watches(a_3, d_1) ∧ Watches(a_4, d_1) ∧ Explodes(c_3, b_3) ::: Gabriel and Ginger withdraw money in Monte Carlo and watch the yacht explode at sea.  ",
        "NewsReport(d_1, TerroristKnown) ∧ ThirdIncidentInWeeks(d_1) ::: The news reports the yacht destruction as the third such incident in weeks."
      ]
    }
  ],
  "145200abf14baeffa646797dfbfa58861cb4b079": [
    {
      "id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "YoungBoy(a_1) ::: Carl Fredricksen is a young boy.  ",
        "Age(a_1, 9) ::: Carl Fredricksen is 9 years old.  ",
        "Idolizes(a_1, a_muntz) ::: Carl idolizes Charles Muntz.  ",
        "Explorer(a_muntz) ::: Charles Muntz is a famous explorer.  ",
        "AccusedOfFabrication(a_muntz, skeleton) ::: Muntz has been accused of fabricating the skeleton of a giant exotic bird.  ",
        "SaysDiscovered(a_muntz, giantExoticBird) ::: Muntz says he discovered a giant exotic bird at Paradise Falls.  ",
        "VowsToReturn(a_muntz, b_3) ::: Muntz vows to return to Paradise Falls to catch one alive.  ",
        "Befriends(a_1, a_4) ::: Carl befriends Ellie.  ",
        "FanOf(a_4, a_muntz) ::: Ellie is a fan of Muntz.  ",
        "ConfidesDesire(a_4, moveClubhouseToCliff) ::: Ellie confides to Carl her desire to move her clubhouse to a cliff.  ",
        "Clubhouse(c_5) ::: The clubhouse is an abandoned house in the neighborhood (Carl's house).  ",
        "LocatedAt(c_5, neighborhood) ::: The clubhouse is located in the neighborhood.  ",
        "Cliff(b_2) ::: The cliff overlooks Paradise Falls.  ",
        "Overlooks(b_2, b_3) ::: The cliff overlooks Paradise Falls.  ",
        "Married(a_1, a_4) ::: Carl and Ellie get married.  ",
        "LiveTogether(a_1, a_4, c_5) ::: Carl and Ellie live together in the restored house.  ",
        "Sells(a_1, toyBalloons) ::: Carl sells toy balloons.  ",
        "AtLocation(a_1, zoo) ::: Carl sells balloons at a zoo.  ",
        "Opens(a_4, zoo) ::: Ellie opens the zoo.  ",
        "SuffersMiscarriage(a_1, a_4) ::: Carl and Ellie suffer a miscarriage.  ",
        "ToldCannotHaveChild(a_1, a_4) ::: Carl and Ellie are told they cannot have a child.  ",
        "DecideToRealizeDream(a_1, a_4, visitParadiseFalls) ::: Carl and Ellie decide to realize their dream of visiting Paradise Falls.  ",
        "TryToSaveMoney(a_1, a_4) ::: Carl and Ellie try to save money for the trip.  ",
        "SpendMoneyOnNeeds(a_1, a_4) ::: They repeatedly spend money on more pressing needs.  ",
        "Elderly(a_1) ::: Carl is elderly at the time of arranging the trip.  ",
        "ArrangesTrip(a_1, b_3) ::: Elderly Carl arranges the trip to Paradise Falls.  ",
        "BecomesIll(a_4) ::: Ellie suddenly becomes ill.  ",
        "Dies(a_4) ::: Ellie dies.  ",
        "",
        "Premises:  ",
        "YoungBoy(a_1) ∧ Age(a_1, 9) ∧ Idolizes(a_1, a_muntz) ∧ Explorer(a_muntz) ∧ AccusedOfFabrication(a_muntz, skeleton) ∧ SaysDiscovered(a_muntz, giantExoticBird) ∧ VowsToReturn(a_muntz, b_3)  ",
        "Befriends(a_1, a_4) ∧ FanOf(a_4, a_muntz) ∧ ConfidesDesire(a_4, moveClubhouseToCliff) ∧ Clubhouse(c_5) ∧ LocatedAt(c_5, neighborhood) ∧ Cliff(b_2) ∧ Overlooks(b_2, b_3)  ",
        "Married(a_1, a_4) ∧ LiveTogether(a_1, a_4, c_5) ∧ Sells(a_1, toyBalloons) ∧ AtLocation(a_1, zoo) ∧ Opens(a_4, zoo)  ",
        "SuffersMiscarriage(a_1, a_4) ∧ ToldCannotHaveChild(a_1, a_4) ∧ DecideToRealizeDream(a_1, a_4, visitParadiseFalls)  ",
        "TryToSaveMoney(a_1, a_4) ∧ SpendMoneyOnNeeds(a_1, a_4)  ",
        "Elderly(a_1) ∧ ArrangesTrip(a_1, b_3) ∧ BecomesIll(a_4) ∧ Dies(a_4)  ",
        "",
        "Rules:  ",
        "∀x ∀y ((SuffersMiscarriage(x, y) ∧ ToldCannotHaveChild(x, y)) → DecideToRealizeDream(x, y, visitParadiseFalls))"
      ]
    },
    {
      "id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "LivesIn(a_1, c_5) ::: Carl lives in Carl's house.  ",
        "HoldsOut(a_1) ::: Carl stubbornly holds out in his house.  ",
        "NeighborhoodTornDown(b_1) ::: The surrounding neighborhood (city) is torn down for new construction.  ",
        "Injures(a_1, worker) ::: Carl accidentally injures a construction worker.  ",
        "OrderedToMove(a_1, retirementHome) ::: Carl is ordered by a court to move to a retirement home.  ",
        "ComesUpWithScheme(a_1) ::: Carl comes up with a scheme.  ",
        "TurnsInto(c_5, c_1) ::: Carl turns his house into a makeshift airship (dirigible).  ",
        "UsesBalloons(c_5) ::: Carl uses thousands of helium balloons for the house.  ",
        "BecomesStowaway(a_2) ::: Russell becomes an accidental stowaway.  ",
        "EarnsBadge(a_2, c_2) ::: Russell tries to earn the final merit badge.  ",
        "AssistsElderly(a_2) ::: The merit badge is for assisting the elderly.  ",
        "SurvivesStorm(a_1, a_2) ::: Carl and Russell survive a thunderstorm.  ",
        "LandsOn(c_5, b_2) ::: The flying house lands on a tepui (cliff).  ",
        "Opposite(b_2, b_3) ::: The tepui is opposite Paradise Falls.  ",
        "Harnesses(a_1, c_5) ::: Carl harnesses himself to the house.  ",
        "Harnesses(a_2, c_5) ::: Russell harnesses himself to the house.  ",
        "WalksAcross(a_1, b_2) ::: Carl walks the house across the mesa (tepui).  ",
        "WalksAcross(a_2, b_2) ::: Russell walks the house across the mesa.  ",
        "HopesToReach(a_1, b_3) ::: Carl hopes to reach Paradise Falls.  ",
        "HopesToReach(a_2, b_3) ::: Russell hopes to reach Paradise Falls.  ",
        "Encounters(a_2, a_3) ::: Russell encounters Kevin (the bird).  ",
        "Names(a_2, a_3, \"Kevin\") ::: Russell names the bird Kevin.  ",
        "Meets(a_1, a_5) ::: Carl meets Dug (the dog).  ",
        "Meets(a_2, a_5) ::: Russell meets Dug.  ",
        "WearsCollar(a_5) ::: Dug wears a special collar.  ",
        "CanSpeak(a_5) ::: Dug can speak (due to collar).  ",
        "VowsToTake(a_5, a_3) ::: Dug vows to take Kevin to his master.  ",
        "Promise(d_1) ::: There is a promise between Carl and Ellie.  ",
        "KeepsPromise(a_1, d_1) ::: Carl tries to keep his promise to Ellie.  ",
        "",
        "Premises:  ",
        "BecomesStowaway(a_2) ↔ (EarnsBadge(a_2, c_2) ∧ AssistsElderly(a_2)) ::: Russell becomes an accidental stowaway when he tries to earn the final merit badge for assisting the elderly.  ",
        "(HopesToReach(a_1, b_3) ∧ HopesToReach(a_2, b_3)) → BeforeBalloonsDeflate(c_5) ::: Carl and Russell hope to reach Paradise Falls before the balloons deflate.  ",
        "",
        "Additional premises from context:  ",
        "LivesIn(a_1, c_5) ∧ HoldsOut(a_1) ∧ NeighborhoodTornDown(b_1) ::: Carl still lives in the house stubbornly holding out as the neighborhood is torn down.  ",
        "Injures(a_1, worker) → OrderedToMove(a_1, retirementHome) ::: When Carl injures a construction worker, a court orders him to move to a retirement home.  ",
        "ComesUpWithScheme(a_1) ∧ TurnsInto(c_5, c_1) ∧ UsesBalloons(c_5) ∧ KeepsPromise(a_1, d_1) ::: Carl comes up with a scheme to keep his promise to Ellie by turning his house into a makeshift airship using balloons.  ",
        "SurvivesStorm(a_1, a_2) ∧ LandsOn(c_5, b_2) ∧ Opposite(b_2, b_3) ::: After surviving a thunderstorm, the flying house lands on a tepui opposite Paradise Falls.  ",
        "Harnesses(a_1, c_5) ∧ Harnesses(a_2, c_5) ∧ WalksAcross(a_1, b_2) ∧ WalksAcross(a_2, b_2) ::: Carl and Russell harness themselves to the house and walk it across the mesa.  ",
        "Encounters(a_2, a_3) ∧"
      ]
    },
    {
      "id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "Person(x) ::: x is a person  ",
        "Dog(x) ::: x is a dog  ",
        "PackOfDogs(p) ::: p is a pack of dogs  ",
        "Leader(x, p) ::: x is the leader of pack p  ",
        "Doberman(x) ::: x is a doberman  ",
        "Seeking(x, y) ::: x is seeking y  ",
        "MasterOf(m, x) ::: m is the master of x  ",
        "Elderly(x) ::: x is elderly  ",
        "Invites(x, y, z) ::: x invites y aboard z  ",
        "Dirigible(x) ::: x is a dirigible  ",
        "SpentYearsSearching(x, y) ::: x has spent years searching for y  ",
        "Disgrace(x) ::: x has been disgraced  ",
        "NotesSimilarity(x, y, z) ::: x notes similarity between y and z  ",
        "BecomesHostile(x) ::: x becomes hostile  ",
        "Believes(x, p) ::: x believes proposition p  ",
        "AttemptingToSteal(x, y) ::: x has been attempting to steal y  ",
        "FleesWith(x, y, z) ::: x flees with y and z  ",
        "CatchesUpWith(x, y) ::: x catches up with y  ",
        "Captures(x, y) ::: x captures y  ",
        "StartsFireBeneath(x, y) ::: x starts a fire beneath y  ",
        "ForcesChoice(x, y, z) ::: x forces y to choose between saving y or z  ",
        "RushesToPutOutFire(x) ::: x rushes to put out the fire  ",
        "Takes(x, y) ::: x takes y  ",
        "Reaches(x, y) ::: x reaches y  ",
        "DisappointedIn(x, y, z) ::: x is disappointed in y over z  ",
        "",
        "Entities:  ",
        "People: a_0 (group), Carl: a_1, Russell: a_2, Kevin: a_3, Ellie: a_4, Dug: a_5, Charles Muntz: a_6  ",
        "Places: b_0 (group), city: b_1, cliff: b_2, Paradise Falls: b_3  ",
        "Objects: c_0 (group), dirigible: c_1, final badge: c_2, grape soda cap: c_3, ice cream: c_4, Carl's house: c_5  ",
        "Events: d_0 (group), promise between Carl and Ellie: d_1  ",
        "Pack of dogs: p_0  ",
        "",
        "Premises:  ",
        "PackOfDogs(p_0) ∧ Leader(a_6, p_0) ∧ Dog(a_6) ∧ Doberman(a_6) ∧ Seeking(a_6, a_3) ::: The pack of aggressive dogs is led by Alpha, a doberman who is seeking the bird Kevin.  ",
        "MasterOf(a_6, p_0) ∧ Elderly(a_6) ::: The master of the pack is elderly Charles Muntz.  ",
        "Invites(a_6, a_1, c_1) ∧ Dirigible(c_1) ::: Muntz invites Carl aboard his dirigible.  ",
        "SpentYearsSearching(a_6, a_3) ∧ Disgrace(a_6) ::: Muntz has spent years since his disgrace searching for the giant bird.  ",
        "NotesSimilarity(a_2, a_3, a_3) ::: Russell notes the bird's similarity to Kevin.  ",
        "BecomesHostile(a_6) ∧ Believes(a_6, AttemptingToSteal({a_1, a_2}, a_3)) ::: Muntz becomes hostile, believing Carl and Russell have been attempting to steal the bird.  ",
        "FleesWith({a_1, a_2}, a_3, a_5) ::: Carl and Russell flee with Kevin and Dug.  ",
        "CatchesUpWith(a_6, {a_1, a_2}) ∧ Captures(a_6, a_3) ::: Muntz catches up with them and captures Kevin.  ",
        "StartsFireBeneath(a_6, c_5) ∧ ForcesChoice(a_6, a_1, a_3) ::: Muntz starts a fire beneath Carl's house, forcing Carl to choose between saving the house or Kevin.  ",
        "RushesToPutOutFire(a_1) ∧ Takes(a_6, a_3) ::: Carl rushes to put out the fire, allowing Muntz to take the bird.  ",
        "Reaches({a_1, a_2}, b_3) ::: Carl and Russell eventually reach Paradise Falls.  ",
        "DisappointedIn(a_2, a_1, a_3) ::: Russell is disappointed in Carl over his decision to abandon Kevin.  ",
        "",
        "Rules:  ",
        "BecomesHostile(a_6) → Believes(a_6, AttemptingToSteal({a_1, a_2}, a_3)) ::: If Charles Muntz becomes hostile, then he believes Carl and Russell have"
      ]
    },
    {
      "id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "Home(a_1) ::: Carl's home  ",
        "Scrapbook(a_4) ::: Ellie's childhood scrapbook  ",
        "FilledIn(a_4, pages) ::: Ellie filled in the blank pages  ",
        "PhotosOfMarriage(a_4) ::: Photos of Carl and Ellie's marriage in scrapbook  ",
        "NoteThankingAdventure(a_4) ::: Note thanking Carl for the \"adventure\"  ",
        "EncourageNewAdventure(a_4) ::: Note encouraging Carl to have a new adventure  ",
        "LooksThrough(a_1, a_4) ::: Carl looks through Ellie's scrapbook  ",
        "GoesToFind(a_1, a_2) ::: Carl goes to find Russell  ",
        "SailingOffWithBalloons(a_2) ::: Russell is sailing off with balloons  ",
        "Saves(a_2, a_3) ::: Russell is going to save Kevin  ",
        "EmptiesHouse(a_1, c_5) ::: Carl empties the house of furniture and possessions  ",
        "LightensHouse(a_1, c_5) ::: Carl lightens the house  ",
        "Pursues(a_1, a_2) ::: Carl pursues Russell  ",
        "CapturedBy(a_2, Muntz) ::: Russell is captured by Muntz  ",
        "BoardInFlight(a_1, c_1) ::: Carl boards the dirigible in flight  ",
        "Frees(a_1, a_2) ::: Carl frees Russell  ",
        "Frees(a_1, a_3) ::: Carl frees Kevin  ",
        "Defeats(a_5, Alpha) ::: Dug defeats Alpha  ",
        "BecomesLeader(a_5, dogs) ::: Dug becomes dogs' new leader  ",
        "Pursues(Muntz, a_1) ::: Muntz pursues Carl  ",
        "Pursues(Muntz, a_2) ::: Muntz pursues Russell  ",
        "Pursues(Muntz, a_3) ::: Muntz pursues Kevin  ",
        "CorneredInside(Muntz, a_5, a_3, a_2, c_5) ::: Muntz corners Dug, Kevin, and Russell inside Carl's house  ",
        "LuresBack(a_1, a_3, c_5) ::: Carl lures Kevin back onto the airship  ",
        "ClingsToBack(a_5, a_3) ::: Dug clings to Kevin's back  ",
        "ClingsToBack(a_2, a_3) ::: Russell clings to Kevin's back  ",
        "SnagsFootOnBalloonLines(Muntz) ::: Muntz snags his foot on balloon lines  ",
        "FallsToDeath(Muntz) ::: Muntz falls to his death  ",
        "DescendsOutOfSight(c_5) ::: The house descends out of sight through the clouds  ",
        "",
        "Premises:  ",
        "LooksThrough(a_1, a_4) ∧ FilledIn(a_4, pages) ∧ PhotosOfMarriage(a_4) ∧ NoteThankingAdventure(a_4) ∧ EncourageNewAdventure(a_4) ::: Carl looks through Ellie's scrapbook, which contains photos of their marriage and a note thanking him for the adventure and encouraging a new one.  ",
        "GoesToFind(a_1, a_2) ∧ SailingOffWithBalloons(a_2) ∧ Saves(a_2, a_3) ::: Carl goes to find Russell, who is sailing off with balloons to save Kevin.  ",
        "EmptiesHouse(a_1, c_5) ∧ LightensHouse(a_1, c_5) ∧ Pursues(a_1, a_2) ::: Carl empties and lightens his house and pursues Russell.  ",
        "CapturedBy(a_2, Muntz) ∧ BoardInFlight(a_1, c_1) ∧ Frees(a_1, a_2) ∧ Frees(a_1, a_3) ::: Russell is captured by Muntz, but Carl boards the dirigible in flight and frees Russell and Kevin.  ",
        "Defeats(a_5, Alpha) ∧ BecomesLeader(a_5, dogs) ::: Dug defeats Alpha and becomes the dogs' new leader.  ",
        "Pursues(Muntz, a_1) ∧ Pursues(Muntz, a_2) ∧ Pursues(Muntz, a_3) ∧ CorneredInside(Muntz, a_5, a_3, a_2, c_5) ::: Muntz pursues Carl, Russell, and Kevin, finally cornering Dug, Kevin, and Russell inside Carl's house.  ",
        "LuresBack(a_1, a_3, c_5) ∧ ClingsToBack(a_5, a_3) ∧ ClingsToBack(a_2, a_3) ::: Carl lures Kevin back onto the airship with Dug and Russell clinging to her back.  ",
        "SnagsFootOnBalloonLines(Muntz)"
      ]
    },
    {
      "id": "145200abf14baeffa646797dfbfa58861cb4b079",
      "paragraph_id": 4,
      "fols": [
        "Predicates:  ",
        "Reunite(x, y, z) ::: x reunites y with z  ",
        "FlyBack(x, y, z) ::: x flies y back to z  ",
        "Present(x, y, z) ::: x presents y with z  ",
        "Give(x, y, z) ::: x gives y z  ",
        "MakePromise(x, y, z) ::: x and y make promise z  ",
        "EnjoyTogether(x, y, z) ::: x, y, and z enjoy something together  ",
        "LandOn(x, y) ::: x lands on y  ",
        "FulfillPromise(x, y) ::: x fulfills promise y  ",
        "Beside(x, y) ::: x is beside y  ",
        "",
        "Premises:  ",
        "Reunite(a_1, a_2, a_3) ::: Carl reunites Russell with Kevin  ",
        "FlyBack(a_1, c_1, b_1) ::: Carl flies the dirigible back to the city  ",
        "Present(a_1, a_2, c_2) ::: Carl presents Russell with his final badge  ",
        "Give(a_4, a_1, c_3) ::: Ellie gave Carl the grape soda cap  ",
        "MakePromise(a_1, a_4, d_1) ::: Carl and Ellie made their promise  ",
        "EnjoyTogether(a_1, a_2, a_5) ∧ EnjoyTogether(a_1, a_2, c_4) ::: Carl, Russell, and Dug enjoy ice cream together  ",
        "LandOn(c_5, b_2) ::: Carl's house has landed on the cliff  ",
        "Beside(b_2, b_3) ::: The cliff is beside Paradise Falls  ",
        "FulfillPromise(c_5, d_1) ::: Carl's house fulfills his promise to Ellie"
      ]
    }
  ],
  "1528f4c003dde308ae74bdec458466765944ca6a": [
    {
      "id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "TravelAgent(x) ::: x is a travel agent  ",
        "FindsBody(x, y) ::: x finds body y  ",
        "Body(y) ::: y is a body  ",
        "Dumpster(z) ::: z is a dumpster  ",
        "LeftBy(y, h) ::: body y was left by hitmen h  ",
        "MafiaHitmen(h) ::: h is a group of Mafia hitmen  ",
        "InDebt(x) ::: x is heavily in debt  ",
        "AttemptingToFindCureFor(x, y, s) ::: x is attempting to find a cure for y's syndrome s  ",
        "StagingAttackWithBody(x, y) ::: x stages a disfiguring animal attack with body y  ",
        "CashInLifeInsurance(x, p) ::: x attempts to cash in life insurance policy p  ",
        "LifeInsurancePolicy(p) ::: p is a life insurance policy  ",
        "MissingBrother(x, b) ::: b is x's missing brother  ",
        "RequiresCorpse(p) ::: policy p requires a corpse  ",
        "WifeOf(x, y) ::: y is the wife of x  ",
        "ApparentSyndrome(y, s) ::: y apparently has syndrome s  ",
        "TouretteSyndrome(s) ::: s is Tourette Syndrome  ",
        "",
        "Entities:  ",
        "Paul: a_1  ",
        "Margaret: a_3  ",
        "Body: b_0  ",
        "MafiaHitmen: a_8  ",
        "LifeInsurancePolicy: b_2 (not given, but we can introduce as b_2)  ",
        "TouretteSyndrome: s_0 (introduced for clarity)  ",
        "",
        "Premises:  ",
        "TravelAgent(a_1) ::: Paul is a travel agent  ",
        "FindsBody(a_1, b_0) ::: Paul finds a body b_0  ",
        "Body(b_0) ::: b_0 is a body  ",
        "LeftBy(b_0, a_8) ::: The body b_0 was left by Mafia hitmen a_8  ",
        "MafiaHitmen(a_8) ::: a_8 are Mafia hitmen  ",
        "InDebt(a_1) ::: Paul is heavily in debt  ",
        "AttemptingToFindCureFor(a_1, a_3, s_0) ::: Paul is attempting to find a cure for Margaret's apparent Tourette Syndrome  ",
        "WifeOf(a_1, a_3) ::: Margaret is Paul's wife  ",
        "ApparentSyndrome(a_3, s_0) ::: Margaret apparently has Tourette Syndrome  ",
        "StagingAttackWithBody(a_1, b_0) ::: Paul stages a disfiguring animal attack with the body b_0  ",
        "CashInLifeInsurance(a_1, b_2) ::: Paul attempts to cash in a life insurance policy b_2  ",
        "LifeInsurancePolicy(b_2) ::: b_2 is a life insurance policy  ",
        "MissingBrother(a_1, a_4) ::: Ted (a_4) is Paul's missing brother (introduced as a_4)  ",
        "RequiresCorpse(b_2) ::: The life insurance policy requires a corpse"
      ]
    },
    {
      "id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "Police(x) ::: x is a local police officer.  ",
        "Convinced(x) ::: x is convinced.  ",
        "InsuranceAgent(x) ::: x is an insurance agent.  ",
        "PromotionHungry(x) ::: x is promotion-hungry.  ",
        "Hitmen(x) ::: x is a hitman.  ",
        "DumpedBody(x) ::: x dumped the body.  ",
        "SearchingForCorpse(x) ::: x is searching for the corpse.  ",
        "Hostage(x, y) ::: x takes y hostage.  ",
        "EnsureGetBody(x) ::: x ensures that they will get the body.  ",
        "HavingProblemsWith(x, y) ::: x is having problems with y.  ",
        "Neglects(x, y) ::: x neglects y.  ",
        "WorksUpInFirm(x) ::: x works his way up in his firm.  ",
        "",
        "Premises:  ",
        "InsuranceAgent(a_4) ∧ PromotionHungry(a_4) ∧ ¬Convinced(a_4) ::: Ted Waters is a promotion-hungry insurance agent who is not convinced.  ",
        "Hitmen(a_8) ∧ DumpedBody(a_8) ∧ SearchingForCorpse(a_8) ::: The hitmen who dumped the body are searching for the corpse.  ",
        "∀x (Hitmen(x) ∧ Hostage(x, a_3) → EnsureGetBody(x)) ::: Hitmen take a hostage to ensure that hitmen will get the body.  ",
        "Hostage(a_8, a_3) ::: The hitmen take Margaret hostage.  ",
        "HavingProblemsWith(a_4, a_5) ∧ Neglects(a_4, a_5) ∧ WorksUpInFirm(a_4) ::: Ted is having problems with his girlfriend Tiffany, whom he neglects as he works his way up in his firm."
      ]
    },
    {
      "id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "Brother(a_2, a_1) ::: Raymond is Paul's brother.  ",
        "Missing(a_2) ::: Raymond is missing.  ",
        "ReturnsHome(a_2) ::: Raymond returns home.  ",
        "BeatsUp(a_2, a_1) ::: Raymond beats up Paul.  ",
        "DemandsPortion(a_2, b_1) ::: Raymond demands a portion of the insurance money.  ",
        "Suggests(a_1, Assaulted(a_4, a_2)) ::: Paul suggests that Ted assaulted Raymond.  ",
        "SpeedsUpDelivery(a_1, b_1) ::: Paul speeds up the delivery of the insurance money.  ",
        "HasBodyExhumed(a_1) ::: Paul has the body exhumed.  ",
        "AgreesExchange(a_1, a_3, b_1) ::: Paul agrees to exchange the body and a portion of the money for Margaret.  ",
        "Fears(a_1, AttemptKill(a_2, a_3)) ::: Paul fears Raymond will attempt to kill Margaret.  ",
        "ConsidersKilling(a_1, a_2) ::: Paul considers killing Raymond.  ",
        "CannotBringHimselfToDo(a_1, KillInSleep(a_2)) ::: Paul cannot bring himself to kill Raymond in his sleep.  ",
        "",
        "Premises:  ",
        "Suggests(a_1, Assaulted(a_4, a_2)) → SpeedsUpDelivery(a_1, b_1) ::: Paul speeds up the delivery of the million dollar insurance payment if Paul suggests that Ted assaulted Raymond.  ",
        "Brother(a_2, a_1) ∧ Missing(a_2) ∧ ReturnsHome(a_2) ∧ BeatsUp(a_2, a_1) ∧ DemandsPortion(a_2, b_1) ::: Raymond is Paul's missing brother who returns home, beats him up, and demands a portion of the insurance money.  ",
        "HasBodyExhumed(a_1) ∧ AgreesExchange(a_1, a_3, b_1) ::: Paul has the body exhumed and agrees to exchange it and a portion of the money for Margaret.  ",
        "Fears(a_1, AttemptKill(a_2, a_3)) ∧ ConsidersKilling(a_1, a_2) ∧ CannotBringHimselfToDo(a_1, KillInSleep(a_2)) ::: Fearing that Raymond will attempt to kill Margaret, Paul considers killing his brother in his sleep, but cannot bring himself to do so."
      ]
    },
    {
      "id": "1528f4c003dde308ae74bdec458466765944ca6a",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "Leaves(a_1, c_2) ::: Paul leaves his brother asleep (c_2 = brother asleep)  ",
        "Meets(a_1, a_8) ::: Paul meets the hit-men  ",
        "Angered(a_2, a_0) ::: Raymond is angered at his brother (a_0 = brother)  ",
        "Arrives(a_2) ::: Raymond arrives  ",
        "Tells(a_7, a_2, info) ::: Insurance agent tells Raymond about his million dollar policy (info = million dollar policy)  ",
        "PullsOut(a_2, b_2) ::: Raymond pulls out a pistol  ",
        "Shoots(a_2, a_3, back) ::: Raymond shoots Margaret in the back  ",
        "Flees(a_3) ::: Margaret flees  ",
        "Shoots(a_6, a_2, stomach) ::: Tim Nelson shoots Raymond in the stomach  ",
        "FindsAlive(a_1, a_3) ::: Paul finds Margaret alive  ",
        "HiddenIn(b_1, b_3) ::: Insurance money is hidden in jacket  ",
        "StopsBullet(b_1) ::: Insurance money stops a bullet  ",
        "SaysGoodbye(a_1, a_2) ::: Paul and Raymond say goodbye  ",
        "Dies(a_2) ::: Raymond dies  ",
        "CommitsFraud(a_1, reasonLoveFor(a_3)) ::: Paul commits fraud out of love for Margaret  ",
        "AppealsTo(a_1, a_4, renewedFeelingsFor(a_5)) ::: Paul appeals to Ted’s renewed feelings for Tiffany  ",
        "LetsGo(a_4, a_1, a_3) ::: Ted lets Paul and Margaret go  ",
        "TakesVacation(a_1, a_3, c_1) ::: Paul takes Margaret on a tropical vacation  ",
        "",
        "Premises:  ",
        "HiddenIn(b_1, b_3) → StopsBullet(b_1) ::: If the insurance money is hidden in a jacket, then the insurance money stops a bullet.  ",
        "CommitsFraud(x, reasonLoveFor(y)) → AppealsTo(x, z, renewedFeelingsFor(w)) ::: If a person commits fraud out of love for a spouse, then the person appeals to renewed feelings of another person.  ",
        "AppealsTo(x, y, _) → LetsGo(y, x, spouseOf(x)) ::: If a person appeals to renewed feelings of another person, then the other person lets the person and the spouse go."
      ]
    }
  ],
  "18a67c48f4afdee5d95afd681e6e1787471b5f30": [
    {
      "id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "DefeatedInBattle(a_1) ::: Conan is defeated in battle  ",
        "Captured(a_1) ::: Conan is captured  ",
        "PlacedInDungeon(a_1) ::: Conan is placed in a monster-infested dungeon  ",
        "FindsAlly(a_1) ::: Conan finds an unexpected ally  ",
        "Escapes(a_1) ::: Conan escapes  ",
        "BelievesDead(a_0) ::: The population of the Aquilonian capital believes Conan is dead  ",
        "Riots(a_0) ::: The population riots  ",
        "ReadyToAcceptAlternativeKing(a_0) ::: The population is ready to accept an alternative King  ",
        "",
        "Premises:  ",
        "(DefeatedInBattle(a_1) ∧ Captured(a_1) ∧ PlacedInDungeon(a_1)) → (FindsAlly(a_1) ∧ Escapes(a_1)) ::: If Conan is defeated in battle and captured and placed in a monster-infested dungeon, then Conan finds an unexpected ally and escapes.  ",
        "BelievesDead(a_0) → (Riots(a_0) ∧ ReadyToAcceptAlternativeKing(a_0)) ::: If the population of the Aquilonian capital believes Conan is dead, then the population riots and is ready to accept an alternative King."
      ]
    },
    {
      "id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "Conan(a_0) ::: a_0 is Conan  ",
        "He(a_1) ::: a_1 refers to Conan (pronoun)  ",
        "Zenobia(a_2) ::: a_2 is Zenobia  ",
        "GroupOfConspirators(g) ::: g is the group of conspirators  ",
        "Resurrects(g, xaltotun) ::: group g resurrects Xaltotun  ",
        "Defeated(AquilonianArmy, NemediaArmy) ::: Aquilonian army is defeated by Nemedia army  ",
        "Occupies(NemediaArmy, Aquilonia) ::: Nemedia army occupies Aquilonia  ",
        "Captured(a_0) ::: Conan is captured  ",
        "SlatedForExecution(a_0) ::: Conan is slated for execution  ",
        "RisksLifeToFree(a_2, a_0) ::: Zenobia risks her life to free Conan  ",
        "Freed(a_0) ::: Conan is freed  ",
        "",
        "Premises:  ",
        "∃g (GroupOfConspirators(g) ∧ Resurrects(g, xaltotun) → Defeated(AquilonianArmy, NemediaArmy))  ",
        "::: If the group of conspirators resurrects Xaltotun, then the Aquilonian army is defeated by the army of Nemedia.  ",
        "",
        "Defeated(AquilonianArmy, NemediaArmy) → Occupies(NemediaArmy, Aquilonia)  ",
        "::: If the Aquilonian army is defeated by the army of Nemedia, then the army of Nemedia occupies Aquilonia.  ",
        "",
        "Captured(a_0) → SlatedForExecution(a_0)  ",
        "::: If Conan is captured, then Conan is slated for execution.  ",
        "",
        "RisksLifeToFree(a_2, a_0) → Freed(a_0)  ",
        "::: If Zenobia risks her life to free Conan, then Conan is freed."
      ]
    },
    {
      "id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "Quest(a_1, heartOfAhriman) ::: Conan's quest is to retrieve the Heart of Ahriman.  ",
        "Defeat(a_1, wizard) ::: Conan's goal is to defeat the wizard.  ",
        "RegainThrone(a_1) ::: Conan's goal is to regain his throne.  ",
        "TravelThrough(a_1, landsOfHyboria) ::: Conan travels through all the lands of Hyboria.  ",
        "",
        "Premises:  ",
        "Quest(a_1, heartOfAhriman) ∧ Defeat(a_1, wizard) ∧ RegainThrone(a_1) ∧ TravelThrough(a_1, landsOfHyboria) ::: Conan's quest to retrieve the Heart of Ahriman in order to defeat the wizard and regain his throne takes him through all the lands of Hyboria."
      ]
    },
    {
      "id": "18a67c48f4afdee5d95afd681e6e1787471b5f30",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "VowsToMakeQueen(a_1, a_2) ::: He vows to make Zenobia his queen.",
        "",
        "Premises:  ",
        "VowsToMakeQueen(a_1, a_2) ::: After his eventual triumph he vows to make Zenobia his queen."
      ]
    }
  ],
  "1b548ec72908f9447446bdb24e8c179df19a8999": [
    {
      "id": "1b548ec72908f9447446bdb24e8c179df19a8999",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "Captured(a_1) ::: Palamon is captured  ",
        "Captured(a_2) ::: Arcite is captured  ",
        "Imprisoned(a_1) ::: Palamon is imprisoned  ",
        "Imprisoned(a_2) ::: Arcite is imprisoned  ",
        "Duke(a_3) ::: Theseus is a duke  ",
        "DukeOf(a_3, athens) ::: Theseus is duke of Athens  ",
        "BattleAgainst(a_3, creon) ::: Theseus fought a battle against Creon  ",
        "CellInTower(a_1, tower) ::: Palamon’s cell is in the tower  ",
        "CellInTower(a_2, tower) ::: Arcite’s cell is in the tower  ",
        "WindowOverlooks(tower, palaceGarden) ::: The tower’s window overlooks the palace garden  ",
        "WakesEarly(a_1, may) ::: Palamon wakes early in May  ",
        "Sees(a_1, a_4) ::: Palamon sees Emily  ",
        "PickingFlowers(a_4, courtyard) ::: Emily is picking flowers in the courtyard  ",
        "FallsInLove(a_1, a_4) ::: Palamon falls in love with Emily  ",
        "MoanHeardBy(a_1, a_2) ::: Palamon’s moan is heard by Arcite  ",
        "Wakes(a_2) ::: Arcite wakes  ",
        "Sees(a_2, a_4) ::: Arcite sees Emily  ",
        "FallsInLove(a_2, a_4) ::: Arcite falls in love with Emily  ",
        "RecognizesAsMortal(a_1, a_4) ::: Palamon recognizes Emily as mortal  ",
        "NotGoddess(a_4) ::: Emily is not a goddess  ",
        "RightToWoo(a_2, a_4) ::: Arcite has the right to woo Emily  ",
        "",
        "Premises:  ",
        "Captured(a_1) ∧ Captured(a_2) ∧ Imprisoned(a_1) ∧ Imprisoned(a_2) ∧ Duke(a_3) ∧ DukeOf(a_3, athens) ∧ BattleAgainst(a_3, creon) ::: Palamon and Arcite are captured and imprisoned by Theseus, duke of Athens, after his battle against Creon.  ",
        "CellInTower(a_1, tower) ∧ CellInTower(a_2, tower) ∧ WindowOverlooks(tower, palaceGarden) ::: Their cell is in the tower of Theseus’s castle, with a window overlooking the palace garden.  ",
        "WakesEarly(a_1, may) ∧ Sees(a_1, a_4) ∧ PickingFlowers(a_4, courtyard) ∧ FallsInLove(a_1, a_4) ::: Palamon wakes early in May, sees Emily picking flowers, and falls in love with her.  ",
        "MoanHeardBy(a_1, a_2) ∧ Wakes(a_2) ∧ Sees(a_2, a_4) ∧ FallsInLove(a_2, a_4) ::: Palamon’s moan is heard by Arcite, who wakes, sees Emily, and falls in love with her.  ",
        "RecognizesAsMortal(a_1, a_4) ∧ NotGoddess(a_4) → RightToWoo(a_2, a_4) ::: If Palamon first recognizes Emily as mortal and not as a goddess, then Arcite has the right to woo Emily."
      ]
    },
    {
      "id": "1b548ec72908f9447446bdb24e8c179df19a8999",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "ReleasedFromPrison(a_2) ::: Arcite is released from prison.  ",
        "GoodOffices(a_3_friend_pirithoos, a_2) ::: Pirithoos, friend of Theseus, acts to help Arcite.  ",
        "AmendedSentenceToExile(a_2) ::: Arcite's sentence is amended to exile.  ",
        "SecretlyReturnsInDisguise(a_2, athens) ::: Arcite secretly returns to Athens in disguise.  ",
        "EntersService(a_2, a_4_household) ::: Arcite enters service in Emily's household.  ",
        "CloseTo(a_2, a_4) ::: Arcite gets close to Emily.  ",
        "EscapesByDrugging(a_1, jailer) ::: Palamon escapes by drugging the jailer.  ",
        "HidesInGrove(a_1) ::: Palamon hides in a grove.  ",
        "OverhearsSinging(a_1, a_2, about_love_and_fortune) ::: Palamon overhears Arcite singing about love and fortune.",
        "",
        "Premises:  ",
        "ReleasedFromPrison(a_2) ∧ GoodOffices(pirithoos, a_2) → AmendedSentenceToExile(a_2)  ",
        "SecretlyReturnsInDisguise(a_2, athens) ∧ EntersService(a_2, a_4_household) ∧ CloseTo(a_2, a_4)  ",
        "EscapesByDrugging(a_1, jailer) ∧ HidesInGrove(a_1) ∧ OverhearsSinging(a_1, a_2, about_love_and_fortune)"
      ]
    },
    {
      "id": "1b548ec72908f9447446bdb24e8c179df19a8999",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "Duel(a_1, a_2) ::: Palamon and Arcite duel with each other.  ",
        "SentencesToGather(a_3, a_1, 100) ::: Theseus sentences Palamon to gather 100 men.  ",
        "SentencesToGather(a_3, a_2, 100) ::: Theseus sentences Arcite to gather 100 men.  ",
        "FightTournament(a_1, d_0) ::: Palamon fights in the mass judicial tournament.  ",
        "FightTournament(a_2, d_0) ::: Arcite fights in the mass judicial tournament.  ",
        "WinnerMarries(d_0, a_4) ::: The winner of the tournament is to marry Emily.  ",
        "PraysTo(a_1, venus) ::: Palamon prays to Venus.  ",
        "PraysTo(a_4, diana) ::: Emily prays to Diana.  ",
        "PraysTo(a_2, mars) ::: Arcite prays to Mars.  ",
        "LaysDownRules(a_3, d_0) ::: Theseus lays down rules for the tournament.  ",
        "SeriouslyInjured(x) ::: x is seriously injured in the tournament.  ",
        "DraggedOut(x) ::: x is dragged out of the battle.  ",
        "NoLongerInCombat(x) ::: x is no longer in combat.  ",
        "AlmostNoDeaths(d_0) ::: There were almost no deaths on either side in the tournament.  ",
        "",
        "Premises:  ",
        "∀x ((Man(x) ∧ SeriouslyInjured(x)) → DraggedOut(x)) ::: If any man becomes seriously injured in the tournament, then the man must be dragged out of the battle.  ",
        "∀x (DraggedOut(x) → NoLongerInCombat(x)) ::: If a man is dragged out of the battle, then the man is no longer in combat.  ",
        "",
        "Additional implicit premises (from context):  ",
        "Man(a_1) ∧ Man(a_2) ∧ Man(a_3) ::: Palamon, Arcite, and Theseus are men.  ",
        "InTournament(a_1, d_0) ∧ InTournament(a_2, d_0) ::: Palamon and Arcite participate in the tournament d_0."
      ]
    },
    {
      "id": "1b548ec72908f9447446bdb24e8c179df19a8999",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "Wounded(a_1, b_1) ::: Palamon is wounded by a sword.  ",
        "Unhorsed(a_1) ::: Palamon is unhorsed.  ",
        "DeclaresOver(a_3, fight) ::: Theseus declares the fight to be over.  ",
        "Wins(a_2, battle) ::: Arcite wins the battle.  ",
        "MortallyInjured(a_2) ::: Arcite is mortally injured.  ",
        "ThrownOff(a_2, b_2) ::: Arcite is thrown off by his horse.  ",
        "FallenOn(a_2, b_2) ::: Arcite is fallen on by his horse.  ",
        "Dies(a_2) ::: Arcite dies.  ",
        "Tells(a_2, a_4, marry(a_4, a_1)) ::: Arcite tells Emily she should marry Palamon.  ",
        "Marries(a_1, a_4) ::: Palamon marries Emily.  ",
        "PrayerFulfilled(all) ::: All three prayers are fulfilled.  ",
        "RefersTo(a_3, c_1) ::: Theseus refers to the First Mover.  ",
        "Creates(c_1, c_5) ::: The First Mover creates the Great Chain of Love.  ",
        "DescribesInevitabilityOfDeath(a_3) ::: Theseus describes inevitability of death.  ",
        "ExampleOfDeath(a_3, b_3) ::: Oak tree as example of death.  ",
        "ExampleOfDeath(a_3, b_4) ::: Stone as example of death.  ",
        "ExampleOfDeath(a_3, b_5) ::: River as example of death.  ",
        "SubjectToDeath(d_1) ::: Classes of medieval society are subject to death.  ",
        "DiscussesProperResponse(a_3) ::: Theseus discusses proper response to death.  ",
        "MustDieWhenTimeComes(man) ::: Every man must die when his time comes.  ",
        "BestToDieWithGoodName(man) ::: It is best to die with a good name.  ",
        "BestToDieWithReputation(man) ::: It is best to die with a reputation.  ",
        "BestToDieOnGoodTerms(man) ::: It is best to die on good terms with friends.  ",
        "BestToDieWithHonour(man) ::: It is best to die having died with honour.  ",
        "Comforts(a_3, a_4) ::: Theseus comforts Emily.  ",
        "Comforts(a_3, a_1) ::: Theseus comforts Palamon.  ",
        "DiedWithHonour(a_2) ::: Arcite died with honour.  ",
        "AcquittedWell(a_2) ::: Arcite acquitted himself well.  ",
        "FeatOfArms(a_2) ::: Arcite performed a feat of arms.  ",
        "",
        "Premises:  ",
        "Dies(a_2) → Tells(a_2, a_4, marry(a_4, a_1)) ::: If Arcite dies, then he tells Emily she should marry Palamon.  ",
        "∀x (MustDieWhenTimeComes(x) → BestToDieWithGoodName(x) ∧ BestToDieWithReputation(x) ∧ BestToDieOnGoodTerms(x) ∧ BestToDieWithHonour(x)) ::: If every man must die when his time comes, then it is best to die with a good name, reputation, on good terms with friends, and with honour.  ",
        "Wounded(a_1, b_1) ∧ Unhorsed(a_1) ∧ DeclaresOver(a_3, fight) ∧ Wins(a_2, battle) ::: Palamon is wounded and unhorsed; Theseus declares the fight over; Arcite wins the battle.  ",
        "MortallyInjured(a_2) ∧ ThrownOff(a_2, b_2) ∧ FallenOn(a_2, b_2) ∧ Dies(a_2) ::: Arcite is mortally injured by being thrown off and fallen on by his horse and dies.  ",
        "Tells(a_2, a_4, marry(a_4, a_1)) ∧ Marries(a_1, a_4) → PrayerFulfilled(all) ::: Arcite tells Emily to marry Palamon, Palamon marries Emily, thus all prayers are fulfilled.  ",
        "RefersTo(a_3, c_1) ∧ Creates(c_1, c_5) ::: Theseus refers to the First Mover who creates the Great Chain of Love.  ",
        "DescribesInevitabilityOfDeath(a_3) ∧ ExampleOfDeath(a_3, b_3) ∧ ExampleOfDeath(a_3, b_4) ∧ ExampleOfDeath(a_3, b_5) ∧ SubjectToDeath(d_1) ::: Theseus describes inevitability of death using oak tree, stone, river as examples and states all classes of medieval society are subject to death."
      ]
    }
  ],
  "21813f2122fca16d05e89d44f4521f7da8a8f3b7": [
    {
      "id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "Elderly(x) ::: x is elderly  ",
        "OnDeathbed(x) ::: x is on her deathbed  ",
        "InHospital(x, y) ::: x is in hospital y  ",
        "Approaching(event, time) ::: event is approaching at time  ",
        "Asks(x, y, z) ::: x asks y to do z  ",
        "ReadsAloudFrom(y, z) ::: y reads aloud from z  ",
        "DiaryOf(z, x) ::: z is the diary of x  ",
        "Person(x) ::: x is a person  ",
        "Event(x) ::: x is an event  ",
        "Location(x) ::: x is a location  ",
        "TimePeriod(x) ::: x is a time period  ",
        "",
        "Premises:  ",
        "Elderly(a_1) ∧ OnDeathbed(a_1) ∧ InHospital(a_1, c_2) ∧ Approaching(b_1, d_0) ::: In 2005, elderly Daisy Fuller is on her deathbed in a New Orleans hospital as Hurricane Katrina approaches  ",
        "Asks(a_1, a_3, ReadsAloudFrom(a_3, d_2)) ∧ DiaryOf(d_2, a_2) ::: Daisy asks her daughter Caroline to read aloud from the diary of Benjamin Button"
      ]
    },
    {
      "id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "BornWithAppearanceAndMaladies(a_2) ::: a_2 (the boy) was born with the appearance and physical maladies of an elderly man.  ",
        "MotherDiedAfterBirth(a_2, a_3) ::: The mother of a_2 (the baby) died after giving birth.  ",
        "Father(a_2, thomasButton) ::: Thomas Button is the father of a_2 (the baby).  ",
        "AbandonedOnPorch(thomasButton, a_2, c_3) ::: Thomas Button abandoned a_2 (the baby) on the porch of the nursing home (c_3).  ",
        "Worker(a_0, c_3) ::: a_0 (Queenie and Mr. \"Tizzy\" Weathers) are workers at the nursing home (c_3).  ",
        "Found(a_0, a_2) ::: a_0 found a_2 (the baby).  ",
        "CaresFor(Queenie, a_2) ::: Queenie decides to care for a_2 (the baby) as her own.",
        "",
        "Premises:  ",
        "BornWithAppearanceAndMaladies(a_2) ∧ MotherDiedAfterBirth(a_2, a_3) ∧ Father(a_2, thomasButton) ∧ AbandonedOnPorch(thomasButton, a_2, c_3) ∧ Worker(a_0, c_3) ∧ Found(a_0, a_2) ∧ CaresFor(Queenie, a_2)  ",
        "::: On the evening of November 11, 1918, a boy was born with the appearance and physical maladies of an elderly man; the baby's mother died after giving birth; the father, Thomas Button, abandoned the infant on the porch of a nursing home; Queenie and Mr. \"Tizzy\" Weathers, workers at the nursing home, found the baby; Queenie decided to care for him as her own."
      ]
    },
    {
      "id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "LearnsToWalk(a_2, year1925) ::: Benjamin learns to walk in 1925.  ",
        "DeclaresMiracle(a_2) ::: Benjamin declares it a miracle after learning to walk.  ",
        "UsesCrutches(a_2) ::: Benjamin uses crutches in place of a wheelchair.  ",
        "Meets(a_2, a_1, dateThanksgiving1930) ::: Benjamin meets Daisy on Thanksgiving 1930.  ",
        "Age(a_1, 7) ::: Daisy is seven years old.  ",
        "GrandmotherLivesIn(a_1, c_3) ::: Daisy’s grandmother lives in the nursing home.  ",
        "BecomeFriends(a_2, a_1) ::: Benjamin and Daisy become good friends.  ",
        "AcceptsWork(a_2, tugboat) ::: Benjamin accepts work on a tugboat.  ",
        "CaptainOf(mikeClark, tugboat) ::: Mike Clark is the captain of the tugboat.  ",
        "Meets(a_2, thomasButton) ::: Benjamin meets Thomas Button.  ",
        "FatherOf(thomasButton, a_2) ::: Thomas Button is Benjamin’s father (unknown to Benjamin).  ",
        "LeavesForLongTermWork(a_2, newOrleans, autumn1936) ::: Benjamin leaves New Orleans in Autumn 1936 for long-term work with the tugboat crew.  ",
        "AcceptedInto(a_1, danceCompany) ::: Daisy is accepted into a dance company.  ",
        "ChoreographerOf(georgeBalanchine, danceCompany) ::: George Balanchine is the choreographer of the dance company.  ",
        "BenjaminUsesCrutchesAfterLearningToWalk(a_2) ::: Benjamin uses crutches after learning to walk.  ",
        "",
        "Premises:  ",
        "LearnsToWalk(a_2, year1925) → DeclaresMiracle(a_2) ∧ UsesCrutches(a_2) ::: After Benjamin learns to walk in 1925, he declares it a miracle and uses crutches instead of a wheelchair.  ",
        "Meets(a_2, a_1, dateThanksgiving1930) ∧ Age(a_1, 7) ∧ GrandmotherLivesIn(a_1, c_3) → BecomeFriends(a_2, a_1) ::: Benjamin meets seven-year-old Daisy whose grandmother lives in the nursing home, and they become good friends.  ",
        "AcceptsWork(a_2, tugboat) ∧ CaptainOf(mikeClark, tugboat) ::: Benjamin accepts work on a tugboat captained by Mike Clark.  ",
        "Meets(a_2, thomasButton) ∧ FatherOf(thomasButton, a_2) ∧ ¬RevealsFatherhood(thomasButton, a_2) ::: Benjamin meets Thomas Button, who does not reveal he is Benjamin’s father.  ",
        "LeavesForLongTermWork(a_2, newOrleans, autumn1936) ::: Benjamin leaves New Orleans in Autumn 1936 for long-term work with the tugboat crew.  ",
        "AcceptedInto(a_1, danceCompany) ∧ ChoreographerOf(georgeBalanchine, danceCompany) ::: Daisy is accepted into a dance company in New York City under choreographer George Balanchine.  ",
        "LearnsToWalk(a_2, year1925) → UsesCrutches(a_2) ::: Benjamin uses crutches after learning to walk."
      ]
    },
    {
      "id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "InYear(x, y) ::: event or action x occurs in year y  ",
        "InLocation(x, y) ::: person or event x is in location y  ",
        "HasAffair(x, y) ::: person x has an affair with person y  ",
        "Spouse(x, y) ::: person x is spouse of person y  ",
        "Attacks(x, y) ::: entity x attacks entity y  ",
        "Volunteers(x, y) ::: person x volunteers entity y (e.g., boat)  ",
        "AssignedTo(x, y) ::: crew or person x is assigned to duty y  ",
        "Finds(x, y) ::: entity x finds entity y  ",
        "Surfaces(x) ::: submarine x surfaces  ",
        "SteersTowards(x, y) ::: person x steers vessel towards y  ",
        "FiresOn(x, y) ::: gunner x fires on y  ",
        "Kills(x, y) ::: x kills y  ",
        "Rams(x, y) ::: vessel x rams vessel y  ",
        "Explodes(x) ::: vessel x explodes  ",
        "Sinks(x) ::: vessel x sinks  ",
        "RescuedBy(x, y) ::: person x is rescued by y  ",
        "CrewMember(x) ::: x is a crew member  ",
        "NextDay(x) ::: event x occurs the next day  ",
        "",
        "Premises:  ",
        "InYear(affair_b_0, year1941) ::: Benjamin is in Murmansk in 1941 and begins an affair  ",
        "InLocation(benjamin_a_2, murmansk_c_0) ::: Benjamin is in Murmansk  ",
        "HasAffair(benjamin_a_2, elizabeth_abbott_a_5) ::: Benjamin has an affair with Elizabeth Abbott  ",
        "Spouse(elizabeth_abbott_a_5, british_trade_minister_a_6) ::: Elizabeth Abbott is wife of British Trade Minister  ",
        "Attacks(japan_b_2, pearl_harbor_b_3) ::: Japan attacks Pearl Harbor  ",
        "Volunteers(mike_a_7, boat_b_4) ::: Mike volunteers the boat for U.S. Navy  ",
        "AssignedTo(crew_a_8, salvage_duties_b_5) ::: Crew assigned to salvage duties  ",
        "Finds(tugboat_b_4, sunken_transport_b_6) ::: Tugboat finds sunken U.S. transport and bodies  ",
        "Surfaces(german_submarine_b_7) ::: German submarine surfaces  ",
        "SteersTowards(mike_a_7, german_submarine_b_7) ::: Mike steers tugboat towards submarine  ",
        "FiresOn(german_gunner_a_9, tugboat_b_4) ::: German gunner fires on tugboat  ",
        "Kills(german_gunner_a_9, crew_a_8) ::: Gunner kills most of crew including Mike  ",
        "Rams(tugboat_b_4, german_submarine_b_7) ::: Tugboat rams German submarine  ",
        "Explodes(german_submarine_b_7) ::: German submarine explodes  ",
        "Sinks(tugboat_b_4) ::: Tugboat sinks  ",
        "Sinks(german_submarine_b_7) ::: German submarine sinks  ",
        "RescuedBy(benjamin_a_2, us_navy_ships_a_10) ::: Benjamin rescued by U.S. Navy ships  ",
        "RescuedBy(another_crewman_a_11, us_navy_ships_a_10) ::: Another crewman rescued by U.S. Navy ships  ",
        "NextDay(rescue_event_b_8) ::: Rescue occurs the next day  ",
        "",
        "Rule Premise:  ",
        "(Surfaces(german_submarine_b_7) ∧ Rams(tugboat_b_4, german_submarine_b_7)) → (Explodes(german_submarine_b_7) ∧ Sinks(tugboat_b_4) ∧ Sinks(german_submarine_b_7)) ::: If a German submarine surfaces and the tugboat rams it, then the submarine explodes and both vessels sink."
      ]
    },
    {
      "id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 4,
      "fols": [
        "Predicates:  ",
        "Returns(a_2, c_0) ::: Benjamin returns to New Orleans  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1, d_0) ::: Benjamin reunites with Queenie in May 1945 (if time needed)  ",
        "Reunites(a_2, a_1, d_3) ::: Benjamin reunites with Queenie in May 1945 (if time needed)  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie (time unspecified)  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites(a_2, a_1) ::: Benjamin reunites with Queenie  ",
        "Reunites"
      ]
    },
    {
      "id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 5,
      "fols": [
        "Predicates:",
        "Visit(a_2, a_1, year1947) ::: Benjamin visits Daisy in 1947  ",
        "UnannouncedVisit(a_2, a_1, year1947) ::: Benjamin's visit to Daisy in 1947 is unannounced  ",
        "DepartUponSeeingLove(a_2, a_1) ::: Benjamin departs upon seeing Daisy has fallen in love with someone else  ",
        "DancingCareerEnds(a_1, year1954) ::: Daisy's dancing career ends in 1954  ",
        "LegCrushedInAccident(a_1, accidentParis) ::: Daisy's leg is crushed in an automobile accident in Paris  ",
        "AmazedByYouthfulAppearance(a_1, a_2) ::: Daisy is amazed by Benjamin's youthful appearance when he visits  ",
        "FrustratedByInjuries(a_1) ::: Daisy is frustrated by her injuries  ",
        "TellsStayOutOfLife(a_1, a_2) ::: Daisy tells Benjamin to stay out of her life  ",
        "",
        "Premises:",
        "Visit(a_2, a_1, year1947) ∧ UnannouncedVisit(a_2, a_1, year1947) ::: In 1947, Benjamin visits Daisy unannounced  ",
        "DepartUponSeeingLove(a_2, a_1) ::: Benjamin departs upon seeing Daisy has fallen in love with someone else  ",
        "DancingCareerEnds(a_1, year1954) ∧ LegCrushedInAccident(a_1, accidentParis) ::: Daisy's dancing career ends in 1954 when her leg is crushed in an automobile accident in Paris  ",
        "AmazedByYouthfulAppearance(a_1, a_2) ∧ FrustratedByInjuries(a_1) ∧ TellsStayOutOfLife(a_1, a_2) ::: When Benjamin visits her, Daisy is amazed by his youthful appearance but frustrated by her injuries and tells him to stay out of her life"
      ]
    },
    {
      "id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 6,
      "fols": [
        "Predicates:  ",
        "Returns(a_1, newOrleans, spring1962) ::: Daisy returns to New Orleans in spring 1962.  ",
        "Reunites(a_1, a_2, spring1962) ::: Daisy reunites with Benjamin in spring 1962.  ",
        "ComparableAge(a_1, a_2, spring1962) ::: Daisy and Benjamin are of comparable physical age in spring 1962.  ",
        "FallInLove(a_1, a_2, spring1962) ::: Daisy and Benjamin fall in love in spring 1962.  ",
        "GoSailingTogether(a_1, a_2, spring1962) ::: Daisy and Benjamin go sailing together in spring 1962.  ",
        "ReturnToLearn(a_1, a_2, queenieDied) ::: Daisy and Benjamin return to learn that Queenie has died.  ",
        "MoveInTogether(a_1, a_2, afterQueenieDied) ::: Daisy and Benjamin move in together after Queenie’s death.  ",
        "OpenBalletStudio(a_1, before1967) ::: Daisy has opened a ballet studio by 1967.  ",
        "TellPregnant(a_1, a_2, 1967) ::: Daisy tells Benjamin she is pregnant in 1967.  ",
        "GiveBirth(a_1, a_3, spring1968) ::: Daisy gives birth to Caroline in spring 1968.  ",
        "BelievesCannotBeFather(a_2, a_3, dueToReverseAging) ::: Benjamin believes he cannot be a proper father to Caroline due to his reverse aging.  ",
        "Departs(a_2, afterSpring1968) ::: Benjamin departs after spring 1968.  ",
        "SellBelongings(a_2, beforeDeparture) ::: Benjamin sells his belongings before departing.  ",
        "LeavesBankAccountBook(a_2, a_1, a_3, beforeDeparture) ::: Benjamin leaves a bank account book holding proceeds behind for Daisy and Caroline before departing.  ",
        "TravelsAlone(a_2, during1970s) ::: Benjamin travels alone during the 1970s.  ",
        "",
        "Premises:  ",
        "Returns(a_1, newOrleans, spring1962) ∧ Reunites(a_1, a_2, spring1962) ∧ ComparableAge(a_1, a_2, spring1962) ∧ FallInLove(a_1, a_2, spring1962) ∧ GoSailingTogether(a_1, a_2, spring1962) ::: Daisy returns to New Orleans in spring 1962, reunites with Benjamin, they are of comparable age, fall in love, and go sailing together.  ",
        "ReturnToLearn(a_1, a_2, queenieDied) ∧ MoveInTogether(a_1, a_2, afterQueenieDied) ::: They return to learn Queenie has died and then move in together.  ",
        "OpenBalletStudio(a_1, before1967) ∧ TellPregnant(a_1, a_2, 1967) ∧ GiveBirth(a_1, a_3, spring1968) ::: By 1967 Daisy has opened a ballet studio, tells Benjamin she is pregnant, and gives birth to Caroline in spring 1968.  ",
        "BelievesCannotBeFather(a_2, a_3, dueToReverseAging) ∧ SellBelongings(a_2, beforeDeparture) ∧ LeavesBankAccountBook(a_2, a_1, a_3, beforeDeparture) ∧ Departs(a_2, afterSpring1968) ∧ TravelsAlone(a_2, during1970s) ::: Benjamin believes he cannot be a proper father due to reverse aging, sells belongings, leaves a bank account book for Daisy and Caroline, departs after spring 1968, and travels alone during the 1970s."
      ]
    },
    {
      "id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 7,
      "fols": [
        "Predicates:  ",
        "Returns(a_2, a_1, year1980) ::: Benjamin returns to Daisy in 1980.  ",
        "Married(a_1) ::: Daisy is married.  ",
        "Introduces(a_1, a_2, a_5) ::: Daisy introduces Benjamin to a_5 (her husband and daughter as a family friend).  ",
        "FamilyFriend(a_2, a_5) ::: Benjamin is a family friend to Daisy’s husband and daughter.  ",
        "RightToLeave(a_1, a_2) ::: Daisy admits Benjamin was right to leave.  ",
        "CouldNotCopeOtherwise(a_1) ::: Daisy could not have coped otherwise.  ",
        "Visits(a_1, a_2, location_hotel) ::: Daisy visits Benjamin at his hotel.  ",
        "SharePassion(a_1, a_2) ::: Daisy and Benjamin share their passion for each other.  ",
        "Part(a_1, a_2) ::: Daisy and Benjamin part once more.",
        "",
        "Premises:  ",
        "Returns(a_2, a_1, year1980)  ",
        "Married(a_1)  ",
        "Introduces(a_1, a_2, a_5)  ",
        "FamilyFriend(a_2, a_5)  ",
        "RightToLeave(a_1, a_2)  ",
        "CouldNotCopeOtherwise(a_1)  ",
        "Visits(a_1, a_2, location_hotel)  ",
        "SharePassion(a_1, a_2)  ",
        "Part(a_1, a_2)",
        "",
        "Note:  ",
        "- a_5 represents Daisy’s husband and daughter collectively (not explicitly given in referring expressions, but implied).  ",
        "- location_hotel is an implicit entity representing Benjamin’s hotel.  ",
        "- The rules section is empty, so no additional implications are added."
      ]
    },
    {
      "id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 8,
      "fols": [
        "Predicates:  ",
        "Widowed(a_1) ::: Daisy is widowed.  ",
        "Contacted(a_4, a_1, d_1) ::: Social workers contacted Daisy in 1990.  ",
        "FoundNameInDiary(a_4, a_1, a_2) ::: Social workers found Daisy’s name in Benjamin’s diary.  ",
        "LivingIn(a_2, c_1, d_1) ::: Benjamin was living in a condemned building in 1990.  ",
        "TakenToHospital(a_2, c_2, d_1) ::: Benjamin was taken to the hospital in 1990.  ",
        "PoorPhysicalCondition(a_2, d_1) ::: Benjamin was in poor physical condition in 1990.  ",
        "DisplayingEarlySignsOfDementia(a_2, d_1) ::: Benjamin was displaying early signs of dementia in 1990.  ",
        "MovesInto(a_1, c_3, d_2) ::: Daisy moved into the nursing home in 1997.  ",
        "CaresFor(a_1, a_2, d_2, d_3) ::: Daisy cared for Benjamin from 1997 until spring 2003.  ",
        "DiesInArms(a_2, a_1, d_3) ::: Benjamin died in Daisy’s arms in spring 2003.  ",
        "PhysicalAge(a_2, infant, d_3) ::: Benjamin was physically an infant at death in spring 2003.  ",
        "ChronologicalAge(a_2, 84, d_3) ::: Benjamin was chronologically 84 years old at death in spring 2003.  ",
        "RevealedStory(a_1, a_3, a_3_father) ::: Daisy revealed the story of Caroline’s father to Caroline.  ",
        "Dies(a_1, before(b_1)) ::: Daisy died as Hurricane Katrina approached.  ",
        "",
        "Premises:  ",
        "Contacted(a_4, a_1, d_1) ∧ FoundNameInDiary(a_4, a_1, a_2) ∧ LivingIn(a_2, c_1, d_1) ∧ TakenToHospital(a_2, c_2, d_1) ∧ PoorPhysicalCondition(a_2, d_1) ∧ DisplayingEarlySignsOfDementia(a_2, d_1) ::: In 1990, social workers contacted widowed Daisy, found her name in Benjamin’s diary, and reported Benjamin was living in a condemned building, taken to hospital in poor condition, and showing early dementia signs.  ",
        "MovesInto(a_1, c_3, d_2) ∧ CaresFor(a_1, a_2, d_2, d_3) ::: Daisy moved into the nursing home in 1997 and cared for Benjamin until spring 2003.  ",
        "DiesInArms(a_2, a_1, d_3) ∧ PhysicalAge(a_2, infant, d_3) ∧ ChronologicalAge(a_2, 84, d_3) ::: Benjamin died in Daisy’s arms in spring 2003, physically an infant but chronologically 84 years old.  ",
        "RevealedStory(a_1, a_3, a_3_father) ∧ Dies(a_1, before(b_1)) ::: Daisy revealed the story of Caroline’s father to Caroline and died as Hurricane Katrina approached."
      ]
    }
  ],
  "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e": [
    {
      "id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "Married(x) ::: x is married  ",
        "LoseMoney(x, y) ::: x loses money y  ",
        "GetMoney(x, y) ::: x gets money y  ",
        "Consent(x, y) ::: x consents to y  ",
        "Marriage(x, y) ::: x is a marriage between persons y  ",
        "SetIn(x, y) ::: x is set in location y  ",
        "FinishedPlayingCards(x, y) ::: x and y have finished playing cards  ",
        "Tells(x, y, z) ::: x tells y about z  ",
        "Love(x, y) ::: x loves y  ",
        "EncouragedToMarry(x, y) ::: x is encouraged to marry y  ",
        "Appears(x) ::: x appears  ",
        "IfThen(p, q) ::: if p then q (used for rules)  ",
        "",
        "Premises:  ",
        "SetIn(act1, chocolateHouse) ::: Act 1 is set in a chocolate house  ",
        "FinishedPlayingCards(mirabell, fainall) ::: Mirabell and Fainall have just finished playing cards  ",
        "Tells(footman, mirabell, Married(waitwell) ∧ Married(foible) ∧ Married(waitwell, foible) ∧ MarriedThisMorning(waitwell, foible)) ::: A footman tells Mirabell that Waitwell and Foible were married that morning  ",
        "Love(mirabell, millamant) ::: Mirabell loves Millamant  ",
        "EncouragedToMarry(mirabell, millamant) ::: Mirabell is encouraged to marry Millamant  ",
        "Appears(witwoud) ∧ Appears(petulant) ::: Witwoud and Petulant appear  ",
        "IfThen(Married(ladyWishfort), LoseMoney(mirabell, sixThousandPounds)) ::: If Lady Wishfort marries then Mirabell loses £6000 of Millamant's inheritance  ",
        "IfThen(Consent(ladyWishfort, Marriage(mirabell, millamant)), GetMoney(mirabell, sixThousandPounds)) ::: Mirabell gets £6000 of Millamant's inheritance if Mirabell makes Lady Wishfort consent to Mirabell's and Millamant's marriage  ",
        "",
        "Additional facts from context:  ",
        "LoseMoney(mirabell, sixThousandPounds) ∧ Money(sixThousandPounds) ∧ Inheritance(sixThousandPounds, millamant) ::: £6000 is Millamant's inheritance that Mirabell can lose  ",
        "Consent(ladyWishfort, Marriage(mirabell, millamant)) → GetMoney(mirabell, sixThousandPounds) ::: Mirabell only gets the money if Lady Wishfort consents to the marriage"
      ]
    },
    {
      "id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "SetIn(act2, stJamesPark) ::: Act 2 is set in St. James’ Park.  ",
        "Discuss(a_4, a_7, hatredOfMen) ::: Mrs. Fainall and Mrs. Marwood are discussing their hatred of men.  ",
        "Accuses(a_2, a_7, loves(a_7, a_6)) ::: Fainall accuses Mrs. Marwood of loving Mirabell.  ",
        "Affair(a_2, a_7) ::: Fainall is having an affair with Mrs. Marwood.  ",
        "Loves(a_7, a_6) ::: Mrs. Marwood loves Mirabell.  ",
        "FormerLover(a_4, a_6) ::: Mrs. Fainall is Mirabell's former lover.  ",
        "Hates(a_4, a_2) ::: Mrs. Fainall hates her husband Fainall.  ",
        "PlotToDeceive(a_4, a_6, a_1, consentToMarriage) ::: Mrs. Fainall and Mirabell plot to deceive Lady Wishfort into giving consent to the marriage.  ",
        "Appears(a_8, stJamesPark) ::: Millamant appears in the park.  ",
        "Displeased(a_8, plan(a_6)) ::: Millamant is displeased with Mirabell’s plan.  ",
        "VagueIdea(a_8, plan(a_6)) ::: Millamant only has a vague idea about Mirabell’s plan.  ",
        "Leaves(a_8, stJamesPark) ::: Millamant leaves the park.  ",
        "Appears(newlyWedServants, stJamesPark) ::: The newly wed servants appear in the park.  ",
        "Reminds(a_6, newlyWedServants, rolesInPlan) ::: Mirabell reminds the newly wed servants of their roles in the plan.  ",
        "",
        "Premises:  ",
        "SetIn(act2, stJamesPark) ::: Act 2 is set in St. James’ Park.  ",
        "Discuss(a_4, a_7, hatredOfMen) ::: Mrs. Fainall and Mrs. Marwood discuss their hatred of men.  ",
        "Accuses(a_2, a_7, loves(a_7, a_6)) ::: Fainall accuses Mrs. Marwood of loving Mirabell.  ",
        "Affair(a_2, a_7) ::: Fainall is having an affair with Mrs. Marwood.  ",
        "Loves(a_7, a_6) ::: Mrs. Marwood loves Mirabell.  ",
        "FormerLover(a_4, a_6) ::: Mrs. Fainall is Mirabell's former lover.  ",
        "Hates(a_4, a_2) ::: Mrs. Fainall hates her husband.  ",
        "PlotToDeceive(a_4, a_6, a_1, consentToMarriage) ::: Mrs. Fainall and Mirabell plot to deceive Lady Wishfort into giving consent to the marriage.  ",
        "Appears(a_8, stJamesPark) ::: Millamant appears in the park.  ",
        "Displeased(a_8, plan(a_6)) ::: Millamant is displeased with Mirabell’s plan.  ",
        "VagueIdea(a_8, plan(a_6)) ::: Millamant only has a vague idea about the plan.  ",
        "Leaves(a_8, stJamesPark) ::: Millamant leaves the park.  ",
        "Appears(newlyWedServants, stJamesPark) ::: The newly wed servants appear in the park.  ",
        "Reminds(a_6, newlyWedServants, rolesInPlan) ::: Mirabell reminds the newly wed servants of their roles in the plan.  ",
        "",
        "Rules:  ",
        "PlotToDeceive(a_4, a_6, a_1, consentToMarriage) ::: Mrs. Fainall and Mirabell plot to deceive Lady Wishfort into giving consent to the marriage."
      ]
    },
    {
      "id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "Marry(x, y) ::: x marries y  ",
        "Disguise(x, y) ::: x is y in disguise  ",
        "Aristocrat(x) ::: x is an aristocrat  ",
        "ServingMan(x) ::: x is a serving man  ",
        "BigamyMarriage(x, y) ::: marriage between x and y is bigamy and cannot go ahead  ",
        "Consent(x, y) ::: x consents to y's marriage  ",
        "HelpOut(x, y) ::: x helps y out of an embarrassing situation  ",
        "PlanDiscussed(x, y) ::: x discusses the plan with y  ",
        "Overheard(x, y) ::: x overhears y  ",
        "TellPlan(x, y) ::: x tells the plan to y  ",
        "TakeMoneyAndGoAway(x, y, z) ::: x decides to take y's money and go away with z  ",
        "",
        "Premises:  ",
        "(Marry(a_1, a_3) ∧ Disguise(a_3, a_3) ∧ Aristocrat(a_1) ∧ ServingMan(a_3)) → BigamyMarriage(a_1, a_3)  ",
        "Consent(a_1, a_6) → HelpOut(a_6, a_1)  ",
        "PlanDiscussed(a_4, a_5) ∧ Overheard(a_7, a_4) ∧ TellPlan(a_7, a_2) → TakeMoneyAndGoAway(a_2, c_0, a_7)  ",
        "",
        "Explanation:  ",
        "- Lady Wishfort (a_1) marries Sir Rowland, who is actually Waitwell (a_3) in disguise, Lady Wishfort is an aristocrat, and Waitwell is a serving man, so the marriage cannot go ahead because it would be bigamy.  ",
        "- If Lady Wishfort consents to Mirabell's (a_6) marriage, then Mirabell will help her out of the embarrassing situation.  ",
        "- Mrs. Fainall (a_4) discusses the plan with Foible (a_5), Mrs. Marwood (a_7) overhears this, tells Fainall (a_2), who then decides to take his wife's money and go away with Mrs. Marwood."
      ]
    },
    {
      "id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "ReceivedLetter(a_1, d_1) ::: Lady Wishfort received a letter about the Sir Rowland plot.  ",
        "AgreesToContract(a_1, a_9, b_0) ::: Lady Wishfort agrees to let Sir Rowland bring a marriage contract that night.  ",
        "BringsContract(a_9, b_0) ::: Sir Rowland brings a marriage contract that night.  ",
        "",
        "Premises:  ",
        "ReceivedLetter(a_1, d_1) → AgreesToContract(a_1, a_9, b_0) ::: If Lady Wishfort receives a letter about the Sir Rowland plot, then Lady Wishfort agrees to let Sir Rowland bring a marriage contract that night.  ",
        "",
        "Note:  ",
        "- a_1 = Lady Wishfort  ",
        "- a_9 = Sir Rowland (introduced here as he is referenced in the context and rules)  ",
        "- d_1 = Sir Rowland plot  ",
        "- b_0 = marriage contract (general)  ",
        "",
        "No other explicit predicates or premises are given for the other characters or events in the context or rules."
      ]
    },
    {
      "id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 4,
      "fols": [
        "Predicates:  ",
        "FoundOut(a_1, d_1) ::: Lady Wishfort has found out the plot.  ",
        "Arrested(a_3) ::: Waitwell has been arrested.  ",
        "Tells(a_4, a_5, Affair(a_4, a_6)) ::: Mrs. Fainall tells Foible that her previous affair with Mirabell is public knowledge.  ",
        "AppearsWith(a_1, a_7) ::: Lady Wishfort appears with Mrs. Marwood.  ",
        "Thanks(a_1, a_7, Unveiling(d_1)) ::: Lady Wishfort thanks Mrs. Marwood for unveiling the plot.  ",
        "Appears(a_2) ::: Fainall appears.  ",
        "Blackmails(a_2, a_1, d_2) ::: Fainall blackmails Lady Wishfort.  ",
        "UsesInfo(a_2, Affair(a_4, a_6) ∧ Contract(b_1)) ::: Fainall uses Mrs. Fainall's affair and Millamant's contract to blackmail Lady Wishfort.  ",
        "Says(a_2, a_1, NeverMarry(a_1) ∧ TransferFortune(a_1, a_2)) ::: Fainall tells Lady Wishfort she should never marry and must transfer her fortune to him.  ",
        "OffersConsent(a_1, a_6, Marriage) ::: Lady Wishfort offers Mirabell her consent to the marriage.  ",
        "CanSave(a_6, a_1, d_3 ∧ d_4) ::: Mirabell can save Lady Wishfort's fortune and honour.  ",
        "Calls(a_6, a_3) ::: Mirabell calls on Waitwell.  ",
        "BringsContract(a_3, b_1) ::: Waitwell brings the contract from before the Fainalls' marriage.  ",
        "GivesPropertyByContract(a_4, a_6, b_1) ::: Mrs. Fainall gives all her property to Mirabell by the premarital contract.  ",
        "NeutralisesBlackmail(d_2) ::: The blackmail attempts are neutralised.  ",
        "RestoresProperty(a_6, a_4) ::: Mirabell restores Mrs. Fainall's property to her.  ",
        "FreeToMarry(a_6, a_8, c_1) ::: Mirabell is free to marry Millamant with the full £6000 inheritance.  ",
        "",
        "Premises:  ",
        "∃b_1 (Contract(b_1) ∧ GivesPropertyByContract(a_4, a_6, b_1)) → NeutralisesBlackmail(d_2)  ",
        "(OffersConsent(a_1, a_6, Marriage) ∧ CanSave(a_6, a_1, d_3 ∧ d_4)) → FreeToMarry(a_6, a_8, c_1)  ",
        "",
        "Additional facts from the context (assertions):  ",
        "FoundOut(a_1, d_1)  ",
        "Arrested(a_3)  ",
        "Tells(a_4, a_5, Affair(a_4, a_6))  ",
        "AppearsWith(a_1, a_7)  ",
        "Thanks(a_1, a_7, Unveiling(d_1))  ",
        "Appears(a_2)  ",
        "Blackmails(a_2, a_1, d_2)  ",
        "UsesInfo(a_2, Affair(a_4, a_6) ∧ Contract(b_1))  ",
        "Says(a_2, a_1, NeverMarry(a_1) ∧ TransferFortune(a_1, a_2))  ",
        "OffersConsent(a_1, a_6, Marriage)  ",
        "CanSave(a_6, a_1, d_3 ∧ d_4)  ",
        "Calls(a_6, a_3)  ",
        "BringsContract(a_3, b_1)  ",
        "GivesPropertyByContract(a_4, a_6, b_1)  ",
        "NeutralisesBlackmail(d_2)  ",
        "RestoresProperty(a_6, a_4)  ",
        "FreeToMarry(a_6, a_8, c_1)"
      ]
    }
  ],
  "2c5f448df18172babaac38806e1fb699a8baf65b": [
    {
      "id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "FelineSibling(x) ::: x is a feline sibling  ",
        "Mother(x, y) ::: x is the mother of y  ",
        "Expect(x, y) ::: x expects y  ",
        "FetchesIndoors(x, y) ::: x fetches y indoors  ",
        "WashAndDress(x, y) ::: x washes and dresses y  ",
        "Friend(x) ::: x is a friend  ",
        "Naughty(x) ::: x is naughty  ",
        "Scratches(x, y) ::: x scratches y  ",
        "Grooms(x, y) ::: x grooms y  ",
        "Dresses(x, y, z) ::: x dresses y in z  ",
        "Clothes(z) ::: z is a type of clothes  ",
        "ChestOfDrawers(x) ::: x is a chest of drawers  ",
        "Fat(x) ::: x is fat  ",
        "BurstsButtons(x) ::: x bursts buttons  ",
        "SewsButtons(x, y) ::: x sews buttons on y  ",
        "",
        "Entities:  ",
        "a_0: all people (general)  ",
        "a_1: Tabitha Twitchit (mother)  ",
        "a_2: Tom Kitten (child)  ",
        "b_1: kittens (group: Mittens, Tom Kitten, Moppet)  ",
        "d_1: tea party (event)  ",
        "",
        "Premises:  ",
        "FelineSibling(b_1_0) ∧ FelineSibling(b_1_1) ∧ FelineSibling(b_1_2) ::: Mittens, Tom Kitten, and Moppet are feline siblings  ",
        "Mother(a_1, b_1_0) ∧ Mother(a_1, b_1_1) ∧ Mother(a_1, b_1_2) ::: Tabitha is the mother of the three kittens  ",
        "Expect(a_1, FineCompany(d_1)) ::: Tabitha expects fine company for tea  ",
        "FetchesIndoors(a_1, b_1_0) ∧ FetchesIndoors(a_1, b_1_1) ∧ FetchesIndoors(a_1, b_1_2) ::: Tabitha fetches the children indoors  ",
        "WashAndDress(a_1, b_1_0) ∧ WashAndDress(a_1, b_1_1) ∧ WashAndDress(a_1, b_1_2) ::: Tabitha washes and dresses the children  ",
        "Naughty(a_2) ::: Tom is very naughty  ",
        "Scratches(a_2, a_1) ∧ Grooms(a_1, a_2) ::: Tom scratches his mother while she grooms him  ",
        "Dresses(a_1, b_1_0, CleanPinaforesTuckers) ∧ Dresses(a_1, b_1_2, CleanPinaforesTuckers) ::: Tabitha dresses Moppet and Mittens in clean pinafores and tuckers  ",
        "Clothes(ElegantUncomfortableClothes) ∧ Dresses(a_1, a_2, ElegantUncomfortableClothes) ::: Tabitha dresses Tom in elegant uncomfortable clothes  ",
        "ChestOfDrawers(Chest) ∧ TakenFrom(ElegantUncomfortableClothes, Chest) ::: The clothes come from a chest of drawers  ",
        "Fat(a_2) ∧ BurstsButtons(a_2) ::: Tom is fat and bursts several buttons  ",
        "SewsButtons(a_1, a_2) ::: Tabitha sews the buttons back on Tom"
      ]
    },
    {
      "id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "TurnInto(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden (c_0)  ",
        "KeepOutOfWay(b_1, a_1) ::: The kittens are kept out of the way by Tabitha  ",
        "Make(a_1, d_1) ::: Tabitha makes hot buttered toast for the party (d_1)  ",
        "TellToKeepClean(a_1, b_1) ::: Tabitha tells the kittens to keep their frocks clean  ",
        "TellToKeepAway(a_1, b_1, b_2) ::: Tabitha tells the kittens to keep away from the Puddle-Ducks  ",
        "TellToKeepAway(a_1, b_1, c_2) ::: Tabitha tells the kittens to keep away from the dirty ash pit (assuming pond c_2 is the ash pit or else define ash pit as a new place)  ",
        "TellToKeepAway(a_1, b_1, a_0) ::: Tabitha tells the kittens to keep away from Sally Henny Penny (a_0 assumed as a person or animal)  ",
        "ClimbUpon(b_1, c_0) ::: The kittens climb upon the garden wall (c_0)  ",
        "LoseClothing(b_1, c_0) ::: The kittens lose some of their clothing climbing the wall  ",
        "DifficultTime(a_2, ClimbTopWall) ::: Tom has a difficult time climbing the wall  ",
        "BreakFerns(a_2) ::: Tom breaks the ferns while climbing  ",
        "ShedButtons(a_2) ::: Tom sheds buttons while climbing  ",
        "Disheveled(a_2) ::: Tom is disheveled when he reaches the top of the wall  ",
        "LoseHat(a_2) ::: Tom loses his hat  ",
        "TryPullTogether(b_1, a_2) ::: The sisters try to pull Tom together  ",
        "BurstButtons(a_2) ::: The rest of Tom’s buttons burst  ",
        "",
        "Premises:  ",
        "TurnInto(a_1, b_1, c_0) ∧ KeepOutOfWay(b_1, a_1) ∧ Make(a_1, d_1) ::: Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party.  ",
        "TellToKeepClean(a_1, b_1) ∧ TellToKeepAway(a_1, b_1, b_2) ∧ TellToKeepAway(a_1, b_1, c_2) ∧ TellToKeepAway(a_1, b_1, a_0) ::: Tabitha tells the kittens to keep their frocks clean and keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks.  ",
        "ClimbUpon(b_1, c_0) ∧ LoseClothing(b_1, c_0) ::: Moppet and Mittens climb upon the garden wall and lose some of their clothing in the ascent.  ",
        "DifficultTime(a_2, ClimbTopWall) ∧ BreakFerns(a_2) ∧ ShedButtons(a_2) ∧ Disheveled(a_2) ∧ LoseHat(a_2) ∧ TryPullTogether(b_1, a_2) ∧ BurstButtons(a_2) ::: Tom has a difficult time climbing the wall, breaking ferns, shedding buttons, is disheveled, loses his hat, and his sisters try to pull him together; the rest of his buttons burst."
      ]
    },
    {
      "id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "MarchAlong(b_2) ::: The Puddle-ducks come marching along the road.  ",
        "MakeSound(b_2, \"pit pat paddle pat\") ::: The Puddle-ducks make the sound \"pit pat paddle pat\".  ",
        "MakeSound(b_2, \"pit pat waddle pat\") ::: The Puddle-ducks make the sound \"pit pat waddle pat\".  ",
        "PutOn(a_0, Clothing) ::: Jemima Puddle-duck and Rebeccah put on some of the dropped clothing.  ",
        "LoseClothing(b_1) ::: The kittens lose the rest of their clothing descending the wall.  ",
        "Invite(a_0, a_2) ::: Moppet invites Mr. Drake Puddle-duck to help dress Tom.  ",
        "PickUp(a_0, Clothing, a_2) ::: Mr. Drake Puddle-duck picks up various articles of Tom's clothing.  ",
        "PutOnSelf(a_0, Clothing) ::: Mr. Drake Puddle-duck puts on the clothing himself.  ",
        "SetOff(b_2) ::: The three ducks set off up the road.  ",
        "Approach(a_1, b_1) ::: Tabitha approaches her three children (the kittens).  ",
        "PullOffWall(a_1, b_1) ::: Tabitha pulls the kittens off the wall.  ",
        "Smack(a_1, b_1) ::: Tabitha smacks the kittens.  ",
        "TakeBackToHouse(a_1, b_1) ::: Tabitha takes the kittens back to the house.  ",
        "NotFitToBeSeen(b_1) ::: The kittens are not fit to be seen.  ",
        "Affronted(a_1) ::: Tabitha is affronted.  ",
        "FriendsArriveSoon(a_1) ::: Tabitha's friends will arrive in a minute.",
        "",
        "Premises:  ",
        "MarchAlong(b_2) ∧ (MakeSound(b_2, \"pit pat paddle pat\") ∧ MakeSound(b_2, \"pit pat waddle pat\")) ::: Three Puddle-ducks come marching along the road making the sounds \"pit pat paddle pat\" and \"pit pat waddle pat\".  ",
        "PutOn(a_0, Clothing) ::: Jemima Puddle-duck and Rebeccah put on some of the dropped clothing.  ",
        "LoseClothing(b_1) ::: The kittens lose the rest of their clothing descending the wall.  ",
        "Invite(a_0, a_2) ∧ PickUp(a_0, Clothing, a_2) ∧ PutOnSelf(a_0, Clothing) ::: Moppet invites Mr. Drake Puddle-duck to help dress Tom; Mr. Drake picks up various articles of Tom's clothing and puts them on himself.  ",
        "SetOff(b_2) ::: The three ducks set off up the road.  ",
        "Approach(a_1, b_1) ∧ PullOffWall(a_1, b_1) ∧ Smack(a_1, b_1) ∧ TakeBackToHouse(a_1, b_1) ::: Tabitha approaches her three children with no clothes on, pulls them off the wall, smacks them, and takes them back to the house.  ",
        "NotFitToBeSeen(b_1) ∧ Affronted(a_1) ∧ FriendsArriveSoon(a_1) ::: Tabitha says the kittens are not fit to be seen and that she is affronted because her friends will arrive soon."
      ]
    },
    {
      "id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "Sends(a_1, b_1, c_3) ::: Tabitha sends the kittens upstairs.  ",
        "Tells(a_1, a_0, InBedWithMeasles(b_1)) ::: Tabitha tells her guests that the kittens are in bed with the measles.  ",
        "Disturbs(NoisesOverhead, d_1) ::: The very extraordinary noises overhead disturb the dignity and repose of the tea party.  ",
        "Romp(b_1, c_1) ::: The playful kittens romp in the bedroom.  ",
        "Depicts(Illustration1, c_1, DisorderComplete) ::: An illustration depicts the bedroom in complete disorder.  ",
        "Depicts(Illustration1, a_2, WearingBonnetOfMother) ::: The illustration depicts Tom in his mother’s bonnet.  ",
        "Enters(a_1, c_1) ::: Tabitha enters the bedroom.  ",
        "Promises(a_3, Reader, MakeLargerBookAbout(a_3, a_2)) ::: The author promises the reader she will make a larger book about Tom someday.  ",
        "LostClothing(b_2, b_1) ::: The Puddle-ducks have lost the kittens’ clothing.  ",
        "LookingForSince(b_2, b_1, LostClothingEvent) ::: The Puddle-ducks have been looking for the kittens’ clothing since losing it.  ",
        "LocatedIn(LostClothingEvent, c_2) ::: The lost clothing event happened in the pond.  ",
        "",
        "Premises:  ",
        "Sends(a_1, b_1, c_3) ∧ Tells(a_1, a_0, InBedWithMeasles(b_1)) ::: Tabitha sends her kittens upstairs and tells her guests the kittens are in bed with the measles.  ",
        "Disturbs(NoisesOverhead, d_1) ∧ Romp(b_1, c_1) ::: The dignity and repose of the tea party is disturbed by the very extraordinary noises overhead as the playful kittens romp in a bedroom.  ",
        "Depicts(Illustration1, c_1) ∧ Depicts(Illustration1, DisorderComplete) ∧ Depicts(Illustration1, a_2) ∧ WearingBonnetOfMother(a_2) ::: An illustration depicts the bedroom in complete disorder and Tom in his mother’s bonnet.  ",
        "Enters(a_1, c_1) ::: Tabitha enters the room.  ",
        "Promises(a_3, Reader, MakeLargerBookAbout(a_3, a_2)) ::: The author promises the reader she will make a larger book about Tom someday.  ",
        "LostClothing(b_2, b_1) ∧ LocatedIn(LostClothingEvent, c_2) ∧ LookingForSince(b_2, b_1, LostClothingEvent) ::: The Puddle-ducks have lost the kittens’ clothing in a pond and have been looking for them ever since."
      ]
    }
  ],
  "35592c2abea624d315c5171d67ab5e14794ca071": [
    {
      "id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "ExtremeAthlete(x) ::: x is an extreme sport athlete  ",
        "Friend(x, y) ::: x is a friend of y  ",
        "Traverse(x, l) ::: x is traversing location l  ",
        "Motorbike(x) ::: x is riding a motorbike  ",
        "RunEndsWithJump(x, l) ::: the run ends with a jump onto location l  ",
        "OvershootLanding(x) ::: x overshoots the landing  ",
        "FallToDeath(x) ::: x falls to his death  ",
        "Person(x) ::: x is a person  ",
        "Location(x) ::: x is a location  ",
        "Event(x) ::: x is an event  ",
        "",
        "Premises:  ",
        "ExtremeAthlete(a_1) ∧ Person(a_1) ::: Johnny Utah is an extreme sport athlete and a person  ",
        "Friend(a_3, a_1) ::: Jeff is a friend of Johnny Utah  ",
        "Traverse(a_1, b_0) ∧ Traverse(a_3, b_0) ::: Johnny Utah and Jeff are traversing a steep ridgeline (b_0)  ",
        "Motorbike(a_1) ∧ Motorbike(a_3) ::: Johnny Utah and Jeff are on motorbikes  ",
        "RunEndsWithJump(c_0, b_0) ::: The run ends with a jump onto a lone stone column (b_0)  ",
        "OvershootLanding(a_3) ∧ FallToDeath(a_3) ::: Jeff overshoots the landing and falls to his death"
      ]
    },
    {
      "id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "FBIcandidate(a_1) ::: Utah is an FBI agent candidate.  ",
        "AttendsBriefing(a_1, c_5) ::: Utah attends a briefing on event c_5 (skyscraper heist).  ",
        "Heist(c_5) ::: c_5 is a skyscraper heist.  ",
        "CriminalsStealDiamonds(c_5) ::: Criminals steal diamonds in the heist c_5.  ",
        "EscapeByParachute(c_5, b_4) ::: The criminals escape by parachute to location b_4 (Mumbai).  ",
        "Heist(c_6) ::: c_6 is a similar heist over Mexico.  ",
        "UnloadMoney(c_6, b_5) ::: Criminals unload millions of dollars in bills over location b_5 (Mexico).  ",
        "DisappearInto(c_6, b_6) ::: Criminals disappear into location b_6 (Cave of Swallows).  ",
        "SameMen(m) ::: m is the group of men who did the heists.  ",
        "DidHeist(m, c_5) ::: Men m did heist c_5.  ",
        "DidHeist(m, c_6) ::: Men m did heist c_6.  ",
        "AttemptOzaki8(m) ::: Men m attempt the Ozaki 8.  ",
        "Ozaki8(c_7) ::: c_7 is the Ozaki 8 (list of eight extreme ordeals).  ",
        "CompleteOrdeal(m, n) ::: Men m have completed n ordeals.  ",
        "NumberOfCompletedOrdeals(m, 3) ::: Men m have completed three ordeals.  ",
        "PredictsAttempt(a_1, c_2) ::: Utah predicts men will attempt the fourth ordeal c_2.  ",
        "FourthOrdeal(c_2) ::: c_2 is the fourth ordeal.  ",
        "RareSeaWavePhenomenon(c_8) ::: c_8 is a rare sea wave phenomenon in France.  ",
        "Location(c_2, b_7) ::: The fourth ordeal c_2 is located in b_7 (France).  ",
        "PresentsAnalysis(a_1) ::: Utah presents his analysis.  ",
        "SentUndercover(a_1, b_7) ::: Utah is sent undercover to France.  ",
        "FieldAgent(b_9) ::: b_9 is a field agent named Pappas.  ",
        "UnderAgentOf(a_1, b_9) ::: Utah is undercover under agent b_9.  ",
        "HelpSurfWave(a_1, c_4) ::: Utah gets help to surf the tall tube wave c_4.  ",
        "GiantWave(c_4) ::: c_4 is a giant wave.  ",
        "",
        "Premises:  ",
        "FBIcandidate(a_1) ::: Utah is an FBI agent candidate.  ",
        "AttendsBriefing(a_1, c_5) ∧ Heist(c_5) ∧ CriminalsStealDiamonds(c_5) ∧ EscapeByParachute(c_5, b_4) ::: Utah attends a briefing on a skyscraper heist where criminals steal diamonds and escape by parachute to Mumbai.  ",
        "Heist(c_6) ∧ UnloadMoney(c_6, b_5) ∧ DisappearInto(c_6, b_6) ::: A similar heist happens over Mexico where criminals unload money and disappear into the Cave of Swallows.  ",
        "∃m (SameMen(m) ∧ DidHeist(m, c_5) ∧ DidHeist(m, c_6) ∧ AttemptOzaki8(m)) ::: The same men did both heists and are attempting the Ozaki 8.  ",
        "CompleteOrdeal(m, 3) ::: The men have already completed three ordeals.  ",
        "PredictsAttempt(a_1, c_2) ∧ FourthOrdeal(c_2) ∧ RareSeaWavePhenomenon(c_8) ∧ Location(c_2, b_7) ::: Utah predicts the men will attempt the fourth ordeal on a rare sea wave phenomenon in France.  ",
        "PresentsAnalysis(a_1) → SentUndercover(a_1, b_7) ::: If Utah presents his analysis then he is sent undercover to France.  ",
        "SentUndercover(a_1, b_7) ∧ UnderAgentOf(a_1, b_9) ::: Utah is sent undercover to France under field agent Pappas.  ",
        "HelpSurfWave(a_1, c_4) ∧ GiantWave(c_4) ::: Utah gets help to surf the tall tube wave.  ",
        "",
        "Rules:  ",
        "AttemptOzaki8(m) → CompleteOrdeal(m, 8) ::: If men attempt the Ozaki 8 then they complete eight extreme ordeals to honor the forces of nature.  ",
        "PresentsAnalysis(a_1) → SentUndercover(a_1, b_7) ::: If Utah presents his analysis then Utah is sent"
      ]
    },
    {
      "id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "Surfer(x) ::: x is a surfer  ",
        "InWave(x) ::: x is in the wave  ",
        "UnstableWave(b_3) ::: The Pacific has an unstable wave  ",
        "Faints(x) ::: x faints  ",
        "Bails(x) ::: x bails (abandons the wave)  ",
        "Rescues(x, y) ::: x rescues y  ",
        "AboardYacht(x) ::: x is aboard a yacht  ",
        "TeamMember(x, a_2) ::: x is a team member of Bodhi  ",
        "EnjoysParty(x) ::: x enjoys the party  ",
        "AcquaintedWith(x, y) ::: x gets acquainted with y  ",
        "OverhearsTalk(x, y) ::: x overhears y talking  ",
        "InitiationFight(x, y) ::: x gives y an initiation fight  ",
        "AcceptedInCircle(x) ::: x is accepted in the circle  ",
        "TravelTo(x, b) ::: x travels to location b  ",
        "SucceedInAttempt(x, c) ::: x succeeds in attempt c  ",
        "SpendTimeTogether(x, y) ::: x spends time together with y  ",
        "ClimbSnowPeaks(x) ::: x climbs snow peaks  ",
        "SnowboardingOrdeal(x, c_3) ::: x does the snowboarding ordeal  ",
        "ReachSpot(x) ::: x reaches their spot  ",
        "ExtendsLine(x) ::: x extends his line  ",
        "FollowOthers(x) ::: others follow x  ",
        "SlipAndFallToDeath(x) ::: x slips and falls to death  ",
        "DepressedAbout(x, e) ::: x is depressed about event e  ",
        "",
        "Premises:  ",
        "Surfer(a_1) ∧ Surfer(a_2) ∧ Surfer(a_3) ∧ Surfer(a_4) ::: Utah, Bodhi, Grommet, Johnny are surfers  ",
        "InWave(a_4) ∧ UnstableWave(b_3) ::: Johnny is already in the wave, leaving the Pacific with an unstable wave  ",
        "Faints(a_1) ∧ Rescues(a_2, a_1) ∧ Bails(a_4) ::: Utah faints, Bodhi rescues Utah, Johnny bails  ",
        "AboardYacht(a_1) ∧ TeamMember(a_3, a_2) ∧ TeamMember(a_4, a_2) ::: Utah is aboard the yacht with Bodhi’s team including Grommet and Johnny  ",
        "EnjoysParty(a_1) ∧ AcquaintedWith(a_1, Samsara) ::: Utah enjoys the party and gets acquainted with Samsara  ",
        "OverhearsTalk(a_1, a_2) ∧ TravelTo(a_1, b_0) ::: Utah overhears Bodhi talking about the abandoned Paris train station  ",
        "InitiationFight(a_2, a_1) → AcceptedInCircle(a_1) ::: Bodhi gives Utah an initiation fight and Utah is accepted in the circle  ",
        "TravelTo({a_1, a_2, a_3, a_4}, Alps) ∧ SucceedInAttempt({a_1, a_2, a_3, a_4}, c_2) ::: They travel to the Alps for the fourth ordeal and succeed  ",
        "SpendTimeTogether({a_1, a_2, a_3, a_4}, Samsara) ::: They spend time together with Samsara  ",
        "ClimbSnowPeaks({a_1, a_2, a_3, a_4}) ∧ SnowboardingOrdeal({a_1, a_2, a_3, a_4}, c_3) ::: They climb snow peaks for the sixth ordeal, snowboarding  ",
        "ReachSpot({a_1, a_2, a_3, a_4}) ::: They reach their spot  ",
        "ExtendsLine(a_1) → FollowOthers({a_2, a_3, a_4}) ::: If Utah extends his line, then the others follow him  ",
        "SlipAndFallToDeath(a_3) ::: Chowder slips and falls to his death  ",
        "DepressedAbout(a_1, SlipAndFallToDeath(a_3)) ::: Utah becomes depressed about Chowder’s death"
      ]
    },
    {
      "id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "Knew(a_0, a_2) ::: Samsara knew Bodhi  ",
        "Knew(a_2, a_0) ::: Bodhi knew Samsara  ",
        "Knew(a_0, ozaki) ::: Samsara knew Ono Ozaki  ",
        "Knew(a_2, ozaki) ::: Bodhi knew Ono Ozaki  ",
        "ParentsDiedInAvalanche(a_0) ::: Samsara's parents died in an avalanche accident  ",
        "GaveHome(ozaki, a_0) ::: Ozaki gave Samsara a home  ",
        "CompletedThirdOrdeal(ozaki) ::: Ono Ozaki completed his third ordeal  ",
        "DidNotDieAttemptingThirdOrdeal(ozaki) ::: Ono Ozaki did not die attempting the third ordeal  ",
        "KilledByWhalingShip(ozaki) ::: Ono Ozaki was killed by a whaling ship crashing into his boat  ",
        "TryingToSaveHumpbackWhales(ozaki) ::: Ono Ozaki was trying to save humpback whales  ",
        "DecidedNotToTellTruth(a_2) ::: Bodhi decided not to tell the truth of his story  ",
        "DecidedToFinishWhatOzakiStarted(a_2) ::: Bodhi decided to finish what Ozaki started  ",
        "",
        "Premises:  ",
        "CompletedThirdOrdeal(ozaki) → DidNotDieAttemptingThirdOrdeal(ozaki) ::: If Ono Ozaki completed the third ordeal, then he did not die attempting it.  ",
        "KilledByWhalingShip(ozaki) → TryingToSaveHumpbackWhales(ozaki) ::: If Ono Ozaki was killed by a whaling ship crashing into his boat, then he was trying to save humpback whales.  ",
        "DecidedNotToTellTruth(a_2) → DecidedToFinishWhatOzakiStarted(a_2) ::: If Bodhi decided not to tell the truth of his story, then he decided to finish what Ozaki started.  ",
        "",
        "Additional facts from the paragraph (asserted as premises):  ",
        "Knew(a_0, a_2) ∧ Knew(a_2, a_0) ∧ Knew(a_0, ozaki) ∧ Knew(a_2, ozaki) ::: Samsara and Bodhi both knew Ono Ozaki when they were young.  ",
        "ParentsDiedInAvalanche(a_0) ∧ GaveHome(ozaki, a_0) ::: Samsara's parents died in an avalanche accident and Ozaki gave her a home after.  ",
        "CompletedThirdOrdeal(ozaki) ::: Ozaki actually completed his third ordeal, as was widely believed.  ",
        "KilledByWhalingShip(ozaki) ::: Ozaki was killed by a whaling ship crashing into his boat.  ",
        "DecidedNotToTellTruth(a_2) ::: Bodhi decided not to tell the truth of his story."
      ]
    },
    {
      "id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 4,
      "fols": [
        "Predicates:  ",
        "TravelTo(a_0, b_0) ::: a_0 (the group) travels to location b_0 (gold mine).  ",
        "Detonate(a_2, Explosives) ::: Bodhi detonates explosives.  ",
        "Plant(a_3, Explosives) ::: Grommet planted explosives.  ",
        "Plant(a_4, Explosives) ::: Roach planted explosives.  ",
        "BlowCover(a_2) ::: Bodhi blows his cover.  ",
        "Chase(a_1, a_2) ::: Utah chases Bodhi.  ",
        "TripBike(a_1, a_2) ::: Utah manages to trip Bodhi’s bike.  ",
        "Escape(a_2) ::: Bodhi escapes.  ",
        "CannotStand(a_1) ::: Utah cannot stand up after the crash.  ",
        "FreezeAssets(d_1, Sponsors(a_2)) ::: FBI freezes Bodhi’s sponsors’ assets.  ",
        "PlanRob(a_2, b_bank) ::: Bodhi plans to rob a bank (nearby Italian bank on mountain top).  ",
        "Intercept(a_1, Group(a_0)) ::: Utah and police intercept the group.  ",
        "CrossfireKills(crossfire, a_4) ::: Crossfire kills Roach.  ",
        "Flee(Group(a_0)) ::: The group flees.  ",
        "Chase(a_1, a_x) ::: Utah chases one of the group members (a_x).  ",
        "Shoot(a_1, a_x) ::: Utah shoots one of the group members (a_x).  ",
        "Reveal(a_x, Samsara) ::: The person Utah shoots is revealed to be Samsara.  ",
        "",
        "Premises:  ",
        "TravelTo(a_0, GoldMine) ∧ Detonate(a_2, Explosives) ∧ Plant(a_3, Explosives) ∧ Plant(a_4, Explosives) ::: The group travels to a gold mine where Bodhi detonates explosives planted by Grommet and Roach.  ",
        "BlowCover(a_2) ∧ Chase(a_1, a_2) ∧ TripBike(a_1, a_2) ∧ Escape(a_2) ∧ CannotStand(a_1) ::: After blowing his cover, Utah chases Bodhi, trips his bike, Bodhi escapes, and Utah cannot stand up.  ",
        "FreezeAssets(d_1, Sponsors(a_2)) ∧ PlanRob(a_2, ItalianBank) ::: FBI freezes Bodhi’s sponsors’ assets; Bodhi plans to rob a nearby Italian bank on a mountain top.  ",
        "Intercept(a_1, Group(a_0)) ∧ CrossfireKills(Crossfire, a_4) ::: Utah and police intercept the group, resulting in a crossfire that kills Roach.  ",
        "Flee(Group(a_0)) ∧ Chase(a_1, a_x) ∧ Shoot(a_1, a_x) ∧ Reveal(a_x, Samsara) ::: As the group flees, Utah chases and shoots one of them, revealed to be Samsara."
      ]
    },
    {
      "id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 5,
      "fols": [
        "Predicates:  ",
        "FindsLocation(a_1, c_1, b_1) ::: Utah finds the location of the solo rock climbing ordeal beside Angel Falls.  ",
        "Beside(b_1, b_2) ::: Angel Falls is in Venezuela.  ",
        "Finds(a_1, a_2) ::: Utah finds Bodhi.  ",
        "Finds(a_1, a_3) ::: Utah finds Grommet.  ",
        "Chases(a_1, a_2, c_1) ::: Utah chases Bodhi on the solo rock climbing ordeal.  ",
        "Chases(a_1, a_3, c_1) ::: Utah chases Grommet on the solo rock climbing ordeal.  ",
        "Cramp(a_3) ::: Grommet cramps.  ",
        "Falter(a_3) ::: Grommet falters.  ",
        "FallsToDeath(a_3) ::: Grommet falls to his death.  ",
        "CatchesUp(a_1, a_2) ::: Utah catches up to Bodhi.  ",
        "LeapsDown(a_2, b_1) ::: Bodhi leaps down the waterfall at Angel Falls.  ",
        "Completes(a_2, c_3) ::: Bodhi completes what would have been the last ordeal.  ",
        "BailedOut(a_2, c_2) ::: Bodhi bailed out on the fourth ordeal.  ",
        "HasToRedo(a_2, c_2) ::: Bodhi has to redo the fourth ordeal.  ",
        "Save(a_2, a_4) ::: Bodhi had to save Johnny.  ",
        "MonthsLater(a_1, 17) ::: Seventeen months later, Utah finds Bodhi.  ",
        "FindsIn(a_1, a_2, b_3) ::: Utah finds Bodhi in the Pacific.  ",
        "Facing(a_2, c_4) ::: Bodhi is facing a giant wave.  ",
        "TriesToGetBack(a_1, a_2) ::: Utah tries to get Bodhi to come back with him.  ",
        "PayForCrimes(a_2) ::: Bodhi has to pay for his crimes.  ",
        "LetsAttempt(a_1, a_2, c_4) ::: Utah lets Bodhi attempt to surf the giant wave.  ",
        "KnowsNotComeBack(a_1, a_2) ::: Both know Bodhi will not come back.  ",
        "Engulfs(c_4, a_2) ::: The giant wave engulfs Bodhi.  ",
        "ContinuesCareer(a_1, d_1) ::: Utah continues his career in the FBI.  ",
        "StartsOrdeals(a_1, 8) ::: Utah starts to go through his own eight ordeals.",
        "",
        "Premises:  ",
        "∃x (BailedOut(x, c_2) ∧ Save(x, a_4) → HasToRedo(x, c_2)) ::: If a person bailed out on an ordeal when the person has to save another person, then the person has to redo that ordeal.  ",
        "FindsLocation(a_1, c_1, b_1) ∧ Beside(b_1, b_2) ::: Utah finds the location of the solo rock climbing ordeal beside Angel Falls in Venezuela.  ",
        "Finds(a_1, a_2) ∧ Finds(a_1, a_3) ::: Utah finds Bodhi and Grommet.  ",
        "Chases(a_1, a_2, c_1) ∧ Chases(a_1, a_3, c_1) ::: Utah chases Bodhi and Grommet on the climb.  ",
        "Cramp(a_3) ∧ Falter(a_3) → FallsToDeath(a_3) ::: Grommet cramps and falters, falling to his death.  ",
        "CatchesUp(a_1, a_2) ∧ LeapsDown(a_2, b_1) → Completes(a_2, c_3) ::: Utah catches up to Bodhi, who leaps down the waterfall, completing the last ordeal.  ",
        "BailedOut(a_2, c_2) ∧ Save(a_2, a_4) → HasToRedo(a_2, c_2) ::: Bodhi bailed out on the fourth ordeal when he had to save Johnny, so he has to redo the fourth ordeal.  ",
        "MonthsLater(a_1, 17) ∧ FindsIn(a_1, a_2, b_3) ∧ Facing(a_2, c_4) ::: Seventeen months later, Utah finds Bodhi in the Pacific facing a giant wave.  ",
        "TriesToGetBack(a_1, a_2) ∧ PayForCrimes(a_2) ∧ LetsAttempt(a_1, a_2, c_4) ∧ KnowsNotComeBack(a_1, a_2) ∧ Engulfs(c_"
      ]
    }
  ],
  "35891de62bab83d5b312ddeb835c7e0b245e3282": [
    {
      "id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "Criminal(a_0) ::: a_0 is a criminal  ",
        "DeanKeaton(a_0) ::: a_0 is Dean Keaton  ",
        "Wounded(a_0) ::: a_0 is badly wounded  ",
        "OnShip(a_0) ::: a_0 is lying on a ship  ",
        "ShipDocked(b_0) ::: the ship is docked in a place b_0  ",
        "SanPedroBay(b_0) ::: b_0 is San Pedro Bay  ",
        "MysteriousFigure(a_x) ::: a_x is a mysterious figure  ",
        "Calls(a_0, a_x, \"Keyser\") ::: a_0 calls a_x \"Keyser\"  ",
        "Shoots(a_x, a_0) ::: a_x shoots a_0  ",
        "Dead(a_0) ::: a_0 is dead  ",
        "SetsFire(a_x, c_x) ::: a_x sets fire to object c_x  ",
        "Ship(c_x) ::: c_x is a ship  ",
        "",
        "Premises:",
        "Criminal(a_0) ∧ DeanKeaton(a_0) ∧ Wounded(a_0) ∧ OnShip(a_0) ∧ Ship(c_0) ∧ ShipDocked(c_0) ∧ SanPedroBay(b_0) ∧ DockedAt(c_0, b_0) ::: Dean Keaton is a criminal lying badly wounded on a ship docked in San Pedro Bay.  ",
        "MysteriousFigure(a_x) ∧ Calls(a_0, a_x, \"Keyser\") ∧ Shoots(a_x, a_0) ∧ Dead(a_0) ∧ SetsFire(a_x, c_0) ::: Dean Keaton is confronted by a mysterious figure he calls \"Keyser\", who shoots him dead and sets fire to the ship.  ",
        "",
        "Note:  ",
        "- a_0 refers to Dean Keaton  ",
        "- a_x refers to the mysterious figure (unnamed)  ",
        "- c_0 refers to the ship  ",
        "- b_0 refers to San Pedro Bay  ",
        "",
        "No rules were provided, so no additional implications are included."
      ]
    },
    {
      "id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "Survivor(x) ::: x is a survivor of the bloodbath on the ship.  ",
        "Mobster(x) ::: x is a mobster.  ",
        "Hungarian(x) ::: x is Hungarian.  ",
        "HospitalizedWithSevereBurns(x) ::: x is hospitalized with severe burns.  ",
        "ConArtist(x) ::: x is a con artist.  ",
        "HasCerebralPalsy(x) ::: x has cerebral palsy.  ",
        "CustomsAgent(x) ::: x is a customs agent.  ",
        "FliesFrom(x, y) ::: x flies from place y.  ",
        "Interrogate(x, y) ::: x interrogates y.  ",
        "DescribesInFlashback(x, e) ::: x describes in flashback event e.  ",
        "Criminal(x) ::: x is a criminal.  ",
        "OnShip(x) ::: x is on the ship.  ",
        "",
        "Premises:  ",
        "Survivor(a_2) ∧ Survivor(a_3) ::: Only two survivors of the bloodbath on the ship are Verbal (a_2) and Arkosh Kovash (a_3).  ",
        "Mobster(a_3) ∧ Hungarian(a_3) ∧ HospitalizedWithSevereBurns(a_3) ::: Arkosh Kovash is a Hungarian mobster hospitalized with severe burns.  ",
        "ConArtist(a_2) ∧ HasCerebralPalsy(a_2) ::: Verbal is a con artist with cerebral palsy.  ",
        "CustomsAgent(a_1) ∧ FliesFrom(a_1, b_0) ::: Customs agent Dave Kujan flies in from New York City (b_0).  ",
        "Interrogate(a_1, a_2) ::: Kujan interrogates Verbal.  ",
        "DescribesInFlashback(a_2, e) ∧ (e = {a_2, a_4, a_5, a_6, a_7, a_8}) ::: Verbal describes in flashback the events that led him and four other criminals onto the ship.  ",
        "Criminal(a_2) ∧ Criminal(a_4) ∧ Criminal(a_5) ∧ Criminal(a_6) ∧ Criminal(a_7) ::: Verbal (a_2), Keaton (a_4), Michael McManus (a_5), Fred Fenster (a_6), and Todd Hockney (a_7) are criminals.  ",
        "OnShip(a_2) ∧ OnShip(a_4) ∧ OnShip(a_5) ∧ OnShip(a_6) ∧ OnShip(a_7) ::: These criminals were on the ship.  ",
        "",
        "(Note: IDs a_4, a_5, a_6, a_7 correspond to Keaton, Michael McManus, Fred Fenster, Todd Hockney respectively, assumed from context though not explicitly given in the prompt.)"
      ]
    },
    {
      "id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "Arrested(a_2, b_NewYork, timeSixWeeksEarlier) ::: Verbal and others were arrested in New York six weeks earlier.  ",
        "Criminal(a_2) ::: Verbal is a criminal.  ",
        "CriminalGroup(g) ::: g is a group of criminals.  ",
        "Member(a_2, g) ::: Verbal is a member of the criminal group g.  ",
        "LedBy(g, a_6) ::: The criminal group g is led by Keaton (a_6).  ",
        "FormerPoliceman(a_6) ::: Keaton is a former policeman.  ",
        "Corrupt(a_6) ::: Keaton is corrupt.  ",
        "Robbed(g, h) ::: The criminal group g robbed h.  ",
        "CorruptCops(h) ::: h is a group of corrupt cops.  ",
        "Transport(h, smugglers, policeConvoy) ::: The corrupt cops h transported smugglers in a police convoy.  ",
        "WentTo(g, b_1) ::: The criminal group g went to California.  ",
        "FenceWith(g, a_7) ::: The criminal group g fenced stolen jewels with Redfoot (a_7).  ",
        "Criminal(a_7) ::: Redfoot is a criminal.  ",
        "TurnedOn(a_7, g, heist2) ::: Redfoot turned the group g on to another jewel heist (heist2).  ",
        "Quarry(heist2, heroin) ::: The quarry of the second heist was heroin.  ",
        "ShootWayOut(g) ::: The group g had to shoot their way out.  ",
        "Lawyer(a_4) ::: Kobayashi is a lawyer.  ",
        "Contacted(a_4, g) ::: Kobayashi contacted the group g.  ",
        "CrimeLord(a_5) ::: Söze is a crime lord.  ",
        "Turkish(a_5) ::: Söze is Turkish.  ",
        "MythicalReputation(a_5) ::: Söze has a mythical reputation.  ",
        "StoleFrom(g, a_5) ::: The criminals stole from Söze.  ",
        "Hijacked(a_8, b_NewYork, timeSixWeeksEarlier) ::: Hockney hijacked the original truck six weeks earlier in New York.  ",
        "Member(a_8, g) ::: Hockney is a member of the criminal group g.  ",
        "OfferedJob(a_5, g) ::: Söze offered a job to the criminals.  ",
        "InvadeShip(g, s) ::: The criminals invade a ship s.  ",
        "MannedBy(s, gangArgentinianDrugDealers) ::: The ship s is manned by a gang of Argentinian drug dealers.  ",
        "Competing(a_5, gangArgentinianDrugDealers) ::: Söze is competing with the Argentinian drug dealers.  ",
        "Destroy(g, cocaine91M) ::: The criminals destroy $91 million worth of cocaine.  ",
        "Transport(gangArgentinianDrugDealers, cocaine91M) ::: The Argentinian drug dealers are transporting $91 million worth of cocaine.  ",
        "",
        "Premises:  ",
        "Arrested(a_2, b_NewYork, timeSixWeeksEarlier) ∧ Criminal(a_2) ∧ Member(a_2, g) ∧ LedBy(g, a_6) ∧ FormerPoliceman(a_6) ∧ Corrupt(a_6) ∧ Robbed(g, h) ∧ CorruptCops(h) ∧ Transport(h, smugglers, policeConvoy) ∧ WentTo(g, b_1) ∧ FenceWith(g, a_7) ∧ Criminal(a_7) ∧ TurnedOn(a_7, g, heist2) ∧ Quarry(heist2, heroin) ∧ ShootWayOut(g) ∧ Lawyer(a_4) ∧ Contacted(a_4, g) ∧ CrimeLord(a_5) ∧ Turkish(a_5) ∧ MythicalReputation(a_5) ∧ StoleFrom(g, a_5) ∧ Hijacked(a_8, b_NewYork, timeSixWeeksEarlier) ∧ Member(a_8, g) ::: The narrative of the criminals’ background and actions.  ",
        "",
        "∀g (OfferedJob(a_5, g) → (∃s (InvadeShip(g, s) ∧ MannedBy(s, gangArgentinianDrugDealers) ∧ Competing(a_5, gangArgentinianDrugDealers) ∧ ∃c (Destroy(g, c) ∧ Transport(gangArgentinianDrugDealers, c) ∧ Value(c, 91million))))) ::: If Keyser Söze offers a job to the criminals, then the criminals invade a ship manned by Argentinian drug dealers and destroy $91 million worth of cocaine they are transporting."
      ]
    },
    {
      "id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "MurderedFamily(a_5) ::: Söze murdered his own family.  ",
        "FamilyAttackedByHungarians(a_5) ::: Söze’s family had been attacked by a gang of Hungarian criminals.  ",
        "MassacredHungariansAndLovedOnes(a_5) ::: Söze massacred the Hungarians and everyone they held dear.  ",
        "WentUnderground(a_5) ::: Söze went underground and was never seen again.  ",
        "DidBusinessThroughUnderlings(a_5) ::: Söze did business only through underlings who did not know for whom they were working.  ",
        "FearsomeUrbanLegend(a_5) ::: Söze became a fearsome urban legend.  ",
        "SpookStoryForCriminalKids(a_5) ::: Söze is a spook story that criminals tell their kids at night.  ",
        "",
        "Premises:  ",
        "(MurderedFamily(a_5) ∧ FamilyAttackedByHungarians(a_5) ∧ MassacredHungariansAndLovedOnes(a_5)) → WentUnderground(a_5)  ",
        "WentUnderground(a_5) → DidBusinessThroughUnderlings(a_5)  ",
        "DidBusinessThroughUnderlings(a_5) → FearsomeUrbanLegend(a_5)  ",
        "FearsomeUrbanLegend(a_5) → SpookStoryForCriminalKids(a_5)"
      ]
    },
    {
      "id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 4,
      "fols": [
        "Predicates:  ",
        "BailedOn(x, g) ::: x bailed on group g  ",
        "GaveLocation(x, y, l) ::: x gave group y a location l  ",
        "TriedToKill(x, y) ::: x tried to kill y  ",
        "ThreatensLovedOnes(x, g) ::: x threatens the loved ones of group g  ",
        "StrongArmsIntoHeist(x, g) ::: x strong-arms group g into performing the heist  ",
        "StakedOut(x, l) ::: group x staked out location l  ",
        "Killed(x, y) ::: x killed y  ",
        "FoundNoDrugs(x, l) ::: group x found no drugs on location l  ",
        "LockedAboard(x, l) ::: x was locked aboard location l  ",
        "SetOnFire(x, l) ::: x set location l on fire  ",
        "LookedOn(x, e) ::: x looked on event e  ",
        "",
        "Entities:  ",
        "Group (the group of people involved in the heist): a_0_group (implicit)  ",
        "Ship: ship (implicit)  ",
        "UnseenPerson: unseen (implicit)  ",
        "",
        "Premises:  ",
        "GaveLocation(a_4, a_0_group, ship) ::: Kobayashi gave the group a location at which to find their compatriot's dead body.  ",
        "TriedToKill(a_0_group, a_4) ::: The group tried to kill Kobayashi.  ",
        "ThreatensLovedOnes(a_4, a_0_group) → StrongArmsIntoHeist(a_4, a_0_group) ::: If Kobayashi threatens the loved ones of the group then Kobayashi strong-arms the group into performing the heist.  ",
        "StakedOut(a_0_group, ship) ∧ Killed(a_0_group, argentinianGangsters) ∧ Killed(a_0_group, hungarianGangsters) ∧ FoundNoDrugs(a_0_group, ship) ::: The group staked out the ship, killed several Argentinian and Hungarian gangsters, but found no drugs on board.  ",
        "Killed(unseen, a_0_group_member1) ∧ Killed(unseen, a_0_group_member2) ∧ Killed(unseen, a_0_group_member3) ∧ Killed(unseen, a_4) ∧ SetOnFire(unseen, ship) ∧ LookedOn(a_2, event) ::: An unseen person killed McManus, Hockney, and a man locked aboard the ship, also killed Keaton and set the ship on fire as Verbal looked on.  ",
        "",
        "Note:  ",
        "- a_0_group_member1, a_0_group_member2, a_0_group_member3 represent McManus, Hockney, and the man locked aboard the ship respectively (not explicitly given IDs).  ",
        "- event represents the event of the ship being set on fire and the killings."
      ]
    },
    {
      "id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 5,
      "fols": [
        "Predicates:  ",
        "MurderVictimOnBoat(x) ::: x is one of the murder victims on the boat  ",
        "EscapedProsecutionByClaimingIdentify(x, y) ::: x escaped prosecution by claiming x could identify y  ",
        "RepresentedBy(x, y) ::: x was represented by y (e.g., as a lawyer)  ",
        "Insists(x, y) ::: x insists that y is something (e.g., that y must be Söze)  ",
        "Believes(x, y) ::: x believes y (a story or claim)  ",
        "Killed(x) ::: x has been murdered  ",
        "IdeaOf(x, y) ::: x is the originator of the idea y  ",
        "RefusesToTestify(x) ::: x refuses to testify in court  ",
        "BondPosted(x) ::: x's bond is posted  ",
        "Released(x) ::: x is released  ",
        "",
        "Entities:  ",
        "a_0: general people (not used here)  ",
        "a_1: Kujan  ",
        "a_2: Verbal  ",
        "a_5: Söze  ",
        "ArturoMarquez: (not explicitly given an ID, treat as constant AM)  ",
        "EdieFinneran: (not explicitly given an ID, treat as constant EF)  ",
        "Keaton: (not explicitly given an ID, treat as constant K)  ",
        "",
        "Premises:  ",
        "(MurderVictimOnBoat(AM) ∧ EscapedProsecutionByClaimingIdentify(AM, a_5)) → RepresentedBy(AM, EF)  ",
        "::: If one of the murder victims on the boat was Arturo Marquez and Arturo Marquez escaped prosecution by claiming he could identify Söze, then Arturo Marquez was represented by Edie Finneran.  ",
        "",
        "Insists(a_1, K = a_5) → ¬Believes(a_1, StoryOf(a_2))  ",
        "::: If Kujan insists that Keaton must be Söze, then Kujan does not believe Verbal's story.  ",
        "",
        "Additional facts from context (not explicitly requested but can be represented):  ",
        "Killed(EF) ::: Edie Finneran has been murdered.  ",
        "IdeaOf(K, Plan) ∧ RefusesToTestify(a_2) ∧ BondPosted(a_2) ∧ Released(a_2)  ",
        "::: Verbal says the entire plan was Keaton's idea, refuses to testify, bond posted, and released."
      ]
    },
    {
      "id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 6,
      "fols": [
        "Predicates:  ",
        "Realizes(a_1, Lie(a_2)) ::: Kujan realizes that Verbal's story was a lie.  ",
        "Story(a_2) ::: Verbal's story.  ",
        "Lie(Story(a_2)) ::: Verbal's story is a lie.  ",
        "PiecedFrom(Story(a_2), c_3) ::: Verbal's story was pieced together from details on the bulletin board.  ",
        "WalksOutside(a_2) ::: Verbal walks outside.  ",
        "DropsLimpGradually(a_2) ::: Verbal gradually drops his limp.  ",
        "FlexesWitheredHand(a_2) ::: Verbal flexes his supposedly withered hand.  ",
        "RunsAfter(a_1, a_2) ::: Kujan runs after Verbal.  ",
        "FaxComesInFrom(c_1, b_1) ::: A fax of the police sketch artist's rendering of Söze comes in from California.  ",
        "DictatedBy(c_1, a_3) ::: The police sketch was dictated by Kovash.  ",
        "LooksExactlyLike(c_1, a_2) ::: The police sketch looks exactly like Verbal.  ",
        "DisappearsInto(a_2, c_2) ::: Verbal disappears into a car.  ",
        "Drives(a_4, c_2) ::: Kobayashi drives the car.  ",
        "IsSöze(a_2) ::: Verbal is Söze.  ",
        "",
        "Premises:  ",
        "Realizes(a_1, Lie(Story(a_2))) ∧ PiecedFrom(Story(a_2), c_3) ::: Kujan realizes Verbal's story was a lie pieced from the bulletin board.  ",
        "WalksOutside(a_2) ∧ DropsLimpGradually(a_2) ∧ FlexesWitheredHand(a_2) ::: Verbal walks outside, dropping limp and flexing hand.  ",
        "RunsAfter(a_1, a_2) ::: Kujan runs after Verbal.  ",
        "FaxComesInFrom(c_1, b_1) ∧ DictatedBy(c_1, a_3) ∧ LooksExactlyLike(c_1, a_2) ::: A fax from California is a police sketch dictated by Kovash that looks exactly like Verbal.  ",
        "DisappearsInto(a_2, c_2) ∧ Drives(a_4, c_2) ::: Verbal disappears into a car driven by Kobayashi.  ",
        "LooksExactlyLike(c_1, a_2) → IsSöze(a_2) ::: If the police sketch looks exactly like Verbal, then Verbal is Söze."
      ]
    }
  ],
  "42b6d4260bbc83d7d8343779d34e96a067dfaad4": [
    {
      "id": "42b6d4260bbc83d7d8343779d34e96a067dfaad4",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "InitiatesPlan(a_2, rescuePlan) ::: Luke Skywalker initiates a plan to rescue Han Solo  ",
        "Helps(a_3, a_2) ::: Princess Leia helps Luke  ",
        "Helps(a_1, a_2) ::: Lando Calrissian helps Luke  ",
        "Helps(chewbacca, a_2) ::: Chewbacca helps Luke  ",
        "Helps(c3po, a_2) ::: C-3PO helps Luke  ",
        "Helps(r2d2, a_2) ::: R2-D2 helps Luke  ",
        "Infiltrates(a_3, jabbaPalace) ::: Leia infiltrates Jabba's palace  ",
        "DisguisedAs(a_3, bountyHunter) ::: Leia is disguised as a bounty hunter  ",
        "Prisoner(chewbacca, a_3) ::: Chewbacca is Leia's prisoner  ",
        "DisguisedAs(a_1, guard) ::: Lando is disguised as a guard  ",
        "Releases(a_3, a_4) ::: Leia releases Han Solo from carbonite  ",
        "Captured(a_3) ::: Leia is captured  ",
        "Enslaved(a_3) ::: Leia is enslaved  ",
        "ArrivesSoonAfter(a_2, event) ::: Luke arrives soon afterward  ",
        "Standoff(a_2, jabba) ::: Luke has a tense standoff with Jabba  ",
        "Battles(a_2, rancor) ::: Luke battles the rancor  ",
        "Captured(a_2) ::: Luke is captured  ",
        "SentencedToDeath(jabba, a_2) ::: Jabba sentences Luke to death  ",
        "SentencedToDeath(jabba, a_4) ::: Jabba sentences Han to death  ",
        "SentencedToDeath(jabba, chewbacca) ::: Jabba sentences Chewbacca to death  ",
        "PlansToFeedTo(jabba, [a_2, a_4, chewbacca], sarlacc) ::: Jabba plans to feed Luke, Han, and Chewbacca to the Sarlacc  ",
        "TakenTo([a_2, a_4, chewbacca], greatPitOfCarkoon) ::: They are taken to the Great Pit of Carkoon  ",
        "Helps(r2d2, a_2) ::: R2-D2 helps Luke  ",
        "FreesSelf(a_2) ::: Luke frees himself  ",
        "Battles(a_2, jabbasGuards) ::: Luke battles Jabba's guards  ",
        "AttemptsAttack(bobaFett, a_2) ::: Boba Fett attempts to attack Luke  ",
        "KnocksInto(a_4, bobaFett, sarlaccPit) ::: Han knocks Boba Fett into the Sarlacc pit  ",
        "StranglesToDeath(a_3, jabba) ::: Leia strangles Jabba to death  ",
        "Destroys(a_2, jabbasSailBarge) ::: Luke destroys Jabba's sail barge  ",
        "Escapes([a_2, a_3, a_4, a_1, chewbacca, c3po, r2d2]) ::: The group escapes  ",
        "RendezvousWith([a_3, a_4, a_1, chewbacca, c3po, r2d2], rebelAlliance) ::: The others rendezvous with the Rebel Alliance  ",
        "ReturnsTo(a_2, dagobah) ::: Luke returns to Dagobah  ",
        "OnDeathbed(a_6) ::: Yoda is on his deathbed  ",
        "ConfirmsBeforeDeath(a_6, darthVaderIsFatherOfLuke) ::: Yoda confirms Vader is Luke's father before he dies  ",
        "KnownAs(a_7, anakinSkywalker) ::: Anakin is known as Anakin Skywalker  ",
        "IsFatherOf(a_7, a_2) ::: Anakin is Luke's father  ",
        "ThereIsAnother(a_6) ::: Yoda says \"there is another\"  ",
        "ConfirmsGhost(a_5, otherIsLeia) ::: Obi-Wan's ghost confirms the other is Leia  ",
        "IsTwinSister(a_3, a_2) ::: Leia is Luke's twin sister  ",
        "Tells(a_5, a_2, fightVaderAgain) ::: Obi-Wan tells Luke he must fight Vader again  ",
        "Warns(a_5, a_2, keepEmotionsInCheck) ::: Obi-Wan warns Luke to keep emotions in check  ",
        "LeadsTo(anger, darkSide) ::: Anger could lead to the Dark Side  ",
        "",
        "Premises:  ",
        "InitiatesPlan(a_2, rescuePlan) ∧ Helps(a_3, a_2) ∧ Helps(a_1, a_2) ∧ Helps(chewbacca, a_2) ∧ Helps(c3po, a_2) ∧ Helps(r2d2, a_2)  ",
        "Infiltrates(a_3, jabbaPalace) ∧ DisguisedAs(a_3, bountyHunter) ∧ Prisoner(chewbacca, a_3)  ",
        "Disguis"
      ]
    },
    {
      "id": "42b6d4260bbc83d7d8343779d34e96a067dfaad4",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "Constructing(b_1, c_1) ::: The Imperial fleet is constructing the Death Star.  ",
        "SecondDeathStar(c_1) ::: The Death Star is the second one.  ",
        "SupervisedBy(c_1, a_8) ::: The Death Star is under the direct supervision of the Emperor (a_8).  ",
        "ProtectedBy(c_1, shieldGenerator) ::: The Death Star is protected by an energy shield generated by the shield generator.  ",
        "Leads(a_4, strikeTeam) ::: Han leads a strike team.  ",
        "Destroy(strikeTeam, shieldGenerator) ::: The strike team destroys the shield generator.  ",
        "LocatedAt(shieldGenerator, c_3) ::: The shield generator is located on the forest moon of Endor.  ",
        "Allows(Destroy(strikeTeam, shieldGenerator), Destroy(squadron, c_1)) ::: Destroying the shield generator allows a squadron of starfighters to destroy the Death Star.  ",
        "AccompaniedBy(strikeTeam, a_2) ::: The strike team is accompanied by Luke.  ",
        "AccompaniedBy(strikeTeam, a_3) ::: The strike team is accompanied by Leia.  ",
        "TravelsTo(strikeTeam, c_3) ::: The strike team travels to Endor.  ",
        "TravelsTo(a_2, c_3) ::: Luke travels to Endor.  ",
        "TravelsTo(a_3, c_3) ::: Leia travels to Endor.  ",
        "TravelsIn(strikeTeam, d_1) ::: The strike team travels in a stolen Imperial shuttle.  ",
        "Encounter(a_2, tribeEwoks) ::: Luke and companions encounter a tribe of Ewoks.  ",
        "GainTrust(a_2, tribeEwoks) ::: Luke and companions gain the trust of the Ewoks.  ",
        "Tells(a_2, a_3, sister(a_3, a_2)) ::: Luke tells Leia that she is his sister.  ",
        "Father(a_7, a_2) ::: Vader (Anakin) is Luke’s father.  ",
        "Father(a_7, a_3) ::: Vader (Anakin) is Leia’s father.  ",
        "MustGoConfront(a_2, a_7) ::: Luke must go and confront Vader.  ",
        "SurrendersTo(a_2, imperialTroops) ::: Luke surrenders to Imperial troops.  ",
        "TakenTo(a_2, a_7) ::: Luke is taken to Vader.  ",
        "TriesToConvince(a_2, a_7, TurnFromDarkSide(a_7)) ::: Luke tries to convince Vader to turn from the dark side.  ",
        "Fails(TryToConvince(a_2, a_7, TurnFromDarkSide(a_7))) ::: Luke fails to convince Vader.  ",
        "",
        "Premises:  ",
        "∀x (Destroy(x, shieldGenerator) ∧ LocatedAt(shieldGenerator, c_3) → Allows(Destroy(x, shieldGenerator), Destroy(squadron, c_1))) ::: Destroying the shield generator on Endor allows a squadron to destroy the Death Star.  ",
        "Constructing(b_1, c_1) ∧ SecondDeathStar(c_1) ∧ SupervisedBy(c_1, a_8) ::: The Empire has been constructing a second Death Star under the Emperor’s supervision.  ",
        "ProtectedBy(c_1, shieldGenerator) ∧ LocatedAt(shieldGenerator, c_3) ::: The Death Star is protected by an energy shield generated on Endor.  ",
        "Leads(a_4, strikeTeam) ∧ Destroy(strikeTeam, shieldGenerator) ::: Han leads a strike team to destroy the shield generator.  ",
        "AccompaniedBy(strikeTeam, a_2) ∧ AccompaniedBy(strikeTeam, a_3) ∧ TravelsTo(strikeTeam, c_3) ∧ TravelsIn(strikeTeam, d_1) ::: The strike team, accompanied by Luke and Leia, travels to Endor in a stolen Imperial shuttle.  ",
        "Encounter(a_2, tribeEwoks) ∧ GainTrust(a_2, tribeEwoks) ::: Luke and companions encounter and gain the trust of Ewoks.  ",
        "Tells(a_2, a_3, sister(a_3, a_2)) ∧ Father(a_7, a_2) ∧ Father(a_7, a_3) ∧ MustGoConfront(a_2, a_7) ::: Luke tells Leia she is his sister, Vader is their father, and he must confront Vader.  ",
        "SurrendersTo(a_2, imperialTroops) ∧ TakenTo(a_2, a_7) ::: Luke surrenders to Imperial troops and is taken to Vader.  ",
        "TriesToConvince(a_2, a_7, TurnFromDarkSide(a_7)) ∧ Fails(TriesToConvince(a_2,"
      ]
    },
    {
      "id": "42b6d4260bbc83d7d8343779d34e96a067dfaad4",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "Takes(a_7, a_2, c_1) ::: Vader takes Luke to the Death Star.  ",
        "Meets(a_2, a_0) ::: Luke meets the Emperor.  ",
        "IntentOnTurningToDarkSide(a_0, a_2) ::: The Emperor intends to turn Luke to the dark side.  ",
        "RevealsFullyOperational(a_0, c_1) ::: The Emperor reveals the Death Star is fully operational.  ",
        "FallIntoTrap(b_2) ::: The Rebel fleet will fall into a trap.  ",
        "Captured(b_4, c_3) ::: Han's strike team (part of Rebels) is captured on Endor.  ",
        "CounterattackByEwoks(b_4) ::: A surprise counterattack by Ewoks helps Rebels.  ",
        "Leads(a_1, b_2, c_1) ::: Lando leads the Rebel fleet to the Death Star.  ",
        "Pilots(a_1, d_2) ::: Lando pilots the Millennium Falcon.  ",
        "ShieldActive(c_1) ::: The Death Star's shield is still active.  ",
        "ImperialFleetWaiting(b_1, c_1) ::: The Imperial fleet is waiting at the Death Star.  ",
        "Tempts(a_0, a_2, anger) ::: The Emperor tempts Luke to give in to anger.  ",
        "EngagesInDuel(a_2, a_7) ::: Luke engages Vader in a lightsaber duel.  ",
        "SensesSister(a_7, a_2) ::: Vader senses Luke has a sister.  ",
        "SuggestsTurningToDarkSide(a_7, a_3) ::: Vader suggests turning Luke’s sister to the dark side.  ",
        "Overpowers(a_2, a_7) ::: Luke overpowers Vader.  ",
        "SeversProstheticHand(a_2, a_7) ::: Luke severs Vader’s prosthetic right hand.  ",
        "FearsBecomingLike(a_2, a_7) ::: Luke fears he will become like Vader.  ",
        "TellsToKillAndTakePlace(a_0, a_2, a_7) ::: The Emperor tells Luke to kill Vader and take his place.  ",
        "RefusesAndDeclaresJedi(a_2) ::: Luke refuses and declares himself a Jedi.  ",
        "DefeatsStrikeTeam(b_1, b_4, c_3) ::: The strike team defeats Imperial forces on Endor.  ",
        "DestroysShieldGenerator(b_4, c_3) ::: The strike team destroys the shield generator on Endor.  ",
        "LaunchAssaultAllowed(b_2, c_1) ::: The Rebel fleet is allowed to launch assault on the Death Star.  ",
        "TorturesWithForceLightning(a_0, a_2) ::: The Emperor tortures Luke with Force lightning.  ",
        "ThrowsDownReactorShaft(a_7, a_0, c_2) ::: Vader throws the Emperor down the Death Star reactor shaft.  ",
        "Kills(a_7, a_0) ::: Vader kills the Emperor.  ",
        "MortallyWounded(a_7) ::: Vader is mortally wounded.  ",
        "AsksToRemoveMask(a_7, a_2) ::: Vader asks Luke to remove his mask.  ",
        "DiesPeacefully(a_7) ::: Vader dies peacefully.  ",
        "BriefTalk(a_7, a_2) ::: Vader and Luke have a brief talk.  ",
        "",
        "Premises:  ",
        "DestroysShieldGenerator(b_4, c_3) → LaunchAssaultAllowed(b_2, c_1) ::: The destruction of the shield generator allows the Rebel fleet to launch their assault on the Death Star."
      ]
    },
    {
      "id": "42b6d4260bbc83d7d8343779d34e96a067dfaad4",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "Leads(a_1, b_3) ::: Lando leads a group of Rebel ships.  ",
        "Destroys(a_1, c_2) ::: Lando destroys the Death Star's core (main reactor).  ",
        "Escapes(a_2, d_1) ::: Luke escapes on a shuttle.  ",
        "Carries(d_1, d_4) ::: The shuttle carries his father's body.  ",
        "FliesOut(d_2, c_1) ::: The Falcon flies out of the Death Star.  ",
        "Explodes(c_1) ::: The Death Star explodes.  ",
        "Reveals(a_3, a_4, a_2) ::: Leia reveals to Han that Luke is her brother.  ",
        "Kisses(a_3, a_4) ::: Leia and Han kiss.  ",
        "Returns(a_2, c_3) ::: Luke returns to Endor.  ",
        "Cremates(a_2, d_4, d_3) ::: Luke cremates his father's body on a funeral pyre.  ",
        "Celebrate(b_4) ::: The Rebels celebrate their victory.  ",
        "Smiles(a_2) ::: Luke smiles.  ",
        "Sees(a_2, a_5) ::: Luke sees Obi-Wan.  ",
        "Sees(a_2, a_6) ::: Luke sees Yoda.  ",
        "Sees(a_2, a_7) ::: Luke sees the redeemed Anakin.  ",
        "WatchesOver(a_5, b_4) ::: Obi-Wan watches over the Rebels.  ",
        "WatchesOver(a_6, b_4) ::: Yoda watches over the Rebels.  ",
        "WatchesOver(a_7, b_4) ::: The redeemed Anakin watches over the Rebels.  ",
        "",
        "Premises:  ",
        "Leads(a_1, b_3) ∧ Destroys(a_1, c_2) ::: Lando leads a group of Rebel ships into the Death Star's core and destroys the main reactor.  ",
        "Escapes(a_2, d_1) ∧ Carries(d_1, d_4) ::: Luke escapes on a shuttle with his father's body.  ",
        "FliesOut(d_2, c_1) ∧ Explodes(c_1) ::: The Falcon flies out of the Death Star as the station explodes.  ",
        "Reveals(a_3, a_4, a_2) ∧ Kisses(a_3, a_4) ::: On Endor, Leia reveals to Han that Luke is her brother, and they kiss.  ",
        "Returns(a_2, c_3) ∧ Cremates(a_2, d_4, d_3) ::: Luke returns to Endor and cremates his father's body on a funeral pyre.  ",
        "Celebrate(b_4) ∧ Smiles(a_2) ∧ Sees(a_2, a_5) ∧ Sees(a_2, a_6) ∧ Sees(a_2, a_7) ∧ WatchesOver(a_5, b_4) ∧ WatchesOver(a_6, b_4) ∧ WatchesOver(a_7, b_4) ::: As the Rebels celebrate their victory over the Empire, Luke smiles as he sees the ghosts of Obi-Wan, Yoda, and the redeemed Anakin watching over them."
      ]
    }
  ],
  "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63": [
    {
      "id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "Person(x) ::: x is a person  ",
        "Cannibal(x) ::: x is a cannibal  ",
        "DarfarianSlave(x) ::: x is a Darfarian slave  ",
        "RoamsAtNight(x) ::: x roams the streets at night  ",
        "PreysOn(x, y) ::: x preys on y  ",
        "Traveler(x) ::: x is a traveler  ",
        "TolerateCityPeople(x) ::: x is a person of the city who tolerates the cannibals  ",
        "LockedSecurelyAtNight(x) ::: x stays locked securely in their home at night  ",
        "Nomad(x) ::: x is a nomad  ",
        "Beggar(x) ::: x is a beggar  ",
        "SpendsNightAwayFromCityWalls(x) ::: x spends the night at a comfortable distance from the city walls  ",
        "Innkeeper(x) ::: x is an innkeeper  ",
        "ProvidesFreshMeat(x, y) ::: x provides fresh meat to y  ",
        "ProfitsFrom(x, y) ::: x profits from y  ",
        "Guest(x) ::: x is a guest of the inn  ",
        "City(d_1) ::: d_1 is the city  ",
        "Tavern(d_2) ::: d_2 is a tavern  ",
        "RunBy(d_2, x) ::: tavern d_2 is run by person x  ",
        "Chamber(d_3) ::: d_3 is a chamber  ",
        "EntersAtNight(x, d_3) ::: x enters chamber d_3 at night  ",
        "TrickLock(d_3) ::: d_3 has a trick lock  ",
        "DragsAway(x, y) ::: x drags away y  ",
        "Armed(x) ::: x is armed  ",
        "Wary(x) ::: x is wary  ",
        "Kills(x, y) ::: x kills y  ",
        "RunsInto(x, y) ::: x runs into y  ",
        "Naked(x) ::: x is naked  ",
        "Woman(x) ::: x is a woman  ",
        "Chasing(x, y) ::: x chases y  ",
        "DerangedLover(x) ::: x is a deranged lover  ",
        "Rescues(x, y) ::: x rescues y  ",
        "AttackByCannibals(x) ::: x is attacked by cannibals  ",
        "LovePotion(x) ::: x is a love potion  ",
        "HighPriest(x) ::: x is a high priest  ",
        "AttemptToKill(x, y) ::: x attempts to kill y  ",
        "RewardPromised(x, y) ::: x promises a reward to y  ",
        "",
        "Entities:  ",
        "a_0: people  ",
        "a_1: Conan  ",
        "a_2: Aram Baksh  ",
        "a_3: Jungir (the deranged lover)  ",
        "b_0: hungry cannibals (group representative)  ",
        "d_1: city  ",
        "d_2: cheap tavern in Zamboula  ",
        "d_3: Conan's small chamber  ",
        "",
        "Premises:  ",
        "∀x (DarfarianSlave(x) ∧ InCity(x, d_1) → Cannibal(x) ∧ RoamsAtNight(x))  ",
        "::: All Darfarian slaves in the city are cannibals who roam the streets at night.",
        "",
        "∀x ∀y ((Cannibal(x) ∧ Traveler(y)) → PreysOn(x, y))  ",
        "::: The Darfarian cannibals only prey on travelers.",
        "",
        "∀x (Person(x) ∧ InCity(x, d_1) → (TolerateCityPeople(x) ∧ LockedSecurelyAtNight(x)))  ",
        "::: The people of the city tolerate the Darfarian cannibals and stay locked securely in their homes at night.",
        "",
        "∀x ((Nomad(x) ∨ Beggar(x)) → SpendsNightAwayFromCityWalls(x))  ",
        "::: Nomads and beggars make sure to spend the night at a comfortable distance from the city walls.",
        "",
        "ProvidesFreshMeat(a_2, b_0) ∧ ProfitsFrom(a_2, BelongingsOf(Guest))  ",
        "::: Aram Baksh provides the cannibals with \"fresh meat\" and profits from the belongings of the ill-fated guests of his inn.",
        "",
        "RunBy(d_2, a_2)  ",
        "::: The cheap tavern in Zamboula is run by Aram Baksh.",
        "",
        "EntersAtNight(x, d_3) ∧ Cannibal(x) ∧ DarfarianSlave(x) ∧ DragsAway(x, a_1)  ",
        "::: A black Darfarian cannibal enters Conan's small chamber at night by means of a trick lock to drag him away.",
        "",
        "TrickLock(d_3)  ",
        "::: Conan's chamber has a trick lock.",
        "",
        "Armed(a_1) ∧ Wary(a_1)  ",
        "::: Conan is armed and wary.",
        "",
        "Kills(a_1, x) â†� (EntersAtNight(x, d_3) ∧ Cannibal(x) ∧ DarfarianSlave(x) ∧"
      ]
    },
    {
      "id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "Captured(woman) ::: The woman is captured.  ",
        "ForcedToDance(woman, HighPriest) ::: The woman is forced to dance before the High priest.  ",
        "DiesWhileDancing(woman) ::: The woman dies while dancing.  ",
        "Hypnotized(woman) ::: The woman is forced via hypnotism.  ",
        "Defeats(conan, BaalPteor) ::: Conan defeats the strangler Baal-pteor.  ",
        "Rescues(conan, woman) ::: Conan rescues the woman.  ",
        "Kills(conan, HighPriest) ::: Conan kills the High priest.  ",
        "RevealsIdentity(woman, Nafertari) ::: The woman reveals she is Nafertari.  ",
        "MistressOf(Nafertari, Jungir) ::: Nafertari is mistress to Jungir Khan.  ",
        "TakesAntidote(Nafertari, Jungir) ::: Nafertari takes an antidote to Jungir.  ",
        "Promises(Nafertari, conan, PositionAndWealth) ::: Nafertari promises Conan position and wealth.  ",
        "",
        "Premises:  ",
        "Captured(woman) ∧ Hypnotized(woman) ∧ ForcedToDance(woman, HighPriest) ∧ DiesWhileDancing(woman) ::: The woman is captured, forced via hypnotism to dance before the High priest until she dies.  ",
        "Defeats(a_1, BaalPteor) ∧ Rescues(a_1, woman) ∧ Kills(a_1, HighPriest) ::: Conan defeats the strangler Baal-pteor, rescues the woman, and kills the High priest.  ",
        "RevealsIdentity(woman, Nafertari) ∧ MistressOf(Nafertari, Jungir) ::: The woman reveals she is Nafertari, mistress to Jungir Khan.  ",
        "TakesAntidote(Nafertari, Jungir) ∧ Promises(Nafertari, a_1, PositionAndWealth) ::: Nafertari takes an antidote to Jungir and promises Conan position and wealth."
      ]
    },
    {
      "id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "Leaves(x, y) ::: x leaves place y  ",
        "Recognised(x, y) ::: x recognised y  ",
        "TakesRevengeOn(x, y) ::: x takes revenge on y  ",
        "CutsOutTongue(x, y) ::: x cuts out y's tongue  ",
        "ShearsOffBeard(x, y) ::: x shears off y's beard  ",
        "Mute(x) ::: x is mute  ",
        "Unrecognizable(x) ::: x is unrecognizable  ",
        "TurnsOverTo(x, y, z) ::: x turns y over to z  ",
        "Devour(z, y) ::: z devours y  ",
        "IronicHumorDisplay(x) ::: x displays ironic sense of humor  ",
        "Steals(x, y) ::: x steals y  ",
        "IntentToSell(x, y) ::: x intends to sell y  ",
        "Has(x, y) ::: x has y  ",
        "",
        "Premises:  ",
        "Leaves(a_1, d_1) ::: Conan leaves the city  ",
        "Recognised(a_1, a_0) ::: Conan recognised them (the people) almost immediately  ",
        "TakesRevengeOn(a_1, a_2) ::: Conan takes revenge on Aram Baksh  ",
        "CutsOutTongue(a_1, a_2) ∧ ShearsOffBeard(a_1, a_2) → (Mute(a_2) ∧ Unrecognizable(a_2)) ::: If Conan cuts out Aram Baksh's tongue and shears off his beard, then Aram Baksh is mute and unrecognizable  ",
        "TurnsOverTo(a_1, a_2, b_1) ∧ Devour(b_1, a_2) ::: Conan turns Aram Baksh over to the hungry cannibals to devour  ",
        "IronicHumorDisplay(a_1) ::: Conan's revenge is a display of ironic humor  ",
        "Has(a_1, c_1) ∧ Has(a_1, c_2) ::: Conan has gold and the magic ring  ",
        "Steals(a_1, c_2) ::: Conan stole the magic ring from Jungir  ",
        "IntentToSell(a_1, c_2) ::: Conan intends to sell the magic ring to another interested party"
      ]
    }
  ],
  "4e6e052732e90a9c127f6502feddee1a17301c14": [
    {
      "id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "Villette(x) ::: x is the novel Villette.  ",
        "Protagonist(x) ::: x is the protagonist of Villette.  ",
        "Passive(x) ::: x is passive.  ",
        "Age(x, n) ::: x is n years old.  ",
        "HomeOf(x, y) ::: x is the home of y.  ",
        "Godmother(x, y) ::: x is the godmother of y.  ",
        "Town(x) ::: x is a town.  ",
        "Clean(x) ::: x is clean.  ",
        "Ancient(x) ::: x is ancient.  ",
        "LocatedIn(x, y) ::: x is located in y.  ",
        "Country(x) ::: x is a country.  ",
        "Resident(x, y) ::: x resides at y.  ",
        "SonOf(x, y) ::: x is the son of y.  ",
        "Called(x, n) ::: x is called n (a nickname).  ",
        "Visitor(x) ::: x is a visitor.  ",
        "Peculiar(x) ::: x is peculiar.  ",
        "DevotedTo(x, y) ::: x is devoted to y.  ",
        "ShowersWithAttention(x, y) ::: x showers y with attention.  ",
        "VisitCutShort(x) ::: x’s visit is cut short.  ",
        "FatherOf(x, y) ::: x is the father of y.  ",
        "TakesAway(x, y) ::: x takes y away.  ",
        "",
        "Premises:  ",
        "Protagonist(a_1) ∧ Passive(a_1) ∧ Age(a_1, 14) ::: Lucy Snowe is the passive protagonist aged 14.  ",
        "HomeOf(mrsBretton, a_1) ∧ Godmother(mrsBretton, a_1) ::: Mrs. Bretton is Lucy Snowe’s godmother and her home.  ",
        "Town(bretton) ∧ Clean(bretton) ∧ Ancient(bretton) ∧ LocatedIn(bretton, england) ∧ Country(england) ::: Bretton is a clean and ancient town in England.  ",
        "Resident(mrsBretton, mrsBrettonHome) ∧ Resident(johnGrahamBretton, mrsBrettonHome) ∧ SonOf(johnGrahamBretton, mrsBretton) ::: Mrs. Bretton and her son John Graham Bretton live at Mrs. Bretton’s home.  ",
        "Called(johnGrahamBretton, graham) ::: John Graham Bretton is called Graham.  ",
        "Resident(paulinaHome, mrsBrettonHome) ∧ Visitor(paulinaHome) ::: Paulina Home is a visitor residing at Mrs. Bretton’s home.  ",
        "Called(paulinaHome, polly) ::: Paulina Home is called Polly.  ",
        "Peculiar(polly) ::: Polly is peculiar.  ",
        "DevotedTo(polly, graham) ∧ ShowersWithAttention(graham, polly) ::: Polly is devoted to Graham, who showers her with attention.  ",
        "VisitCutShort(polly) ∧ FatherOf(fatherOfPolly, polly) ∧ TakesAway(fatherOfPolly, polly) ::: Polly’s visit is cut short when her father arrives to take her away."
      ]
    },
    {
      "id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "Leaves(x, y, t) ::: x leaves y at time t.  ",
        "FamilyTragedy(t) ::: A family tragedy occurs at time t.  ",
        "WithoutFamilyHomeMeans(x, t) ::: x is without family, home, or means at time t.  ",
        "HiredAsCaregiver(x, y, t) ::: x is hired as a caregiver by y at time t.  ",
        "RheumaticCrippledWoman(x) ::: x is a rheumatic crippled woman.  ",
        "AccustomedToWork(x, t) ::: x is accustomed to her work at time t.  ",
        "ContentWithLifestyle(x, t) ::: x is content with her lifestyle at time t.  ",
        "",
        "Premises:  ",
        "Leaves(lucy, mrsBrettonHome, fewWeeksAfterPollyDeparture) ::: Lucy leaves Mrs. Bretton's home a few weeks after Polly's departure.  ",
        "∃t (FamilyTragedy(t) ∧ WithoutFamilyHomeMeans(lucy, t)) ::: Some years later, a family tragedy leaves Lucy without family, home, or means.  ",
        "HiredAsCaregiver(lucy, missMarchmont, afterHesitation) ∧ RheumaticCrippledWoman(missMarchmont) ::: After some hesitation, Lucy is hired as a caregiver by Miss Marchmont, a rheumatic crippled woman.  ",
        "AccustomedToWork(lucy, soon) ∧ ContentWithLifestyle(lucy, soon) ::: Lucy soon becomes accustomed to her work and feels content with her quiet lifestyle."
      ]
    },
    {
      "id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "MissMarchmont(x) ::: x is Miss Marchmont  ",
        "Lucy(x) ::: x is Lucy  ",
        "Energy(x, level) ::: x has energy level (e.g., high, low)  ",
        "FeelsYoung(x) ::: x feels young  ",
        "SharesLoveStory(x, y, t) ::: x shares with y a love story from time t  ",
        "ShouldTreatBetter(x, y) ::: x should treat y better  ",
        "ShouldBeBetterPerson(x) ::: x should be a better person  ",
        "BelievesReunionAfterDeath(x, y) ::: x believes that death will reunite x with y  ",
        "Dead(x) ::: x is dead  ",
        "Evening(t) ::: t is an evening  ",
        "Morning(t) ::: t is a morning  ",
        "DramaticWeatherChanges(t) ::: t has dramatic weather changes  ",
        "FindsDead(x, y, t) ::: x finds y dead at time t  ",
        "",
        "Premises:  ",
        "MissMarchmont(a_1) ∧ Lucy(a_0) ∧ Evening(evening1) ∧ DramaticWeatherChanges(evening1) ∧ Energy(a_1, high) ∧ FeelsYoung(a_1)  ",
        "SharesLoveStory(a_1, a_0, time30yearsAgo) ∧ ShouldTreatBetter(a_1, a_0) ∧ ShouldBeBetterPerson(a_1)  ",
        "BelievesReunionAfterDeath(a_1, deadLover)  ",
        "Morning(morning1) ∧ FindsDead(a_0, a_1, morning1) ∧ Dead(a_1)  ",
        "",
        "Explanation:  ",
        "- Miss Marchmont regains all her energy and feels young again during an evening of dramatic weather changes.  ",
        "- She shares with Lucy her sad love story from 30 years ago, and concludes she should treat Lucy better and be a better person.  ",
        "- She believes death will reunite her with her dead lover.  ",
        "- The next morning, Lucy finds Miss Marchmont dead."
      ]
    },
    {
      "id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "Leaves(a_0, countryside) ::: Lucy leaves the English countryside.  ",
        "GoesTo(a_0, london) ::: Lucy goes to London.  ",
        "Age(a_0, 23) ::: Lucy is 23 years old.  ",
        "Boards(a_0, ship) ::: Lucy boards a ship.  ",
        "KnowsLittle(a_0, french) ::: Lucy knows very little French.  ",
        "TravelsTo(a_0, villette) ::: Lucy travels to the city of Villette.  ",
        "FindsEmployment(a_0, bonne) ::: Lucy finds employment as a bonne (nanny).  ",
        "WorksAt(a_0, mmeBeckSchool) ::: Lucy works at Mme. Beck's boarding school for girls.  ",
        "BasedOn(mmeBeckSchool, hegersBrusselsPensionnat) ::: Mme. Beck's school is based on the Hégers' Brussels pensionnat.  ",
        "HiredToTeach(a_0, english) ::: Lucy is hired to teach English.  ",
        "MindsChildren(a_0, 3, mmeBeck) ::: Lucy minds Mme. Beck's three children.  ",
        "ThrivesDespiteSurveillance(a_0, mmeBeck) ::: Lucy thrives despite Mme. Beck's constant surveillance.  ",
        "Surveils(mmeBeck, staffAndStudents) ::: Mme. Beck constantly surveils staff and students.  ",
        "",
        "Premises:  ",
        "Leaves(a_0, countryside) ∧ GoesTo(a_0, london) ::: Lucy leaves the English countryside and goes to London.  ",
        "Age(a_0, 23) ∧ Boards(a_0, ship) ∧ KnowsLittle(a_0, french) ::: At age 23, Lucy boards a ship despite knowing very little French.  ",
        "TravelsTo(a_0, villette) ∧ FindsEmployment(a_0, bonne) ∧ WorksAt(a_0, mmeBeckSchool) ::: Lucy travels to Villette and finds employment as a bonne at Mme. Beck's boarding school.  ",
        "BasedOn(mmeBeckSchool, hegersBrusselsPensionnat) ::: Mme. Beck's school is based on the Hégers' Brussels pensionnat.  ",
        "HiredToTeach(a_0, english) ∧ MindsChildren(a_0, 3, mmeBeck) ::: Lucy is hired to teach English and mind Mme. Beck's three children.  ",
        "ThrivesDespiteSurveillance(a_0, mmeBeck) ∧ Surveils(mmeBeck, staffAndStudents) ::: Lucy thrives despite Mme. Beck's constant surveillance of staff and students."
      ]
    },
    {
      "id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 4,
      "fols": [
        "Predicates:  ",
        "DrJohn(x) ::: x is Dr. John  ",
        "English(x) ::: x is English  ",
        "Doctor(x) ::: x is a doctor  ",
        "Handsome(x) ::: x is handsome  ",
        "Visits(x, y) ::: x frequently visits y  ",
        "School(y) ::: y is a school  ",
        "Loves(x, y) ::: x loves y  ",
        "Coquette(y) ::: y is a coquette  ",
        "GinevraFanshawe(y) ::: y is Ginevra Fanshawe  ",
        "RevealedToBe(x, y) ::: x is revealed to be y  ",
        "KnownBy(x, y) ::: x is known by y  ",
        "ConcealedFromReader(x) ::: x is deliberately concealed from the reader  ",
        "Discovers(x, p) ::: x discovers proposition p  ",
        "Unworthy(y) ::: y is unworthy  ",
        "TurnsAttentionTo(x, y) ::: x turns attention to y  ",
        "BecomeCloseFriends(x, y) ::: x and y become close friends  ",
        "ValuesHighly(x, y) ::: x values y highly  ",
        "EmotionalReserve(x) ::: x has usual emotional reserve  ",
        "Lucy(a_2) ::: Lucy (assigned a_2 for clarity)  ",
        "",
        "Premises:  ",
        "DrJohn(a_3) ∧ English(a_3) ∧ Doctor(a_3) ∧ Handsome(a_3) ::: Dr. John is a handsome English doctor.  ",
        "School(a_4) ∧ Visits(a_3, a_4) ::: Dr. John frequently visits the school.  ",
        "Coquette(a_5) ∧ GinevraFanshawe(a_5) ∧ Loves(a_3, a_5) ::: Dr. John loves the coquette Ginevra Fanshawe.  ",
        "RevealedToBe(a_3, a_6) ∧ KnownBy(a_6, a_2) ∧ ConcealedFromReader(a_6) ::: Dr. John is revealed to be John Graham Bretton, a fact known by Lucy but concealed from the reader.  ",
        "Discovers(a_3, Unworthy(a_5)) → TurnsAttentionTo(a_3, a_2) ::: If Dr. John discovers that Ginevra Fanshawe is unworthy then Dr. John turns attention to Lucy.  ",
        "TurnsAttentionTo(a_3, a_2) → BecomeCloseFriends(a_3, a_2) ::: If Dr. John turns attention to Lucy then Dr. John and Lucy become close friends.  ",
        "ValuesHighly(a_2, BecomeCloseFriends(a_3, a_2)) ∧ EmotionalReserve(a_2) ::: Lucy values this friendship highly despite her usual emotional reserve."
      ]
    },
    {
      "id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 5,
      "fols": [
        "Predicates:  ",
        "Father(x, y) ::: x is the father of y  ",
        "InheritTitle(x, t) ::: x has inherited the title t  ",
        "Title(t) ::: t is a noble title  ",
        "Count(t) ::: t is the title of Count  ",
        "Name(x, n) ::: x’s name is n  ",
        "Person(x) ::: x is a person  ",
        "KnowEachOther(x, y) ::: x and y knew each other in the past  ",
        "Friendship(x, y) ::: x and y have a friendship  ",
        "FallInLove(x, y) ::: x and y fall in love  ",
        "Marry(x, y) ::: x and y marry  ",
        "",
        "Premises:  ",
        "Father(fatherPolly, polly) ::: Polly’s father is fatherPolly  ",
        "InheritTitle(fatherPolly, deBassompierre) ::: Polly’s father has inherited the title \"de Bassompierre\"  ",
        "Title(deBassompierre) ∧ Count(deBassompierre) ::: \"de Bassompierre\" is a title and it is a Count title  ",
        "Name(polly, paulinaHomeDeBassompierre) ::: Polly’s name is now Paulina Home de Bassompierre  ",
        "KnowEachOther(polly, graham) ::: Polly and Graham knew each other in the past  ",
        "Friendship(polly, graham) ::: Polly and Graham renew their friendship  ",
        "FallInLove(polly, graham) ::: Polly and Graham fall in love  ",
        "Marry(polly, graham) ::: Polly and Graham marry"
      ]
    },
    {
      "id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 6,
      "fols": [
        "Predicates:  ",
        "Colleague(a_0, a_p) ::: a_0 is a colleague of a_p  ",
        "Irascible(a_p) ::: a_p is irascible  ",
        "Autocratic(a_p) ::: a_p is autocratic  ",
        "MaleChauvinist(a_p) ::: a_p is a male chauvinist  ",
        "Professor(a_p) ::: a_p is a professor  ",
        "Relative(a_p, a_m) ::: a_p is a relative of a_m  ",
        "FallInLove(a_0, a_p) ::: a_0 and a_p fall in love  ",
        "",
        "Premises:  ",
        "Colleague(a_0, paulEmanuel) ∧ Irascible(paulEmanuel) ∧ Autocratic(paulEmanuel) ∧ MaleChauvinist(paulEmanuel) ∧ Professor(paulEmanuel) ∧ Relative(paulEmanuel, mmeBeck) ::: Lucy becomes progressively closer to a colleague, the irascible, autocratic, and male chauvinist professor, M. Paul Emanuel, a relative of Mme. Beck.  ",
        "FallInLove(a_0, paulEmanuel) ::: Lucy and Paul eventually fall in love."
      ]
    },
    {
      "id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 7,
      "fols": [
        "Predicates:  ",
        "ConspiringGroup(g) ::: g is a group of conspiring antagonists  ",
        "WorksToKeepApart(g, p1, p2) ::: group g works to keep persons p1 and p2 apart  ",
        "ForcesDeparture(g, p, loc) ::: group g forces person p to depart to location loc  ",
        "DepartsTo(p, loc) ::: person p departs to location loc  ",
        "DeclaresLoveBeforeDeparture(p1, p2) ::: person p1 declares love for person p2 before departure  ",
        "ArrangesIndependentLivingAsHeadmistress(p1, p2) ::: person p1 arranges for person p2 to live independently as headmistress of a school  ",
        "LivesIndependentlyAsHeadmistress(p) ::: person p lives independently as headmistress of a day school  ",
        "ExpandsDaySchoolToPensionnat(p) ::: person p expands the day school into a pensionnat (boarding school)  ",
        "",
        "Premises:  ",
        "∀g ∀p1 ∀p2 (ConspiringGroup(g) ∧ WorksToKeepApart(g, p1, p2) → ∃loc ForcesDeparture(g, p1, loc))  ",
        "::: If a group of conspiring antagonists works to keep two people apart, then the group can force one person to depart to a distant location.  ",
        "",
        "∀p ∀loc ∀p2 (DepartsTo(p, loc) → (DeclaresLoveBeforeDeparture(p, p2) ∧ ArrangesIndependentLivingAsHeadmistress(p, p2)))  ",
        "::: If a person departs to a distant location, then the person can declare love for another person before departure and arrange for that person to live independently as headmistress of a school.  ",
        "",
        "∀p (LivesIndependentlyAsHeadmistress(p) → ExpandsDaySchoolToPensionnat(p))  ",
        "::: If a person lives independently as the headmistress of a day school, then that person can expand the day school into a pensionnat (boarding school)."
      ]
    },
    {
      "id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 8,
      "fols": [
        "Predicates:  ",
        "Lucy(a_0) ::: a_0 is Lucy  ",
        "NunFigure(x) ::: x is the figure of a nun  ",
        "GhostOfNun(x) ::: x is the ghost of a nun  ",
        "BuriedAlive(x) ::: x was buried alive  ",
        "PunishmentForBreakingVow(x) ::: x was punished for breaking her vow of chastity  ",
        "SymbolicScene(x) ::: x is a highly symbolic scene  ",
        "Discovers(x, y) ::: x discovers y  ",
        "Habit(y) ::: y is a nun's habit  ",
        "Destroys(x, y) ::: x destroys y  ",
        "Disguise(y) ::: y is a disguise  ",
        "WornBy(y, x) ::: y is worn by x  ",
        "Ginevra(a_1) ::: a_1 is Ginevra  ",
        "Amour(x, y) ::: x is the amour of y  ",
        "AlfredDeHamal(a_2) ::: a_2 is Alfred de Hamal  ",
        "EpisodeWithNun(x) ::: x is an episode with the nun figure  ",
        "ContributedToReputation(x, y) ::: x contributed to the reputation of y  ",
        "NovelReputationAsGothic(x) ::: x is the novel's reputation as a gothic novel  ",
        "",
        "Premises:  ",
        "∃x (NunFigure(x) ∧ (GhostOfNun(x) ∧ BuriedAlive(x) ∧ PunishmentForBreakingVow(x))) ::: The nun figure may be the ghost of a nun who was buried alive as punishment for breaking her vow of chastity.  ",
        "SymbolicScene(s) ∧ Discovers(a_0, h) ∧ Habit(h) ∧ Destoys(a_0, h) ::: In a highly symbolic scene, Lucy discovers the nun's habit and destroys it.  ",
        "Disguise(h) ∧ WornBy(h, a_2) ∧ Amour(a_2, a_1) ::: The habit was a disguise worn by Alfred de Hamal, Ginevra's amour.  ",
        "∀e (EpisodeWithNun(e) → ContributedToReputation(e, NovelReputationAsGothic)) ::: The episodes with the nun contributed substantially to the novel's reputation as a gothic novel."
      ]
    },
    {
      "id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 9,
      "fols": [
        "Predicates:  ",
        "VilletteFinalPagesAmbiguous() ::: Villette's final pages are ambiguous.  ",
        "SaysLucyWantLeaveFree() ::: Lucy says that she wants to leave the reader free to imagine a happy ending.  ",
        "HintsStronglyShipDestroyed() ::: Lucy hints strongly that M. Paul's ship was destroyed by a storm during his return journey from the West Indies.  ",
        "AwayYears(a_2, 3) ::: M. Emanuel was away three years.  ",
        "HappiestYearsOfLife(3) ::: Those three years were the happiest years of Lucy's life.  ",
        "PassageSuggestsDrowned() ::: The passage suggests that M. Emanuel was drowned by the \"destroying angel of tempest.\"  ",
        "",
        "Entities:  ",
        "a_0: Reader  ",
        "a_1: Lucy (speaker)  ",
        "a_2: M. Emanuel (M. Paul)  ",
        "b_0: ambiguity of the ending  ",
        "b_1: destroying angel of tempest (storm)  ",
        "",
        "Premises:  ",
        "VilletteFinalPagesAmbiguous() ::: Villette's final pages are ambiguous.  ",
        "SaysLucyWantLeaveFree() ::: Lucy says she wants to leave the reader free to imagine a happy ending.  ",
        "HintsStronglyShipDestroyed() ::: Lucy hints strongly that M. Paul's ship was destroyed by a storm during his return journey from the West Indies.  ",
        "AwayYears(a_2, 3) ∧ HappiestYearsOfLife(3) ::: M. Emanuel was away three years, which were the happiest years of Lucy's life.  ",
        "PassageSuggestsDrowned() ::: The passage suggests that M. Emanuel was drowned by the \"destroying angel of tempest.\"  ",
        "",
        "No explicit rules given. The above predicates and premises capture the information in the paragraph."
      ]
    },
    {
      "id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 10,
      "fols": [
        "Predicates:  ",
        "Describes(a_1, b_1) ::: Brontë describes the ambiguity of the ending.  ",
        "Is(b_2, \"little puzzle\") ::: The little puzzle is identified as \"little puzzle\".  ",
        "Calls(a_1, b_1, b_2) ::: Brontë called the ambiguity of the ending a little puzzle.  ",
        "",
        "Premises:  ",
        "Calls(a_1, b_1, b_2) ↔ (Describes(a_1, b_1) ∧ Is(b_2, \"little puzzle\")) ::: Brontë described the ambiguity of the ending as a little puzzle."
      ]
    }
  ],
  "5328457f649b51410906d4d23b915f5147bee4ed": [
    {
      "id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "Inherit(x, y) ::: x is set to inherit y  ",
        "Diamond(y) ::: y is a diamond  ",
        "Called(y, n) ::: y is called n  ",
        "Mother(x, y) ::: x is the mother of y  ",
        "StepFather(x, y) ::: x is the step-father of y  ",
        "ChallengeWill(x, y) ::: x challenges the will of y  ",
        "ClaimNotReady(x, y) ::: x claims y is not ready for responsibility  ",
        "WantToTake(x, y) ::: x wants to take y for himself  ",
        "SexEducationSeminar(e) ::: e is a sexual education seminar  ",
        "SchoolOf(x, s) ::: x is a school of s  ",
        "Physician(x) ::: x is a physician  ",
        "ProbationOfficer(x) ::: x is a probation officer  ",
        "Discuss(x, y) ::: x discusses y  ",
        "VictimOf(x, y) ::: x was a victim of y  ",
        "AnonymousRapist(y) ::: y is an anonymous rapist  ",
        "YearsBefore(t) ::: t years before  ",
        "",
        "Entities:  ",
        "Marie: a_0  ",
        "Richards: a_1  ",
        "Elena: a_2 (also a_3 in refering expressions, but here a_2 is used)  ",
        "Jay: a_3  ",
        "Kristen: a_4  ",
        "MotherAndDaughterDiamonds: b_1  ",
        "Mother: b_m (not explicitly given, but can be represented as mother of Marie)  ",
        "SexEdSeminar: c_0  ",
        "RapeEvent: c_1  ",
        "",
        "Premises:  ",
        "Inherit(a_0, b_1) ::: Marie is set to inherit the mother and daughter diamonds  ",
        "Diamond(b_1) ::: The mother and daughter are diamonds  ",
        "Called(b_1, \"mother and daughter\") ::: The diamonds are called \"mother and daughter\"  ",
        "Mother(b_m, a_0) ::: The late mother bestowed the diamonds to Marie  ",
        "StepFather(a_3, a_0) ::: Jay is Marie's step-father  ",
        "ChallengeWill(a_3, a_0) ::: Jay challenges Marie's will  ",
        "ClaimNotReady(a_3, a_0) ::: Jay claims Marie isn't ready for responsibility  ",
        "WantToTake(a_3, b_1) ::: Jay wants to take the diamonds for himself  ",
        "SexEducationSeminar(c_0) ::: There is a sexual education seminar  ",
        "SchoolOf(c_0, a_0) ::: The seminar is at Marie's school  ",
        "Physician(a_p) ::: Dr. Chad Johnson is a physician (a_p)  ",
        "ProbationOfficer(a_4) ::: Kristen Richards is a probation officer  ",
        "Discuss(a_p, sex_crimes) ::: Dr. Chad Johnson discusses sex crimes  ",
        "Discuss(a_4, sex_crimes) ::: Kristen Richards discusses sex crimes  ",
        "VictimOf(a_4, rapist) ::: Richards was a victim of an anonymous rapist  ",
        "AnonymousRapist(rapist) ::: The rapist is anonymous  ",
        "YearsBefore(t) ::: The rape happened many years before  ",
        "",
        "Note: The refering expressions for Elena and Kristen overlap; Elena is a_2 and Kristen is a_4. Richards is a_1, but also Kristen Richards is a_4. The text says Richards reveals she was a victim, so Richards = Kristen Richards = a_1 or a_4? The refering expressions list Richards: a_1 and Kristen: a_4 separately, so Richards and Kristen are different people. The text says Richards reveals she was a victim, so Richards = a_1 is victim. Elena is a_2. Jay is a_3. Kristen is a_4. So Richards (a_1) is victim, Kristen (a_4) is probation officer. So Richards and Kristen are different people.  ",
        "",
        "Therefore:  ",
        "VictimOf(a_1, rapist) ::: Richards was a victim of an anonymous rapist  ",
        "",
        "No explicit rules given, so no implications added."
      ]
    },
    {
      "id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "SwimMeet(x) ::: x is a swim-meet event.  ",
        "Encounter(x, y) ::: x encounters y.  ",
        "Invite(x, y, e) ::: x invites y to event e.  ",
        "Attend(x, e) ::: x attends event e.  ",
        "Assault(x, y) ::: x assaults y.  ",
        "SayNotWelcome(x, y) ::: x says y is not welcome.  ",
        "Comfort(x, y) ::: x comforts y.  ",
        "BringTo(x, y, l) ::: x brings y to location l.  ",
        "ConstructionSite(l) ::: l is a construction site.  ",
        "Allege(x, p) ::: x alleges proposition p.  ",
        "Rape(x, y) ::: x raped y.  ",
        "Detective(x) ::: x is a detective.  ",
        "PlacedOnCase(x, c) ::: x is placed on case c.  ",
        "ProbationOfficer(x, y) ::: x is probation officer of y.  ",
        "InChargeOf(x, t) ::: x is in charge of task t.  ",
        "DocumentInjuries(x, y) ::: x documents injuries of y.  ",
        "TestifyToCourt(x, p) ::: x testifies to court proposition p.  ",
        "",
        "Entities:  ",
        "a_0: people (general)  ",
        "a_1: Richards  ",
        "a_2: Elena  ",
        "a_3: Jay  ",
        "a_4: Kristen  ",
        "c_0: Events  ",
        "c_1: rape of Kristen by Jay  ",
        "c_2: plan pulled off by Richards  ",
        "c_3: Elena (repeated)  ",
        "c_4: Jay (repeated)  ",
        "d_0: Other  ",
        "d_1: credits  ",
        "d_2: scenes  ",
        "",
        "Premises:  ",
        "SwimMeet(marieSwimMeet) ::: Marie's swim-meet event.  ",
        "Encounter(a_3, a_2) ::: Jay encounters Elena at Marie's swim-meet.  ",
        "Invite(a_3, a_2, marie18thParty) ::: Jay invites Elena to Marie's eighteenth birthday party.  ",
        "Attend(a_2, marie18thParty) ::: Elena attends Marie's eighteenth birthday party.  ",
        "Assault(marie, a_2) ::: Marie assaults Elena.  ",
        "SayNotWelcome(marie, a_2) ::: Marie says Elena is not welcome.  ",
        "Comfort(a_3, a_2) ::: Jay comforts Elena.  ",
        "BringTo(a_3, a_2, constructionSite) ::: Jay brings Elena to a construction site for privacy.  ",
        "ConstructionSite(constructionSite) ::: The location is a construction site.  ",
        "Allege(a_2, Rape(a_3, a_2)) ::: Elena alleges that Jay raped her at the site.  ",
        "Detective(a_michaelMorrison) ::: Michael Morrison is a detective.  ",
        "PlacedOnCase(a_michaelMorrison, caseElenaJay) ::: Michael Morrison is placed on the case involving Elena and Jay.  ",
        "PlacedOnCase(a_1, caseElenaJay) ::: Richards is placed on the case involving Elena and Jay.  ",
        "ProbationOfficer(a_1, a_2) ::: Richards is Elena's probation officer.  ",
        "InChargeOf(a_chad, documentInjuries) ::: Chad is in charge of documenting Elena's injuries.  ",
        "DocumentInjuries(a_chad, a_2) ::: Chad documents Elena's injuries.  ",
        "TestifyToCourt(a_chad, Rape(a_3, a_2)) ::: Chad testifies to the court that Elena was raped by Jay."
      ]
    },
    {
      "id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "Believes(a_1, a_2, forMoney) ::: Richards (a_1) believes that Elena (a_2) is doing this for money.  ",
        "Tells(a_1, a_3, PayOff(a_2)) ::: Richards tells Jay (a_3) to pay Elena off.  ",
        "Admits(a_3, broke) ::: Jay admits that he is broke.  ",
        "Suggests(a_1, Sell(diamonds)) ::: Richards suggests selling the diamonds.  ",
        "Agrees(a_3, Suggests(a_1, Sell(diamonds))) ::: Jay agrees to the suggestion to sell the diamonds.  ",
        "RevokesClaim(a_3, will) ::: Jay revokes his claim to the will.  ",
        "GivesCustody(a_3, a_1, diamonds) ::: Jay gives Richards custody of the diamonds.  ",
        "CanSell(a_1, diamonds) ::: Richards can sell the diamonds.  ",
        "PloyBetween(a_2, a_1, a_3) ::: Elena, Richards, and Jay have a ploy together to get the diamonds.  ",
        "SexualRelationship(a_2, a_1, a_3) ::: Elena, Richards, and Jay are in a sexual relationship together.  ",
        "",
        "Premises:  ",
        "Believes(a_1, a_2, forMoney) ∧ Tells(a_1, a_3, PayOff(a_2)) ∧ Admits(a_3, broke) ∧ Suggests(a_1, Sell(diamonds)) ∧ Agrees(a_3, Suggests(a_1, Sell(diamonds))) ∧ RevokesClaim(a_3, will) ∧ GivesCustody(a_3, a_1, diamonds) ∧ CanSell(a_1, diamonds) ∧ PloyBetween(a_2, a_1, a_3) ∧ SexualRelationship(a_2, a_1, a_3) ::: The entire scenario describing the beliefs, actions, and relationships among Richards, Elena, and Jay regarding the diamonds and the ploy."
      ]
    },
    {
      "id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "Believes(x, y) ::: x believes y  ",
        "Recant(y, z) ::: y will recant z  ",
        "PaidOff(y) ::: y is paid off  ",
        "Testifies(y, s) ::: y testifies s  ",
        "ThreatenedToKill(x, y) ::: x threatened to kill y  ",
        "SentToPrison(x) ::: x is sent to prison  ",
        "SuspiciousOf(x, y) ::: x is suspicious of y's behavior  ",
        "Search(x, y) ::: x searches y's trailer  ",
        "GatheredInfo(y, i) ::: y has gathered information i  ",
        "InfoAbout(i, e) ::: information i is about event e  ",
        "FormTestimony(y, i) ::: y uses information i to form testimony  ",
        "DiscussSuspicions(x, y, z) ::: x and y discuss suspicions with z  ",
        "WorkTogether(m, e, c) ::: Marie, Elena, and Chad work together  ",
        "SuspectCollaboration(r, m, e, c) ::: Richards and Morrison suspect collaboration among Marie, Elena, and Chad  ",
        "",
        "Premises:  ",
        "WorkTogether(marie, elena, chad) → SuspectCollaboration(richards, morrison, marie, elena, chad)  ",
        "Believes(jay, Recant(elena, accusation)) ∧ PaidOff(elena) ::: Jay believes Elena will recant her accusation after being paid off  ",
        "Testifies(elena, ThreatenedToKill(jay, elena)) ::: Elena testifies that Jay threatened to kill her  ",
        "SentToPrison(jay) ::: Jay is sent to prison  ",
        "SuspiciousOf(richards, elena) ::: Richards is suspicious of Elena's behavior  ",
        "Search(richards, elena) ∧ Search(morrison, elena) ::: Richards and Morrison search Elena's trailer  ",
        "GatheredInfo(elena, info) ∧ InfoAbout(info, rapeOf(kristen, jay)) ::: Elena has gathered information about Kristen's rape by Jay  ",
        "FormTestimony(elena, info) ::: Elena uses the information to form her testimony  ",
        "DiscussSuspicions(richards, morrison, jay) ::: Richards and Morrison discuss their suspicions with Jay  ",
        "",
        "Note:  ",
        "- marie, elena, chad, richards, morrison, jay, kristen are constants representing the respective people (a_1, a_2, etc.)  ",
        "- accusation refers to the accusation Elena made against Jay  ",
        "- info is an existentially quantified information entity about Kristen's rape by Jay"
      ]
    },
    {
      "id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 4,
      "fols": [
        "Predicates:  ",
        "Questioned(a_1, a_0) ::: Richards questioned Chad.  ",
        "Questioned(a_4, a_0) ::: Morrison questioned Chad.  ",
        "FearsSuspect(a_0, a_1) ::: Chad fears that Richards suspects him.  ",
        "FearsSuspect(a_0, a_4) ::: Chad fears that Morrison suspects him.  ",
        "TurnsOn(a_0, a_2) ::: Chad turns on Marie.  ",
        "Drugs(a_0, a_2) ::: Chad drugs Marie.  ",
        "Steals(a_0, diamonds) ::: Chad steals the diamonds.  ",
        "GivesChase(a_2, a_0) ::: Marie gives chase to Chad.  ",
        "GivesChase(a_3, a_0) ::: Elena gives chase to Chad.  ",
        "Follows(a_2, a_0, woods) ::: Marie follows Chad into the woods.  ",
        "Kills(a_2, a_0, tireIron) ::: Marie kills Chad with a tire iron.  ",
        "Meets(a_2, diamondBuyer) ::: Marie meets the diamond buyer Chad set up.  ",
        "LearnsFakeDiamonds(a_2) ::: Marie learns that the diamonds are fake.  ",
        "LeftToDealWithBody(a_2, a_0) ::: Elena is left to deal with Chad’s body.  ",
        "CaughtBy(a_2, a_1) ::: Elena is caught by Richards.  ",
        "CaughtBy(a_2, a_4) ::: Elena is caught by Morrison.  ",
        "",
        "Premises:  ",
        "Questioned(a_1, a_0) ∧ Questioned(a_4, a_0) ::: Chad is questioned by Richards and Morrison.  ",
        "FearsSuspect(a_0, a_1) ∧ FearsSuspect(a_0, a_4) ::: Chad fears they suspect him.  ",
        "TurnsOn(a_0, a_2) ∧ Drugs(a_0, a_2) ∧ Steals(a_0, diamonds) ::: Chad turns on Marie, drugs her, and steals the diamonds.  ",
        "GivesChase(a_2, a_0) ∧ GivesChase(a_3, a_0) ∧ Follows(a_2, a_0, woods) ::: Marie and Elena give chase, following Chad into the woods.  ",
        "Kills(a_2, a_0, tireIron) ::: Marie kills Chad with a tire iron.  ",
        "Meets(a_2, diamondBuyer) ∧ LearnsFakeDiamonds(a_2) ::: Marie meets the diamond buyer Chad set up, but learns the diamonds are fake.  ",
        "LeftToDealWithBody(a_2, a_0) ∧ CaughtBy(a_2, a_1) ∧ CaughtBy(a_2, a_4) ::: Elena, left to deal with Chad’s body, is caught by Richards and Morrison."
      ]
    },
    {
      "id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 5,
      "fols": [
        "Predicates:  ",
        "Richards(x) ::: x is Richards  ",
        "Elena(x) ::: x is Elena  ",
        "Marie(x) ::: x is Marie  ",
        "Chad(x) ::: x is Chad  ",
        "Safe(x) ::: x is a safe  ",
        "ConstructionSite(x) ::: x is a construction site  ",
        "Task(giver, receiver, task) ::: giver gives receiver a task  ",
        "WearWire(x) ::: x wears a wire  ",
        "GetToAdmit(x, y, fact) ::: x tries to get y to admit fact  ",
        "PlayAlong(x, plan) ::: x plays along with plan  ",
        "GetDiamondsFromSafe(x, safe) ::: x gets diamonds from safe  ",
        "PullGunOn(x, y) ::: x pulls a gun on y  ",
        "FleesWithDiamonds(x) ::: x flees with diamonds  ",
        "ChasesWithGun(x, y) ::: x chases y with a gun  ",
        "ListeningNearby(x) ::: x is listening nearby  ",
        "EnterSite(x, site) ::: x enters site  ",
        "Finds(x, y) ::: x finds y  ",
        "ShootsInChest(x, y) ::: x shoots y in the chest  ",
        "Killed(x) ::: x is killed  ",
        "ClaimsNoDiamonds(x) ::: x claims there were no diamonds  ",
        "EscortedFromScene(x, by) ::: x is escorted from the scene by by  ",
        "",
        "Premises:  ",
        "Task(richards, elena, wearWireAndGetMarieToAdmit) ::: Richards gives Elena the task to wear a wire and get Marie to admit killing Chad and lessen charges against Elena.  ",
        "PlayAlong(elena, mariePlan) ::: Elena plays along with Marie’s plan to get diamonds from Chad’s safe at the construction site.  ",
        "∀t (RepeatedTryGetConfess(elena, marie, t) → ¬Successful(t)) ::: Elena repeatedly tries to get Marie to confess but is unsuccessful.  ",
        "GetDiamondsFromSafe(marieAndElena, safeAtConstructionSite) ::: Marie and Elena get diamonds from the safe at the construction site.  ",
        "PullGunOn(elena, marie) ∧ FleesWithDiamonds(elena) ∧ ChasesWithGun(marie, elena) ::: Elena pulls a gun on Marie and flees with the diamonds, Marie chases her with a gun.  ",
        "ListeningNearby(richards) ∧ ListeningNearby(morrison) ::: Richards and Morrison are listening nearby.  ",
        "EnterSite(richards, constructionSite) ∧ EnterSite(morrison, constructionSite) ::: Richards and Morrison enter the construction site separately.  ",
        "Finds(richards, marie) → ShootsInChest(richards, marie) ::: If Richards finds Marie then Richards shoots Marie in the chest.  ",
        "ShootsInChest(richards, marie) → Killed(marie) ::: If Richards shoots Marie in the chest then Marie is killed.  ",
        "ClaimsNoDiamonds(elena) ∧ EscortedFromScene(elena, richards) ::: Afterward, Elena claims there were no diamonds and is escorted from the scene by Richards."
      ]
    },
    {
      "id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 6,
      "fols": [
        "Predicates:  ",
        "Mother(a_1, a_2) ::: Richards is the mother of Elena.  ",
        "Daughter(a_2, a_1) ::: Elena is the daughter of Richards.  ",
        "Daughter(a_2, a_3) ::: Elena is the daughter of Jay.  ",
        "Raped(a_3, a_4) ::: Jay raped Kristen.  ",
        "PlanPulledOffBy(a_2) ::: Elena pulled off the plan.  ",
        "PlanPulledOffBy(a_1) ::: Richards pulled off the plan.  ",
        "PlanPulledOffBy(a_3) ::: Jay pulled off the plan.  ",
        "SceneShownInCredits(d_2, d_1) ::: Scenes are shown during the credits.  ",
        "ExplainScenes(d_2, c_2) ::: Scenes explain how the plan was pulled off.  ",
        "",
        "Premises:  ",
        "Mother(a_1, a_2) ∧ Daughter(a_2, a_1) ::: Richards and Elena are mother and daughter.  ",
        "Raped(a_3, a_4) ::: Jay raped Kristen in the past.  ",
        "Daughter(a_2, a_1) ∧ Daughter(a_2, a_3) ::: Elena is the daughter of both Richards and Jay.  ",
        "SceneShownInCredits(d_2, d_1) ∧ ExplainScenes(d_2, c_2) ::: During the credits, scenes are shown explaining how the plan was pulled off.  ",
        "PlanPulledOffBy(a_1) ∧ PlanPulledOffBy(a_2) ∧ PlanPulledOffBy(a_3) ::: Richards, Elena, and Jay pulled off the plan."
      ]
    }
  ],
  "55ac84541ede6e0f1106b2e4ab01a2bac2f21e39": [
    {
      "id": "55ac84541ede6e0f1106b2e4ab01a2bac2f21e39",
      "paragraph_id": 0,
      "fols": [
        "Predicates:",
        "AuctionedBy(gov, b_1) ::: The US Government auctioned Spencer Island.",
        "LocatedAt(b_1, coordinates) ::: Spencer Island is located at given coordinates (32°15′N 145°18′W).",
        "Uninhabited(b_1) ::: Spencer Island is uninhabited.",
        "Bidder(a_5) ::: a person is a bidder.",
        "Wealthy(a_5) ::: a person is very wealthy.",
        "ResidentOf(a_5, b) ::: a person resides in place b.",
        "Winner(a_5, b_1) ::: a person won the auction for Spencer Island.",
        "BoughtFor(a_5, b_1, amount) ::: a person bought Spencer Island for a certain amount.",
        "Muttered(a_5, phrase) ::: a person muttered a phrase.",
        "RetiredTo(a_5, place) ::: a person retired to a place.",
        "",
        "Premises:",
        "AuctionedBy(USGovernment, b_1) ::: The US Government auctioned Spencer Island.",
        "LocatedAt(b_1, coordinates(32_15N, 145_18W)) ::: Spencer Island is located 460 miles off the California coast at 32°15′N 145°18′W.",
        "Uninhabited(b_1) ::: Spencer Island is uninhabited.",
        "Bidder(a_kolderup) ∧ Wealthy(a_kolderup) ∧ ResidentOf(a_kolderup, b_2) ::: William W. Kolderup is a very wealthy San Franciscan and a bidder.",
        "Bidder(a_taskinar) ∧ ResidentOf(a_taskinar, b_stockton) ::: J. R. Taskinar is a resident of Stockton, California and a bidder.",
        "Winner(a_kolderup, b_1) ∧ BoughtFor(a_kolderup, b_1, 4000000) ::: Kolderup won the auction, buying Spencer Island for four million dollars.",
        "Muttered(a_taskinar, \"I will be avenged!\") ∧ RetiredTo(a_taskinar, hotel) ::: J. R. Taskinar muttered \"I will be avenged!\" before retiring to his hotel.",
        "",
        "Note on IDs:",
        "- a_kolderup: William W. Kolderup (assigning a_5 for clarity)",
        "- a_taskinar: J. R. Taskinar (assigning a_6 for clarity)",
        "- b_1: Spencer Island",
        "- b_2: San Francisco",
        "- b_stockton: Stockton, California",
        "- hotel: a place (can be b_hotel or just hotel)"
      ]
    },
    {
      "id": "55ac84541ede6e0f1106b2e4ab01a2bac2f21e39",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "Idle(x) ::: x is idle  ",
        "Age(x, y) ::: x is y years old  ",
        "LivesWith(x, y) ::: x lives with y  ",
        "AdoptedGoddaughter(x, y) ::: x is the adopted goddaughter of y  ",
        "Loves(x, y) ::: x loves y  ",
        "RequestsToUndertake(x, y) ::: x requests to undertake y  ",
        "SendsOnVoyage(x, y, z) ::: x sends y on voyage z  ",
        "SeaVoyageAroundWorld(y) ::: y is a sea voyage around the world  ",
        "Ship(x) ::: x is a ship  ",
        "CommandedBy(x, y) ::: ship x is commanded by y  ",
        "MentorOf(x, y) ::: x is mentor of y  ",
        "TeacherOf(x, y) ::: x is teacher of y  ",
        "DanceInstructorOf(x, y) ::: x is dance instructor of y  ",
        "",
        "Premises:  ",
        "Idle(a_1) ∧ Age(a_1, 22) ::: Godfrey is an idle twenty-two-year-old  ",
        "LivesWith(a_1, a_3) ∧ LivesWith(a_1, a_4) ∧ LivesWith(a_4, a_3) ∧ AdoptedGoddaughter(a_4, a_3) ::: Godfrey lives with his uncle Kolderup and Kolderup’s adopted goddaughter Phina  ",
        "Loves(a_1, a_4) ::: Godfrey has grown to love Phina  ",
        "RequestsToUndertake(a_1, worldTour) ::: Godfrey asks to undertake a world tour before marrying Phina  ",
        "SendsOnVoyage(a_3, a_1, seaVoyageAroundWorld) ∧ SeaVoyageAroundWorld(seaVoyageAroundWorld) ∧ Ship(c_1) ∧ CommandedBy(c_1, captainTurcott) ::: Kolderup sends Godfrey on a sea voyage around the world on the steamship Dream commanded by Captain Turcott  ",
        "MentorOf(a_2, a_1) ∧ TeacherOf(a_2, a_1) ∧ DanceInstructorOf(a_2, a_1) ::: Tartlet is Godfrey’s mentor, teacher, and dance instructor"
      ]
    },
    {
      "id": "55ac84541ede6e0f1106b2e4ab01a2bac2f21e39",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "Awakened(a_1) ::: Godfrey is awakened  ",
        "FoggyNight(n_0) ::: The night is foggy  ",
        "ToldAbandonShip(a_1, c_1) ::: Godfrey is told to abandon the ship Dream  ",
        "JumpedIntoSea(a_1) ::: Godfrey jumps into the sea  ",
        "WashedAshore(a_1, b_1) ::: Godfrey is washed ashore on the deserted island  ",
        "Marooned(a_2, b_1) ::: Tartlet is marooned on the deserted island  ",
        "HelpFrom(a_2, a_1) ::: Tartlet gives help to Godfrey  ",
        "LearnToSurvive(a_1) ::: Godfrey learns to survive  ",
        "OrganizeLife(a_1) ::: Godfrey organizes his life  ",
        "FaceHostileIntruders(a_1) ::: Godfrey faces hostile intruders  ",
        "OvercomeObstacles(a_1) ::: Godfrey overcomes obstacles  ",
        "JoinedBy(a_3, d_1) ::: Carefinotu joins the marooned group  ",
        "RescuedBy(a_3, a_1) ::: Godfrey rescues Carefinotu  ",
        "PolynesiansVisitingIsland(p_0, b_1) ::: Polynesians visit the island  ",
        "JadedYoungMan(a_1) ::: Godfrey is a formerly jaded young man  ",
        "DiscoveredValueIndependentEffort(a_1) ::: Godfrey discovers the value of independent effort  ",
        "GainsPoiseAndCourage(a_1) ::: Godfrey gains poise and courage  ",
        "MaroonedGroup(d_1) ::: The marooned group  ",
        "Rescued(d_1) ::: The marooned group are rescued  ",
        "ReturnedTo(d_1, b_2) ::: The marooned group are returned to San Francisco  ",
        "Reunited(a_1, a_4) ::: Godfrey is reunited with Phina  ",
        "AgreeToMarry(a_1, a_4) ::: Godfrey and Phina agree to marry  ",
        "ContinueWorldTourTogether(a_1, a_4) ::: Godfrey and Phina continue the world tour together  ",
        "",
        "Premises:  ",
        "Awakened(a_1) ∧ FoggyNight(n_0) ∧ ToldAbandonShip(a_1, c_1) ::: Godfrey is awakened one foggy night and told to abandon ship Dream  ",
        "JumpedIntoSea(a_1) ∧ WashedAshore(a_1, b_1) ::: Godfrey jumps into the sea and is washed ashore on a deserted island  ",
        "Marooned(a_2, b_1) ::: Tartlet has also been marooned on the deserted island  ",
        "HelpFrom(a_2, a_1) → (LearnToSurvive(a_1) ∧ OrganizeLife(a_1) ∧ FaceHostileIntruders(a_1) ∧ OvercomeObstacles(a_1)) ::: With scant help from Tartlet, Godfrey learns to survive, organize life, face intruders, and overcome obstacles  ",
        "JoinedBy(a_3, d_1) ∧ RescuedBy(a_3, a_1) ∧ PolynesiansVisitingIsland(p_0, b_1) ::: Carefinotu joins the marooned group after Godfrey rescues him from Polynesians visiting the island  ",
        "JadedYoungMan(a_1) → (DiscoveredValueIndependentEffort(a_1) ∧ GainsPoiseAndCourage(a_1)) ::: The formerly jaded young man Godfrey discovers the value of independent effort and gains poise and courage  ",
        "MaroonedGroup(d_1) ∧ Rescued(d_1) ∧ ReturnedTo(d_1, b_2) ::: The marooned group are rescued and returned to San Francisco  ",
        "Reunited(a_1, a_4) → (AgreeToMarry(a_1, a_4) ∧ ContinueWorldTourTogether(a_1, a_4)) ::: If Godfrey is reunited with Phina then they agree to marry before continuing the world tour together"
      ]
    }
  ],
  "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78": [
    {
      "id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "PhenomenonFinDeSiecle(x) ::: x is the phenomenon of fin de siècle  ",
        "RecognisedIn(x, y) ::: phenomenon x is recognised in place y  ",
        "OriginatesIn(x, y) ::: phenomenon x originates in place y  ",
        "ContemptForTraditionalViews(x) ::: phenomenon x is a contempt for the traditional views of custom and morality  ",
        "IsDecadence(x) ::: phenomenon x is a sort of decadence  ",
        "IsWorldWeariness(x) ::: phenomenon x is a world-weariness  ",
        "WilfulRejectionOfMoralBoundaries(x) ::: phenomenon x is the wilful rejection of the moral boundaries governing the world  ",
        "Society(x) ::: x is society  ",
        "InclinedToImitateArt(x) ::: society x becomes more inclined to imitate what it sees in art  ",
        "Figure(x) ::: x is a figure in fashionable society  ",
        "FashionableSocietyIn(x, y) ::: figure x is in fashionable society in place y  ",
        "StrivesToStartleAttention(x) ::: figure x strives visibly by some singularity in outline, set, cut or colour to startle attention violently and imperiously to detain it  ",
        "WishesToCreateNervousExcitement(x) ::: figure x wishes to create a strong nervous excitement no matter whether agreeably or disagreeably  ",
        "PlaceFrance ::: France  ",
        "PlaceParis ::: Paris  ",
        "PlaceLondon ::: London  ",
        "PhenomenonFinDeSiecle_0 ::: the fin de siècle phenomenon (group representative)  ",
        "",
        "Premises:  ",
        "RecognisedIn(PhenomenonFinDeSiecle_0, PlaceFrance) ∧ ¬OriginatesIn(PhenomenonFinDeSiecle_0, PlaceFrance)  ",
        "::: The phenomenon of fin de siècle is first recognised in France and does not originate in France.  ",
        "",
        "ContemptForTraditionalViews(PhenomenonFinDeSiecle_0)  ",
        "::: The phenomenon of fin de siècle is a contempt for the traditional views of custom and morality.  ",
        "",
        "IsDecadence(PhenomenonFinDeSiecle_0)  ",
        "::: The phenomenon of fin de siècle is a sort of decadence.  ",
        "",
        "IsWorldWeariness(PhenomenonFinDeSiecle_0)  ",
        "::: The phenomenon of fin de siècle is a world-weariness.  ",
        "",
        "WilfulRejectionOfMoralBoundaries(PhenomenonFinDeSiecle_0)  ",
        "::: The phenomenon of fin de siècle is the wilful rejection of the moral boundaries governing the world.  ",
        "",
        "InclinedToImitateArt(Society)  ",
        "::: Society becomes more inclined to imitate what society sees in art.  ",
        "",
        "∀x (Figure(x) ∧ (FashionableSocietyIn(x, PlaceParis) ∨ FashionableSocietyIn(x, PlaceLondon)) → StrivesToStartleAttention(x))  ",
        "::: Every single figure in the fashionable society of Paris and London strives visibly by some singularity in outline, set, cut or colour to startle attention violently and imperiously to detain it.  ",
        "",
        "∀x (Figure(x) ∧ (FashionableSocietyIn(x, PlaceParis) ∨ FashionableSocietyIn(x, PlaceLondon)) → WishesToCreateNervousExcitement(x))  ",
        "::: Each figure in the fashionable society of Paris and London wishes to create a strong nervous excitement no matter whether agreeably or disagreeably."
      ]
    },
    {
      "id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "Establishes(a_1, b_0) ::: Nordau establishes the cultural phenomenon of fin de siècle.  ",
        "MovesToViewpoint(a_1, physician) ::: Nordau quickly moves to the viewpoint of a physician.  ",
        "IdentifiesIllness(a_1, illness) ::: Nordau identifies what he sees as an illness.  ",
        "",
        "Premises:  ",
        "Establishes(a_1, finDeSiecle) ::: Nordau establishes the cultural phenomenon of fin de siècle in the opening pages.  ",
        "MovesToViewpoint(a_1, physician) ::: Nordau quickly moves to the viewpoint of a physician.  ",
        "IdentifiesIllness(a_1, illness) ::: Nordau identifies what he sees as an illness."
      ]
    },
    {
      "id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "Degeneration(x) ::: x is a condition of degeneration.",
        "Hysteria(x) ::: x is a condition of hysteria.",
        "Neurasthenia(x) ::: x is a minor stage of degeneration or hysteria.",
        "Physician(x) ::: x is a physician.",
        "FamiliarWith(x, y) ::: x is quite familiar with condition y.",
        "WritesMysticSymbolicDecadentWorks(x) ::: x writes mystic, symbolic, and 'decadent' works.",
        "AdmireAttitudeInFashionableSociety(x) ::: x has the attitude taken by admirers in fashionable society.",
        "ConditionOfDisease(x) ::: x is a well-defined condition of disease.",
        "MinorStageOf(x, y) ::: x is a minor stage of condition y.",
        "",
        "Premises:",
        "Degeneration(disease1) ::: Degeneration is a well-defined condition of disease.",
        "Hysteria(disease2) ::: Hysteria is a well-defined condition of disease.",
        "Neurasthenia(stage1) ↔ (MinorStageOf(stage1, disease1) ∨ MinorStageOf(stage1, disease2)) ::: Neurasthenia is the minor stage of degeneration or hysteria.",
        "∃x (Physician(x) ∧ FamiliarWith(x, disease1) ∧ FamiliarWith(x, disease2)) ::: There exists a physician who is quite familiar with degeneration and hysteria.",
        "∀x (WritesMysticSymbolicDecadentWorks(x) ∧ AdmireAttitudeInFashionableSociety(x) → (Degeneration(disease1) ∧ Hysteria(disease2))) ::: The confluence of degeneration and hysteria is associated with the life and conduct of men who write mystic, symbolic, and decadent works and the attitude of their admirers in fashionable society.",
        "",
        "Explanation:",
        "- Degeneration and Hysteria are the two well-defined conditions of disease mentioned.",
        "- Neurasthenia is defined as the minor stages of these conditions.",
        "- The physician is familiar with these conditions.",
        "- The context links the artistic and social phenomena to the confluence of these diseases."
      ]
    },
    {
      "id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "DegeneratingSociety(b_0) ::: Society is degenerating.  ",
        "DegeneratingHumans(b_0) ::: Human beings themselves are degenerating.  ",
        "ReflectedInArt(b_0) ::: Degeneration is reflected in art.  ",
        "InfluencedByArt(b_0) ::: Degeneration is influenced by art.  ",
        "RefersTo(a_0, b_1) ::: Person a_0 refers to concept b_1.  ",
        "EmbracesUnusualTypes(b_0) ::: Society embraces unusual or exotic types or individuals.  ",
        "SocialCriticismPosition(a_1) ::: Nordau’s social criticism position.  ",
        "NotNovelOrIsolated(a_1) ::: Nordau’s position is not novel or isolated.  ",
        "",
        "Premises:  ",
        "DegeneratingSociety(society) ∧ DegeneratingHumans(humans) ∧ (DegeneratingSociety(society) ∧ DegeneratingHumans(humans) → ReflectedInArt(art) ∧ InfluencedByArt(art))  ",
        "::: Society and human beings are degenerating, and this degeneration is both reflected in and influenced by art.  ",
        "",
        "RefersTo(a_0, b_0) ∧ RefersTo(a_0, b_1) ∧ RefersTo(a_0, b_2) ∧ RefersTo(a_0, b_3) ∧ RefersTo(a_0, b_4) ∧ RefersTo(a_0, b_5) ∧ RefersTo(a_0, b_6) ∧ RefersTo(a_0, b_7) ∧ RefersTo(a_0, b_8)  ",
        "::: The book deals with numerous case studies of various artists, writers and thinkers (Oscar Wilde, Henrik Ibsen, Richard Wagner, Friedrich Nietzsche, etc.) and concepts related to human psyche and factors.  ",
        "",
        "EmbracesUnusualTypes(frenchSociety)  ",
        "::: Late 19th Century French society embraces unusual or exotic types or individuals such as criminals, Gypsies, Turks, and others formerly not socially acceptable.  ",
        "",
        "SocialCriticismPosition(a_1) ∧ NotNovelOrIsolated(a_1)  ",
        "::: Nordau’s social criticism position is not novel or isolated."
      ]
    },
    {
      "id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 4,
      "fols": [
        "Predicates:  ",
        "PhysicalFactor(x) ::: x is a physical factor  ",
        "PhysiognomicFactor(x) ::: x is a physiognomic factor  ",
        "MechanicalFactor(x) ::: x is a mechanical factor  ",
        "SymbolicApproach(x) ::: x is a symbolic approach  ",
        "MythicApproach(x) ::: x is a mythic approach  ",
        "MentalAberration(x) ::: x is a mental aberration  ",
        "MentalMalfunction(x) ::: x is a mental malfunction  ",
        "HumanPsyche(x) ::: x is the human psyche  ",
        "Causes(x, y) ::: x causes y  ",
        "PartOf(x, y) ::: x is part of y  ",
        "TimeOfWriting(a_1) ::: the time of Nordau's writing  ",
        "",
        "Premises:  ",
        "∀x ((PhysicalFactor(x) ∨ PhysiognomicFactor(x) ∨ MechanicalFactor(x)) ∧ TimeOfWriting(a_1) → (Causes(x, b_6) ∧ Causes(x, b_7)))  ",
        "::: During the time of Nordau's writing, physical, physiognomic, or mechanical factors cause mental aberrations and malfunctions.",
        "",
        "â¬PartOf(b_4, Understanding(a_1, b_8)) ∧ â¬PartOf(b_5, Understanding(a_1, b_8))  ",
        "::: The symbolic or mythic approach is not part of Nordau's understanding of the human psyche.",
        "",
        "Additional definitions for clarity:  ",
        "Understanding(x, y) ::: x's understanding of y",
        "",
        "Note: Since the context states \"The symbolic or mythic approached later implemented by Freud and Jung made no part of Nordau's understanding of the human psyche,\" we represent that these approaches are not part of Nordau's understanding."
      ]
    }
  ],
  "5f4f9df9f707d382b33c73db83b316a60599a6ea": [
    {
      "id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "PreCrimePolice(x) ::: x is the PreCrime police  ",
        "StopBeforeAct(x, y) ::: x stops y before y acts  ",
        "Murderer(x) ::: x is a murderer  ",
        "MurderRateZero ::: the murder rate is zero  ",
        "Precog(x) ::: x is a Precog  ",
        "PrevisualizeCrimes(x) ::: x previsualizes crimes by receiving visions of the future  ",
        "MurdersPredicted ::: murders can be predicted  ",
        "WouldBeMurderer(x) ::: x is a would-be murderer  ",
        "ImprisonedInVR(x) ::: x is imprisoned in their own happy virtual reality  ",
        "NoCommitMurder(x) ::: x does not commit murders  ",
        "FederalGovernmentOnVergeOfAdoption ::: the Federal government is on the verge of adopting the program  ",
        "",
        "Premises:  ",
        "∀x ∀y ((PreCrimePolice(x) ∧ Murderer(y) ∧ StopBeforeAct(x, y)) → MurderRateZero)  ",
        "::: If the PreCrime police stop murderers before the murderers act, then the murder rate is zero.  ",
        "",
        "∀x (Precog(x) ∧ PrevisualizeCrimes(x) → MurdersPredicted)  ",
        "::: If Precogs previsualize crimes by receiving visions of the future, then murders can be predicted.  ",
        "",
        "∀x (WouldBeMurderer(x) ∧ ImprisonedInVR(x) → NoCommitMurder(x))  ",
        "::: If would-be murderers are imprisoned in their own happy virtual reality, then the would-be murderers do not commit murders.  ",
        "",
        "∀x (FederalGovernmentOnVergeOfAdoption)  ",
        "::: The Federal government is on the verge of adopting the controversial program."
      ]
    },
    {
      "id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "SeparatedFrom(a_2, a_3) ::: Anderton has separated from Lara.  ",
        "DrugAddict(a_2) ::: Anderton is a drug addict.  ",
        "Agent(a_0) ::: x is an agent (used for Danny Witwer).  ",
        "Auditing(a_0, d_1) ::: Danny Witwer is auditing the PreCrime system.  ",
        "GeneratePrediction(b_2, p) ::: The Precogs generate a prediction p.  ",
        "Prediction(p, a_2, murder, a_x, t) ::: Prediction p states that Anderton will murder person a_x in time t.  ",
        "UnknownTo(a_2, a_x) ::: Anderton does not know person a_x.  ",
        "Flees(a_2, c) ::: Anderton flees place c.  ",
        "ManhuntBegins(a_0, a_2) ::: Witwer begins a manhunt for Anderton.  ",
        "SeeksAdvice(a_2, a_y) ::: Anderton seeks advice from person a_y.  ",
        "Creator(a_y, d_1) ::: a_y is the creator of the PreCrime system.  ",
        "Precog(b_2_i) ::: b_2_i is a Precog (i = 1,2,3).  ",
        "DifferentVision(b_2_i, b_2_j) ::: Precog i has a different vision than Precog j.  ",
        "MinorityReport(v) ::: Vision v is a minority report.  ",
        "Revealed(v) ::: Vision v is revealed.  ",
        "DamagesCredibility(d_1) ::: The PreCrime system's credibility is damaged.  ",
        "ResolveToRecover(a_2, v) ::: Anderton resolves to recover vision v.  ",
        "",
        "Premises:  ",
        "SeparatedFrom(a_2, a_3) ∧ DrugAddict(a_2) ::: Since the disappearance of his son Sean, Anderton has separated from Lara and become a drug addict.  ",
        "Agent(a_0) ∧ Auditing(a_0, d_1) ::: Danny Witwer is an agent auditing the PreCrime system.  ",
        "GeneratePrediction(b_2, p) ∧ Prediction(p, a_2, murder, a_x, 36hours) ::: The Precogs generate a prediction that Anderton will murder a man named Leo Crow in 36 hours.  ",
        "UnknownTo(a_2, a_x) ::: Anderton does not know Crow.  ",
        "Flees(a_2, area) ∧ ManhuntBegins(a_0, a_2) ::: Anderton flees the area as Witwer begins a manhunt.  ",
        "SeeksAdvice(a_2, a_y) ∧ Creator(a_y, d_1) ::: Anderton seeks advice from Dr. Iris Hineman, creator of PreCrime technology.  ",
        "∃b_2_i, b_2_j (Precog(b_2_i) ∧ Precog(b_2_j) ∧ DifferentVision(b_2_i, b_2_j) → MinorityReport(v)) ::: If one Precog has a different vision than the other two, then that vision is a minority report.  ",
        "Revealed(v) → DamagesCredibility(d_1) ::: If the minority report is revealed, the system's credibility is damaged.  ",
        "ResolveToRecover(a_2, v) ::: Anderton resolves to recover the minority report to prove his innocence."
      ]
    },
    {
      "id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "GoesTo(a_2, blackMarketDoctor) ::: Anderton goes to a black market doctor  ",
        "Undergoes(a_2, riskyEyeTransplant) ::: Anderton undergoes a risky eye transplant  ",
        "Avoids(a_2, opticalRecognitionSystem) ::: Anderton avoids the city-wide optical recognition system  ",
        "ReturnsTo(a_2, d_1) ::: Anderton returns to PreCrime system  ",
        "Kidnaps(a_2, a_0) ::: Anderton kidnaps Agatha  ",
        "ShutsDown(a_2, d_0) ::: Anderton shuts down the city-wide optical recognition system  ",
        "OperateAsGroupMind(b_2) ::: The Precogs operate as a group mind  ",
        "Extracts(a_2, minorityReportLeoCrow) ::: Anderton extracts the minority report of Leo Crow  ",
        "Exists(minorityReportLeoCrow) ::: The minority report of Leo Crow exists  ",
        "Shows(a_0, a_2, imageMurderAnnLively) ::: Agatha shows Anderton an image of the murder of Ann Lively  ",
        "MurderedBy(annLively, hoodedFigure) ::: Ann Lively was murdered by a hooded figure  ",
        "Drowned(annLively) ::: Ann Lively was drowned  ",
        "Kidnaps(a_2, a_0) → ShutsDown(a_2, d_0) ::: If Anderton kidnaps Agatha then Anderton shuts down the city-wide optical recognition system  ",
        "OperateAsGroupMind(b_2) → (ShutsDown(a_0, d_0) → ShutsDown(d_1, d_0)) ::: If the Precogs operate as a group mind then shutting down one Precog shuts down the entire system  ",
        "",
        "Premises:  ",
        "GoesTo(a_2, blackMarketDoctor) ∧ Undergoes(a_2, riskyEyeTransplant) ∧ Avoids(a_2, opticalRecognitionSystem) ::: Anderton goes to a black market doctor for a risky eye transplant to avoid the city-wide optical recognition system  ",
        "ReturnsTo(a_2, d_1) ∧ Kidnaps(a_2, a_0) ::: Anderton returns to PreCrime and kidnaps Agatha  ",
        "OperateAsGroupMind(b_2) ::: The Precogs operate as a group mind  ",
        "Kidnaps(a_2, a_0) → ShutsDown(a_2, d_0) ::: If Anderton kidnaps Agatha then Anderton shuts down the city-wide optical recognition system  ",
        "Extracts(a_2, minorityReportLeoCrow) ∧ ¬Exists(minorityReportLeoCrow) ::: Anderton tries to extract the minority report of Leo Crow but none exists  ",
        "Shows(a_0, a_2, imageMurderAnnLively) ∧ MurderedBy(annLively, hoodedFigure) ∧ Drowned(annLively) ::: Instead, Agatha shows Anderton an image of the murder of Ann Lively, who was drowned by a hooded figure"
      ]
    },
    {
      "id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "GoTo(x, y) ::: x goes to y  ",
        "NearTime(x, t) ::: x is near time t  ",
        "Find(x, y) ::: x finds y  ",
        "PhotoOf(y, z) ::: y is a photo of z  ",
        "Arrive(x) ::: x arrives  ",
        "PrepareToKill(x, y) ::: x prepares to kill y  ",
        "Accuse(x, y, z) ::: x accuses y of being z  ",
        "Tell(x, y, z) ::: x tells y z  ",
        "HasAbilityToChooseFuture(x) ::: x has the ability to choose x's future  ",
        "AwareOf(x) ::: x is aware (of the future)  ",
        "BegToBeKilled(x) ::: x begs to be killed  ",
        "HiredToPlantPhotosAndBeKilled(x) ::: x was hired to plant photos and be killed  ",
        "ExchangeForFamilyFinancialWellBeing(x) ::: x's family financial well-being is exchanged for x's death  ",
        "GrabGun(x, y) ::: x grabs y's gun  ",
        "PushTrigger(x) ::: x pushes the trigger  ",
        "KillSelf(x) ::: x kills himself  ",
        "FleeTo(x, y) ::: x flees to y  ",
        "Learn(x, y) ::: x learns y  ",
        "IsMotherOf(x, y) ::: x is mother of y  ",
        "IsDrugAddicted(x) ::: x is drug addicted  ",
        "SoldTo(x, y) ::: x was sold to y  ",
        "SoberedUp(x) ::: x sobered up  ",
        "AttemptToReclaim(x, y) ::: x attempted to reclaim y  ",
        "Murdered(x) ::: x was murdered  ",
        "Realize(x, y) ::: x realizes y  ",
        "TargetedForKnowing(x, y) ::: x is targeted for knowing y  ",
        "",
        "Premises:  ",
        "GoTo(a_2, c_0) ∧ NearTime(c_0, hour36) ∧ Find(a_2, photosOfChildren) ::: Anderton goes to Crow's apartment as the 36-hour time nears, finding numerous photos of children  ",
        "PhotoOf(photo, sean) → Find(a_2, photo) ::: Among photos found is Sean's photo  ",
        "Arrive(crow) ::: Crow arrives  ",
        "PrepareToKill(a_2, crow) ∧ Accuse(a_2, crow, serialChildKiller) ::: Anderton prepares to kill Crow, accusing him of being a serial child killer  ",
        "Tell(a_3, a_2, HasAbilityToChooseFuture(a_2)) ∧ AwareOf(a_2) ::: Agatha tells Anderton that he has the ability to choose his future now that he is aware of it  ",
        "BegToBeKilled(crow) ∧ HiredToPlantPhotosAndBeKilled(crow) ∧ ExchangeForFamilyFinancialWellBeing(crow) ::: Crow begs to be killed, having been hired to plant photos and be killed in exchange for his family's financial well-being  ",
        "GrabGun(crow, gunOf(a_2)) ∧ PushTrigger(crow) → KillSelf(crow) ::: Crow grabs Anderton's gun, pushes the trigger, killing himself  ",
        "FleeTo(a_2, a_3) ∧ FleeTo(a_4, a_3) ::: Anderton and Agatha flee to Lara's house outside the city for refuge  ",
        "Learn(a_2, IsMotherOf(lively, a_3) ∧ IsDrugAddicted(lively) ∧ SoldTo(lively, PreCrime)) ::: They learn Lively was Agatha's drug-addicted mother who sold her to PreCrime  ",
        "SoberedUp(lively) ∧ AttemptToReclaim(lively, a_3) ∧ Murdered(lively) ::: Lively had sobered up, attempted to reclaim Agatha, but was murdered  ",
        "Realize(a_2, TargetedForKnowing(a_2, lively)) ::: Anderton realizes he is being targeted for knowing about Lively's existence and her connection to Agatha"
      ]
    },
    {
      "id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 4,
      "fols": [
        "Predicates:  ",
        "Studying(x, y) ::: x is studying y  ",
        "Suspect(x, y) ::: x suspects y  ",
        "Examine(x, y) ::: x examines y  ",
        "AttemptOnLife(y, n) ::: y has n attempts on life (where n is a number)  ",
        "StoppedBy(attempt1, d) ::: attempt1 was stopped by d  ",
        "Succeeded(attempt2) ::: attempt2 succeeded  ",
        "Report(x, y, z) ::: x reports z to y  ",
        "Director(x, y) ::: x is the director of y  ",
        "Founder(x, y) ::: x is the founder of y  ",
        "Kill(x, y, z) ::: x kills y using z  ",
        "Offline(x) ::: x is offline  ",
        "MurderDetected ::: the murder is detected  ",
        "",
        "Premises:  ",
        "Studying(witwer, crowDeath) ::: Witwer is studying Crow's death  ",
        "Suspect(witwer, anderton) ::: Witwer suspects Anderton is being framed  ",
        "Examine(witwer, footageOfLivelyMurder) ::: Witwer examines the footage of Lively's murder  ",
        "AttemptOnLife(lively, 2) ::: There were two attempts on Lively's life  ",
        "StoppedBy(attempt1, preCrime) ::: The first attempt was stopped by PreCrime  ",
        "Succeeded(attempt2) ::: The second attempt succeeded  ",
        "Report(witwer, lamarBurgess, infoAboutAttempts) ::: Witwer reports this to Lamar Burgess  ",
        "Director(lamarBurgess, preCrime) ::: Lamar Burgess is the director of PreCrime  ",
        "Founder(lamarBurgess, preCrime) ::: Lamar Burgess is the founder of PreCrime  ",
        "Kill(lamarBurgess, witwer, andertonGun) ::: Burgess kills Witwer using Anderton's gun  ",
        "Offline(precogs) ::: The Precogs are offline  ",
        "Offline(precogs) → ¬MurderDetected ::: If the Precogs are offline then the murder is not detected"
      ]
    },
    {
      "id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 5,
      "fols": [
        "Predicates:  ",
        "Calls(a_3, a_1) ::: Lara calls Burgess.  ",
        "With(a_2, a_3) ::: Anderton is with Lara.  ",
        "Captured(a_2) ::: Anderton is captured.  ",
        "AccusedOfMurders(a_2) ::: Anderton is accused of both murders.  ",
        "FittedWithBrainDevice(a_2) ::: Anderton is fitted with the brain device.  ",
        "BrainDeviceEffect(a_2, dreamlikeSleep) ::: The brain device puts Anderton permanently into a dreamlike sleep.  ",
        "DepositedIntoPrison(a_2) ::: Anderton’s body is deposited into the prison.  ",
        "WardenTells(a_2, \"all your dreams come true\") ::: The warden tells Anderton \"all your dreams come true\".  ",
        "Prisoner(a_2) ::: Anderton is a prisoner.  ",
        "",
        "Premises:  ",
        "Calls(a_3, a_1) ∧ With(a_2, a_3) ::: Lara calls Burgess to reveal that Anderton is with her.  ",
        "Captured(a_2) ∧ AccusedOfMurders(a_2) ∧ FittedWithBrainDevice(a_2) ∧ BrainDeviceEffect(a_2, dreamlikeSleep) ::: Anderton is captured, accused of both murders, and fitted with the brain device that puts him permanently into a dreamlike sleep.  ",
        "DepositedIntoPrison(a_2) ∧ Prisoner(a_2) ::: Anderton’s body is deposited into the prison as a prisoner.  ",
        "WardenTells(a_2, \"all your dreams come true\") ::: The warden tells Anderton \"all your dreams come true\"."
      ]
    },
    {
      "id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 6,
      "fols": [
        "Predicates:  ",
        "Kill(x, y) ::: x kills y  ",
        "ImprisonedForLife(x) ::: x will be imprisoned for life  ",
        "ValidatedPreCrime ::: PreCrime system is validated  ",
        "DiscreditedPreCrime ::: PreCrime system is discredited and shut down  ",
        "Spare(x, y) ::: x spares y  ",
        "AwareOfFuture(x) ::: x is aware of their future  ",
        "AbleToChangeFuture(x) ::: x is able to change the future  ",
        "ReconnectedTo(x, y) ::: x is reconnected to system y  ",
        "Comfort(x, y) ::: x attempts to comfort y  ",
        "RevealAsMurderer(x, y) ::: x reveals himself as murderer of y  ",
        "FreeFromStasis(x, y) ::: x frees y from stasis  ",
        "ExposeAtBanquet(x, y, z) ::: x exposes y at event z  ",
        "PlayVideo(x, y) ::: x plays video y  ",
        "GenerateReport(x, y) ::: system x generates report y  ",
        "Corner(x, y) ::: x corners y  ",
        "Explain(x, content) ::: x explains content  ",
        "PointOut(x, content) ::: x points out content  ",
        "RevealFlaw(x, content) ::: x reveals flaw content  ",
        "Shoot(x, y) ::: x shoots y  ",
        "",
        "Premises:  ",
        "∀x ∀y (Kill(x, y) → ImprisonedForLife(x)) ::: If a person kills another person, then the person will be imprisoned for life.  ",
        "∀x ∀y (Kill(x, y) → ValidatedPreCrime) ::: If a person kills another person, then PreCrime will be validated.  ",
        "∀x ∀y (Spare(x, y) → DiscreditedPreCrime) ::: If a person spares another person, then PreCrime will be discredited and shut down.  ",
        "∀x (AwareOfFuture(x) → AbleToChangeFuture(x)) ::: Once people are aware of their future, people are able to change the future.  ",
        "",
        "Additional facts from the context:  ",
        "ReconnectedTo(a_1, d_1) ::: Agatha is reconnected to the PreCrime system.  ",
        "Comfort(a_0, a_3) ::: Burgess attempts to comfort Lara.  ",
        "RevealAsMurderer(a_0, a_1) ::: Burgess accidentally reveals himself as Lively's murderer. (Note: Burgess is a_1, so this is Burgess reveals himself as murderer of Lively - Lively is not explicitly assigned an ID, so we omit or treat as implicit.)  ",
        "FreeFromStasis(a_3, a_2) ::: Lara frees Anderton from stasis.  ",
        "ExposeAtBanquet(a_2, a_0, d_1) ::: Anderton exposes Burgess at PreCrime banquet.  ",
        "PlayVideo(a_2, vision) ::: Anderton plays full video of Agatha's vision of Burgess killing Lively. (vision is implicit entity)  ",
        "GenerateReport(d_1, report) ::: PreCrime generates new report: Burgess will kill Anderton.  ",
        "Corner(a_0, a_2) ::: Burgess corners Anderton.  ",
        "Explain(a_0, content) ::: Burgess explains his plan. (content is summarized)  ",
        "PointOut(a_2, dilemma) ::: Anderton points out Burgess's dilemma.  ",
        "RevealFlaw(a_2, flaw) ::: Anderton reveals ultimate flaw of PreCrime system.  ",
        "Shoot(a_0, a_0) ::: Burgess shoots himself."
      ]
    },
    {
      "id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 7,
      "fols": [
        "Predicates:  ",
        "Dead(a_1) ::: Burgess is dead.  ",
        "ShutDown(d_1) ::: The PreCrime system is shut down.  ",
        "Pardoned(x) ::: x is pardoned.  ",
        "Prisoner(x) ::: x is a prisoner.  ",
        "SoonToHaveChild(a_2, a_3) ::: Anderton and Lara are soon to have a new child together.  ",
        "SentTo(b_2, c_1) ::: The Precogs are sent to an isolated island.  ",
        "LiveInPeace(b_2) ::: The Precogs live their lives in peace.  ",
        "",
        "Premises:  ",
        "Dead(a_1) → (ShutDown(d_1) ∧ ∀x (Prisoner(x) → Pardoned(x)))  ",
        "SoonToHaveChild(a_2, a_3)  ",
        "SentTo(b_2, c_1) ∧ LiveInPeace(b_2)"
      ]
    }
  ],
  "60510bf4be495aeb1b4640a7a058b4ae7c04b884": [
    {
      "id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "Dentist(a_1) ::: McTeague is a dentist.  ",
        "LimitedIntellect(a_1) ::: McTeague has limited intellect.  ",
        "FromMinerFamily(a_1) ::: McTeague is from a poor miner's family.  ",
        "OpenedShopAt(a_1, b_0) ::: McTeague has opened a dentist shop on Polk Street in San Francisco (b_0 represents the place Polk Street in San Francisco).  ",
        "BestFriend(a_3, a_1) ::: Marcus is McTeague's best friend.  ",
        "Cousin(a_2, a_3) ::: Trina is Marcus's cousin.  ",
        "Courting(a_3, a_2) ::: Marcus is courting Trina.  ",
        "BringsForDentalWork(a_3, a_2, a_1) ::: Marcus brings Trina to McTeague's parlor for dental work.  ",
        "InfatuatedWith(a_1, a_2) ::: McTeague becomes infatuated with Trina.  ",
        "StepsAside(a_3) ::: Marcus graciously steps aside.  ",
        "Woos(a_1, a_2) ::: McTeague successfully woos Trina.  ",
        "KissedAndDeclaredLove(a_1, a_2) ::: McTeague and Trina have kissed and declared their love for each other.  ",
        "WonLottery(a_2, c_2, c_3) ::: Trina has won $15,000 from a lottery ticket (c_2 and c_3 represent 15 and 000 respectively).  ",
        "AnnouncesMarriage(a_0, a_1, a_2) ::: Mrs Sieppe (a_0) announces that McTeague and Trina are to marry.  ",
        "JealousOf(a_3, a_1) ::: Marcus becomes jealous of McTeague.  ",
        "ClaimsCheatedOutOfMoney(a_3) ::: Marcus claims he has been cheated out of money.  ",
        "RightfulMoneyIfMarried(a_3, a_2) ::: Marcus would have money rightfully his if he had married Trina.  ",
        "",
        "Premises:  ",
        "IfMarriedThenRightfulMoney(a_3, a_2) ::: If Marcus Schouler marries Trina Sieppe then Marcus Schouler has money that would be rightfully Marcus Schouler's.  ",
        "Formally: (Married(a_3, a_2) → RightfulMoneyIfMarried(a_3, a_2))  ",
        "",
        "Additional facts from the context:  ",
        "Dentist(a_1) ∧ LimitedIntellect(a_1) ∧ FromMinerFamily(a_1) ∧ OpenedShopAt(a_1, b_0)  ",
        "BestFriend(a_3, a_1) ∧ Cousin(a_2, a_3) ∧ Courting(a_3, a_2) ∧ BringsForDentalWork(a_3, a_2, a_1)  ",
        "InfatuatedWith(a_1, a_2) ∧ StepsAside(a_3) ∧ Woos(a_1, a_2) ∧ KissedAndDeclaredLove(a_1, a_2)  ",
        "WonLottery(a_2, c_2, c_3) ∧ AnnouncesMarriage(a_0, a_1, a_2) ∧ JealousOf(a_3, a_1) ∧ ClaimsCheatedOutOfMoney(a_3)"
      ]
    },
    {
      "id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "MarriageTakesPlace() ::: The marriage takes place.  ",
        "MoveAway(a, b) ::: Person a moves away from place b.  ",
        "FamilyMember(a, f) ::: Person a is a member of family f.  ",
        "AloneWith(a, b) ::: Person a is alone with person b.  ",
        "Parsimonious(a) ::: Person a is parsimonious.  ",
        "RefusesTouchPrincipal(a, amount) ::: Person a refuses to touch the principal amount.  ",
        "InvestsWith(a, b) ::: Person a invests money with person b.  ",
        "IncomeFromPractice(a) ::: Person a earns income from dental practice.  ",
        "IncomeFromInvestment(a) ::: Person a earns income from investment.  ",
        "IncomeFromCarving(a) ::: Person a earns income from carving and selling wooden figures.  ",
        "AccumulatesSavings(a) ::: Person a accumulates savings secretly.  ",
        "LockedTrunk(a) ::: Person a keeps savings in a locked trunk.  ",
        "HappyCouple(a, b) ::: Persons a and b are a happy couple.  ",
        "FriendshipDeteriorates(a, b) ::: Friendship between persons a and b deteriorates.  ",
        "ComeToGrips(a, b) ::: Persons a and b come to grips (fight).  ",
        "ImmenseStrengthPrevails(a, b) ::: Person a's immense physical strength prevails over person b.  ",
        "BreaksArm(a, b) ::: Person a breaks person b's arm.  ",
        "Recovers(a) ::: Person a recovers from injury.  ",
        "GoesSouth(a) ::: Person a goes south.  ",
        "IntendsToBecome(a, profession) ::: Person a intends to become a profession.  ",
        "Visits(a, b) ::: Person a visits person b.  ",
        "PartAsFriends(a, b) ::: Persons a and b part as friends.  ",
        "",
        "Premises:  ",
        "MarriageTakesPlace() ::: The marriage takes place.  ",
        "MoveAway(a_2, b_0) ∧ ∀f (FamilyMember(a_2, f) → MoveAway(f, b_0)) ::: Mrs Sieppe and the rest of Trina's family move away from San Francisco, leaving Trina alone with McTeague.  ",
        "AloneWith(a_2, a_1) ::: Trina is alone with McTeague.  ",
        "Parsimonious(a_2) ::: Trina is a parsimonious wife.  ",
        "RefusesTouchPrincipal(a_2, 15000) ∧ InvestsWith(a_2, uncle) ::: She refuses to touch the principal of her $15,000, which she invests with her uncle.  ",
        "IncomeFromPractice(a_1) ∧ IncomeFromInvestment(a_2) ∧ IncomeFromCarving(a_2) ::: They live on earnings from McTeague's dental practice, the small income from the $15,000 investment, and money Trina earns from carving wooden figures.  ",
        "AccumulatesSavings(a_2) ∧ LockedTrunk(a_2) ::: Trina secretly accumulates penny-pinched savings in a locked trunk.  ",
        "HappyCouple(a_1, a_2) ::: The couple are happy.  ",
        "FriendshipDeteriorates(a_3, a_1) ::: The friendship between Marcus and McTeague deteriorates.  ",
        "∀t (ComeToGrips(a_3, a_1) at time t → ImmenseStrengthPrevails(a_1, a_3) ∧ Eventually(BreaksArm(a_1, a_3))) ::: If Marcus and McTeague come to grips, then McTeague's immense physical strength prevails and eventually he breaks Marcus' arm.  ",
        "Recovers(a_3) ∧ GoesSouth(a_3) ∧ IntendsToBecome(a_3, rancher) ::: Marcus recovers, goes south, intending to become a rancher.  ",
        "Visits(a_3, {a_1, a_2}) ∧ PartAsFriends(a_3, a_1) ::: Before leaving, Marcus visits the McTeagues and parts as friends with McTeague."
      ]
    },
    {
      "id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "DebarredFromDentistry(a_1) ::: McTeague is debarred from practising dentistry by the authorities.  ",
        "InformedCityHall(a_3, a_1) ::: Marcus informed city hall that McTeague has no license or degree.  ",
        "LostPractice(a_1) ::: McTeague loses his dental practice.  ",
        "MoveToPoorerQuarters(a_1, a_2) ::: McTeague and Trina move into successively poorer quarters.  ",
        "Miserly(a_2) ::: Trina becomes more miserly.  ",
        "TookSavingsAndAbandoned(a_1, a_2) ::: McTeague takes all Trina's domestic savings and abandons her.  ",
        "UnderSpellOfMoney(a_2) ::: Trina falls completely under the spell of money.  ",
        "WithdrawGoldPrincipal(a_2) ::: Trina withdraws the principal of her prior winnings in gold from her uncle's firm.  ",
        "AdmireAndHandleGold(a_2) ::: Trina admires and handles the gold coins.  ",
        "",
        "Premises:  ",
        "(DebarredFromDentistry(a_1) ∧ InformedCityHall(a_3, a_1)) → LostPractice(a_1)  ",
        "LostPractice(a_1) → MoveToPoorerQuarters(a_1, a_2)  ",
        "Miserly(a_2) → TookSavingsAndAbandoned(a_1, a_2)  ",
        "UnderSpellOfMoney(a_2) → (WithdrawGoldPrincipal(a_2) ∧ AdmireAndHandleGold(a_2))"
      ]
    },
    {
      "id": "60510bf4be495aeb1b4640a7a058b4ae7c04b884",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "ReturnsDestitute(a_1) ::: McTeague returns destitute once more.  ",
        "RefusesGiveMoney(a_1, a_2) ::: McTeague refuses to give Trina money even for food.  ",
        "AggravatedByWhisky(a_1, c_4) ::: McTeague is aggravated and made violent by whisky.  ",
        "BeatsToDeath(a_1, a_2) ::: McTeague beats Trina to death.  ",
        "Takes(a_1, c_1) ::: McTeague takes the entire hoard of gold.  ",
        "HeadsTo(a_1, b_3) ::: McTeague heads out to a mining community.  ",
        "LeftYearsBefore(a_1, b_3) ::: McTeague had left the mining community years before.  ",
        "SensesPursuit(a_1) ::: McTeague senses pursuit.  ",
        "MakesWaySouth(a_1, b_2) ::: McTeague makes his way south towards Mexico.  ",
        "HearsOfMurder(a_3) ::: Marcus hears of the murder.  ",
        "JoinsHunt(a_3, a_1) ::: Marcus joins the hunt for McTeague.  ",
        "Catches(a_3, a_1, b_1) ::: Marcus catches McTeague in Death Valley.  ",
        "FightOverWater(a_1, a_3, c_5) ::: McTeague and Marcus fight over remaining water.  ",
        "FightOverMoney(a_1, a_3, c_2, c_3, a_2) ::: They fight over Trina’s $15,000.  ",
        "Kills(a_1, a_3) ::: McTeague kills Marcus.  ",
        "Dies(a_3) ::: Marcus dies.  ",
        "Handcuffs(a_3, a_3, a_1) ::: Marcus handcuffs himself to McTeague.  ",
        "StrandedAloneHelpless(a_1, b_1) ::: McTeague is stranded alone and helpless in Death Valley.  ",
        "CompanyOfCorpse(a_1, a_3) ::: McTeague is left with the company of Marcus’s corpse.  ",
        "",
        "Premises:  ",
        "ReturnsDestitute(a_1) ∧ RefusesGiveMoney(a_1, a_2) ::: When McTeague returns destitute once more, he refuses to give Trina money even for food.  ",
        "AggravatedByWhisky(a_1, c_4) → BeatsToDeath(a_1, a_2) ::: Aggravated and made violent by whisky, McTeague beats Trina to death.  ",
        "Takes(a_1, c_1) ∧ HeadsTo(a_1, b_3) ∧ LeftYearsBefore(a_1, b_3) ::: He takes the entire hoard of gold and heads out to a mining community he had left years before.  ",
        "SensesPursuit(a_1) → MakesWaySouth(a_1, b_2) ::: Sensing pursuit, McTeague makes his way south towards Mexico.  ",
        "HearsOfMurder(a_3) → JoinsHunt(a_3, a_1) ::: Marcus hears of the murder and joins the hunt for McTeague.  ",
        "JoinsHunt(a_3, a_1) → Catches(a_3, a_1, b_1) ::: Marcus finally catches McTeague in Death Valley.  ",
        "FightOverWater(a_1, a_3, c_5) ∧ FightOverMoney(a_1, a_3, c_2, c_3, a_2) ::: In the desert, McTeague and Marcus fight over remaining water and Trina’s $15,000.  ",
        "Kills(a_1, a_3) → Dies(a_3) ::: If McTeague kills Marcus, then Marcus dies.  ",
        "Dies(a_3) → Handcuffs(a_3, a_3, a_1) ::: If Marcus dies then Marcus handcuffs himself to McTeague.  ",
        "Kills(a_1, a_3) → Handcuffs(a_3, a_3, a_1) ::: If McTeague kills Marcus then Marcus handcuffs himself to McTeague.  ",
        "StrandedAloneHelpless(a_1, b_1) ∧ CompanyOfCorpse(a_1, a_3) ::: McTeague is stranded alone and helpless in Death Valley, left with only the company of Marcus’s corpse to whom he is handcuffed."
      ]
    }
  ],
  "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58": [
    {
      "id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "Protagonist(a_1) ::: a_1 is the book's protagonist  ",
        "EnglishScientist(a_1) ::: a_1 is an English scientist  ",
        "GentlemanInventor(a_1) ::: a_1 is a gentleman inventor  ",
        "LivesIn(a_1, b_3) ::: a_1 lives in the Time Traveller's house  ",
        "LocatedIn(b_3, b_0) ::: the Time Traveller's house is located in Richmond, Surrey, Victorian England  ",
        "Narrator(a_3) ::: a_3 is the original narrator  ",
        "Narrates(a_3, d_1) ::: a_3 narrates the dinner event  ",
        "Lecture(a_1, d_1) ::: a_1 gives a lecture at the dinner event  ",
        "TimeIsFourthDimension(a_1) ::: a_1 states that time is a fourth dimension  ",
        "Demonstrates(a_1, c_1, d_1) ::: a_1 demonstrates the machine at the dinner event  ",
        "BuiltMachine(a_1, c_1) ::: a_1 has built a machine  ",
        "MachineCapableOfTimeTravel(c_1) ::: the machine can carry a person through time  ",
        "ReturnsAt(a_1, d_1) ::: a_1 returns at the dinner event the following week  ",
        "RecountsRemarkableTale(a_1, a_3) ::: a_1 recounts a remarkable tale to the narrator  ",
        "BecomesNewNarrator(a_1) ::: a_1 becomes the new narrator  ",
        "",
        "Premises:  ",
        "Protagonist(a_1) ∧ EnglishScientist(a_1) ∧ GentlemanInventor(a_1) ∧ LivesIn(a_1, b_3) ∧ LocatedIn(b_3, b_0) ::: The book's protagonist is an English scientist and gentleman inventor living in Richmond, Surrey, Victorian England.  ",
        "Narrator(a_3) ∧ Narrates(a_3, d_1) ::: The original narrator recounts the dinner event.  ",
        "Lecture(a_1, d_1) ∧ TimeIsFourthDimension(a_1) ∧ Demonstrates(a_1, c_1, d_1) ::: The Time Traveller lectures that time is a fourth dimension and demonstrates a tabletop model machine.  ",
        "BuiltMachine(a_1, c_1) ∧ MachineCapableOfTimeTravel(c_1) ::: The Time Traveller has built a machine capable of carrying a person through time.  ",
        "ReturnsAt(a_1, d_1) ∧ RecountsRemarkableTale(a_1, a_3) ∧ BecomesNewNarrator(a_1) ::: The Time Traveller returns at dinner the following week to recount a remarkable tale and becomes the new narrator."
      ]
    },
    {
      "id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "TimeTraveller(a_1) ::: a_1 is the Time Traveller  ",
        "Journey(d_2) ::: d_2 is a journey  ",
        "Year802701(y_802701) ::: y_802701 is the year A.D. 802,701  ",
        "Meets(a_1, a_0) ::: a_1 meets a_0  ",
        "Eloi(a_0) ::: a_0 is the Eloi society  ",
        "Society(a_0) ::: a_0 is a society  ",
        "Small(a_0) ::: a_0 is small (referring to the Eloi)  ",
        "Elegant(a_0) ::: a_0 is elegant  ",
        "ChildlikeAdults(a_0) ::: a_0 are childlike adults  ",
        "LiveInCommunities(a_0) ::: a_0 live in small communities  ",
        "Buildings(b) ::: b are buildings  ",
        "Large(b) ::: b are large buildings  ",
        "Futuristic(b) ::: b are futuristic buildings  ",
        "Deteriorating(b) ::: b are slowly deteriorating buildings  ",
        "DoNoWork(a_0) ::: a_0 do no work  ",
        "FrugivorousDiet(a_0) ::: a_0 have a frugivorous diet  ",
        "EffortsToCommunicate(a_1, a_0) ::: a_1 tries to communicate with a_0  ",
        "LackOfCuriosity(a_0) ::: a_0 lack curiosity  ",
        "LackOfDiscipline(a_0) ::: a_0 lack discipline  ",
        "Speculates(a_1, p) ::: a_1 speculates proposition p  ",
        "ConquersNatureWithTechnology(a_0) ::: a_0 conquers nature with technology  ",
        "EvolvesToAdapt(a_0) ::: a_0 evolves to adapt to an environment where strength and intellect are no longer advantageous  ",
        "StrengthIntellectNotAdvantageous ::: strength and intellect are no longer advantageous to survival  ",
        "Peaceful(a_0) ::: a_0 is peaceful  ",
        "Communist(a_0) ::: a_0 is communist  ",
        "",
        "Premises:  ",
        "Journey(d_2) ∧ TestsDevice(a_1, d_2) ∧ TakesPlaceInYear(d_2, y_802701) ::: The Time Traveller tests his device with a journey to A.D. 802,701  ",
        "Meets(a_1, a_0) ∧ Eloi(a_0) ∧ Society(a_0) ∧ Small(a_0) ∧ Elegant(a_0) ∧ ChildlikeAdults(a_0) ::: The Time Traveller meets the Eloi, a society of small, elegant, childlike adults  ",
        "LiveInCommunities(a_0) ∧ InBuildings(a_0, b) ∧ Buildings(b) ∧ Large(b) ∧ Futuristic(b) ∧ Deteriorating(b) ::: The Eloi live in small communities within large, futuristic, yet slowly deteriorating buildings  ",
        "DoNoWork(a_0) ∧ FrugivorousDiet(a_0) ::: The Eloi do no work and have a frugivorous diet  ",
        "EffortsToCommunicate(a_1, a_0) ∧ (LackOfCuriosity(a_0) ∧ LackOfDiscipline(a_0)) ::: The Time Traveller’s efforts to communicate with the Eloi are hampered by their lack of curiosity and discipline  ",
        "Speculates(a_1, (ConquersNatureWithTechnology(a_0) ∧ EvolvesToAdapt(a_0) ∧ StrengthIntellectNotAdvantageous)) ::: The Time Traveller speculates that the Eloi conquered nature with technology and evolved to adapt to an environment where strength and intellect are no longer advantageous  ",
        "∀x ((ConquersNatureWithTechnology(x) ∧ EvolvesToAdapt(x) ∧ StrengthIntellectNotAdvantageous) → (Peaceful(x) ∧ Communist(x))) ::: If a society conquers nature with technology and subsequently evolves to adapt to an environment in which strength and intellect are no longer advantageous to survival, then the society is peaceful and communist"
      ]
    },
    {
      "id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "LeisuredClasses(x) ::: x is the leisured classes  ",
        "DowntroddenWorkingClasses(x) ::: x is the downtrodden working classes  ",
        "Evolve(x) ::: x evolves  ",
        "BecomeEloi(x) ::: x becomes the ineffectual Eloi  ",
        "BecomeMorlocks(x) ::: x becomes the brutal light-fearing Morlocks  ",
        "Morlocks(x) ::: x is the Morlocks  ",
        "NoOtherSustenance(x) ::: x has no other means of sustenance  ",
        "FeedOn(x, y) ::: x feeds on y  ",
        "Species(x) ::: x is a species  ",
        "NoRealChallenges(x) ::: x faces no real challenges  ",
        "LoseSpiritIntelligenceFitness(x) ::: x loses the spirit, intelligence, and physical fitness of humanity at its peak  ",
        "RelationshipNotLordsServants(x, y) ::: the relationship between species x and y is not one of lords and servants  ",
        "RelationshipLivestockRanchers(x, y) ::: the relationship between species x and y is one of livestock and ranchers  ",
        "",
        "Premises:  ",
        "∀x ((LeisuredClasses(x) ∧ Evolve(x)) → BecomeEloi(x))  ",
        "If the leisured classes evolve, then the leisured classes become the ineffectual Eloi.",
        "",
        "∀x ((DowntroddenWorkingClasses(x) ∧ Evolve(x)) → BecomeMorlocks(x))  ",
        "If the downtrodden working classes evolve, then the downtrodden working classes become the brutal light-fearing Morlocks.",
        "",
        "∀x ((Morlocks(x) ∧ NoOtherSustenance(x)) → ∀y (FeedOn(x, y) ∧ BecomeEloi(y)))  ",
        "If the Morlocks have no other means of sustenance, then the Morlocks feed on the Eloi.",
        "",
        "∀x ((Species(x) ∧ NoRealChallenges(x)) → LoseSpiritIntelligenceFitness(x))  ",
        "If there are no real challenges facing a species, then the species loses the spirit, intelligence, and physical fitness of humanity at its peak.",
        "",
        "∀x ∀y (RelationshipNotLordsServants(x, y) → RelationshipLivestockRanchers(x, y))  ",
        "If the relationship between two species is not one of lords and servants, then the relationship between the two species is one of livestock and ranchers."
      ]
    },
    {
      "id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "Saves(a_1, a_2) ::: The Time Traveller saves Weena from drowning.  ",
        "Notices(a_0, a_2) ::: People (Eloi) take notice of Weena’s plight.  ",
        "DevelopsAffectionateRelationship(a_1, a_2) ::: The Time Traveller and Weena develop an innocently affectionate relationship.  ",
        "TakesOnExpedition(a_1, a_2, b_x) ::: The Time Traveller takes Weena on an expedition to a distant structure b_x (the remains of a museum).  ",
        "IsRemainsOfMuseum(b_x) ::: The structure is the remains of a museum.  ",
        "FindsFreshSupply(a_1, c_3) ::: The Time Traveller finds a fresh supply of matches (c_3).  ",
        "FashionsWeapon(a_1, c_4) ::: The Time Traveller fashions a crude weapon (c_4) against Morlocks.  ",
        "MustFight(a_1, a_5) ::: The Traveller must fight Morlocks (a_5) to get back his machine.  ",
        "PlansToTakeBack(a_1, a_2, b_1) ::: The Traveller plans to take Weena back to his own time (Victorian time).  ",
        "StopsInForest(a_1, a_2) ::: They stop in the forest because the journey is too tiring.  ",
        "OvercomeByMorlocksAtNight(a_1, a_2, a_5) ::: They are overcome by Morlocks in the night.  ",
        "Faints(a_2) ::: Weena faints.  ",
        "Escapes(a_1) ::: The Traveller escapes.  ",
        "LeavesFireToDistract(a_1, a_5) ::: The Traveller leaves a small fire behind to distract Morlocks.  ",
        "FireCatchesUpToThem ::: The fire catches up to Weena and Morlocks.  ",
        "LostInFire(a_2) ::: Weena is lost in the fire.  ",
        "LostInFire(a_5) ::: Morlocks are lost in the fire.  ",
        "DevastatedOverLoss(a_1, a_2) ::: The Traveller is devastated over the loss of Weena.",
        "",
        "Premises:  ",
        "MustFight(a_1, a_5) ::: The Traveller must fight Morlocks to get back his machine.  ",
        "¬Notices(a_0, a_2) ::: None of the other Eloi take any notice of Weena’s plight.  ",
        "Saves(a_1, a_2) ∧ ¬Notices(a_0, a_2) → DevelopsAffectionateRelationship(a_1, a_2) ::: Because the Traveller saves Weena and others do not notice, they develop an affectionate relationship.  ",
        "TakesOnExpedition(a_1, a_2, b_x) ∧ IsRemainsOfMuseum(b_x) ∧ FindsFreshSupply(a_1, c_3) ∧ FashionsWeapon(a_1, c_4) ∧ MustFight(a_1, a_5) ::: The Traveller takes Weena to the museum remains, finds matches, fashions a weapon, and must fight Morlocks.  ",
        "PlansToTakeBack(a_1, a_2, b_1) ::: The Traveller plans to take Weena back to Victorian time.  ",
        "StopsInForest(a_1, a_2) ∧ OvercomeByMorlocksAtNight(a_1, a_2, a_5) ∧ Faints(a_2) ::: They stop in the forest, are overcome by Morlocks at night, and Weena faints.  ",
        "LeavesFireToDistract(a_1, a_5) → Escapes(a_1) ::: The Traveller escapes because the fire distracts Morlocks.  ",
        "FireCatchesUpToThem → (LostInFire(a_2) ∧ LostInFire(a_5)) ::: The fire causes Weena and Morlocks to be lost.  ",
        "LostInFire(a_2) → DevastatedOverLoss(a_1, a_2) ::: The Traveller is devastated over losing Weena."
      ]
    },
    {
      "id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 4,
      "fols": [
        "Predicates:  ",
        "Morlocks(x) ::: x is a Morlock  ",
        "Open(x, y) ::: x opens y  ",
        "UseAsBait(x, y, z) ::: x uses y as bait to capture z  ",
        "Capture(x, y) ::: x captures y  ",
        "Traveller(a_1) ::: a_1 is the Time Traveller  ",
        "UseToEscape(x, y) ::: x uses y to escape  ",
        "Reattach(x, y) ::: x reattaches y  ",
        "TravelAhead(x, t) ::: x travels ahead to time t  ",
        "See(x, y) ::: x sees y  ",
        "LivingThings(y) ::: y are living things  ",
        "MenacingCrabLikeCreatures(y) ::: y are menacing reddish crab-like creatures  ",
        "Butterflies(y) ::: y are enormous butterflies  ",
        "LichenousVegetation(y) ::: y is simple lichenous vegetation  ",
        "MakeShortJumps(x) ::: x makes short jumps through time  ",
        "EarthRotationCease ::: Earth's rotation gradually ceases  ",
        "SunGrowLargerRedderDimmer ::: The sun grows larger, redder, and dimmer  ",
        "WorldFallSilentFreeze ::: The world falls silent and freezing  ",
        "DegenerateLivingThingsDieOut ::: The last degenerate living things die out  ",
        "",
        "Premises:  ",
        "UseAsBait(morlocks, timeMachine, a_1) → UseToEscape(a_1, timeMachine) ::: If the Morlocks use the time machine as bait to capture the Traveller, then the Traveller uses the time machine to escape.  ",
        "Open(morlocks, sphinx) ::: The Morlocks open the Sphinx.  ",
        "Reattach(a_1, levers) ::: The Traveller reattaches the levers before traveling further ahead.  ",
        "TravelAhead(a_1, year30000000) ::: The Traveller travels roughly 30 million years ahead.  ",
        "See(a_1, menacingCrabLikeCreatures) ∧ MenacingCrabLikeCreatures(menacingCrabLikeCreatures) ::: The Traveller sees menacing reddish crab-like creatures.  ",
        "See(a_1, enormousButterflies) ∧ Butterflies(enormousButterflies) ::: The Traveller sees enormous butterflies.  ",
        "LichenousVegetation(lichenousVegetation) ::: The world is covered in simple lichenous vegetation.  ",
        "MakeShortJumps(a_1) ::: The Traveller continues to make short jumps through time.  ",
        "EarthRotationCease ∧ SunGrowLargerRedderDimmer ∧ WorldFallSilentFreeze ∧ DegenerateLivingThingsDieOut ::: Earth's rotation ceases, the sun grows larger/redder/dimmer, the world falls silent and freezing, and the last degenerate living things die out."
      ]
    },
    {
      "id": "72ddeff1fe6bb9841d1c1da4b3031001bf6b1f58",
      "paragraph_id": 5,
      "fols": [
        "Predicates:  ",
        "GoesBack(a_1, c_1) ::: The Time Traveller goes back to the machine.  ",
        "ReturnsToTime(a_1, b_1) ::: The Time Traveller returns to Victorian time.  ",
        "ArrivesAt(a_1, b_2) ::: The Time Traveller arrives at his laboratory.  ",
        "TimeDifference(a_1, hours3) ::: The Time Traveller arrives three hours after he originally left.  ",
        "Interrupts(a_1, d_1) ::: The Time Traveller interrupts dinner.  ",
        "RelatesAdventures(a_1, a_4) ::: The Time Traveller relates his adventures to disbelieving visitors.  ",
        "ProducesEvidence(a_1, c_2) ::: The Time Traveller produces evidence (two strange white flowers).  ",
        "PutInPocket(a_2, c_2, a_1) ::: Weena put two strange white flowers in the Time Traveller's pocket.  ",
        "TakesOver(a_3) ::: The original narrator takes over the narration.  ",
        "ReturnsToHouse(a_3, b_3, nextDay) ::: The original narrator returns to the Time Traveller's house the next day.  ",
        "FindsPreparing(a_3, a_1, d_2) ::: The original narrator finds the Time Traveller preparing for another journey.  ",
        "PromisesReturn(a_1, shortPeriod) ::: The Time Traveller promises to return in a short period of time.  ",
        "WaitingPeriod(a_3, a_1, d_3) ::: The original narrator waits for three years for the Time Traveller.  ",
        "NeverReturned(a_1, d_3) ::: The Time Traveller has never returned after three years.  ",
        "",
        "Premises:  ",
        "ProducesEvidence(a_1, c_2) ↔ PutInPocket(a_2, c_2, a_1) ::: The Time Traveller produces evidence of adventures by showing two strange white flowers that Weena put in his pocket.  ",
        "",
        "GoesBack(a_1, c_1) ∧ ReturnsToTime(a_1, b_1) ∧ ArrivesAt(a_1, b_2) ∧ TimeDifference(a_1, hours3) ::: The Time Traveller goes back to the machine and returns to Victorian time, arriving at his laboratory just three hours after he originally left.  ",
        "",
        "Interrupts(a_1, d_1) ∧ RelatesAdventures(a_1, a_4) ∧ ProducesEvidence(a_1, c_2) ::: The Time Traveller interrupts dinner, relates his adventures to disbelieving visitors, producing as evidence two strange white flowers.  ",
        "",
        "TakesOver(a_3) ∧ ReturnsToHouse(a_3, b_3, nextDay) ∧ FindsPreparing(a_3, a_1, d_2) ::: The original narrator takes over and returns to the Time Traveller's house the next day, finding him preparing for another journey.  ",
        "",
        "PromisesReturn(a_1, shortPeriod) ::: The Time Traveller promises to return in a short period of time.  ",
        "",
        "WaitingPeriod(a_3, a_1, d_3) ∧ NeverReturned(a_1, d_3) ::: After waiting three years, the Time Traveller has never returned."
      ]
    }
  ],
  "7f1cb0e615795ed6be5d96ea3f13ce62921d8835": [
    {
      "id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "AmateurTennisStar(x) ::: x is an amateur tennis star  ",
        "WantsToMarry(x, y) ::: x wants to marry y  ",
        "DaughterOf(y, z) ::: y is the daughter of z  ",
        "PursueCareer(x, c) ::: x wants to pursue career c  ",
        "Divorce(x, y) ::: x wants to divorce y  ",
        "Vulgar(x) ::: x is vulgar  ",
        "Promiscuous(x) ::: x is promiscuous  ",
        "Recognizes(x, y) ::: x recognizes y  ",
        "KnowsAbout(x, s) ::: x knows about situation s  ",
        "Introduces(x, y) ::: x introduces himself to y  ",
        "ProposesIdea(x, i) ::: x proposes idea i  ",
        "SwapMurders(x, y) ::: x and y agree to swap murders  ",
        "Murder(x, y) ::: x murders y  ",
        "KillingStranger(x) ::: x kills a stranger  ",
        "NoIdentifiableMotive(x) ::: x has no identifiable motive  ",
        "Suspect(x) ::: x is a suspect  ",
        "Humors(x, i) ::: x humors idea i  ",
        "PretendsFindAmusing(x, i) ::: x pretends to find idea i amusing  ",
        "InterpretsAsAgreement(x, i) ::: x interprets idea i as agreement  ",
        "Borrows(x, o, y) ::: x borrows object o from y  ",
        "SlipsIntoPocket(x, o) ::: x slips object o into his own pocket  ",
        "",
        "Premises:  ",
        "AmateurTennisStar(a_1) ∧ WantsToMarry(a_1, a_0) ∧ DaughterOf(a_0, senator) ∧ PursueCareer(a_1, political) ∧ Divorce(a_1, a_wife) ∧ Vulgar(a_wife) ∧ Promiscuous(a_wife) ::: Guy is an amateur tennis star who wants to marry Anne Morton, daughter of a senator, pursue a political career, and divorce his vulgar and promiscuous wife Miriam.  ",
        "Recognizes(a_2, a_1) ∧ KnowsAbout(a_2, marital_situation_of_a_1) ::: Bruno recognizes Guy and knows about his marital situation.  ",
        "Introduces(a_2, a_1) ∧ ProposesIdea(a_2, swap_murders) ::: Bruno introduces himself and proposes the idea of swapping murders.  ",
        "SwapMurders(a_1, a_2) ↔ (Murder(a_2, a_wife) ∧ Murder(a_1, father_of_a_2)) ::: The swap murder plan: Bruno murders Miriam, Guy murders Bruno's father.  ",
        "∀x (KillingStranger(x) ∧ NoIdentifiableMotive(x) → ¬Suspect(x)) ::: If a person kills a stranger and has no identifiable motive, then the person is not a suspect.  ",
        "Humors(a_1, swap_murders) ∧ PretendsFindAmusing(a_1, swap_murders) ∧ InterpretsAsAgreement(a_2, swap_murders) ::: Guy humors the murder plot, pretends to find it amusing, Bruno interprets this as agreement.  ",
        "Borrows(a_2, c_1, a_1) ∧ SlipsIntoPocket(a_2, c_1) ::: Bruno borrows Guy's monogrammed cigarette lighter and slips it into his own pocket."
      ]
    },
    {
      "id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "Meets(a_1, a_x) ::: Guy meets with person a_x  ",
        "PregnantBy(a_x, a_y) ::: a_x is pregnant by a_y  ",
        "RefusesDivorce(a_x, a_y) ::: a_x refuses to give a divorce to a_y  ",
        "ThreatensScandal(a_x) ::: a_x threatens to cause a scandal  ",
        "RelaysBadNews(a_x, a_y) ::: a_x relays bad news to a_y  ",
        "MetaphoricallyComments(a_x, a_y, c) ::: a_x makes a metaphorical comment c about a_y  ",
        "Stalks(a_2, a_x, b_y) ::: Bruno stalks a_x through place b_y  ",
        "FatallyStrangles(a_2, a_x) ::: Bruno fatally strangles a_x  ",
        "Dead(a_x) ::: a_x is dead  ",
        "Informs(a_2, a_1, p) ::: Bruno informs Guy of proposition p  ",
        "Expects(a_2, a_1, p) ::: Bruno expects Guy to do p  ",
        "Sends(a_2, a_1, o) ::: Bruno sends object o to Guy  ",
        "HouseKey(a_2) ::: Bruno's house key  ",
        "MapToBedroom(a_2) ::: map to Bruno's father's bedroom  ",
        "Pistol ::: a pistol  ",
        "",
        "Premises:  ",
        "FatallyStrangles(a_2, a_x) → Dead(a_x) ::: If Bruno fatally strangles Miriam then Miriam is dead.  ",
        "Expects(a_2, a_1, Murder(a_1, Father(a_2))) → (Sends(a_2, a_1, HouseKey(a_2)) ∧ Sends(a_2, a_1, MapToBedroom(a_2)) ∧ Sends(a_2, a_1, Pistol)) ::: If Bruno expects Guy to follow through on murdering Bruno's father then Bruno sends Guy Bruno's house key, a map to Bruno's father's bedroom, and a pistol.  ",
        "",
        "Additional facts from context (expressed as premises):  ",
        "Meets(a_1, a_x) ∧ (a_x = Miriam) ::: Guy meets with Miriam.  ",
        "PregnantBy(a_x, a_y) ∧ (a_x = Miriam) ∧ (a_y â‰ a_1) ::: Miriam is pregnant by someone else (not Guy).  ",
        "RefusesDivorce(a_x, a_1) ∧ (a_x = Miriam) ::: Miriam refuses to give Guy a divorce.  ",
        "ThreatensScandal(a_x) ∧ (a_x = Miriam) ::: Miriam threatens to cause a scandal.  ",
        "RelaysBadNews(a_1, a_6) ∧ (a_6 = Anne) ::: Guy relays the bad news to Anne.  ",
        "MetaphoricallyComments(a_1, a_x, \"strangle\") ∧ (a_x = Miriam) ::: Guy metaphorically comments that he would like to \"strangle\" Miriam.  ",
        "Stalks(a_2, a_x, b_2) ∧ (a_x = Miriam) ::: Bruno stalks Miriam through the amusement park.  ",
        "FatallyStrangles(a_2, a_x) ∧ (a_x = Miriam) ::: Bruno fatally strangles Miriam.  ",
        "Informs(a_2, a_1, Dead(a_x)) ∧ (a_x = Miriam) ::: Bruno informs Guy that Miriam is dead.  ",
        "Expects(a_2, a_1, Murder(a_1, Father(a_2))) ::: Bruno expects Guy to murder Bruno's father.  ",
        "Sends(a_2, a_1, HouseKey(a_2)) ∧ Sends(a_2, a_1, MapToBedroom(a_2)) ∧ Sends(a_2, a_1, Pistol) ::: Bruno sends Guy his house key, a map to his father's bedroom, and a pistol."
      ]
    },
    {
      "id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "QuestionedByPolice(a_1) ::: Guy was questioned by the police.  ",
        "ClaimsOnTrainAtMurderTime(a_1) ::: Guy claims he was on a train at the time of the murder.  ",
        "AlibiInconclusive(a_1) ::: The police determine Guy's alibi is inconclusive.  ",
        "CouldHaveLeftTrainInTime(a_1) ::: Guy could have left the train in time to commit the murder and continued on another train.  ",
        "NotArrested(a_1) ::: Guy is not arrested.  ",
        "AssignedOfficerToTrail(a_3, a_1) ::: The police assign an officer to trail Guy.  ",
        "EnsureNoFlee(a_3, a_1) ::: The officer trails Guy to ensure he does not flee while the police investigate.  ",
        "",
        "Premises:  ",
        "QuestionedByPolice(a_1) ∧ ClaimsOnTrainAtMurderTime(a_1) ::: When the police question Guy about Miriam's death, he claims he was on a train at the time of the murder.  ",
        "AlibiInconclusive(a_1) ↔ CouldHaveLeftTrainInTime(a_1) ::: The police determine his alibi is inconclusive because he could have left the train in time to commit the murder and continued his trip on another train.  ",
        "¬NotArrested(a_1) ::: Guy is not arrested.  ",
        "AlibiInconclusive(a_1) → (∃a_3 (AssignedOfficerToTrail(a_3, a_1) ∧ EnsureNoFlee(a_3, a_1))) ::: If the police determine an alibi is inconclusive, then the police assign an officer to trail the suspect to ensure the suspect does not flee while the police investigate."
      ]
    },
    {
      "id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "Introduces(a_2, a_1) ::: Bruno introduces himself to Anne  ",
        "Meets(a_2, a_6) ::: Bruno meets Barbara (a_6)  ",
        "Resembles(a_6, a_7) ::: Barbara physically resembles Miriam (a_7)  ",
        "AppearsUninvited(a_2, b_4) ::: Bruno appears uninvited at a party at Senator Morton's house (b_4)  ",
        "Demonstrates(a_2, c_4) ::: Bruno demonstrates how to fatally strangle someone (c_4)  ",
        "GazeFallsUpon(a_2, a_6) ::: Bruno's gaze falls upon Barbara  ",
        "TriggersFlashback(a_6) ::: Barbara's resemblance to Miriam triggers a flashback  ",
        "BeginsStrangling(a_2, a_8) ::: Bruno begins strangling the woman (a_8)  ",
        "BlacksOutBeforeHarming(a_2, a_8) ::: Bruno blacks out before harming the woman  ",
        "Upset(a_6) ::: Barbara is upset  ",
        "Tells(a_6, a_1, s) ::: Barbara tells Anne that \"His hands were on her throat, but he was strangling me.\" (s = the statement)  ",
        "Confronts(a_1, a_2) ::: Anne confronts Guy  ",
        "ConfessesTruth(a_1, a_2) ::: Guy confesses the truth about Bruno's crazy scheme  ",
        "",
        "Premises:  ",
        "Introduces(a_2, a_1) ∧ Meets(a_2, a_6) ∧ Resembles(a_6, a_7) ::: To pressure Guy, Bruno introduces himself to Anne and meets Anne's younger sister Barbara, who resembles Miriam.  ",
        "AppearsUninvited(a_2, b_4) ::: Bruno appears uninvited at a party at Senator Morton's house.  ",
        "Demonstrates(a_2, c_4) ∧ GazeFallsUpon(a_2, a_6) ∧ TriggersFlashback(a_6) ::: To amuse another guest, Bruno demonstrates strangling; his gaze falls on Barbara, triggering a flashback.  ",
        "BeginsStrangling(a_2, a_8) ∧ BlacksOutBeforeHarming(a_2, a_8) ::: Bruno begins strangling the woman but blacks out before harming her.  ",
        "Upset(a_6) ∧ Tells(a_6, a_1, s) ::: An upset Barbara tells Anne that \"His hands were on her throat, but he was strangling me.\"  ",
        "Confronts(a_1, a_2) ∧ ConfessesTruth(a_1, a_2) ::: Anne confronts Guy, who confesses the truth about Bruno's crazy scheme."
      ]
    },
    {
      "id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 4,
      "fols": [
        "Predicates:  ",
        "PretendsAgree(a_1, planBruno) ::: Guy pretends to agree to Bruno's original plan.  ",
        "SneaksInto(a_1, bedroomAnthony) ::: Guy sneaks into Mr. Anthony's bedroom.  ",
        "IntendsWarn(a_1, a_0) ::: Guy intends to warn Mr. Anthony (a_0) of his son's murderous intent.  ",
        "Waiting(a_2, bedroomAnthony) ::: Bruno is waiting in Mr. Anthony's bedroom.  ",
        "TriesConvince(a_1, a_2, seekPsychHelp) ::: Guy tries to convince Bruno to seek psychiatric help.  ",
        "RefusesFollowThrough(a_1, planBruno) ::: Guy refuses to follow through with Bruno's plan.  ",
        "ThreatensFrame(a_2, a_1, murderMiriam) ::: Bruno threatens to frame Guy for Miriam's murder.  ",
        "",
        "Premises:  ",
        "PretendsAgree(a_1, planBruno) ∧ SneaksInto(a_1, bedroomAnthony) ∧ IntendsWarn(a_1, a_0) ∧ Waiting(a_2, bedroomAnthony) ∧ TriesConvince(a_1, a_2, seekPsychHelp) ∧ RefusesFollowThrough(a_1, planBruno) → ThreatensFrame(a_2, a_1, murderMiriam)  ",
        "Guy(a_1) ∧ Bruno(a_2) ∧ MrAnthony(a_0) ::: Identifications of people involved."
      ]
    },
    {
      "id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 5,
      "fols": [
        "Predicates:  ",
        "Visits(a_0, a_6) ::: Anne visits Bruno's mother (Marion Lorne).  ",
        "Mother(a_6, a_2) ::: Marion Lorne is Bruno's mother.  ",
        "CommittedMurder(a_2) ::: Bruno committed a murder.  ",
        "Discounts(a_6, CommittedMurder(a_2)) ::: Marion Lorne discounts that Bruno committed a murder.  ",
        "Appears(a_2, a_0) ::: Bruno appears to Anne.  ",
        "Informs(a_2, a_0, Plans(a_2, Incriminate(a_1))) ::: Bruno informs Anne that he intends to incriminate Guy.  ",
        "Plant(a_2, c_1, b_2) ::: Bruno intends to plant the stolen cigarette lighter at the amusement park.  ",
        "DevisesPlan(a_0, a_1) ::: Anne and Guy devise a plan.  ",
        "FinishTennisMatch(a_1) ::: Guy finishes the tennis match.  ",
        "EvadePolice(a_1, a_3) ::: Guy evades the police.  ",
        "Reach(a_1, b_2) ::: Guy reaches the amusement park.  ",
        "PreventPlanting(a_1, a_2, c_1) ::: Guy prevents Bruno from planting the lighter.",
        "",
        "Premises:  ",
        "FinishTennisMatch(a_1) ∧ EvadePolice(a_1, a_3) ∧ Reach(a_1, b_2) ∧ PreventPlanting(a_1, a_2, c_1) ::: Guy finishes the tennis match, evades the police, reaches the amusement park, and prevents Bruno from planting the stolen cigarette lighter."
      ]
    },
    {
      "id": "7f1cb0e615795ed6be5d96ea3f13ce62921d8835",
      "paragraph_id": 6,
      "fols": [
        "Predicates:  ",
        "WinsLongMatch(a_1, b_1) ::: Guy eventually wins the long match at Forest Hills.  ",
        "EludesPolice(a_1) ::: Guy eludes the police.  ",
        "HeadsFor(a_1, b_2) ::: Guy heads for the amusement park.  ",
        "Delayed(a_2) ::: Bruno is delayed.  ",
        "Drops(a_2, c_1, b_4) ::: Bruno accidentally drops Guy's lighter down a storm drain.  ",
        "Recovers(a_2, c_1) ::: Bruno has to recover the lighter.  ",
        "ArrivesAt(a_1, b_2) ::: Guy arrives at the amusement park.  ",
        "StaysOutOfSight(a_2) ::: Bruno stays out of sight.  ",
        "PlantsOn(a_2, c_1, b_3) ::: Bruno plants the lighter on the Magic Isle.  ",
        "Recognizes(a_4, a_2) ::: A worker recognizes Bruno.  ",
        "FromNightOfMurder(a_4, a_2) ::: The recognition is from the night of the murder.  ",
        "InformsPolice(a_4) ::: The worker informs the police.  ",
        "CatchesUp(a_1, a_2) ::: Guy catches up to Bruno.  ",
        "FightOn(a_1, a_2, c_2) ::: Guy and Bruno fight on the carousel.  ",
        "ShootsAt(a_3, a_1) ::: The police officer shoots at Guy.  ",
        "ThinksTryingToEscape(a_3, a_1) ::: The police officer thinks Guy is trying to escape.  ",
        "ShotMisses(a_3, a_1) ::: The shot misses Guy.  ",
        "Kills(a_3, a_5) ::: The shot kills the carousel operator.  ",
        "FallsOnto(a_5, c_3) ::: The dead carousel operator falls onto the control panel.  ",
        "SpinsWildlyOutOfControl(c_2) ::: The carousel spins wildly out of control.  ",
        "Crashes(c_2) ::: The carousel crashes.  ",
        "TellsPolice(a_4, a_1, Innocent) ::: The worker tells the police that Guy is innocent.  ",
        "MortallyInjured(a_2) ::: Bruno is mortally injured.  ",
        "SawThatNight(a_4, a_2) ::: The worker saw Bruno that night.  ",
        "TellsPolice(a_4, a_2, SeenThatNight) ::: The worker tells the police that Bruno is the man he saw that night.  ",
        "Tells(a_1, a_3, BrunoAttemptedPlanting) ::: Guy tells the police that Bruno was attempting to plant Guy's lighter at the murder scene.  ",
        "RefusesToClear(a_2, a_1) ::: Bruno refuses to clear Guy.  ",
        "Dies(a_2) ::: Bruno dies.  ",
        "FingersOpenReveal(a_2, c_1) ::: Bruno's fingers open to reveal Guy's lighter.  ",
        "",
        "Premises:  ",
        "(WinsLongMatch(a_1, b_1) ∧ EludesPolice(a_1) → HeadsFor(a_1, b_2)) ::: If Guy wins the long match at Forest Hills and eludes the police, then he heads for the amusement park.  ",
        "(Drops(a_2, c_1, b_4) → Delayed(a_2) ∧ Recovers(a_2, c_1)) ::: If Bruno drops Guy's lighter down a storm drain, then he is delayed and has to recover it.  ",
        "ArrivesAt(a_1, b_2) ::: Guy arrives at the amusement park.  ",
        "(StaysOutOfSight(a_2) ∧ Sunset → PlantsOn(a_2, c_1, b_3)) ::: Bruno stays out of sight until sunset when he plants the lighter on the Magic Isle.  ",
        "(Recognizes(a_4, a_2) ∧ FromNightOfMurder(a_4, a_2) ∧ InformsPolice(a_4) → TellsPolice(a_4, a_2, SeenThatNight)) ::: If a worker recognizes Bruno from the night of the murder and informs the police, then the worker tells the police that Bruno is the man he saw that night.  ",
        "(CatchesUp(a_1, a_2) ∧ FightOn(a_1, a_2, c_2)) ::: Guy catches up to Bruno and they fight on the carousel.  ",
        "(ShootsAt(a_3, a_1) ∧ ThinksTryingToEscape(a_3, a_1) ∧ ShotMisses(a_3, a_1) ∧ Kills(a_3, a_5)  ",
        "→ FallsOnto(a_5, c_3) ∧ SpinsWildlyOutOfControl(c_2) ∧ Crashes(c_2)) ::: If the police officer shoots at Guy"
      ]
    }
  ],
  "8b5a5e185f5a7d9f240a38d396205831967418ff": [
    {
      "id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "Duke(a_1) ::: a_1 is the Duke of Omnium  ",
        "ChildOf(a_2, a_1) ::: a_2 is a child of the Duke  ",
        "ChildOf(a_3, a_1) ::: a_3 is a child of the Duke  ",
        "ChildrenGroup(a_4) ::: a_4 is the group of the Duke’s children  ",
        "MemberOf(a_2, a_4) ::: a_2 is a member of the children group a_4  ",
        "MemberOf(a_3, a_4) ::: a_3 is a member of the children group a_4  ",
        "LateWife(a_0) ::: a_0 is the late wife of the Duke (Lady Glencora)  ",
        "WifeOf(a_0, a_1) ::: a_0 is wife of the Duke a_1  ",
        "Deceased(a_0) ::: a_0 is deceased  ",
        "PrimeMinister(a_1) ::: a_1 is Prime Minister  ",
        "Government(b) ::: b is the government  ",
        "GovernmentFallen(b) ::: the government b has fallen  ",
        "DistantRelationship(a_1, a_4) ::: the Duke a_1 has a somewhat distant relationship with his children group a_4  ",
        "BereftOf(a_1, x) ::: the Duke a_1 is bereft of x (where x can be wife or political position)  ",
        "PoliticalPosition(a_1) ::: a_1’s political position  ",
        "",
        "Premises:  ",
        "WifeOf(a_0, a_1) ∧ Deceased(a_0) ::: Lady Glencora is the late wife of the Duke  ",
        "ChildOf(a_2, a_1) ∧ ChildOf(a_3, a_1) ∧ MemberOf(a_2, a_4) ∧ MemberOf(a_3, a_4) ::: The son and daughter are children of the Duke and members of the children group  ",
        "DistantRelationship(a_1, a_4) ::: The Duke has a somewhat distant relationship with his grownup children  ",
        "PrimeMinister(a_1) ∧ Government(b) ∧ GovernmentFallen(b) ::: The Duke was Prime Minister and the government has fallen  ",
        "BereftOf(a_1, a_0) ∧ BereftOf(a_1, PoliticalPosition(a_1)) ::: The Duke is bereft of both his wife and political position"
      ]
    },
    {
      "id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "LadyGlencora(x) ::: x is Lady Glencora  ",
        "Mary(x) ::: x is Mary, daughter of Lady Glencora  ",
        "FrankTregear(x) ::: x is Frank Tregear, a poor gentleman  ",
        "LordSilverbridge(x) ::: x is Lord Silverbridge, Duke's older son and heir  ",
        "Duke(x) ::: x is the Duke  ",
        "MrsFinn(x) ::: x is Mrs. Finn, Lady Glencora's confidante and companion to Mary  ",
        "Friend(x, y) ::: x is a friend of y  ",
        "Courtship(x, y) ::: x is courting y  ",
        "SecretBlessing(x, y) ::: x gave secret blessing to y  ",
        "DearestConfidante(x, y) ::: x is dearest confidante of y  ",
        "Companion(x, y) ::: x is companion of y  ",
        "UnofficialChaperone(x, y) ::: x is unofficial chaperone of y  ",
        "FuneralDone ::: The funeral has taken place  ",
        "AwareOfSeriousness(x, y, z) ::: x is aware of the seriousness of the relationship between y and z  ",
        "InsistsInform(x, y) ::: x insists that y be informed  ",
        "",
        "Premises:  ",
        "LadyGlencora(ladyGlencora) ∧ Mary(mary) ∧ FrankTregear(frank) ∧ LordSilverbridge(lordSilverbridge) ∧ Duke(duke) ∧ MrsFinn(mrsFinn) ::: The main people involved  ",
        "Friend(frank, lordSilverbridge) ::: Frank Tregear is a friend of Lord Silverbridge  ",
        "SecretBlessing(ladyGlencora, Courtship(mary, frank)) ::: Lady Glencora gave secret blessing to Mary’s courtship by Frank  ",
        "DearestConfidante(mrsFinn, ladyGlencora) ::: Mrs. Finn is Lady Glencora’s dearest confidante  ",
        "Companion(mrsFinn, mary) ∧ UnofficialChaperone(mrsFinn, mary) ∧ FuneralDone ::: Mrs. Finn remains after the funeral as companion and unofficial chaperone for Mary  ",
        "AwareOfSeriousness(mrsFinn, mary, frank) → InsistsInform(mrsFinn, duke) ::: If Mrs. Finn becomes aware of the seriousness of Mary and Frank’s relationship, she insists the Duke be informed"
      ]
    },
    {
      "id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "Son(x) ::: x is a son of the Duke  ",
        "Daughter(x) ::: x is a daughter of the Duke  ",
        "Child(x) ::: x is a child of the Duke  ",
        "FollowsWishes(x, y) ::: x follows the wishes of y  ",
        "EntersParliament(x) ::: x enters Parliament  ",
        "ProposedTo(x, y) ::: x proposed to y  ",
        "KnownAllLife(x, y) ::: x has known y all his life  ",
        "TurnedDown(x, y) ::: x turned down y  ",
        "IndicatedWelcomingAnswer(x, y) ::: x indicated a more welcoming answer to y another time  ",
        "EnamouredWith(x, y) ::: x is enamoured with y  ",
        "AgreesToMarry(x, y) ::: x agrees to marry y  ",
        "WillingToWelcome(x, y) ::: x is willing to welcome y into the family  ",
        "Disapproves(x, y) ::: x disapproves of y  ",
        "ExpelledFrom(x, y) ::: x is expelled from y  ",
        "AttendedWithoutPermission(x, y) ::: x attended y without permission  ",
        "",
        "Premises:  ",
        "Son(a_2) ∧ Son(a_2) ∧ Child(a_2) ∧ Child(a_3) ∧ Child(a_4) ::: The Duke's two sons and daughter are his children (a_4 is collective)  ",
        "FollowsWishes(a_2, a_1) ∧ EntersParliament(a_2) ::: Lord Silverbridge (a_2) follows the Duke's wishes by entering Parliament  ",
        "ProposedTo(a_2, ladyMabelGrex) ∧ KnownAllLife(a_2, ladyMabelGrex) ::: Lord Silverbridge proposed to Lady Mabel Grex, whom he has known all his life  ",
        "TurnedDown(ladyMabelGrex, a_2) ∧ IndicatedWelcomingAnswer(ladyMabelGrex, a_2) ::: Lady Mabel Grex turned him down, but indicated a more welcoming answer another time  ",
        "EnamouredWith(a_2, isabelBoncassen) ::: Lord Silverbridge becomes enamoured with Isabel Boncassen  ",
        "AgreesToMarry(isabelBoncassen, a_2) → WillingToWelcome(a_1, isabelBoncassen) ::: Isabel Boncassen agrees to marry Lord Silverbridge only if the Duke welcomes her into the family  ",
        "¬WillingToWelcome(a_1, isabelBoncassen) → Disapproves(a_1, isabelBoncassen) ::: The Duke initially disapproves of Isabel Boncassen  ",
        "Disapproves(a_1, suitorDaughter) ::: The Duke disapproves even more of his daughter's suitor  ",
        "ExpelledFrom(gerald, cambridge) ∧ AttendedWithoutPermission(gerald, derby) ::: Gerald, the younger son, is expelled from Cambridge after attending the Derby without permission"
      ]
    },
    {
      "id": "8b5a5e185f5a7d9f240a38d396205831967418ff",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "CloseTo(x, y) ::: x grows closer to y  ",
        "ChildOf(x, y) ::: x is a child of y  ",
        "Son(x) ::: x is a son  ",
        "Daughter(x) ::: x is a daughter  ",
        "Engaged(x) ::: x is engaged  ",
        "InvitedTo(x, y) ::: x is invited to y  ",
        "PartOfGovernment(x) ::: x takes part in the government  ",
        "",
        "Premises:  ",
        "ChildOf(a_2, a_1) ∧ Son(a_2) ::: a_2 is the son of the Duke  ",
        "ChildOf(a_3, a_1) ∧ Daughter(a_3) ::: a_3 is the daughter of the Duke  ",
        "∀x (ChildOf(x, a_1) ∧ (x = a_2 ∨ x = a_3 ∨ x = a_4)) ::: a_4 represents all three children of the Duke (including son and daughter)  ",
        "CloseTo(a_1, a_4) ::: The Duke grows closer to all three of his children  ",
        "Engaged(a_2) ∧ Engaged(a_3) ::: Both son and daughter are engaged  ",
        "InvitedTo(a_1, b) ∧ PartOfGovernment(a_1) ::: The Duke is invited once more to take part in the government  ",
        "",
        "Note:  ",
        "- a_4 is the collective referring expression for the three children, including a_2 (son) and a_3 (daughter).  ",
        "- The engagement of both son and daughter is explicitly stated.  ",
        "- The Duke’s growing closer to all three children is represented by CloseTo(a_1, a_4).  ",
        "- The Duke’s invitation to the government is represented by InvitedTo and PartOfGovernment predicates."
      ]
    }
  ],
  "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409": [
    {
      "id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "Starts(Channel, Event) ::: Channel starts Event.  ",
        "CommenceInterviews(Channel, Show) ::: Channel commences interviews for Show.  ",
        "ShowDepicts(Show, Subject) ::: Show depicts the life of Subject.  ",
        "ThoughtUpBy(Idea, Person) ::: Idea was thought up by Person.  ",
        "Producer(Person) ::: Person is a TV producer.  ",
        "Interview(Person1, Person2) ::: Person1 interviews Person2.  ",
        "DecidesToUse(Person, Subject) ::: Person decides to use Subject.  ",
        "StartAiring(Show) ::: Show starts airing.  ",
        "CallShow(Show, Name) ::: Show is called Name.  ",
        "ShowFailureAtFirst(Show) ::: Show is a total failure at first.  ",
        "OnlyBoringThingsHappen(Show) ::: Only boring things happen in Show.  ",
        "WantToPullPlug(Person) ::: Person wants to pull the plug on the Show.  ",
        "Except(Person) ::: Person is an exception to a group or action.  ",
        "",
        "Premises:  ",
        "Starts(TrueTV, Interviews) ::: True TV starts interviews.  ",
        "CommenceInterviews(TrueTV, TVShow) ::: True TV commences interviews for a TV show.  ",
        "ShowDepicts(TVShow, NormalPerson) ::: The TV show depicts a normal person's life 24/7.  ",
        "ThoughtUpBy(Idea, Cynthia) ::: The idea was thought up by Cynthia.  ",
        "Producer(Cynthia) ::: Cynthia is a TV producer.  ",
        "Interview(ProducerGroup, Ed) ::: The producers interview Ed.  ",
        "Interview(ProducerGroup, Ray) ::: The producers interview Ray.  ",
        "DecidesToUse(Cynthia, Ed) ::: Cynthia decides to use Ed.  ",
        "Interview(Cynthia, Ed) ::: Cynthia interviews only Ed.  ",
        "StartAiring(EdTV) ::: They start airing the show Ed TV.  ",
        "CallShow(EdTV, \"Ed TV\") ::: The show is called Ed TV.  ",
        "ShowFailureAtFirst(EdTV) ::: The show is a total failure at first.  ",
        "OnlyBoringThingsHappen(EdTV) ::: Only boring things happen in the show.  ",
        "WantToPullPlug(MainProducers) ::: The main producers want to pull the plug.  ",
        "Except(Cynthia) ::: Except for Cynthia.  ",
        "",
        "Using the given referring expressions:  ",
        "a_0 = people (general)  ",
        "a_1 = Ed  ",
        "a_2 = Shari  ",
        "a_3 = TV news panelists  ",
        "b_0 = places (general)  ",
        "b_1 = Ed's apartment  ",
        "c_0 = groups (general)  ",
        "c_1 = camera crew  ",
        "",
        "Since the context does not specify all entities explicitly, we use the names directly for clarity.",
        "",
        "Formulas:  ",
        "",
        "Premises:  ",
        "Starts(TrueTV, Interviews)  ",
        "CommenceInterviews(TrueTV, TVShow)  ",
        "ShowDepicts(TVShow, NormalPerson)  ",
        "ThoughtUpBy(Idea, Cynthia)  ",
        "Producer(Cynthia)  ",
        "Interview(Producers, Ed)  ",
        "Interview(Producers, Ray)  ",
        "DecidesToUse(Cynthia, Ed)  ",
        "Interview(Cynthia, Ed)  ",
        "StartAiring(EdTV)  ",
        "CallShow(EdTV, \"Ed TV\")  ",
        "ShowFailureAtFirst(EdTV)  ",
        "OnlyBoringThingsHappen(EdTV)  ",
        "WantToPullPlug(MainProducers)  ",
        "Except(Cynthia)  ",
        "",
        "Note: Since no rules or further logical relations are given, the above predicates and premises represent the information from the paragraph faithfully."
      ]
    },
    {
      "id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "InterestingOnDay(x, d) ::: x becomes interesting on day d  ",
        "Visits(x, y) ::: x visits y  ",
        "Discovers(x, y, p) ::: x discovers that y does p  ",
        "ApologizesTo(x, y, p) ::: x apologizes to y for p  ",
        "Drunk(x) ::: x is very drunk  ",
        "Insults(x, y) ::: x insults y  ",
        "TalksToCamera(x) ::: x talks to the camera  ",
        "MakesLaughAndGasp(x) ::: x makes everyone laugh and gasp  ",
        "Says(x, s) ::: x says statement s  ",
        "Comforts(x, y) ::: x comforts y  ",
        "RevealsFeelings(x, y) ::: x reveals feelings for y  ",
        "MoveFacesCloser(x, y) ::: x and y slowly move their faces closer  ",
        "KissEachOther(x, y) ::: x and y kiss each other  ",
        "LocksOut(x, y) ::: x locks out y  ",
        "KissesPassionately(x, y) ::: x passionately kisses y  ",
        "BecomesPopular(x) ::: x becomes extremely popular  ",
        "StartsRelationship(x, y) ::: x starts a relationship with y  ",
        "GrowsMoreInterestedInTV(x) ::: x grows more interested in staying on TV  ",
        "AbusedByViewers(x) ::: x is abused by viewers  ",
        "UnappealingToViewers(x) ::: x is found unappealing by viewers  ",
        "ShortLivedRelationship(x, y) ::: the relationship between x and y is short lived  ",
        "",
        "Premises:  ",
        "InterestingOnDay(a_0, day3) ::: Ed TV suddenly gets interesting on Day 3  ",
        "Visits(a_1, a_0) ::: Ed visits Ed TV (contextual, can be omitted if redundant)  ",
        "Visits(a_1, a_3) ::: Ed visits Ray (a_3 is Ray, but Ray is not explicitly given in referring expressions; assuming a_3 is TV news panelists, so Ray is missing - since Ray is not in referring expressions, we will treat Ray as a new entity a_4)  ",
        "Visits(a_1, a_4) ::: Ed visits Ray  ",
        "Discovers(a_1, a_4, CheatingOnGirlfriend(a_4, a_2)) ::: Ed discovers Ray is cheating on Shari  ",
        "Visits(a_1, a_2) ::: Ed visits Shari  ",
        "ApologizesTo(a_1, a_2, CheatingOnGirlfriend(a_4, a_2)) ::: Ed apologizes to Shari for Ray's actions  ",
        "Drunk(a_2) ::: Shari is very drunk  ",
        "Insults(a_2, a_4) ::: Shari insults Ray  ",
        "TalksToCamera(a_2) ::: Shari talks to the camera  ",
        "MakesLaughAndGasp(a_2) ::: Shari makes everyone laugh and gasp  ",
        "Says(a_2, \"Ray was a bad lay\") ::: Shari says \"Ray was a bad lay\"  ",
        "Comforts(a_1, a_2) ::: Ed tries to comfort Shari  ",
        "RevealsFeelings(a_1, a_2) ::: Ed reveals he has feelings for Shari  ",
        "RevealsFeelings(a_2, a_1) ::: Shari reveals she has feelings for Ed  ",
        "MoveFacesCloser(a_1, a_2) ::: Ed and Shari slowly move their faces closer  ",
        "KissEachOther(a_1, a_2) ::: Ed and Shari kiss each other  ",
        "LocksOut(a_1, c_1) ::: Ed locks out the camera crew  ",
        "KissesPassionately(a_1, a_2) ::: Ed passionately kisses Shari  ",
        "BecomesPopular(a_0) ::: Ed TV becomes extremely popular  ",
        "StartsRelationship(a_1, a_2) ::: Ed starts a relationship with Shari  ",
        "GrowsMoreInterestedInTV(a_1) ::: Ed grows more interested in staying on TV  ",
        "AbusedByViewers(a_2) ::: Shari is abused by viewers  ",
        "UnappealingToViewers(a_2) ::: Shari is found unappealing by viewers  ",
        "(GrowsMoreInterestedInTV(a_1) ∧ AbusedByViewers(a_2)) → ShortLivedRelationship(a_1, a_2) ::: If Ed grows more interested in TV and Shari is abused by viewers, then their relationship is short lived"
      ]
    },
    {
      "id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "GoesOnShow(a_1, TonightShow) ::: Ed goes on The Tonight Show with Jay Leno.  ",
        "Meets(a_1, a_jill) ::: Ed meets Jill.  ",
        "IsModelActress(a_jill) ::: Jill is a beautiful model/actress.  ",
        "Likes(a_jill, a_1) ::: Jill takes a liking to Ed.  ",
        "Visits(a_1, a_2) ::: Ed visits Shari.  ",
        "Tells(a_2, a_1, ¬WantToBeWithUntilShowStops) ::: Shari tells Ed she does not want to be with him until the Show stops airing.  ",
        "LeavesTown(a_2) ::: Shari leaves town.  ",
        "GoesToParkWithFriends(a_1, a_ray, friends) ::: Ed goes to the park with Ray and some friends.  ",
        "PlayFootball(a_1, a_ray, friends) ::: Ed and friends play football.  ",
        "Brings(a_cynthia, a_jill, a_1) ::: Cynthia brought Jill to talk to Ed to earn more ratings.  ",
        "TalksTo(a_jill, a_1) ::: Jill comes to talk to Ed.  ",
        "InvitesToDinner(a_jill, a_1) ::: Jill invites Ed to dinner at her house.  ",
        "ArrivesAtHouse(a_1, a_jill) ::: Ed arrives at Jill's house.  ",
        "MassiveCrowdAtHouse(a_jill) ::: There is a massive crowd at Jill's house.  ",
        "SmallTalk(a_1, a_jill) ::: Ed and Jill have a small talk.  ",
        "KissOnTable(a_1, a_jill) ::: Ed and Jill kiss on top of a table.  ",
        "AboutToHaveSex(a_1, a_jill) ::: Ed and Jill are about to have sex.  ",
        "FallsOffTable(a_1) ::: Ed falls off the table.  ",
        "SquishesCat(a_1, cat_jill) ::: Ed squishes Jill's cat.  ",
        "NeverSeesAgain(a_1, a_jill) ::: Ed never sees Jill again.",
        "",
        "Premises:  ",
        "GoesOnShow(a_1, TonightShow) ∧ Meets(a_1, a_jill) ∧ IsModelActress(a_jill) ∧ Likes(a_jill, a_1) ::: Ed goes on The Tonight Show, meets Jill who is a model/actress and she likes him.  ",
        "Visits(a_1, a_2) ∧ Tells(a_2, a_1, ¬WantToBeWithUntilShowStops) ∧ LeavesTown(a_2) ::: Ed visits Shari, who tells him she does not want to be with him until the Show stops airing, then she leaves town.  ",
        "GoesToParkWithFriends(a_1, a_ray, friends) ∧ PlayFootball(a_1, a_ray, friends) ∧ Brings(a_cynthia, a_jill, a_1) ∧ TalksTo(a_jill, a_1) ::: Ed goes to the park with Ray and friends to play football; Cynthia brings Jill to talk to Ed.  ",
        "InvitesToDinner(a_jill, a_1) ∧ ArrivesAtHouse(a_1, a_jill) ∧ MassiveCrowdAtHouse(a_jill) ∧ SmallTalk(a_1, a_jill) ∧ KissOnTable(a_1, a_jill) ∧ AboutToHaveSex(a_1, a_jill) ∧ FallsOffTable(a_1) ∧ SquishesCat(a_1, cat_jill) ∧ NeverSeesAgain(a_1, a_jill) ::: Jill invites Ed to dinner, Ed arrives at her house with a crowd present, they talk, kiss on a table, are about to have sex, Ed falls off the table and squishes Jill's cat, and Ed never sees Jill again."
      ]
    },
    {
      "id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "Father(x, y) ::: x is the father of y  ",
        "LeftFamily(x) ::: x abandoned his family  ",
        "AgeAtEvent(x, y, z) ::: x was age z at event y  ",
        "Visit(x, y) ::: x visits y  ",
        "Inform(x, y, p) ::: x informs y about proposition p  ",
        "Affair(x, y) ::: x was having an affair with y  ",
        "Stepfather(x, y) ::: x is the stepfather of y  ",
        "FuriousWith(x, y) ::: x is furious with y  ",
        "Argue(x, y) ::: x argues with y  ",
        "PhoneCall(x, p) ::: x receives a phone call with proposition p  ",
        "Doctor(x) ::: x is a doctor  ",
        "Dead(x) ::: x is dead  ",
        "DiedMakingLoveTo(x, y) ::: x died making love to y  ",
        "Think(x, p) ::: x thinks proposition p  ",
        "RealFather(x, y) ::: x is the real father of y  ",
        "CheatingOn(x, y) ::: x was cheating on y  ",
        "",
        "Premises:  ",
        "Father(a_father, a_1) ∧ LeftFamily(a_father) ∧ AgeAtEvent(a_1, LeftFamily, 13) ∧ Visit(a_father, a_1) ∧ Inform(a_father, a_1, Affair(a_2, a_stepfather))  ",
        "::: Ed's father (Dennis Hopper) abandoned his family when Ed was 13, visits Ed, and informs him that he left because Ed's mother was having an affair with Ed's current stepfather.  ",
        "",
        "Stepfather(a_stepfather, a_1)  ",
        "::: Al is Ed's current stepfather.  ",
        "",
        "Affair(a_2, a_stepfather)  ",
        "::: Ed's mother was having an affair with Ed's current stepfather.  ",
        "",
        "FuriousWith(a_1, a_2) ∧ Argue(a_1, a_2)  ",
        "::: Ed is furious with his mother and argues with her.  ",
        "",
        "PhoneCall(a_1, ComeToHospital)  ",
        "::: Ed gets a phone call telling him to come to the hospital.  ",
        "",
        "Doctor(a_doctor) ∧ Inform(a_doctor, a_1, Dead(a_father) ∧ DiedMakingLoveTo(a_father, a_2))  ",
        "::: The doctor says that Ed's father is dead and that he died making love to his wife.  ",
        "",
        "Think(a_1, DiedMakingLoveTo(a_father, a_stepfather))  ",
        "::: Ed thinks this means Al (his stepfather).  ",
        "",
        "RealFather(a_father, a_1) ∧ CheatingOn(a_2, a_stepfather)  ",
        "::: Ed's real father died making love to Ed's wife, and Ed's mother was cheating on Ed's current stepfather.  ",
        "",
        "Rules:  ",
        "∀x ∀y ∀z (Father(x, a_1) ∧ Affair(a_2, a_stepfather) → LeftFamily(x))  ",
        "::: Ed's father left because Ed's mother was having an affair with Ed's current stepfather.  ",
        "",
        "Dead(a_father) ∧ DiedMakingLoveTo(a_father, a_2)  ",
        "::: Ed's real father died making love to Ed's wife.  ",
        "",
        "CheatingOn(a_2, a_stepfather)  ",
        "::: Ed's mother was cheating on Ed's current stepfather."
      ]
    },
    {
      "id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 4,
      "fols": [
        "Predicates:  ",
        "WantsProducersStayLonger(a_1) ::: The producers want Ed to stay on longer.  ",
        "ChangesMinds(a_1) ::: Ed changes the producers' minds.  ",
        "InBreachContract(a_1) ::: Ed would be in breach of his contract.  ",
        "Chases(a_1, a_2) ::: Ed chases Shari.  ",
        "StopsInBathroom(a_2) ::: Shari stops in the women's bathroom.  ",
        "SaysStayingWithBrother(a_2) ::: Shari says she is staying with her brother.  ",
        "VowsEndShow(a_1) ::: Ed vows to find a way to end the show.  ",
        "Exits(a_1) ::: Ed exits.  ",
        "StaysWithShari(c_1) ::: One camera man stays with Shari.  ",
        "SaysNewIdea(c_1) ::: The camera man says it is the producers' new idea.  ",
        "AllFamilyFilmed ::: All the family are being filmed.  ",
        "ShowMostInterestingPerson ::: The producers show the most interesting person.  ",
        "",
        "Premises:  ",
        "(WantsProducersStayLonger(a_1) ∧ ChangesMinds(a_1)) → InBreachContract(a_1) ::: If the producers want Ed to stay on longer and Ed changes the producers' minds then Ed would be in breach of Ed's contract.  ",
        "AllFamilyFilmed → ShowMostInterestingPerson ::: If all the family are being filmed then the producers show the most interesting person.  ",
        "",
        "Additional premises from context (informal, to capture narrative):  ",
        "Chases(a_1, a_2) ::: Ed chases Shari.  ",
        "StopsInBathroom(a_2) ::: Shari stops in the women's bathroom.  ",
        "SaysStayingWithBrother(a_2) ::: Shari says she is staying with her brother.  ",
        "VowsEndShow(a_1) ::: Ed vows to find a way to end the show.  ",
        "Exits(a_1) ::: Ed exits.  ",
        "StaysWithShari(c_1) ∧ SaysNewIdea(c_1) ::: One camera man stays with Shari and says it is the producers' new idea."
      ]
    },
    {
      "id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 5,
      "fols": [
        "Predicates:  ",
        "GivesMoney(x, y, amount) ::: x gives y the specified amount of money  ",
        "BestDirt(y, x) ::: y gives x the best amount of \"dirt\" on the producers  ",
        "AnnounceLive(x, content) ::: x announces content live  ",
        "StopsAiringShowBeforeAnnouncement(producers, x) ::: producers stop airing the show before x can make the announcement  ",
        "TellsSecret(x, y, secret) ::: x tells y a secret  ",
        "SecretAbout(producer, secret) ::: secret is about the main producer  ",
        "AnnouncementContent(x, content) ::: content is the announcement made by x  ",
        "",
        "Premises:  ",
        "(GivesMoney(a_1, y, 10000) ∧ BestDirt(y, a_1) ∧ AnnounceLive(a_1, dirt)) → StopsAiringShowBeforeAnnouncement(producers, a_1)  ",
        "TellsSecret(a_2, a_1, secret) ∧ SecretAbout(producers, secret) ∧ AnnouncementContent(a_1, secret) ::: Cynthia tells Ed a secret about the main producer, which Ed announces  ",
        "StopsAiringShowBeforeAnnouncement(producers, a_1) ::: The producers stop airing the show before Ed can make the announcement"
      ]
    },
    {
      "id": "8bed193f6ba9d1e50cc86f0b56531dc33bb8d409",
      "paragraph_id": 6,
      "fols": [
        "Predicates:  ",
        "Leaves(c, p) ::: c (camera crew) leaves place p  ",
        "RenewRelationship(x, y) ::: x and y renew their relationship  ",
        "Celebrate(x, e) ::: x celebrates event e  ",
        "Predict(p, s, e) ::: p (panelists) predict that s (subject) will experience event e  ",
        "Forgotten(s, t) ::: s will be forgotten within time t  ",
        "",
        "Premises:  ",
        "Leaves(c_1, b_1) ::: The camera crew leaves Ed's apartment  ",
        "RenewRelationship(a_1, a_2) ::: Ed and Shari renew their relationship  ",
        "Celebrate({a_1, a_2}, e) ::: Ed and Shari celebrate event e  ",
        "Predict(a_3, a_1, forgottenShortTime) ::: TV news panelists predict Ed will be forgotten in a short period of time  ",
        "",
        "Note:  ",
        "- The event \"Ed will be forgotten in a short period of time\" is represented as forgottenShortTime.  ",
        "- Celebrate is applied to the group {Ed, Shari} jointly.  ",
        "",
        "No explicit rules were given, so no implications or universal quantifications are added beyond the direct statements."
      ]
    }
  ],
  "907e3c83c161299b8f178e98399d4e2cc0dcd57f": [
    {
      "id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "Graduated(a_1, year1956) ::: Colin graduated from university in 1956.  ",
        "AspiringFilmmaker(a_1) ::: Colin is an aspiring filmmaker.  ",
        "TravelsTo(a_1, b_7) ::: Colin travels to London (b_7 is implicit for London, or we can omit if not given).  ",
        "ProductionManager(a_9) ::: Hugh Perceval is a production manager (a_9 is not given, so omitted).  ",
        "TellsNoJobs(a_9, a_1) ::: Production manager tells Colin no jobs available (not formalized due to missing entity).  ",
        "MetBefore(a_1, a_6) ::: Colin once met Olivier.  ",
        "Spouse(a_6, a_10) ::: Olivier's wife is Vivien Leigh (a_10 not given, so omitted).  ",
        "Encourages(a_10, a_6, GiveJob(a_6, a_1)) ::: Vivien encourages Olivier to give Colin a job.  ",
        "UpcomingFilm(a_11) ::: The Prince and the Showgirl is an upcoming film (a_11 not given, so omitted).  ",
        "StarsIn(a_2, a_11) ::: Marilyn stars in the film.  ",
        "Task(a_1, FindPlace(a_2, a_5)) ::: Colin's first task is to find a place for Marilyn and Arthur.  ",
        "Husband(a_5, a_2) ::: Arthur is Marilyn's husband.  ",
        "PressFindsOut(b_4) ::: The press find out about the house (b_4 is the house).  ",
        "SecuredSecondHouse(a_1) ::: Colin secured a second house.  ",
        "Impresses(a_1, a_6) ::: Colin impresses Olivier.  ",
        "Impresses(a_1, a_12) ::: Colin impresses Arthur P. Jacobs (a_12 not given, so omitted).  ",
        "",
        "Rules:  ",
        "SecuredSecondHouse(a_1) → (Impresses(a_1, a_6) ∧ Impresses(a_1, a_12)) ::: If Colin secures a second house then he impresses Olivier and Arthur P. Jacobs.  ",
        "",
        "Premises:  ",
        "Graduated(a_1, year1956) ∧ AspiringFilmmaker(a_1) ∧ TravelsTo(a_1, London) ∧ MetBefore(a_1, a_6) ∧ Encourages(Vivien, a_6, GiveJob(a_6, a_1)) ∧ StarsIn(a_2, ThePrinceAndTheShowgirl) ∧ Husband(a_5, a_2) ∧ Task(a_1, FindPlace(a_2, a_5)) ∧ PressFindsOut(House1) ∧ SecuredSecondHouse(a_1) ::: Context information about Colin, Olivier, Marilyn, Arthur, and the houses.  ",
        "SecuredSecondHouse(a_1) → (Impresses(a_1, a_6) ∧ Impresses(a_1, ArthurPJacobs)) ::: Rule about Colin impressing Olivier and Arthur P. Jacobs."
      ]
    },
    {
      "id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "Frustrated(a_6) ::: Olivier is frustrated  ",
        "LateToReadThrough(a_2) ::: Marilyn is late to the read-through  ",
        "ReadsLines(a_7, a_2) ::: Paula Strasberg reads Marilyn's lines for Marilyn  ",
        "HasTroubleWithLines(a_2) ::: Marilyn has trouble with her lines  ",
        "Defends(a_0, a_2) ::: Sybil Thorndike defends Marilyn  ",
        "TriesToGetToApologise(a_6, a_2) ::: Olivier tries to get Marilyn to apologise  ",
        "HoldsShootUp(a_2) ::: Marilyn holds the shoot up  ",
        "",
        "Premises:  ",
        "LateToReadThrough(a_2) → Frustrated(a_6)  ",
        "HasTroubleWithLines(a_2) → ReadsLines(a_7, a_2)  ",
        "TriesToGetToApologise(a_6, a_2) → Defends(a_0, a_2)"
      ]
    },
    {
      "id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "StrugglesToUnderstand(a_2) ::: Marilyn struggles to understand her character.  ",
        "LeavesSet(a_2) ::: Marilyn leaves the set.  ",
        "Insults(a_6, a_2) ::: Olivier insults Marilyn.  ",
        "AsksToBeSympathetic(a_1, director) ::: Colin asks the director to be more sympathetic towards Marilyn.  ",
        "GoesTo(a_1, b_4) ::: Colin goes to Parkside House.  ",
        "HearsArgument(a_1) ::: Colin hears an argument.  ",
        "SitsTearfulOnStairs(a_2) ::: Marilyn is sitting tearful on the stairs.  ",
        "HasNotebook(a_2, a_5) ::: Marilyn has Arthur's notebook.  ",
        "ContainsPlot(a_5, newPlay) ::: Arthur's notebook contains the plot of a new play.  ",
        "PokesFunAt(newPlay, a_2) ::: The new play appears to poke fun at Marilyn.  ",
        "ReturnsToUSA(a_5) ::: Arthur returns to the United States.  ",
        "ComesToSet(a_9) ::: Vivien comes to the set.  ",
        "WatchesScenes(a_9, a_2) ::: Vivien watches some of Marilyn's scenes.  ",
        "BreaksDown(a_9) ::: Vivien breaks down emotionally.  ",
        "SaysLightsUpScreen(a_9, a_2) ::: Vivien says Marilyn lights up the screen.  ",
        "SaysIfOnlyOlivierCouldSeeHimself(a_9, a_6) ::: Vivien says if only Olivier could see himself when he watches Marilyn.  ",
        "TriesToReassure(a_6, a_7) ::: Olivier tries unsuccessfully to reassure his wife.  ",
        "DoesNotShowUpToSet(a_2) ::: Marilyn does not show up to the set following Arthur's departure.  ",
        "AsksToCome(a_2, a_1, b_4) ::: Marilyn asks Colin to come to Parkside.  ",
        "Talk(a_1, a_2) ::: Colin and Marilyn talk.  ",
        "DancesForScene(a_2) ::: Marilyn dances for a scene.  ",
        "CrewCaptivatedBy(a_2) ::: The crew becomes captivated by Marilyn.  ",
        "Tells(Milton, a_1, \"Marilyn breaks hearts\") ::: Milton tells Colin Marilyn breaks hearts.  ",
        "Tells(Milton, a_1, \"Marilyn will break Colin's heart\") ::: Milton tells Colin Marilyn will break his heart.  ",
        "NoticesGrowingInfatuation(a_7, a_1, a_2) ::: Lucy notices Colin's growing infatuation with Marilyn.  ",
        "BreaksUp(a_7, a_1) ::: Lucy breaks up with Colin.  ",
        "",
        "Premises:  ",
        "DancesForScene(a_2) → CrewCaptivatedBy(a_2) ::: If Marilyn dances for a scene then the crew becomes captivated by Marilyn.  ",
        "Tells(Milton, a_1, \"Marilyn breaks hearts\") → Tells(Milton, a_1, \"Marilyn will break Colin's heart\") ::: If Milton tells Colin Marilyn breaks hearts then Milton tells Colin Marilyn will break Colin's heart.  ",
        "",
        "Additional premises from context (expressed as facts):  ",
        "StrugglesToUnderstand(a_2) ∧ LeavesSet(a_2) ∧ Insults(a_6, a_2) ::: Marilyn struggles to understand her character and leaves the set when Olivier insults her.  ",
        "AsksToBeSympathetic(a_1, director) ∧ GoesTo(a_1, b_4) ∧ HearsArgument(a_1) ::: Colin asks the director to be more sympathetic towards Marilyn, before he goes to Parkside House to check on her and hears an argument.  ",
        "SitsTearfulOnStairs(a_2) ∧ HasNotebook(a_2, a_5) ∧ ContainsPlot(a_5, newPlay) ∧ PokesFunAt(newPlay, a_2) ::: Colin finds a tearful Marilyn sitting on the stairs with Arthur's notebook, which contains the plot of a new play that appears to poke fun at her.  ",
        "ReturnsToUSA(a_5) ::: Arthur later returns to the United States.  ",
        "ComesToSet(a_9) ∧ WatchesScenes(a_9, a_2) ∧ BreaksDown(a_9) ∧ SaysLightsUpScreen(a_9, a_2) ∧ SaysIfOnlyOlivierCouldSeeHimself(a_9, a_6) ::: Vivien comes to the set, watches some of Marilyn's scenes, breaks down, and says Marilyn lights up the screen and if only Olivier could see himself when he watches her.  ",
        "TriesToReassure(a_6, a_7) ∧ ¬Successful(a_6) ::: Olivier tries unsuccessfully to reassure his wife.  ",
        "Does"
      ]
    },
    {
      "id": "907e3c83c161299b8f178e98399d4e2cc0dcd57f",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "TourGuide(a_3, b_1) ::: Owen Morshead gave a tour of Windsor Castle.  ",
        "ShowsAround(a_1, a_2, b_2) ::: Colin showed Marilyn around Eton College.  ",
        "SkinnyDipping(a_1, a_2, b_3) ::: Colin and Marilyn went skinny dipping in the River Thames.  ",
        "Kisses(a_2, a_1) ::: Marilyn kissed Colin.  ",
        "FoundBy(a_1, a_4) ::: Colin and Marilyn were found by Roger Smith.  ",
        "CallsTo(a_1, b_4) ::: Colin was called to Parkside.  ",
        "LocksInRoom(a_2, b_4) ::: Marilyn locked herself in her room at Parkside.  ",
        "EntersRoom(a_1, a_2) ::: Colin entered Marilyn’s room.  ",
        "InvitesLieNextTo(a_2, a_1) ::: Marilyn invited Colin to lie next to her on the bed.  ",
        "WakesUpInPain(a_2) ::: Marilyn woke up in pain.  ",
        "ClaimsMiscarriage(a_2) ::: Marilyn claims she is having a miscarriage.  ",
        "TendsTo(a_8, a_2) ::: The doctor tended to Marilyn.  ",
        "SaysComingBack(a_2, a_5) ::: Marilyn told Colin that Arthur is coming back.  ",
        "WantsToBeGoodWife(a_2, a_5) ::: Marilyn wants to try to be a good wife to Arthur.  ",
        "SaysForgetEverything(a_2, a_1) ::: Marilyn told Colin they should forget everything that happened between them.  ",
        "ReturnsToSet(a_2) ::: Marilyn returned to the set to complete the film.  ",
        "Praises(a_6, a_2) ::: Olivier praised Marilyn.  ",
        "RevealsKilledDesire(a_6) ::: Olivier revealed Marilyn killed his desire to direct again.  ",
        "AsksIfBrokeHeart(a_7, a_1, a_2) ::: Lucy asked Colin if Marilyn broke his heart.  ",
        "RepliesDid(a_1) ::: Colin replied that Marilyn did break his heart.  ",
        "RepliesNeededIt(a_7) ::: Lucy replied that Colin needed it.  ",
        "ComesToPub(a_2, b_5) ::: Marilyn came to the local pub.  ",
        "ThanksForHelp(a_2, a_1) ::: Marilyn thanked Colin for helping her.  ",
        "KissesGoodbye(a_2, a_1) ::: Marilyn kissed Colin goodbye.  ",
        "DrivesTo(a_4, a_2, b_6) ::: Roger drove Marilyn to the airport.  ",
        "",
        "Premises:  ",
        "TourGuide(a_3, b_1) ∧ ShowsAround(a_1, a_2, b_2) ∧ SkinnyDipping(a_1, a_2, b_3) ∧ Kisses(a_2, a_1) ∧ FoundBy(a_1, a_4) ::: Colin and Marilyn spend the day together, toured Windsor Castle by Owen Morshead, Marilyn kissed Colin, and they were found by Roger Smith.  ",
        "CallsTo(a_1, b_4) ∧ LocksInRoom(a_2, b_4) ∧ EntersRoom(a_1, a_2) ∧ InvitesLieNextTo(a_2, a_1) ::: Colin was called to Parkside where Marilyn locked herself in her room and invited him to lie next to her.  ",
        "WakesUpInPain(a_2) ∧ ClaimsMiscarriage(a_2) ∧ TendsTo(a_8, a_2) ::: Marilyn woke up in pain, claimed miscarriage, and was tended to by a doctor.  ",
        "SaysComingBack(a_2, a_5) ∧ WantsToBeGoodWife(a_2, a_5) ∧ SaysForgetEverything(a_2, a_1) ::: Marilyn told Colin Arthur is coming back, she wants to be a good wife, and they should forget what happened.  ",
        "ReturnsToSet(a_2) ∧ Praises(a_6, a_2) ∧ RevealsKilledDesire(a_6) ::: Marilyn returned to the set, Olivier praised her but revealed she killed his desire to direct again.  ",
        "AsksIfBrokeHeart(a_7, a_1, a_2) ∧ RepliesDid(a_1) ∧ RepliesNeededIt(a_7) ::: Lucy asked Colin if Marilyn broke his heart, Colin said yes, Lucy said he needed it.  ",
        "ComesToPub(a_2, b_5) ∧ ThanksForHelp(a_2, a_1) ∧ KissesGoodbye(a_2, a_1) ∧ DrivesTo(a_4, a_2, b_6) ::: Marilyn came to the local pub, thanked Colin"
      ]
    }
  ],
  "9292406d5193d3402195df7e5647fd168da2d15a": [
    {
      "id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "PublicRadioJournalist(x) ::: x is a public radio journalist.  ",
        "Age(x, y) ::: x is y years old.  ",
        "LivesIn(x, y) ::: x lives in place y.  ",
        "Artist(x) ::: x is an artist.  ",
        "GirlfriendOf(x, y) ::: x is the girlfriend of y.  ",
        "BestFriendOf(x, y) ::: x is the best friend of y.  ",
        "CoWorkerOf(x, y) ::: x is a co-worker of y.  ",
        "DisapprovesOf(x, y) ::: x disapproves of y.  ",
        "PersonalityBrash(x) ::: x has a brash personality.  ",
        "PersonalityOutspoken(x) ::: x has an outspoken personality.  ",
        "PersonalityIntroverted(x) ::: x has an introverted personality.  ",
        "PersonalityMildMannered(x) ::: x has a mild-mannered personality.  ",
        "",
        "Premises:  ",
        "PublicRadioJournalist(a_1) ∧ Age(a_1, 27) ∧ LivesIn(a_1, seattle) ::: Adam Lerner is a 27-year-old public radio journalist in Seattle.  ",
        "Artist(a_2) ∧ GirlfriendOf(a_2, a_1) ::: Katherine is an artist and Adam’s girlfriend.  ",
        "BestFriendOf(a_3, a_1) ∧ CoWorkerOf(a_3, a_1) ∧ DisapprovesOf(a_3, a_2) ::: Kyle is Adam’s best friend and co-worker who disapproves of Katherine.  ",
        "PersonalityBrash(a_3) ∧ PersonalityOutspoken(a_3) ::: Kyle is brash and outspoken.  ",
        "PersonalityIntroverted(a_1) ∧ PersonalityMildMannered(a_1) ::: Adam is introverted and mild-mannered."
      ]
    },
    {
      "id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "CaresFor(x, y) ::: x cares for y  ",
        "SuffersFrom(x, y) ::: x suffers from y  ",
        "Overbearing(x) ::: x is overbearing  ",
        "RevealsDiagnosis(x) ::: x reveals x's diagnosis  ",
        "WantsToMoveInAndCareFor(x, y) ::: x wants to move in and care for y  ",
        "RejectsOffer(x, y) ::: x rejects y's offer  ",
        "PromisesToCare(x, y) ::: x promises to be the one to take care of y  ",
        "SeesKissing(x, y, z) ::: x sees y kissing z  ",
        "ForcesToComeClean(x, y, z) ::: x forces y to come clean to z  ",
        "RelationshipStrained(x, y) ::: x's relationship with y is strained  ",
        "BreaksUpForGood(x, y) ::: x breaks up with y for good  ",
        "Single(x) ::: x is single  ",
        "FollowsLead(x, y) ::: x follows y's lead  ",
        "UseIllnessToPickUpWomen(x, y) ::: x and y use x's illness to successfully pick up women  ",
        "",
        "Premises:  ",
        "CaresFor(diane, richard) ∧ SuffersFrom(richard, alzheimers) → Overbearing(diane)  ",
        "(RevealsDiagnosis(adam) ∧ WantsToMoveInAndCareFor(diane, adam) ∧ RejectsOffer(adam, diane) ∧ PromisesToCare(rachael, adam)) → (RejectsOffer(adam, diane) because PromisesToCare(rachael, adam))  ",
        "SeesKissing(kyle, rachael, anotherMan) ∧ ForcesToComeClean(kyle, rachael, adam) ∧ RelationshipStrained(adam, rachael) → BreaksUpForGood(adam, rachael)  ",
        "Single(adam) ∧ FollowsLead(adam, kyle) → UseIllnessToPickUpWomen(adam, kyle)"
      ]
    },
    {
      "id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "CancerPatient(x) ::: x is a cancer patient.  ",
        "LovedOne(x, y) ::: x is a loved one of cancer patient y.  ",
        "FeelsStress(x) ::: x feels stress.  ",
        "WatchingFight(x, y) ::: x is watching y fight the disease.  ",
        "HelpsUnderstand(x, y, z) ::: x helps y understand z.  ",
        "MakesStepsRepairRift(x, y) ::: x makes steps in repairing the rift with y.  ",
        "Friend(x, y) ::: x is a friend of y.  ",
        "UndergoesChemo(x) ::: x is undergoing chemotherapy.  ",
        "OffersAdvice(x, y) ::: x offers advice to y.  ",
        "SmokesWith(x, y, z) ::: x smokes substance z with y.  ",
        "Therapist(x) ::: x is a therapist.  ",
        "PhDCandidate(x) ::: x is a PhD candidate.  ",
        "ClinicalThesis(x) ::: x is doing the clinical aspect of her thesis.  ",
        "GivesLift(x, y) ::: x gives a lift to y.  ",
        "OpensUpTo(x, y) ::: x opens up to y.  ",
        "HasDisease(x) ::: x has a disease.  ",
        "RelationshipRocky(x, y) ::: the relationship between x and y is rocky.  ",
        "DevelopsRapport(x, y) ::: x develops a rapport with y.  ",
        "BlursLines(x, y) ::: x blurs the lines of relationship with y.  ",
        "RepairsRift(x, y) ::: x repairs the rift with y.  ",
        "",
        "Premises:  ",
        "∀x ∀y (CancerPatient(y) ∧ LovedOne(x, y) ∧ WatchingFight(x, y) → FeelsStress(x))  ",
        "::: Loved ones of a cancer patient feel stress watching someone they care about fight the disease.  ",
        "",
        "∀x ∀y ∀z (HelpsUnderstand(x, y, z) ∧ z = LovedOnesStress → MakesStepsRepairRift(y, x))  ",
        "::: Helping a cancer patient understand the loved ones’ stress helps the cancer patient make steps in repairing the rift with the loved ones.  ",
        "",
        "Therapist(a_2) ∧ PhDCandidate(a_2) ∧ ClinicalThesis(a_2)  ",
        "::: Katherine is a therapist, a PhD candidate, and doing the clinical aspect of her thesis.  ",
        "",
        "GivesLift(a_2, a_1)  ",
        "::: Katherine gives Adam a lift home after chemo.  ",
        "",
        "RelationshipRocky(a_1, a_2)  ",
        "::: Adam and Katherine’s relationship and sessions have a rocky start.  ",
        "",
        "OpensUpTo(a_1, a_2)  ",
        "::: Adam slowly begins to open up to Katherine about his disease.  ",
        "",
        "DevelopsRapport(a_1, a_2) ∧ BlursLines(a_1, a_2)  ",
        "::: Adam and Katherine develop a rapport and blur the lines of their doctor-patient relationship and friendship.  ",
        "",
        "CancerPatient(a_1)  ",
        "::: Adam is a cancer patient.  ",
        "",
        "LovedOne(a_3, a_1) ∧ UndergoesChemo(a_3)  ",
        "::: Alan is a loved one of Adam and undergoing chemotherapy.  ",
        "",
        "LovedOne(a_0, a_1) ∧ UndergoesChemo(a_0)  ",
        "::: Mitch is a loved one of Adam and undergoing chemotherapy.  ",
        "",
        "OffersAdvice(a_3, a_1) ∧ OffersAdvice(a_0, a_1)  ",
        "::: Alan and Mitch offer Adam advice.  ",
        "",
        "SmokesWith(a_3, a_1, marijuana) ∧ SmokesWith(a_0, a_1, marijuana)  ",
        "::: Alan and Mitch smoke marijuana with Adam.  ",
        "",
        "HelpsUnderstand(a_2, a_1, LovedOnesStress)  ",
        "::: Katherine helps Adam understand the loved ones’ stress.  ",
        "",
        "MakesStepsRepairRift(a_1, a_0)  ",
        "::: Adam makes steps in repairing the rift with his mother (a_0)."
      ]
    },
    {
      "id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "Dies(a_0) ::: a person dies  ",
        "FearOfDeath(a_0) ::: a person fears their own potential death and unknown future  ",
        "InformedNotWorking(a_0) ::: a person is informed that their treatment is not working  ",
        "NeedsRiskySurgery(a_0) ::: a person needs to undertake a risky surgery as a last resort  ",
        "Argues(a_0, a_1) ::: a_0 has an argument with a_1  ",
        "DemandsDrive(a_0, a_1) ::: a_0 demands to drive a_1's car  ",
        "Drunk(a_0) ::: a person is drunk  ",
        "HasDriverLicense(a_0) ::: a person has a driver's license  ",
        "CausesAccident(a_0) ::: a person nearly causes an accident  ",
        "BreaksDown(a_0) ::: a person breaks down emotionally  ",
        "Criticizes(a_0, a_1) ::: a_0 criticizes a_1  ",
        "Calls(a_0, a_1) ::: a_0 calls a_1  ",
        "WishesHadGirlfriendLike(a_0, a_1) ::: a_0 wishes to have a girlfriend like a_1  ",
        "Tired(a_0) ::: a person is tired  ",
        "WantsItOver(a_0) ::: a person wants \"it\" to be over (e.g., illness or struggle)  ",
        "StaysAt(a_0, a_1) ::: a_0 stays at a_1's place  ",
        "FindsBook(a_0, b_0) ::: a_0 finds a book b_0  ",
        "Book(b_0) ::: b_0 is a book  ",
        "BookTitle(b_0, title) ::: b_0 has the title \"title\"  ",
        "FilledWithNotes(b_0) ::: b_0 is filled with notes  ",
        "HasHighlightedParagraphs(b_0) ::: b_0 has highlighted paragraphs  ",
        "HasTurnedDownPages(b_0) ::: b_0 has turned-down pages  ",
        "ProvesSincereCare(b_0, a_0) ::: b_0 proves sincere care about the struggle of a_0  ",
        "HelpsBestWay(a_0, a_1) ::: a_0 helps a_1 in the best way a_0 knows how  ",
        "HelpsByNotTreatingDifferently(a_0, a_1) ::: a_0 helps a_1 by simply not treating a_1 differently throughout the duration of a_1's illness  ",
        "",
        "Premises:  ",
        "Dies(mitch) ::: Mitch suddenly dies  ",
        "FearOfDeath(adam) ::: Adam fears his own potential death and unknown future  ",
        "InformedNotWorking(adam) ::: Adam is informed that his treatment is not working  ",
        "NeedsRiskySurgery(adam) ::: Adam needs to undertake a risky surgery as a last resort  ",
        "Argues(adam, kyle) ::: Adam has an argument with Kyle  ",
        "DemandsDrive(adam, kyle) ∧ Drunk(kyle) ∧ ¬HasDriverLicense(adam) ::: Adam demands to drive Kyle's car because Kyle is drunk and Adam does not have a driver's license  ",
        "CausesAccident(adam) ::: Adam nearly causes an accident  ",
        "BreaksDown(adam) ∧ Criticizes(adam, kyle) ::: Adam breaks down and criticizes Kyle for not taking his illness seriously and using it for his own ends  ",
        "Calls(adam, katherine) ∧ WishesHadGirlfriendLike(adam, katherine) ∧ Tired(adam) ∧ WantsItOver(adam) ::: Adam calls Katherine, wishes he had a girlfriend like her, is tired, and wants it to be over  ",
        "StaysAt(adam, kyle) ::: Adam stays at Kyle's place  ",
        "Book(book1) ∧ BookTitle(book1, \"Facing Cancer Together\") ∧ FindsBook(adam, book1) ∧ FilledWithNotes(book1) ∧ HasHighlightedParagraphs(book1) ∧ HasTurnedDownPages(book1) ::: Adam finds a book titled \"Facing Cancer Together\" filled with notes, highlighted paragraphs, and turned-down pages  ",
        "∀b ∀a ((Book(b) ∧ FilledWithNotes(b) ∧ HasHighlightedParagraphs(b) ∧ HasTurnedDownPages(b) ∧ FindsBook(a, b)) → ProvesSincereCare(b, a)) ::: If the book is filled with notes and has highlighted paragraphs and turned-down pages then the book proves sincere care about the struggle of the person who finds the book  ",
        "HelpsByNotTreatingDifferently(kyle, adam) → HelpsBestWay(kyle, adam) ::: If Kyle helps Adam by simply not treating Adam any differently throughout the duration of Adam's illness then Kyle helps Adam the best way Kyle knows how"
      ]
    },
    {
      "id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 4,
      "fols": [
        "Predicates:  ",
        "DropOff(x, y, z) ::: x drops off y at location z  ",
        "Embrace(x, y) ::: x embraces y  ",
        "GoodFriend(x, y) ::: x is a good friend of y  ",
        "Apologize(x, y, t) ::: x apologizes to y for t  ",
        "SayFinalFarewell(x, y) ::: x says final farewells to y  ",
        "UndergoSurgery(x) ::: x undergoes surgery  ",
        "GoTo(x, y) ::: x goes to location y  ",
        "Meet(x, y) ::: x meets y  ",
        "Tell(x, y, z) ::: x tells y about z  ",
        "RemovedSuccessfully(tumor) ::: the tumor was removed successfully  ",
        "Recover(x) ::: x would recover  ",
        "BoneDegradationWorseThanThought ::: the bone degradation was worse than thought  ",
        "",
        "Premises:  ",
        "DropOff(kyle, adam, hospital) ::: Kyle drops Adam off at the hospital  ",
        "Embrace(adam, kyle) ∧ GoodFriend(kyle, adam) ::: Adam embraces Kyle for being a good friend  ",
        "Apologize(adam, kyle, previousNightStatement) ::: Adam apologizes to Kyle for what he said the previous night  ",
        "SayFinalFarewell(adam, familyOfAdam) ::: Adam says what could be his final farewells to his family  ",
        "UndergoSurgery(adam) ::: Adam undergoes surgery  ",
        "GoTo(katherine, waitingRoom) ∧ Meet(katherine, familyOfAdam) ∧ Meet(katherine, kyle) ::: Katherine goes to the waiting room and meets Adam’s family and Kyle  ",
        "Tell(doctor, {kyle, diane, katherine}, (BoneDegradationWorseThanThought ∧ RemovedSuccessfully(tumor) ∧ Recover(adam))) ::: Doctor tells Kyle, Diane, and Katherine that although bone degradation was worse than thought, the tumor was removed successfully and Adam would recover  ",
        "",
        "Rule:  ",
        "RemovedSuccessfully(tumor) → Recover(adam) ::: If the tumor is removed successfully then Adam would recover"
      ]
    },
    {
      "id": "9292406d5193d3402195df7e5647fd168da2d15a",
      "paragraph_id": 5,
      "fols": [
        "Predicates:  ",
        "GettingReady(a_1) ::: Adam is getting ready for a date  ",
        "Encourages(a_3, a_1) ::: Kyle encourages Adam  ",
        "CleansIncision(a_3, a_1) ::: Kyle cleans the incision on Adam's back  ",
        "DoorbellRings() ::: The doorbell rings  ",
        "LetsInside(a_1, a_2) ::: Adam lets Katherine inside  ",
        "Leaves(a_3) ::: Kyle leaves  ",
        "Asks(a_2, \"Now what?\") ::: Katherine asks \"Now what?\"  ",
        "Smiles(a_1) ::: Adam smiles  ",
        "FreeOfCancer(a_1) ::: Adam is free of cancer  ",
        "",
        "Premises:  ",
        "GettingReady(a_1) ∧ Encourages(a_3, a_1) ∧ CleansIncision(a_3, a_1) ::: Adam is getting ready for a date with Katherine, while Kyle encourages him and cleans the incision on Adam's back from surgery.  ",
        "DoorbellRings() ∧ LetsInside(a_1, a_2) ::: The doorbell rings and Adam lets Katherine inside.  ",
        "Leaves(a_3) ∧ Asks(a_2, \"Now what?\") ∧ Smiles(a_1) ∧ FreeOfCancer(a_1) ::: After Kyle leaves, Katherine asks \"Now what?,\" and Adam smiles, being free of cancer."
      ]
    }
  ],
  "935775d945bc210b0928bffb6924e06e1ef9a9dd": [
    {
      "id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "Shy(a_1) ::: Bastian is shy.  ",
        "Friendless(a_1) ::: Bastian is friendless.  ",
        "Bibliophile(a_1) ::: Bastian is a bibliophile.  ",
        "Age(a_1, 12) ::: Bastian is 12 years old.  ",
        "TeasedBy(a_1, e_1) ::: Bastian is teased by bullies.  ",
        "HidesFrom(a_1, e_1) ::: Bastian hides from bullies.  ",
        "Location(a_1, bookstore) ::: Bastian hides in a bookstore.  ",
        "Interrupts(a_1, MrCoreander) ::: Bastian interrupts Mr. Coreander.  ",
        "AdvisesAgainst(MrCoreander, book) ::: Mr. Coreander advises against a certain book.  ",
        "Seizes(a_1, book) ::: Bastian seizes the book.  ",
        "LeavesNote(a_1, book) ::: Bastian leaves a note promising to return the book.  ",
        "HidesIn(a_1, attic) ::: Bastian hides in the school's attic.  ",
        "Reads(a_1, book) ::: Bastian reads the book.  ",
        "Describes(book, c_1) ::: The book describes Fantasia.  ",
        "DevouredBy(c_1, c_3) ::: Fantasia is being devoured by The Nothing (blackness).  ",
        "Ruler(c_1, a_2) ::: The Childlike Empress is ruler of Fantasia.  ",
        "Ill(a_2) ::: The Childlike Empress has fallen ill.  ",
        "Tasked(a_3, discoverCure) ::: Atreyu is tasked to discover the cure.  ",
        "Believes(a_3, (Well(a_2) → ¬Threat(c_3))) ::: Atreyu believes that if the Empress is well, The Nothing is no longer a threat.  ",
        "Given(a_3, d_1) ::: Atreyu is given the medallion AURYN.  ",
        "CanGuideProtect(d_1, a_3) ::: The AURYN can guide and protect Atreyu.  ",
        "SetsOut(a_3) ::: Atreyu sets out on the quest.  ",
        "Summons(c_3, Gmork) ::: The Nothing summons Gmork.  ",
        "IsWolfLike(Gmork) ::: Gmork is a wolf-like creature.  ",
        "Task(Gmork, kill(a_3)) ::: Gmork is tasked to kill Atreyu.  ",
        "",
        "Premises:  ",
        "Well(a_2) → ¬Threat(c_3) ::: If the Childlike Empress is well, then The Nothing is no longer a threat."
      ]
    },
    {
      "id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "QuestDirects(a_3, Morla) ::: Atreyu's quest directs him to the advisor Morla.  ",
        "Advisor(Morla) ::: Morla is an advisor.  ",
        "AncientOne(Morla) ::: Morla is the Ancient One.  ",
        "Location(Morla, SwampsOfSadness) ::: Morla is in the Swamps of Sadness.  ",
        "Protects(d_1, a_3) ::: The AURYN protects Atreyu.  ",
        "BelovedHorse(b_2, a_3) ::: Artax is Atreyu's beloved horse.  ",
        "LostTo(b_2, c_0) ::: Artax is lost to the swamp.  ",
        "ContinuesAlone(a_3) ::: Atreyu continues alone.  ",
        "Appearance(Morla, giantTurtle) ::: Morla is a giant turtle.  ",
        "Surprised(a_3) ::: Atreyu is surprised.  ",
        "Surprised(a_1) ::: Bastian is surprised.  ",
        "Scream(a_1) ::: Bastian lets out a scream.  ",
        "Hear(a_3, scream) ::: Atreyu hears the scream.  ",
        "Hear(Morla, scream) ::: Morla hears the scream.  ",
        "NoAnswers(Morla, a_3) ::: Morla does not have the answers Atreyu seeks.  ",
        "Directs(Morla, a_3, SouthernOracle) ::: Morla directs Atreyu to the Southern Oracle.  ",
        "Distance(SouthernOracle, tenThousandMiles) ::: The Southern Oracle is ten thousand miles distant.  ",
        "SuccumbsToExhaustion(a_3) ::: Atreyu succumbs to exhaustion.  ",
        "EscapeAttempt(a_3, SwampsOfSadness) ::: Atreyu tries to escape the Swamps.  ",
        "SavedBy(a_3, b_1) ::: Atreyu is saved by Falkor.  ",
        "Luckdragon(b_1) ::: Falkor is a luckdragon.  ",
        "VoicedBy(b_1, AlanOppenheimer) ::: Falkor is voiced by Alan Oppenheimer.  ",
        "TakesTo(b_1, a_3, GnomesHome) ::: Falkor takes Atreyu to the home of two gnomes.  ",
        "LivesNear(Gnomes, SouthernOracleEntrance) ::: The gnomes live near the entrance to the Southern Oracle.  ",
        "Explain(Gnomes, Trials) ::: The gnomes explain that Atreyu will face various trials.  ",
        "Faces(a_3, Trials) ::: Atreyu will face various trials.  ",
        "Enter(a_3, SouthernOracle) ::: Atreyu enters the Southern Oracle.  ",
        "SecondTrial(Trial2) ::: The second trial is a mirror showing the viewer's true self.  ",
        "ShowsTrueSelf(Trial2) ::: The second trial shows the viewer's true self.  ",
        "Reveals(Trial2, Boy) ::: The second trial reveals a boy.  ",
        "Recognizes(a_1, Boy) ::: Bastian recognizes the boy as himself.  ",
        "ThrowsAside(a_1, Book) ::: Bastian throws the book aside.  ",
        "ContinuesReading(a_1) ::: Bastian continues to read.  ",
        "Meets(a_3, SouthernOracle) ::: Atreyu meets the Southern Oracle.  ",
        "Tells(SouthernOracle, a_3, SaveEmpressMethod) ::: The Southern Oracle tells Atreyu the only way to save the Empress.  ",
        "MustFind(a_3, HumanChild) ::: Atreyu must find a human child.  ",
        "GiveNewName(HumanChild, a_2) ::: The human child must give the Empress a new name.  ",
        "BeyondBoundaries(NewName, c_1) ::: The new name is beyond the boundaries of Fantasia.  ",
        "",
        "Premises:  ",
        "∀x (ChoralConductor(x) → Musician(x)) ::: (from previous example, not relevant here)  ",
        "If Faces(a_3, Trial2) then ShowsTrueSelf(Trial2)  ",
        "Faces(a_3, Trial2) → ShowsTrueSelf(Trial2)  ",
        "",
        "If Tells(SouthernOracle, a_3, SaveEmpressMethod) then MustFind(a_3, HumanChild) ∧ GiveNewName(HumanChild, a_2) ∧ BeyondBoundaries(NewName, c_1)  ",
        "Tells(SouthernOracle, a_3, SaveEmpressMethod) → (MustFind(a_3, HumanChild) ∧ GiveNewName(HumanChild, a_2) ∧ BeyondBoundaries(NewName, c_1))"
      ]
    },
    {
      "id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "FleesBefore(a_3, e_0) ::: Atreyu flees before the Nothing  ",
        "FleesBefore(b_1, e_0) ::: Falkor flees before the Nothing  ",
        "KnockedFrom(a_3, b_1) ::: Atreyu is knocked from Falkor's back  ",
        "FallsInto(a_3, c_0) ::: Atreyu falls into the Sea of Possibilities  ",
        "Loses(a_3, d_1) ::: Atreyu loses the AURYN  ",
        "WakesOnShore(a_3, c_0) ::: Atreyu wakes on the shore of the abandoned ruins  ",
        "FindsPaintings(a_3) ::: Atreyu finds a series of paintings depicting his quest  ",
        "Reveals(e_0, a_0) ::: Gmork reveals himself to Atreyu (a_0 = general people, here used for Gmork)  ",
        "LiesInWait(e_0) ::: Gmork has been lying in wait  ",
        "Explains(e_0, c_1, e_0) ::: Gmork explains that Fantasia represents humanity's imagination  ",
        "Represents(c_1, e_0) ::: Fantasia represents humanity's imagination  ",
        "Represents(e_0, e_1) ::: The Nothing represents adult apathy and cynicism against humanity's imagination  ",
        "FendsOff(a_3, e_0) ::: Atreyu fends off Gmork  ",
        "Kills(a_3, e_0) ::: Atreyu kills Gmork  ",
        "BeginsConsume(e_1, c_0) ::: The Nothing begins to consume the ruins  ",
        "Locates(b_1, d_1) ::: Falkor locates AURYN  ",
        "Rescues(b_1, a_3) ::: Falkor rescues Atreyu  ",
        "FindsInVoid(a_3, b_1) ::: Atreyu and Falkor find themselves in a void  ",
        "FearFail(a_3, b_1) ::: Atreyu and Falkor fear they have failed  ",
        "Spots(a_3, c_2) ::: They spot the Empress's Ivory Tower among the fragments  ",
        "Apologizes(a_3, a_2) ::: Atreyu apologizes to the Empress  ",
        "Assures(a_2, a_3) ::: The Empress assures Atreyu  ",
        "Brings(a_3, a_2, a_1) ::: Atreyu has brought a human child (Bastian) to the Empress  ",
        "BeginsConsume(e_1, c_2) ::: The Nothing begins to consume the Tower  ",
        "Pleads(a_2, a_1) ::: The Empress pleads to Bastian  ",
        "CallsOut(a_1, e_0) ::: Bastian calls out the Empress's new name  ",
        "LosesConsciousness(a_1) ::: Bastian loses consciousness  ",
        "",
        "Premises:  ",
        "Represents(c_1, e_0) ::: Fantasia represents humanity's imagination  ",
        "Represents(e_1, e_0) ::: The Nothing represents adult apathy and cynicism against humanity's imagination"
      ]
    },
    {
      "id": "935775d945bc210b0928bffb6924e06e1ef9a9dd",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "Wakes(a_1) ::: Bastian wakes up.  ",
        "FindsIn(a_1, c_3) ::: Bastian finds himself in blackness.  ",
        "With(a_1, a_2) ::: Bastian is with the Empress.  ",
        "LastBitRemaining(d_2, c_1) ::: The grain of sand is the last bit of Fantasia remaining.  ",
        "Tells(a_2, a_1, HasPowerToBringBack(a_1, c_1, d_1)) ::: The Empress tells Bastian that he has the power to bring Fantasia back with imagination using the power of the AURYN.  ",
        "HasPowerToBringBack(a_1, c_1, d_1) ::: Bastian has the power to bring Fantasia back with imagination using the power of the AURYN.  ",
        "Recreates(a_1, c_1) ::: Bastian re-creates Fantasia.  ",
        "FliesOn(a_1, b_1) ::: Bastian flies on Falkor's back.  ",
        "SeesRestored(a_1, c_0) ::: Bastian sees the land and its inhabitants restored.  ",
        "Reunited(a_3, b_2) ::: Atreyu has been reunited with Artax.  ",
        "Tells(b_1, a_1, CanWishAnything(a_1)) ::: Falkor tells Bastian that he can wish for anything.  ",
        "CanWishAnything(a_1) ::: Bastian can wish for anything.  ",
        "BringsBackToRealWorld(a_1, b_1, c_2) ::: Bastian brings Falkor back to the real world.  ",
        "ChaseDown(a_1, e_1) ::: Bastian chases down the bullies.  ",
        "FilmEndsWithNarration() ::: The film ends with narration about Bastian's wishes and adventures.  ",
        "",
        "Premises:  ",
        "∀x ((x = a_1) ∧ HasPowerToBringBack(x, c_1, d_1) → Recreates(x, c_1)) ::: If Bastian has the power to bring Fantasia back with imagination using the power of the AURYN, then Bastian can re-create Fantasia.  ",
        "∀x ((x = a_1) ∧ Recreates(x, c_1) → SeesRestored(x, c_0)) ::: If Bastian re-creates Fantasia, then Bastian sees the land and its inhabitants restored.  ",
        "∀x ((x = a_1) ∧ Tells(b_1, x, CanWishAnything(x)) → BringsBackToRealWorld(x, b_1, c_2)) ::: If Falkor tells Bastian that Bastian can wish for anything, then Bastian can bring Falkor back to the real world.  ",
        "",
        "Additional facts from context:  ",
        "Wakes(a_1) ∧ FindsIn(a_1, c_3) ∧ With(a_1, a_2) ∧ LastBitRemaining(d_2, c_1) ::: When Bastian wakes, he finds himself in blackness with the Empress, with only a grain of sand the last bit of Fantasia remaining.  ",
        "Tells(a_2, a_1, HasPowerToBringBack(a_1, c_1, d_1)) ::: The Empress tells Bastian he has the power to bring Fantasia back with imagination using the power of the AURYN.  ",
        "Recreates(a_1, c_1) ∧ FliesOn(a_1, b_1) ∧ SeesRestored(a_1, c_0) ∧ Reunited(a_3, b_2) ::: Bastian re-creates Fantasia, flies on Falkor's back, sees the land and its inhabitants restored, and Atreyu has been reunited with Artax.  ",
        "Tells(b_1, a_1, CanWishAnything(a_1)) ∧ CanWishAnything(a_1) ∧ BringsBackToRealWorld(a_1, b_1, c_2) ∧ ChaseDown(a_1, e_1) ::: Falkor tells Bastian he can wish for anything, so Bastian brings Falkor back to the real world to chase down the bullies.  ",
        "FilmEndsWithNarration() ::: The film ends with narration that Bastian had many more wishes and adventures, and adds: \"but that's another story\"."
      ]
    }
  ],
  "999a532b45f030c8f382f0f92fc51b3d12fd821c": [
    {
      "id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "DarkHairedWoman(x) ::: x is a dark-haired woman  ",
        "EscapesMurder(x) ::: x escapes her own murder  ",
        "SurvivesCarAccident(x, place) ::: x survives a car accident at place  ",
        "Injured(x) ::: x is injured  ",
        "InShock(x) ::: x is in shock  ",
        "DescendsInto(x, place) ::: x descends into place  ",
        "SneaksInto(x, place) ::: x sneaks into place  ",
        "OlderRedHairedWoman(x) ::: x is an older, red-headed woman  ",
        "VacatedApartment(x, place) ::: x has just vacated place  ",
        "AspiringActress(x) ::: x is an aspiring actress  ",
        "FindsConfused(x, y) ::: x finds y confused  ",
        "DoesNotKnowName(x) ::: x does not know her own name  ",
        "AssumesName(x, name) ::: x assumes the name name  ",
        "SeesPosterForFilm(x, film) ::: x sees a poster for film  ",
        "HelpsRememberIdentity(x, y) ::: x helps y remember her identity  ",
        "LooksInPurse(x, y) ::: x looks in y’s purse  ",
        "FindsLargeAmountOfMoney(x) ::: x finds a large amount of money  ",
        "FindsBlueKey(x) ::: x finds an unusual blue key  ",
        "",
        "Premises:  ",
        "DarkHairedWoman(a_0) ∧ EscapesMurder(a_0) ∧ SurvivesCarAccident(a_0, b_0) ∧ Injured(a_0) ∧ InShock(a_0) ::: The dark-haired woman (Harring) escapes her own murder, surviving a car accident on Mulholland Drive.  ",
        "DescendsInto(a_0, LosAngeles) ∧ SneaksInto(a_0, b_2) ::: She descends into Los Angeles and sneaks into an apartment (Diane’s apartment).  ",
        "OlderRedHairedWoman(a_4) ∧ VacatedApartment(a_4, b_2) ::: An older, red-headed woman (Camilla) has just vacated the apartment.  ",
        "AspiringActress(a_3) ∧ FindsConfused(a_3, a_0) ∧ DoesNotKnowName(a_0) ::: Betty Elms (a_3) arrives at the apartment and finds the dark-haired woman confused, not knowing her own name.  ",
        "AssumesName(a_0, \"Rita\") ∧ SeesPosterForFilm(a_0, \"Gilda(1946)\") ::: The dark-haired woman assumes the name \"Rita\" after seeing a poster for the film Gilda (1946).  ",
        "HelpsRememberIdentity(a_3, a_0) ∧ LooksInPurse(a_3, a_0) ∧ FindsLargeAmountOfMoney(a_3) ∧ FindsBlueKey(a_3) ::: Betty helps Rita remember her identity by looking in Rita’s purse, where she finds a large amount of money and an unusual blue key."
      ]
    },
    {
      "id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "Man(x) ::: x is a man  ",
        "Woman(x) ::: x is a woman  ",
        "Director(x) ::: x is a director  ",
        "HitMan(x) ::: x is a hit man  ",
        "ApparentMobster(x) ::: x is an apparent mobster  ",
        "UnknownActress(x) ::: x is an unknown actress  ",
        "LeadsFilm(x, y) ::: x leads the film y  ",
        "InsistsCast(x, y, z) ::: x insists that y cast z  ",
        "UrgesCast(x, y, z) ::: x urges that y cast z for y's own good  ",
        "HasNightmare(x) ::: x had a nightmare  ",
        "DreamtFigureBehindDiner(x) ::: x dreamt there was a horrible figure behind the diner  ",
        "Investigate(x, y) ::: x and y investigate  ",
        "FigureAppears(x) ::: a horrible figure appears to x  ",
        "CollapsesInFright(x) ::: x collapses in fright  ",
        "HasAffair(x, y) ::: x has an affair with y  ",
        "ThrownOutOfHouse(x) ::: x is thrown out of his house  ",
        "BankClosedCredit(x) ::: x's bank has closed his line of credit  ",
        "IsBroke(x) ::: x is broke  ",
        "Meets(x, y) ::: x meets y  ",
        "AttemptsStealBook(x) ::: x attempts to steal a book full of phone numbers  ",
        "LeavesDead(x, n) ::: x leaves n people dead  ",
        "Place(x) ::: x is a place  ",
        "Diner(x) ::: x is a diner  ",
        "Film(x) ::: x is a film  ",
        "Photo(x) ::: x is a photo  ",
        "Money(x) ::: x is a large amount of money  ",
        "Key(x) ::: x is a key  ",
        "Table(x) ::: x is a table  ",
        "Bed(x) ::: x is a bed  ",
        "Event(x) ::: x is an event  ",
        "Job(x) ::: x is a job  ",
        "",
        "Entities:  ",
        "a_0: Diane  ",
        "a_1: hit man  ",
        "a_2: Betty  ",
        "a_3: Camilla Rhodes  ",
        "a_4: man who had the nightmare  ",
        "a_5: woman at the club  ",
        "b_0: Winkies (diner)  ",
        "b_1: Diane's apartment  ",
        "b_2: club  ",
        "c_0: Camilla's photo  ",
        "c_1: large amount of money  ",
        "c_2: blue key  ",
        "c_3: table  ",
        "c_4: bed  ",
        "d_0: job  ",
        "",
        "Premises:  ",
        "Man(a_4) ∧ HasNightmare(a_4) ∧ DreamtFigureBehindDiner(a_4) ::: The man had a nightmare in which he dreamt there was a horrible figure behind the diner  ",
        "Investigate(a_4, a_5) → FigureAppears(a_4) ∧ CollapsesInFright(a_4) ::: When the man and his companion investigate, the figure appears causing the man to collapse in fright  ",
        "Director(adamKesher) ∧ ApparentMobster(mobster) ∧ UnknownActress(a_3) ∧ Film(film) ∧ LeadsFilm(a_3, film) ∧ InsistsCast(mobster, adamKesher, a_3) ::: Apparent mobsters insist the director cast the unknown actress as the lead in his film  ",
        "Man(adamKesher) ∧ HasAffair(wifeOf(adamKesher), otherMan) ∧ ThrownOutOfHouse(adamKesher) ::: Adam Kesher finds his wife having an affair and is thrown out of his house  ",
        "BankClosedCredit(adamKesher) ∧ IsBroke(adamKesher) ::: Adam Kesher's bank has closed his line of credit and he is broke  ",
        "MysteriousFigure(cowboy) ∧ Meets(adamKesher, cowboy) ∧ UrgesCast(cowboy, adamKesher, a_3) ::: The mysterious figure called The Cowboy urges Adam Kesher to cast Camilla Rhodes for his own good  ",
        "HitMan(a_1) ∧ AttemptsStealBook(a_1) ∧ LeavesDead(a_1, 3) ::: The hit man attempts to steal a book full of phone numbers and leaves three people dead"
      ]
    },
    {
      "id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "WentTo(a_3, b_1) ::: Betty went to Winkies.  ",
        "ServedBy(a_1, b_1) ::: Diane served at Winkies.  ",
        "RemembersName(a_3, \"Diane Selwyn\") ::: Betty (or Rita) remembers the name \"Diane Selwyn\".  ",
        "FoundInPhoneBook(a_1) ::: Diane Selwyn is found in the phone book.  ",
        "Called(a_3, a_1) ::: Betty called Diane Selwyn.  ",
        "NoAnswer(a_1) ::: Diane Selwyn did not answer the call.  ",
        "WentTo(a_3, audition) ::: Betty went to an audition.  ",
        "PerformancePraised(a_3) ::: Betty’s performance at the audition was highly praised.  ",
        "CastingAgentTakesToSet(a_3, \"The Sylvia North Story\") ::: A casting agent took Betty to the film set of The Sylvia North Story.  ",
        "DirectedBy(\"The Sylvia North Story\", Adam) ::: The Sylvia North Story is directed by Adam.  ",
        "GivesAudition(a_4) ::: Camilla gave an audition.  ",
        "AdamDeclares(\"This is the girl\") ::: Adam declared \"This is the girl.\"  ",
        "SmilesShyly(a_3) ::: Betty smiled shyly.  ",
        "LocksEyes(a_3, Adam) ::: Betty locked eyes with Adam.  ",
        "FleesBeforeMeeting(a_3, Adam) ::: Betty fled before meeting Adam.  ",
        "SaysLateToMeetFriend(a_3) ::: Betty said she was late to meet a friend.  ",
        "",
        "Premises:  ",
        "WentTo(a_3, b_1) ∧ ServedBy(a_1, b_1) → RemembersName(a_3, \"Diane Selwyn\") ::: Betty and Rita go to Winkies and are served by Diane, causing Rita to remember the name \"Diane Selwyn\".  ",
        "FoundInPhoneBook(a_1) ∧ Called(a_3, a_1) ∧ NoAnswer(a_1) ::: They find Diane Selwyn in the phone book, call her, but she does not answer.  ",
        "WentTo(a_3, audition) ∧ PerformancePraised(a_3) ∧ CastingAgentTakesToSet(a_3, \"The Sylvia North Story\") ∧ DirectedBy(\"The Sylvia North Story\", Adam) ∧ GivesAudition(a_4) ∧ AdamDeclares(\"This is the girl\") ::: Betty goes to an audition, is praised, taken to the film set directed by Adam, where Camilla auditions and Adam declares \"This is the girl.\"  ",
        "SmilesShyly(a_3) ∧ LocksEyes(a_3, Adam) ∧ FleesBeforeMeeting(a_3, Adam) ∧ SaysLateToMeetFriend(a_3) ::: Betty smiles shyly, locks eyes with Adam, but flees before meeting him, saying she is late to meet a friend."
      ]
    },
    {
      "id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "Apartment(x) ::: x is an apartment  ",
        "Person(x) ::: x is a person  ",
        "GoTo(x, y) ::: person x goes to place y  ",
        "BreakIn(x, y) ::: person x breaks into place y  ",
        "FindBody(x, y) ::: person x finds the body of person y  ",
        "DeadForDays(y, n) ::: person y has been dead for n days  ",
        "ReturnTo(x, y) ::: person x returns to place y  ",
        "DisguiseWith(x, obj) ::: person x disguises herself with object obj  ",
        "HaveSex(x, y) ::: persons x and y have sex  ",
        "AwakeAt(x, t) ::: person x awakes at time t  ",
        "InsistGoTo(x, y) ::: person x insists to go to place y  ",
        "ExplainIllusion(x, y) ::: person x explains that y is an illusion  ",
        "SingAndCollapse(x) ::: person x begins singing then collapses  ",
        "VocalsContinue(x) ::: vocals of person x continue after collapse  ",
        "FindObjectIn(x, obj, place) ::: person x finds object obj in place  ",
        "Match(obj1, obj2) ::: object obj1 matches object obj2  ",
        "Retrieve(x, obj) ::: person x retrieves object obj  ",
        "Disappear(x) ::: person x disappears  ",
        "Unlock(x, obj) ::: person x unlocks object obj  ",
        "FallToFloor(obj) ::: object obj falls to the floor  ",
        "ThumpSound(obj) ::: object obj makes a thump sound  ",
        "",
        "Premises:  ",
        "Apartment(b_2) ::: Diane's apartment is an apartment  ",
        "Person(a_0) ∧ Person(a_1) ∧ Person(a_3) ::: Betty, Rita, and Diane are persons  ",
        "GoTo(a_3, b_2) ∧ GoTo(a_0, b_2) ::: Betty and Rita go to Diane's apartment  ",
        "BreakIn(a_3, b_2) ∧ BreakIn(a_0, b_2) ::: Betty and Rita break in Diane's apartment  ",
        "FindBody(a_3, a_woman) ∧ DeadForDays(a_woman, several) ::: They find the body of a woman dead for several days  ",
        "ReturnTo(a_3, a_0_apartment) ∧ ReturnTo(a_0, a_0_apartment) ::: They return to their apartment  ",
        "DisguiseWith(a_0, blonde_wig) ::: Rita disguises herself with a blonde wig  ",
        "HaveSex(a_0, a_3) ::: Rita and Betty have sex  ",
        "AwakeAt(a_0, time2am) ∧ AwakeAt(a_3, time2am) ::: They awake at 2 a.m.  ",
        "InsistGoTo(a_0, b_3) ::: Rita insists they go to Club Silencio  ",
        "ExplainIllusion(a_man, everything) ::: The man on stage explains everything is an illusion  ",
        "SingAndCollapse(a_6) ∧ VocalsContinue(a_6) ::: A woman sings then collapses but vocals continue  ",
        "FindObjectIn(a_3, c_3, purse_a_3) ::: Betty finds a blue box in her purse  ",
        "Match(c_3, key_rita) ::: The blue box matches Rita's key  ",
        "Retrieve(a_0, c_3) ::: Rita retrieves the key  ",
        "Disappear(a_3) ::: Betty disappears  ",
        "Unlock(a_0, c_3) ::: Rita unlocks the box  ",
        "FallToFloor(c_3) ∧ ThumpSound(c_3) ::: The box falls to the floor with a thump  ",
        "",
        "Rules:  ",
        "∀x (ExplainIllusion(x, y) → Illusion(y)) ::: Everything explained by the man on stage at Club Silencio is an illusion"
      ]
    },
    {
      "id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 4,
      "fols": [
        "Predicates:  ",
        "Older(x) ::: x is an older bird  ",
        "DarkerHeadFeathers(x) ::: x has darker feathers on the head  ",
        "ThickerBreastStripes(x) ::: x has thicker breast feather stripes  ",
        "HigherRank(x) ::: x has higher rank status  ",
        "LowerRank(x) ::: x has lower rank status  ",
        "Bullies(x, y) ::: x bullies y  ",
        "InStrictHierarchy(x) ::: x is part of a strict hierarchy  ",
        "InGroup(x, g) ::: x is in group g  ",
        "LongTermCommonLife(x, g) ::: x has long-term common life in group g  ",
        "StatusGraduallyEstablished(g) ::: status is gradually established in group g  ",
        "",
        "Premises:  ",
        "∀x (Older(x) → (DarkerHeadFeathers(x) ∧ ThickerBreastStripes(x))) ::: If a bird is older, then the bird has darker feathers on the head and thicker breast feather stripes  ",
        "∀x ((DarkerHeadFeathers(x) ∧ ThickerBreastStripes(x)) → HigherRank(x)) ::: If a bird has darker feathers on the head and thicker breast feather stripes, then the bird has higher rank status  ",
        "∀x ∀y ((HigherRank(x) ∧ LowerRank(y)) → Bullies(x, y)) ::: If a bird has higher rank status, then the bird bullies birds with lower rank status  ",
        "∀x ∀g (InGroup(x, g) → InStrictHierarchy(x)) ::: All birds in a group are part of a strict hierarchy  ",
        "∀g (∀x (InGroup(x, g) ∧ LongTermCommonLife(x, g)) → StatusGraduallyEstablished(g)) ::: The status of birds in a group is gradually established through long-term common life"
      ]
    },
    {
      "id": "999a532b45f030c8f382f0f92fc51b3d12fd821c",
      "paragraph_id": 5,
      "fols": [
        "Predicates:  ",
        "Meets(a_1, a_2, b_1) ::: Diane meets with the hit man at Winkies.  ",
        "Gives(a_1, a_2, c_1) ::: Diane gives the hit man Camilla's photo.  ",
        "Gives(a_1, a_2, c_2) ::: Diane gives the hit man a large amount of money.  ",
        "ServedBy(a_1, a_3, b_1) ::: Diane is served by Betty at Winkies.  ",
        "ServedBy(a_2, a_3, b_1) ::: The hit man is served by Betty at Winkies.  ",
        "Tells(a_2, a_1, d_1) ::: The hit man tells Diane about the job.  ",
        "Finds(a_1, c_3) ::: Diane will find a blue key when the job is done.  ",
        "Asks(a_1, a_2, Question) ::: Diane asks the hit man a question (what the key opens).  ",
        "Laughs(a_2) ::: The hit man laughs.  ",
        "Sees(a_1, a_5, b_1) ::: Diane sees the man who had the nightmare standing at the counter.  ",
        "At(a_5, b_1) ::: The man who had the nightmare is standing at the counter in Winkies.  ",
        "At(a_1, b_2) ::: Diane is at her apartment.  ",
        "On(c_3, c_4) ::: The blue key is on the table.  ",
        "TerrorizedBy(a_1, Hallucinations) ::: Diane is terrorized by hallucinations.  ",
        "RunsTo(a_1, c_5) ::: Diane runs screaming to her bed.  ",
        "Shoots(a_1, Self) ::: Diane shoots herself.  ",
        "Whispers(a_6, \"Silencio\", b_3) ::: A woman at the club whispers \"Silencio\".  ",
        "At(a_6, b_3) ::: The woman is at the club.  ",
        "",
        "Premises:  ",
        "Meets(a_1, a_2, b_1) ∧ Gives(a_1, a_2, c_1) ∧ Gives(a_1, a_2, c_2) ∧ ServedBy(a_1, a_3, b_1) ∧ ServedBy(a_2, a_3, b_1) ::: Diane meets the hit man at Winkies, gives him Camilla's photo and money, and both are served by Betty.  ",
        "Tells(a_2, a_1, d_1) ∧ Finds(a_1, c_3) ::: The hit man tells Diane that when the job is done, she will find a blue key.  ",
        "Asks(a_1, a_2, Question) ∧ Laughs(a_2) ::: Diane asks what the key opens, but the hit man laughs.  ",
        "Sees(a_1, a_5, b_1) ∧ At(a_5, b_1) ::: Diane sees the man who had the nightmare standing at the counter in Winkies.  ",
        "At(a_1, b_2) ∧ On(c_3, c_4) ∧ TerrorizedBy(a_1, Hallucinations) ::: At her apartment, with the key on the table, Diane is terrorized by hallucinations.  ",
        "RunsTo(a_1, c_5) ∧ Shoots(a_1, Self) ::: Diane runs screaming to her bed and shoots herself.  ",
        "Whispers(a_6, \"Silencio\", b_3) ∧ At(a_6, b_3) ::: A woman at the club whispers \"Silencio\"."
      ]
    }
  ],
  "9bfa931a5513a490a9cc14f4c5062f5edfbc0f32": [
    {
      "id": "9bfa931a5513a490a9cc14f4c5062f5edfbc0f32",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "BeginsAt(book, time, date, place) ::: The book begins at a specific time, date, and place.  ",
        "EndsAt(book, time, date) ::: The referenced book Kidnapped ends at a specific time and date.  ",
        "Outside(place1, place2) ::: place1 is outside place2.  ",
        "LocatedIn(place, location) ::: A place is located in a larger location (e.g., city, country).  ",
        "",
        "Premises:  ",
        "BeginsAt(book, time2pm, date25Aug1751, b_0) ::: The book begins at 2 PM on 25 August 1751, outside the British Linen Company.  ",
        "EndsAt(kidnapped, time2pm, date25Aug1751) ::: Kidnapped ends at 2 PM on 25 August 1751.  ",
        "Outside(b_0, britishLinenCompany) ::: The book begins outside the British Linen Company.  ",
        "LocatedIn(b_0, b_3) ::: The British Linen Company is in Edinburgh, Scotland.  ",
        "LocatedIn(edinburgh, b_3) ::: Edinburgh is in Scotland.  ",
        "",
        "Note:  ",
        "- The British Linen Company is represented as b_0 (Places group representative).  ",
        "- Scotland is b_3.  ",
        "- Time and date are represented as constants time2pm and date25Aug1751.  ",
        "- The book referenced is unnamed, so \"book\" is used as a constant.  ",
        "- Kidnapped is referenced as kidnapped (constant).  ",
        "",
        "No explicit rules or relationships involving people or groups are given, so no predicates involving a_1, a_2, a_3, a_4, c_0, c_1, c_2 are stated."
      ]
    },
    {
      "id": "9bfa931a5513a490a9cc14f4c5062f5edfbc0f32",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "ArrestedCharged(a_1) ::: James Stewart (James More) is arrested and charged with complicity in the Appin Murder.  ",
        "CondemnedToDeath(a_1) ::: James Stewart is condemned to death.  ",
        "ConfinedOnBassRock(a_2) ::: David Balfour is confined on the Bass Rock.  ",
        "ConfinedUntilTrialOver(a_2) ::: David Balfour is confined until the trial is over.  ",
        "EngineersEscape(a_4, a_1) ::: Catriona MacGregor Drummond engineers the escape of James More.  ",
        "EscapesFromPrison(a_1) ::: James More escapes from prison.  ",
        "",
        "Premises:  ",
        "ArrestedCharged(a_1) → CondemnedToDeath(a_1) ::: If James Stewart is arrested and charged with complicity in the Appin Murder then James Stewart is condemned to death.  ",
        "ConfinedOnBassRock(a_2) → ConfinedUntilTrialOver(a_2) ::: If David Balfour is confined on the Bass Rock then David Balfour is confined until the trial is over.  ",
        "EngineersEscape(a_4, a_1) → EscapesFromPrison(a_1) ::: If Catriona MacGregor Drummond engineers the escape of James More then James More escapes from prison."
      ]
    },
    {
      "id": "9bfa931a5513a490a9cc14f4c5062f5edfbc0f32",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "TravelTo(x, y) ::: x travels to place y.  ",
        "Studies(x, y, z) ::: x studies subject y at institution z.  ",
        "UnderProtection(x, y) ::: x takes y under his/her protection.  ",
        "HasNoMoney(x) ::: x has no money.  ",
        "Finds(x, y) ::: x finds y.  ",
        "Arrives(x) ::: x arrives.  ",
        "Disappointing(x) ::: x is somewhat disappointing.  ",
        "DrinksGreatDeal(x) ::: x drinks a great deal.  ",
        "NoCompunctionLivingOff(x, y) ::: x shows no compunction against living off y's largesse.  ",
        "LearnsOfDeath(x, y) ::: x learns of the death of y.  ",
        "GainsKnowledgeInheritance(x) ::: x gains knowledge that x has come into his full, substantial inheritance.  ",
        "FastFriends(x, y) ::: x and y are fast friends.  ",
        "BeginMisunderstandings(x, y) ::: x and y begin a series of misunderstandings.  ",
        "DriveAway(x, y) ::: x drives y away.  ",
        "SendsPayment(x, y, z) ::: x sends payment to y in return for z.  ",
        "FindWayTo(x, y) ::: x finds their way to place y.  ",
        "Joins(x, y) ::: x joins y.  ",
        "Berates(x, y, z) ::: x berates y for z.  ",
        "",
        "Entities:  ",
        "People: a_0 (general people), a_1 (James More), a_2 (David), a_3 (Alan), a_4 (Catriona)  ",
        "Places: b_0 (Holland), b_1 (Dunkirk), b_2 (Paris), b_3 (Scotland), b_4 (remote inn), b_5 (shore)  ",
        "Groups: c_0 (British warship), c_1 (British)  ",
        "",
        "Premises:  ",
        "TravelTo(a_2, b_0) ::: David travels to Holland.  ",
        "TravelTo(a_4, b_0) ::: Catriona travels to Holland.  ",
        "Studies(a_2, law, UniversityOfLeyden) ::: David studies law at the University of Leyden.  ",
        "UnderProtection(a_2, a_4) ∧ HasNoMoney(a_4) ::: David takes Catriona under his protection because she has no money.  ",
        "∃x (Finds(x, a_2)) ::: Catriona’s father eventually finds them.  ",
        "Arrives(a_1) ∧ Disappointing(a_1) ∧ DrinksGreatDeal(a_1) ∧ NoCompunctionLivingOff(a_1, a_2) ::: James More arrives, is disappointing, drinks a lot, and lives off David’s largesse.  ",
        "LearnsOfDeath(a_2, uncleEbenezer) → GainsKnowledgeInheritance(a_2) ::: If David learns of the death of his uncle Ebenezer, then David gains knowledge of his full inheritance.  ",
        "FastFriends(a_2, a_4) ::: David and Catriona are fast friends.  ",
        "BeginMisunderstandings(a_2, a_4) → (DriveAway(a_2, a_4) ∧ DriveAway(a_2, a_1)) ::: Their misunderstandings eventually drive Catriona and James More away.  ",
        "SendsPayment(a_2, a_1, newsOfCatrionaWelfare) ::: David sends payment to James More in return for news of Catriona’s welfare.  ",
        "FindWayTo(a_1, b_1) ∧ FindWayTo(a_4, b_1) ::: James More and Catriona find their way to Dunkirk.  ",
        "Joins(a_3, a_2) ::: Alan Breck joins David in Leyden.  ",
        "Berates(a_3, a_2, notUnderstandingWomen) ::: Alan berates David for not understanding women.  ",
        "",
        "Rules:  ",
        "LearnsOfDeath(a_2, uncleEbenezer) → GainsKnowledgeInheritance(a_2) ::: If David learns of the death of his uncle Ebenezer then David gains knowledge that he has come into his full, substantial inheritance."
      ]
    },
    {
      "id": "9bfa931a5513a490a9cc14f4c5062f5edfbc0f32",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "LikesWomen(a_0, a_2) ::: Women like man a_2 (David).  ",
        "DetestsWomen(a_0, a_2) ::: Women detest man a_2 (David).  ",
        "GoesFine(a_2) ::: Everything goes fine for man a_2 (David).  ",
        "NothingCanBeDone(a_2) ::: Nothing can be done for man a_2 (David).  ",
        "SellCoatsFor(a_0, a_2) ::: Women would sell their coats for man a_2 (David).  ",
        "NeverLookAtRoad(a_0, a_2) ::: Women never look at the road man a_2 (David) is on.  ",
        "IsWoman(x) ::: x is a woman.  ",
        "IsMan(x) ::: x is a man.  ",
        "IsGomeral(a_2) ::: David is a gomeral (foolish person).  ",
        "",
        "Premises:  ",
        "∀w ∀m ((IsWoman(w) ∧ IsMan(m) ∧ LikesWomen(w, m)) → GoesFine(m))  ",
        "::: If women like the man, then everything goes fine.  ",
        "",
        "∀w ∀m ((IsWoman(w) ∧ IsMan(m) ∧ DetestsWomen(w, m)) → NothingCanBeDone(m))  ",
        "::: If women detest the man, then nothing can be done.  ",
        "",
        "∀w ∀m ((IsWoman(w) ∧ IsMan(m)) → (SellCoatsFor(w, m) ⊕ NeverLookAtRoad(w, m)))  ",
        "::: Women are divided into two sets: those who would sell their coats for the man, and those who never look at the road the man is on.  ",
        "",
        "IsGomeral(a_2)  ",
        "::: David is such a gomeral that he cannot tell one set of women from the other."
      ]
    },
    {
      "id": "9bfa931a5513a490a9cc14f4c5062f5edfbc0f32",
      "paragraph_id": 4,
      "fols": [
        "Predicates:  ",
        "Betrays(a_1, a_3, c_1) ::: James More betrays Alan into the hands of the British warship.  ",
        "AttemptsToCapture(c_2, a_3) ::: The British attempt to capture Alan.  ",
        "FleesWith(a_3, a_2, a_4) ::: Alan flees with David and Catriona.  ",
        "FleesTo(a_2, a_4, b_2) ::: David and Catriona flee to Paris.  ",
        "MarriedIn(a_2, a_4, b_2) ::: David and Catriona are married in Paris.  ",
        "DiesFromIllness(a_1) ::: James More dies from an illness.  ",
        "ReturnToRaiseFamily(a_2, a_4, b_3) ::: David and Catriona return to Scotland to raise a family.  ",
        "",
        "Premises:  ",
        "Betrays(a_1, a_3, c_1) → AttemptsToCapture(c_2, a_3) ::: If James More betrays Alan into the hands of a British warship, then the British attempt to capture Alan.  ",
        "AttemptsToCapture(c_2, a_3) → FleesWith(a_3, a_2, a_4) ::: If the British attempt to capture Alan, then Alan flees with David and Catriona.  ",
        "FleesTo(a_2, a_4, b_2) → MarriedIn(a_2, a_4, b_2) ::: If David and Catriona flee to Paris, then David and Catriona are married in Paris.  ",
        "DiesFromIllness(a_1) → ReturnToRaiseFamily(a_2, a_4, b_3) ::: If James More dies from an illness, then David and Catriona return to Scotland to raise a family."
      ]
    }
  ],
  "9c05142dcf6d0705d4619800a741d7b337b21116": [
    {
      "id": "9c05142dcf6d0705d4619800a741d7b337b21116",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "PettyCrook(a_1) ::: Ross Murdock is a petty crook.  ",
        "GivenChoice(a_1, Rehabilitation, OperationRetrograde) ::: Ross Murdock is given the choice of facing Rehabilitation or volunteering to join Operation Retrograde.  ",
        "Volunteers(a_1, OperationRetrograde) ::: Ross Murdock volunteers to join Operation Retrograde.  ",
        "TakenBy(a_1, a_3, BaseUnderIceNorthPole) ::: Ross Murdock is taken by Major John Kelgarries to a base built under the ice near the North Pole.  ",
        "Major(a_3) ::: John Kelgarries is a Major.  ",
        "BaseUnderIceNorthPole(BaseUnderIceNorthPole) ::: The base is built under the ice near the North Pole.  ",
        "TeamedWith(a_1, a_4) ::: Ross Murdock is teamed with archaeologist Gordon Ashe.  ",
        "Archaeologist(a_4) ::: Gordon Ashe is an archaeologist.  ",
        "TrainedToMimic(a_1, TraderBeakerCulture) ::: Ross Murdock is trained to mimic a trader of the Beaker culture of Bronze-Age Europe.  ",
        "TraderBeakerCulture(TraderBeakerCulture) ::: Trader of the Beaker culture of Bronze-Age Europe.  ",
        "",
        "Premises:  ",
        "Volunteers(a_1, OperationRetrograde) → TakenBy(a_1, a_3, BaseUnderIceNorthPole) ::: Ross Murdock volunteers to join Operation Retrograde implies Ross Murdock is taken by Major John Kelgarries to a base built under the ice near the North Pole.  ",
        "TeamedWith(a_1, a_4) → TrainedToMimic(a_1, TraderBeakerCulture) ::: Ross Murdock is teamed with archaeologist Gordon Ashe implies Ross Murdock is trained to mimic a trader of the Beaker culture of Bronze-Age Europe.  ",
        "PettyCrook(a_1) ∧ GivenChoice(a_1, Rehabilitation, OperationRetrograde) ::: Ross Murdock is a petty crook given the choice of Rehabilitation or Operation Retrograde.  ",
        "TakenBy(a_1, a_3, BaseUnderIceNorthPole) ∧ Major(a_3) ∧ BaseUnderIceNorthPole(BaseUnderIceNorthPole) ::: Ross Murdock is taken by Major John Kelgarries to a base built under the ice near the North Pole.  ",
        "TeamedWith(a_1, a_4) ∧ Archaeologist(a_4) ::: Ross Murdock is teamed with archaeologist Gordon Ashe."
      ]
    },
    {
      "id": "9c05142dcf6d0705d4619800a741d7b337b21116",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "SentBackTo(x, y, t) ::: x was sent back to location y at time t.  ",
        "Outpost(x, y) ::: x is an outpost located at y.  ",
        "Bombed(x) ::: x was bombed.  ",
        "DestroyedByWrath(x, y) ::: x was destroyed by the wrath of y.  ",
        "StormGod(y) ::: y is a storm god.  ",
        "LocalGod(y, z) ::: y is a local god of place z.  ",
        "Natives(x) ::: x are natives.  ",
        "AccordingTo(x, y) ::: x is according to y (source or testimony).  ",
        "DirectionFrom(x, y, d) ::: x came from direction d relative to y.  ",
        "CluesPointTo(x, y) ::: clues point to y from x.  ",
        "AreaOccupiedBy(x, y) ::: area x is occupied by y.  ",
        "Person(x) ::: x is a person.  ",
        "Survivor(x, e) ::: x is a survivor of event e.  ",
        "GoTo(x, y) ::: x goes to location y.  ",
        "",
        "Refering expressions:  ",
        "Ross: a_0  ",
        "Ashe: a_1  ",
        "McNeil: a_2  ",
        "Rossa and Assha (Ross and Ashe): a_0_0 (group representative)  ",
        "Local storm god Lurgha: b_0  ",
        "Outpost: c_0  ",
        "Soviet base: c_1  ",
        "Area occupied by Soviet base: c_2  ",
        "Two natives: d_0_0 (group representative)  ",
        "",
        "Premises:  ",
        "SentBackTo(a_0_0, southernBritain, year2000BCE) ::: Ross and Ashe were sent back to southern Britain around 2000 B.C.E.  ",
        "Outpost(c_0, locationX) ::: There is an outpost at some location (locationX).  ",
        "Bombed(c_0) ::: The outpost was bombed.  ",
        "DestroyedByWrath(c_0, b_0) ::: The outpost was destroyed by the wrath of Lurgha.  ",
        "StormGod(b_0) ::: Lurgha is a storm god.  ",
        "LocalGod(b_0, locationX) ::: Lurgha is the local storm god of the outpost’s location.  ",
        "Natives(d_0_0) ::: Two natives exist.  ",
        "AccordingTo(DestroyedByWrath(c_0, b_0), d_0_0) ::: According to two natives, the outpost was destroyed by Lurgha’s wrath.  ",
        "DirectionFrom(bomber, c_0, directionD) ::: The direction whence the bomber came is known relative to the outpost.  ",
        "CluesPointTo(bomber, c_1) ::: Clues point to the general area occupied by the Soviet base.  ",
        "AreaOccupiedBy(c_2, c_1) ::: The area c_2 is occupied by the Soviet base.  ",
        "Person(a_0) ∧ Person(a_1) ∧ Person(a_2) ::: Ross, Ashe, and McNeil are persons.  ",
        "Survivor(a_2, bombingEvent) ::: McNeil is the lone survivor of the bombing.  ",
        "GoTo(a_0, c_2) ∧ GoTo(a_1, c_2) ∧ GoTo(a_2, c_2) ::: Ross, Ashe, and McNeil go to the area occupied by the Soviet base."
      ]
    },
    {
      "id": "9c05142dcf6d0705d4619800a741d7b337b21116",
      "paragraph_id": 2,
      "fols": [
        "Predicates:",
        "NearBalticSea(x) ::: x is near the Baltic Sea  ",
        "Person(x) ::: x is a person  ",
        "Ross(x) ::: x is Ross  ",
        "Ashe(x) ::: x is Ashe  ",
        "McNeil(x) ::: x is McNeil  ",
        "BuildsTradingPost(x, y) ::: x builds trading post y  ",
        "TradingPost(y) ::: y is a trading post  ",
        "BeakerTradingPost(y) ::: y is a Beaker trading post  ",
        "LearnsFromLocals(x) ::: x learns from the locals  ",
        "LandPopulatedByGhosts(l) ::: l is a land populated by ghosts  ",
        "SoutheastOf(l, loc) ::: l is southeast of loc  ",
        "NoManOfGoodSenseGoes(l) ::: no man of good sense would go to l  ",
        "SeparatedFrom(x, y, e) ::: x is separated from y in event e  ",
        "NightAttack(e) ::: e is a night attack  ",
        "GoesIntoTabooAreaAlone(x) ::: x goes into the taboo area alone  ",
        "Finds(x, y) ::: x finds y  ",
        "Ghostland(g) ::: g is the ghostland  ",
        "SovietBase(s) ::: s is a Soviet base  ",
        "CapturedBy(x, y) ::: x is captured by y  ",
        "Reds(r) ::: r are the Reds  ",
        "",
        "Premises:",
        "NearBalticSea(location) ∧ Person(ross) ∧ Ross(ross) ∧ Person(ashe) ∧ Ashe(ashe) ∧ Person(mcneil) ∧ McNeil(mcneil) ∧  ",
        "∃tp (TradingPost(tp) ∧ BeakerTradingPost(tp) ∧ BuildsTradingPost(ross, tp) ∧ BuildsTradingPost(ashe, tp) ∧ BuildsTradingPost(mcneil, tp)) ::: Ross, Ashe, and McNeil begin building a Beaker trading post near the Baltic Sea.",
        "",
        "LearnsFromLocals(ross) ∧ ∃l (LandPopulatedByGhosts(l) ∧ SoutheastOf(l, location) ∧ NoManOfGoodSenseGoes(l)) ::: They learn from the locals that to their southeast lies a land populated by ghosts, a land no man of good sense would go.",
        "",
        "∃e (NightAttack(e) ∧ SeparatedFrom(ross, {ashe, mcneil}, e)) ::: Ross gets separated from Ashe and McNeil in a night attack.",
        "",
        "GoesIntoTabooAreaAlone(ross) ∧ Finds(ross, ghostland) ∧ Ghostland(ghostland) ::: Ross must go into the taboo area alone to find them, far inside the ghostland.",
        "",
        "∃s (SovietBase(s) ∧ Finds(ross, s) ∧ CapturedBy(ross, reds) ∧ Reds(reds)) ::: Far inside the ghostland he finds the Soviet base and is captured by the Reds."
      ]
    },
    {
      "id": "9c05142dcf6d0705d4619800a741d7b337b21116",
      "paragraph_id": 3,
      "fols": [
        "Predicates:",
        "StepsOn(x, y) ::: x steps onto y  ",
        "TransportedTo(x, y) ::: x is transferred to y  ",
        "RecapturedBy(x, y) ::: x is recaptured by y  ",
        "TakenOutside(x, y) ::: x is taken outside y  ",
        "AbandonedOn(x, y) ::: x is abandoned on y  ",
        "ClimbsOutOf(x, y) ::: x climbs out of y  ",
        "FollowsTrail(x, y) ::: x follows trail y  ",
        "ComesTo(x, y) ::: x comes to y  ",
        "HalfDeadFromAbuse(x) ::: x is half dead from abuse  ",
        "Enters(x, y) ::: x enters y  ",
        "FallsThrough(x, y) ::: x falls through y  ",
        "FallsInto(x, y) ::: x falls into y  ",
        "TubFullOfGel(x, y) ::: x is a tub full of y  ",
        "GlobeHalfBuriedInIce(x) ::: x is a globe half buried in ice  ",
        "",
        "Entities:  ",
        "Ross: a_0  ",
        "BaseTransporterPlate: b_0  ",
        "SovietBase: b_1  ",
        "Crevice: b_2  ",
        "Trail: b_3  ",
        "GiantGlobe: b_4  ",
        "Panel: b_5  ",
        "Tub: b_6  ",
        "TransparentRedGel: b_7  ",
        "",
        "Premises:  ",
        "StepsOn(a_0, b_0) → TransportedTo(a_0, b_1) ::: Ross steps onto the base’s transporter plate and is transferred to a Soviet base  ",
        "RecapturedBy(a_0, Reds) ∧ TakenOutside(a_0, b_1) ∧ AbandonedOn(a_0, glacier) ::: The Reds recapture Ross, take him outside the base, and abandon him on a glacier  ",
        "ClimbsOutOf(a_0, b_2) ::: Ross climbs out of the crevice into which he was shoved  ",
        "FollowsTrail(a_0, b_3) ∧ ComesTo(a_0, b_4) ::: Ross follows the trail leading away from the Soviet base, coming to a giant globe half buried in the ice  ",
        "HalfDeadFromAbuse(a_0) ∧ Enters(a_0, b_4) ∧ FallsThrough(a_0, b_5) ∧ FallsInto(a_0, b_6) ∧ TubFullOfGel(b_6, b_7) ::: Half dead from abuse, Ross enters the globe, falls through a panel, and into a tub full of transparent-red gel  ",
        "",
        "Note: Reds and glacier are mentioned but not assigned IDs; if needed, they can be introduced as entities."
      ]
    },
    {
      "id": "9c05142dcf6d0705d4619800a741d7b337b21116",
      "paragraph_id": 4,
      "fols": [
        "Predicates:  ",
        "ConsciousnessRegained(ross) ::: Ross regains consciousness.  ",
        "WoundsHealed(ross) ::: All of Ross's wounds are healed.  ",
        "NotHungry(ross) ::: Ross is no longer hungry.  ",
        "NotThirsty(ross) ::: Ross is no longer thirsty.  ",
        "ClothingGone(ross, beakermanClothing) ::: Ross's Beakerman clothing is gone.  ",
        "OffersMechanism(x, ross, suit) ::: A mechanism offers Ross a suit.  ",
        "Suit(suit) ::: The offered item is a suit.  ",
        "SkinTight(suit) ::: The suit is skin-tight.  ",
        "FabricColor(suit, darkBlueIridescent) ::: The suit is made of an iridescent dark-blue fabric.  ",
        "CoversAllBut(suit, ross, {head, hands}) ::: The suit covers all of Ross except his head and hands.  ",
        "Explores(ross, ship) ::: Ross explores a ship.  ",
        "Ship(ship) ::: The place Ross explores is a ship.  ",
        "RecapturedBy(ross, reds) ::: Ross is recaptured by the Reds.  ",
        "Activates(ross, communicationSystem) ::: Ross activates the ship’s communication system.  ",
        "CommunicationSystem(communicationSystem) ::: The ship has a communication system.  ",
        "Faces(ross, humanoid) ::: Ross comes face to face with a humanoid.  ",
        "HostileLooking(humanoid) ::: The humanoid looks hostile.  ",
        "Humanoid(humanoid) ::: The entity Ross faces is a humanoid.  ",
        "LargeBaldHead(humanoid) ::: The humanoid has a large bald head.  ",
        "",
        "Premises:  ",
        "ConsciousnessRegained(ross) ∧ WoundsHealed(ross) ∧ NotHungry(ross) ∧ NotThirsty(ross) ∧ ClothingGone(ross, beakermanClothing) ::: When Ross regains consciousness, all his wounds are healed, he is no longer hungry or thirsty, and his Beakerman clothing is gone.  ",
        "∃s (Suit(s) ∧ SkinTight(s) ∧ FabricColor(s, darkBlueIridescent) ∧ CoversAllBut(s, ross, {head, hands}) ∧ OffersMechanism(mechanism, ross, s)) ::: A mechanism offers Ross a skin-tight suit made of iridescent dark-blue fabric that covers all but his head and hands.  ",
        "Explores(ross, ship) ∧ Ship(ship) ::: Ross explores what is clearly some kind of ship.  ",
        "RecapturedBy(ross, reds) ::: Ross is recaptured by the Reds.  ",
        "Activates(ross, communicationSystem) ∧ CommunicationSystem(communicationSystem) ::: Before being recaptured, Ross activates the ship’s communication system.  ",
        "Faces(ross, humanoid) ∧ Humanoid(humanoid) ∧ HostileLooking(humanoid) ∧ LargeBaldHead(humanoid) ::: Ross comes face to face with a hostile-looking humanoid with a large bald head."
      ]
    },
    {
      "id": "9c05142dcf6d0705d4619800a741d7b337b21116",
      "paragraph_id": 5,
      "fols": [
        "Predicates:  ",
        "AlienBaldiesAttack(village) ::: The alien Baldies attack the village.  ",
        "EscapeFrom(men, village) ::: The men escape from the village.  ",
        "MakeWayTo(men, river) ::: The men make their way to the river.  ",
        "RiverTakesTo(river, men, balticSea) ::: The river takes the men to the Baltic Sea.  ",
        "PickedUpBy(men, submarine) ::: The men are picked up by their submarine.  ",
        "",
        "Premises:  ",
        "AlienBaldiesAttack(village) → EscapeFrom(men, village) ::: If the alien Baldies attack the village then the men escape from the village just as the alien Baldies attack.  ",
        "MakeWayTo(men, river) → RiverTakesTo(river, men, balticSea) ::: If the men make their way to the river then the river takes the men to the Baltic Sea.  ",
        "RiverTakesTo(river, men, balticSea) → PickedUpBy(men, submarine) ::: If the men reach the Baltic Sea then the men will be picked up by their submarine."
      ]
    },
    {
      "id": "9c05142dcf6d0705d4619800a741d7b337b21116",
      "paragraph_id": 6,
      "fols": [
        "Predicates:  ",
        "Baldies(x) ::: x is a Baldy  ",
        "AttemptCaptureWithHypnosis(x, y) ::: x attempts to capture y with telepathic hypnosis  ",
        "KelgarriesAndMenArrive() ::: Kelgarries and his men arrive  ",
        "BaldiesFlee() ::: The Baldies flee  ",
        "LeaveSkinsuitOnBeach() ::: The alien skinsuit is left on the beach  ",
        "CannotTraceToBase() ::: The Baldies cannot trace the Americans to their base  ",
        "TakeToSubAndHome(x) ::: x is taken to the sub and home  ",
        "TellAboutTapes(x) ::: Ashe tells x about the tapes  ",
        "TapesIndicateSpaceships() ::: The tapes indicate other alien spaceships abandoned on Earth  ",
        "OperationRetrogradeInteresting() ::: Operation Retrograde is about to become much more interesting  ",
        "RossWantsAction() ::: Ross still wants to be part of the action  ",
        "Ross(a_0) ::: Ross (entity a_0)  ",
        "",
        "Premises:  ",
        "∀x ((Baldies(x) ∧ AttemptCaptureWithHypnosis(x, a_0) ∧ KelgarriesAndMenArrive()) → BaldiesFlee())  ",
        "KelgarriesAndMenArrive() ∧ LeaveSkinsuitOnBeach() → CannotTraceToBase()  ",
        "KelgarriesAndMenArrive() ∧ LeaveSkinsuitOnBeach() ∧ TakeToSubAndHome(a_0) ∧ TellAboutTapes(a_0) ∧ TapesIndicateSpaceships() ∧ OperationRetrogradeInteresting() ∧ RossWantsAction()  ",
        "",
        "Explanation:  ",
        "- If the Baldies attempt to capture Ross with telepathic hypnosis and Kelgarries and his men arrive, then the Baldies flee.  ",
        "- If Kelgarries and his men leave the alien skinsuit on the beach, then the Baldies cannot trace the Americans to their base.  ",
        "- Kelgarries and his men arrive, leave the skinsuit on the beach, take Ross to the sub and home, Ashe tells Ross about the tapes indicating other alien spaceships, Operation Retrograde becomes more interesting, and Ross still wants to be part of the action."
      ]
    },
    {
      "id": "9c05142dcf6d0705d4619800a741d7b337b21116",
      "paragraph_id": 7,
      "fols": [
        "Predicates:  ",
        "Modified(x, y) ::: x modified y  ",
        "Version(x) ::: x is a version  ",
        "Change(x, n) ::: x has n changes  ",
        "Text(x) ::: x is a text  ",
        "",
        "Premises:  ",
        "Version(a_0) ::: The 2000 version is a version  ",
        "Version(a_0) ∧ Version(a_3) ::: The 1958 version is a version (assuming a_3 for 1958 version, if not given, can omit)  ",
        "Modified(a_0, a_3) ∧ Change(a_0, 3) ::: The 2000 version modified the 1958 version by making three changes in the text  ",
        "Text(a_0) ::: The 2000 version has a text  ",
        "",
        "(Note: Since only the 2000 version (a_0) is given, and the 1958 version is mentioned but no ID assigned, we can represent it as a_3 or leave it as a constant \"version1958\". If no ID is given, we can use a constant symbol \"version1958\".)  ",
        "",
        "Alternative with constant:  ",
        "Version(a_0)  ",
        "Modified(a_0, version1958) ∧ Change(a_0, 3)  ",
        "Text(a_0)  ",
        "",
        "No further rules or premises are given."
      ]
    },
    {
      "id": "9c05142dcf6d0705d4619800a741d7b337b21116",
      "paragraph_id": 8,
      "fols": [
        "Predicates:  ",
        "ResetStoryInFirstQuarter21C(a_0) ::: The story is reset in the first quarter of the Twenty-First Century.  ",
        "ShiftActionFuturewardByGeneration(a_0) ::: The action is shifted futureward by a full generation.",
        "",
        "Premises:  ",
        "ResetStoryInFirstQuarter21C(a_0) → ShiftActionFuturewardByGeneration(a_0) ::: The reset of the story in the first quarter of the Twenty-First Century shifts the action futureward by a full generation."
      ]
    },
    {
      "id": "9c05142dcf6d0705d4619800a741d7b337b21116",
      "paragraph_id": 9,
      "fols": [
        "Predicates:",
        "Became(x, y) ::: x has become y  ",
        "Replaced(x, y) ::: x has replaced y  ",
        "",
        "Premises:",
        "Became(Reds, Russians) ::: The Reds have become the Russians  ",
        "Replaced(GreaterRussia, SovietUnion) ::: Greater Russia has replaced the Soviet Union"
      ]
    },
    {
      "id": "9c05142dcf6d0705d4619800a741d7b337b21116",
      "paragraph_id": 10,
      "fols": [
        "Predicates:  ",
        "SpaceTravel(x) ::: x is space travel  ",
        "PublicRidicule(x, y) ::: x is publicly ridiculed as y  ",
        "RidiculedAs(x, y) ::: x is ridiculed as y  ",
        "Event(x) ::: x is an event  ",
        "FirstLunarLandings(x) ::: x is the first lunar landings  ",
        "FirstAttemptsSatellites(x) ::: x is the first attempts to put satellites into orbit  ",
        "NotGoneBeyond(x, y) ::: x has not gone beyond y  ",
        "InsteadOf(p, q) ::: p happens instead of q  ",
        "",
        "Premises:  ",
        "NotGoneBeyond(b_1, a_1) ::: Space travel has not gone beyond the first lunar landings  ",
        "InsteadOf(NotGoneBeyond(b_1, a_1), NotGoneBeyond(b_1, a_2)) ::: Space travel has not gone beyond the first lunar landings instead of not going beyond the first attempts to put satellites into orbit  ",
        "InsteadOf(PublicRidicule(b_1, b_3), RidiculedAs(b_1, b_4)) ::: Space travel is publicly ridiculed as infeasible instead of being ridiculed as impossible  ",
        "",
        "Explanation:  ",
        "- The first premise states that space travel (b_1) has not gone beyond the first lunar landings (a_1).  ",
        "- The second premise expresses that this fact (not going beyond first lunar landings) occurs instead of the alternative (not going beyond first attempts to put satellites into orbit).  ",
        "- The third premise states that space travel is publicly ridiculed as infeasible (b_3) instead of being ridiculed as impossible (b_4)."
      ]
    }
  ],
  "9d9741c1e26478633f439ec30de0329a5f4c02a7": [
    {
      "id": "9d9741c1e26478633f439ec30de0329a5f4c02a7",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "TroubledTeenager(a_1) ::: Alex Manning is a troubled suburban teenager.  ",
        "MotherCommittedSuicide(a_1) ::: Alex's mother committed suicide.  ",
        "SchoolCounselorFeelsNotDealt(a_1) ::: The school counselor feels Alex has not dealt with her feelings properly.  ",
        "Friends(a_4) ::: Alex's friends.  ",
        "VisitPlace(a_0, b_1) ::: Alex and her friends visit Dante's Inferno.  ",
        "VideoArcade(b_1) ::: Dante's Inferno is a local video arcade.  ",
        "VirtualRealityGame(c_1) ::: \"Arcade\" is a new virtual reality arcade game (original CGI version).  ",
        "TestMarketedBy(c_1, a_2) ::: The game \"Arcade\" is being test marketed by a computer company CEO (Albert).  ",
        "CEO(a_2) ::: Albert is a computer company CEO.  ",
        "HandOutFreeSamples(a_2) ::: Albert is willing to hand out free samples of the home console version.  ",
        "HypeUpGame(a_2) ::: Albert hypes up the game as if his job depends on it.  ",
        "",
        "Premises:  ",
        "TroubledTeenager(a_1) ∧ MotherCommittedSuicide(a_1) ∧ SchoolCounselorFeelsNotDealt(a_1) ::: Alex Manning is a troubled suburban teenager whose mother committed suicide and whose school counselor feels she has not dealt with her feelings properly.  ",
        "VisitPlace(a_1, b_1) ∧ VisitPlace(a_4, b_1) ::: Alex and her friends visit Dante's Inferno.  ",
        "VideoArcade(b_1) ::: Dante's Inferno is a local video arcade.  ",
        "VirtualRealityGame(c_1) ∧ TestMarketedBy(c_1, a_2) ∧ CEO(a_2) ∧ HandOutFreeSamples(a_2) ∧ HypeUpGame(a_2) ::: The virtual reality arcade game \"Arcade\" is being test marketed by Albert, a computer company CEO who is willing to hand out free samples and hype up the game as if his job depends on it."
      ]
    },
    {
      "id": "9d9741c1e26478633f439ec30de0329a5f4c02a7",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "Teenager(x) ::: x is a teenager  ",
        "PlaysGame(x) ::: x plays the game  ",
        "LosesGame(x) ::: x loses the game  ",
        "ImprisonedInVR(x) ::: x is imprisoned inside the virtual reality world  ",
        "Villain(x) ::: x is the central villain of the game  ",
        "OnceLittleBoy(x) ::: x was once a little boy  ",
        "BeatenToDeathByMother(x) ::: x was beaten to death by his mother  ",
        "ComputerCompany(x) ::: x is a computer company  ",
        "UsesHumanBrainCells(x) ::: x uses human brain cells in the game's development  ",
        "GameIsDeadly ::: the game is deadly  ",
        "Programmer(x) ::: x is the game's programmer  ",
        "TriedToConvinceToHaltRelease(x, y) ::: x tried to convince y to halt the game's release  ",
        "FailedToConvince(x, y) ::: x failed to convince y  ",
        "CompanyVertigoTronics ::: the computer company Vertigo/Tronics  ",
        "",
        "Premises:  ",
        "∀x ((Teenager(x) ∧ PlaysGame(x) ∧ LosesGame(x)) → ImprisonedInVR(x))  ",
        "::: Teenagers who play the game and lose are imprisoned inside the virtual reality world  ",
        "",
        "Villain(arcade) ∧ OnceLittleBoy(arcade) ∧ BeatenToDeathByMother(arcade)  ",
        "::: The central villain \"Arcade\" was once a little boy beaten to death by his mother  ",
        "",
        "ComputerCompany(vertigoTronics)  ",
        "::: Vertigo/Tronics is the computer company  ",
        "",
        "UsesHumanBrainCells(vertigoTronics) → GameIsDeadly  ",
        "::: If the computer company uses human brain cells in the game's development then the game becomes deadly  ",
        "",
        "Programmer(programmer)  ",
        "TriedToConvinceToHaltRelease(programmer, vertigoTronics) ∧ FailedToConvince(programmer, vertigoTronics)  ",
        "::: The game's programmer tried but failed to convince Vertigo/Tronics to halt the game's release"
      ]
    },
    {
      "id": "9d9741c1e26478633f439ec30de0329a5f4c02a7",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "EnlistHelp(a_0, a_2) ::: Nick and Alex enlist the help of the game's programmer Albert.  ",
        "HeadTo(a_0, b_0) ::: Nick and Alex head to the video arcade (b_0).  ",
        "FinalShowdown(a_0, \"Arcade\") ::: Nick and Alex have a final showdown with \"Arcade\".  ",
        "FinalShowdown(a_0, \"deadly virtual world\") ::: Nick and Alex have a final showdown with the deadly virtual world.  ",
        "Release(a_1, a_4) ::: Alex is able to release her friends from a virtual prison.  ",
        "Free(a_1, a_3) ::: Alex freed the evil little boy (donor's soul).  ",
        "Taunt(a_3, a_1) ::: The evil little boy taunts Alex.  ",
        "FinalMoments(c_0) ::: The taunting happens in the final moments of the film version.  ",
        "",
        "Premises:  ",
        "EnlistHelp(a_0, a_2) ∧ HeadTo(a_0, b_0) ∧ FinalShowdown(a_0, \"Arcade\") ∧ FinalShowdown(a_0, \"deadly virtual world\") ::: Nick and Alex enlist the help of the game's programmer and head to the video arcade for a final showdown with \"Arcade\" and his deadly virtual world.  ",
        "Release(a_1, a_4) ::: Alex is able to release her friends from a virtual prison.  ",
        "Free(a_1, a_3) ∧ Taunt(a_3, a_1) ∧ FinalMoments(c_0) ::: Alex freed the evil little boy, who taunts Alex in the final moments of the film."
      ]
    },
    {
      "id": "9d9741c1e26478633f439ec30de0329a5f4c02a7",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "EndsOnHappyNote(c_1) ::: The original CGI version of the film ends on a somewhat happier note.  ",
        "WalksAway(a_1, b_1) ::: Alex walks away from Dante's Inferno.  ",
        "WalksAway(a_4, b_1) ::: Alex's friends walk away from Dante's Inferno.  ",
        "WalksAway(a_2, b_1) ::: Albert walks away from Dante's Inferno.  ",
        "LaidToRest(a_3) ::: The donor's soul is seemingly laid to rest.  ",
        "",
        "Premises:  ",
        "EndsOnHappyNote(c_1) ∧ WalksAway(a_1, b_1) ∧ WalksAway(a_4, b_1) ∧ WalksAway(a_2, b_1) ∧ LaidToRest(a_3) ::: In the original CGI version, the film ends on a somewhat happier note, with Alex, her friends, and Albert simply walking away from Dante's Inferno, and the donor's soul seemingly laid to rest."
      ]
    }
  ],
  "a62274041e562a4bfbc5f7c5c7f3aa427c178c9e": [
    {
      "id": "a62274041e562a4bfbc5f7c5c7f3aa427c178c9e",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "Invited(x, y) ::: x is invited to y  ",
        "FatherOf(x, y) ::: x is the father of y  ",
        "FianceOf(x, y) ::: x is the fiancé of y  ",
        "DinnerParty(y) ::: y is a dinner party  ",
        "HostOf(x, y) ::: x is the host of y  ",
        "Inventor(x) ::: x is an inventor  ",
        "AgeOver(x, n) ::: x is older than n years  ",
        "TryingToInvent(x, y) ::: x is trying to invent y  ",
        "WeaponOfMassDestruction(y) ::: y is a weapon of mass destruction  ",
        "LastInvention(x, y) ::: y is the last invention of x  ",
        "DidNotBringMuchCash(y) ::: y did not bring in much cash  ",
        "HouseBuiltShapeOf(x, y) ::: x’s house is built in the shape of y  ",
        "ShapeOfSternOfShip(y) ::: y is the shape of the stern of a ship  ",
        "ArrivedFrom(x, y) ::: x arrived from y  ",
        "PretendsNotToRecognize(x, y) ::: x pretends not to recognize y  ",
        "RunningOutOfMoney(x) ::: x is running out of money  ",
        "IntendsToMarry(x, y) ::: x intends to marry y  ",
        "Loves(x, y) ::: x loves y  ",
        "MetIn(x, y, z) ::: x met y in place z  ",
        "RuthlessScoundrel(x) ::: x is a ruthless scoundrel  ",
        "BumblingPrig(x) ::: x is a bumbling prig  ",
        "HusbandOf(x, y) ::: x is the husband of y  ",
        "TellsRomanticLiesTo(x, y) ::: x tells romantic lies to y  ",
        "SensibleChoice(x) ::: x is a sensible choice for marriage  ",
        "",
        "Premises:  ",
        "LastInvention(a_4, lifeboat) ∧ DidNotBringMuchCash(lifeboat) → TryingToInvent(a_4, weaponOfMassDestruction)  ",
        "Invited(a_3, dinnerParty) ∧ Invited(fatherOf(a_3), dinnerParty) ∧ Invited(fianceOf(a_3), dinnerParty) ∧ HostOf(a_4, dinnerParty)  ",
        "FatherOf(a_4, a_3)  ",
        "FianceOf(fianceOf(a_3), a_3)  ",
        "Inventor(a_4) ∧ AgeOver(a_4, 80)  ",
        "HouseBuiltShapeOf(houseOf(a_4), ShapeOfSternOfShip)  ",
        "ArrivedFrom(a_1, Australia)  ",
        "PretendsNotToRecognize(a_4, a_1)  ",
        "RunningOutOfMoney(a_4)  ",
        "IntendsToMarry(a_3, a_2)  ",
        "Loves(a_3, a_5)  ",
        "MetIn(a_3, a_5, NationalGallery)  ",
        "RuthlessScoundrel(fianceOf(a_3))  ",
        "BumblingPrig(a_4)  ",
        "HusbandOf(a_5, Hesione)  ",
        "TellsRomanticLiesTo(a_5, women)  ",
        "SensibleChoice(a_2)"
      ]
    },
    {
      "id": "a62274041e562a4bfbc5f7c5c7f3aa427c178c9e",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "Captured(a_7) ::: a_7 is captured (the burglar is captured).  ",
        "WantsNotToProsecute(a_0, a_7) ::: a_0 (they) do not want to prosecute the burglar a_7.  ",
        "InsistsTurnSelfInUnlessPaid(a_7) ::: The burglar insists he will turn himself in unless paid not to.  ",
        "OldCrewman(a_7, a_4) ::: The burglar is one of Shotover's old crewmen.  ",
        "NotRealBurglar(a_7) ::: The burglar confesses he is not a real burglar.  ",
        "DeliberatelyCapturedForCharity(a_7) ::: The burglar deliberately gets himself captured to get charitable assistance from victims.  ",
        "LamentsLostRomance(a_4) ::: Shotover laments that the younger generation have lost their romance.  ",
        "SuggestsMarriage(a_3, a_4) ::: Ellie suggests that she should marry Shotover.  ",
        "MarriedToBlackJamaicanWife(a_4) ::: Shotover says he is already married to a black Jamaican wife.  ",
        "PossiblyWifeDead(a_4) ::: It is possible that Shotover's wife is now dead.  ",
        "",
        "Premises:  ",
        "Captured(a_7) ::: A burglar is captured.  ",
        "WantsNotToProsecute(a_0, a_7) ::: They say they do not want to prosecute him.  ",
        "InsistsTurnSelfInUnlessPaid(a_7) ::: The burglar insists he will turn himself in unless they pay him not to.  ",
        "OldCrewman(a_7, a_4) ::: The burglar is one of Shotover's old crewmen.  ",
        "NotRealBurglar(a_7) ::: He confesses that he is not a real burglar.  ",
        "DeliberatelyCapturedForCharity(a_7) ::: The burglar deliberately gets himself captured to get charitable assistance from his victims.  ",
        "LamentsLostRomance(a_4) ::: Shotover laments that the younger generation have lost their romance.  ",
        "SuggestsMarriage(a_3, a_4) ::: Ellie suggests that she should marry Shotover.  ",
        "MarriedToBlackJamaicanWife(a_4) ::: Shotover says he is already married to a black Jamaican wife.  ",
        "PossiblyWifeDead(a_4) ::: It is possible that Shotover's wife is now dead.  ",
        "",
        "Rules:  ",
        "DeliberatelyCapturedForCharity(x) ↔ (Captured(x) ∧ Burglar(x) ∧ GetsCharitableAssistance(x)) ::: The burglar deliberately gets captured to get charitable assistance from the victims.  ",
        "OldCrewman(x, y) → CrewmanOf(x, y) ::: If the burglar is one of Shotover's old crewmen, then the burglar is a crewman of Shotover.  ",
        "",
        "(Note: Some predicates like Burglar(x), GetsCharitableAssistance(x), CrewmanOf(x,y) are implicit or can be introduced if needed for clarity.)"
      ]
    },
    {
      "id": "a62274041e562a4bfbc5f7c5c7f3aa427c178c9e",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "Says(x, y) ::: person x says statement y  ",
        "PutToRightIfGet(x, y) ::: statement x will be put to right if y happens  ",
        "ShouldHave(x, y) ::: group x should have object y  ",
        "Declares(x, y) ::: person x declares statement y  ",
        "HeadOf(x, y) ::: person x is head of government department y  ",
        "Announces(x, y) ::: person x announces statement y  ",
        "CannotMarryBecause(x, y) ::: person x cannot marry because of y  ",
        "WhiteWifeOf(x, y) ::: person x is white wife of y  ",
        "Predicts(x, y) ::: person x predicts statement y  ",
        "Founder(ship) ::: ship founders  ",
        "CaptainIsDrunk(ship) ::: captain of ship is drunk  ",
        "CrewAreGambling(ship) ::: crew of ship are gambling  ",
        "Enters(x, y) ::: person x enters with news y  ",
        "SwitchedOff(x, y) ::: x switches off y  ",
        "SwitchesOn(x, y) ::: x switches on y  ",
        "DemonstrateLackOfConcern(x, y) ::: x demonstrates lack of concern about y  ",
        "Lands(bomb, place) ::: bomb lands in place  ",
        "BlowsUp(bomb, object) ::: bomb blows up object  ",
        "Kills(bomb, x) ::: bomb kills x  ",
        "HidingIn(x, place) ::: x is hiding in place  ",
        "SaysEveryone(statement) ::: everyone says statement  ",
        "HopeBombsComeAgainTomorrow() ::: everyone hopes bombs come again tomorrow  ",
        "",
        "Premises:  ",
        "PutToRightIfGet(everything, d_1) ∧ Says(a_1, PutToRightIfGet(everything, d_1)) ::: Lady Utterword says everything will be put to right if they get some horses  ",
        "ShouldHave(b_1, d_1) ::: Every English family should have horses  ",
        "Declares(a_2, HeadOf(a_2, governmentDepartment)) ::: Mangan declares he is to head a government department  ",
        "Announces(a_3, CannotMarryBecause(a_3, WhiteWifeOf(a_3, a_4))) ::: Ellie announces she cannot marry Mangan as she is Shotover's white wife  ",
        "Predicts(a_4, Founder(d_2) ∧ CaptainIsDrunk(d_2) ∧ CrewAreGambling(d_2)) ::: Shotover predicts the ship of England will founder because captain is drunk and crew are gambling  ",
        "Enters(a_6, airRaidAboutToHappen) ::: Maid enters with news that an air-raid is about to happen  ",
        "SwitchedOff(unknown, d_3) ∧ SwitchesOn(a_5, d_3) ∧ DemonstrateLackOfConcern(a_5, airRaidThreat) ::: Lights are switched off, but Hector switches them back on to show lack of concern about threat  ",
        "Lands(d_4, c_2) ∧ BlowsUp(d_4, d_5) ∧ Kills(d_4, a_2) ∧ Kills(d_4, a_7) ∧ HidingIn(a_2, c_2) ∧ HidingIn(a_7, c_2) ::: A bomb lands in the garden, blowing up Shotover's dynamite store and killing Mangan and the burglar hiding there  ",
        "SaysEveryone(bored) ∧ HopeBombsComeAgainTomorrow() ::: When it is over everyone says how bored they are and hope bombs come again tomorrow"
      ]
    }
  ],
  "a9a03a147849d65e6bcaf3cc74c3dd93d0ef88d4": [
    {
      "id": "a9a03a147849d65e6bcaf3cc74c3dd93d0ef88d4",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "Narrator(a_1) ::: Montresor is the narrator of the story.  ",
        "TellsStory(a_1, a_0) ::: Montresor tells the story to a person who knows him well.  ",
        "RevengeOn(a_1, a_2) ::: Montresor took revenge on Fortunato.  ",
        "FellowNobleman(a_2) ::: Fortunato is a fellow nobleman.  ",
        "AngryOver(a_1, injuries) ::: Montresor is angry over numerous injuries.  ",
        "AngryOver(a_1, insult) ::: Montresor is angry over some unspecified insult.  ",
        "PlotsToMurder(a_1, a_2) ::: Montresor plots to murder Fortunato.  ",
        "DuringCarnival(a_1) ::: The murder plot takes place during Carnival.  ",
        "Drunk(a_2) ::: Fortunato is drunk.  ",
        "Dizzy(a_2) ::: Fortunato is dizzy.  ",
        "WearingJesterMotley(a_2) ::: Fortunato is wearing a jester's motley.  ",
        "",
        "Premises:  ",
        "Narrator(a_1) ∧ TellsStory(a_1, a_0) ∧ RevengeOn(a_1, a_2) ∧ FellowNobleman(a_2) ∧ AngryOver(a_1, injuries) ∧ AngryOver(a_1, insult) ∧ PlotsToMurder(a_1, a_2) ∧ DuringCarnival(a_1) ∧ Drunk(a_2) ∧ Dizzy(a_2) ∧ WearingJesterMotley(a_2)  ",
        "::: Montresor is the narrator who tells the story to a person who knows him well; he took revenge on Fortunato, a fellow nobleman, because of injuries and insult; he plots to murder Fortunato during Carnival when Fortunato is drunk, dizzy, and wearing a jester's motley."
      ]
    },
    {
      "id": "a9a03a147849d65e6bcaf3cc74c3dd93d0ef88d4",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "OffersWine(a_1, a_2) ::: Montresor offers wine to Fortunato.  ",
        "Inebriated(a_2) ::: Fortunato is kept inebriated.  ",
        "HasBadCough(a_2) ::: Fortunato has a bad cough.  ",
        "WarnsOfDamp(a_1, a_2) ::: Montresor warns Fortunato of the damp.  ",
        "SuggestsGoingBack(a_1) ::: Montresor suggests going back.  ",
        "InsistsContinuing(a_2) ::: Fortunato insists on continuing.  ",
        "ClaimsNotDieOfCough(a_2) ::: Fortunato claims that he shall not die of a cough.  ",
        "ClaimsCannotTell(a_1) ::: Montresor claims that Luchesi cannot tell amontillado from sherry.  ",
        "InsistsTasteAmontillado(a_2) ::: Fortunato insists on tasting the amontillado rather than Luchesi.  ",
        "",
        "Premises:  ",
        "∀x ∀y (OffersWine(x, y) → Inebriated(y)) ::: If Montresor offers wine to Fortunato, then Montresor keeps Fortunato inebriated.  ",
        "(HasBadCough(a_2) ∧ WarnsOfDamp(a_1, a_2)) → SuggestsGoingBack(a_1) ::: If Fortunato has a bad cough and Montresor warns Fortunato of the damp, then Montresor suggests going back.  ",
        "InsistsContinuing(a_2) → ClaimsNotDieOfCough(a_2) ::: If Fortunato insists on continuing, then Fortunato claims that he shall not die of a cough.  ",
        "ClaimsCannotTell(a_1) → InsistsTasteAmontillado(a_2) ::: If Montresor claims that Luchesi cannot tell amontillado from sherry, then Fortunato insists on tasting the amontillado rather than Luchesi."
      ]
    },
    {
      "id": "a9a03a147849d65e6bcaf3cc74c3dd93d0ef88d4",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "MakesGesture(a_2, grotesque, wineBottle) ::: Fortunato makes an elaborate, grotesque gesture with an upraised wine bottle.  ",
        "Recognizes(a_1, gesture) ::: Montresor recognizes the gesture.  ",
        "Mason(a_1) ::: Montresor is a mason.  ",
        "RequestsSign(a_2, a_1) ::: Fortunato requests a sign from Montresor.  ",
        "Displays(a_1, trowel) ::: Montresor displays a trowel.  ",
        "AtPlace(a_1, niche) ::: Montresor and Fortunato come to a niche.  ",
        "Says(a_1, \"amontillado is within\") ::: Montresor tells Fortunato the amontillado is within.  ",
        "Enters(a_2, niche, drunk, unsuspecting) ::: Fortunato enters the niche drunk and unsuspecting.  ",
        "Resists(a_2) ::: Fortunato resists.  ",
        "Chains(a_1, a_2, wall) ::: Montresor chains Fortunato to the wall.  ",
        "Declares(a_1, \"must leave a_2 there\") ::: Montresor declares he must leave Fortunato there.  ",
        "MustLeave(a_2) ::: Fortunato must be left there.  ",
        "",
        "Premises:  ",
        "¬Resists(a_2) ∧ Chains(a_1, a_2, wall) → MustLeave(a_2) ::: If a person does not resist when chained to the wall then the person must be left there.  ",
        "",
        "Additional facts from the context:  ",
        "MakesGesture(a_2, grotesque, wineBottle)  ",
        "¬Recognizes(a_1, gesture) → Fortunato asks \"You are not of the masons?\" (implied by dialogue)  ",
        "Mason(a_1)  ",
        "RequestsSign(a_2, a_1)  ",
        "Displays(a_1, trowel)  ",
        "AtPlace(a_1, niche)  ",
        "Says(a_1, \"amontillado is within\")  ",
        "Enters(a_2, niche, drunk, unsuspecting)  ",
        "¬Resists(a_2)  ",
        "Chains(a_1, a_2, wall)  ",
        "Declares(a_1, \"must leave a_2 there\")"
      ]
    },
    {
      "id": "a9a03a147849d65e6bcaf3cc74c3dd93d0ef88d4",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "Reveals(a_1, b_0) ::: Montresor reveals brick and mortar (b_0).  ",
        "HiddenAmong(b_0, bones) ::: Brick and mortar was previously hidden among the bones.  ",
        "WallsUp(a_1, c_1) ::: Montresor walls up the niche (c_1).  ",
        "Entombs(a_1, a_2) ::: Montresor entombs Fortunato alive.  ",
        "SoberUpFaster(a_2, a_1) ::: Fortunato sobers up faster than Montresor anticipated.  ",
        "ShakesChains(a_2, b_2) ::: Fortunato shakes the chains.  ",
        "TriesToEscape(a_2) ::: Fortunato tries to escape.  ",
        "ScreamsForHelp(a_2) ::: Fortunato screams for help.  ",
        "MocksCries(a_1, a_2) ::: Montresor mocks Fortunato’s cries.  ",
        "NobodyCanHear(a_2) ::: Nobody can hear Fortunato’s cries.  ",
        "LaughsWeakly(a_2) ::: Fortunato laughs weakly.  ",
        "PretendsJoke(a_2) ::: Fortunato tries to pretend he is the subject of a joke.  ",
        "PeopleWaitingFor(a_2) ::: People will be waiting for Fortunato.  ",
        "IncludesLadyFortunato ::: The people waiting include Lady Fortunato.  ",
        "FinishesTopmostRow(a_3) ::: The murderer finishes the topmost row of stones.  ",
        "WailsForLoveOfGod(a_2, a_1) ::: Fortunato wails “For the love of God, Montresor!”  ",
        "RepliesForLoveOfGod(a_1) ::: Montresor replies “Yes, for the love of God!”  ",
        "ListensForReply(a_1) ::: Montresor listens for a reply.  ",
        "HearsOnlyJestersBells(a_1) ::: Montresor hears only the jester’s bells ringing.  ",
        "DropsBurningTorch(a_1) ::: Montresor drops a burning torch through the gap.  ",
        "FeelsSickAtHeart(a_1) ::: Montresor claims he feels sick at heart.  ",
        "DismissesReaction(a_1) ::: Montresor dismisses this reaction.  ",
        "EffectOfDampness(a_1, catacombs) ::: The reaction is due to the dampness of the catacombs.  ",
        "",
        "Premises:  ",
        "Reveals(a_1, b_0) ∧ HiddenAmong(b_0, bones) ::: Montresor reveals brick and mortar previously hidden among the bones.  ",
        "WallsUp(a_1, c_1) ∧ Entombs(a_1, a_2) ::: Montresor walls up the niche, entombing Fortunato alive.  ",
        "SoberUpFaster(a_2, a_1) ::: Fortunato sobers up faster than Montresor anticipated.  ",
        "ShakesChains(a_2, b_2) ∧ TriesToEscape(a_2) ::: Fortunato shakes the chains trying to escape.  ",
        "ScreamsForHelp(a_2) ∧ MocksCries(a_1, a_2) ∧ NobodyCanHear(a_2) ::: Fortunato screams for help, Montresor mocks his cries, knowing nobody can hear them.  ",
        "LaughsWeakly(a_2) ∧ PretendsJoke(a_2) ∧ PeopleWaitingFor(a_2) ∧ IncludesLadyFortunato ::: Fortunato laughs weakly and pretends he is the subject of a joke and that people (including Lady Fortunato) will be waiting for him.  ",
        "FinishesTopmostRow(a_3) ::: The murderer finishes the topmost row of stones.  ",
        "WailsForLoveOfGod(a_2, a_1) ∧ RepliesForLoveOfGod(a_1) ::: Fortunato wails “For the love of God, Montresor!” and Montresor replies “Yes, for the love of God!”  ",
        "ListensForReply(a_1) ∧ HearsOnlyJestersBells(a_1) ::: Montresor listens for a reply but hears only the jester’s bells ringing.  ",
        "DropsBurningTorch(a_1) ::: Before placing the last stone, Montresor drops a burning torch through the gap.  ",
        "FeelsSickAtHeart(a_1) ∧ DismissesReaction(a_1) ∧ EffectOfDampness(a_1, catacombs) ::: Montresor claims he feels sick at heart but dismisses this as an effect of the dampness of the catacombs."
      ]
    },
    {
      "id": "a9a03a147849d65e6bcaf3cc74c3dd93d0ef88d4",
      "paragraph_id": 4,
      "fols": [
        "Predicates:  ",
        "Reveals(a_1, p) ::: Montresor reveals proposition p.  ",
        "Body(b_1) ::: b_1 is a body.  ",
        "BelongsTo(b_1, a_2) ::: b_1 (the body) belongs to Fortunato.  ",
        "HangsFrom(b_1, b_2) ::: b_1 hangs from chains b_2.  ",
        "LocatedIn(b_1, c_1) ::: b_1 is located in niche c_1.  ",
        "TimeLater(t) ::: t is a time later than some reference time.  ",
        "YearsLater(t, 50) ::: t is 50 years later.  ",
        "Murderer(a_3) ::: a_3 is the murderer.  ",
        "Concludes(a_3, s) ::: a_3 concludes statement s.  ",
        "RestInPeace(s) ::: s is the statement \"May he rest in peace\".  ",
        "",
        "Premises:  ",
        "Reveals(a_1, HangsFrom(b_1, b_2) ∧ LocatedIn(b_1, c_1) ∧ YearsLater(t, 50)) ::: Montresor reveals that 50 years later Fortunato's body still hangs from its chains in the niche.  ",
        "Body(b_1) ∧ BelongsTo(b_1, a_2) ::: b_1 is Fortunato's body.  ",
        "Murderer(a_3) ∧ Concludes(a_3, RestInPeace(\"In pace requiescat!\")) ::: The murderer concludes \"May he rest in peace!\"."
      ]
    }
  ],
  "b0ec3188818dc23370cf89bdf260b7eef55f4bab": [
    {
      "id": "b0ec3188818dc23370cf89bdf260b7eef55f4bab",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "Narrator(x) ::: x is the narrator  ",
        "HostWife(x) ::: x is the host's wife  ",
        "HostSon(x) ::: x is one of the host's two sons  ",
        "HostDaughter(x) ::: x is the host's daughter  ",
        "LearnsEnglishByDictionary(x) ::: x learns to speak English by way of a makeshift dictionary  ",
        "TeachesEnglish(y, x) ::: y teaches x the English language (unconsciously or consciously)  ",
        "Guide(x) ::: x is the narrator's guide  ",
        "Friend(x) ::: x is the narrator's friend  ",
        "MiningEngineer(x) ::: x is a mining engineer  ",
        "Explorer(x) ::: x is an explorer (the narrator)  ",
        "Visits(x, y) ::: x visits y  ",
        "ExploresChasm(x, c) ::: x explores the chasm c  ",
        "ReachesBottomSafely(x, c) ::: x reaches the bottom of chasm c safely  ",
        "RopeBreaks ::: the rope breaks  ",
        "FriendKilled ::: the friend is killed  ",
        "FindsSubterraneanWorld(x) ::: x finds a subterranean world  ",
        "BeingsResembleAngels(x) ::: beings resemble angels  ",
        "Befriends(x, y) ::: x befriends y  ",
        "GuidesAroundCity(x, y) ::: x guides y around a city  ",
        "CityReminiscentEgyptianArchitecture ::: the city is reminiscent of ancient Egyptian architecture  ",
        "HostFamilyMember(x) ::: x is a member of the host's family (wife, sons, daughter)  ",
        "ExplainsWhoTheyAre(x, y) ::: x explains to y who they are and how they function  ",
        "DaughterName(a_2, \"Zee\") ::: a_2 is named Zee  ",
        "",
        "Premises:  ",
        "Narrator(a_1)  ",
        "Friend(a_3) ∧ MiningEngineer(a_3)  ",
        "Visits(a_1, a_3)  ",
        "ExploresChasm(a_1, c_1)  ",
        "ReachesBottomSafely(a_1, c_1)  ",
        "RopeBreaks  ",
        "FriendKilled  ",
        "FindsSubterraneanWorld(a_1)  ",
        "BeingsResembleAngels(b_1)  // b_1 = hosts (the beings)  ",
        "Befriends(a_1, a_4)  // a_4 = guide (the first being met)  ",
        "GuidesAroundCity(a_4, a_1)  ",
        "CityReminiscentEgyptianArchitecture  ",
        "HostWife(a_w) ∧ HostSon(a_s1) ∧ HostSon(a_s2) ∧ HostDaughter(a_2)  ",
        "∀x ((HostWife(x) ∨ HostSon(x) ∨ HostDaughter(x)) → LearnsEnglishByDictionary(x))  ",
        "∀x ((HostWife(x) ∨ HostSon(x) ∨ HostDaughter(x)) → TeachesEnglish(a_1, x))  ",
        "ExplainsWhoTheyAre(a_4, a_1) ∧ ExplainsWhoTheyAre(a_2, a_1)"
      ]
    },
    {
      "id": "b0ec3188818dc23370cf89bdf260b7eef55f4bab",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "Hero(x) ::: x is the hero  ",
        "Discover(x, y) ::: x discovers y  ",
        "Being(x) ::: x is a being  ",
        "CallThemselves(x, y) ::: x call themselves y  ",
        "VrilYa(x) ::: x is a Vril-ya  ",
        "TelepathicAbility(x) ::: x has telepathic abilities  ",
        "ParapsychologicalAbility(x) ::: x has parapsychological abilities  ",
        "TransmitInformation(x) ::: x can transmit information  ",
        "GetRidOfPain(x) ::: x can get rid of pain  ",
        "PutOthersToSleep(x) ::: x can put others to sleep  ",
        "Narrator(x) ::: x is the narrator  ",
        "OffendedBy(x, y) ::: x is offended by y  ",
        "BetterAdaptedToLearnAbout(x, y) ::: x is better adapted to learn about y  ",
        "Guide(x) ::: x is the guide  ",
        "Magistrate(x) ::: x is a magistrate  ",
        "SonOf(x, y) ::: x is son of y  ",
        "BehaveKindlyTowards(x, y) ::: x behaves kindly towards y  ",
        "",
        "Refering expressions:  ",
        "Narrator: a_1  ",
        "Zee: a_2  ",
        "Zee's father (the guide): a_3  ",
        "Taee (son of the guide): a_4  ",
        "Vril-ya group: b_2  ",
        "",
        "Premises:  ",
        "Discover(a_0, Being(x) ∧ CallThemselves(x, b_2) ∧ VrilYa(x) ∧ TelepathicAbility(x) ∧ ParapsychologicalAbility(x) ∧ TransmitInformation(x) ∧ GetRidOfPain(x) ∧ PutOthersToSleep(x))  ",
        "OffendedBy(a_1, BetterAdaptedToLearnAbout(b_2, a_1))  ",
        "Guide(a_3) ∧ Magistrate(a_3)  ",
        "SonOf(a_4, a_3)  ",
        "BehaveKindlyTowards(a_3, a_1) ∧ BehaveKindlyTowards(a_4, a_1)  ",
        "",
        "Explanation:  ",
        "- The hero (a_0) discovers beings (x) who call themselves Vril-ya (b_2) and have telepathic and parapsychological abilities including transmitting information, getting rid of pain, and putting others to sleep.  ",
        "- The narrator (a_1) is offended by the idea that the Vril-ya are better adapted to learn about him than he is to learn about them.  ",
        "- The guide (a_3), who is a magistrate, and his son Taee (a_4) behave kindly towards the narrator (a_1)."
      ]
    },
    {
      "id": "b0ec3188818dc23370cf89bdf260b7eef55f4bab",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "Descendant(a_0, ana) ::: a_0 (Vril-ya) are descendants of the Ana civilization.  ",
        "LiveIn(ana, subterraneanCaverns) ::: Ana live in networks of subterranean caverns.  ",
        "LinkedBy(subterraneanCaverns, tunnels) ::: The caverns are linked by tunnels.  ",
        "OriginallySurfaceDwellers(ana) ::: Ana were originally surface dwellers.  ",
        "FledUnderground(ana, thousandsOfYearsAgo) ::: Ana fled underground thousands of years ago.  ",
        "EscapeFlood(ana) ::: Ana fled to escape a massive flood.  ",
        "GainedPowerByDominating(ana, harshEarthConditions) ::: Ana gained greater power by facing and dominating harsh Earth conditions.  ",
        "Housed(c_1, families12000) ::: The place where the narrator descended housed 12,000 families.  ",
        "LargeGroup(b_2) ::: Vril-ya are one of the largest groups.  ",
        "TechnologicallySupportedUtopia(b_2) ::: Vril-ya society was a technologically supported Utopia.  ",
        "Tool(b_2, vrilFluid) ::: The chief tool of Vril-ya is the fluid called Vril.  ",
        "AllPermeatingFluid(vrilFluid) ::: Vril is an all-permeating fluid.  ",
        "LatentEnergySource(vrilFluid) ::: Vril is a latent source of energy.  ",
        "SpirituallyElevatedHost(b_1) ::: Hosts are spiritually elevated.  ",
        "MasteryDependsOnHereditaryConstitution(b_1) ::: Mastery of Vril depends on hereditary constitution of hosts.  ",
        "MasteryOfVril(b_1) ::: Hosts have mastery of Vril.  ",
        "AccessExtraordinaryForce(b_1) ::: Mastery gives access to extraordinary force.  ",
        "ControlAtWill(b_1) ::: The force can be controlled at will.  ",
        "CommunicateWith(b_2, a_1) ::: Vril-ya employed Vril to communicate with narrator.  ",
        "PowerIncludes(vrilFluid, heal) ::: Powers of Vril include ability to heal.  ",
        "PowerIncludes(vrilFluid, change) ::: Powers of Vril include ability to change.  ",
        "PowerIncludes(vrilFluid, destroy) ::: Powers of Vril include ability to destroy.  ",
        "DestructivePowerStrong(vrilFluid) ::: Destructive powers of Vril are powerful.  ",
        "YoungChildren(b_2) ::: Some young Vril-ya children.  ",
        "CanDestroyEntireCities(youngChildren) ::: Young Vril-ya children can destroy entire cities if necessary.  ",
        "",
        "Premises:  ",
        "∀x (SpirituallyElevatedHost(x) → (MasteryOfVril(x) ↔ MasteryDependsOnHereditaryConstitution(x))) ::: The mastery of Vril depends on hereditary constitution of spiritually elevated hosts.  ",
        "PowerIncludes(vrilFluid, heal) ∧ PowerIncludes(vrilFluid, change) ∧ PowerIncludes(vrilFluid, destroy) ::: The powers of Vril include the ability to heal, change, and destroy beings and things.  ",
        "CanDestroyEntireCities(youngChildren) → DestructivePowerStrong(vrilFluid) ::: The destructive powers of Vril allow a few young Vril-ya children to destroy entire cities if necessary."
      ]
    },
    {
      "id": "b0ec3188818dc23370cf89bdf260b7eef55f4bab",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "Man(x) ::: x is a man (An)  ",
        "Woman(x) ::: x is a woman (Gy-ei)  ",
        "EqualRights(x, y) ::: x and y have equal rights  ",
        "AsStrongOrStronger(x, y) ::: x is as strong as or stronger than y  ",
        "MarriedForThreeYears(x, y) ::: x and y marry for three years  ",
        "FreeToRemarry(x) ::: x is free to remarry after three years of marriage  ",
        "FreeToRemainSingle(x) ::: x is free to remain single after three years of marriage  ",
        "",
        "Premises:  ",
        "∀x ∀y ((Man(x) ∧ Woman(y)) → EqualRights(x, y)) ::: Men and women have equal rights  ",
        "∀x ∀y ((Woman(x) ∧ Man(y)) → AsStrongOrStronger(x, y)) ::: Women are as strong as or stronger than men  ",
        "∀x ∀y ((Man(x) ∧ Woman(y)) → MarriedForThreeYears(x, y)) ::: Men and women marry for three years  ",
        "∀x (MarriedForThreeYears(x, y) → FreeToRemarry(x)) ::: After three years of marriage, men and women are free to remarry  ",
        "∀x (MarriedForThreeYears(x, y) → FreeToRemainSingle(x)) ::: After three years of marriage, men and women are free to remain single"
      ]
    },
    {
      "id": "b0ec3188818dc23370cf89bdf260b7eef55f4bab",
      "paragraph_id": 4,
      "fols": [
        "Predicates:  ",
        "SuperiorBeingExistence(b_1) ::: The Vril-ya's religion posits the existence of a superior being.  ",
        "DoesNotDwellOnNature(b_1) ::: The Vril-ya's religion does not dwell on the nature of the superior being.  ",
        "BelieveInPermanenceOfLife(b_2) ::: The Vril-ya believe in the permanence of life.  ",
        "LifeNotDestroyedButChangesForm(b_2) ::: According to the Vril-ya, life is not destroyed but merely changes form.  ",
        "",
        "Premises:  ",
        "SuperiorBeingExistence(b_1) ∧ DoesNotDwellOnNature(b_1) ::: Their religion posits the existence of a superior being but does not dwell on his nature.  ",
        "BelieveInPermanenceOfLife(b_2) ∧ LifeNotDestroyedButChangesForm(b_2) ::: The Vril-ya believe in the permanence of life, which according to them is not destroyed but merely changes form."
      ]
    },
    {
      "id": "b0ec3188818dc23370cf89bdf260b7eef55f4bab",
      "paragraph_id": 5,
      "fols": [
        "Predicates:  ",
        "AdoptsAttire(a_1, b_1) ::: The narrator adopts the attire of his hosts.  ",
        "AdoptsCustoms(a_1, b_1) ::: The narrator adopts the customs of his hosts.  ",
        "FallsInLove(a_2, a_1) ::: Zee falls in love with the narrator.  ",
        "Tells(a_2, a_3, a_1) ::: Zee tells her father about the narrator.  ",
        "OrdersToKill(a_3, a_4, a_1) ::: Zee's father orders Taee to kill the narrator.  ",
        "ConspiresAgainst(a_4, a_3) ::: Taee conspires against the order of Zee's father.  ",
        "ConspiresAgainst(a_2, a_3) ::: Zee conspires against the order of her father.  ",
        "LeadsThrough(a_2, a_1, c_1) ::: Zee leads the narrator through the chasm.  ",
        "Warns(a_1, b_2) ::: The narrator warns the Vril-ya.  ",
        "RunsOutOfHabitableSpace(b_2, c_3) ::: The Vril-ya run out of habitable space underground.  ",
        "ClaimsSurface(b_2, c_2) ::: The Vril-ya claim the surface of the Earth.  ",
        "DestroysIfNecessary(b_2, d_4) ::: The Vril-ya will destroy mankind if necessary.  ",
        "",
        "Premises:  ",
        "AdoptsAttire(a_1, b_1) ∧ AdoptsCustoms(a_1, b_1) ::: The narrator adopts the attire and customs of his hosts.  ",
        "FallsInLove(a_2, a_1) ∧ Tells(a_2, a_3, a_1) ∧ OrdersToKill(a_3, a_4, a_1) ::: Zee falls in love with the narrator, tells her father, who orders Taee to kill him.  ",
        "ConspiresAgainst(a_4, a_3) ∧ ConspiresAgainst(a_2, a_3) ∧ LeadsThrough(a_2, a_1, c_1) ::: Taee and Zee conspire against the order, and Zee leads the narrator through the chasm.  ",
        "Warns(a_1, b_2) ::: The narrator warns the Vril-ya about future events.  ",
        "∀x ((RunsOutOfHabitableSpace(b_2, c_3)) → ClaimsSurface(b_2, c_2)) ::: If the Vril-ya run out of habitable space underground, then they will claim the surface of the Earth.  ",
        "∀x ((ClaimsSurface(b_2, c_2)) → DestroysIfNecessary(b_2, d_4)) ::: If the Vril-ya claim the surface of the Earth, then they will destroy mankind if necessary."
      ]
    }
  ],
  "bf445b279454ae52287f19febc74f258f34c9134": [
    {
      "id": "bf445b279454ae52287f19febc74f258f34c9134",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "Decline(b_0) ::: Halsey's Planet is in decline.  ",
        "GenerationShip(x) ::: x is a generation ship.  ",
        "ArrivedAt(x, b_0) ::: generation ship x arrived at Halsey's Planet.  ",
        "FailedToContact(x, n) ::: generation ship x failed to contact n other planets.  ",
        "SentTo(a_1, Mission) ::: Ross is sent on a mission.  ",
        "Ship(y) ::: y is a ship.  ",
        "GivenTo(y, a_1) ::: ship y is given to Ross.  ",
        "CanTravelInstantly(y) ::: ship y can make the trip from colony to colony almost instantaneously.  ",
        "TechnologyUsedIn(y, d_2) ::: ship y uses FTL drive technology.  ",
        "KeptSecret(d_2) ::: the FTL drive technology is kept secret.  ",
        "CouldCause(d_2, InterstellarWar) ::: the FTL drive technology could cause interstellar war.  ",
        "IsolatedPopulation(p) ::: p is an isolated population.  ",
        "AffectedBy(p, d_0) ::: population p is affected by concept d_0.  ",
        "GeneticDrift(d_0) ::: genetic drift is a concept.  ",
        "CausesDecline(d_0, p) ::: genetic drift causes decline in population p.  ",
        "",
        "Premises:  ",
        "Decline(b_0) ::: Halsey's Planet is in decline.  ",
        "∃x (GenerationShip(x) ∧ ArrivedAt(x, b_0) ∧ FailedToContact(x, 6)) ::: A generation ship arrived at Halsey's Planet having failed to contact six other planets.  ",
        "SentTo(a_1, DiscoverState) ::: Ross is sent to discover the state of the interstellar colonies.  ",
        "∃y (Ship(y) ∧ GivenTo(y, a_1) ∧ CanTravelInstantly(y) ∧ TechnologyUsedIn(y, d_2)) ::: Ross is given a ship that can travel almost instantaneously and uses FTL drive technology.  ",
        "KeptSecret(d_2) ∧ CouldCause(d_2, InterstellarWar) ::: The FTL drive technology is kept secret because it could cause interstellar war.  ",
        "∀p (IsolatedPopulation(p) → AffectedBy(p, d_0)) ::: Isolated populations are affected by genetic drift.  ",
        "GeneticDrift(d_0) ∧ ∀p (AffectedBy(p, d_0) → CausesDecline(d_0, p)) ::: Genetic drift causes decline in isolated populations."
      ]
    },
    {
      "id": "bf445b279454ae52287f19febc74f258f34c9134",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "FirstPlanet(x) ::: x is the first planet he visits  ",
        "Destroyed(x) ::: x is completely destroyed  ",
        "SecondPlanet(x) ::: x is the second planet he visits  ",
        "GerontocraticTravestyOfDemocracy(x) ::: x is a gerontocratic travesty of a democracy  ",
        "ThirdPlanet(x) ::: x is the third planet he visits  ",
        "RepressiveMatriarchy(x) ::: x is a repressive matriarchy  ",
        "Companion(x) ::: x is a companion of the person  ",
        "Helena(a_2) ::: Helena is a person (a_2)  ",
        "Bernie(a_3) ::: Bernie is a person (a_3)  ",
        "PicksUp(a_1, x) ::: Ross (a_1) picks up x  ",
        "",
        "Premises:  ",
        "FirstPlanet(b_2) ∧ Destroyed(b_2) ::: The first planet he visits (b_2) has been completely destroyed  ",
        "SecondPlanet(b_3) ∧ GerontocraticTravestyOfDemocracy(b_3) ::: The second planet he visits (b_3) is a gerontocratic travesty of a democracy  ",
        "ThirdPlanet(b_4) ∧ RepressiveMatriarchy(b_4) ::: The third planet he visits (b_4) is a repressive matriarchy  ",
        "PicksUp(a_1, a_2) ∧ Companion(a_2) ::: Ross picks up Helena, who is a companion  ",
        "PicksUp(a_1, a_3) ∧ Companion(a_3) ::: Ross picks up Bernie, who is a companion"
      ]
    },
    {
      "id": "bf445b279454ae52287f19febc74f258f34c9134",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "Planet(x) ::: x is a planet  ",
        "VisitThey(x) ::: They visit planet x next  ",
        "SupposedToBe(x, y) ::: Planet x is supposed to be planet y  ",
        "DifferentStats(x, y) ::: Planet x has different planetary statistics from planet y  ",
        "PopulatedBy(x, r) ::: Planet x is populated by race r  ",
        "Race(r) ::: r is a race of people  ",
        "AlmostIdentical(r) ::: Race r consists of almost-identical people  ",
        "NameOfPlanet(x, n) ::: Planet x is also called n  ",
        "RuledBy(x, g) ::: Planet x is ruled by group g  ",
        "Group(g) ::: g is a group  ",
        "CultOfConformity(g) ::: Group g is a cult of total conformity  ",
        "IncludesAreaOfLife(g, l) ::: Group g enforces conformity in area of life l  ",
        "GeneticPhenotype(l) ::: l is genetic phenotype  ",
        "Discovers(p, e) ::: Person p discovers equation e  ",
        "Equation(e) ::: e is an equation  ",
        "MeaningSought(e, p) ::: Person p has been seeking the meaning of equation e  ",
        "RefersTo(e, c) ::: Equation e refers to concept c  ",
        "Concept(c) ::: c is a concept  ",
        "LossOfUnfixedGenes(c) ::: Concept c is loss of unfixed genes in a small population  ",
        "Explains(c, d) ::: Concept c explains degeneracy d  ",
        "DegeneracyOfPlanets(d) ::: d is degeneracy of planets  ",
        "Learns(p, f) ::: Person p learns fact f  ",
        "Worships(p, e) ::: Person p worships equation e  ",
        "Joins(p, b) ::: Person p joins band b  ",
        "Band(b) ::: b is a band  ",
        "LittleBand(b) ::: b is a little band  ",
        "",
        "Premises:  ",
        "VisitThey(b_0) ∧ SupposedToBe(b_0, b_1) ∧ ¬(b_0 = b_1) ::: The next planet they visit is supposed to be Earth, but it turns out not to be  ",
        "DifferentStats(b_0, b_1) ::: The planet's planetary statistics differ from Earth's  ",
        "PopulatedBy(b_0, c_0) ∧ Race(c_0) ∧ AlmostIdentical(c_0) ::: The planet is populated by a race of almost-identical people called Joneses  ",
        "NameOfPlanet(b_0, c_0) ::: The planet is also called Jones  ",
        "RuledBy(b_0, c_1) ∧ Group(c_1) ∧ CultOfConformity(c_1) ∧ IncludesAreaOfLife(c_1, geneticPhenotype) ::: The planet is ruled by a cult of total conformity in all areas of life, including genetic phenotype  ",
        "Discovers(a_1, d_0) ∧ Equation(d_0) ∧ MeaningSought(d_0, a_1) ∧ RefersTo(d_0, d_3) ∧ LossOfUnfixedGenes(d_3) ::: Ross discovers that the equation whose meaning he has been seeking refers to the loss of unfixed genes in a small population  ",
        "Explains(d_3, c_1) ∧ DegeneracyOfPlanets(c_1) ::: This explains the degeneracy of the planets he has visited  ",
        "Learns(a_2, Worships(a_2, d_0)) ∧ Joins(a_2, b_2) ∧ Band(b_2) ∧ LittleBand(b_2) ::: Dr. Sam Jones learns that he has been worshiping an equation on genetic drift, and joins the little band  ",
        "",
        "Rules:  ",
        "∀p ∀c ((LossOfUnfixedGenes(c) ∧ SmallPopulation(p)) → DegeneracyOfPlanets(c)) ::: The loss of unfixed genes in a small population causes degeneracy of planets  ",
        "",
        "(Note: SmallPopulation predicate is implied by context but not explicitly given in refering expressions; can be omitted or assumed.)"
      ]
    },
    {
      "id": "bf445b279454ae52287f19febc74f258f34c9134",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "SortOutProblem(a_0, d_1) ::: They sort out their navigational problem.  ",
        "MakeItTo(a_0, b_1) ::: They finally make it to Earth.  ",
        "CivilisationOf(b_1, c_3) ::: Earth is a civilisation of morons.  ",
        "ProtectedBy(c_3, c_2) ::: Morons are protected by a small minority of hidden geniuses.  ",
        "LikeSituation(b_1, \"The Marching Morons\") ::: The situation on Earth is like \"The Marching Morons\".  ",
        "Realises(a_1, ProblemWith(c_1)) ::: Ross realises the problem with all the degenerate worlds.  ",
        "ProblemIs(ProblemWith(c_1), d_3) ::: The problem with all the degenerate worlds is their isolation.  ",
        "Has(a_1, d_2) ::: Ross has the FTL drive.  ",
        "SetsAbout(a_1, RectifyProblem) ::: Ross sets about rectifying the problem.  ",
        "BringsTogether(a_1, c_1) ::: Ross brings the degenerate worlds together.  ",
        "",
        "Premises:  ",
        "∀x (ProblemWith(c_1) = d_3) ::: The problem with all the degenerate worlds is their isolation.  ",
        "SortOutProblem(a_0, d_1) ∧ MakeItTo(a_0, b_1) ∧ CivilisationOf(b_1, c_3) ∧ ProtectedBy(c_3, c_2) ∧ LikeSituation(b_1, \"The Marching Morons\") ::: They solve their navigational problem and reach Earth, which is a civilisation of morons protected by hidden geniuses, like in \"The Marching Morons\".  ",
        "Realises(a_1, ProblemWith(c_1)) ∧ ProblemIs(ProblemWith(c_1), d_3) ∧ Has(a_1, d_2) → SetsAbout(a_1, RectifyProblem) ∧ BringsTogether(a_1, c_1) ::: Ross realises the problem of isolation of degenerate worlds, has the FTL drive, and sets about rectifying the problem by bringing them together."
      ]
    }
  ],
  "c1325899c4266174c4c64fd055834b07dc28e49c": [
    {
      "id": "c1325899c4266174c4c64fd055834b07dc28e49c",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "Leads(x, y) ::: x leads y (where y can be a group or individual)  ",
        "ReuniteAt(x, y, z) ::: x reunites with y at place z  ",
        "Defeated(x) ::: x is defeated  ",
        "Retrieves(x, y) ::: x retrieves y  ",
        "Palantir(y) ::: y is a palantír (seeing-stone)  ",
        "StealsGlance(x, y) ::: x steals a glance into y  ",
        "MentalAttack(x, y) ::: x suffers a mental attack from y  ",
        "Deduces(x, p) ::: x deduces proposition p  ",
        "WillAttack(x, y) ::: x will attack y  ",
        "RidesTo(x, y) ::: x rides to y  ",
        "Warns(x, y) ::: x warns y  ",
        "TakesWith(x, y, z) ::: x takes y with x to place z  ",
        "ThinksSauronIsRingBearer(x) ::: Sauron thinks x is the ring bearer  ",
        "",
        "Entities:  ",
        "a_7 = Gandalf  ",
        "a_1 = Aragorn  ",
        "a_10 = Legolas (not given explicitly but implied in group led by Gandalf)  ",
        "a_11 = Gimli (same as above)  ",
        "a_12 = King Théoden (same as above)  ",
        "a_13 = Merry (reunited at Isengard)  ",
        "a_14 = Pippin (reunited at Isengard, steals glance, mental attack, taken by Gandalf)  ",
        "b_Isengard = Isengard  ",
        "b_MinasTirith = Minas Tirith  ",
        "c_Saruman = Saruman  ",
        "c_Sauron = Sauron  ",
        "c_Palantir = Saruman's palantír (the seeing-stone)  ",
        "",
        "Premises:  ",
        "Leads(a_7, {a_1, a_10, a_11, a_12}) ::: Gandalf leads Aragorn, Legolas, Gimli, and King Théoden  ",
        "ReuniteAt({a_7, a_1, a_10, a_11, a_12}, {a_13, a_14}, b_Isengard) ::: They reunite with Merry and Pippin at Isengard  ",
        "Defeated(c_Saruman) ::: Saruman is defeated  ",
        "Retrieves(a_7, c_Palantir) ::: Gandalf retrieves Saruman's palantír  ",
        "Palantir(c_Palantir) ::: c_Palantir is a palantír  ",
        "StealsGlance(a_14, c_Palantir) ::: Pippin steals a glance into the palantír  ",
        "MentalAttack(a_14, c_Sauron) ::: Pippin suffers a mental attack from Sauron  ",
        "Deduces(a_7, WillAttack(c_Sauron, b_MinasTirith)) ::: Gandalf deduces Sauron will attack Minas Tirith  ",
        "RidesTo(a_7, b_MinasTirith) ::: Gandalf rides to Minas Tirith  ",
        "Warns(a_7, b_MinasTirith) ::: Gandalf warns Minas Tirith  ",
        "ThinksSauronIsRingBearer(a_14) ::: Sauron thinks Pippin is the ring bearer  ",
        "",
        "Rules:  ",
        "∀x (ThinksSauronIsRingBearer(x) → TakesWith(a_7, x, b_MinasTirith)) ::: If Sauron thinks a person is the ring bearer, then Gandalf takes that person with him to Minas Tirith  ",
        "∀y (WillAttack(c_Sauron, y) → RidesTo(a_7, y) ∧ Warns(a_7, y)) ::: If Sauron will attack a city, then Gandalf rides to warn the city"
      ]
    },
    {
      "id": "c1325899c4266174c4c64fd055834b07dc28e49c",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "LedBy(x, y, z) ::: x and y are led by z to place z  ",
        "Witness(x, y, z) ::: x and y witness event z  ",
        "Leads(w, o, a) ::: w leads orcs o to attack a  ",
        "DriveFrom(o, a, p) ::: orcs o drive person p and his men from place a  ",
        "UrgeToClimb(g, t, s) ::: g urges t and s to climb stair s  ",
        "OverhearPlot(s, g, r) ::: s overhears g's plot to regain ring r  ",
        "KeepSuspiciousEye(s, g) ::: s keeps a suspicious eye on g  ",
        "FollowInstructions(p, g) ::: p follows g's instructions  ",
        "LightBeacon(p, b, pl) ::: p lights beacon b in place pl secretly  ",
        "SignalTo(b, t) ::: beacon b signals t to assemble  ",
        "Assemble(t, r) ::: t assembles r to come to aid  ",
        "",
        "Premises:  ",
        "LedBy(frodo, sam, gollum) ∧ To(gollum, minasMorgul) ::: Frodo and Sam are led by Gollum to Minas Morgul  ",
        "Witness(frodo, sam, witchKingLeadsOrcs) ::: Frodo and Sam witness the Witch-king leading an Orc army  ",
        "Leads(witchKing, orcArmy, denethorSonFaramir) ::: Witch-king leads Orc army to drive Denethor's son Faramir and men from Osgiliath  ",
        "UrgeToClimb(gollum, frodoSamGollum, secretStair) ::: Gollum urges the three to climb the secret stair into Mordor  ",
        "OverhearPlot(sam, gollum, ring) ::: Sam overhears Gollum's plot to regain the Ring  ",
        "KeepSuspiciousEye(sam, gollum) ::: Sam keeps a suspicious eye on Gollum  ",
        "FollowInstructions(pippin, gandalf) ::: Pippin follows Gandalf's instructions  ",
        "LightBeacon(pippin, beacon, gondor) ::: Pippin lights the beacon secretly in Gondor  ",
        "SignalTo(beacon, theoden) ::: The beacon signals Théoden  ",
        "Assemble(theoden, rohirrim) ::: Théoden assembles the Rohirrim to come to Gondor's aid  ",
        "∀x (LitBeacon(x, gondor) → Assemble(theoden, rohirrim)) ::: If the beacon is lit in Gondor, Théoden assembles the Rohirrim to aid Gondor"
      ]
    },
    {
      "id": "c1325899c4266174c4c64fd055834b07dc28e49c",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "Helping(x, y) ::: x is helping y  ",
        "GatherForces(x) ::: x is gathering forces  ",
        "Approach(x, y) ::: x approaches y  ",
        "Says(x, y, z) ::: x says to y that z  ",
        "Dying(x) ::: x is dying  ",
        "SeesVision(x, y) ::: x sees a vision of y  ",
        "RefuseToLeave(x, y) ::: x refuses to leave y  ",
        "Gives(x, y, z) ::: x gives y to z  ",
        "Sword(x) ::: x is a sword  ",
        "Reforged(x) ::: x is reforged  ",
        "ReclaimBirthright(x) ::: x reclaims birthright  ",
        "GainReinforcements(x, y) ::: x gains reinforcements from y  ",
        "JoinedBy(x, y) ::: x is joined by y  ",
        "TravelsTo(x, y) ::: x travels to y  ",
        "Recruit(x, y) ::: x recruits y  ",
        "PromiseRelease(x, y, z) ::: x promises to release y from z  ",
        "FulfilsOath(x, y) ::: x fulfils oath to y  ",
        "ReleasesFromCurse(x, y) ::: x releases y from curse  ",
        "OathToIsildur(x) ::: x is an oath to Isildur  ",
        "ArmyOfDead(x) ::: x is the Army of the Dead  ",
        "DeadMenOfDunharrow(x) ::: x is the Dead Men of Dunharrow  ",
        "PathsOfDead(x) ::: x is the Paths of the Dead  ",
        "",
        "Premises:  ",
        "Helping(aragorn, theoden) ∧ GatherForces(theoden) ::: Aragorn is helping Théoden gather his forces.  ",
        "Approach(elrond, aragorn) ∧ Says(elrond, aragorn, Dying(arwen)) ::: Elrond approaches Aragorn and says Arwen is dying.  ",
        "SeesVision(arwen, sonOfArwen) ∧ RefuseToLeave(arwen, middleEarth) ::: After seeing a vision of her son, Arwen refused to leave Middle Earth.  ",
        "Gives(elrond, anduril, aragorn) ∧ Sword(anduril) ∧ Reforged(anduril) ::: Elrond gives Aragorn the sword Andúril, which is Isildur's sword Narsil reforged.  ",
        "ReclaimBirthright(aragorn) ∧ GainReinforcements(aragorn, deadMenOfDunharrow) ::: Aragorn can reclaim his birthright while gaining reinforcements from the Dead Men of Dunharrow.  ",
        "JoinedBy(aragorn, legolas) ∧ JoinedBy(aragorn, gimli) ::: Aragorn is joined by Legolas and Gimli.  ",
        "TravelsTo(aragorn, pathsOfDead) ::: Aragorn travels to the Paths of the Dead.  ",
        "Recruit(aragorn, armyOfDead) ::: Aragorn recruits the Army of the Dead.  ",
        "PromiseRelease(aragorn, armyOfDead, curse) ::: Aragorn promises to release the Army of the Dead from their curse once they fulfil their oath to Isildur.  ",
        "∀x ((ArmyOfDead(x) ∧ FulfilsOath(x, isildur)) → ReleasesFromCurse(aragorn, x)) ::: If the Army of the Dead fulfils the oath to Isildur then Aragorn releases the Army of the Dead from the curse."
      ]
    },
    {
      "id": "c1325899c4266174c4c64fd055834b07dc28e49c",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "GravelyWounded(a_0) ::: Faramir is gravely wounded.  ",
        "FutileEffort(a_0, b_0) ::: Faramir made a futile effort to retake Osgiliath.  ",
        "BelievesDead(a_1, a_0) ::: Denethor believes his son (Faramir) to be dead.  ",
        "FallsIntoMadness(a_1) ::: Denethor falls into madness.  ",
        "Commands(a_7, b_1) ::: Gandalf commands the city defences of Gondor.  ",
        "LeadsArmy(gothmog, orcArmy) ::: Gothmog leads the Orc army.  ",
        "ForcesEnterCity(orcArmy, b_1) ::: Orc army forces their way into the city of Gondor.  ",
        "TriesToKill(a_1, a_0) ::: Denethor tries to kill Faramir.  ",
        "TriesToKill(a_1, a_1) ::: Denethor tries to kill himself.  ",
        "Pyre(b_1) ::: The pyre is in Gondor (Minas Tirith).  ",
        "Alerts(a_5, a_7) ::: Pippin alerts Gandalf.  ",
        "Save(a_7, a_0) ::: Gandalf saves Faramir.  ",
        "LeapsToDeath(a_1, b_1) ::: Denethor leaps to his death from Minas Tirith.  ",
        "Arrives(theoden, rohirrim) ::: Théoden and the Rohirrim arrive.  ",
        "Advantage(rohirrim, battlePelennor) ::: Rohirrim initially have the advantage at the Battle of Pelennor Fields.  ",
        "Overwhelmed(rohirrim, haradrim) ::: Rohirrim are eventually overwhelmed by Haradrim.  ",
        "Rides(oliphaunt, haradrim) ::: Haradrim ride Oliphaunts.  ",
        "Wounds(witchKing, theoden) ::: Witch-king mortally wounds Théoden.  ",
        "PosesAs(eowyn, maleSoldier) ::: Éowyn poses as a male soldier.  ",
        "Battles(eowyn, witchKing) ::: Éowyn battles the Witch-king.  ",
        "Slays(eowyn, witchKing) ::: Éowyn slays the Witch-king.  ",
        "Helps(merry, eowyn) ::: Merry helps Éowyn.  ",
        "Dies(theoden) ::: Théoden dies of his wounds.  ",
        "Arrives(a_1, armyDead) ::: Aragorn arrives with the Army of the Dead.  ",
        "Overcomes(armyDead, orcArmy) ::: Army of the Dead overcomes the Orcs.  ",
        "WinsBattle(armyDead) ::: Army of the Dead wins the battle.  ",
        "ReleasedFromCurse(dead) ::: The Dead are released from their curse.  ",
        "TendedTo(wounded) ::: The wounded are tended to.  ",
        "Meets(eowyn, a_0) ::: Éowyn meets Faramir.  ",
        "ComfortEachOther(eowyn, a_0) ::: Éowyn and Faramir comfort each other.  ",
        "LeadsCaptains(a_1, captainsMen, blackGate) ::: Aragorn and captains of Men lead all who can march upon the Black Gate.  ",
        "CanMarch(all) ::: All who can march.  ",
        "FrodoGetsToMountDoom(a_3) ::: Frodo can get to Mount Doom.  ",
        "SamGetsToMountDoom(a_4) ::: Sam can get to Mount Doom.  ",
        "",
        "Premises:  ",
        "GravelyWounded(a_0) ∧ FutileEffort(a_0, b_0) ::: Faramir is gravely wounded after a futile effort to retake Osgiliath.  ",
        "BelievesDead(a_1, a_0) → FallsIntoMadness(a_1) ::: If Denethor believes his son to be dead, then Denethor falls into madness.  ",
        "Commands(a_7, b_1) ∧ LeadsArmy(gothmog, orcArmy) ∧ ForcesEnterCity(orcArmy, b_1) ::: Gandalf commands the city defences against the Orc army led by Gothmog, which forces entry into the city.  ",
        "TriesToKill(a_1, a_0) ∧ TriesToKill(a_1, a_1) ∧ Pyre(b_1) ::: Denethor tries to kill himself and Faramir on a pyre in Minas Tirith.  ",
        "Alerts(a_5, a_7) ∧ Save(a_7, a_0) ::: Pippin alerts Gandalf and they save Faramir.  ",
        "LeapsToDeath(a_1, b_1) ∧ Arrives(theoden, rohirrim) ::: Denethor leaps to his death from Minas Tirith just before Théoden and the Rohirrim arrive.  ",
        "Advantage(rohirrim, battle"
      ]
    },
    {
      "id": "c1325899c4266174c4c64fd055834b07dc28e49c",
      "paragraph_id": 4,
      "fols": [
        "Predicates:  ",
        "ParalysedBy(frodo, shelob) ::: Frodo is paralysed and bound by Shelob.  ",
        "DrivesAway(sam, shelob) ::: Sam drives Shelob away.  ",
        "BelievesDead(sam, frodo) ::: Sam believes Frodo to be dead.  ",
        "TakesForSafekeeping(sam, sting) ::: Sam takes Frodo's sword Sting for safekeeping.  ",
        "TakesForSafekeeping(sam, oneRing) ::: Sam takes The One Ring for safekeeping.  ",
        "TakesBody(orcs, frodo, cirithUngol) ::: Orcs take Frodo's body to Cirith Ungol.  ",
        "RealisesAlive(sam, frodo) ::: Sam realises Frodo is still alive.  ",
        "GivesChase(sam, orcs) ::: Sam gives chase to the Orcs.  ",
        "Rescues(sam, frodo, orcs) ::: Sam rescues Frodo from the Orcs.  ",
        "Returns(sam, oneRing, frodo) ::: Sam returns The One Ring to Frodo.  ",
        "",
        "Premises:  ",
        "ParalysedBy(a_3, shelob) → DrivesAway(a_4, shelob) ::: If Frodo is paralysed and bound by Shelob then Sam drives Shelob away.  ",
        "BelievesDead(a_4, a_3) → (TakesForSafekeeping(a_4, sting) ∧ TakesForSafekeeping(a_4, oneRing)) ::: If Sam believes Frodo to be dead then Sam takes Frodo's sword Sting and The One Ring for safekeeping.  ",
        "(TakesBody(orcs, a_3, cirithUngol) ∧ RealisesAlive(a_4, a_3)) → GivesChase(a_4, orcs) ::: If Orcs take Frodo's body to Cirith Ungol and Sam realises Frodo is still alive then Sam gives chase to the Orcs.  ",
        "Rescues(a_4, a_3, orcs) → Returns(a_4, oneRing, a_3) ::: If Sam rescues Frodo from the Orcs then Sam returns The One Ring to Frodo."
      ]
    },
    {
      "id": "c1325899c4266174c4c64fd055834b07dc28e49c",
      "paragraph_id": 5,
      "fols": [
        "Predicates:  ",
        "Army(x) ::: x is an army  ",
        "DrawOut(x, y) ::: x draws out y (forces)  ",
        "Forces(x) ::: x is a military force  ",
        "Empty(x, y) ::: x empties y (a place)  ",
        "Exhausted(x) ::: x is exhausted  ",
        "StaggerTo(x, y) ::: x staggers to y (a place)  ",
        "Attack(x, y) ::: x attacks y  ",
        "SuccumbTo(x, y) ::: x succumbs to y (an influence or power)  ",
        "ClaimAsOwn(x, y) ::: x claims y as his own  ",
        "RefuseToDestroy(x, y) ::: x refuses to destroy y  ",
        "BiteOff(x, y, z) ::: x bites off z (body part) of y  ",
        "FightBack(x, y) ::: x fights back against y  ",
        "KnockInto(x, y, z) ::: x knocks y into z (a place)  ",
        "Hold(x, y) ::: x holds y (an object)  ",
        "Save(x, y) ::: x saves y  ",
        "Destroy(x) ::: x is destroyed  ",
        "CauseChainReaction(x) ::: x causes a chain reaction  ",
        "Consume(x, y) ::: x consumes y (a place)  ",
        "Topple(x, y) ::: x topples y (a place)  ",
        "KillMost(x, y) ::: x kills most of y (a group)  ",
        "GroundCrumblesBeneath(x, y) ::: the ground crumbles beneath y in x (a place)  ",
        "FlyInWith(x, y, z) ::: x flies in with y (means of transport) to z (a place)  ",
        "AwakenLaterIn(x, y) ::: x awakens later in y (a place)  ",
        "ReuniteWith(x, y) ::: x reunites with y  ",
        "",
        "Entities:  ",
        "a_1 = Aragorn  ",
        "a_3 = Frodo  ",
        "a_4 = Sam  ",
        "a_7 = Gandalf  ",
        "a_9 = Hobbits  ",
        "b_0 = Mordor  ",
        "b_5 = Mount Doom (not explicitly given an ID, but needed; we can assign b_5)  ",
        "b_6 = Barad-dûr (similarly assigned)  ",
        "c_2 = Ring (assigned)  ",
        "c_3 = volcano (the place where the Ring was made; assigned)  ",
        "Orcs (not assigned, assign a_10)  ",
        "",
        "Premises:  ",
        "Army(AragornArmy)  ",
        "DrawOut(AragornArmy, SauronForces)  ",
        "Empty(AragornArmy, Mordor)  ",
        "Exhausted(Hobbits)  ",
        "StaggerTo(Hobbits, MountDoom)  ",
        "Attack(Gollum, Hobbits)  ",
        "SuccumbTo(Frodo, Ring)  ",
        "ClaimAsOwn(Frodo, Ring)  ",
        "RefuseToDestroy(Frodo, Ring)  ",
        "BiteOff(Gollum, Frodo, FrodoFinger)  ",
        "FightBack(Frodo, Gollum)  ",
        "KnockInto(Frodo, GollumWithRing, Volcano)  ",
        "Hold(Frodo, Ring)  ",
        "Save(Sam, Frodo)  ",
        "Destroy(Ring)  ",
        "Destroy(Sauron)  ",
        "CauseChainReaction(Destroy(Ring) ∧ Destroy(Sauron))  ",
        "Consume(ChainReaction, Mountain)  ",
        "Topple(ChainReaction, BaradDur)  ",
        "KillMost(ChainReaction, Orcs)  ",
        "GroundCrumblesBeneath(ChainReaction, Orcs)  ",
        "FlyInWith(Gandalf, Eagles, LocationOfHobbits)  ",
        "AwakenLaterIn(Hobbits, MinasTirith)  ",
        "ReuniteWith(Hobbits, SurvivingFellowship)  ",
        "",
        "Rules:  ",
        "Destroy(Ring) ∧ Destroy(Sauron) → CauseChainReaction(ChainReaction)  ",
        "CauseChainReaction(ChainReaction) → (Consume(ChainReaction, Mountain) ∧ Topple(ChainReaction, BaradDur) ∧ KillMost(ChainReaction, Orcs) ∧ GroundCrumblesBeneath(ChainReaction, Orcs))"
      ]
    },
    {
      "id": "c1325899c4266174c4c64fd055834b07dc28e49c",
      "paragraph_id": 6,
      "fols": [
        "Predicates:  ",
        "King(x, y) ::: x is the king of place y  ",
        "Queen(x, y) ::: x is the queen of place y  ",
        "Crowned(x) ::: x is crowned  ",
        "TakesAsQueen(x, y) ::: x takes y as his queen  ",
        "PresentAtCoronation(x, y) ::: x is present at y's coronation  ",
        "BowBefore(x, y) ::: x bows before y  ",
        "ReturnTo(x, y) ::: x returns to place y  ",
        "Marry(x, y) ::: x marries y  ",
        "UnableToCope(x) ::: x is unable to cope with traumas  ",
        "Depart(x, y) ::: x departs to place y  ",
        "Leaves(x, y, z) ::: x leaves y to z  ",
        "Details(x, y) ::: x details y  ",
        "SaddenedBy(x, y) ::: x is saddened by y  ",
        "GladdenedBy(x, y) ::: x is gladdened by y  ",
        "WarmWelcome(x) ::: x receives a warm welcome  ",
        "Uncle(x, y) ::: x is uncle of y  ",
        "Group(x) ::: x is a group  ",
        "",
        "Premises:  ",
        "Crowned(a_1) ∧ King(a_1, b_1) ∧ TakesAsQueen(a_1, a_2) ::: Aragorn is crowned King of Gondor and takes Arwen as his queen.  ",
        "∀x ((PresentAtCoronation(x, a_1) â¨ (x = a_1) â¨ (x = a_2)) → BowBefore(x, a_3) ∧ BowBefore(x, a_9)) ::: Aragorn, Arwen, and all others present at his coronation bow before Frodo and the Hobbits.  ",
        "ReturnTo(a_9, b_2) ::: The Hobbits return to the Shire.  ",
        "Marry(a_4, a_5) ::: Sam marries Rosie Cotton.  ",
        "UnableToCope(a_3) → Depart(a_3, b_4) ::: Frodo, unable to cope with traumas, departs to the Grey Havens.  ",
        "Uncle(a_6, a_3) ::: Bilbo is Frodo’s uncle.  ",
        "Leaves(a_3, b_3, a_6 â¨ a_7 â¨ a_8 â¨ b_4) ::: Frodo departs Middle Earth for the Grey Havens with Bilbo, Gandalf, and the Elves.  ",
        "Leaves(a_4, a_3, c_1) ::: Frodo leaves Sam the Red Book of Westmarch.  ",
        "Details(c_1, a_3) ::: The Red Book of Westmarch details Frodo’s adventures.  ",
        "SaddenedBy(a_4, Depart(a_3, b_4)) ∧ GladdenedBy(a_4, WarmWelcome(a_4)) ::: Though saddened by Frodo’s departure, Sam is gladdened by the warm welcome he receives upon returning home."
      ]
    }
  ],
  "c3ad97ba978bd2f56484be04acb706a6a42d8e00": [
    {
      "id": "c3ad97ba978bd2f56484be04acb706a6a42d8e00",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "Narrator(a_0) ::: a_0 is the narrator  ",
        "Traveler(a_1) ::: a_1 is a traveler  ",
        "AmateurNaturalist(a_1) ::: a_1 is an amateur naturalist  ",
        "RegainsConsciousness(a_1) ::: a_1 regains consciousness  ",
        "UnderHeapOfEarthAndStones(a_1) ::: a_1 is under a heap of earth and stones  ",
        "KnockedUnconsciousByFall(a_1) ::: a_1 believes he was knocked unconscious by a fall  ",
        "ThoughtsConfused(a_1) ::: a_1’s thoughts and recollections are confused  ",
        "EntwinedInRoots(a_1) ::: a_1 is entwined in the roots of plants  ",
        "PlantsGrowingAround(a_1) ::: plants have been growing around a_1  ",
        "SeesGreatHouse(a_1) ::: a_1 sees a great house in the distance  ",
        "WalksTowardHouse(a_1) ::: a_1 walks toward the house  ",
        "SeeksHelpAndInformation(a_1) ::: a_1 seeks help and information  ",
        "EncountersFuneral(a_1) ::: a_1 encounters a funeral  ",
        "FuneralParty(a_0) ::: a_0 is the funeral party (group of people)  ",
        "StrangelyDressed(a_0) ::: the funeral party is strangely yet strikingly dressed  ",
        "MajesticWhiteBeardedOldMan(a_3) ::: a_3 is a majestic white-bearded old man  ",
        "LeadsFuneralParty(a_3, a_0) ::: a_3 leads the funeral party  ",
        "InterringCorpse(a_0) ::: the funeral party is interring a corpse  ",
        "StrikingYoungGirl(a_2) ::: a_2 is a beautiful girl  ",
        "OvercomeByGrief(a_2) ::: a_2 is overcome by grief  ",
        "AgeAbout14(a_2) ::: a_2 appears about 14 years old  ",
        "WorldOlderThanAppearance ::: the world and everyone in it are far older than they appear  ",
        "EnchantedBy(a_1, a_2) ::: a_1 is enchanted by a_2  ",
        "FallsInLoveWith(a_1, a_2) ::: a_1 falls in love with a_2  ",
        "FuneralPartySees(a_0, a_1) ::: the funeral party sees a_1  ",
        "SurprisedByPresence(a_0, a_1) ::: the funeral party is surprised by a_1’s presence  ",
        "SurprisedByClothes(a_0, a_1) ::: the funeral party is surprised by a_1’s odd uncouth clothes and boots  ",
        "AllowsToAccompany(a_0, a_1) ::: the funeral party allows a_1 to accompany them  ",
        "LivesInMansion(a_0) ::: the funeral party lives in an enormous mansion  ",
        "AccompaniesToMansion(a_1, a_0) ::: a_1 accompanies the funeral party to the mansion  ",
        "",
        "Premises:  ",
        "Narrator(a_0) ∧ Traveler(a_1) ∧ AmateurNaturalist(a_1) ∧ RegainsConsciousness(a_1) ∧ UnderHeapOfEarthAndStones(a_1) ∧ KnockedUnconsciousByFall(a_1) ∧ ThoughtsConfused(a_1) ∧ EntwinedInRoots(a_1) ∧ PlantsGrowingAround(a_1) ∧ SeesGreatHouse(a_1) ∧ WalksTowardHouse(a_1) ∧ SeeksHelpAndInformation(a_1) ∧ EncountersFuneral(a_1) ∧ FuneralParty(a_0) ∧ StrangelyDressed(a_0) ∧ MajesticWhiteBeardedOldMan(a_3) ∧ LeadsFuneralParty(a_3, a_0) ∧ InterringCorpse(a_0) ∧ StrikingYoungGirl(a_2) ∧ OvercomeByGrief(a_2) ∧ AgeAbout14(a_2) ∧ WorldOlderThanAppearance ∧ EnchantedBy(a_1, a_2) ∧ FallsInLoveWith(a_1, a_2) ∧ FuneralPartySees(a_0, a_1) ∧ SurprisedByPresence(a_0, a_1) ∧ SurprisedByClothes(a_0, a_1) ∧ AllowsToAccompany(a_0, a_1) ∧ LivesInMansion(a_0) ∧ AccompaniesToMansion(a_1, a_0)  ",
        "::: The narrator Smith is a traveler and amateur naturalist who regains consciousness under a heap of earth and stones, believes he was knocked unconscious by a fall, and has confused thoughts. He is entwined"
      ]
    },
    {
      "id": "c3ad97ba978bd2f56484be04acb706a6a42d8e00",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "Traveler(a_1) ::: a_1 is the narrator/traveler  ",
        "Girl(a_2) ::: a_2 is the mysterious beautiful young girl named Yoletta  ",
        "FatherOfHouse(a_3) ::: a_3 is the old man called the Father of the House  ",
        "House(h) ::: h is a communal house  ",
        "MemberOf(a, h) ::: person a is a member of house h  ",
        "Probationer(a, h) ::: person a is a probationer in house h  ",
        "LanguageSpokenBy(a, l) ::: person a speaks language l  ",
        "LanguageOfHumans(l) ::: l is the language of human beings  ",
        "WritingSystemChanged(h) ::: the writing system in house h is altered so much that the traveler cannot read it  ",
        "CommunalHouseStructureOnly(h) ::: house h is a communal house and no other social structure is known to its members  ",
        "HumanRace(r) ::: r is the entire human race  ",
        "OrganizedInto(r, h) ::: human race r is organized into house h  ",
        "Misunderstands(a, b) ::: person a misunderstands person b  ",
        "InquiresAbout(a, c) ::: person a inquires about concept c  ",
        "ThinksIs(a, b, c) ::: person a thinks b is c  ",
        "SharesLanguage(a, b, l) ::: persons a and b share language l  ",
        "CannotRead(a, s) ::: person a cannot read script s  ",
        "",
        "Premises:  ",
        "∃h (House(h) ∧ OrganizedInto(HumanRace, h) ∧ CommunalHouseStructureOnly(h))  ",
        "::: The entire human race is organized into communal houses with no other form of social structure known to the people of the House.",
        "",
        "Probationer(a_1, h) ∧ MemberOf(a_1, h)  ",
        "::: The traveler agrees to work for a year as a probationer in the communal house h.",
        "",
        "Misunderstands(a_1, a_3)  ",
        "::: The traveler constantly stumbles into misunderstandings with the old man (Father of the House).",
        "",
        "InquiresAbout(a_1, nearestCity)  ",
        "ThinksIs(a_3, nearestCity, beehive)  ",
        "::: When the traveler inquires about the nearest city, the Father of the House thinks he is talking about a beehive.",
        "",
        "SharesLanguage(a_1, a_3, english)  ",
        "âˆ¬Understands(a_3, a_1)  ",
        "::: Although the traveler notes they share English, the Father of the House does not understand him.",
        "",
        "LanguageOfHumans(l) ∧ LanguageSpokenBy(a_3, l)  ",
        "::: The people of the house think they speak the language of human beings — that is all.",
        "",
        "WritingSystemChanged(h)  ",
        "CannotRead(a_1, hebrewLikeCharacters)  ",
        "::: The writing system in the house is altered so much that the traveler cannot read the Hebrew-like characters in their books.",
        "",
        "MemberOf(a_0, h) ∧ ∀x (MemberOf(x, h) → âˆ¬KnowsOtherSocialStructure(x))  ",
        "::: The entire human race is now organized into communal houses like this one, with no other form of social structure known to the members.",
        "",
        "Additional notes:  ",
        "- The narrator is a_1, the traveler.  ",
        "- The girl Yoletta is a_2, but no explicit predicates about her actions are given here.  ",
        "- The Father of the House is a_3.  ",
        "- The communal house is represented by h (an existentially quantified variable).  ",
        "- The concept \"nearest city\" is represented as nearestCity (a constant or concept).  ",
        "- The language \"English\" is represented as english.  ",
        "- The script \"Hebrew-like characters\" is represented as hebrewLikeCharacters."
      ]
    },
    {
      "id": "c3ad97ba978bd2f56484be04acb706a6a42d8e00",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "Narrator(a_1) ::: a_1 is the narrator (the traveler).  ",
        "Yoletta(a_2) ::: a_2 is Yoletta, the mysterious beautiful young girl.  ",
        "FatherOfHouse(a_3) ::: a_3 is the Father of the House, the elderly protector.  ",
        "Age(a, n) ::: person a has age n.  ",
        "Vegetarian(a) ::: a is a vegetarian.  ",
        "StrongRapportWithAnimals(a) ::: a has a strong rapport with animals.  ",
        "RarePhysicalBeauty(a) ::: a has rare physical beauty.  ",
        "CrystalPurityOfHeart(a) ::: a has crystal purity of heart.  ",
        "EverContentedCalmlyGlad(a) ::: a is ever contented and calmly glad.  ",
        "NoRomanticInterest(a) ::: a has no romantic interests.  ",
        "NoChildrenInCommunity ::: there are no children in the community.  ",
        "FallsAfoulOfStrictRules(a) ::: a sometimes falls afoul of the strict rules.  ",
        "LyingIsSeriousOffense ::: lying is a serious offense in the society.  ",
        "Lies(a) ::: a lies.  ",
        "PunishableBySolitaryConfinement(a) ::: a is punishable by solitary confinement.  ",
        "LovesLikeBrother(a, b) ::: a loves b like a brother (without passion).  ",
        "FeelsPassionFor(a, b) ::: a feels passion for b.  ",
        "",
        "Premises:  ",
        "Age(a_2, 31) ::: Yoletta is 31 years old.  ",
        "Age(a_3, ~200) ::: Father of the House is nearly 200 years old.  ",
        "∀a_0 (Vegetarian(a_0) â§ StrongRapportWithAnimals(a_0)) ::: All people in the community are vegetarians and have strong rapport with animals.  ",
        "RarePhysicalBeauty(a_0) â§ CrystalPurityOfHeart(a_0) â§ EverContentedCalmlyGlad(a_0) ::: The people have rare physical beauty, crystal purity of heart, and are ever contented and calmly glad.  ",
        "NoRomanticInterest(a_0) ::: The people have no romantic interests.  ",
        "NoChildrenInCommunity ::: There are no children in the community.  ",
        "FallsAfoulOfStrictRules(a_1) ::: The narrator sometimes falls afoul of the strict rules.  ",
        "LyingIsSeriousOffense ::: Lying is a serious offense.  ",
        "∀a_0 (Lies(a_0) → PunishableBySolitaryConfinement(a_0)) ::: If a person lies in the new society then the person is punishable by solitary confinement.  ",
        "LovesLikeBrother(a_2, a_1) ::: Yoletta loves the narrator like a brother.  ",
        "FeelsPassionFor(a_1, a_2) ::: The narrator feels passion for Yoletta."
      ]
    },
    {
      "id": "c3ad97ba978bd2f56484be04acb706a6a42d8e00",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "Meets(a_1, a_3) ::: The traveler meets the mysterious Mother of the House (elderly protector).  ",
        "ComprehendsStrangeness(a_1) ::: The traveler begins to comprehend the strangeness and differentness of their way of life.  ",
        "HumanFuture(a_0) ::: The humans of this distant future.  ",
        "AbandonedSexuality(a_0) ::: The humans have abandoned sexuality.  ",
        "AbandonedRomanticLove(a_0) ::: The humans have abandoned romantic love.  ",
        "Reproduce(x) ::: x reproduces.  ",
        "Queen(x) ::: x is the Queen.  ",
        "AlphaMale(x) ::: x is the Alpha Male.  ",
        "AlphaFemale(x) ::: x is the Alpha Female.  ",
        "FatherOfHouse(x) ::: x is the Father of the House.  ",
        "MotherOfHouse(x) ::: x is the Mother of the House.  ",
        "LivesCommunallyAsSiblings(x) ::: x lives communally as siblings.  ",
        "InHouse(x) ::: x is a member of the House.  ",
        "PassionFor(a_1, a_2) ::: The traveler has passion for Yoletta (mysterious beautiful young girl).  ",
        "CanBeConsummated(a_1, a_2) ::: The passion between traveler and Yoletta can be consummated.  ",
        "Despairs(a_1) ::: The traveler despairs.  ",
        "WondersIfCanAdapt(a_1) ::: The traveler wonders whether he can adapt to this mode of living.  ",
        "BegunGrooming(a_3, a_1) ::: The Mother has begun grooming the traveler.  ",
        "BegunGrooming(a_3, a_2) ::: The Mother has begun grooming Yoletta.  ",
        "BecomeFatherOfHouse(a_1) ::: The traveler will become the Father of the House.  ",
        "BecomeMotherOfHouse(a_2) ::: Yoletta will become the Mother of the House.  ",
        "",
        "Premises:  ",
        "∀x ((Queen(x) â¨ AlphaMale(x) â¨ AlphaFemale(x) â¨ FatherOfHouse(x) â¨ MotherOfHouse(x)) → Reproduce(x))  ",
        "::: Only the Queen or Alpha Male and Female or Father and Mother of the House reproduce.  ",
        "",
        "∀x (InHouse(x) ∧ ¬(Queen(x) â¨ AlphaMale(x) â¨ AlphaFemale(x) â¨ FatherOfHouse(x) â¨ MotherOfHouse(x)) → LivesCommunallyAsSiblings(x))  ",
        "::: The rest of the House live communally as siblings.  ",
        "",
        "Meets(a_1, a_3) ∧ ComprehendsStrangeness(a_1) ∧ HumanFuture(a_0) ∧ AbandonedSexuality(a_0) ∧ AbandonedRomanticLove(a_0)  ",
        "∧ PassionFor(a_1, a_2) ∧ ¬CanBeConsummated(a_1, a_2) ∧ Despairs(a_1) ∧ WondersIfCanAdapt(a_1)  ",
        "∧ BegunGrooming(a_3, a_1) ∧ BegunGrooming(a_3, a_2) ::: The narrative events and states described about the traveler, Mother, and Yoletta."
      ]
    },
    {
      "id": "c3ad97ba978bd2f56484be04acb706a6a42d8e00",
      "paragraph_id": 4,
      "fols": [
        "Predicates:  ",
        "InLibrary(a_1) ::: The traveler is in the library.  ",
        "Discovers(a_1, bottle) ::: The traveler discovers a bottle.  ",
        "ElaboratelyCarved(bottle) ::: The bottle is elaborately carved.  ",
        "OnShelf(bottle) ::: The bottle is on a shelf.  ",
        "InscriptionStates(bottle, content) ::: The bottle’s inscription states something about its contents.  ",
        "ProvidesCure(content, oppressions) ::: The contents provide a cure for certain oppressions.  ",
        "Oppressions(oppressions) ::: The oppressions mentioned are \"time and disease\" and certain thoughts or passions.  ",
        "LeadsToMadness(thoughtsOrPassions) ::: The thoughts or passions lead to madness.  ",
        "DoseTaken(a_1, bottle) ::: The traveler takes a dose of the bottle’s liquid.  ",
        "ThinksCure(a_1, passionForYoletta) ::: The traveler thinks the dose will cure his passion for Yoletta.  ",
        "PassionFor(a_1, a_2) ::: The traveler has a passion for Yoletta (the mysterious beautiful young girl).  ",
        "Reciprocates(a_2, passionFor(a_1)) ::: Yoletta has begun to learn to reciprocate the traveler’s passion.  ",
        "BodyStiffAndCold(a_1) ::: The traveler’s body grows stiff and cold.  ",
        "RealizesPoison(a_1, bottle) ::: The traveler realizes the potion is a poison.  ",
        "ReliefFromPainsIsDeath(bottle) ::: The only relief the potion provides from the pains of life is death.  ",
        "",
        "Premises:  ",
        "InLibrary(a_1) ∧ Discovers(a_1, bottle) ∧ ElaboratelyCarved(bottle) ∧ OnShelf(bottle) ∧ InscriptionStates(bottle, content) ∧ ProvidesCure(content, oppressions) ∧ Oppressions(oppressions) ∧ (Oppressions = \"time and disease\" ∧ thoughtsOrPassions) ∧ LeadsToMadness(thoughtsOrPassions)  ",
        "DoseTaken(a_1, bottle) ∧ ThinksCure(a_1, passionForYoletta) ∧ PassionFor(a_1, a_2) ∧ ¬Realizes(Reciprocates(a_2, passionFor(a_1)))  ",
        "BodyStiffAndCold(a_1) → RealizesPoison(a_1, bottle)  ",
        "RealizesPoison(a_1, bottle) → ReliefFromPainsIsDeath(bottle)  ",
        "",
        "Explanation:  ",
        "- The traveler (a_1) is in the library and discovers an elaborately-carved bottle on a shelf.  ",
        "- The bottle’s inscription states that its contents provide a cure for the oppressions of \"time and disease\" and the thoughts or passions that lead to madness.  ",
        "- The traveler takes a dose of the liquid, thinking it will cure his passion for Yoletta (a_2), who is the mysterious beautiful young girl. He does not realize that Yoletta has begun to reciprocate his passion.  ",
        "- When his body grows stiff and cold, he realizes the potion is a poison.  ",
        "- The only relief the potion provides from the pains of life is death."
      ]
    },
    {
      "id": "c3ad97ba978bd2f56484be04acb706a6a42d8e00",
      "paragraph_id": 5,
      "fols": [
        "Predicates:  ",
        "Traveler(a_1) ::: a_1 is a traveler  ",
        "MysteriousBeautifulYoungGirl(a_2) ::: a_2 is a mysterious, beautiful young girl  ",
        "ElderlyProtector(a_3) ::: a_3 is an elderly protector  ",
        "Author(a_4, b_1) ::: a_4 is the author of Green Mansions  ",
        "LiteraryWork(b_1) ::: b_1 is a literary work (a novel)  ",
        "AnticipatesPlotOf(a_0, b_1) ::: the story (a_0) anticipates the plot of Green Mansions  ",
        "",
        "Premises:  ",
        "AnticipatesPlotOf(a_0, b_1)  ::: This story anticipates the plot of Green Mansions.  ",
        "Traveler(a_1)  ::: There is a traveler in the story.  ",
        "MysteriousBeautifulYoungGirl(a_2)  ::: There is a mysterious, beautiful young girl in the story.  ",
        "ElderlyProtector(a_3)  ::: There is an elderly protector in the story.  ",
        "Author(a_4, b_1)  ::: Hudson is the author of Green Mansions.  ",
        "LiteraryWork(b_1)  ::: Green Mansions is a literary work (a novel).  ",
        "",
        "Note: The story itself is represented as a_0 (the group representative of people or the story entity), used here to relate the anticipation of the plot."
      ]
    }
  ],
  "ccfabbee5a88f09447f3cbba5ea0f86e5c039058": [
    {
      "id": "ccfabbee5a88f09447f3cbba5ea0f86e5c039058",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "Teenager(x) ::: x is a teenager.  ",
        "LivesInSuburb(x, y) ::: x lives in suburb y.  ",
        "SuburbOf(y, z) ::: y is a suburb of city z.  ",
        "City(z) ::: z is a city.  ",
        "NewNeighbor(x, y) ::: x is a new neighbor of y.  ",
        "OldBestFriend(x, y) ::: x is an old best friend of y.  ",
        "Student(x) ::: x is a student.  ",
        "GoneMissing(x) ::: x has gone missing.  ",
        "ChildhoodFriend(x, y) ::: x is a childhood friend of y.  ",
        "Mother(x, y) ::: x is the mother of y.  ",
        "Introduces(x, y, z) ::: x introduces y to z.  ",
        "Claims(x, p) ::: x claims proposition p.  ",
        "Vampire(x) ::: x is a vampire.  ",
        "FedUpWith(x, y) ::: x is fed up with y.  ",
        "AngryWith(x, y) ::: x is angry with y.  ",
        "Tells(x, y, p) ::: x tells y proposition p.  ",
        "Crazy(x) ::: x is crazy.  ",
        "WantsToBeFriends(x, y) ::: x wants to be friends with y.  ",
        "DoesNotWantToBeFriends(x, y) ::: x does not want to be friends with y.  ",
        "",
        "Premises:  ",
        "Teenager(a_1) ∧ LivesInSuburb(a_1, b_0) ∧ SuburbOf(b_0, lasVegas) ∧ City(lasVegas) ::: Charley Brewster is a teenager living in a suburb of Las Vegas.  ",
        "NewNeighbor(a_2, a_1) ::: A new neighbor (Jerry) has moved in next door to Charley.  ",
        "OldBestFriend(a_5, a_1) ::: Edward \"Evil Ed\" Lee is Charley's old best friend.  ",
        "∀x (Student(x) ∧ GoneMissing(x)) ::: Many students have gone missing.  ",
        "GoneMissing(adamJohnson) ∧ ChildhoodFriend(adamJohnson, a_1) ::: Adam Johnson, a childhood friend of Charley, has gone missing.  ",
        "Mother(a_3, a_1) ∧ Introduces(a_3, a_1, a_2) ::: Charley's mother Jane introduces Charley to Jerry.  ",
        "Claims(a_5, Vampire(a_2)) ::: Ed claims that Jerry is a vampire.  ",
        "FedUpWith(a_1, a_5) ∧ AngryWith(a_1, a_5) ∧ Tells(a_1, a_5, Crazy(a_5)) ∧ DoesNotWantToBeFriends(a_1, a_5) ::: Charley is fed up and angry with Ed, tells him he is crazy, and does not want to be friends anymore."
      ]
    },
    {
      "id": "ccfabbee5a88f09447f3cbba5ea0f86e5c039058",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "Confronts(a_2, a_0) ::: Jerry confronts Ed  ",
        "ClaimsAware(a_2, a_0) ::: Jerry claims he has been aware of Ed watching him  ",
        "ChasesIntoPool(a_2, a_0) ::: Jerry chases Ed into a nearby pool  ",
        "ConvincesVampireLifeBetter(a_2, a_0) ::: Jerry convinces Ed that his life would be better as a vampire  ",
        "SuccumbsAndAllowsBite(a_0, a_2) ::: Ed succumbs and willingly allows Jerry to bite him  ",
        "RealizesMissing(a_1, a_0) ::: Charley realizes Ed is missing  ",
        "Investigates(a_1) ::: Charley decides to investigate  ",
        "DiscoversVideoRecordings(a_1) ::: Charley discovers video recordings of objects moving on their own  ",
        "VoiceoverRevealsRecordingPurpose(a_0, a_2) ::: Ed's voiceover reveals he is recording Jerry to prove no reflection  ",
        "AttacksNeighborhood(a_2) ::: Jerry attacks more people throughout the neighborhood  ",
        "SneaksIntoHouse(a_1, a_2) ::: Charley sneaks into Jerry's house  ",
        "KeepsVictimsSecretRooms(a_2) ::: Jerry keeps victims in secret rooms  ",
        "VisitsMagician(a_1, a_5) ::: Charley goes to magician Peter Vincent  ",
        "NotTakenSeriously(a_5, a_1) ::: Peter does not take Charley seriously  ",
        "KicksOut(a_5, a_1) ::: Peter kicks Charley out  ",
        "BittenWillingly(x, a_2) ::: Person x is bitten willingly by Jerry  ",
        "Vampire(x) ::: Person x is a vampire  ",
        "NoReflectionRecording(x) ::: Person x's reflection does not show up in recordings  ",
        "",
        "Premises:  ",
        "∀x (BittenWillingly(x, a_2) → Vampire(x)) ::: If a person is bitten willingly by Jerry, then that person becomes a vampire  ",
        "∀x (Vampire(x) → NoReflectionRecording(x)) ::: If a person is a vampire, then their reflection does not show up in recordings  ",
        "AttacksNeighborhood(a_2) → KeepsVictimsSecretRooms(a_2) ::: If Jerry attacks people throughout the neighborhood, then he keeps victims in secret rooms  ",
        "",
        "Additional facts from context (expressed as atomic predicates):  ",
        "Confronts(a_2, a_0)  ",
        "ClaimsAware(a_2, a_0)  ",
        "ChasesIntoPool(a_2, a_0)  ",
        "ConvincesVampireLifeBetter(a_2, a_0)  ",
        "SuccumbsAndAllowsBite(a_0, a_2)  ",
        "RealizesMissing(a_1, a_0)  ",
        "Investigates(a_1)  ",
        "DiscoversVideoRecordings(a_1)  ",
        "VoiceoverRevealsRecordingPurpose(a_0, a_2)  ",
        "AttacksNeighborhood(a_2)  ",
        "SneaksIntoHouse(a_1, a_2)  ",
        "VisitsMagician(a_1, a_5)  ",
        "NotTakenSeriously(a_5, a_1)  ",
        "KicksOut(a_5, a_1)"
      ]
    },
    {
      "id": "ccfabbee5a88f09447f3cbba5ea0f86e5c039058",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "ComesTo(a_2, b_3) ::: Jerry comes to Charley's new house.  ",
        "SetsFireTo(a_2, b_3) ::: Jerry sets fire to Charley's new house.  ",
        "FleesThrough(a_1, desert) ::: Charley flees through the desert.  ",
        "FleesThrough(a_4, desert) ::: Amy flees through the desert.  ",
        "FleesThrough(a_0_except_1_4, desert) ::: Charley’s girlfriend Amy and Charley flee through the desert. (Note: a_0_except_1_4 denotes Jane and others in the group except Charley and Amy)  ",
        "CatchesUp(a_2, a_1) ::: Jerry catches up with Charley.  ",
        "CatchesUp(a_2, a_4) ::: Jerry catches up with Amy.  ",
        "CatchesUp(a_2, a_0_except_1_4) ::: Jerry catches up with Jane and others.  ",
        "Wounds(a_4, a_2, realEstateSignStake) ::: Jane wounds Jerry with a real estate sign stake.  ",
        "AdmittedTo(a_0_except_1_4, b_1) ::: Jane is admitted to hospital.  ",
        "Summons(a_5, a_1) ::: Peter summons Charley.  ",
        "ArrivesAt(a_1, b_2) ::: Charley arrives at Peter's penthouse.  ",
        "TurnsUp(a_6, b_2) ::: Ed turns up at Peter's penthouse.  ",
        "FullyTransformed(a_6, vampire) ::: Ed has been fully transformed into a vampire.  ",
        "Aids(a_6, a_2, attacking(a_1, a_4, a_5)) ::: Ed aids Jerry in attacking Charley, Amy, and Peter.  ",
        "Fights(a_6, a_1) ::: Ed fights Charley.  ",
        "LetsOutAnger(a_6, a_1) ::: Ed lets all of his anger out on Charley.  ",
        "KillsReluctantly(a_1, a_6) ::: Charley reluctantly kills Ed.  ",
        "Injures(a_4, a_2, holyWater) ::: Amy injures Jerry with holy water.  ",
        "RunInto(a_1, club) ::: Charley runs into a club.  ",
        "RunInto(a_4, club) ::: Amy runs into a club.  ",
        "GetSeparatedInCrowd(a_1, club) ::: Charley gets separated in the crowd in the club.  ",
        "GetSeparatedInCrowd(a_4, club) ::: Amy gets separated in the crowd in the club.  ",
        "Kisses(a_2, a_4) ::: Jerry kisses Amy.  ",
        "Bites(a_2, a_4) ::: Jerry bites Amy.  ",
        "Possesses(a_2, a_4) ::: Jerry possesses Amy.  ",
        "ProceedsToTake(a_2, a_4) ::: Jerry proceeds to take Amy.",
        "",
        "Premises:  ",
        "∀x (FullyTransformed(x, vampire) → Aids(x, a_2, attacking(a_1, a_4, a_5))) ::: Ed aids Jerry in attacking Charley, Amy, and Peter after Ed has been fully transformed into a vampire."
      ]
    },
    {
      "id": "ccfabbee5a88f09447f3cbba5ea0f86e5c039058",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "RefusesToHelp(a_5, a_1) ::: Peter refuses to help Charley.  ",
        "KilledByVampire(x, y) ::: x was killed by vampire y.  ",
        "ParentOf(x, y) ::: x is a parent of y.  ",
        "StakeBlessedBySaintMichael(s) ::: s is a stake blessed by Saint Michael.  ",
        "Kills(s, v) ::: stake s kills vampire v.  ",
        "TurnsVictimsBackToHumans(s, v) ::: stake s turns all victims of vampire v back into humans.  ",
        "Gives(x, y, z) ::: person x gives object y to person z.  ",
        "HouseOf(x, h) ::: h is the house of person x.  ",
        "GoesTo(x, h) ::: person x goes to place h.  ",
        "DecidesToJoin(x, y) ::: person x decides to join person y.  ",
        "",
        "Premises:  ",
        "ParentOf(a_3, a_1) ::: Charley's mother is a parent of Charley.  ",
        "KilledByVampire(a_3, a_2) ::: Charley's mother was killed by vampire Jerry.  ",
        "KilledByVampire(a_4, a_2) ::: Amy (Charley's other parent) was killed by vampire Jerry.  ",
        "RefusesToHelp(a_5, a_1) ::: Peter refuses to help Charley.  ",
        "∃s (StakeBlessedBySaintMichael(s) ∧ Gives(a_5, s, a_1) ∧ Kills(s, a_2) ∧ TurnsVictimsBackToHumans(s, a_2)) ::: Peter gives Charley a stake blessed by Saint Michael that kills Jerry and turns all his victims back into humans.  ",
        "HouseOf(a_2, b_3) ::: b_3 is Jerry's house (new house).  ",
        "GoesTo(a_1, b_3) ::: Charley goes to Jerry's house.  ",
        "DecidesToJoin(a_5, a_2) ::: Peter decides to join Jerry after all."
      ]
    },
    {
      "id": "ccfabbee5a88f09447f3cbba5ea0f86e5c039058",
      "paragraph_id": 4,
      "fols": [
        "Predicates:  ",
        "LedInto(x, y) ::: x are led into place y  ",
        "AttackedBy(x, y) ::: x are attacked by y  ",
        "VictimOf(y, a_2) ::: y is a victim of Jerry (a_2)  ",
        "Confronts(a_1, a_4) ::: Charley confronts Amy  ",
        "Explains(a_4, a_1) ::: Amy explains to Charley  ",
        "AboutToBite(a_4, a_1) ::: Amy is about to bite Charley  ",
        "Stabs(a_1, a_4) ::: Charley stabs Amy  ",
        "MissesHeart(a_1, a_4) ::: Charley misses Amy’s heart when stabbing  ",
        "Escapes(a_1) ::: Charley escapes  ",
        "AmbushedBy(a_5, a_2) ::: Peter is ambushed by Jerry  ",
        "Kills(a_5, x) ::: Peter kills x  ",
        "WeaponBackfires(a_5) ::: Peter’s weapon backfires  ",
        "ReturnsTo(a_1, b_0) ::: Charley returns to the basement  ",
        "Sees(a_1, Event) ::: Charley sees event  ",
        "FedOnBy(a_5, Vampires) ::: Peter is fed on by vampires  ",
        "DecidesToShootHoles(a_1, b_0) ::: Charley decides to shoot holes in the roof of the basement  ",
        "SunlightShinesIn(b_0) ::: Sunlight shines into the basement  ",
        "KillsBySunlight(x) ::: x is killed by sunlight  ",
        "PatchOfSunlightGuards(a_1) ::: Patch of sunlight guards Charley  ",
        "PatchOfSunlightGuards(a_5) ::: Patch of sunlight guards Peter  ",
        "Appears(a_2) ::: Jerry appears  ",
        "Explains(a_2, QuestOver(a_1)) ::: Jerry explains Charley’s quest is over  ",
        "OutfittedInFlameRetardantSuit(a_1) ::: Charley is outfitted in a flame-retardant suit  ",
        "LightsOnFire(a_5, a_1) ::: Peter lights Charley on fire  ",
        "Tackles(a_1, a_2) ::: Charley tackles Jerry  ",
        "FeedingOff(a_4, a_2) ::: Amy is feeding off Jerry  ",
        "StruggleBetween(a_1, a_2) ::: Struggle between Charley and Jerry  ",
        "OthersWatch(Vampires) ::: Other vampires watch  ",
        "Assists(a_5, a_1) ::: Peter assists Charley  ",
        "ShootsHole(a_5, FloorAbove(b_0)) ::: Peter shoots a hole in the floor above the basement  ",
        "BurnsBySunlight(a_2) ::: Jerry is burned by sunlight  ",
        "Tosses(a_5, a_1, Stake) ::: Peter tosses Charley the stake  ",
        "Stake ::: The stake used by Charley and Peter  ",
        "",
        "Premises:  ",
        "∀x (Vampire(x) ∧ ExposedToSunlight(x) → KilledBySunlight(x)) ::: Sunlight kills vampires exposed to sunlight.  ",
        "∀x ∀y ((SunlightGuards(x, y) ∧ Vampire(y) ∧ ¬KilledBySunlight(y)) → ProtectedFrom(y, x)) ::: Sunlight guards persons from vampires not destroyed by sunlight.  ",
        "∀x (OutfittedInFlameRetardantSuit(x) ∧ LitOnFire(x) → CanTackleSafely(x, Vampire)) ::: Lighting a person outfitted in a flame-retardant suit on fire allows that person to tackle a vampire safely.  ",
        "",
        "Premises from context:  ",
        "LedInto({a_1, a_5}, b_0) ∧ AttackedBy({a_1, a_5}, {a_4} ∨ VictimOf(_, a_2)) ::: They are led into Jerry’s basement and attacked by many of Jerry’s victims including Amy.  ",
        "Confronts(a_1, a_4) ∧ Explains(a_4, a_1) ∧ AboutToBite(a_4, a_1) ∧ Stabs(a_1, a_4) ∧ MissesHeart(a_1, a_4) ∧ Escapes(a_1) ::: Charley confronts Amy, she explains how they can be together forever, she is about to bite him, he stabs her but misses the heart and escapes.  ",
        "AmbushedBy(a_5, a_2) ∧ Kills(a_5, SomeVictims) ∧ WeaponBackfires(a_5) ::: Peter is ambushed by Jerry and victims, kills a few before weapon backfires.  ",
        "ReturnsTo(a_1, b_0) ∧ Sees(a_1, FedOnBy(a_5, RemainingVampires)) ∧ DecidesToShootHoles(a_1, b"
      ]
    },
    {
      "id": "ccfabbee5a88f09447f3cbba5ea0f86e5c039058",
      "paragraph_id": 5,
      "fols": [
        "Predicates:  ",
        "Stabs(a_1, a_2, heart) ::: Charley stabs Jerry in the heart.  ",
        "Kills(a_1, a_2) ::: Charley kills Jerry.  ",
        "ReturnsToHumanForm(a_1, a_2) ::: Charley returns Jerry to his human form.  ",
        "Recovers(a_3, b_1) ::: Charley's mother recovers from the hospital.  ",
        "GoesToShop(a_3, b_3) ::: Charley's mother goes to shop for a new house.  ",
        "HasSex(a_1, a_4, b_2) ::: Charley and Amy have sex in Peter's penthouse.  ",
        "",
        "Premises:  ",
        "Stabs(a_1, a_2, heart) ∧ Kills(a_1, a_2) ∧ ReturnsToHumanForm(a_1, a_2) ::: Charley quickly stabs Jerry in the heart, killing him and returning his victims to their human form.  ",
        "Recovers(a_3, b_1) ∧ GoesToShop(a_3, b_3) ::: Charley's mother recovers from the hospital and goes to shop for a new house.  ",
        "HasSex(a_1, a_4, b_2) ::: Charley and Amy have sex in Peter's penthouse."
      ]
    }
  ],
  "cf09f10dcf0a2d000a7d2a0fc776f16a0e5a86be": [
    {
      "id": "cf09f10dcf0a2d000a7d2a0fc776f16a0e5a86be",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "FilmSetIn(c_0) ::: The film is set in Bailey Downs.  ",
        "Suburb(c_0) ::: Bailey Downs is a suburb.  ",
        "DogKillingsRash(c_0) ::: A rash of dog killings has been occurring in Bailey Downs.  ",
        "Sisters(a_1, a_2) ::: Ginger and Brigitte Fitzgerald are sisters.  ",
        "Teenage(a_1) ::: Ginger is a teenager.  ",
        "Teenage(a_2) ::: Brigitte is a teenager.  ",
        "FascinationWithDeath(a_1) ::: Ginger harbors a fascination with death.  ",
        "FascinationWithDeath(a_2) ::: Brigitte harbors a fascination with death.  ",
        "FormedPactToDieTogether(a_1, a_2) ::: Ginger and Brigitte formed a pact to die together as children.  ",
        "OnWayToKidnapDog(a_1, c_0) ::: Ginger was on the way to kidnap a dog (contextually in Bailey Downs).  ",
        "OnWayToKidnapDog(a_2, c_0) ::: Brigitte was on the way to kidnap a dog.  ",
        "DogOwnerTrinaSinclair(bully) ::: Trina Sinclair is a school bully who owns the dog. (Note: bully is a placeholder entity for Trina Sinclair, not explicitly given but implied)  ",
        "CreatureResponsibleForMaulings(creature) ::: There is a creature responsible for the maulings.  ",
        "CreatureAttacks(creature, a_1) ::: The creature attacks Ginger.  ",
        "CreatureWounds(creature, a_1) ::: The creature wounds Ginger.  ",
        "CreatureBites(creature, a_1) ::: The creature bites Ginger.  ",
        "BrigitteRescues(a_2, a_1) ::: Brigitte rescues Ginger.  ",
        "CreatureRunOverByVan(creature, samVan) ::: The creature is run over by a van belonging to Sam MacDonald.  ",
        "SamMacDonaldDrugDealer(a_sam) ::: Sam MacDonald is a local drug dealer. (a_sam is a placeholder for Sam MacDonald)  ",
        "GingerWoundsHealQuickly(a_1) ::: Ginger’s wounds heal quickly.  ",
        "GingerDecidesNoHospital(a_1) ::: Ginger decides not to go to the hospital.",
        "",
        "Rules:  ",
        "If the creature wounds and bites Ginger and Ginger’s wounds heal quickly, then Ginger decides not to go to the hospital.  ",
        "(CreatureWounds(creature, a_1) ∧ CreatureBites(creature, a_1) ∧ GingerWoundsHealQuickly(a_1)) → GingerDecidesNoHospital(a_1)",
        "",
        "Premises:  ",
        "FilmSetIn(c_0) ∧ Suburb(c_0) ∧ DogKillingsRash(c_0) ::: The film is set in Bailey Downs, a suburb where a rash of dog killings has been occurring.  ",
        "Sisters(a_1, a_2) ∧ Teenage(a_1) ∧ Teenage(a_2) ∧ FascinationWithDeath(a_1) ∧ FascinationWithDeath(a_2) ∧ FormedPactToDieTogether(a_1, a_2) ::: Brigitte and Ginger Fitzgerald are teenage sisters who harbor a fascination with death and formed a pact to die together as children.  ",
        "OnWayToKidnapDog(a_1, c_0) ∧ OnWayToKidnapDog(a_2, c_0) ∧ DogOwnerTrinaSinclair(bully) ::: One night, while on the way to kidnap a dog owned by school bully Trina Sinclair.  ",
        "CreatureAttacks(creature, a_1) ∧ CreatureWounds(creature, a_1) ∧ CreatureBites(creature, a_1) ∧ BrigitteRescues(a_2, a_1) ::: The creature wounds and bites Ginger, but Brigitte rescues her.  ",
        "CreatureRunOverByVan(creature, samVan) ∧ SamMacDonaldDrugDealer(a_sam) ::: The creature is run over by a van belonging to Sam MacDonald, a local drug dealer.  ",
        "GingerWoundsHealQuickly(a_1) ::: Ginger’s wounds heal quickly."
      ]
    },
    {
      "id": "cf09f10dcf0a2d000a7d2a0fc776f16a0e5a86be",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "AttackedByWerewolf(x) ::: x was attacked by a werewolf  ",
        "TurningIntoWerewolf(x) ::: x is in the process of turning into a werewolf  ",
        "UndergoesTransformation(x) ::: x undergoes physical and mental transformations  ",
        "AggressiveBehavior(x) ::: x behaves aggressively  ",
        "HairGrowthFromWounds(x) ::: x grows hair from wounds  ",
        "TailSprouting(x) ::: x sprouts a tail  ",
        "HeavyMenstruation(x) ::: x heavily menstruates  ",
        "HasUnprotectedSexWith(x, y) ::: x has unprotected sex with y  ",
        "KillsDog(x) ::: x kills a neighbor’s dog  ",
        "PersuadedToPierceNavel(x, y) ::: x is persuaded by y to have navel pierced  ",
        "PiercingIneffective(x) ::: piercing is ineffective for x  ",
        "SuggestedMonkshoodSolution(x, y) ::: y suggests monkshood solution for x  ",
        "MonkshoodAvailableInSpringOnly ::: monkshood plant is only found in spring  ",
        "",
        "Premises:  ",
        "(AttackedByWerewolf(a_1) ∧ TurningIntoWerewolf(a_1)) → (UndergoesTransformation(a_1) ∧ AggressiveBehavior(a_1) ∧ HairGrowthFromWounds(a_1) ∧ TailSprouting(a_1) ∧ HeavyMenstruation(a_1))  ",
        "PersuadedToPierceNavel(a_1, a_2) ∧ PiercingIneffective(a_1)  ",
        "SuggestedMonkshoodSolution(a_1, a_0) ∧ ¬MonkshoodAvailableInSpringOnly → ¬PossibleToUseMonkshood(a_1)  ",
        "HasUnprotectedSexWith(a_1, Jason)  ",
        "KillsDog(a_1)  ",
        "BrigitteAndSamAgree(AttackedByWerewolf(a_1) ∧ TurningIntoWerewolf(a_1))  ",
        "",
        "Explanation:  ",
        "- Ginger (a_1) was attacked by a werewolf and is turning into one, so she undergoes the listed transformations.  ",
        "- Brigitte (a_2) persuades Ginger to have her navel pierced, but it is ineffective.  ",
        "- Sam (a_0) suggests a monkshood solution, but it is not possible because the plant is only available in spring.  ",
        "- Ginger has unprotected sex with Jason and kills a neighbor’s dog.  ",
        "- Brigitte and Sam agree on Ginger’s werewolf attack and transformation status."
      ]
    },
    {
      "id": "cf09f10dcf0a2d000a7d2a0fc776f16a0e5a86be",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "ShowsUp(a_1, c_3) ::: Trina shows up at the Fitzgerald house (c_3 is Fitzgerald house).  ",
        "Accuses(a_1, a_2, b_3) ::: Trina accuses Ginger of kidnapping her dog (b_3 is Trina's dog).  ",
        "Fights(a_1, a_2) ::: Trina fights with Ginger.  ",
        "AccidentallyKilled(a_1) ::: Trina is accidentally killed.  ",
        "SlipsAndHitsHead(a_1, c_4) ::: Trina slips and hits her head on the kitchen counter (c_4 is kitchen counter).  ",
        "AvoidParents(a_1, a_2) ::: The sisters narrowly avoid their parents.  ",
        "PutBodyInFreezer(a_1, c_5) ::: They put Trina's body in a freezer (c_5 is freezer).  ",
        "ExplainBloodAsProject(a_1, a_2) ::: They explain the blood to be part of another school project.  ",
        "BreaksOffFingers(a_2, a_1, 2) ::: Brigitte accidentally breaks off two of Trina's fingers.  ",
        "LoseFingersWhenBuried(a_2, a_1) ::: They lose the fingers when they bury Trina's body.  ",
        "TellsCantGoOut(a_2, a_1) ::: Brigitte tells Ginger she can't go out anymore.  ",
        "Defiant(a_1) ::: Ginger remains defiant.",
        "",
        "Premises:  ",
        "ShowsUp(a_1, FitzgeraldHouse) ∧ Accuses(a_1, a_2, TrinasDog) ∧ Fights(a_1, a_2) ::: Trina shows up at the Fitzgerald house to accuse Ginger of kidnapping her dog and fights with her.  ",
        "AccidentallyKilled(a_1) ∧ SlipsAndHitsHead(a_1, KitchenCounter) ::: Trina is accidentally killed when she slips and hits her head on the kitchen counter.  ",
        "AvoidParents(a_1, a_2) ∧ PutBodyInFreezer(a_1, Freezer) ∧ ExplainBloodAsProject(a_1, a_2) ::: The sisters narrowly avoid their parents as they put the body in a freezer, explaining the blood as part of another school project.  ",
        "BreaksOffFingers(a_2, a_1, 2) ::: Brigitte accidentally breaks off two of Trina's fingers while trying to get the corpse from the freezer.  ",
        "LoseFingersWhenBuried(a_2, a_1) ::: They lose the fingers when they bury Trina's body.  ",
        "TellsCantGoOut(a_2, a_1) ∧ Defiant(a_1) ::: Brigitte tells Ginger she can't go out anymore, but Ginger remains defiant."
      ]
    },
    {
      "id": "cf09f10dcf0a2d000a7d2a0fc776f16a0e5a86be",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "Takes(a_2, b_2) ::: Brigitte takes the cure.  ",
        "PurchasedBy(b_2, motherOf(a_2)) ::: The cure (monkshood) was purchased by Brigitte’s mother.  ",
        "Asks(a_2, a_0, Make(a_0, b_2)) ::: Brigitte asks Sam to make the cure.  ",
        "AttackedBy(a_2, a_3) ::: Brigitte is attacked by Jason (a_3).  ",
        "InfectedBy(a_3, a_1) ::: Jason was infected by Ginger.  ",
        "UnprotectedSex(a_3, a_1) ::: Jason was infected by Ginger due to unprotected sex.  ",
        "DefendsUsing(a_2, a_3, b_2) ::: Brigitte defends herself by using the cure on Jason.  ",
        "WitnessesChange(a_2, a_3) ::: Brigitte witnesses Jason’s immediate change in behavior.  ",
        "ProvesSuccess(b_2) ::: The cure’s success is proven.  ",
        "FindsAtSchool(a_2, a_1, Murdered(a_1, a_4)) ::: At school, Brigitte finds that Ginger has murdered the guidance counselor Mr. Wayne (a_4).  ",
        "WitnessesKilling(a_2, a_1, a_5) ::: Brigitte witnesses Ginger killing the school’s janitor (a_5).  ",
        "",
        "Premises:  ",
        "Takes(a_2, b_2) ∧ PurchasedBy(b_2, motherOf(a_2)) ∧ Asks(a_2, a_0, Make(a_0, b_2)) ::: On Halloween, Brigitte takes monkshood purchased by her mother and asks Sam to make the cure.  ",
        "AttackedBy(a_2, a_3) ∧ InfectedBy(a_3, a_1) ∧ UnprotectedSex(a_3, a_1) ∧ DefendsUsing(a_2, a_3, b_2) ∧ WitnessesChange(a_2, a_3) → ProvesSuccess(b_2) ::: Brigitte is attacked by Jason (infected by Ginger due to unprotected sex), defends herself using the cure, and witnesses his immediate change proving the cure’s success.  ",
        "FindsAtSchool(a_2, a_1, Murdered(a_1, a_4)) ∧ WitnessesKilling(a_2, a_1, a_5) ::: At school, Brigitte finds Ginger has murdered the guidance counselor Mr. Wayne and witnesses her killing the school’s janitor."
      ]
    },
    {
      "id": "cf09f10dcf0a2d000a7d2a0fc776f16a0e5a86be",
      "paragraph_id": 4,
      "fols": [
        "Predicates:  ",
        "Mother(a_0) ::: a_0 is the girls' mother  ",
        "Corpse(a_1) ::: a_1 is a corpse (Trina's corpse)  ",
        "LookingFor(a_0, a_3) ::: a_0 is looking for a_3 (her daughters)  ",
        "Sees(a_0, a_2) ::: a_0 sees a_2 (Brigitte)  ",
        "Running(a_2) ::: a_2 is running  ",
        "PicksUp(a_0, a_2) ::: a_0 picks up a_2  ",
        "DrivesTo(a_0, a_2, c_3) ::: a_0 drives a_2 to place c_3 (Greenhouse Bash)  ",
        "Tells(a_0, a_2, Action) ::: a_0 tells a_2 some Action  ",
        "BurnHouseDownByGas(a_0) ::: a_0 will burn the house down by filling it with gas and lighting a match  ",
        "Arrives(a_2, c_3) ::: a_2 arrives at place c_3 (Greenhouse Bash)  ",
        "Rejects(a_3, a_1) ::: a_3 (Sam) rejects a_1 (Ginger)'s advances  ",
        "Approaches(a_3, a_1) ::: a_3 approaches a_1  ",
        "BreaksArm(a_1, a_3) ::: a_1 breaks a_3's arm  ",
        "InfectsSelf(a_2) ::: a_2 infects herself  ",
        "PleadNotTo(a_3, a_2) ::: a_3 pleads with a_2 not to infect herself  ",
        "Leaves(a_2, a_4) ::: a_2 and a_4 (the sisters) leave  ",
        "KnocksOut(a_3, a_1, b_2) ::: a_3 knocks out a_1 with object b_2 (shovel)  ",
        "TakesBack(a_2, a_3, a_1, c_4) ::: a_2 and a_3 take a_1 back to place c_4 (Fitzgerald house)  ",
        "PrepareMoreCure(a_2, a_3, b_2) ::: a_2 and a_3 prepare more of the cure b_2  ",
        "",
        "Premises:  ",
        "Corpse(a_1) ∧ LookingFor(a_0, daughters) ::: The girls' mother discovers Trina's corpse and goes looking for her daughters.  ",
        "Sees(a_0, a_2) ∧ Running(a_2) ∧ PicksUp(a_0, a_2) ::: While looking for her daughters, the mother sees Brigitte running and picks her up.  ",
        "DrivesTo(a_0, a_2, GreenhouseBash) ∧ Tells(a_0, a_2, BurnHouseDownByGas(a_0)) ::: The mother drives Brigitte to the Greenhouse Bash and tells her she will burn the house down by filling it with gas and lighting a match.  ",
        "Arrives(a_2, GreenhouseBash) ∧ Rejects(Sam, Ginger) ∧ Approaches(Sam, Ginger) ∧ BreaksArm(Ginger, Sam) ::: Brigitte arrives to find Sam rejecting Ginger's advances; as he approaches Ginger, she breaks his arm.  ",
        "InfectsSelf(a_2) ∧ PleadNotTo(Sam, a_2) ::: In despair, Brigitte infects herself as Sam pleads with her not to.  ",
        "Leaves(a_2, sisters) ∧ Leaves(Sam, sisters) ∧ KnocksOut(Sam, Ginger, shovel) ::: As the sisters leave, Sam knocks Ginger out with a shovel.  ",
        "TakesBack(a_2, Sam, Ginger, FitzgeraldHouse) ∧ PrepareMoreCure(a_2, Sam, cure) ::: Brigitte and Sam take Ginger back to the Fitzgerald house in his van and prepare more of the cure."
      ]
    },
    {
      "id": "cf09f10dcf0a2d000a7d2a0fc776f16a0e5a86be",
      "paragraph_id": 5,
      "fols": [
        "Predicates:  ",
        "TransformIntoWerewolf(a_1) ::: Ginger fully transforms into a werewolf  ",
        "Escape(a_1, van) ::: Ginger escapes the van  ",
        "Aware(a_2, TransformIntoWerewolf(a_1)) ::: Brigitte is aware that Ginger has transformed into a werewolf  ",
        "Aware(a_x, TransformIntoWerewolf(a_1)) ::: Sam is aware that Ginger has transformed into a werewolf (a_x denotes Sam, see below)  ",
        "Hide(a_2, pantry) ::: Brigitte hides in the pantry  ",
        "Hide(a_x, pantry) ::: Sam hides in the pantry  ",
        "Make(a_x, b_2) ::: Sam makes the cure  ",
        "Find(a_x, a_1) ::: Sam goes to find Ginger  ",
        "Mutilate(a_1, a_x) ::: Ginger mutilates Sam  ",
        "PickUp(a_2, syringe) ::: Brigitte picks up the dropped syringe  ",
        "Follow(a_2, bloodTrail, downstairs) ::: Brigitte follows the blood trail downstairs  ",
        "Find(a_2, a_x) ::: Brigitte finds injured and bloody Sam  ",
        "TrySaveByDrinkingBlood(a_2, a_x) ::: Brigitte tries to save Sam by drinking his blood  ",
        "FailToGoThroughWith(a_2, TrySaveByDrinkingBlood(a_2, a_x)) ::: Brigitte cannot go through with drinking Sam’s blood  ",
        "See(a_1, Revulsion(a_2)) ::: Ginger sees Brigitte’s revulsion  ",
        "KillByBitingJugular(a_1, a_x) ::: Ginger kills Sam by biting him in the jugular  ",
        "",
        "Entities:  ",
        "a_0: people (general)  ",
        "a_1: Ginger  ",
        "a_2: Brigitte  ",
        "a_x: Sam (not explicitly given an ID, but needed for clarity)  ",
        "b_2: cure  ",
        "pantry: place (not explicitly given an ID, but referenced)  ",
        "van: place (not explicitly given an ID, but referenced)  ",
        "syringe: object (dropped syringe, not explicitly given an ID)  ",
        "bloodTrail: path (not explicitly given an ID)  ",
        "downstairs: place (not explicitly given an ID)  ",
        "",
        "Premises:  ",
        "TransformIntoWerewolf(a_1) ∧ Escape(a_1, van) ::: Ginger fully transforms into a werewolf on the way home and escapes the van  ",
        "Aware(a_2, TransformIntoWerewolf(a_1)) ∧ Aware(a_x, TransformIntoWerewolf(a_1)) ∧ Hide(a_2, pantry) ∧ Hide(a_x, pantry) ∧ Make(a_x, b_2) ::: Sam and Brigitte are aware Ginger transformed, hide in pantry while Sam makes the cure  ",
        "Find(a_x, a_1) → Mutilate(a_1, a_x) ::: When Sam goes to find Ginger, Ginger mutilates Sam  ",
        "PickUp(a_2, syringe) ∧ Follow(a_2, bloodTrail, downstairs) ∧ Find(a_2, a_x) ::: Brigitte picks up the dropped syringe, follows blood trail downstairs, finds injured Sam  ",
        "TrySaveByDrinkingBlood(a_2, a_x) ∧ FailToGoThroughWith(a_2, TrySaveByDrinkingBlood(a_2, a_x)) ::: Brigitte tries to save Sam by drinking his blood but cannot go through with it  ",
        "See(a_1, Revulsion(a_2)) → KillByBitingJugular(a_1, a_x) ::: Ginger sees Brigitte’s revulsion and kills Sam by biting his jugular  ",
        "",
        "Note:  ",
        "- Sam is not explicitly assigned an ID in the referring expressions, so here denoted as a_x for clarity.  ",
        "- Places like pantry, van, downstairs, syringe, bloodTrail are referenced but not assigned IDs; predicates use them as constants or implicit entities."
      ]
    },
    {
      "id": "cf09f10dcf0a2d000a7d2a0fc776f16a0e5a86be",
      "paragraph_id": 6,
      "fols": [
        "Predicates:  ",
        "Stalks(a_1, a_2) ::: Ginger stalks Brigitte.  ",
        "ReturnsTo(a_2, c_2) ::: Brigitte returns to the childhood room.  ",
        "GrewUpIn(a_0, c_2) ::: They (Ginger and Brigitte) grew up in the childhood room.  ",
        "Using(b_1, a_1) ::: The knife was being used by Ginger.  ",
        "RemoveTailWith(a_1, b_1) ::: Ginger had been using the knife to remove her tail.  ",
        "Finds(a_2, b_1) ::: Brigitte finds the knife.  ",
        "Holds(a_2, b_2, hand1) ::: Brigitte holds the cure in one hand.  ",
        "Holds(a_2, b_1, hand2) ::: Brigitte holds the knife in the other hand.  ",
        "LungesAt(a_1, a_2) ::: Ginger lunges at Brigitte.  ",
        "FatallyStabbedWith(a_1, b_1) ::: Ginger is fatally stabbed with the knife.  ",
        "LaysHeadUpon(a_2, a_1, chest) ::: Brigitte lays her head upon Ginger’s chest.  ",
        "Sobs(a_2) ::: Brigitte sobs.  ",
        "Sister(a_1, a_2) ::: Ginger is Brigitte’s sister.  ",
        "Dying(a_1) ::: Ginger is dying.  ",
        "",
        "Premises:  ",
        "Stalks(a_1, a_2) ∧ ReturnsTo(a_2, c_2) ∧ GrewUpIn(a_0, c_2) ::: Ginger stalks Brigitte, who returns to the childhood room where they grew up.  ",
        "Using(b_1, a_1) ∧ RemoveTailWith(a_1, b_1) ∧ Finds(a_2, b_1) ∧ Holds(a_2, b_2, hand1) ∧ Holds(a_2, b_1, hand2) ::: Brigitte finds the knife Ginger used to remove her tail and holds the cure and knife.  ",
        "LungesAt(a_1, a_2) ∧ FatallyStabbedWith(a_1, b_1) ∧ Dying(a_1) ::: Ginger lunges at Brigitte and is fatally stabbed with the knife.  ",
        "LaysHeadUpon(a_2, a_1, chest) ∧ Sobs(a_2) ∧ Sister(a_1, a_2) ::: Brigitte lays her head on her dying sister’s chest and sobs."
      ]
    }
  ],
  "daa54dd9f8daecd7bcc6f01f3b360a272d5d97a4": [
    {
      "id": "daa54dd9f8daecd7bcc6f01f3b360a272d5d97a4",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "WrittenInParts(b_4, n) ::: The book b_4 is written in n parts.",
        "",
        "Premises:  ",
        "WrittenInParts(b_4, 3) ::: The book is written in three parts."
      ]
    },
    {
      "id": "daa54dd9f8daecd7bcc6f01f3b360a272d5d97a4",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "Amory(a_1) ::: a_1 is Amory Blaine  ",
        "Midwesterner(a_1) ::: Amory is a Midwesterner  ",
        "Young(a_1) ::: Amory is young  ",
        "PromisingFuture(a_1) ::: Amory is convinced he has an exceptionally promising future  ",
        "AttendsBoardingSchool(a_1) ::: Amory attends boarding school  ",
        "AttendsPrinceton(a_1) ::: Amory attends Princeton University  ",
        "Mother(a_2, a_1) ::: Beatrice (a_2) is the mother of Amory (a_1)  ",
        "Eccentric(a_2) ::: Beatrice is eccentric  ",
        "FriendOf(a_3, a_2) ::: Monsignor Darcy (a_3) is a close friend of Beatrice (a_2)  ",
        "ReturnsTo(a_1, b_0) ::: Amory returns to Minneapolis (b_0)  ",
        "MetBefore(a_1, a_4) ::: Amory met Isabelle Borgé (a_4) before (as a little boy)  ",
        "RomanticRelationship(a_1, a_4) ::: Amory and Isabelle have a romantic relationship  ",
        "WritesPoems(a_1) ::: Amory writes poems at Princeton  ",
        "FloweryPoems(a_1) ::: Amory’s poems are increasingly flowery  ",
        "DisenchantedWith(a_1, a_4) ::: Amory is disenchanted with Isabelle  ",
        "DisenchantedWith(a_4, a_1) ::: Isabelle is disenchanted with Amory  ",
        "MetAtProm(a_1, a_4) ::: Amory and Isabelle met again at his prom  ",
        "",
        "Premises:  ",
        "Midwesterner(a_1) ∧ Young(a_1) ∧ PromisingFuture(a_1) ∧ AttendsBoardingSchool(a_1) ∧ AttendsPrinceton(a_1) ::: Amory is a young Midwesterner convinced of a promising future who attends boarding school and Princeton.  ",
        "Mother(a_2, a_1) ∧ Eccentric(a_2) ::: Beatrice is Amory’s eccentric mother.  ",
        "FriendOf(a_3, a_2) ::: Monsignor Darcy is a close friend of Beatrice.  ",
        "ReturnsTo(a_1, b_0) ∧ MetBefore(a_1, a_4) ::: Amory returns to Minneapolis where he had met Isabelle Borgé before.  ",
        "RomanticRelationship(a_1, a_4) ::: Amory and Isabelle start a romantic relationship.  ",
        "WritesPoems(a_1) ∧ FloweryPoems(a_1) ::: At Princeton, Amory writes increasingly flowery poems.  ",
        "MetAtProm(a_1, a_4) ∧ DisenchantedWith(a_1, a_4) ∧ DisenchantedWith(a_4, a_1) ::: Amory and Isabelle become disenchanted with each other after meeting again at his prom."
      ]
    },
    {
      "id": "daa54dd9f8daecd7bcc6f01f3b360a272d5d97a4",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "ShippedOverseas(a_1) ::: Amory is shipped overseas.  ",
        "ServeInArmy(a_1, b_3) ::: Amory serves in the army in World War I.  ",
        "WarEndedBeforeReturn(b_3, a_0) ::: The war ended while Fitzgerald was still stationed on Long Island.  ",
        "BayonetInstructor(a_1) ::: Amory was a bayonet instructor.  ",
        "StationedOnLongIsland(a_0) ::: Fitzgerald was stationed on Long Island.  ",
        "",
        "Premises:  ",
        "ShippedOverseas(a_1) ∧ ServeInArmy(a_1, b_3) ::: Following their break-up, Amory is shipped overseas to serve in the army in World War I.  ",
        "WarEndedBeforeReturn(b_3, a_0) ∧ StationedOnLongIsland(a_0) ::: The war ended while Fitzgerald was still stationed on Long Island.  ",
        "BayonetInstructor(a_1) ::: Amory was a bayonet instructor (stated later in the book)."
      ]
    },
    {
      "id": "daa54dd9f8daecd7bcc6f01f3b360a272d5d97a4",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "Poor(a_1) ::: Amory is poor.  ",
        "Relationship(a_1, a_2) ::: There is a relationship between Amory and Rosalind Connage.  ",
        "Collapses(Relationship(a_1, a_2)) ::: The relationship between Amory and Rosalind Connage collapses.  ",
        "DecidesToMarry(a_2, a_2, a_2) ::: Rosalind Connage decides to marry a wealthy man (represented as a_2 marries a_2 is ambiguous, so better to use a predicate Marry(a_2, a_2) or Marry(a_2, a_2) with wealthy man as entity). Instead, define:  ",
        "WealthyMan(a_2) ::: a_2 is a wealthy man (but a_2 is Rosalind Connage, so we need a separate entity for wealthy man, say a_4).  ",
        "Marry(a_2, a_4) ::: Rosalind Connage decides to marry a wealthy man (a_4).  ",
        "Mentor(a_3, a_1) ::: Monsignor Darcy is mentor of Amory.  ",
        "Dies(a_3) ::: Monsignor Darcy has died.  ",
        "Lament(b_5) ::: b_5 is a lament.  ",
        "IconicLament(a_1, b_5) ::: Amory's lament is iconic.  ",
        "KnowsSelf(a_1) ::: Amory knows himself.  ",
        "",
        "Refering expressions:  ",
        "People: a_0, Amory: a_1, Rosalind Connage: a_2, Monsignor Darcy: a_3, Wealthy man: a_4  ",
        "Other entities: b_0, New York: b_1, war: b_3, book: b_4, lament: b_5  ",
        "",
        "Rules:  ",
        "If Amory is poor then the relationship between Amory and Rosalind Connage collapses.  ",
        "",
        "Premises:  ",
        "Poor(a_1) → Collapses(Relationship(a_1, a_2)) ::: If Amory is poor then the relationship between Amory and Rosalind Connage collapses.  ",
        "Relationship(a_1, a_2) ∧ Poor(a_1) → Collapses(Relationship(a_1, a_2)) ::: The relationship exists and collapses if Amory is poor.  ",
        "DecidesToMarry(a_2, a_4) ∧ WealthyMan(a_4) ::: Rosalind Connage decides to marry a wealthy man.  ",
        "Mentor(a_3, a_1) ∧ Dies(a_3) ::: Monsignor Darcy is Amory's mentor and has died.  ",
        "IconicLament(a_1, b_5) ∧ Lament(b_5) ∧ KnowsSelf(a_1) ::: Amory's iconic lament expresses \"I know myself, but that is all\"."
      ]
    }
  ],
  "e1ac7a600860a99c208b96dccc4e4f870c3108cf": [
    {
      "id": "e1ac7a600860a99c208b96dccc4e4f870c3108cf",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "FireStarted(sulaco) ::: A fire starts aboard the Colonial Marine spaceship Sulaco.  ",
        "ComputerLaunchesEscapePod(computer, pod) ::: The computer launches an escape pod.  ",
        "Contains(pod, a_1) ::: The escape pod contains Ellen Ripley.  ",
        "Contains(pod, a_7) ::: The escape pod contains the young girl Newt.  ",
        "Contains(pod, a_8) ::: The escape pod contains Hicks.  ",
        "Contains(pod, a_4) ::: The escape pod contains the damaged android Bishop.  ",
        "InCryonicStasis(a_1) ::: Ellen Ripley is in cryonic stasis.  ",
        "InCryonicStasis(a_7) ::: Newt is in cryonic stasis.  ",
        "InCryonicStasis(a_8) ::: Hicks is in cryonic stasis.  ",
        "InCryonicStasis(a_4) ::: Bishop is in cryonic stasis.  ",
        "ScanShowsFacehuggerAttached(scan, member) ::: Scans show an Alien facehugger attached to one of the crew members.  ",
        "CrashLands(pod, f161) ::: The pod crash-lands on Fiorina \"Fury\" 161.  ",
        "FiorinaFury161IsFacility(f161) ::: Fiorina \"Fury\" 161 is a foundry facility and penal colony.  ",
        "InhabitedBy(f161, maleInmates) ::: Fiorina \"Fury\" 161 is inhabited by male inmates.  ",
        "InmatesRecoverPod(inmates, pod) ::: Inmates recover the pod and its passengers.  ",
        "",
        "Premises:  ",
        "FireStarted(sulaco) ::: A fire starts aboard the Colonial Marine spaceship Sulaco.  ",
        "ComputerLaunchesEscapePod(computer, pod) ∧ Contains(pod, a_1) ∧ Contains(pod, a_7) ∧ Contains(pod, a_8) ∧ Contains(pod, a_4) ∧ InCryonicStasis(a_1) ∧ InCryonicStasis(a_7) ∧ InCryonicStasis(a_8) ∧ InCryonicStasis(a_4) ::: The computer launches an escape pod containing Ripley, Newt, Hicks, and Bishop; all four are in cryonic stasis.  ",
        "∃member ScanShowsFacehuggerAttached(scan, member) ::: Scans show an Alien facehugger attached to one of the members.  ",
        "CrashLands(pod, f161) ∧ FiorinaFury161IsFacility(f161) ∧ InhabitedBy(f161, maleInmates) ::: The pod crash-lands on Fiorina \"Fury\" 161, a foundry facility and penal colony inhabited by male inmates.  ",
        "InmatesRecoverPod(maleInmates, pod) ::: Inmates recover the pod and its passengers."
      ]
    },
    {
      "id": "e1ac7a600860a99c208b96dccc4e4f870c3108cf",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "AwakenedBy(a_1, a_3) ::: Ripley is awakened by Clemens (the prison doctor).  ",
        "Informs(a_3, a_1, SoleSurvivor(a_1)) ::: Clemens informs Ripley that she is the sole survivor.  ",
        "Warns(a_7, a_1, DisruptivePresence(a_1)) ::: Prison warden Harold Andrews warns Ripley that her presence may be disruptive.  ",
        "Requests(a_1, a_3, PerformAutopsy(b_2)) ::: Ripley requests Clemens to perform an autopsy on Newt (b_2).  ",
        "Asks(a_3, a_1, InvestigatePurpose(b_2)) ::: Clemens asks what they are looking for in Newt’s body.  ",
        "Tells(a_1, a_3, InvestigatingCholera(b_2)) ::: Ripley tells Clemens they are investigating cholera.  ",
        "Fears(a_1, ImpregnatedByAlienEmbryo(b_2)) ::: Ripley secretly fears Newt has been impregnated with an alien embryo.  ",
        "RespondsFirmly(a_3, NoCholeraReported(200Years)) ::: Clemens states no cholera case reported for 200 years.  ",
        "ConductsAutopsy(a_3, b_2) ::: Clemens conducts the autopsy on Newt.  ",
        "NoEmbryoFound(b_2) ::: No alien embryo is found in Newt.  ",
        "FuneralHeld(b_2) ::: A funeral is held for Newt.  ",
        "FuneralHeld(b_3) ::: A funeral is held for Hicks (b_3).  ",
        "BodiesCrematedInFacilityFurnace({b_2, b_3}, c_2) ::: Bodies of Newt and Hicks are cremated in the facility furnace.  ",
        "AlienBurstsOutOfChest(b_0, a_8) ::: An alien bursts out of Spike’s chest (a_8).  ",
        "KillsSeveralMembers(b_0) ::: The alien kills several members of the colony.  ",
        "ReturnsToDerangedState(a_8) ::: Spike is returned to a deranged state.  ",
        "Reactivates(a_1, a_4) ::: Ripley re-activates Bishop.  ",
        "Confirms(a_4, AlienCameWithThemToFiorina) ::: Bishop confirms an alien came with them to Fiorina in the escape pod.  ",
        "Informs(a_1, a_7, EncountersWithAliens) ::: Ripley informs Harold Andrews of her encounters with the aliens.  ",
        "SuggestsWorkTogetherToHuntKill(a_1, a_0) ::: Ripley suggests everyone work together to hunt down and kill the alien.  ",
        "DoesNotBelieveStory(a_7, a_1) ::: Harold Andrews does not believe Ripley’s story.  ",
        "ExplainsNoWeaponsAndHopeIsRescueShip(a_7) ::: Andrews explains the facility has no weapons and the only hope is the rescue ship sent for Ripley by Weyland-Yutani Corporation.  ",
        "",
        "Premises:  ",
        "∀x ∀y (AlienBurstsOutOfChest(b_0, x) → (KillsSeveralMembers(b_0) ∧ ReturnsToDerangedState(x)))  ",
        "::: If an alien bursts out of a person's chest then the alien kills several members of the colony and returns the person to a deranged state.  ",
        "",
        "Reactivates(a_1, a_4) → Confirms(a_4, AlienCameWithThemToFiorina)  ",
        "::: If Ripley re-activates Bishop then Bishop confirms that an alien came with them to Fiorina in the escape pod.  ",
        "",
        "(Informs(a_1, a_7, EncountersWithAliens) ∧ SuggestsWorkTogetherToHuntKill(a_1, a_0))  ",
        "→ (DoesNotBelieveStory(a_7, a_1) ∧ ExplainsNoWeaponsAndHopeIsRescueShip(a_7))  ",
        "::: If Ripley informs Harold Andrews of her encounters with the aliens and suggests everyone work together to hunt down and kill the alien then Harold Andrews does not believe her story and explains that the facility has no weapons and the only hope is the rescue ship sent for Ripley by Weyland-Yutani Corporation."
      ]
    },
    {
      "id": "e1ac7a600860a99c208b96dccc4e4f870c3108cf",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "Alien(b_0) ::: b_0 is the Alien creature.  ",
        "Kills(x, y) ::: x kills y.  ",
        "Examines(x, y) ::: x examines y.  ",
        "Spares(x, y) ::: x spares y.  ",
        "Retreats(x) ::: x retreats.  ",
        "Orders(x, y, z) ::: x orders y to do z.  ",
        "AmbushedAndKilled(x, y) ::: x is ambushed and killed by y.  ",
        "Rallies(x, y) ::: x rallies y.  ",
        "Proposes(x, y) ::: x proposes y.  ",
        "PourInto(x, y, z) ::: x pours y into z.  ",
        "Ignite(x) ::: x is ignited.  ",
        "CausesExplosion(x) ::: x causes an explosion.  ",
        "KilledInExplosion(x) ::: x is killed in the explosion.  ",
        "Helps(x, y) ::: x helps y.  ",
        "NotFeelingWell(x) ::: x is not feeling well.  ",
        "ScansUsingMedicalEquipment(x) ::: x scans herself using the escape pod's medical equipment.  ",
        "DiscoversEmbryo(x, y) ::: x discovers the embryo y growing inside herself.  ",
        "HopesToTurnIntoBioweapon(x, y) ::: x hopes to turn y into a biological weapon.  ",
        "AdultAlien(b_2) ::: b_2 is the adult Alien.  ",
        "",
        "Premises:  ",
        "Kills(b_0, a_3) ::: The Alien kills Clemens (a_3).  ",
        "Examines(b_0, a_1) ∧ Spares(b_0, a_1) ∧ Retreats(b_0) ::: The Alien examines Ripley (a_1), spares her, and retreats.  ",
        "Orders(a_7, a_3, TakeBackToInfirmary(a_1)) ::: Andrews (a_7) orders Aaron (a_3) to take Ripley (a_1) back to the infirmary.  ",
        "AmbushedAndKilled(a_3, b_0) ::: Aaron (a_3) is ambushed and killed by the Alien (b_0).  ",
        "Rallies(a_1, inmates) ∧ Proposes(a_1, PourInto(inmates, flammable_toxic_waste, ventilation_system) ∧ Ignite(ventilation_system)) ::: Ripley rallies the inmates and proposes pouring flammable toxic waste into the ventilation system and igniting it.  ",
        "CausesExplosion(b_0) ∧ ∃x (KilledInExplosion(x)) ::: The Alien's intervention causes an explosion and several inmates are killed.  ",
        "Helps(a_3, a_1) ::: Aaron helps Ripley.  ",
        "NotFeelingWell(a_1) ::: Ripley has not been feeling well.  ",
        "ScansUsingMedicalEquipment(a_1) ∧ DiscoversEmbryo(a_1, b_1) ::: Ripley scans herself and discovers the embryo of an Alien Queen (b_1) growing inside her.  ",
        "ScansUsingMedicalEquipment(a_1) ∧ DiscoversEmbryo(a_1, b_1) → HopesToTurnIntoBioweapon(a_6, b_1 ∧ b_2) ::: If Ripley scans herself and discovers the embryo, then Weyland-Yutani (a_6) hopes to turn the Queen embryo and the adult Alien into a biological weapon."
      ]
    },
    {
      "id": "e1ac7a600860a99c208b96dccc4e4f870c3108cf",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "Kill(x, y) ::: x kills y.  ",
        "Beg(x, y, z) ::: x begs y to do z.  ",
        "Agree(x, y, condition) ::: x agrees to do something under condition.  ",
        "Help(x, y, z) ::: x helps y to do z.  ",
        "FormPlan(x, plan) ::: x forms a plan.  ",
        "Lure(x, y, location) ::: x lures y to location.  ",
        "Trap(x, y, method) ::: x traps y by method.  ",
        "Drown(x, y, substance) ::: x drowns y in substance.  ",
        "Die(x) ::: x dies.  ",
        "Distract(x, y) ::: x distracts y.  ",
        "TearApart(x, y) ::: x tears y apart.  ",
        "Pour(x, substance, onto) ::: x pours substance onto something.  ",
        "CoveredIn(x, substance) ::: x is covered in substance.  ",
        "Escape(x, location) ::: x escapes from location.  ",
        "Activate(x, device) ::: x activates device.  ",
        "CoolRapidly(x) ::: x cools rapidly.  ",
        "Shatter(x) ::: x shatters.  ",
        "Exoskeleton(x) ::: x is an exoskeleton.  ",
        "Alien(x) ::: x is the Alien.  ",
        "",
        "Premises:  ",
        "Alien(a_0) ::: The Alien is a_0 (the creature).  ",
        "Exoskeleton(a_0) ::: The Alien has an exoskeleton.  ",
        "Beg(a_1, a_3, Kill(a_3, a_1)) ::: Ripley begs Dillon to kill her.  ",
        "Agree(a_3, a_1, Help(a_1, a_3, Kill(a_0, b_0))) ::: Dillon agrees only if Ripley helps kill the adult creature first.  ",
        "FormPlan({a_1, a_3}, lureTrapDrownPlan) ::: Ripley and Dillon form a plan to lure, trap, and drown the creature.  ",
        "Lure({a_1, a_3}, a_0, d_1) ::: They lure the Alien into the facility's molding area.  ",
        "Trap({a_1, a_3}, a_0, closingDoors) ::: They trap the Alien via closing doors.  ",
        "Drown({a_1, a_3}, a_0, moltenLead) ::: They drown the Alien in molten lead.  ",
        "Die(a_0) → (Die(a_2) ∧ Die(a_3) ∧ ∀x ((Prisoner(x) ∧ x â‰  a_2) → Die(x))) ::: The plan results in death of every prisoner except Morse and Dillon.  ",
        "Distract(a_3, a_0) ::: Dillon distracts the Alien.  ",
        "TearApart(a_0, a_3) ::: The Alien tears Dillon apart.  ",
        "Pour(a_2, moltenLead, a_0) ::: Morse pours molten lead onto Alien and Dillon.  ",
        "CoveredIn(a_0, moltenLead) ::: The Alien is covered in molten metal.  ",
        "Escape(a_0, c_2) ::: The Alien escapes the mold/furnace.  ",
        "Activate(a_1, fireSprinklers) ::: Ripley activates fire sprinklers.  ",
        "CoolRapidly(a_0) ::: The Alien's exoskeleton cools rapidly.  ",
        "CoolRapidly(a_0) → (Shatter(a_0) ∧ Die(a_0)) ::: If the Alien's exoskeleton cools rapidly then it shatters and the Alien dies."
      ]
    },
    {
      "id": "e1ac7a600860a99c208b96dccc4e4f870c3108cf",
      "paragraph_id": 4,
      "fols": [
        "Predicates:  ",
        "Arrives(a_6) ::: The Weyland–Yutani commando team arrives.  ",
        "LooksIdentical(a_5, a_4) ::: The man looks identical to Bishop.  ",
        "Creator(a_5, a_4) ::: The man is Bishop's creator.  ",
        "Persuades(a_5, a_1, SurgeryRemove(b_1)) ::: Bishop's creator tries to persuade Ripley to undergo surgery to remove the baby Alien Queen.  ",
        "ClaimsDestroy(a_5, b_1) ::: Bishop's creator claims the baby Alien Queen will be destroyed.  ",
        "KnowsLying(a_1, a_5) ::: Ripley knows Bishop's creator is lying.  ",
        "Refuses(a_1, SurgeryRemove(b_1)) ::: Ripley refuses to undergo surgery.  ",
        "StepsBackOnto(a_1, c_1) ::: Ripley steps back onto the mobile platform.  ",
        "PositionsOver(a_2, c_1, c_2) ::: Morse positions the mobile platform over the furnace.  ",
        "Shoots(a_6, a_2, Leg) ::: The Weyland–Yutani commando team shoots Morse in the leg.  ",
        "Strikes(a_3, a_5, Wrench) ::: Aaron strikes Bishop's creator with a wrench.  ",
        "ShotDead(a_3) ::: Aaron is shot dead.  ",
        "Begs(a_6, a_1, MagnificentSpecimen) ::: The commando team begs Ripley to let them have the \"magnificent specimen.\"  ",
        "NoSuccess(a_6, a_1) ::: The commando team has no success in persuading Ripley.  ",
        "ThrowsInto(a_1, c_2) ::: Ripley throws herself into the furnace.  ",
        "BeginsErupt(b_1, a_1) ::: The baby Alien Queen begins to erupt from Ripley's chest.  ",
        "Grabs(a_1, b_1) ::: Ripley grabs the baby Alien Queen.  ",
        "PreventsEscape(a_1, b_1) ::: Ripley prevents the baby Alien Queen from escaping.  ",
        "FallInto(a_1, c_2) ::: Ripley falls into the furnace.  ",
        "FallInto(b_1, c_2) ::: The baby Alien Queen falls into the furnace.  ",
        "Die(a_1) ::: Ripley dies.  ",
        "Die(b_1) ::: The baby Alien Queen dies.  ",
        "Closed(d_1) ::: The facility is closed.  ",
        "Survives(a_2) ::: Morse is the only surviving inmate.  ",
        "LedAway(a_2) ::: Morse is led away.",
        "",
        "Premises:  ",
        "Arrives(a_6) ::: The Weyland–Yutani commando team arrives.  ",
        "LooksIdentical(a_5, a_4) ∧ Creator(a_5, a_4) ::: The man looks identical to Bishop and is Bishop's creator.  ",
        "Persuades(a_5, a_1, SurgeryRemove(b_1)) ∧ ClaimsDestroy(a_5, b_1) ::: Bishop's creator tries to persuade Ripley to undergo surgery to remove the baby Alien Queen, claiming it will be destroyed.  ",
        "KnowsLying(a_1, a_5) ∧ Refuses(a_1, SurgeryRemove(b_1)) ::: Ripley knows he is lying and refuses surgery.  ",
        "StepsBackOnto(a_1, c_1) ∧ PositionsOver(a_2, c_1, c_2) ::: Ripley steps back onto the mobile platform, which Morse positions over the furnace.  ",
        "Shoots(a_6, a_2, Leg) ::: The commando team shoots Morse in the leg.  ",
        "Strikes(a_3, a_5, Wrench) ∧ ShotDead(a_3) ::: Aaron strikes the man with a wrench and is shot dead.  ",
        "Begs(a_6, a_1, MagnificentSpecimen) ∧ NoSuccess(a_6, a_1) ::: The commando team begs Ripley to let them have the \"magnificent specimen\" with no success.  ",
        "ThrowsInto(a_1, c_2) ∧ BeginsErupt(b_1, a_1) ∧ Grabs(a_1, b_1) ∧ PreventsEscape(a_1, b_1) ∧ FallInto(a_1, c_2) ∧ FallInto(b_1, c_2) ∧ Die(a_1) ∧ Die(b_1) ::: Ripley throws herself into the furnace as the baby Alien Queen erupts from her chest; she grabs it to prevent escape and both fall into the furnace to their deaths.  ",
        "Closed(d_1) ::: The facility is closed.  ",
        "Survives(a_2) ∧ LedAway(a_2) ::: Morse is the only surviving inmate and is led away."
      ]
    }
  ],
  "e62ba8eff570a51d9e5dd256e45012d4d83bfd5f": [
    {
      "id": "e62ba8eff570a51d9e5dd256e45012d4d83bfd5f",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "BoardingHouse(x) ::: x is a boarding house  ",
        "LocatedIn(x, y) ::: x is located in y  ",
        "CoveredWithVines(x) ::: x is covered with vines  ",
        "Owner(x, y) ::: x is the owner of y  ",
        "Widow(x) ::: x is a widow  ",
        "Resident(x, y) ::: x is a resident of y  ",
        "LawStudent(x) ::: x is a law student  ",
        "MysteriousAgitator(x) ::: x is a mysterious agitator  ",
        "RetiredVermicelliMaker(x) ::: x is a retired vermicelli-maker  ",
        "OldMan(x) ::: x is an old man  ",
        "RidiculedBy(x, y) ::: x is ridiculed by y  ",
        "BankruptedToSupport(x, y) ::: x has bankrupted himself to support y  ",
        "WellMarriedDaughters(x) ::: x are well-married daughters  ",
        "DaughterOf(x, y) ::: x is a daughter of y  ",
        "OtherBoarders(x) ::: x are the other boarders (excluding the resident in question)  ",
        "",
        "Premises:  ",
        "BoardingHouse(maisonVauquer) ∧ LocatedIn(maisonVauquer, paris) ∧ CoveredWithVines(maisonVauquer) ∧ Owner(madameVauquer, maisonVauquer) ∧ Widow(madameVauquer) ::: The Maison Vauquer is a boarding house in Paris covered with vines, owned by the widow Madame Vauquer.  ",
        "",
        "Resident(rastignac, maisonVauquer) ∧ LawStudent(rastignac) ::: Eugène de Rastignac is a law student resident.  ",
        "Resident(vautrin, maisonVauquer) ∧ MysteriousAgitator(vautrin) ::: Vautrin is a mysterious agitator resident.  ",
        "Resident(goriot, maisonVauquer) ∧ RetiredVermicelliMaker(goriot) ∧ OldMan(goriot) ::: Jean-Joachim Goriot is an elderly retired vermicelli-maker resident.  ",
        "",
        "∀x ((Resident(x, maisonVauquer) ∧ x â‰  goriot) → OtherBoarders(x)) ::: All residents except Goriot are other boarders.  ",
        "",
        "BankruptedToSupport(goriot, b_1) ∧ WellMarriedDaughters(b_1) ∧ DaughterOf(delphine, goriot) ∧ DaughterOf(anastasie, goriot) ∧ b_1 = {delphine, anastasie} ::: Goriot has bankrupted himself to support his two well-married daughters Delphine and Anastasie.  ",
        "",
        "∀x ((BankruptedToSupport(goriot, b_1) ∧ WellMarriedDaughters(b_1) ∧ OtherBoarders(x)) → RidiculedBy(goriot, x)) ::: The other boarders ridicule Goriot because he bankrupted himself to support his well-married daughters."
      ]
    },
    {
      "id": "e62ba8eff570a51d9e5dd256e45012d4d83bfd5f",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "MovedTo(a_4, c_1) ::: Rastignac moved to Paris.  ",
        "From(a_4, southOfFrance) ::: Rastignac is from the south of France.  ",
        "AttractedTo(a_4, upperClass) ::: Rastignac becomes attracted to the upper class.  ",
        "HasDifficultyFittingIn(a_4) ::: Rastignac has difficulty fitting in.  ",
        "Tutor(cousinMadameDeBeauseant, a_4) ::: Madame de Beauséant tutors Rastignac.  ",
        "Cousin(cousinMadameDeBeauseant, a_4) ::: Madame de Beauséant is Rastignac’s cousin.  ",
        "InWaysOfHighSociety(cousinMadameDeBeauseant, a_4) ::: Madame de Beauséant tutors Rastignac in the ways of high society.  ",
        "EndearsTo(a_4, a_2) ::: Rastignac endears himself to Delphine.  ",
        "DaughterOf(a_2, a_1) ::: Delphine is a daughter of Goriot.  ",
        "ExtractedMoneyFrom(a_4, familyOf(a_4)) ::: Rastignac extracts money from his own family.  ",
        "Poor(familyOf(a_4)) ::: Rastignac’s family is already poor.  ",
        "TriesToConvince(a_5, a_4) ::: Vautrin tries to convince Rastignac.  ",
        "Pursue(a_4, a_victorine) ::: Rastignac to pursue Victorine.  ",
        "Unmarried(a_victorine) ::: Victorine is unmarried.  ",
        "FamilyFortuneBlockedBy(a_victorine, brotherOf(a_victorine)) ::: Victorine’s family fortune is blocked by her brother.  ",
        "OffersToClearWay(a_5, a_4) ::: Vautrin offers to clear the way for Rastignac.  ",
        "KillInDuel(a_5, brotherOf(a_victorine)) ::: Vautrin offers to have Victorine’s brother killed in a duel.  ",
        "",
        "Premises:  ",
        "FamilyFortuneBlockedBy(a_victorine, brotherOf(a_victorine)) → OffersToClearWay(a_5, a_4) ∧ KillInDuel(a_5, brotherOf(a_victorine)) ::: If Victorine’s family fortune is blocked by her brother, then Vautrin offers to clear the way for Rastignac by having Victorine’s brother killed in a duel.  ",
        "",
        "Additional facts from context:  ",
        "MovedTo(a_4, c_1) ∧ From(a_4, southOfFrance) ∧ AttractedTo(a_4, upperClass) ∧ HasDifficultyFittingIn(a_4) ∧ Tutor(cousinMadameDeBeauseant, a_4) ∧ Cousin(cousinMadameDeBeauseant, a_4) ∧ InWaysOfHighSociety(cousinMadameDeBeauseant, a_4) ∧ EndearsTo(a_4, a_2) ∧ DaughterOf(a_2, a_1) ∧ ExtractedMoneyFrom(a_4, familyOf(a_4)) ∧ Poor(familyOf(a_4)) ∧ TriesToConvince(a_5, a_4) ∧ Pursue(a_4, a_victorine) ∧ Unmarried(a_victorine) ∧ FamilyFortuneBlockedBy(a_victorine, brotherOf(a_victorine))"
      ]
    },
    {
      "id": "e62ba8eff570a51d9e5dd256e45012d4d83bfd5f",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "RefusesToGoAlong(a_4) ::: Rastignac refuses to go along with the plot.  ",
        "BalksAtIdea(a_4) ::: Rastignac balks at the idea of having someone killed to acquire their wealth.  ",
        "TakesNote(a_4, a_0) ::: Rastignac takes note of Vautrin's machinations.  ",
        "LessonInHighSociety(a_0) ::: This is a lesson in the harsh realities of high society.  ",
        "PoliceSeek(a_0) ::: Police are seeking Vautrin.  ",
        "MasterCriminal(a_0) ::: Vautrin is a master criminal.  ",
        "Nickname(a_0, \"Trompe-la-Mort\") ::: Vautrin's nickname is Trompe-la-Mort (\"Cheater of Death\").  ",
        "ArrangesToKill(a_0, a_6, a_7) ::: Vautrin arranges for a friend to kill Victorine's brother. (Note: a_6 = friend, a_7 = Victorine's brother, assumed entities)  ",
        "CapturedByPolice(a_0) ::: Vautrin is captured by the police.  ",
        "",
        "Premises:  ",
        "∀x (MasterCriminal(x) → PoliceSeek(x)) ::: Police seek a person if the person is a master criminal.  ",
        "",
        "Additional facts from context (expressed as premises or atomic facts):  ",
        "RefusesToGoAlong(a_4) ∧ BalksAtIdea(a_4) ∧ TakesNote(a_4, a_0) ::: Rastignac refuses to go along with the plot, balks at the idea of killing, and takes note of Vautrin's machinations.  ",
        "LessonInHighSociety(a_0) ::: The situation is a lesson in the harsh realities of high society.  ",
        "PoliceSeek(a_0) ∧ MasterCriminal(a_0) ∧ Nickname(a_0, \"Trompe-la-Mort\") ::: Police are seeking Vautrin, who is a master criminal nicknamed Trompe-la-Mort.  ",
        "ArrangesToKill(a_0, a_6, a_7) ::: Vautrin arranges for a friend to kill Victorine's brother.  ",
        "CapturedByPolice(a_0) ::: Vautrin is captured by the police.  ",
        "",
        "(Note: Entities a_6 and a_7 are introduced to represent \"a friend\" and \"Victorine's brother\" respectively, as they are mentioned but not explicitly listed in the referring expressions.)"
      ]
    },
    {
      "id": "e62ba8eff570a51d9e5dd256e45012d4d83bfd5f",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "Supportive(a_1, a_4) ::: Goriot is supportive of Rastignac  ",
        "InterestIn(a_4, a_2) ::: Rastignac has interest in Goriot's daughter Delphine  ",
        "FuriousWith(a_1, a_5) ::: Goriot is furious with Christophe (her husband)  ",
        "TyrannicalControl(a_5, a_2) ::: Christophe has tyrannical control over Delphine  ",
        "UnableToHelp(a_1) ::: Goriot finds himself unable to help  ",
        "Informs(a_3, a_1) ::: Anastasie informs Goriot  ",
        "SellingOff(a_3, Jewelry(a_5)) ::: Anastasie has been selling off her husband's family jewelry  ",
        "PayDebts(a_3, Lover(a_3)) ::: Anastasie sells jewelry to pay her lover's debts  ",
        "OvercomeWithGrief(a_1) ::: Goriot is overcome with grief at his own impotence  ",
        "SuffersStroke(a_1) ::: Goriot suffers a stroke  ",
        "Impotence(a_1) ::: Goriot's own impotence  ",
        "",
        "Premises:  ",
        "OvercomeWithGrief(a_1) → SuffersStroke(a_1) ::: If Goriot is overcome with grief at his own impotence, then he suffers a stroke."
      ]
    },
    {
      "id": "e62ba8eff570a51d9e5dd256e45012d4d83bfd5f",
      "paragraph_id": 4,
      "fols": [
        "Predicates:  ",
        "Visit(x, y) ::: x visits y  ",
        "LiesOnDeathbed(x) ::: x lies on his deathbed  ",
        "ArriveTooLate(x, e) ::: x arrives too late for event e  ",
        "LoseConsciousness(x) ::: x has lost consciousness  ",
        "RageAbout(x, y) ::: x rages about y  ",
        "FuneralOf(x, e) ::: e is the funeral of x  ",
        "Attend(x, e) ::: x attends event e  ",
        "Servant(x) ::: x is a servant  ",
        "PaidMourner(x) ::: x is a paid mourner  ",
        "SendEmptyCoach(x) ::: x sends an empty coach  ",
        "CoachHasCoatOfArms(x, f) ::: coach x bears family coat of arms f  ",
        "FamilyOf(x, f) ::: x belongs to family f  ",
        "ShortCeremony(e) ::: e is a short ceremony  ",
        "TurnToFace(x, p) ::: x turns to face place p  ",
        "SetOutToDineWith(x, y) ::: x sets out to dine with y  ",
        "DeclareToCity(x, c, m) ::: x declares message m to city c  ",
        "",
        "Entities:  ",
        "a_0: people (general)  ",
        "a_1: Goriot  ",
        "a_2: Delphine  ",
        "a_3: Anastasie  ",
        "a_4: Rastignac  ",
        "a_5: Christophe  ",
        "b_0: groups (general)  ",
        "b_1: Goriot's daughters  ",
        "b_2: paid mourners  ",
        "c_0: places (general)  ",
        "c_1: Paris  ",
        "",
        "Premises:  ",
        "¬Visit(a_2, a_1) ∧ LiesOnDeathbed(a_1)  ",
        "ArriveTooLate(a_3, LoseConsciousness(a_1))  ",
        "RageAbout(a_1, DisrespectBy(a_2, a_3))  ",
        "FuneralOf(a_1, e_funeral)  ",
        "Attend(a_4, e_funeral) ∧ Attend(a_5, e_funeral) ∧ (∃x (PaidMourner(x) ∧ Attend(x, e_funeral) ∧ x âˆˆ b_2))  ",
        "¬(∃x (x âˆˆ b_1 ∧ Attend(x, e_funeral)))  ",
        "∀x (x âˆˆ b_1 → SendEmptyCoach(x))  ",
        "∀x (SendEmptyCoach(x) → CoachHasCoatOfArms(x, FamilyOf(x)))  ",
        "ShortCeremony(e_funeral)  ",
        "TurnToFace(a_4, c_1)  ",
        "SetOutToDineWith(a_4, a_2)  ",
        "DeclareToCity(a_4, c_1, \"À nous deux, maintenant!\")  ",
        "",
        "Explanation:  ",
        "- Delphine does not visit Goriot while he lies on his deathbed.  ",
        "- Anastasie arrives too late, only after Goriot has lost consciousness.  ",
        "- Before dying, Goriot rages about their disrespect (Delphine and Anastasie).  ",
        "- Goriot’s funeral is attended only by Rastignac, Christophe (a servant), and two paid mourners.  ",
        "- Goriot’s daughters do not attend the funeral but send empty coaches bearing their family coat of arms.  ",
        "- After the short funeral ceremony, Rastignac turns to face Paris, sets out to dine with Delphine, and declares to the city the phrase \"À nous deux, maintenant!\""
      ]
    }
  ],
  "ec25b1507cdc7d59d8b9341d93ff59b649c5752f": [
    {
      "id": "ec25b1507cdc7d59d8b9341d93ff59b649c5752f",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "RayEddy(a_0) ::: a_0 is Ray Eddy  ",
        "LilaLittlewolf(a_1) ::: a_1 is Lila Littlewolf  ",
        "FormAlliance(a_0, a_1) ::: Ray Eddy and Lila Littlewolf form an alliance  ",
        "TraffickIllegalImmigrants(a_0, a_1) ::: Ray Eddy and Lila Littlewolf begin trafficking illegal immigrants from Canada into the United States across the frozen St. Lawrence River for $1,200 each  ",
        "",
        "Premises:  ",
        "FormAlliance(a_0, a_1) → TraffickIllegalImmigrants(a_0, a_1) ::: If Ray Eddy and Lila Littlewolf form an alliance then they begin trafficking illegal immigrants from Canada into the United States across the frozen St. Lawrence River for $1,200 each"
      ]
    },
    {
      "id": "ec25b1507cdc7d59d8b9341d93ff59b649c5752f",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "Older(x) ::: x is an older bird  ",
        "DarkerHeadFeathers(x) ::: x has darker feathers on the head  ",
        "ThickerBreastStripes(x) ::: x has thicker breast feather stripes  ",
        "HigherRank(x) ::: x has higher rank status  ",
        "LowerRank(x) ::: x has lower rank status  ",
        "Bullies(x, y) ::: x bullies y  ",
        "InStrictHierarchy(x) ::: x is part of a strict hierarchy  ",
        "InGroup(x, g) ::: x is in group g  ",
        "LongTermCommonLife(x, g) ::: x has long-term common life in group g  ",
        "StatusGraduallyEstablished(g) ::: status is gradually established in group g  ",
        "",
        "Premises:  ",
        "∀x (Older(x) → (DarkerHeadFeathers(x) ∧ ThickerBreastStripes(x))) ::: If a bird is older, then the bird has darker feathers on the head and thicker stripes on the breast feathers  ",
        "∀x ((DarkerHeadFeathers(x) ∧ ThickerBreastStripes(x)) → HigherRank(x)) ::: If a bird has darker feathers on the head and thicker stripes on the breast feathers, then the bird has higher rank status  ",
        "∀x ∀y ((HigherRank(x) ∧ LowerRank(y)) → Bullies(x, y)) ::: If a bird has higher rank status, then the bird bullies birds with lower rank status  ",
        "∀x ∀g (InGroup(x, g) → InStrictHierarchy(x)) ::: Birds in a group usually have strict hierarchies  ",
        "∀g (∀x (InGroup(x, g) ∧ LongTermCommonLife(x, g)) → StatusGraduallyEstablished(g)) ::: Status of birds in a group is gradually established through long-term common life"
      ]
    },
    {
      "id": "ec25b1507cdc7d59d8b9341d93ff59b649c5752f",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "WomenRoute(x) ::: x is the women's route  ",
        "IndianReservationUS(x) ::: x is an Indian reservation in the US  ",
        "IndianReserveCanada(x) ::: x is an Indian reserve in Canada  ",
        "HopeAvoidDetection(x, y) ::: x hopes to avoid detection by y  ",
        "LocalLawEnforcement(y) ::: y is local law-enforcement  ",
        "Smuggle(x, y) ::: x is asked to smuggle y  ",
        "PakistaniCouple(x) ::: x is a Pakistani couple  ",
        "Fearful(x) ::: x is fearful  ",
        "LeavesBehind(x, y) ::: x leaves y behind  ",
        "DuffelBag(x) ::: x is a duffel bag  ",
        "SubFreezingTemperature(x) ::: x is sub-freezing temperature  ",
        "Contains(x, y) ::: x contains y  ",
        "InfantBaby(x) ::: x is an infant baby  ",
        "RetraceRoute(x, y) ::: x retraces route y  ",
        "InsistDead(x, y) ::: x insists y is dead  ",
        "Revive(x, y) ::: x revives y  ",
        "ReunitedWith(x, y) ::: x is reunited with y  ",
        "Shaken(x) ::: x is shaken  ",
        "AnnounceNoParticipation(x) ::: x announces no longer wants to participate  ",
        "Coerce(x, y, z) ::: x coerces y to do z  ",
        "OneMoreCrossing(x) ::: x needs one more crossing  ",
        "FinanceDownPayment(x, y) ::: x finances down payment y  ",
        "MobileHome(x) ::: x is a mobile home  ",
        "JoinForLastJourney(x, y) ::: x joins y for one last journey  ",
        "",
        "Premises:  ",
        "WomenRoute(r) ∧ IndianReservationUS(u) ∧ IndianReserveCanada(c) ∧ RouteFromTo(r, u, c) → HopeAvoidDetection(r, lawEnforcement) ∧ LocalLawEnforcement(lawEnforcement)  ",
        "::: The women hope to avoid detection by local law-enforcement when the women's route takes them from an Indian reservation in the US to an Indian reserve in Canada.  ",
        "",
        "∃x (PakistaniCouple(x) ∧ Smuggle(women, x))  ",
        "::: The women are asked to smuggle a Pakistani couple.  ",
        "",
        "Fearful(ray) ∧ LeavesBehind(ray, bag) ∧ DuffelBag(bag) ∧ SubFreezingTemperature(temp) ∧ Contains(bag, infant) ∧ InfantBaby(infant)  ",
        "::: Ray, fearful, leaves behind the duffel bag in sub-freezing temperatures, which contains their infant baby.  ",
        "",
        "RetraceRoute(lila, route) ∧ RetraceRoute(ray, route)  ",
        "::: Lila and Ray retrace their route.  ",
        "",
        "InsistDead(lila, infant) ∧ Revive(lila, infant)  ",
        "::: Lila insists the baby is dead but revives it moments before reunion.  ",
        "",
        "ReunitedWith(infant, parents)  ",
        "::: The baby is reunited with its parents.  ",
        "",
        "Shaken(lila) ∧ AnnounceNoParticipation(lila)  ",
        "::: Lila is shaken and announces she no longer wants to participate in the smuggling operation.  ",
        "",
        "Coerce(ray, lila, joinLastJourney) ∧ OneMoreCrossing(ray) ∧ FinanceDownPayment(ray, downPayment) ∧ MobileHome(home)  ",
        "::: Ray coerces Lila into joining her for one last journey to finance the down payment on her mobile home."
      ]
    },
    {
      "id": "ec25b1507cdc7d59d8b9341d93ff59b649c5752f",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "PickUp(x, y) ::: x picks up y  ",
        "Crossing(y) ::: y is crossing  ",
        "ClubOwner(x) ::: x is the club owner  ",
        "Shoot(x, y) ::: x shoots y  ",
        "Threaten(x, y, z) ::: x threatens y with z  ",
        "ReEnter(x, y) ::: x is re-entering y  ",
        "Retaliate(x, y) ::: x retaliates against y  ",
        "DriveFastErratic(x) ::: x drives fast and erratically  ",
        "AttentionByPolice(x) ::: x catches the attention of the police  ",
        "TryEludeCapture(x) ::: x tries to elude capture  ",
        "CrossFrozenRiver(x) ::: x crosses the frozen river  ",
        "WheelBreaksThroughIce(x) ::: a wheel of x breaks through the ice  ",
        "AbandonVehicle(x) ::: x abandons the vehicle  ",
        "TakeRefugeAt(x, y) ::: x takes refuge at y  ",
        "AsianWoman(x) ::: x is an Asian woman  ",
        "Car(x) ::: x is a car  ",
        "Gun(x) ::: x is a gun  ",
        "FourWomen(x) ::: x is the group of four women  ",
        "IndianReservation(x) ::: x is the Indian reservation  ",
        "",
        "Premises:  ",
        "PickUp(a_0, AsianWoman_0) ::: The group picks up two Asian women  ",
        "Crossing(AsianWoman_0) ::: The Asian women are crossing  ",
        "ClubOwner(c_owner) ::: There is a club owner  ",
        "Shoot(c_owner, a_0) → Threaten(a_2, c_owner, gun) ::: When the club owner tries to shoot them, Ray threatens him with a gun  ",
        "ReEnter(a_2, car) → Retaliate(c_owner, a_2) ∧ Shoot(c_owner, a_2) ::: When Ray is re-entering her car, the club owner retaliates by shooting Ray  ",
        "DriveFastErratic(a_2) → AttentionByPolice(provincial_police) ::: Ray’s fast and erratic driving catches police attention  ",
        "TryEludeCapture(a_2) → CrossFrozenRiver(a_2) ::: Ray tries to elude capture by crossing the frozen river  ",
        "CrossFrozenRiver(a_2) → WheelBreaksThroughIce(car) ::: One of the wheels breaks through the ice  ",
        "AbandonVehicle(FourWomen) ∧ TakeRefugeAt(FourWomen, IndianReservation) ::: The four women abandon the vehicle and take refuge at the Indian reservation"
      ]
    },
    {
      "id": "ec25b1507cdc7d59d8b9341d93ff59b649c5752f",
      "paragraph_id": 4,
      "fols": [
        "Predicates:  ",
        "PoliceDemandingScapegoat ::: The police are demanding a scapegoat.  ",
        "DecidesExcommunicate(tribalHead, a_1, 5years) ::: The tribal head decides to excommunicate Lila for five years.  ",
        "SmugglingHistory(a_1) ::: Lila has a smuggling history.  ",
        "InvolvedDeathSmugglingHistory(a_1, mohawkHusband) ::: The smuggling history involved the death of Lila's Mohawk husband.  ",
        "FitOfConscience(a_ray) ::: Ray has a fit of conscience.  ",
        "Returns(a_ray) ::: Ray returns.  ",
        "GivesMoneyWithInstructions(a_ray, a_1) ::: Ray gives her share of money to Lila with instructions for taking care of her sons and seeing through purchase plans for a trailer home.  ",
        "SurrenderedToPolice(a_ray) ::: Ray is surrendered to the police.  ",
        "SurrenderedToPolice(illegalImmigrants) ::: The illegal immigrants are surrendered to the police.  ",
        "TrooperSpeculatesJailTime(a_ray, 4months) ::: A trooper speculates Ray will have to serve four months in jail.  ",
        "Calls(a_1, a_2) ::: Lila calls her son T.J.  ",
        "",
        "Premises:  ",
        "PoliceDemandingScapegoat → DecidesExcommunicate(tribalHead, a_1, 5years)  ",
        "SmugglingHistory(a_1) → InvolvedDeathSmugglingHistory(a_1, mohawkHusband)  ",
        "FitOfConscience(a_ray) → Returns(a_ray)  ",
        "Returns(a_ray) → GivesMoneyWithInstructions(a_ray, a_1)  ",
        "(SurrenderedToPolice(a_ray) ∧ SurrenderedToPolice(illegalImmigrants)) → TrooperSpeculatesJailTime(a_ray, 4months)  ",
        "",
        "Additional facts from context (not explicitly in rules but implied):  ",
        "DecidesExcommunicate(tribalHead, a_1, 5years)  ",
        "SmugglingHistory(a_1)  ",
        "FitOfConscience(a_ray)  ",
        "SurrenderedToPolice(a_ray)  ",
        "SurrenderedToPolice(illegalImmigrants)  ",
        "Calls(a_1, a_2)  ",
        "",
        "Explanation:  ",
        "- The first premise encodes the tribal head's decision conditional on police demands.  ",
        "- The second premise links Lila's smuggling history to the death of her Mohawk husband.  ",
        "- The third and fourth premises describe Ray's conscience leading to her return and giving money/instructions to Lila.  ",
        "- The fifth premise states that if Ray and the illegal immigrants are surrendered, a trooper speculates jail time for Ray.  ",
        "- The call from Lila to T.J. is represented as a predicate."
      ]
    },
    {
      "id": "ec25b1507cdc7d59d8b9341d93ff59b649c5752f",
      "paragraph_id": 5,
      "fols": [
        "Predicates:  ",
        "PushesInto(a_1, a_3) ::: Lila pushes her way into her mother-in-law's home.  ",
        "Reclaims(a_1, b_1) ::: Lila reclaims her infant son.  ",
        "ShowsUpAt(a_1, c_1) ::: Lila shows up at the Eddy trailer.  ",
        "ShowsUpAt(b_1, c_1) ::: The infant son shows up at the Eddy trailer.  ",
        "OnPhoneWith(a_2, a_4) ::: T.J. is on the phone with his jailed mother.  ",
        "CompletesWelding(a_2, d_1) ::: T.J. completes the welding of the bicycle-propelled carousel.  ",
        "Carries(d_1, a_5) ::: The carousel bears T.J.'s younger brother.  ",
        "Carries(d_1, b_2) ::: The carousel bears Lila's strapped in baby.  ",
        "Pedals(a_2, d_1) ::: T.J. pedals the carousel.  ",
        "SmilesOn(a_1, a_2) ::: Lila smiles on T.J.  ",
        "Near(d_2, c_2) ::: A truck nears the new trailer home.  ",
        "",
        "Premises:  ",
        "PushesInto(a_1, a_3) ∧ Reclaims(a_1, b_1) ::: Lila pushes into her mother-in-law's home and reclaims her infant son.  ",
        "ShowsUpAt(a_1, c_1) ∧ ShowsUpAt(b_1, c_1) ∧ OnPhoneWith(a_2, a_4) ::: Lila and the baby show up at the Eddy trailer while T.J. is on the phone with his jailed mother.  ",
        "CompletesWelding(a_2, d_1) ∧ Carries(d_1, a_5) ∧ Carries(d_1, b_2) ::: T.J. completes welding a bicycle-propelled carousel bearing his younger brother and Lila's strapped in baby.  ",
        "Pedals(a_2, d_1) ∧ SmilesOn(a_1, a_2) ::: T.J. pedals the carousel while Lila smiles on.  ",
        "Near(d_2, c_2) ::: A truck nears the new trailer home."
      ]
    }
  ],
  "ee7e2ef2ecfa84682214c65ed178f959eaffb8ea": [
    {
      "id": "ee7e2ef2ecfa84682214c65ed178f959eaffb8ea",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "IntroducedTo(x, y, z) ::: x was introduced to y by z  ",
        "Grooms(x, y, z) ::: x grooms y to become z  ",
        "Mole(x) ::: x is a mole inside the Massachusetts State Police  ",
        "AcceptedInto(x, y) ::: x is accepted into y  ",
        "FocusesOn(y, z) ::: y focuses on z  ",
        "OrganizedCrime(z) ::: z is organized crime  ",
        "Neighborhood(b_0) ::: b_0 is a neighborhood  ",
        "IrishNeighborhood(b_0) ::: b_0 is an Irish neighborhood  ",
        "SpecialInvestigationsUnit(c_0) ::: c_0 is the Special Investigations Unit  ",
        "",
        "Premises:  ",
        "IntroducedTo(a_2, OrganizedCrime, a_1) ::: Colin Sullivan was introduced to organized crime by Frank Costello  ",
        "IrishNeighborhood(b_0) ::: The neighborhood of South Boston is an Irish neighborhood  ",
        "Grooms(a_1, a_2, Mole(a_2)) ::: Frank Costello grooms Colin Sullivan to become a mole inside the Massachusetts State Police  ",
        "Grooms(a_1, a_2, Mole(a_2)) → Mole(a_2) ::: If Frank Costello grooms Colin Sullivan to become a mole, then Colin Sullivan becomes a mole  ",
        "AcceptedInto(a_2, c_0) ::: Colin Sullivan is accepted into the Special Investigations Unit  ",
        "FocusesOn(c_0, OrganizedCrime) ::: The Special Investigations Unit focuses on organized crime"
      ]
    },
    {
      "id": "ee7e2ef2ecfa84682214c65ed178f959eaffb8ea",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "PoliceAcademy(x) ::: x is a police academy  ",
        "RecruitedBy(x, y) ::: person x is recruited by person y  ",
        "UndercoverAgent(x) ::: x is an undercover agent  ",
        "FamilyTiesToOrganizedCrime(x) ::: x has family ties to organized crime  ",
        "PerfectInfiltrator(x) ::: x is a perfect infiltrator  ",
        "DropsOut(x, y) ::: person x drops out of institution y  ",
        "DoesTimeInPrison(x) ::: person x does time in prison  ",
        "FakeAssaultCharge(x) ::: person x has a fake assault charge  ",
        "IncreasesCredibility(x) ::: person x increases credibility  ",
        "",
        "Premises:  ",
        "RecruitedBy(a_1, a_3) ∧ RecruitedBy(a_1, a_4) ∧ FamilyTiesToOrganizedCrime(a_1) → PerfectInfiltrator(a_1) ::: Billy Costigan is recruited by Captain Queenan and Staff Sergeant Dignam, and his family ties to organized crime make him a perfect infiltrator.  ",
        "DropsOut(a_1, policeAcademy) ∧ DoesTimeInPrison(a_1) ∧ FakeAssaultCharge(a_1) → IncreasesCredibility(a_1) ::: Billy Costigan drops out of the police academy and does time in prison on a fake assault charge to increase his credibility."
      ]
    },
    {
      "id": "ee7e2ef2ecfa84682214c65ed178f959eaffb8ea",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "Infiltrates(x, y) ::: x infiltrates organization y  ",
        "BeginsRomance(x, y) ::: x begins a romance with y  ",
        "SeesUnderProbation(x, y) ::: x sees y under the terms of x's probation  ",
        "BeginsRelationship(x, y) ::: x begins a relationship with y  ",
        "EscapesStingOperation(x) ::: x escapes a sting operation  ",
        "AwareOf(x, y) ::: x is aware of y's existence  ",
        "ToldToFind(x, y) ::: x is told to find y  ",
        "AsksForInformation(x, y) ::: x asks y for information  ",
        "Informer(y) ::: y is the informer  ",
        "Mole(x) ::: x is a mole  ",
        "",
        "Premises:  ",
        "Infiltrates(a_1, org_a1) ∧ Infiltrates(a_2, org_a2) ::: Each man infiltrates his respective organization (Costigan and Sullivan each infiltrate their own organizations; org_a1 and org_a2 are placeholders for their respective organizations)  ",
        "BeginsRomance(a_2, a_3) ::: Sullivan begins a romance with Madolyn Madden  ",
        "SeesUnderProbation(a_1, a_3) ::: Costigan sees Madolyn Madden under the terms of Costigan's probation  ",
        "BeginsRelationship(a_1, a_3) ::: Costigan and Madolyn begin a relationship  ",
        "EscapesStingOperation(a_0) ::: Costello escapes a sting operation  ",
        "∀x ∀y ((Mole(x) ∧ Mole(y) ∧ x â‰ y) → (AwareOf(x, y) ∧ AwareOf(y, x))) ::: After Costello escapes, each mole becomes aware of the other's existence  ",
        "ToldToFind(a_2, rat) ∧ AsksForInformation(a_2, a_0) ∧ Informer(rat) ::: Sullivan is told to find the \"rat\" and asks Costello for information to identify the informer  ",
        "",
        "Note:  ",
        "- a_0: Costigan  ",
        "- a_1: Sullivan  ",
        "- a_2: Madolyn Madden  ",
        "- a_3: Costello (assumed from context, since Costigan is a_0 and Sullivan is a_1, Costello is the other mole)  ",
        "- org_a1 and org_a2 are placeholders for the respective organizations infiltrated by Costigan and Sullivan.  ",
        "- rat is the informer Sullivan is told to find."
      ]
    },
    {
      "id": "ee7e2ef2ecfa84682214c65ed178f959eaffb8ea",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "Follows(a_1, a_2) ::: Costigan follows Sullivan (or Costello)  ",
        "Gives(a_2, a_1, envelope) ::: Costello gives Sullivan an envelope containing personal information  ",
        "Chases(a_1, a_2, Chinatown) ::: Costigan chases Sullivan through Chinatown  ",
        "KnowsIdentity(a_1, a_2) ::: a_1 knows the identity of a_2  ",
        "KnowsIdentity(a_2, a_1) ::: a_2 knows the identity of a_1  ",
        "Tails(a_2, a_0) ::: Sullivan has Queenan tailed  ",
        "MeetsOnRoof(a_0, a_1) ::: Queenan meets Costigan on the roof of a building  ",
        "OrdersToFlee(a_0, a_1) ::: Queenan orders Costigan to flee  ",
        "ConfrontsAlone(a_0, CostelloMen) ::: Queenan confronts Costello's men alone  ",
        "ThrowsOffBuildingToDeath(CostelloMen, a_0) ::: Costello's men throw Queenan off the building to his death  ",
        "PretendsToJoin(a_1, CostelloMen) ::: Costigan pretends he has come to join Costello's men  ",
        "ReportsNews(News, DelahuntUndercoverCop) ::: Television news reports that Delahunt has been an undercover cop  ",
        "BelievesLie(a_2, Lie) ::: Costello believes the news to be a lie  ",
        "Resigns(a_4) ::: Dignam resigns  ",
        "SuspectsMole(a_4, a_2) ::: Dignam suspects Sullivan is the mole  ",
        "AsksWhyFollowed(a_4, a_0) ::: Dignam is asked why he had Queenan followed  ",
        "",
        "CostelloMen ::: the group of Costello's men (can be treated as a collective entity)",
        "",
        "Premises:  ",
        "OrdersToFlee(a_0, a_1) → ConfrontsAlone(a_0, CostelloMen) ::: If Queenan orders Costigan to flee then Queenan confronts Costello's men alone.  ",
        "ConfrontsAlone(a_0, CostelloMen) → ThrowsOffBuildingToDeath(CostelloMen, a_0) ::: If Costello's men confront Queenan then Costello's men throw Queenan off the building to his death.  ",
        "Follows(a_1, a_2) ∧ Gives(a_2, a_1, envelope) ::: Costigan follows Costello into a porn theater where Costello gives Sullivan an envelope.  ",
        "Chases(a_1, a_2, Chinatown) ::: Costigan chases Sullivan through Chinatown.  ",
        "¬KnowsIdentity(a_1, a_2) ∧ ¬KnowsIdentity(a_2, a_1) ::: Neither man knows the other's identity after the chase.  ",
        "Tails(a_2, a_0) ∧ MeetsOnRoof(a_0, a_1) ::: Sullivan has Queenan tailed to a meeting with Costigan on the roof.  ",
        "OrdersToFlee(a_0, a_1) ::: Queenan orders Costigan to flee.  ",
        "PretendsToJoin(a_1, CostelloMen) ::: Costigan pretends he has come to join Costello's men after they exit.  ",
        "ReportsNews(TelevisionNews, DelahuntUndercoverCop) ::: Television news reports that Delahunt has been an undercover cop.  ",
        "BelievesLie(a_2, Lie) ::: Costello believes the news to be a lie designed to lull him into a sense of security.  ",
        "Resigns(a_4) ∧ SuspectsMole(a_4, a_2) ∧ AsksWhyFollowed(a_4, a_0) ::: Dignam resigns rather than work with Sullivan, whom he suspects is the mole after being asked why he had Queenan followed."
      ]
    },
    {
      "id": "ee7e2ef2ecfa84682214c65ed178f959eaffb8ea",
      "paragraph_id": 4,
      "fols": [
        "Predicates:  ",
        "Reaches(a_2, a_1) ::: Sullivan reaches Costigan using Queenan's phone.  ",
        "RefusesAbortMission(a_1) ::: Costigan refuses to abort his mission.  ",
        "LearnsFromDiary(a_2, a_0) ::: Sullivan learns from Queenan's diary.  ",
        "RoleAsInformant(a_0, a_5) ::: Costello's role as an informant for the FBI. (Note: Costello is not explicitly assigned an ID in the given referring expressions; assume a_5 for Costello.)  ",
        "Worries(a_2, Identity) ::: Sullivan worries about his own identity being revealed.  ",
        "Helps(a_1, a_5) ::: Costigan helps Costello.  ",
        "TracedToDropOff(a_5, b_3) ::: Costello is traced to a cocaine drop-off. (Assuming b_3 for cocaine drop-off.)  ",
        "GunfightBetween(a_5, Police) ::: Gunfight erupts between Costello's crew and police.  ",
        "CrewKilledMost(a_5) ::: Most of Costello's crew are killed.  ",
        "ConfrontedBy(a_5, a_2) ::: Costello is confronted by Sullivan.  ",
        "AdmitsInformant(a_5) ::: Costello admits he is an FBI informant.  ",
        "TriesShoot(a_5, a_2) ::: Costello tries to shoot Sullivan.  ",
        "ShootsMultipleTimes(a_2, a_5) ::: Sullivan shoots Costello multiple times.  ",
        "Dead(a_5) ::: Costello is dead.  ",
        "ApplaudedNextDay(a_2) ::: Sullivan is applauded the next day by everyone on the force.  ",
        "ComesForRestoration(a_1, a_2) ::: Costigan comes to Sullivan for restoration of his true identity and payment.  ",
        "NoticesEnvelope(a_1, a_5, a_2) ::: Costigan notices the envelope from Costello on Sullivan's desk.  ",
        "Flees(a_1) ::: Costigan flees.  ",
        "RealizesEnemy(a_1, a_2) ::: Costigan realizes Sullivan is the enemy.  ",
        "FearsRetaliation(a_2) ::: Sullivan fears retaliation.  ",
        "ErasesRecords(a_2, a_1) ::: Sullivan erases Costigan's records from the police computer system.",
        "",
        "Premises:  ",
        "NoticesEnvelope(a_1, a_5, a_2) → RealizesEnemy(a_1, a_2) ::: If Costigan notices the envelope from Costello on Sullivan's desk, then Costigan realizes Sullivan is the enemy.  ",
        "FearsRetaliation(a_2) → ErasesRecords(a_2, a_1) ::: If Sullivan fears retaliation, then Sullivan erases Costigan's records from the police computer system."
      ]
    },
    {
      "id": "ee7e2ef2ecfa84682214c65ed178f959eaffb8ea",
      "paragraph_id": 5,
      "fols": [
        "Predicates:  ",
        "Unaware(a_2) ::: Sullivan is unaware of some fact.  ",
        "Affair(a_3, a_1) ::: Madolyn had an affair with Costigan.  ",
        "Tells(a_3, a_2, p) ::: Madolyn tells Sullivan proposition p.  ",
        "Pregnant(a_3) ::: Madolyn is pregnant.  ",
        "ListeningTo(a_2, c) ::: Sullivan is listening to CD c.  ",
        "CD(c) ::: c is a CD.  ",
        "Contains(c, r) ::: CD c contains recordings r.  ",
        "Recording(r) ::: r is a recording.  ",
        "RecordedConversation(r, x, y) ::: recording r contains conversation between x and y.  ",
        "Suspicious(a_2, a_3) ::: Sullivan is suspicious of Madolyn.  ",
        "AttemptAssuage(a_2, a_3) ::: Sullivan attempts to assuage Madolyn’s suspicions.  ",
        "Contact(a_2, a_1) ::: Sullivan contacts Costigan.  ",
        "Possess(a_1, r) ::: Costigan possesses recording r.  ",
        "AttorneyLeftPossession(a_4, a_1, r) ::: Costello’s attorney left Costigan in possession of recording r.  ",
        "IntendImplicate(a_1, a_2) ::: Costigan intends to implicate Sullivan.  ",
        "AgreeMeet(a_1, a_2, b) ::: Costigan and Sullivan agree to meet at building b.  ",
        "Building(b) ::: b is a building.  ",
        "DiedAt(c_0, b) ::: Queenan died at building b.  ",
        "Incriminating(r, a_2) ::: recording r is incriminating involving Sullivan.  ",
        "",
        "Premises:  ",
        "AttorneyLeftPossession(a_4, a_1, r) → Possess(a_1, r) ::: Costigan possesses recordings if Costello's attorney left Costigan in possession of the recordings.  ",
        "Possess(a_1, r) ∧ Incriminating(r, a_2) → IntendImplicate(a_1, a_2) ::: Costigan intends to implicate Sullivan if Costigan possesses incriminating recordings involving Sullivan.  ",
        "",
        "Additional premises from context:  ",
        "Affair(a_3, a_1) ∧ Tells(a_3, a_2, Pregnant(a_3)) ∧ Unaware(a_2) ::: Sullivan is unaware that Madolyn had an affair with Costigan when she tells Sullivan that she is pregnant.  ",
        "ListeningTo(a_3, c) ∧ CD(c) ∧ Contains(c, r) ∧ Recording(r) ∧ RecordedConversation(r, a_4, a_2) ∧ Incriminating(r, a_2) ::: Madolyn listens to a CD from Costigan containing incriminating recorded conversations between Costello and Sullivan.  ",
        "AttemptAssuage(a_2, a_3) ∧ ¬(SuccessfulAssuage(a_2, a_3)) ::: Sullivan unsuccessfully attempts to assuage Madolyn’s suspicions.  ",
        "Contact(a_2, a_1) ::: Sullivan contacts Costigan.  ",
        "AgreeMeet(a_1, a_2, b) ∧ Building(b) ∧ DiedAt(c_0, b) ::: Costigan and Sullivan agree to meet at the building where Queenan died."
      ]
    },
    {
      "id": "ee7e2ef2ecfa84682214c65ed178f959eaffb8ea",
      "paragraph_id": 6,
      "fols": [
        "Predicates:  ",
        "Trooper(x) ::: x is a trooper  ",
        "Shoots(x, y) ::: x shoots y  ",
        "RevealsMultipleMoles(x) ::: x reveals that Costello had more than one mole in the police  ",
        "Mole(x) ::: x is a mole  ",
        "IdentifiesAsMole(x, y) ::: x identifies y as the mole  ",
        "RecommendsForMedal(x, y) ::: x recommends y for the Medal of Merit  ",
        "Hostage(x, y) ::: x is a hostage of y  ",
        "LeadsToElevator(x, y) ::: x leads y to the elevator  ",
        "AtLocation(x, l) ::: x is at location l  ",
        "DrawsGunOn(x, y) ::: x draws gun on y  ",
        "JustifiesActionsByExposing(x, y, z) ::: x justifies actions by exposing y as z  ",
        "AsksWhy(x, y, z) ::: x asks y why z  ",
        "DoesNotAnswer(x, y) ::: x does not answer y  ",
        "ShootsInHead(x, y) ::: x shoots y in the head  ",
        "Kills(x, y) ::: x kills y  ",
        "IdentifiesAtHeadquarters(x, y) ::: x identifies y at state police headquarters  ",
        "",
        "Premises:  ",
        "(Shoots(a_4, a_1) ∧ Shoots(a_4, a_0) ∧ RevealsMultipleMoles(a_4)) → Mole(a_4)  ",
        "IdentifiesAsMole(a_2, a_4) → RecommendsForMedal(a_2, a_1)  ",
        "",
        "Additional facts from context (optional for completeness):  ",
        "AtLocation(a_1, roof) ∧ AtLocation(a_2, roof) ∧ AtLocation(a_0, roof)  ",
        "DrawsGunOn(a_0, a_1)  ",
        "JustifiesActionsByExposing(a_1, a_2, moleOfCostello)  ",
        "AsksWhy(a_1, a_0, \"Dignam did not accompany him\") ∧ DoesNotAnswer(a_0, a_1)  ",
        "LeadsToElevator(a_1, a_2)  ",
        "ShootsInHead(a_4, a_1) ∧ Shoots(a_4, a_0)  ",
        "RevealsMultipleMoles(a_4)  ",
        "Kills(a_2, a_4)  ",
        "IdentifiesAtHeadquarters(a_2, a_4)"
      ]
    },
    {
      "id": "ee7e2ef2ecfa84682214c65ed178f959eaffb8ea",
      "paragraph_id": 7,
      "fols": [
        "Predicates:  ",
        "Funeral(c_1) ::: c_1 is a funeral event.  ",
        "At(event, place) ::: event takes place at place.  ",
        "Notice(person1, person2, state) ::: person1 notices that person2 is in state.  ",
        "Tearful(person) ::: person is tearful.  ",
        "Leave(person, place) ::: person leaves place.  ",
        "AttemptTalk(person1, person2) ::: person1 attempts to talk to person2.  ",
        "Ignore(person1, person2) ::: person1 ignores person2.  ",
        "Return(person, place) ::: person returns to place.  ",
        "Ambush(attacker, victim) ::: attacker ambushes victim.  ",
        "Shoot(attacker, victim) ::: attacker shoots victim.  ",
        "Kill(attacker, victim) ::: attacker kills victim.  ",
        "Enter(person, place) ::: person enters place.  ",
        "",
        "Premises:  ",
        "Funeral(c_1) ∧ At(c_1, b_1) ::: Costigan's funeral is a funeral event at the gravesite.  ",
        "Notice(a_2, a_3, Tearful(a_3)) ∧ Tearful(a_3) ::: Sullivan notices that Madolyn is tearful.  ",
        "Leave(a_2, b_1) ∧ Leave(a_3, b_1) ::: Sullivan and Madolyn leave the gravesite.  ",
        "AttemptTalk(a_2, a_3) ∧ Ignore(a_3, a_2) ::: Sullivan attempts to talk to Madolyn but she ignores him.  ",
        "Return(a_2, b_2) ::: Sullivan returns to his apartment.  ",
        "Ambush(a_4, a_2) ∧ Shoot(a_4, a_2) ∧ Kill(a_4, a_2) ∧ Enter(a_2, b_2) ::: When Sullivan enters his apartment, Dignam ambushes, shoots, and kills him."
      ]
    }
  ],
  "ef722cf82033c8e66197209f06a9cb9754be78d9": [
    {
      "id": "ef722cf82033c8e66197209f06a9cb9754be78d9",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "ExPoliceOfficer(x) ::: x is an ex-police officer  ",
        "Officer(x) ::: x is a police officer  ",
        "Detained(x, y) ::: x is detained by y  ",
        "BroughtTo(x, y, z) ::: x is brought by y to z  ",
        "Job(x, j) ::: x has job j  ",
        "BladeRunner(j) ::: j is a Blade Runner  ",
        "TrackDown(x, y) ::: x tracks down y  ",
        "Bioengineered(x) ::: x is bioengineered  ",
        "Replicant(x) ::: x is a replicant  ",
        "Retire(x) ::: x is retired (euphemism for killing)  ",
        "Informed(x, p) ::: x is informed of p  ",
        "IllegalArrival(x) ::: x has come to Earth illegally  ",
        "Nexus6Model(x) ::: x is a Tyrell Corporation Nexus-6 model  ",
        "FourYearLifespan(x) ::: x has a four-year lifespan  ",
        "TryExtendLife(x) ::: x tries to extend life  ",
        "",
        "Premises:  ",
        "ExPoliceOfficer(a_1) ∧ Officer(a_4) ∧ BroughtTo(a_1, a_4, a_0) ::: Deckard is an ex-police officer detained by officer Gaff and brought to his former supervisor Bryant (a_0)  ",
        "Job(a_1, j) ∧ BladeRunner(j) ∧ TrackDown(a_1, b) ∧ Retire(b) → Replicant(b) ∧ Bioengineered(b) ::: Deckard’s job as a Blade Runner is to track down replicants and retire them  ",
        "∀x (Replicant(x) → Bioengineered(x)) ::: If a being is a replicant, then the being is bioengineered  ",
        "∀x (Retire(x) âˆ’> Killed(x)) ::: If a replicant is retired, then the replicant is killed  ",
        "Informed(a_1, ∃x (Replicant(x) ∧ IllegalArrival(x) ∧ Nexus6Model(x) ∧ FourYearLifespan(x) ∧ TryExtendLife(x))) ::: Deckard is informed that four replicants have come to Earth illegally, are Nexus-6 models with four-year lifespan, and may try to extend their lives"
      ]
    },
    {
      "id": "ef722cf82033c8e66197209f06a9cb9754be78d9",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "Watches(a_1, video) ::: Deckard watches a video  ",
        "BladeRunner(a_7) ::: a_7 is a Blade Runner (Holden)  ",
        "Administers(a_7, VoightKampffTest) ::: Holden administers the Voight-Kampff test  ",
        "VoightKampffTest(c_2) ::: c_2 is the Voight-Kampff test  ",
        "DesignedToDistinguish(c_2, replicants, humans) ::: The test is designed to distinguish replicants from humans  ",
        "BasedOnEmotionalResponse(c_2) ::: The test is based on emotional response to questions  ",
        "TestSubject(a_8) ::: a_8 is the test subject (Leon)  ",
        "Shoots(a_8, a_7) ::: Leon shoots Holden  ",
        "AsksAboutMother(a_7, a_8) ::: Holden asks Leon about his mother  ",
        "Wants(a_9, a_1, retire(a_8)) ::: Bryant wants Deckard to retire Leon  ",
        "Wants(a_9, a_1, retire(a_3)) ::: Bryant wants Deckard to retire Roy  ",
        "Wants(a_9, a_1, retire(a_2)) ::: Bryant wants Deckard to retire Pris  ",
        "Refuses(a_1, retire(a_8)) ::: Deckard initially refuses to retire Leon  ",
        "Refuses(a_1, retire(a_3)) ::: Deckard initially refuses to retire Roy  ",
        "Refuses(a_1, retire(a_2)) ::: Deckard initially refuses to retire Pris  ",
        "ThreatensAmbiguously(a_9, a_1) ::: Bryant ambiguously threatens Deckard  ",
        "ReluctantlyAgrees(a_1, retire({a_8, a_3, a_2})) ::: Deckard reluctantly agrees to retire the replicants  ",
        "",
        "Premises:  ",
        "∀x (Wants(a_9, a_1, retire(x)) ∧ ThreatensAmbiguously(a_9, a_1) → ReluctantlyAgrees(a_1, retire(x))) ::: If Bryant wants Deckard to retire replicants and Bryant ambiguously threatens Deckard then Deckard reluctantly agrees to retire the replicants.  ",
        "",
        "Additional facts from context (instantiations):  ",
        "BladeRunner(a_7) ::: Holden is a Blade Runner  ",
        "TestSubject(a_8) ::: Leon is the test subject  ",
        "Shoots(a_8, a_7) ∧ AsksAboutMother(a_7, a_8) ::: Leon shoots Holden after Holden asks about Leon’s mother  ",
        "Wants(a_9, a_1, retire(a_8)) ∧ Wants(a_9, a_1, retire(a_3)) ∧ Wants(a_9, a_1, retire(a_2)) ::: Bryant wants Deckard to retire Leon, Roy, and Pris  ",
        "Refuses(a_1, retire(a_8)) ∧ Refuses(a_1, retire(a_3)) ∧ Refuses(a_1, retire(a_2)) ::: Deckard initially refuses to retire the replicants  ",
        "ThreatensAmbiguously(a_9, a_1) ::: Bryant ambiguously threatens Deckard"
      ]
    },
    {
      "id": "ef722cf82033c8e66197209f06a9cb9754be78d9",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "InvestigationAt(a_1, b_0) ::: Deckard begins his investigation at the Tyrell Corporation.  ",
        "AssistantOf(a_5, a_7) ::: Rachael is an assistant of Dr. Eldon Tyrell (a_7).  ",
        "ExperimentalReplicant(a_5) ::: Rachael is an experimental replicant.  ",
        "BelievesHuman(a_5) ::: Rachael believes herself to be human.  ",
        "GivenFalseMemories(a_5) ::: Rachael has been given false memories.  ",
        "RequiresExtensiveTest(a_5) ::: Rachael requires a more extensive test to determine replicant status.  ",
        "",
        "Premises:  ",
        "InvestigationAt(a_1, b_0) ::: Deckard begins his investigation at the Tyrell Corporation.  ",
        "AssistantOf(a_5, a_7) ::: Rachael is Dr. Eldon Tyrell's assistant.  ",
        "ExperimentalReplicant(a_5) ∧ BelievesHuman(a_5) ::: Rachael is an experimental replicant who believes herself to be human.  ",
        "GivenFalseMemories(a_5) ::: Rachael has been given false memories to provide an \"emotional cushion\".  ",
        "∀x ((ExperimentalReplicant(x) ∧ GivenFalseMemories(x)) → RequiresExtensiveTest(x)) ::: If a replicant is given false memories, then the replicant requires a more extensive test to determine replicant status.  ",
        "GivenFalseMemories(a_5) ∧ ExperimentalReplicant(a_5) → RequiresExtensiveTest(a_5) ::: Therefore, Rachael requires a more extensive test."
      ]
    },
    {
      "id": "ef722cf82033c8e66197209f06a9cb9754be78d9",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "SearchFor(x, y) ::: x searches for y  ",
        "ForceExtendLives(x, y) ::: x forces y to extend lives (of x or others)  ",
        "Investigate(x, y) ::: x investigates y  ",
        "LearnOf(x, y) ::: x learns of y  ",
        "WorksCloselyWith(x, y) ::: x works closely with y  ",
        "Visit(x, y) ::: x visits y  ",
        "ProveHumanity(x, y) ::: x proves humanity to y  ",
        "Show(x, y) ::: x shows y (an object or evidence)  ",
        "Reveal(x, y) ::: x reveals y (a fact or information)  ",
        "LeaveInTears(x, y) ::: x leaves y in tears  ",
        "Locate(x, y) ::: x locates y  ",
        "Manipulate(x, y) ::: x manipulates y  ",
        "Apartment(x) ::: x is an apartment  ",
        "FamilyPhoto(x) ::: x is a family photo  ",
        "ImplantsFrom(x, y) ::: x’s memories are implants from y  ",
        "GiftedGeneticDesigner(x) ::: x is a gifted genetic designer  ",
        "ReplicantEyeLab(x) ::: x is a replicant eye-manufacturing laboratory  ",
        "",
        "Premises:  ",
        "SearchFor(a_3, tyrell) ∧ SearchFor(a_1, replicants) ∧ ForceExtendLives(a_3, tyrell) ::: The replicants (Roy and Leon) search for Tyrell to force him to extend their lives.  ",
        "Investigate(a_3, replicantEyeLab) ∧ LearnOf(a_3, a_6) ::: Roy and Leon investigate a replicant eye-manufacturing laboratory and learn of Sebastian.  ",
        "GiftedGeneticDesigner(a_6) ∧ WorksCloselyWith(a_6, tyrell) ::: Sebastian is a gifted genetic designer who works closely with Tyrell.  ",
        "Visit(a_5, a_1) ∧ ProveHumanity(a_5, a_1) ∧ Show(a_5, familyPhoto) ::: Rachael visits Deckard to prove her humanity by showing him a family photo.  ",
        "Reveal(a_1, ImplantsFrom(memories(a_5), nieceOf(tyrell))) ::: Deckard reveals that Rachael’s memories are implants from Tyrell’s niece.  ",
        "LeaveInTears(a_5, a_1) ::: Rachael leaves Deckard’s apartment in tears.  ",
        "Locate(a_2, a_6) ∧ Manipulate(a_2, a_6) ::: Pris locates Sebastian and manipulates him to gain his trust.  ",
        "",
        "Note:  ",
        "- a_1 = Deckard  ",
        "- a_2 = Pris  ",
        "- a_3 = Roy  ",
        "- a_5 = Rachael  ",
        "- a_6 = Sebastian  ",
        "- tyrell is an implicit entity (not assigned an ID here)  ",
        "- replicants refers collectively to Roy and Leon (a_3 and another not explicitly named)  ",
        "- familyPhoto is an object shown by Rachael  ",
        "- memories(a_5) denotes Rachael’s memories"
      ]
    },
    {
      "id": "ef722cf82033c8e66197209f06a9cb9754be78d9",
      "paragraph_id": 4,
      "fols": [
        "Predicates:  ",
        "Finds(x, y) ::: x finds y  ",
        "PhotoOf(y, z) ::: y is a photo of z  ",
        "SyntheticSnakeScale(y) ::: y is a synthetic snake scale  ",
        "LeadsTo(y, z) ::: y leads to place z  ",
        "WorksAt(z, w) ::: person z works at place w  ",
        "Kills(x, y) ::: x kills y  ",
        "Tells(x, y, z) ::: x tells y to do z  ",
        "DisappearedFrom(x, y) ::: x has disappeared from organization y  ",
        "Spots(x, y) ::: x spots y  ",
        "Attacks(x, y) ::: x attacks y  ",
        "Uses(x, y, z) ::: x uses object y to do action z  ",
        "ReturnsTo(x, y) ::: x returns to place y  ",
        "PromisesNotToHunt(x, y) ::: x promises not to hunt y  ",
        "TriesToLeave(x) ::: x tries to leave  ",
        "Restrains(x, y) ::: x physically restrains y  ",
        "ForcesToKiss(x, y) ::: x forces y to kiss x  ",
        "",
        "Premises:  ",
        "Finds(deckard, photoZhora) ∧ PhotoOf(photoZhora, zhora) ∧ Finds(deckard, snakeScale) ∧ SyntheticSnakeScale(snakeScale) ∧ LeadsTo(snakeScale, stripClub) ∧ WorksAt(zhora, stripClub) ::: While searching Leon's hotel room, Deckard finds a photo of Zhora and a synthetic snake scale that leads him to a strip club where Zhora works.  ",
        "",
        "Kills(deckard, zhora) ::: Deckard kills Zhora.  ",
        "",
        "DisappearedFrom(rachael, tyrellCorporation) ∧ Tells(bryant, deckard, retire(rachael)) ::: Bryant tells Deckard to retire Rachael if Rachael has disappeared from the Tyrell Corporation.  ",
        "",
        "Spots(deckard, rachael) ::: Deckard spots Rachael in a crowd.  ",
        "",
        "Attacks(leon, deckard) ::: Deckard is attacked by Leon.  ",
        "",
        "Uses(rachael, deckardPistol, kills(leon)) ::: Rachael kills Leon using Deckard's dropped pistol.  ",
        "",
        "ReturnsTo(rachael, deckardApartment) ∧ ReturnsTo(deckard, deckardApartment) ::: The two return to Deckard's apartment.  ",
        "",
        "PromisesNotToHunt(deckard, rachael) ::: Deckard promises not to hunt Rachael.  ",
        "",
        "TriesToLeave(rachael) ::: Rachael abruptly tries to leave.  ",
        "",
        "Restrains(deckard, rachael) ∧ ForcesToKiss(deckard, rachael) ::: Deckard physically restrains Rachael, forcing her to kiss him."
      ]
    },
    {
      "id": "ef722cf82033c8e66197209f06a9cb9754be78d9",
      "paragraph_id": 5,
      "fols": [
        "Predicates:  ",
        "HasMethuselahSyndrome(x) ::: x has \"Methuselah Syndrome\" (a genetic premature aging disorder).  ",
        "LifeCutShort(x) ::: x's life will be cut short.  ",
        "Tells(x, y, z) ::: x tells y that z.  ",
        "SympatheticTo(x, y) ::: x is sympathetic to y's plight.  ",
        "Reveals(x, y) ::: x reveals y.  ",
        "GainEntrance(x, y) ::: x gains entrance into y.  ",
        "Demands(x, y, z) ::: x demands z from y.  ",
        "TellsImpossible(x, y, z) ::: x tells y that z is impossible.  ",
        "Confesses(x, y) ::: x confesses y.  ",
        "Dismisses(x, y) ::: x dismisses y.  ",
        "Praises(x, y, z) ::: x praises y for z.  ",
        "Kisses(x, y) ::: x kisses y.  ",
        "Kills(x, y) ::: x kills y.  ",
        "RunsFor(x, y) ::: x runs for y.  ",
        "Follows(x, y) ::: x follows y.  ",
        "RidesElevatorDownAlone(x) ::: x rides the elevator down alone.  ",
        "ImpliesViaPoliceRadio(x, y, z) ::: x implies via police radio that y did z.  ",
        "",
        "Premises:  ",
        "∀x (HasMethuselahSyndrome(x) → LifeCutShort(x)) ::: If a person has \"Methuselah Syndrome\", then the person's life will be cut short.  ",
        "",
        "Tells(roy, pris, othersDead) ::: Roy tells Pris the others are dead.  ",
        "SympatheticTo(sebastian, plightOfOthers) ::: Sebastian is sympathetic to their plight.  ",
        "Reveals(sebastian, HasMethuselahSyndrome(sebastian) ∧ LifeCutShort(sebastian)) ::: Sebastian reveals that because of \"Methuselah Syndrome\", his life will be cut short.  ",
        "GainEntrance(sebastian, tyrellPenthouse) ∧ GainEntrance(roy, tyrellPenthouse) ::: Sebastian and Roy gain entrance into Tyrell's secure penthouse.  ",
        "Demands(roy, tyrell, moreLife) ::: Roy demands more life from Tyrell.  ",
        "TellsImpossible(tyrell, roy, moreLife) ::: Tyrell tells Roy that it is impossible.  ",
        "Confesses(roy, questionableThings) ::: Roy confesses that he has done \"questionable things\".  ",
        "Dismisses(tyrell, questionableThings) ::: Tyrell dismisses Roy's questionable things.  ",
        "Praises(tyrell, roy, advancedDesignAndAccomplishments) ::: Tyrell praises Roy's advanced design and accomplishments in his short life.  ",
        "Kisses(roy, tyrell) ::: Roy kisses Tyrell.  ",
        "Kills(roy, tyrell) ::: Roy kills Tyrell.  ",
        "RunsFor(sebastian, elevator) ::: Sebastian runs for the elevator.  ",
        "Follows(roy, sebastian) ::: Roy follows Sebastian.  ",
        "RidesElevatorDownAlone(roy) ::: Roy rides the elevator down alone.  ",
        "ImpliesViaPoliceRadio(bryant, roy, Kills(roy, sebastian)) ::: Bryant implies via police radio that Roy also kills Sebastian."
      ]
    },
    {
      "id": "ef722cf82033c8e66197209f06a9cb9754be78d9",
      "paragraph_id": 6,
      "fols": [
        "Predicates:  ",
        "Ambushes(a_2, a_1) ::: Pris ambushes Deckard.  ",
        "Returns(a_3) ::: Roy returns.  ",
        "Kills(a_1, a_2) ::: Deckard kills Pris.  ",
        "Chases(a_3, a_1) ::: Roy chases Deckard.  ",
        "OnRoof(a_1, b_2) ::: Deckard is on the roof.  ",
        "OnRoof(a_3, b_2) ::: Roy is on the roof.  ",
        "TriesJump(a_1, b_3) ::: Deckard tries to jump to adjacent roof.  ",
        "MissesJump(a_1) ::: Deckard misses the jump.  ",
        "HangsBetweenBuildings(a_1) ::: Deckard is left hanging precariously between buildings.  ",
        "JumpsWithEase(a_3, b_3) ::: Roy makes the jump with ease.  ",
        "Hoists(a_3, a_1, b_2) ::: Roy hoists Deckard onto the roof.  ",
        "Saves(a_3, a_1) ::: Roy saves Deckard.  ",
        "DeliversMonologue(a_3) ::: Roy delivers a monologue about memories lost like tears in rain.  ",
        "Dies(a_3) ::: Roy dies.  ",
        "WatchesSilently(a_1, a_3) ::: Deckard watches silently as Roy dies.  ",
        "Arrives(a_4) ::: Gaff arrives.  ",
        "Shouts(a_4, a_1) ::: Gaff shouts to Deckard.  ",
        "Says(a_4, \"It's too bad she won't live, but then again, who does?\") ::: Gaff says the quoted phrase.  ",
        "ReturnsToApartment(a_1, b_1) ::: Deckard returns to Sebastian's apartment.  ",
        "DoorAjar(b_1) ::: The door of Sebastian's apartment is ajar.  ",
        "SafeAsleep(a_5, b_1) ::: Rachael is safe and asleep in Sebastian's apartment.  ",
        "Leaves(a_1, b_1) ::: Deckard leaves the apartment.  ",
        "Leaves(a_5, b_1) ::: Rachael leaves the apartment.  ",
        "Notices(a_1, c_1) ::: Deckard notices the tin-foil origami unicorn.  ",
        "CallingCard(c_1) ::: The origami unicorn is a calling card.  ",
        "BringsBack(c_1, a_4, a_1) ::: The origami unicorn brings back Gaff's final words to Deckard.  ",
        "LeavesTogether(a_1, a_5, b_4) ::: Deckard and Rachael leave the apartment block.  ",
        "",
        "Premises:  ",
        "(Ambushes(a_2, a_1) ∧ Returns(a_3)) → Kills(a_1, a_2) ::: Deckard kills Pris if Pris ambushes Deckard and Roy returns.  ",
        "Hoists(a_3, a_1, b_2) → Saves(a_3, a_1) ::: Roy saves Deckard if Roy hoists Deckard onto the roof.  ",
        "DeliversMonologue(a_3) → Dies(a_3) ::: Roy dies after delivering a monologue about memories being lost like tears in rain.  ",
        "CallingCard(c_1) ∧ BringsBack(c_1, a_4, a_1) ::: Gaff's origami unicorn is a calling card that brings back Gaff's final words to Deckard.  ",
        "",
        "Additional facts from the narrative (not explicitly in rules but from context):  ",
        "Ambushes(a_2, a_1)  ",
        "Returns(a_3)  ",
        "Chases(a_3, a_1)  ",
        "OnRoof(a_1, b_2)  ",
        "OnRoof(a_3, b_2)  ",
        "TriesJump(a_1, b_3)  ",
        "MissesJump(a_1)  ",
        "HangsBetweenBuildings(a_1)  ",
        "JumpsWithEase(a_3, b_3)  ",
        "Hoists(a_3, a_1, b_2)  ",
        "DeliversMonologue(a_3)  ",
        "Dies(a_3)  ",
        "WatchesSilently(a_1, a_3)  ",
        "Arrives(a_4)  ",
        "Shouts(a_4, a_1)  ",
        "Says(a_4, \"It's too bad she won't live, but then again, who does?\")  ",
        "ReturnsToApartment(a_1, b_1)  ",
        "DoorAjar(b_1)  ",
        "SafeAsleep(a_5, b_1)  ",
        "Leaves(a_1, b_1)  ",
        "Leaves(a_5, b_1)  ",
        "Notices(a_1, c_1)  ",
        "LeavesTogether(a_1, a_5, b_4)"
      ]
    }
  ],
  "f6470b27b43e232e5b4458fb1dd6c194cddb2452": [
    {
      "id": "f6470b27b43e232e5b4458fb1dd6c194cddb2452",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "Veteran(x) ::: x is a World War II veteran  ",
        "Elderly(x) ::: x is elderly  ",
        "FamilyMember(x, y) ::: x is a family member of y  ",
        "Visits(x, y) ::: x visits location y  ",
        "Location(x) ::: x is a location  ",
        "Cemetery(x) ::: x is a cemetery  ",
        "Memorial(x) ::: x is a memorial  ",
        "WalksAround(x, y) ::: x walks around location y  ",
        "Sees(x, y) ::: x sees y  ",
        "Gravestone(x) ::: x is a gravestone  ",
        "CollapsesToKnees(x) ::: x collapses to his knees  ",
        "OverwhelmedByEmotion(x) ::: x is overwhelmed by emotion  ",
        "InLocation(x, y) ::: x is in location y  ",
        "",
        "Premises:  ",
        "Veteran(a_1) ∧ Elderly(a_1) ::: Reiben is an elderly World War II veteran  ",
        "FamilyMember(a_4, a_2) ::: a_4 is Ryan's wife (family member of Ryan)  ",
        "Visits(a_1, b_0) ∧ Visits(a_0, b_0) ::: The veteran and his family visit the Normandy American Cemetery and Memorial (b_0)  ",
        "Cemetery(b_0) ∧ Memorial(b_0) ∧ Location(b_0) ::: Normandy American Cemetery and Memorial is a cemetery, memorial, and location  ",
        "WalksAround(a_1, b_0) ::: The veteran walks around the cemetery  ",
        "Sees(a_1, b_1) ::: The veteran sees Miller's grave  ",
        "Gravestone(b_1) ::: Miller's grave is a gravestone  ",
        "CollapsesToKnees(a_1) ∧ OverwhelmedByEmotion(a_1) ::: The veteran collapses to his knees, overwhelmed by emotion  ",
        "",
        "Additional possible premises (implicit):  ",
        "InLocation(b_1, b_0) ::: Miller's grave is in the cemetery"
      ]
    },
    {
      "id": "f6470b27b43e232e5b4458fb1dd6c194cddb2452",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "FilmFlashesBackToMorning(film, date19440606) ::: The film flashes back to the morning of June 6, 1944.  ",
        "NormandyInvasion(date19440606) ::: June 6, 1944 is the beginning of the Normandy Invasion.  ",
        "AmericanSoldier(x) ::: x is an American soldier.  ",
        "PrepareToLandOn(x, OmahaBeach) ::: x prepares to land on Omaha Beach.  ",
        "SufferHeavilyFrom(x, enemyForces) ::: x suffers heavily from struggle against enemy forces.  ",
        "EnemyForces(germanInfantry) ::: German infantry is an enemy force.  ",
        "EnemyForces(machineGunNests) ::: Machine gun nests are enemy forces.  ",
        "EnemyForces(artilleryFire) ::: Artillery fire is an enemy force.  ",
        "CaptainJohnHMiller(a_3) ::: a_3 is Captain John H. Miller.  ",
        "CompanyCommander(a_3, secondRangerBattalion) ::: a_3 is company commander of the 2nd Ranger Battalion.  ",
        "SurvivesInitialLanding(a_3) ::: a_3 survives the initial landing.  ",
        "AssemblesGroupOfRangers(a_3, group) ::: a_3 assembles a group of his Rangers.  ",
        "PenetrateGermanDefenses(group) ::: The group penetrates the German defenses.  ",
        "LeadsBreakoutFromBeach(a_3) ::: a_3 leads a breakout from the beach.  ",
        "DeadSoldierOnBeach(soldier) ::: soldier is a dead soldier lying face down on the beach.  ",
        "InscriptionOnUniform(soldier, \"S. Ryan\") ::: The uniform of soldier has \"S. Ryan\" inscribed on the back.  ",
        "Name(a_2, \"Ryan\") ::: a_2 is Ryan.  ",
        "",
        "Premises:  ",
        "CaptainJohnHMiller(a_3) ∧ CompanyCommander(a_3, secondRangerBattalion) ∧ SurvivesInitialLanding(a_3) → AssemblesGroupOfRangers(a_3, group) ::: Captain John H. Miller who survives the initial landing assembles a group of his Rangers.  ",
        "AssemblesGroupOfRangers(a_3, group) → LeadsBreakoutFromBeach(a_3) ::: Captain John H. Miller who assembles a group of his Rangers leads a breakout from the beach.  ",
        "∀x (AmericanSoldier(x) ∧ PrepareToLandOn(x, OmahaBeach) → SufferHeavilyFrom(x, germanInfantry) ∧ SufferHeavilyFrom(x, machineGunNests) ∧ SufferHeavilyFrom(x, artilleryFire)) ::: American soldiers preparing to land on Omaha Beach suffer heavily from German infantry, machine gun nests, and artillery fire.  ",
        "DeadSoldierOnBeach(soldier) ∧ InscriptionOnUniform(soldier, \"S. Ryan\") ::: After the battle, a dead soldier lying face down on the beach has \"S. Ryan\" inscribed on the back of his uniform."
      ]
    },
    {
      "id": "f6470b27b43e232e5b4458fb1dd6c194cddb2452",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "GeneralMarshall(a_0) ::: a_0 is General George Marshall  ",
        "BrotherOfRyan(x, a_2) ::: x is a brother of the Ryan family (a_2)  ",
        "KilledInAction(x) ::: x was killed in action  ",
        "MotherOfRyan(a_4, a_2) ::: a_4 is the mother of the Ryan family (a_2)  ",
        "ReceivesTelegramSameDay(a_4, n) ::: a_4 receives n telegrams on the same day  ",
        "PrivateFirstClassJamesFrancisRyan(a_5) ::: a_5 is Private First Class James Francis Ryan  ",
        "Paratrooper(a_5) ::: a_5 is a paratrooper  ",
        "MissingInAction(a_5) ::: a_5 is missing in action  ",
        "LocationNormandy(b_2) ::: b_2 is Normandy  ",
        "InformedOf(a_0, info) ::: a_0 is informed of info  ",
        "ReadsLetter(a_0, letter) ::: a_0 reads letter  ",
        "BixbyLetter(letter) ::: letter is Abraham Lincoln's Bixby letter  ",
        "OrderFindAndSendHome(a_0, a_5) ::: a_0 orders that a_5 must be found and sent home immediately  ",
        "",
        "Premises:  ",
        "KilledInAction(a_1) ∧ KilledInAction(a_3) ∧ KilledInAction(a_6) ∧ BrotherOfRyan(a_1, a_2) ∧ BrotherOfRyan(a_3, a_2) ∧ BrotherOfRyan(a_6, a_2) ∧ MotherOfRyan(a_4, a_2) ∧ ReceivesTelegramSameDay(a_4, 3) ::: Three of the four Ryan brothers were killed in action and their mother is to receive all three telegrams on the same day.  ",
        "Paratrooper(a_5) ∧ MissingInAction(a_5) ::: The fourth son, Private First Class James Francis Ryan, is a paratrooper and missing in action.  ",
        "ReadsLetter(a_0, letter) ∧ BixbyLetter(letter) → OrderFindAndSendHome(a_0, a_5) ::: After General Marshall reads Abraham Lincoln's Bixby letter, he orders that Ryan must be found and sent home immediately."
      ]
    },
    {
      "id": "f6470b27b43e232e5b4458fb1dd6c194cddb2452",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "ReceivesOrders(a_3, FindAndBringBack(a_2)) ::: Miller receives orders to find Ryan and bring him back from the front.  ",
        "Assembles(a_3, CompanyMen) ::: Miller assembles men from his company.  ",
        "MemberOf(a_1, CompanyMen) ::: Reiben is a member of the men assembled by Miller.  ",
        "MemberOf(a_5, CompanyMen) ::: Mike Horvath is a member of the men assembled by Miller.  ",
        "MemberOf(a_6, CompanyMen) ::: Stanley Mellish is a member of the men assembled by Miller.  ",
        "MemberOf(a_7, CompanyMen) ::: Adrian Caparzo is a member of the men assembled by Miller.  ",
        "MemberOf(a_8, CompanyMen) ::: Danny Jackson is a member of the men assembled by Miller.  ",
        "MemberOf(a_9, CompanyMen) ::: Irwin Wade is a member of the men assembled by Miller.  ",
        "MemberOf(a_10, CompanyMen) ::: Timothy Upham is a member of the men assembled by Miller.  ",
        "Role(a_5, T_Sgt) ::: Mike Horvath is a T/Sgt.  ",
        "Role(a_1, PrivateFirstClass) ::: Reiben is a Private First Class.  ",
        "Role(a_6, Private) ::: Stanley Mellish is a Private.  ",
        "Role(a_7, Private) ::: Adrian Caparzo is a Private.  ",
        "Role(a_8, Private) ::: Danny Jackson is a Private.  ",
        "Role(a_9, Medic) ::: Irwin Wade is a medic.  ",
        "Role(a_10, T_5) ::: Timothy Upham is a T/5.  ",
        "Profession(a_10, Cartographer) ::: Timothy Upham is a cartographer.  ",
        "Speaks(a_10, French) ::: Timothy Upham speaks French.  ",
        "Speaks(a_10, German) ::: Timothy Upham speaks German.  ",
        "LoanedFrom(a_10, InfantryDivision29) ::: Timothy Upham is loaned from the 29th Infantry Division.  ",
        "MovesOutTo(a_3, Neuville) ::: Miller moves out to Neuville.  ",
        "Meets(a_3, Squad101stAirborne) ::: Miller and his men meet a squad from the 101st Airborne Division.  ",
        "Dies(a_7) ::: Caparzo dies.  ",
        "CauseOfDeath(a_7, ShotBy(Sniper)) ::: Caparzo dies after being shot by a sniper.  ",
        "",
        "Premises:  ",
        "ReceivesOrders(a_3, FindAndBringBack(a_2)) ::: Miller receives orders to find Ryan and bring him back from the front.  ",
        "Assembles(a_3, CompanyMen) ∧ MemberOf(a_1, CompanyMen) ∧ MemberOf(a_5, CompanyMen) ∧ MemberOf(a_6, CompanyMen) ∧ MemberOf(a_7, CompanyMen) ∧ MemberOf(a_8, CompanyMen) ∧ MemberOf(a_9, CompanyMen) ∧ MemberOf(a_10, CompanyMen) ::: Miller assembles six men from his company including Reiben, Mike Horvath, Stanley Mellish, Adrian Caparzo, Danny Jackson, Irwin Wade, and Timothy Upham.  ",
        "Role(a_5, T_Sgt) ∧ Role(a_1, PrivateFirstClass) ∧ Role(a_6, Private) ∧ Role(a_7, Private) ∧ Role(a_8, Private) ∧ Role(a_9, Medic) ∧ Role(a_10, T_5) ::: The roles of the assembled men.  ",
        "Profession(a_10, Cartographer) ∧ Speaks(a_10, French) ∧ Speaks(a_10, German) ∧ LoanedFrom(a_10, InfantryDivision29) ::: Timothy Upham is a cartographer who speaks French and German and is loaned from the 29th Infantry Division.  ",
        "MovesOutTo(a_3, Neuville) ∧ Meets(a_3, Squad101stAirborne) ::: Miller and his men move out to Neuville and meet a squad from the 101st Airborne Division.  ",
        "Dies(a_7) ∧ CauseOfDeath(a_7, ShotBy(Sniper)) ::: Caparzo dies after being shot by a sniper."
      ]
    },
    {
      "id": "f6470b27b43e232e5b4458fb1dd6c194cddb2452",
      "paragraph_id": 4,
      "fols": [
        "Predicates:  ",
        "Locate(x, y) ::: x locates y  ",
        "MemberOf(x, y) ::: x is a member of y  ",
        "DropZone(x, z) ::: x's drop zone is location z  ",
        "CompanyRallyPoint(x, r) ::: x's company rally point is r  ",
        "Meet(x, y) ::: x meets y  ",
        "FriendOf(x, y) ::: x is a friend of y  ",
        "Defending(x, l) ::: x is defending location l  ",
        "StrategicallyImportant(l) ::: location l is strategically important  ",
        "MachineGunPosition(x) ::: x is a machine gun position  ",
        "Neutralize(x, y) ::: x neutralizes y  ",
        "FatallyWounded(x) ::: x is fatally wounded  ",
        "DeclineToExecute(x, y) ::: x declines to execute y  ",
        "SetFreeOnCondition(x, y, c) ::: x sets free y on condition c  ",
        "GiveUpAsPOW(x) ::: x gives himself up as a prisoner of war  ",
        "FirstAlliedUnitEncountered(x) ::: x is the first Allied unit encountered  ",
        "IntendToDesert(x) ::: x intends to desert  ",
        "Confront(x, y) ::: x confronts y  ",
        "DefuseSituation(x) ::: x defuses the situation  ",
        "DiscloseBackground(x) ::: x discloses his background  ",
        "ReluctantlyDecideToStay(x) ::: x reluctantly decides to stay  ",
        "",
        "Premises:  ",
        "∃a_3 ∃a_2 (Locate(a_3, a_2) ∧ ¬(a_2 is their man)) ::: They locate Private James Ryan, but he is not their man.  ",
        "∃a_x (MemberOf(a_x, RegimentOf(a_2)) ∧ Inform(a_x, DropZone(a_x, Vierville) ∧ CompanyRallyPoint(a_x, r) ∧ CompanyRallyPoint(a_2, r))) ::: They find a member of Ryan's regiment who informs them that his drop zone was at Vierville and that his and Ryan's companies had the same rally point.  ",
        "Meet(a_3, a_y) ∧ FriendOf(a_y, a_2) ∧ Defending(a_2, BridgeOverMerderet) ∧ StrategicallyImportant(BridgeOverMerderet) ∧ Location(Ramelle) ::: Miller meets a friend of Ryan's, who reveals that Ryan is defending a strategically important bridge over the Merderet River in Ramelle.  ",
        "Neutralize(a_3, GermanMachineGunPosition) ::: Miller decides to neutralize a German machine gun position.  ",
        "FatallyWounded(Wade) ::: Wade is fatally wounded in the skirmish.  ",
        "DeclineToExecute(a_3, SteamboatWillie) ∧ SetFreeOnCondition(a_3, SteamboatWillie, GiveUpAsPOW(FirstAlliedUnitEncountered)) ::: Miller declines to execute Steamboat Willie and sets him free on condition that he surrenders as POW to the first Allied unit encountered.  ",
        "IntendToDesert(a_1) ::: Reiben declares his intention to desert.  ",
        "Confront(a_1, Horvath) ::: Reiben confronts Horvath.  ",
        "DefuseSituation(a_3) ∧ DiscloseBackground(a_3) ::: Miller defuses the situation by disclosing his background.  ",
        "ReluctantlyDecideToStay(a_1) ::: Reiben reluctantly decides to stay.  ",
        "",
        "Rule:  ",
        "∀x (SetFreeOnCondition(a_3, x, GiveUpAsPOW(FirstAlliedUnitEncountered)) → GiveUpAsPOW(x)) ::: If a surviving enemy soldier is set free on condition that he surrenders as POW to the first Allied unit encountered, then he must give himself up as POW to the first Allied unit encountered."
      ]
    },
    {
      "id": "f6470b27b43e232e5b4458fb1dd6c194cddb2452",
      "paragraph_id": 5,
      "fols": [
        "Predicates:  ",
        "TakesCommandAndDefendsBridge(x) ::: x takes command and defends the bridge with available manpower and resources.  ",
        "FormsAmbushPositions(x, y) ::: x forms ambush positions throughout location y using men and paratroopers.  ",
        "UsesAmbushWeapons(x, w) ::: x uses weapon w in ambush positions.  ",
        "Manpower(x) ::: x is manpower (men).  ",
        "Paratroopers(x) ::: x is paratroopers.  ",
        "LocationRuinedTown(y) ::: y is the ruined town.  ",
        "WeaponMolotovCocktail(w) ::: w is a Molotov cocktail.  ",
        "WeaponDetonationCord(w) ::: w is a detonation cord.  ",
        "WeaponStickyBomb(w) ::: w is a sticky bomb made from socks and TNT.  ",
        "",
        "Premises:  ",
        "TakesCommandAndDefendsBridge(miller) ::: Miller takes command and defends the bridge with available manpower and resources.  ",
        "FormsAmbushPositions(miller, ruinedTown) ::: Miller forms ambush positions throughout the ruined town using men and paratroopers.  ",
        "UsesAmbushWeapons(miller, molotovCocktail) ∧ UsesAmbushWeapons(miller, detonationCord) ∧ UsesAmbushWeapons(miller, stickyBomb) ::: Miller uses Molotov cocktails, detonation cords, and sticky bombs made from socks and TNT in ambush positions.  ",
        "Manpower(men) ∧ Paratroopers(paratroopers) ∧ LocationRuinedTown(ruinedTown) ::: There are men and paratroopers and a ruined town location.  ",
        "",
        "Additional possible facts (not explicitly requested but consistent):  ",
        "FormsAmbushPositions(miller, ruinedTown) → (UsesAmbushWeapons(miller, molotovCocktail) ∧ UsesAmbushWeapons(miller, detonationCord) ∧ UsesAmbushWeapons(miller, stickyBomb))  ",
        "FormsAmbushPositions(miller, ruinedTown) → (Manpower(men) ∧ Paratroopers(paratroopers))"
      ]
    },
    {
      "id": "f6470b27b43e232e5b4458fb1dd6c194cddb2452",
      "paragraph_id": 6,
      "fols": [
        "Predicates:  ",
        "Arrive(x, y) ::: x (unit) arrives with y (units)  ",
        "InflictHeavyCasualties(x, y) ::: x inflicts heavy casualties on y  ",
        "Killed(x) ::: x is killed  ",
        "Shoot(x, y) ::: x shoots y  ",
        "MortallyWounded(x) ::: x is mortally wounded  ",
        "Reach(x, y) ::: x reaches y  ",
        "FlyOverhead(x, y) ::: x flies overhead y  ",
        "Destroy(x, y) ::: x destroys y  ",
        "Rout(x, y) ::: x routs y  ",
        "Surprise(x, y) ::: x surprises y  ",
        "RaiseHandsInSurrender(x) ::: x raises hands in surrender  ",
        "Believe(x, p) ::: x believes proposition p  ",
        "LetFlee(x, y) ::: x lets y flee  ",
        "Witness(x, e) ::: x witnesses event e  ",
        "ShootAndLetFleeRule(x, y, z) ::: If a German infantryman x shoots Captain Miller y and raises hands in surrender believing Upham z will accept because of an earlier encounter, then Upham z shoots x and lets other surviving Germans flee  ",
        "",
        "Entities:  ",
        "a_0: group of paratroopers  ",
        "a_1: Reiben  ",
        "a_2: Ryan  ",
        "a_3: Miller  ",
        "a_4: Ryan's wife  ",
        "b_0: location (bridge)  ",
        "b_1: Miller's grave  ",
        "\"Steamboat Willie\": German infantryman who shot Miller (denote as g_1)  ",
        "Upham: denote as u  ",
        "",
        "Premises:  ",
        "Arrive(SecondSSPanzerDivision, infantry_and_armor) ::: Elements of the 2nd SS Panzer Division arrive with infantry and armor.  ",
        "InflictHeavyCasualties(a_0, Germans) ::: They inflict heavy casualties on the Germans.  ",
        "Killed(a_0) ∧ Killed(a_1) ∧ Killed(a_4) ::: Most of the paratroopers, along with Jackson, Mellish, and Horvath, are killed (Jackson, Mellish, Horvath are part of a_0 or similar; simplified here).  ",
        "Shoot(g_1, a_3) ∧ MortallyWounded(a_3) ::: Miller is shot and mortally wounded by a German soldier (g_1).  ",
        "Reach(TigerTank, b_0) ::: Just before a Tiger tank reaches the bridge.  ",
        "FlyOverhead(P51Mustang, b_0) ∧ Destroy(P51Mustang, TigerTank) ::: An American P-51 Mustang flies overhead and destroys the tank.  ",
        "Rout(AmericanArmoredUnits, RemainingGermans) ::: American armored units rout the remaining Germans.  ",
        "Surprise(u, GroupOfGermanSoldiers) ::: Upham surprises a group of German soldiers as they attempt to retreat.  ",
        "RaiseHandsInSurrender(g_1) ∧ Believe(g_1, Accept(u)) ::: The German infantryman who shot Miller raises his hands in surrender believing Upham will accept because of their earlier encounter.  ",
        "Witness(u, Shoot(g_1, a_3)) ::: Upham witnessed Captain Miller being shot by Steamboat Willie (g_1).  ",
        "ShootAndLetFleeRule(g_1, a_3, u) ::: Upham shoots the German infantryman and lets the other surviving Germans flee.  ",
        "",
        "Formalization of the rule:  ",
        "∀x ∀y ∀z ((GermanInfantryman(x) ∧ Shoot(x, y) ∧ CaptainMiller(y) ∧ RaiseHandsInSurrender(x) ∧ Believe(x, Accept(z)) ∧ EarlierEncounter(x, z)) → (Shoot(z, x) ∧ LetFlee(z, OtherSurvivingGermans)))  ",
        "",
        "Note:  ",
        "- \"OtherSurvivingGermans\" denotes the other Germans surviving besides x.  ",
        "- \"EarlierEncounter(x, z)\" encodes the prior encounter between the German infantryman and Upham.  ",
        "- \"CaptainMiller(y)\" identifies y as Captain Miller.  ",
        "- \"Accept(z)\" is the proposition that z (Upham) will accept the surrender."
      ]
    },
    {
      "id": "f6470b27b43e232e5b4458fb1dd6c194cddb2452",
      "paragraph_id": 7,
      "fols": [
        "Predicates:  ",
        "With(a_1, a_2, a_3) ::: Reiben and Ryan are with Miller  ",
        "Dies(a_3) ::: Miller dies  ",
        "Says(a_3, \"James ... earn this. Earn it.\") ::: Miller says his last words \"James ... earn this. Earn it.\"  ",
        "Veteran(a_2) ::: Ryan is the veteran  ",
        "StandingAt(a_2, b_1) ::: Ryan is standing at Miller's grave  ",
        "GraveOf(b_1, a_3) ::: The grave b_1 is Miller's grave  ",
        "Asks(a_2, a_4, ConfirmGoodLife(a_2)) ::: Ryan asks his wife to confirm that he has led a good life  ",
        "GoodMan(a_2) ::: Ryan is a good man  ",
        "WorthyOfSacrifice(a_2, a_3) ::: Ryan is worthy of the sacrifice of Miller and the others  ",
        "Replies(a_4, \"You are.\") ::: Ryan's wife replies \"You are.\"  ",
        "StandsAtAttention(a_2) ::: Ryan stands at attention  ",
        "Salutes(a_2, b_1) ::: Ryan delivers a salute toward Miller's grave  ",
        "",
        "Premises:  ",
        "With(a_1, a_2, a_3) ∧ Dies(a_3) ∧ Says(a_3, \"James ... earn this. Earn it.\") ::: Reiben and Ryan are with Miller as he dies and says his last words \"James ... earn this. Earn it.\"  ",
        "Veteran(a_2) ∧ StandingAt(a_2, b_1) ∧ GraveOf(b_1, a_3) ::: The veteran is Ryan and the grave he is standing at is Miller's grave  ",
        "Asks(a_2, a_4, ConfirmGoodLife(a_2)) ∧ GoodMan(a_2) ∧ WorthyOfSacrifice(a_2, a_3) ∧ Replies(a_4, \"You are.\") ::: Ryan asks his wife to confirm he has led a good life and is a good man worthy of Miller's sacrifice, and she replies affirmatively  ",
        "StandsAtAttention(a_2) ∧ Salutes(a_2, b_1) ::: Ryan stands at attention and salutes Miller's grave"
      ]
    }
  ],
  "f6fbb458ad9ae228f23e0903109646020e249761": [
    {
      "id": "f6fbb458ad9ae228f23e0903109646020e249761",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "Naive(x) ::: x is naive about the world and those closest to x.  ",
        "PerceivesInaccurately(x) ::: x may perceive others inaccurately.  ",
        "MutualAttraction(x, y, z) ::: x and y have mutual attraction for z.  ",
        "ConnectionBasedOnAttraction(x, y) ::: x and y may have a connection based on mutual attraction.  ",
        "BlissfullyIgnorant(x) ::: x is blissfully ignorant of the truth.  ",
        "LivesIgnoranceBliss(x) ::: x may live with ignorance that is considered bliss.  ",
        "DinnerPartyGuest(x) ::: x is a guest at the dinner party.  ",
        "AttendsDinnerParty(x, b_1) ::: x attends the dinner party b_1.  ",
        "CloseFriends(x, y) ::: x and y are close friends.  ",
        "Effeminate(x) ::: x is an effeminate person.  ",
        "DrawnTo(x, y) ::: x is mysteriously drawn to y.  ",
        "PerceivesAs(x, y, z) ::: x perceives y as z.  ",
        "Dislike(x, y) ::: x has a strong dislike for y.  ",
        "QuestionsOwnFeelings(x, y) ::: x questions own feelings towards y.  ",
        "LikelyHomosexual(x) ::: x is most likely homosexual.  ",
        "Realizes(x, p) ::: x realizes proposition p.  ",
        "HavingAffair(x, y) ::: x and y are having an affair.  ",
        "NaivePerception(x, y, p) ::: x’s naive perception about y is p.  ",
        "",
        "Premises:  ",
        "Naive(a_1) → PerceivesInaccurately(a_1)  ",
        "MutualAttraction(a_1, a_6, a_2) → ConnectionBasedOnAttraction(a_1, a_6)  ",
        "BlissfullyIgnorant(a_1) → LivesIgnoranceBliss(a_1)  ",
        "DinnerPartyGuest(a_3) â§ DinnerPartyGuest(a_4) â§ DinnerPartyGuest(a_5) â§ DinnerPartyGuest(a_6) â§ AttendsDinnerParty(a_1, b_1) â§ AttendsDinnerParty(a_2, b_1) â§ AttendsDinnerParty(a_3, b_1) â§ AttendsDinnerParty(a_4, b_1) â§ AttendsDinnerParty(a_5, b_1) â§ AttendsDinnerParty(a_6, b_1)  ",
        "CloseFriends(a_3, a_1) â§ CloseFriends(a_4, a_2)  ",
        "Effeminate(a_5)  ",
        "DrawnTo(a_1, a_6)  ",
        "PerceivesAs(a_1, a_2, \"crude, disinterested\")  ",
        "Dislike(a_2, a_6)  ",
        "QuestionsOwnFeelings(a_1, a_6)  ",
        "LikelyHomosexual(a_5)  ",
        "Realizes(a_1, HavingAffair(a_2, a_6))"
      ]
    }
  ],
  "fd282523a8df2592d93d84ab3911e6f24ffb56ab": [
    {
      "id": "fd282523a8df2592d93d84ab3911e6f24ffb56ab",
      "paragraph_id": 0,
      "fols": [
        "Predicates:  ",
        "SonOf(x, y) ::: x is a son of y  ",
        "RulerOfHell(x) ::: x is the ruler of Hell  ",
        "Succeed(x, y) ::: x succeeds y as ruler of Hell  ",
        "MostIntelligent(x) ::: x is the most intelligent son  ",
        "Toughest(x) ::: x is the toughest son  ",
        "FavoriteSon(x) ::: x is the favorite son of their father  ",
        "HasSpeechImpediment(x) ::: x has a speech impediment  ",
        "HasDisfiguredJaw(x) ::: x has a disfigured jaw  ",
        "HitWithShovel(x, y) ::: x hit y in the face with a shovel  ",
        "Torments(x, y) ::: x torments y  ",
        "ClaimsMotherGoat(x, y) ::: x claims that y's mother was a goat  ",
        "ControlsBodyWithMind(x, y) ::: x controls y's body with their mind  ",
        "",
        "Premises:  ",
        "SonOf(a_6, a_5) ∧ SonOf(a_7, a_5) ∧ SonOf(a_1, a_5) ::: Adrian, Cassius, and Nicky are sons of Satan  ",
        "Succeed(x, a_5) → (x = a_6 ∨ x = a_7 ∨ x = a_1) ::: The son who succeeds Satan as ruler of Hell is one of Satan's three sons  ",
        "MostIntelligent(a_6) ::: Adrian is the most intelligent son  ",
        "Toughest(a_7) ::: Cassius is the toughest son  ",
        "FavoriteSon(a_1) ::: Nicky is their father's favorite son  ",
        "HitWithShovel(a_7, a_1) ::: Cassius hit Nicky in the face with a shovel  ",
        "HasSpeechImpediment(a_1) ∧ HasDisfiguredJaw(a_1) ::: Nicky has a speech impediment and a disfigured jaw  ",
        "Torments(a_6, a_1) ∧ Torments(a_7, a_1) ::: Adrian and Cassius torment Nicky  ",
        "ClaimsMotherGoat(a_6, a_1) ∧ ClaimsMotherGoat(a_7, a_1) ::: Adrian and Cassius claim that Nicky's mother was a goat  ",
        "ControlsBodyWithMind(a_6, a_1) ∧ ControlsBodyWithMind(a_7, a_1) ::: Adrian and Cassius control Nicky's body with their minds"
      ]
    },
    {
      "id": "fd282523a8df2592d93d84ab3911e6f24ffb56ab",
      "paragraph_id": 1,
      "fols": [
        "Predicates:  ",
        "PrinceOfDarkness(x) ::: x is the \"prince of darkness\"  ",
        "Assembles(x, y) ::: x assembles y  ",
        "SonOf(x, y) ::: x is a son of y  ",
        "DecidesSuccessor(x, y, z) ::: x decides that y will succeed z  ",
        "KeepsThrone(x) ::: x keeps the throne for himself  ",
        "NotReadyToSucceed(x) ::: x is not ready to be a successor  ",
        "TellsToLearnBalance(x, y) ::: x tells y to learn to keep the balance between good and evil  ",
        "AngeredByDecision(x, y) ::: x is angered by y's decision  ",
        "GoesTo(x, y) ::: x goes to place y  ",
        "CreatesNewHell(x) ::: x creates a new Hell  ",
        "Possesses(x, y) ::: x possesses y  ",
        "FreezesEntrance(x, y) ::: x freezes the entrance of y  ",
        "PreventsSoulsEntering(x, y) ::: x prevents souls from entering y  ",
        "BodyDecomposing(x) ::: x's body is decomposing  ",
        "Sends(x, y, z) ::: x sends y to z  ",
        "SilverFlask(c_2) ::: c_2 is a silver flask  ",
        "DrinksFrom(x, c_2) ::: x drinks from the silver flask  ",
        "TrapsInside(c_2, x) ::: the silver flask traps x inside  ",
        "",
        "Premises:  ",
        "PrinceOfDarkness(a_5) ::: Satan is the \"prince of darkness\"  ",
        "Assembles(a_5, d_1) ::: Satan assembles his sons (Nicky's brothers)  ",
        "∀x (SonOf(x, a_5) → InGroup(x, d_1)) ::: All sons of Satan belong to the group d_1 (Nicky's brothers)  ",
        "DecidesSuccessor(a_5, y, a_5) → (KeepsThrone(a_5) ⊕ DecidesSuccessor(a_5, y, a_5)) ::: Satan decides which son will succeed him or keeps the throne himself  ",
        "¬∃x (SonOf(x, a_5) ∧ ReadyToSucceed(x)) ::: No son of Satan is ready to be his successor  ",
        "TellsToLearnBalance(a_5, d_1) ::: Satan tells his sons to learn to keep the balance between good and evil  ",
        "AngeredByDecision(a_6, KeepsThrone(a_5)) ∧ AngeredByDecision(a_7, KeepsThrone(a_5)) ::: Adrian and Cassius are angered by Satan's decision  ",
        "GoesTo(a_6, b_2) ∧ GoesTo(a_7, b_2) ::: Adrian and Cassius go to Earth  ",
        "CreatesNewHell(a_6) ∧ CreatesNewHell(a_7) ::: Adrian and Cassius create a new Hell  ",
        "Possesses(a_6, c) ∧ Possesses(a_7, c) ::: Adrian and Cassius possess religious and political leaders (c) in New York City  ",
        "FreezesEntrance(a_6, b_1) ∧ FreezesEntrance(a_7, b_1) ::: Adrian and Cassius freeze the entrance to Hell  ",
        "PreventsSoulsEntering(a_6, b_1) ∧ PreventsSoulsEntering(a_7, b_1) ::: They prevent souls from entering Hell  ",
        "BodyDecomposing(a_5) ::: Satan's body begins decomposing  ",
        "Sends(a_5, a_1, b_2) ∧ SilverFlask(c_2) ::: Satan sends Nicky to Earth with a silver flask  ",
        "∀x (DrinksFrom(x, c_2) → TrapsInside(c_2, x)) ::: If someone drinks from the silver flask then the flask traps that someone inside"
      ]
    },
    {
      "id": "fd282523a8df2592d93d84ab3911e6f24ffb56ab",
      "paragraph_id": 2,
      "fols": [
        "Predicates:  ",
        "TroubleStayingAlive(a_1, b_2) ::: Nicky has trouble staying alive on Earth.  ",
        "KilledSeveralTimes(a_1) ::: Nicky is killed several times.  ",
        "LandsIn(a_1, b_1) ::: Nicky lands in Hell.  ",
        "ReturnsTo(a_1, b_3) ::: Nicky returns to New York.  ",
        "LearningHowToEatAndSleep(a_1) ::: Nicky is learning how to eat and sleep.  ",
        "Meets(a_1, a_0) ::: Nicky meets a talking bulldog named Mr. Beefy (a_0).  ",
        "FriendOf(a_0, father(a_1)) ::: Mr. Beefy is a friend of Nicky's father.  ",
        "RentsApartmentWith(a_1, a_9) ::: Nicky rents an apartment with an actor named Todd (a_9).  ",
        "Actor(a_9) ::: Todd is an actor.  ",
        "FallsInLoveWith(a_1, a_2) ::: Nicky falls in love with Valerie.  ",
        "DesignStudent(a_2) ::: Valerie is a design student.  ",
        "",
        "Premises:  ",
        "TroubleStayingAlive(a_1, b_2) ::: At first, Nicky has trouble staying alive on Earth.  ",
        "KilledSeveralTimes(a_1) ∧ LandsIn(a_1, b_1) ∧ ReturnsTo(a_1, b_3) ::: He is killed several times, landing in Hell and returning to New York each time.  ",
        "LearningHowToEatAndSleep(a_1) ∧ Meets(a_1, a_0) ∧ FriendOf(a_0, father(a_1)) ::: While learning how to eat and sleep, he meets a talking bulldog named Mr. Beefy, a friend of Nicky's father.  ",
        "RentsApartmentWith(a_1, a_9) ∧ Actor(a_9) ::: Nicky rents an apartment with an actor named Todd.  ",
        "FallsInLoveWith(a_1, a_2) ∧ DesignStudent(a_2) ::: Nicky falls in love with a design student named Valerie."
      ]
    },
    {
      "id": "fd282523a8df2592d93d84ab3911e6f24ffb56ab",
      "paragraph_id": 3,
      "fols": [
        "Predicates:  ",
        "Encounter(a_1, d_1) ::: Nicky's first encounter is with his brothers.  ",
        "Sees(a_6, a_1, a_2) ::: Adrian sees Nicky with Valerie.  ",
        "MentalControl(a_6, a_1) ::: Adrian takes mental control of Nicky's body.  ",
        "ScareAway(a_1, a_2) ::: Nicky scares Valerie away (under Adrian's control).  ",
        "Sees(a_1, a_7, TV) ::: Nicky sees Cassius on television.  ",
        "Possess(a_7, a_referee) ::: Cassius possesses the referee (Dana Carvey) of the Harlem Globetrotters game.  ",
        "Tricks(a_1, a_7, c_2) ::: Nicky tricks Cassius into the flask.  ",
        "Thrilled(a_9, a_1) ::: John is thrilled with Nicky's performance.  ",
        "Thrilled(a_10, a_1) ::: Peter is thrilled with Nicky's performance.  ",
        "FanOf(a_9, a_1) ::: John becomes a devoted fan of Nicky.  ",
        "FanOf(a_10, a_1) ::: Peter becomes a devoted fan of Nicky.  ",
        "TriesToApologize(a_1, a_2) ::: Nicky tries to apologize to Valerie.  ",
        "MeetingBadAtFirst(a_1, a_2) ::: The meeting between Nicky and Valerie goes badly at first.  ",
        "Accepts(a_2, a_1) ::: Valerie accepts Nicky.  ",
        "ExplainsWhoIs(a_1) ::: Nicky explains who he is.  ",
        "ExplainsWhyOnEarth(a_1) ::: Nicky explains why he is on Earth.  ",
        "",
        "Premises:  ",
        "Encounter(a_1, d_1) ::: Nicky's first encounter is with his brothers.  ",
        "Sees(a_6, a_1, a_2) ∧ MentalControl(a_6, a_1) → ScareAway(a_1, a_2) ::: Adrian sees Nicky with Valerie, takes mental control of Nicky's body and makes him scare Valerie away.  ",
        "Sees(a_1, a_7, TV) ∧ Possess(a_7, a_referee) ::: Nicky sees Cassius on television possessing the referee of a Harlem Globetrotters game.  ",
        "Tricks(a_1, a_7, c_2) ∧ (Thrilled(a_9, a_1) ∧ Thrilled(a_10, a_1)) → (FanOf(a_9, a_1) ∧ FanOf(a_10, a_1)) ::: When Nicky tricks Cassius into the flask, John and Peter are thrilled and become his devoted fans.  ",
        "TriesToApologize(a_1, a_2) ∧ MeetingBadAtFirst(a_1, a_2) ∧ ExplainsWhoIs(a_1) ∧ ExplainsWhyOnEarth(a_1) → Accepts(a_2, a_1) ::: Nicky tries to apologize to Valerie; the meeting goes badly at first, but after he explains who he is and why he is on Earth, she accepts him."
      ]
    },
    {
      "id": "fd282523a8df2592d93d84ab3911e6f24ffb56ab",
      "paragraph_id": 4,
      "fols": [
        "Predicates:  ",
        "Possess(x, y) ::: x possesses y  ",
        "Accuse(x, y, z) ::: x accuses y of z  ",
        "Kill(x, y) ::: x kills y  ",
        "GoBackTo(x, y) ::: x goes back to y  ",
        "AskForAdvice(x, y) ::: x asks y for advice  ",
        "HasTroubleHearing(x) ::: x has trouble hearing  ",
        "EarsFallenOff(x) ::: x's ears have fallen off  ",
        "AssistantsInPanic(x) ::: x's assistants are in a panic  ",
        "DeadlineApproaching(x, t) ::: x has a deadline approaching in t hours  ",
        "DevisePlan(x, p) ::: x devises plan p  ",
        "Inform(x, y, z) ::: x informs y about z  ",
        "Arrest(x, y) ::: x arrests y  ",
        "WaitFor(x, y) ::: x waits for y  ",
        "DiscoverTrick(x, t) ::: x discovers trick t  ",
        "KeepCool(x) ::: x is keeping cool  ",
        "NotKeepCool(x) ::: x is not keeping cool  ",
        "PossessedBy(x, y) ::: x is possessed by y  ",
        "Fight(x, y) ::: x fights y  ",
        "Grab(x, y) ::: x grabs y  ",
        "DiveOntoTrack(x) ::: x dives onto the track  ",
        "TrainApproaching ::: a train is approaching  ",
        "ThrowOutOfWay(x, y) ::: x throws y out of the way  ",
        "KilledByTrain(x) ::: x is killed by the train  ",
        "",
        "Premises:  ",
        "Possess(adrian, michaelMcKean) ::: Adrian possesses the chief of the NYPD (Michael McKean)  ",
        "Accuse(adrian, nicky, massMurder) ::: Adrian accuses Nicky of mass murder  ",
        "Kill(todd, nicky) ::: Todd kills Nicky  ",
        "GoBackTo(nicky, hell) ::: Nicky goes back to Hell  ",
        "AskForAdvice(nicky, father) ::: Nicky asks his father for advice  ",
        "HasTroubleHearing(satan) ∧ EarsFallenOff(satan) ::: Satan has trouble hearing because his ears have fallen off  ",
        "AssistantsInPanic(satan) ::: Satan's assistants are in a panic  ",
        "DeadlineApproaching(satan, hours) ::: Midnight deadline to capture Adrian and Cassius is only hours away  ",
        "DevisePlan(nickyAndFriends, captureAdrianInSubway) ::: Nicky and his friends devise a plan to capture Adrian in a subway station  ",
        "Inform(john, chiefNYPD, nickysWhereabouts) ∧ Inform(peter, chiefNYPD, nickysWhereabouts) ::: John and Peter inform the chief of the NYPD of Nicky's whereabouts  ",
        "Arrest(todd, todd) ∧ Arrest(todd, mrBeefy) ::: Todd and Mr. Beefy are arrested  ",
        "WaitFor(adrian, nicky) ::: Adrian waits for Nicky  ",
        "KeepCool(john) ∧ NotKeepCool(peter) ::: John is keeping cool whereas Peter is not  ",
        "KeepCool(john) ∧ NotKeepCool(peter) → PossessedBy(john, nicky) ::: If John is keeping cool and Peter is not, then John is possessed by Nicky  ",
        "Fight(adrian, john) ::: Adrian fights John (possessed by Nicky)  ",
        "Grab(adrian, valerie) ::: Adrian grabs Valerie  ",
        "DiveOntoTrack(adrian) ∧ TrainApproaching ::: Adrian dives onto the track as a train approaches  ",
        "ThrowOutOfWay(nicky, valerie) ::: Nicky throws Valerie out of the way  ",
        "KilledByTrain(adrian) ∧ KilledByTrain(nicky) ::: Adrian and Nicky are killed by the train"
      ]
    },
    {
      "id": "fd282523a8df2592d93d84ab3911e6f24ffb56ab",
      "paragraph_id": 5,
      "fols": [
        "Predicates:  ",
        "Arrives(a_6, b_1) ::: Adrian arrives in Hell  ",
        "Dethrones(a_6, a_5) ::: Adrian dethrones his father Satan  ",
        "Weakened(a_5) ::: Satan is weakened  ",
        "TakesOver(a_6, b_3) ::: Adrian takes over Central Park (b_3)  ",
        "StartsParty(a_6) ::: Adrian starts a riotous party  ",
        "Demon(x) ::: x is a demon  ",
        "Assistant(a_11, a_5) ::: Jimmy (a_11) is Satan's assistant  ",
        "JoinsOnEarth(x, a_6) ::: demon x joins Adrian on Earth  ",
        "WakesUp(a_1, heaven) ::: Nicky wakes up in Heaven  ",
        "Sacrificed(a_1) ::: Nicky sacrificed himself  ",
        "Mother(a_1, a_2) ::: Holly (a_2) is Nicky's mother  ",
        "Angel(a_2) ::: Holly is an angel  ",
        "Tells(a_2, a_1, canDefeatWithInnerLight) ::: Holly tells Nicky he can defeat Adrian with inner light  ",
        "Gives(a_2, a_1, orb) ::: Holly gives Nicky a mysterious orb  ",
        "GoesTo(a_1, b_3) ::: Nicky goes to Central Park  ",
        "Discovers(demons, a_1) ::: demons discover Nicky  ",
        "TryAttack(demons, a_1) ::: demons try to attack Nicky  ",
        "CreatesGifts(a_1, demons) ::: Nicky creates gifts for demons  ",
        "Respect(demons, a_1) ::: demons respect Nicky  ",
        "JoinToStop(demons, a_1, a_6) ::: demons join Nicky to stop Adrian  ",
        "RunAway(demons) ::: demons run away  ",
        "Kills(a_6, demon) ::: Adrian kills one of the demons  ",
        "Fight(a_1, a_6) ::: Nicky and Adrian fight  ",
        "SuckedInto(a_1, c_2) ::: Nicky is sucked into the flask  ",
        "SuckedInto(a_6, c_2) ::: Adrian is sucked into the flask  ",
        "ThreeWayBattle(a_1, a_6, a_7) ::: Nicky, Adrian, and Cassius fight in the flask  ",
        "Wins(a_6, battle) ::: Adrian appears to win the battle  ",
        "LocksIn(a_6, a_1, c_2) ::: Adrian locks Nicky in the flask  ",
        "TurnsInto(a_6, bat) ::: Adrian turns into a bat  ",
        "Escapes(a_1, c_2) ::: Nicky escapes from the flask  ",
        "Helps(a_2, a_1) ::: Valerie helps Nicky  ",
        "Shatters(a_1, orb) ::: Nicky shatters the orb  ",
        "Appears(a_4) ::: Ozzy Osbourne appears  ",
        "BitesHeadOff(a_4, a_6) ::: Ozzy bites Adrian's head off  ",
        "SpitsInto(a_4, a_6, c_2) ::: Ozzy spits Adrian's head into the flask  ",
        "",
        "Premises:  ",
        "∀x (CreatesGifts(a_1, x) → (Respect(x, a_1) ∧ JoinToStop(x, a_1, a_6))) ::: If Nicky creates gifts for the demons then the demons respect Nicky and join Nicky to stop Adrian.  ",
        "Kills(a_6, demon) → RunAway(demons) ::: If Adrian kills one of the demons then the demons run away.  ",
        "",
        "Additional premises from context:  ",
        "Arrives(a_6, b_1) ∧ Dethrones(a_6, a_5) ∧ Weakened(a_5) ∧ TakesOver(a_6, b_3) ∧ StartsParty(a_6) ∧ (∀x (Demon(x) ∧ x â‰  a_11) → JoinsOnEarth(x, a_6)) ∧ WakesUp(a_1, heaven) ∧ Sacrificed(a_1) ∧ Mother(a_1, a_2) ∧ Angel(a_2) ∧ Tells(a_2, a_1, canDefeatWithInnerLight) ∧ Gives(a_2, a_1, orb) ∧ GoesTo(a_1, b_3) ∧ Discovers(demons, a_1) ∧ TryAttack(demons, a_1) ∧ CreatesGifts(a_1, demons) ∧ Fight(a_1, a_6) ∧ SuckedInto(a_1, c_2) ∧ SuckedInto(a_6, c_2) ∧ ThreeWayBattle(a_1, a_6, a_7) ∧ Wins(a_6, battle) â"
      ]
    },
    {
      "id": "fd282523a8df2592d93d84ab3911e6f24ffb56ab",
      "paragraph_id": 6,
      "fols": [
        "Predicates:  ",
        "Captured(x) ::: x is captured  ",
        "ReadyToSave(x, y) ::: x is ready to save y  ",
        "SinsToGoToHell(x) ::: x sins to make sure x goes to Hell  ",
        "SetsBeesOn(x, y) ::: x sets bees on y  ",
        "ExpressLove(x, y) ::: x and y express their love for each other  ",
        "KillsWith(x, y, z) ::: x kills y with object z  ",
        "GivenBy(x, y, z) ::: object z is given to x by y  ",
        "FlowOfSoulsRestored(b_1) ::: the flow of souls is restored in Hell  ",
        "RegainsBody(x) ::: x regains x's body  ",
        "RecommendsToLiveOn(x, y, z) ::: x recommends y to go back to live on place z  ",
        "PunishedByShovingUp(x, y, z) ::: x is shoved up y's rectum  ",
        "LivesIn(x, y) ::: x lives in place y  ",
        "HasInfantSon(x, y) ::: x has infant son y  ",
        "DiedInPlaneCrash(x) ::: x died in a plane crash  ",
        "LivingInHell(x) ::: x is living in Hell  ",
        "OldBedroomOf(x, y) ::: x is the old bedroom of y  ",
        "",
        "Premises:  ",
        "Captured(d_1) ::: Nicky's brothers are captured  ",
        "ReadyToSave(a_1, a_0) ::: Nicky is ready to save his father (a_0 is father, implicit)  ",
        "SinsToGoToHell(a_1) ∧ SetsBeesOn(a_1, a_3) ::: Nicky sins to make sure he goes to Hell by setting bees on Henry Winkler  ",
        "ExpressLove(a_1, a_2) ::: Nicky and Valerie express their love for each other  ",
        "KillsWith(a_2, a_1, c_1) ∧ GivenBy(a_2, a_4, c_1) ::: Valerie kills Nicky with a boulder given to her by Ozzy  ",
        "FlowOfSoulsRestored(b_1) → RegainsBody(a_5) ::: If the flow of souls is restored in Hell then Satan regains Satan's body  ",
        "RegainsBody(a_5) → RecommendsToLiveOn(a_5, a_1, b_2) ::: If Satan regains Satan's body then Satan recommends that Nicky go back to live on Earth  ",
        "PunishedByShovingUp(a_6, a_8, c_2) ∧ PunishedByShovingUp(a_7, a_8, c_2) ::: Adrian and Cassius (still inside the flask) are shoved up Adolf Hitler's rectum  ",
        "LivesIn(a_1, b_3) ∧ LivesIn(a_2, b_3) ∧ HasInfantSon(a_1, a_11) ::: Nicky and Valerie live in New York with their infant son Zachariah  ",
        "DiedInPlaneCrash(a_9) ∧ DiedInPlaneCrash(a_10) ∧ LivingInHell(a_9) ∧ LivingInHell(a_10) ∧ OldBedroomOf(a_9, a_1) ::: John and Peter have died in a plane crash and are now happily living in Hell in Nicky's old bedroom"
      ]
    }
  ]
}