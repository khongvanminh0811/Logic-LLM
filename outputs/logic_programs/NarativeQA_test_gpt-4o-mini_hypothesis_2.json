{
  "306": [
    {
      "id": 306,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 2,
      "paragraph": "Benjamin learns to walk in 1925; he declares it a miracle, after which he uses crutches in place of a wheelchair. On Thanksgiving 1930, Benjamin meets seven-year-old Daisy, whose grandmother lives in the nursing home. He and Daisy become good friends. Later, he accepts work on a tugboat captained by Mike Clark. Benjamin also meets Thomas Button, who does not reveal that he is Benjamin's father. In Autumn 1936, Benjamin leaves New Orleans for a long-term work engagement with the tugboat crew; Daisy later is accepted into a dance company in New York City under choreographer George Balanchine.",
      "question_template": "Daisy tells Benjamin to stay out of her life because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "He accepts work on a tugboat captained by Mike Clark.",
        "Benjamin also meets Thomas Button, who does not reveal that he is Benjamin's father."
      ],
      "predicates": [
        "LearnsToWalk(x, y) ::: x learns to walk in year y.",
        "Declares(x, y) ::: x declares y.",
        "UsesCrutches(x) ::: x uses crutches.",
        "Meets(x, y) ::: x meets y.",
        "BecomesGoodFriends(x, y) ::: x and y become good friends.",
        "AcceptsWork(x, y) ::: x accepts work on y.",
        "CaptainedBy(x, y) ::: y captains x.",
        "Reveals(x, y) ::: x reveals y.",
        "Leaves(x, y) ::: x leaves y for a long-term engagement.",
        "AcceptedInto(x, y) ::: x is accepted into y under z."
      ],
      "premises": [
        "LearnsToWalk(benjamin, 1925) ∧ Declares(benjamin, miracle) ∧ UsesCrutches(benjamin) ::: Benjamin learns to walk in 1925; he declares it a miracle, after which he uses crutches in place of a wheelchair.",
        "Meets(benjamin, daisy) ∧ Age(daisy, 7) ∧ LivesIn(daisy, nursing_home) ::: On Thanksgiving 1930, Benjamin meets seven-year-old Daisy, whose grandmother lives in the nursing home.",
        "BecomesGoodFriends(benjamin, daisy) ::: Benjamin and Daisy become good friends.",
        "AcceptsWork(benjamin, tugboat) ∧ CaptainedBy(tugboat, mike_clark) ::: Later, he accepts work on a tugboat captained by Mike Clark.",
        "Meets(benjamin, thomas_button) ∧ ¬Reveals(thomas_button, benjamin) ::: Benjamin also meets Thomas Button, who does not reveal that he is Benjamin's father.",
        "Leaves(benjamin, new_orleans) ∧ LongTermEngagement(benjamin, tugboat_crew) ::: In Autumn 1936, Benjamin leaves New Orleans for a long-term work engagement with the tugboat crew.",
        "AcceptedInto(daisy, dance_company) ∧ Under(dance_company, george_balanchine) ::: Daisy later is accepted into a dance company in New York City under choreographer George Balanchine."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "307": [
    {
      "id": 307,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 1,
      "paragraph": "From the reading, it is revealed that on the evening of November 11, 1918, a boy was born with the appearance and physical maladies of an elderly man. The baby's mother died after giving birth, and the father, Thomas Button, abandons the infant on the porch of a nursing home. Queenie and Mr. \"Tizzy\" Weathers, workers at the nursing home, find the baby, and Queenie decides to care for him as her own.",
      "question_template": "Benjamin and Daisy continue to see each other because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "A boy was born with the appearance and physical maladies of an elderly man",
        "The baby's mother died after giving birth",
        "The father, Thomas Button, abandons the infant on the porch of a nursing home",
        "Queenie decides to care for him as her own"
      ],
      "predicates": [
        "BornOnNovember11_1918(x) ::: x is born on the evening of November 11, 1918.",
        "ElderlyAppearance(x) ::: x has the appearance and physical maladies of an elderly man.",
        "MotherDiedAfterBirth(x) ::: x's mother died after giving birth.",
        "Abandoned(x) ::: x is abandoned by the father.",
        "CaresFor(x, y) ::: x cares for y as their own.",
        "Finds(x, y) ::: x finds y.",
        "WorkerAtNursingHome(x) ::: x is a worker at the nursing home.",
        "DecidesToCareFor(x, y) ::: x decides to care for y."
      ],
      "premises": [
        "BornOnNovember11_1918(baby) ∧ ElderlyAppearance(baby) ∧ MotherDiedAfterBirth(baby) ∧ Abandoned(baby) ::: A boy was born on the evening of November 11, 1918, with the appearance and physical maladies of an elderly man, and his mother died after giving birth, leading to his abandonment.",
        "∃x (Finds(queenie, x) ∧ Finds(tizzy, x) ∧ Abandoned(x)) ::: Queenie and Mr. \"Tizzy\" Weathers find the abandoned baby.",
        "WorkerAtNursingHome(queenie) ∧ WorkerAtNursingHome(tizzy) ::: Queenie and Mr. \"Tizzy\" Weathers are workers at the nursing home.",
        "DecidesToCareFor(queenie, baby) ::: Queenie decides to care for the baby as her own."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 307,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 2,
      "paragraph": "Benjamin learns to walk in 1925; he declares it a miracle, after which he uses crutches in place of a wheelchair. On Thanksgiving 1930, Benjamin meets seven-year-old Daisy, whose grandmother lives in the nursing home. He and Daisy become good friends. Later, he accepts work on a tugboat captained by Mike Clark. Benjamin also meets Thomas Button, who does not reveal that he is Benjamin's father. In Autumn 1936, Benjamin leaves New Orleans for a long-term work engagement with the tugboat crew; Daisy later is accepted into a dance company in New York City under choreographer George Balanchine.",
      "question_template": "Benjamin and Daisy continue to see each other because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- He learns to walk in 1925; he declares it a miracle",
        "- He uses crutches in place of a wheelchair",
        "- He meets seven-year-old Daisy, whose grandmother lives in the nursing home",
        "- He and Daisy become good friends",
        "- He accepts work on a tugboat captained by Mike Clark",
        "- He meets Thomas Button, who does not reveal that he is Benjamin's father",
        "- Daisy later is accepted into a dance company in New York City under choreographer George Balanchine"
      ],
      "predicates": [
        "LearnsToWalk(x, y) ::: x learns to walk in year y.",
        "Declares(x, y) ::: x declares y.",
        "UsesCrutches(x) ::: x uses crutches.",
        "Meets(x, y) ::: x meets y.",
        "BecomesGoodFriends(x, y) ::: x and y become good friends.",
        "AcceptsWork(x, y) ::: x accepts work on y.",
        "CaptainedBy(x, y) ::: y captains x.",
        "Reveals(x, y) ::: x reveals y.",
        "Leaves(x, y) ::: x leaves y for a long-term engagement.",
        "AcceptedInto(x, y) ::: x is accepted into y under z."
      ],
      "premises": [
        "LearnsToWalk(benjamin, 1925) ∧ Declares(benjamin, miracle) ∧ UsesCrutches(benjamin) ::: Benjamin learns to walk in 1925; he declares it a miracle, after which he uses crutches in place of a wheelchair.",
        "Meets(benjamin, daisy) ∧ Age(daisy, 7) ∧ LivesIn(daisy, nursing_home) ::: On Thanksgiving 1930, Benjamin meets seven-year-old Daisy, whose grandmother lives in the nursing home.",
        "BecomesGoodFriends(benjamin, daisy) ::: Benjamin and Daisy become good friends.",
        "AcceptsWork(benjamin, tugboat) ∧ CaptainedBy(tugboat, mike_clark) ::: Later, he accepts work on a tugboat captained by Mike Clark.",
        "Meets(benjamin, thomas_button) ∧ ¬Reveals(thomas_button, benjamin) ::: Benjamin also meets Thomas Button, who does not reveal that he is Benjamin's father.",
        "Leaves(benjamin, new_orleans) ∧ LongTermEngagement(benjamin, tugboat_crew) ::: In Autumn 1936, Benjamin leaves New Orleans for a long-term work engagement with the tugboat crew.",
        "AcceptedInto(daisy, dance_company) ∧ Under(dance_company, george_balanchine) ::: Daisy later is accepted into a dance company in New York City under choreographer George Balanchine."
      ],
      "conclusions": [
        "LearnsToWalk(benjamin, 1925) ∧ Declares(benjamin, miracle) ∧ BecomesGoodFriends(benjamin, daisy)",
        "None",
        "None",
        "BecomesGoodFriends(benjamin, daisy)",
        "AcceptsWork(benjamin, tugboat) ∧ CaptainedBy(tugboat, mike_clark) → BecomesGoodFriends(benjamin, daisy)",
        "None",
        "None"
      ]
    },
    {
      "id": 307,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 3,
      "paragraph": "In 1941, Benjamin is in Murmansk, where he begins having an affair with Elizabeth Abbott, wife of the British Trade Minister. That December, Japan attacks Pearl Harbor, thrusting the United States into World War II. Mike volunteers the boat for the U.S. Navy; the crew is assigned to salvage duties. During a patrol, the tugboat finds a sunken U.S. transport and the bodies of many American troops. A German submarine surfaces; Mike steers the tugboat full speed towards it while a German gunner fires on the tugboat, killing most of the crew, including Mike. The tugboat rams the submarine, causing it to explode, sinking both vessels. Benjamin and another crewman are rescued by U.S. Navy ships the next day.",
      "question_template": "Benjamin and Daisy continue to see each other because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Benjamin is in Murmansk, where he begins having an affair with Elizabeth Abbott, wife of the British Trade Minister.",
        "- Mike volunteers the boat for the U.S. Navy; the crew is assigned to salvage duties.",
        "- During a patrol, the tugboat finds a sunken U.S. transport and the bodies of many American troops.",
        "- A German submarine surfaces; Mike steers the tugboat full speed towards it while a German gunner fires on the tugboat, killing most of the crew, including Mike.",
        "- The tugboat rams the submarine, causing it to explode, sinking both vessels.",
        "- Benjamin and another crewman are rescued by U.S. Navy ships the next day."
      ],
      "predicates": [
        "InLocation(x, y) ::: x is in location y.",
        "Affair(x, y) ::: x has an affair with y.",
        "Volunteers(x, y) ::: x volunteers y for a specific purpose.",
        "AssignedTo(x, y) ::: x is assigned to y.",
        "Finds(x, y) ::: x finds y.",
        "Steers(x, y) ::: x steers y.",
        "FiresOn(x, y) ::: x fires on y.",
        "Kills(x, y) ::: x kills y.",
        "Rams(x, y) ::: x rams y.",
        "Explodes(x) ::: x explodes.",
        "Sinks(x) ::: x sinks.",
        "Rescued(x, y) ::: x is rescued by y."
      ],
      "premises": [
        "InLocation(benjamin, murmansk) ∧ Affair(benjamin, elizabeth) ∧ InLocation(elizabeth, murmansk) ∧ InLocation(benjamin, worldWarII) ::: Benjamin is in Murmansk, where he begins having an affair with Elizabeth Abbott during World War II.",
        "Volunteers(mike, tugboat) ∧ AssignedTo(crew, salvageDuties) ::: Mike volunteers the boat for the U.S. Navy; the crew is assigned to salvage duties.",
        "Finds(tugboat, sunkenTransport) ∧ Finds(tugboat, bodiesOfTroops) ::: During a patrol, the tugboat finds a sunken U.S. transport and the bodies of many American troops.",
        "InLocation(mike, tugboat) ∧ InLocation(germanSubmarine, ocean) ::: Mike is in the tugboat while a German submarine is in the ocean.",
        "Steers(mike, tugboat) ∧ FiresOn(germanGunner, tugboat) ∧ Kills(germanGunner, crew) ::: Mike steers the tugboat full speed towards the German submarine while a German gunner fires on the tugboat, killing most of the crew.",
        "Rams(tugboat, germanSubmarine) ∧ Explodes(germanSubmarine) ∧ Sinks(tugboat) ::: The tugboat rams the submarine, causing it to explode and sinking both vessels.",
        "Rescued(benjamin, uSNavyShips) ∧ Rescued(crewman, uSNavyShips) ::: Benjamin and another crewman are rescued by U.S. Navy ships the next day."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 307,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 4,
      "paragraph": "In May 1945, Benjamin returns to New Orleans and reunites with Queenie. A few weeks later, he reunites with Daisy; they go out for dinner. Upon failing to seduce him afterward, she departs. Benjamin later reunites with Thomas Button, who, terminally ill, reveals he is Benjamin's father and wills Benjamin his button company and his estate.",
      "question_template": "Benjamin and Daisy continue to see each other because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Benjamin returns to New Orleans and reunites with Queenie.",
        "- He reunites with Daisy; they go out for dinner.",
        "- Benjamin later reunites with Thomas Button, who, terminally ill, reveals he is Benjamin's father and wills Benjamin his button company and his estate."
      ],
      "predicates": [
        "Returns(x, y) ::: x returns to location y.",
        "Reunites(x, y) ::: x reunites with person y.",
        "GoesOutForDinner(x, y) ::: x goes out for dinner with person y.",
        "FailsToSeduce(x, y) ::: x fails to seduce person y.",
        "Departs(x) ::: x departs.",
        "Reveals(x, y) ::: x reveals information to person y.",
        "Wills(x, y, z) ::: x wills y to person z.",
        "TerminallyIll(x) ::: x is terminally ill.",
        "FatherOf(x, y) ::: x is the father of person y.",
        "Owns(x, y) ::: x owns y."
      ],
      "premises": [
        "Returns(benjamin, newOrleans) ::: Benjamin returns to New Orleans.",
        "Reunites(benjamin, queenie) ::: Benjamin reunites with Queenie.",
        "Reunites(benjamin, daisy) ::: Benjamin reunites with Daisy.",
        "GoesOutForDinner(benjamin, daisy) ::: Benjamin and Daisy go out for dinner.",
        "FailsToSeduce(daisy, benjamin) ::: Daisy fails to seduce Benjamin.",
        "Departs(daisy) ::: Daisy departs after failing to seduce Benjamin.",
        "Reunites(benjamin, thomasButton) ::: Benjamin reunites with Thomas Button.",
        "TerminallyIll(thomasButton) ::: Thomas Button is terminally ill.",
        "Reveals(thomasButton, benjamin) ::: Thomas Button reveals to Benjamin that he is his father.",
        "Wills(thomasButton, buttonCompany, benjamin) ::: Thomas Button wills his button company to Benjamin.",
        "Wills(thomasButton, estate, benjamin) ::: Thomas Button wills his estate to Benjamin.",
        "FatherOf(thomasButton, benjamin) ::: Thomas Button is the father of Benjamin."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 307,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 7,
      "paragraph": "Benjamin returns to Daisy in 1980. Now married, Daisy introduces him, as a family friend, to her husband and daughter. Daisy admits that he was right to leave; she could not have coped otherwise. She later visits Benjamin at his hotel, where they again share their passion for each other, then part once more.",
      "question_template": "Benjamin and Daisy continue to see each other because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "No relevant information found in the paragraph."
      ],
      "predicates": [
        "Married(x) ::: x is married.",
        "Introduces(x, y, z) ::: x introduces y to z.",
        "Coped(x) ::: x coped with her situation.",
        "SharesPassion(x, y) ::: x shares passion with y.",
        "Visits(x, y) ::: x visits y.",
        "PartOnceMore(x, y) ::: x and y part once more."
      ],
      "premises": [
        "Married(daisy) ::: Daisy is now married.",
        "Introduces(daisy, benjamin, husband) ::: Daisy introduces Benjamin to her husband.",
        "Coped(daisy) → ¬Coped(daisy) ::: Daisy admits that she could not have coped otherwise.",
        "Visits(daisy, hotel) ::: Daisy visits Benjamin at his hotel.",
        "SharesPassion(benjamin, daisy) ::: Benjamin and Daisy share their passion for each other.",
        "PartOnceMore(benjamin, daisy) ::: Benjamin and Daisy part once more.",
        "Daisy acknowledges difficulty → ¬Coped(daisy) ::: Daisy's admission indicates that she acknowledges the difficulty of her situation without Benjamin."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "309": [
    {
      "id": 309,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 7,
      "paragraph": "Benjamin returns to Daisy in 1980. Now married, Daisy introduces him, as a family friend, to her husband and daughter. Daisy admits that he was right to leave; she could not have coped otherwise. She later visits Benjamin at his hotel, where they again share their passion for each other, then part once more.",
      "question_template": "[[CANDIDATE_ANSWER]] is a special reason why Benjamin is considered a special person.",
      "candidate_answers": [
        "No relevant information found in the paragraph."
      ],
      "predicates": [
        "Married(x) ::: x is married.",
        "Introduces(x, y, z) ::: x introduces y to z.",
        "Coped(x) ::: x coped with her situation.",
        "SharesPassion(x, y) ::: x shares passion with y.",
        "Visits(x, y) ::: x visits y.",
        "PartOnceMore(x, y) ::: x and y part once more."
      ],
      "premises": [
        "Married(daisy) ::: Daisy is now married.",
        "Introduces(daisy, benjamin, husband) ::: Daisy introduces Benjamin to her husband.",
        "Coped(daisy) → ¬Coped(daisy) ::: Daisy admits that she could not have coped otherwise.",
        "Visits(daisy, hotel) ::: Daisy visits Benjamin at his hotel.",
        "SharesPassion(benjamin, daisy) ::: Benjamin and Daisy share their passion for each other.",
        "PartOnceMore(benjamin, daisy) ::: Benjamin and Daisy part once more.",
        "Daisy acknowledges difficulty → ¬Coped(daisy) ::: Daisy's admission indicates that she acknowledges the difficulty of her situation without Benjamin."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "310": [
    {
      "id": 310,
      "context_id": "21813f2122fca16d05e89d44f4521f7da8a8f3b7",
      "paragraph_id": 8,
      "paragraph": "In 1990, widowed Daisy is contacted by social workers who have found Benjamin窶馬ow physically a pre-teen. When she arrives, they explain that he was living in a condemned building and was taken to the hospital in poor physical condition, and that they found her name in his diary. The bewildered social workers also say he is displaying early signs of dementia. Daisy moves into the nursing home in 1997 and cares for Benjamin for the rest of his life. In the spring of 2003, Benjamin dies in Daisy's arms, physically an infant but chronologically 84 years of age. Having finally revealed the story of Caroline's father to her, Daisy dies as Hurricane Katrina approaches.",
      "question_template": "Daisy dies before [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Early signs of dementia"
      ],
      "predicates": [
        "CaresFor(x, y) ::: x cares for y.",
        "PhysicallyInfant(x) ::: x is physically an infant.",
        "ChronologicallyAge(x, y) ::: x is chronologically y years old.",
        "DiesInArmsOf(x, y) ::: x dies in the arms of y.",
        "ContactedBy(x, y) ::: x is contacted by y.",
        "FoundInDiary(x, y) ::: x is found in the diary of y.",
        "LivingIn(x, y) ::: x is living in y.",
        "TakenToHospital(x) ::: x is taken to the hospital.",
        "DisplayingSignsOfDementia(x) ::: x is displaying early signs of dementia.",
        "MovesInto(x, y) ::: x moves into y.",
        "Year(x, y) ::: x is in the year y."
      ],
      "premises": [
        "ContactedBy(a_1, social_workers) ∧ FoundInDiary(a_2, a_1) ∧ LivingIn(a_2, b_2) ∧ TakenToHospital(a_2) ∧ DisplayingSignsOfDementia(a_2) ::: In 1990, Daisy is contacted by social workers who have found Benjamin living in a condemned building and was taken to the hospital in poor physical condition, and that they found her name in his diary.",
        "MovesInto(a_1, b_1) ∧ CaresFor(a_1, a_2) ::: Daisy moves into the nursing home in 1997 and cares for Benjamin for the rest of his life.",
        "DiesInArmsOf(a_2, a_1) ∧ PhysicallyInfant(a_2) ∧ ChronologicallyAge(a_2, 84) ::: In the spring of 2003, Benjamin dies in Daisy's arms, physically an infant but chronologically 84 years of age.",
        "Dies(a_1) ∧ Year(a_1, 2005) ::: Daisy dies as Hurricane Katrina approaches.",
        "Conclusion:",
        "CaresFor(a_1, a_2) ::: Daisy cares for Benjamin until his death."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "312": [
    {
      "id": 312,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 0,
      "paragraph": " Act 1 is set in a chocolate house where Mirabell and Fainall have just finished playing cards. A footman comes and tells Mirabell that Waitwell (Mirabell's male servant) and Foible (Lady Wishfort's female servant) were married that morning. Mirabell tells Fainall about his love of Millamant and is encouraged to marry her. Witwoud and Petulant appear and Mirabell is informed that should Lady Wishfort marry, he will lose £6000 of Millamant's inheritance.He will only get this money if he can make Lady Wishfort consent to his and Millamant's marriage.",
      "question_template": "The story mentions that Benjamin had [[CANDIDATE_ANSWER]] prior to his death.",
      "candidate_answers": [
        "Fainall",
        "Millamant"
      ],
      "predicates": [
        "Marries(x, y) ::: x marries y.",
        "LosesInheritance(x, y) ::: x loses y of Millamant's inheritance.",
        "Consents(x, y) ::: x consents to y.",
        "Encourages(x, y) ::: x encourages y.",
        "Loves(x, y) ::: x loves y.",
        "Informs(x, y) ::: x informs y about y's situation."
      ],
      "premises": [
        "Marries(a_1) → LosesInheritance(a_4, c) ::: If Lady Wishfort marries, Mirabell will lose £6000 of Millamant's inheritance.",
        "Consents(a_1, d) → LosesInheritance(a_4, c) ::: Mirabell will get £6000 of Millamant's inheritance if Lady Wishfort consents to his and Millamant's marriage.",
        "Loves(a_4, a_8) ::: Mirabell loves Millamant.",
        "Encourages(a_2, a_4) ::: Fainall encourages Mirabell to marry Millamant.",
        "Informs(a_4, a_2) ::: Mirabell informs Fainall about his love for Millamant."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 312,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 3,
      "paragraph": "Mirabell and Millamant, equally strong-willed, discuss in detail the conditions under which they would accept each other in marriage (otherwise known as the \"proviso scene\"), showing the depth of their feeling for each other. Mirabell finally proposes to Millamant and, with Mrs. Fainall's encouragement (almost consent, as Millamant knows of their previous relations), Millamant accepts. Mirabell leaves as Lady Wishfort arrives, and she lets it be known that she wants Millamant to marry her nephew, Sir Wilfull Witwoud, who has just arrived from the countryside. Lady Wishfort later gets a letter telling her about the Sir Rowland plot. Sir Rowland takes the letter and accuses Mirabell of trying to sabotage their wedding. Lady Wishfort agrees to let Sir Rowland bring a marriage contract that night.",
      "question_template": "The story mentions that Benjamin had [[CANDIDATE_ANSWER]] prior to his death.",
      "candidate_answers": [
        "Lady Wishfort wants Millamant to marry her nephew, Sir Wilfull Witwoud."
      ],
      "predicates": [
        "StrongWilled(x) ::: x is strong-willed.",
        "Discuss(x, y) ::: x discusses y.",
        "Propose(x, y) ::: x proposes to y.",
        "Accept(x, y) ::: x accepts y's proposal.",
        "EncouragedBy(x, y) ::: x is encouraged by y.",
        "Wants(x, y) ::: x wants y to marry.",
        "Arrives(x) ::: x arrives.",
        "Accuses(x, y) ::: x accuses y of something.",
        "Brings(x, y) ::: x brings y.",
        "Agrees(x, y) ::: x agrees to y."
      ],
      "premises": [
        "StrongWilled(mirabell) ∧ StrongWilled(millamant) ::: Mirabell and Millamant are equally strong-willed.",
        "Discuss(mirabell, conditions) ::: Mirabell and Millamant discuss the conditions under which they would accept each other in marriage.",
        "Propose(mirabell, millamant) ::: Mirabell proposes to Millamant.",
        "Accept(millamant, mirabell) ∧ EncouragedBy(millamant, mrsFainall) ::: Millamant accepts Mirabell's proposal with encouragement from Mrs. Fainall.",
        "Arrives(ladyWishfort) ::: Lady Wishfort arrives.",
        "Wants(ladyWishfort, sirWilfullWitwoud) ::: Lady Wishfort wants Millamant to marry her nephew, Sir Wilfull Witwoud.",
        "Accuses(sirRowland, mirabell) ::: Sir Rowland accuses Mirabell of trying to sabotage their wedding.",
        "Agrees(ladyWishfort, marriageContract) ::: Lady Wishfort agrees to let Sir Rowland bring a marriage contract that night.",
        "Conclusion:",
        "∃x (StrongWilled(x) ∧ Discuss(mirabell, conditions) ∧ Accept(millamant, mirabell)) ::: There exists a strong-willed person who discusses conditions and accepts a marriage proposal."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "313": [
    {
      "id": 313,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 0,
      "paragraph": " Act 1 is set in a chocolate house where Mirabell and Fainall have just finished playing cards. A footman comes and tells Mirabell that Waitwell (Mirabell's male servant) and Foible (Lady Wishfort's female servant) were married that morning. Mirabell tells Fainall about his love of Millamant and is encouraged to marry her. Witwoud and Petulant appear and Mirabell is informed that should Lady Wishfort marry, he will lose £6000 of Millamant's inheritance.He will only get this money if he can make Lady Wishfort consent to his and Millamant's marriage.",
      "question_template": "The story in Act 1 is set in a [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Millamant"
      ],
      "predicates": [
        "Marries(x, y) ::: x marries y.",
        "LosesInheritance(x, y) ::: x loses y of Millamant's inheritance.",
        "Consents(x, y) ::: x consents to y.",
        "Encourages(x, y) ::: x encourages y.",
        "Loves(x, y) ::: x loves y.",
        "Informs(x, y) ::: x informs y about y's situation."
      ],
      "premises": [
        "Marries(a_1) → LosesInheritance(a_4, c) ::: If Lady Wishfort marries, Mirabell will lose £6000 of Millamant's inheritance.",
        "Consents(a_1, d) → LosesInheritance(a_4, c) ::: Mirabell will get £6000 of Millamant's inheritance if Lady Wishfort consents to his and Millamant's marriage.",
        "Loves(a_4, a_8) ::: Mirabell loves Millamant.",
        "Encourages(a_2, a_4) ::: Fainall encourages Mirabell to marry Millamant.",
        "Informs(a_4, a_2) ::: Mirabell informs Fainall about his love for Millamant."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 313,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 1,
      "paragraph": "Act 2 is set in St. James’ Park. Mrs. Fainall and Mrs. Marwood are discussing their hatred of men. Fainall appears and accuses Mrs. Marwood (with whom he is having an affair) of loving Mirabell (which she does). Meanwhile, Mrs. Fainall (Mirabell's former lover) tells Mirabell that she hates her husband, and they begin to plot to deceive Lady Wishfort into giving her consent to the marriage. Millamant appears in the park and, angry about the previous night (when Mirabell was confronted by Lady Wishfort), she tells Mirabell of her displeasure in his plan, which she only has a vague idea about. After she leaves, the newly wed servants appear and Mirabell reminds them of their roles in the plan.",
      "question_template": "The story in Act 1 is set in a [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Mrs. Fainall"
      ],
      "predicates": [
        "Hates(x, y) ::: x hates y.",
        "Loves(x, y) ::: x loves y.",
        "Accuses(x, y) ::: x accuses y.",
        "Discusses(x, y) ::: x discusses y.",
        "Plots(x, y) ::: x plots to deceive y.",
        "Angry(x) ::: x is angry.",
        "Reminds(x, y) ::: x reminds y of their roles.",
        "HasVagueIdea(x, y) ::: x has a vague idea about y.",
        "Inherits(x, y) ::: x inherits y.",
        "NewlyWed(x) ::: x is a newly wed."
      ],
      "premises": [
        "Discusses(a_3, a_2) ∧ Discusses(a_6, a_2) ::: Mrs. Fainall and Mrs. Marwood are discussing their hatred of men.",
        "Accuses(a_2, a_6) ∧ Loves(a_6, a_4) ::: Fainall accuses Mrs. Marwood of loving Mirabell.",
        "Hates(a_3, a_2) ::: Mrs. Fainall tells Mirabell that she hates her husband.",
        "Plots(a_3, a_1) ∧ Plo(a_4, a_1) ::: Mrs. Fainall and Mirabell plot to deceive Lady Wishfort into giving her consent to the marriage.",
        "Angry(a_8) ∧ HasVagueIdea(a_8, d) ::: Millamant is angry about the previous night and has a vague idea about the plan.",
        "Reminds(a_4, a_5) ::: Mirabell reminds the newly wed servants of their roles in the plan.",
        "NewlyWed(a_5) ∧ NewlyWed(a_7) ::: The newly wed servants appear in the park.",
        "Conclusion:",
        "Plots(a_3, a_1) ::: Mrs. Fainall and Mirabell plot to deceive Lady Wishfort into giving her consent to the marriage."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 313,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 3,
      "paragraph": "Mirabell and Millamant, equally strong-willed, discuss in detail the conditions under which they would accept each other in marriage (otherwise known as the \"proviso scene\"), showing the depth of their feeling for each other. Mirabell finally proposes to Millamant and, with Mrs. Fainall's encouragement (almost consent, as Millamant knows of their previous relations), Millamant accepts. Mirabell leaves as Lady Wishfort arrives, and she lets it be known that she wants Millamant to marry her nephew, Sir Wilfull Witwoud, who has just arrived from the countryside. Lady Wishfort later gets a letter telling her about the Sir Rowland plot. Sir Rowland takes the letter and accuses Mirabell of trying to sabotage their wedding. Lady Wishfort agrees to let Sir Rowland bring a marriage contract that night.",
      "question_template": "The story in Act 1 is set in a [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Mrs. Fainall"
      ],
      "predicates": [
        "StrongWilled(x) ::: x is strong-willed.",
        "Discuss(x, y) ::: x discusses y.",
        "Propose(x, y) ::: x proposes to y.",
        "Accept(x, y) ::: x accepts y's proposal.",
        "EncouragedBy(x, y) ::: x is encouraged by y.",
        "Wants(x, y) ::: x wants y to marry.",
        "Arrives(x) ::: x arrives.",
        "Accuses(x, y) ::: x accuses y of something.",
        "Brings(x, y) ::: x brings y.",
        "Agrees(x, y) ::: x agrees to y."
      ],
      "premises": [
        "StrongWilled(mirabell) ∧ StrongWilled(millamant) ::: Mirabell and Millamant are equally strong-willed.",
        "Discuss(mirabell, conditions) ::: Mirabell and Millamant discuss the conditions under which they would accept each other in marriage.",
        "Propose(mirabell, millamant) ::: Mirabell proposes to Millamant.",
        "Accept(millamant, mirabell) ∧ EncouragedBy(millamant, mrsFainall) ::: Millamant accepts Mirabell's proposal with encouragement from Mrs. Fainall.",
        "Arrives(ladyWishfort) ::: Lady Wishfort arrives.",
        "Wants(ladyWishfort, sirWilfullWitwoud) ::: Lady Wishfort wants Millamant to marry her nephew, Sir Wilfull Witwoud.",
        "Accuses(sirRowland, mirabell) ::: Sir Rowland accuses Mirabell of trying to sabotage their wedding.",
        "Agrees(ladyWishfort, marriageContract) ::: Lady Wishfort agrees to let Sir Rowland bring a marriage contract that night.",
        "Conclusion:",
        "∃x (StrongWilled(x) ∧ Discuss(mirabell, conditions) ∧ Accept(millamant, mirabell)) ::: There exists a strong-willed person who discusses conditions and accepts a marriage proposal."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "314": [
    {
      "id": 314,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 2,
      "paragraph": "Acts 3, 4 and 5 are all set in the home of Lady Wishfort. We are introduced to Lady Wishfort who is encouraged by Foible to marry the supposed Sir Rowland – Mirabell's supposed uncle – so that Mirabell will lose his inheritance. Sir Rowland is, however, Waitwell in disguise, and the plan is to entangle Lady Wishfort in a marriage which cannot go ahead, because it would be bigamy, not to mention a social disgrace (Waitwell is only a serving man, Lady Wishfort an aristocrat). Mirabell will offer to help her out of the embarrassing situation if she consents to his marriage. Later, Mrs. Fainall discusses this plan with Foible, but this is overheard by Mrs. Marwood. She later tells the plan to Fainall, who decides that he will take his wife's money and go away with Mrs. Marwood.",
      "question_template": "Mirabell encouraged [[CANDIDATE_ANSWER]] to marry in Act 1.",
      "candidate_answers": [
        "Mrs. Fainall",
        "Mrs. Marwood",
        "Mirabell"
      ],
      "predicates": [
        "Marries(x, y) ::: x marries y.",
        "LosesInheritance(x) ::: x loses his inheritance.",
        "LearnsOfPlan(x) ::: x learns of the plan.",
        "TakesMoney(x, y) ::: x takes y's money.",
        "GoesAwayWith(x, y) ::: x goes away with y.",
        "DisguisedAs(x, y) ::: x is disguised as y.",
        "EncouragedBy(x, y) ::: x is encouraged by y.",
        "Overheard(x, y) ::: x overhears y.",
        "OffersHelp(x, y) ::: x offers help to y.",
        "EmbarrassingSituation(x) ::: x is in an embarrassing situation."
      ],
      "premises": [
        "Marries(a_1, a_7) → LosesInheritance(a_4) ::: If Lady Wishfort marries the supposed Sir Rowland, then Mirabell will lose his inheritance.",
        "LearnsOfPlan(a_2) → (TakesMoney(a_2, a_3) ∧ GoesAwayWith(a_2, a_6)) ::: If Fainall learns of the plan, then he will take his wife's money and go away with Mrs. Marwood.",
        "DisguisedAs(a_7, a_4) ::: Waitwell is disguised as Mirabell's supposed uncle, Sir Rowland.",
        "EncouragedBy(a_1, a_5) ::: Lady Wishfort is encouraged by Foible.",
        "OffersHelp(a_4, a_1) ::: Mirabell offers to help Lady Wishfort out of the embarrassing situation.",
        "Overheard(a_6, d) ::: Mrs. Marwood overhears the discussion of the plan by Mrs. Fainall and Foible."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "316": [
    {
      "id": 316,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 0,
      "paragraph": " Act 1 is set in a chocolate house where Mirabell and Fainall have just finished playing cards. A footman comes and tells Mirabell that Waitwell (Mirabell's male servant) and Foible (Lady Wishfort's female servant) were married that morning. Mirabell tells Fainall about his love of Millamant and is encouraged to marry her. Witwoud and Petulant appear and Mirabell is informed that should Lady Wishfort marry, he will lose £6000 of Millamant's inheritance.He will only get this money if he can make Lady Wishfort consent to his and Millamant's marriage.",
      "question_template": "Fainall has [[CANDIDATE_ANSWER]] arrested.",
      "candidate_answers": [
        "- Mirabell",
        "- Fainall",
        "- Lady Wishfort"
      ],
      "predicates": [
        "Marries(x, y) ::: x marries y.",
        "LosesInheritance(x, y) ::: x loses y of Millamant's inheritance.",
        "Consents(x, y) ::: x consents to y.",
        "Encourages(x, y) ::: x encourages y.",
        "Loves(x, y) ::: x loves y.",
        "Informs(x, y) ::: x informs y about y's situation."
      ],
      "premises": [
        "Marries(a_1) → LosesInheritance(a_4, c) ::: If Lady Wishfort marries, Mirabell will lose £6000 of Millamant's inheritance.",
        "Consents(a_1, d) → LosesInheritance(a_4, c) ::: Mirabell will get £6000 of Millamant's inheritance if Lady Wishfort consents to his and Millamant's marriage.",
        "Loves(a_4, a_8) ::: Mirabell loves Millamant.",
        "Encourages(a_2, a_4) ::: Fainall encourages Mirabell to marry Millamant.",
        "Informs(a_4, a_2) ::: Mirabell informs Fainall about his love for Millamant."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "317": [
    {
      "id": 317,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 3,
      "paragraph": "Mirabell and Millamant, equally strong-willed, discuss in detail the conditions under which they would accept each other in marriage (otherwise known as the \"proviso scene\"), showing the depth of their feeling for each other. Mirabell finally proposes to Millamant and, with Mrs. Fainall's encouragement (almost consent, as Millamant knows of their previous relations), Millamant accepts. Mirabell leaves as Lady Wishfort arrives, and she lets it be known that she wants Millamant to marry her nephew, Sir Wilfull Witwoud, who has just arrived from the countryside. Lady Wishfort later gets a letter telling her about the Sir Rowland plot. Sir Rowland takes the letter and accuses Mirabell of trying to sabotage their wedding. Lady Wishfort agrees to let Sir Rowland bring a marriage contract that night.",
      "question_template": "Lady Wishfort wants Millamant to marry [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Lady Wishfort's nephew",
        "Just arrived from the countryside"
      ],
      "predicates": [
        "StrongWilled(x) ::: x is strong-willed.",
        "Discuss(x, y) ::: x discusses y.",
        "Propose(x, y) ::: x proposes to y.",
        "Accept(x, y) ::: x accepts y's proposal.",
        "EncouragedBy(x, y) ::: x is encouraged by y.",
        "Wants(x, y) ::: x wants y to marry.",
        "Arrives(x) ::: x arrives.",
        "Accuses(x, y) ::: x accuses y of something.",
        "Brings(x, y) ::: x brings y.",
        "Agrees(x, y) ::: x agrees to y."
      ],
      "premises": [
        "StrongWilled(mirabell) ∧ StrongWilled(millamant) ::: Mirabell and Millamant are equally strong-willed.",
        "Discuss(mirabell, conditions) ::: Mirabell and Millamant discuss the conditions under which they would accept each other in marriage.",
        "Propose(mirabell, millamant) ::: Mirabell proposes to Millamant.",
        "Accept(millamant, mirabell) ∧ EncouragedBy(millamant, mrsFainall) ::: Millamant accepts Mirabell's proposal with encouragement from Mrs. Fainall.",
        "Arrives(ladyWishfort) ::: Lady Wishfort arrives.",
        "Wants(ladyWishfort, sirWilfullWitwoud) ::: Lady Wishfort wants Millamant to marry her nephew, Sir Wilfull Witwoud.",
        "Accuses(sirRowland, mirabell) ::: Sir Rowland accuses Mirabell of trying to sabotage their wedding.",
        "Agrees(ladyWishfort, marriageContract) ::: Lady Wishfort agrees to let Sir Rowland bring a marriage contract that night.",
        "Conclusion:",
        "∃x (StrongWilled(x) ∧ Discuss(mirabell, conditions) ∧ Accept(millamant, mirabell)) ::: There exists a strong-willed person who discusses conditions and accepts a marriage proposal."
      ],
      "conclusions": [
        "Wants(ladyWishfort, sirWilfullWitwoud)",
        "None"
      ]
    }
  ],
  "318": [
    {
      "id": 318,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 2,
      "paragraph": "Acts 3, 4 and 5 are all set in the home of Lady Wishfort. We are introduced to Lady Wishfort who is encouraged by Foible to marry the supposed Sir Rowland – Mirabell's supposed uncle – so that Mirabell will lose his inheritance. Sir Rowland is, however, Waitwell in disguise, and the plan is to entangle Lady Wishfort in a marriage which cannot go ahead, because it would be bigamy, not to mention a social disgrace (Waitwell is only a serving man, Lady Wishfort an aristocrat). Mirabell will offer to help her out of the embarrassing situation if she consents to his marriage. Later, Mrs. Fainall discusses this plan with Foible, but this is overheard by Mrs. Marwood. She later tells the plan to Fainall, who decides that he will take his wife's money and go away with Mrs. Marwood.",
      "question_template": "[[CANDIDATE_ANSWER]] blackmails Lady Wishfort into giving her consent to Mirabell's and Millamant's marriage.",
      "candidate_answers": [
        "Sir Rowland is, however, Waitwell in disguise",
        "A serving man"
      ],
      "predicates": [
        "Marries(x, y) ::: x marries y.",
        "LosesInheritance(x) ::: x loses his inheritance.",
        "LearnsOfPlan(x) ::: x learns of the plan.",
        "TakesMoney(x, y) ::: x takes y's money.",
        "GoesAwayWith(x, y) ::: x goes away with y.",
        "DisguisedAs(x, y) ::: x is disguised as y.",
        "EncouragedBy(x, y) ::: x is encouraged by y.",
        "Overheard(x, y) ::: x overhears y.",
        "OffersHelp(x, y) ::: x offers help to y.",
        "EmbarrassingSituation(x) ::: x is in an embarrassing situation."
      ],
      "premises": [
        "Marries(a_1, a_7) → LosesInheritance(a_4) ::: If Lady Wishfort marries the supposed Sir Rowland, then Mirabell will lose his inheritance.",
        "LearnsOfPlan(a_2) → (TakesMoney(a_2, a_3) ∧ GoesAwayWith(a_2, a_6)) ::: If Fainall learns of the plan, then he will take his wife's money and go away with Mrs. Marwood.",
        "DisguisedAs(a_7, a_4) ::: Waitwell is disguised as Mirabell's supposed uncle, Sir Rowland.",
        "EncouragedBy(a_1, a_5) ::: Lady Wishfort is encouraged by Foible.",
        "OffersHelp(a_4, a_1) ::: Mirabell offers to help Lady Wishfort out of the embarrassing situation.",
        "Overheard(a_6, d) ::: Mrs. Marwood overhears the discussion of the plan by Mrs. Fainall and Foible."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 318,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 3,
      "paragraph": "Mirabell and Millamant, equally strong-willed, discuss in detail the conditions under which they would accept each other in marriage (otherwise known as the \"proviso scene\"), showing the depth of their feeling for each other. Mirabell finally proposes to Millamant and, with Mrs. Fainall's encouragement (almost consent, as Millamant knows of their previous relations), Millamant accepts. Mirabell leaves as Lady Wishfort arrives, and she lets it be known that she wants Millamant to marry her nephew, Sir Wilfull Witwoud, who has just arrived from the countryside. Lady Wishfort later gets a letter telling her about the Sir Rowland plot. Sir Rowland takes the letter and accuses Mirabell of trying to sabotage their wedding. Lady Wishfort agrees to let Sir Rowland bring a marriage contract that night.",
      "question_template": "[[CANDIDATE_ANSWER]] blackmails Lady Wishfort into giving her consent to Mirabell's and Millamant's marriage.",
      "candidate_answers": [
        "Sir Rowland",
        "A letter telling her about the Sir Rowland plot",
        "Accuses Mirabell of trying to sabotage their wedding"
      ],
      "predicates": [
        "StrongWilled(x) ::: x is strong-willed.",
        "Discuss(x, y) ::: x discusses y.",
        "Propose(x, y) ::: x proposes to y.",
        "Accept(x, y) ::: x accepts y's proposal.",
        "EncouragedBy(x, y) ::: x is encouraged by y.",
        "Wants(x, y) ::: x wants y to marry.",
        "Arrives(x) ::: x arrives.",
        "Accuses(x, y) ::: x accuses y of something.",
        "Brings(x, y) ::: x brings y.",
        "Agrees(x, y) ::: x agrees to y."
      ],
      "premises": [
        "StrongWilled(mirabell) ∧ StrongWilled(millamant) ::: Mirabell and Millamant are equally strong-willed.",
        "Discuss(mirabell, conditions) ::: Mirabell and Millamant discuss the conditions under which they would accept each other in marriage.",
        "Propose(mirabell, millamant) ::: Mirabell proposes to Millamant.",
        "Accept(millamant, mirabell) ∧ EncouragedBy(millamant, mrsFainall) ::: Millamant accepts Mirabell's proposal with encouragement from Mrs. Fainall.",
        "Arrives(ladyWishfort) ::: Lady Wishfort arrives.",
        "Wants(ladyWishfort, sirWilfullWitwoud) ::: Lady Wishfort wants Millamant to marry her nephew, Sir Wilfull Witwoud.",
        "Accuses(sirRowland, mirabell) ::: Sir Rowland accuses Mirabell of trying to sabotage their wedding.",
        "Agrees(ladyWishfort, marriageContract) ::: Lady Wishfort agrees to let Sir Rowland bring a marriage contract that night.",
        "Conclusion:",
        "∃x (StrongWilled(x) ∧ Discuss(mirabell, conditions) ∧ Accept(millamant, mirabell)) ::: There exists a strong-willed person who discusses conditions and accepts a marriage proposal."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "319": [
    {
      "id": 319,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 1,
      "paragraph": "Act 2 is set in St. James’ Park. Mrs. Fainall and Mrs. Marwood are discussing their hatred of men. Fainall appears and accuses Mrs. Marwood (with whom he is having an affair) of loving Mirabell (which she does). Meanwhile, Mrs. Fainall (Mirabell's former lover) tells Mirabell that she hates her husband, and they begin to plot to deceive Lady Wishfort into giving her consent to the marriage. Millamant appears in the park and, angry about the previous night (when Mirabell was confronted by Lady Wishfort), she tells Mirabell of her displeasure in his plan, which she only has a vague idea about. After she leaves, the newly wed servants appear and Mirabell reminds them of their roles in the plan.",
      "question_template": "[[CANDIDATE_ANSWER]] is Sir Wilfull Witwoud.",
      "candidate_answers": [
        "Mrs. Marwood"
      ],
      "predicates": [
        "Hates(x, y) ::: x hates y.",
        "Loves(x, y) ::: x loves y.",
        "Accuses(x, y) ::: x accuses y.",
        "Discusses(x, y) ::: x discusses y.",
        "Plots(x, y) ::: x plots to deceive y.",
        "Angry(x) ::: x is angry.",
        "Reminds(x, y) ::: x reminds y of their roles.",
        "HasVagueIdea(x, y) ::: x has a vague idea about y.",
        "Inherits(x, y) ::: x inherits y.",
        "NewlyWed(x) ::: x is a newly wed."
      ],
      "premises": [
        "Discusses(a_3, a_2) ∧ Discusses(a_6, a_2) ::: Mrs. Fainall and Mrs. Marwood are discussing their hatred of men.",
        "Accuses(a_2, a_6) ∧ Loves(a_6, a_4) ::: Fainall accuses Mrs. Marwood of loving Mirabell.",
        "Hates(a_3, a_2) ::: Mrs. Fainall tells Mirabell that she hates her husband.",
        "Plots(a_3, a_1) ∧ Plo(a_4, a_1) ::: Mrs. Fainall and Mirabell plot to deceive Lady Wishfort into giving her consent to the marriage.",
        "Angry(a_8) ∧ HasVagueIdea(a_8, d) ::: Millamant is angry about the previous night and has a vague idea about the plan.",
        "Reminds(a_4, a_5) ::: Mirabell reminds the newly wed servants of their roles in the plan.",
        "NewlyWed(a_5) ∧ NewlyWed(a_7) ::: The newly wed servants appear in the park.",
        "Conclusion:",
        "Plots(a_3, a_1) ::: Mrs. Fainall and Mirabell plot to deceive Lady Wishfort into giving her consent to the marriage."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 319,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 2,
      "paragraph": "Acts 3, 4 and 5 are all set in the home of Lady Wishfort. We are introduced to Lady Wishfort who is encouraged by Foible to marry the supposed Sir Rowland – Mirabell's supposed uncle – so that Mirabell will lose his inheritance. Sir Rowland is, however, Waitwell in disguise, and the plan is to entangle Lady Wishfort in a marriage which cannot go ahead, because it would be bigamy, not to mention a social disgrace (Waitwell is only a serving man, Lady Wishfort an aristocrat). Mirabell will offer to help her out of the embarrassing situation if she consents to his marriage. Later, Mrs. Fainall discusses this plan with Foible, but this is overheard by Mrs. Marwood. She later tells the plan to Fainall, who decides that he will take his wife's money and go away with Mrs. Marwood.",
      "question_template": "[[CANDIDATE_ANSWER]] is Sir Wilfull Witwoud.",
      "candidate_answers": [
        "Mrs. Marwood"
      ],
      "predicates": [
        "Marries(x, y) ::: x marries y.",
        "LosesInheritance(x) ::: x loses his inheritance.",
        "LearnsOfPlan(x) ::: x learns of the plan.",
        "TakesMoney(x, y) ::: x takes y's money.",
        "GoesAwayWith(x, y) ::: x goes away with y.",
        "DisguisedAs(x, y) ::: x is disguised as y.",
        "EncouragedBy(x, y) ::: x is encouraged by y.",
        "Overheard(x, y) ::: x overhears y.",
        "OffersHelp(x, y) ::: x offers help to y.",
        "EmbarrassingSituation(x) ::: x is in an embarrassing situation."
      ],
      "premises": [
        "Marries(a_1, a_7) → LosesInheritance(a_4) ::: If Lady Wishfort marries the supposed Sir Rowland, then Mirabell will lose his inheritance.",
        "LearnsOfPlan(a_2) → (TakesMoney(a_2, a_3) ∧ GoesAwayWith(a_2, a_6)) ::: If Fainall learns of the plan, then he will take his wife's money and go away with Mrs. Marwood.",
        "DisguisedAs(a_7, a_4) ::: Waitwell is disguised as Mirabell's supposed uncle, Sir Rowland.",
        "EncouragedBy(a_1, a_5) ::: Lady Wishfort is encouraged by Foible.",
        "OffersHelp(a_4, a_1) ::: Mirabell offers to help Lady Wishfort out of the embarrassing situation.",
        "Overheard(a_6, d) ::: Mrs. Marwood overhears the discussion of the plan by Mrs. Fainall and Foible."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 319,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 3,
      "paragraph": "Mirabell and Millamant, equally strong-willed, discuss in detail the conditions under which they would accept each other in marriage (otherwise known as the \"proviso scene\"), showing the depth of their feeling for each other. Mirabell finally proposes to Millamant and, with Mrs. Fainall's encouragement (almost consent, as Millamant knows of their previous relations), Millamant accepts. Mirabell leaves as Lady Wishfort arrives, and she lets it be known that she wants Millamant to marry her nephew, Sir Wilfull Witwoud, who has just arrived from the countryside. Lady Wishfort later gets a letter telling her about the Sir Rowland plot. Sir Rowland takes the letter and accuses Mirabell of trying to sabotage their wedding. Lady Wishfort agrees to let Sir Rowland bring a marriage contract that night.",
      "question_template": "[[CANDIDATE_ANSWER]] is Sir Wilfull Witwoud.",
      "candidate_answers": [
        "Mrs. Fainall's previous relations with Mirabell"
      ],
      "predicates": [
        "StrongWilled(x) ::: x is strong-willed.",
        "Discuss(x, y) ::: x discusses y.",
        "Propose(x, y) ::: x proposes to y.",
        "Accept(x, y) ::: x accepts y's proposal.",
        "EncouragedBy(x, y) ::: x is encouraged by y.",
        "Wants(x, y) ::: x wants y to marry.",
        "Arrives(x) ::: x arrives.",
        "Accuses(x, y) ::: x accuses y of something.",
        "Brings(x, y) ::: x brings y.",
        "Agrees(x, y) ::: x agrees to y."
      ],
      "premises": [
        "StrongWilled(mirabell) ∧ StrongWilled(millamant) ::: Mirabell and Millamant are equally strong-willed.",
        "Discuss(mirabell, conditions) ::: Mirabell and Millamant discuss the conditions under which they would accept each other in marriage.",
        "Propose(mirabell, millamant) ::: Mirabell proposes to Millamant.",
        "Accept(millamant, mirabell) ∧ EncouragedBy(millamant, mrsFainall) ::: Millamant accepts Mirabell's proposal with encouragement from Mrs. Fainall.",
        "Arrives(ladyWishfort) ::: Lady Wishfort arrives.",
        "Wants(ladyWishfort, sirWilfullWitwoud) ::: Lady Wishfort wants Millamant to marry her nephew, Sir Wilfull Witwoud.",
        "Accuses(sirRowland, mirabell) ::: Sir Rowland accuses Mirabell of trying to sabotage their wedding.",
        "Agrees(ladyWishfort, marriageContract) ::: Lady Wishfort agrees to let Sir Rowland bring a marriage contract that night.",
        "Conclusion:",
        "∃x (StrongWilled(x) ∧ Discuss(mirabell, conditions) ∧ Accept(millamant, mirabell)) ::: There exists a strong-willed person who discusses conditions and accepts a marriage proposal."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "320": [
    {
      "id": 320,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 0,
      "paragraph": " Act 1 is set in a chocolate house where Mirabell and Fainall have just finished playing cards. A footman comes and tells Mirabell that Waitwell (Mirabell's male servant) and Foible (Lady Wishfort's female servant) were married that morning. Mirabell tells Fainall about his love of Millamant and is encouraged to marry her. Witwoud and Petulant appear and Mirabell is informed that should Lady Wishfort marry, he will lose £6000 of Millamant's inheritance.He will only get this money if he can make Lady Wishfort consent to his and Millamant's marriage.",
      "question_template": "Sir Rowland is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Millamant's inheritance",
        "Lady Wishfort's marriage"
      ],
      "predicates": [
        "Marries(x, y) ::: x marries y.",
        "LosesInheritance(x, y) ::: x loses y of Millamant's inheritance.",
        "Consents(x, y) ::: x consents to y.",
        "Encourages(x, y) ::: x encourages y.",
        "Loves(x, y) ::: x loves y.",
        "Informs(x, y) ::: x informs y about y's situation."
      ],
      "premises": [
        "Marries(a_1) → LosesInheritance(a_4, c) ::: If Lady Wishfort marries, Mirabell will lose £6000 of Millamant's inheritance.",
        "Consents(a_1, d) → LosesInheritance(a_4, c) ::: Mirabell will get £6000 of Millamant's inheritance if Lady Wishfort consents to his and Millamant's marriage.",
        "Loves(a_4, a_8) ::: Mirabell loves Millamant.",
        "Encourages(a_2, a_4) ::: Fainall encourages Mirabell to marry Millamant.",
        "Informs(a_4, a_2) ::: Mirabell informs Fainall about his love for Millamant."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 320,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 1,
      "paragraph": "Act 2 is set in St. James’ Park. Mrs. Fainall and Mrs. Marwood are discussing their hatred of men. Fainall appears and accuses Mrs. Marwood (with whom he is having an affair) of loving Mirabell (which she does). Meanwhile, Mrs. Fainall (Mirabell's former lover) tells Mirabell that she hates her husband, and they begin to plot to deceive Lady Wishfort into giving her consent to the marriage. Millamant appears in the park and, angry about the previous night (when Mirabell was confronted by Lady Wishfort), she tells Mirabell of her displeasure in his plan, which she only has a vague idea about. After she leaves, the newly wed servants appear and Mirabell reminds them of their roles in the plan.",
      "question_template": "Sir Rowland is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Mrs. Fainall's inheritance"
      ],
      "predicates": [
        "Hates(x, y) ::: x hates y.",
        "Loves(x, y) ::: x loves y.",
        "Accuses(x, y) ::: x accuses y.",
        "Discusses(x, y) ::: x discusses y.",
        "Plots(x, y) ::: x plots to deceive y.",
        "Angry(x) ::: x is angry.",
        "Reminds(x, y) ::: x reminds y of their roles.",
        "HasVagueIdea(x, y) ::: x has a vague idea about y.",
        "Inherits(x, y) ::: x inherits y.",
        "NewlyWed(x) ::: x is a newly wed."
      ],
      "premises": [
        "Discusses(a_3, a_2) ∧ Discusses(a_6, a_2) ::: Mrs. Fainall and Mrs. Marwood are discussing their hatred of men.",
        "Accuses(a_2, a_6) ∧ Loves(a_6, a_4) ::: Fainall accuses Mrs. Marwood of loving Mirabell.",
        "Hates(a_3, a_2) ::: Mrs. Fainall tells Mirabell that she hates her husband.",
        "Plots(a_3, a_1) ∧ Plo(a_4, a_1) ::: Mrs. Fainall and Mirabell plot to deceive Lady Wishfort into giving her consent to the marriage.",
        "Angry(a_8) ∧ HasVagueIdea(a_8, d) ::: Millamant is angry about the previous night and has a vague idea about the plan.",
        "Reminds(a_4, a_5) ::: Mirabell reminds the newly wed servants of their roles in the plan.",
        "NewlyWed(a_5) ∧ NewlyWed(a_7) ::: The newly wed servants appear in the park.",
        "Conclusion:",
        "Plots(a_3, a_1) ::: Mrs. Fainall and Mirabell plot to deceive Lady Wishfort into giving her consent to the marriage."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 320,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 3,
      "paragraph": "Mirabell and Millamant, equally strong-willed, discuss in detail the conditions under which they would accept each other in marriage (otherwise known as the \"proviso scene\"), showing the depth of their feeling for each other. Mirabell finally proposes to Millamant and, with Mrs. Fainall's encouragement (almost consent, as Millamant knows of their previous relations), Millamant accepts. Mirabell leaves as Lady Wishfort arrives, and she lets it be known that she wants Millamant to marry her nephew, Sir Wilfull Witwoud, who has just arrived from the countryside. Lady Wishfort later gets a letter telling her about the Sir Rowland plot. Sir Rowland takes the letter and accuses Mirabell of trying to sabotage their wedding. Lady Wishfort agrees to let Sir Rowland bring a marriage contract that night.",
      "question_template": "Sir Rowland is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Lady Wishfort's inheritance"
      ],
      "predicates": [
        "StrongWilled(x) ::: x is strong-willed.",
        "Discuss(x, y) ::: x discusses y.",
        "Propose(x, y) ::: x proposes to y.",
        "Accept(x, y) ::: x accepts y's proposal.",
        "EncouragedBy(x, y) ::: x is encouraged by y.",
        "Wants(x, y) ::: x wants y to marry.",
        "Arrives(x) ::: x arrives.",
        "Accuses(x, y) ::: x accuses y of something.",
        "Brings(x, y) ::: x brings y.",
        "Agrees(x, y) ::: x agrees to y."
      ],
      "premises": [
        "StrongWilled(mirabell) ∧ StrongWilled(millamant) ::: Mirabell and Millamant are equally strong-willed.",
        "Discuss(mirabell, conditions) ::: Mirabell and Millamant discuss the conditions under which they would accept each other in marriage.",
        "Propose(mirabell, millamant) ::: Mirabell proposes to Millamant.",
        "Accept(millamant, mirabell) ∧ EncouragedBy(millamant, mrsFainall) ::: Millamant accepts Mirabell's proposal with encouragement from Mrs. Fainall.",
        "Arrives(ladyWishfort) ::: Lady Wishfort arrives.",
        "Wants(ladyWishfort, sirWilfullWitwoud) ::: Lady Wishfort wants Millamant to marry her nephew, Sir Wilfull Witwoud.",
        "Accuses(sirRowland, mirabell) ::: Sir Rowland accuses Mirabell of trying to sabotage their wedding.",
        "Agrees(ladyWishfort, marriageContract) ::: Lady Wishfort agrees to let Sir Rowland bring a marriage contract that night.",
        "Conclusion:",
        "∃x (StrongWilled(x) ∧ Discuss(mirabell, conditions) ∧ Accept(millamant, mirabell)) ::: There exists a strong-willed person who discusses conditions and accepts a marriage proposal."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "321": [
    {
      "id": 321,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 0,
      "paragraph": " Act 1 is set in a chocolate house where Mirabell and Fainall have just finished playing cards. A footman comes and tells Mirabell that Waitwell (Mirabell's male servant) and Foible (Lady Wishfort's female servant) were married that morning. Mirabell tells Fainall about his love of Millamant and is encouraged to marry her. Witwoud and Petulant appear and Mirabell is informed that should Lady Wishfort marry, he will lose £6000 of Millamant's inheritance.He will only get this money if he can make Lady Wishfort consent to his and Millamant's marriage.",
      "question_template": "Mrs. Fainall had an affair with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Playing cards"
      ],
      "predicates": [
        "Marries(x, y) ::: x marries y.",
        "LosesInheritance(x, y) ::: x loses y of Millamant's inheritance.",
        "Consents(x, y) ::: x consents to y.",
        "Encourages(x, y) ::: x encourages y.",
        "Loves(x, y) ::: x loves y.",
        "Informs(x, y) ::: x informs y about y's situation."
      ],
      "premises": [
        "Marries(a_1) → LosesInheritance(a_4, c) ::: If Lady Wishfort marries, Mirabell will lose £6000 of Millamant's inheritance.",
        "Consents(a_1, d) → LosesInheritance(a_4, c) ::: Mirabell will get £6000 of Millamant's inheritance if Lady Wishfort consents to his and Millamant's marriage.",
        "Loves(a_4, a_8) ::: Mirabell loves Millamant.",
        "Encourages(a_2, a_4) ::: Fainall encourages Mirabell to marry Millamant.",
        "Informs(a_4, a_2) ::: Mirabell informs Fainall about his love for Millamant."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "322": [
    {
      "id": 322,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 0,
      "paragraph": " Act 1 is set in a chocolate house where Mirabell and Fainall have just finished playing cards. A footman comes and tells Mirabell that Waitwell (Mirabell's male servant) and Foible (Lady Wishfort's female servant) were married that morning. Mirabell tells Fainall about his love of Millamant and is encouraged to marry her. Witwoud and Petulant appear and Mirabell is informed that should Lady Wishfort marry, he will lose £6000 of Millamant's inheritance.He will only get this money if he can make Lady Wishfort consent to his and Millamant's marriage.",
      "question_template": "[[CANDIDATE_ANSWER]] will lose their inheritance if Mirabell marries Millamant.",
      "candidate_answers": [
        "£6000"
      ],
      "predicates": [
        "Marries(x, y) ::: x marries y.",
        "LosesInheritance(x, y) ::: x loses y of Millamant's inheritance.",
        "Consents(x, y) ::: x consents to y.",
        "Encourages(x, y) ::: x encourages y.",
        "Loves(x, y) ::: x loves y.",
        "Informs(x, y) ::: x informs y about y's situation."
      ],
      "premises": [
        "Marries(a_1) → LosesInheritance(a_4, c) ::: If Lady Wishfort marries, Mirabell will lose £6000 of Millamant's inheritance.",
        "Consents(a_1, d) → LosesInheritance(a_4, c) ::: Mirabell will get £6000 of Millamant's inheritance if Lady Wishfort consents to his and Millamant's marriage.",
        "Loves(a_4, a_8) ::: Mirabell loves Millamant.",
        "Encourages(a_2, a_4) ::: Fainall encourages Mirabell to marry Millamant.",
        "Informs(a_4, a_2) ::: Mirabell informs Fainall about his love for Millamant."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 322,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 4,
      "paragraph": "By Act 5, Lady Wishfort has found out the plot, and Fainall has had Waitwell arrested. Mrs. Fainall tells Foible that her previous affair with Mirabell is now public knowledge. Lady Wishfort appears with Mrs. Marwood, whom she thanks for unveiling the plot. Fainall then appears and uses the information of Mrs. Fainall's previous affair with Mirabell and Millamant's contract to marry him to blackmail Lady Wishfort, telling that she should never marry and that she is to transfer her fortune to him. Lady Wishfort offers Mirabell her consent to the marriage if he can save her fortune and honour. Mirabell calls on Waitwell who brings a contract from the time before the marriage of the Fainalls in which Mrs. Fainall gives all her property to Mirabell. This neutralises the blackmail attempts, after which Mirabell restores Mrs. Fainall's property to her possession and then is free to marry Millamant with the full £6000 inheritance.",
      "question_template": "[[CANDIDATE_ANSWER]] will lose their inheritance if Mirabell marries Millamant.",
      "candidate_answers": [
        "£6000 inheritance"
      ],
      "predicates": [
        "Consent(a_1, a_4) ::: Lady Wishfort gives her consent to Mirabell.",
        "SavesFortuneAndHonour(a_4, a_1) ::: Mirabell saves Lady Wishfort's fortune and honour.",
        "TransfersProperty(a_3, a_4, e) ::: Mrs. Fainall transfers her property to Mirabell by the contract.",
        "Blackmails(a_2, a_1) ::: Fainall blackmails Lady Wishfort.",
        "HasContract(a_4, e) ::: Mirabell has the contract.",
        "RestoresProperty(a_4, a_3) ::: Mirabell restores Mrs. Fainall's property to her possession.",
        "Marries(a_4, a_8) ::: Mirabell marries Millamant.",
        "HasInheritance(a_4, c) ::: Mirabell has the £6000 inheritance."
      ],
      "premises": [
        "Consent(a_1, a_4) → SavesFortuneAndHonour(a_4, a_1) ::: Lady Wishfort's consent to the marriage is conditional on Mirabell saving her fortune and honour.",
        "TransfersProperty(a_3, a_4, e) ::: Mrs. Fainall's property is transferred to Mirabell by the contract.",
        "Blackmails(a_2, a_1) ::: Fainall blackmails Lady Wishfort.",
        "HasContract(a_4, e) ::: Mirabell has the contract.",
        "RestoresProperty(a_4, a_3) ::: Mirabell restores Mrs. Fainall's property to her possession.",
        "Marries(a_4, a_8) ::: Mirabell marries Millamant.",
        "HasInheritance(a_4, c) ::: Mirabell has the £6000 inheritance."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "324": [
    {
      "id": 324,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 1,
      "paragraph": "Act 2 is set in St. James’ Park. Mrs. Fainall and Mrs. Marwood are discussing their hatred of men. Fainall appears and accuses Mrs. Marwood (with whom he is having an affair) of loving Mirabell (which she does). Meanwhile, Mrs. Fainall (Mirabell's former lover) tells Mirabell that she hates her husband, and they begin to plot to deceive Lady Wishfort into giving her consent to the marriage. Millamant appears in the park and, angry about the previous night (when Mirabell was confronted by Lady Wishfort), she tells Mirabell of her displeasure in his plan, which she only has a vague idea about. After she leaves, the newly wed servants appear and Mirabell reminds them of their roles in the plan.",
      "question_template": "Mirabell will lose [[CANDIDATE_ANSWER]] if Lady Wishfort gets married.",
      "candidate_answers": [
        "Mrs. Fainall",
        "Mrs. Marwood"
      ],
      "predicates": [
        "Hates(x, y) ::: x hates y.",
        "Loves(x, y) ::: x loves y.",
        "Accuses(x, y) ::: x accuses y.",
        "Discusses(x, y) ::: x discusses y.",
        "Plots(x, y) ::: x plots to deceive y.",
        "Angry(x) ::: x is angry.",
        "Reminds(x, y) ::: x reminds y of their roles.",
        "HasVagueIdea(x, y) ::: x has a vague idea about y.",
        "Inherits(x, y) ::: x inherits y.",
        "NewlyWed(x) ::: x is a newly wed."
      ],
      "premises": [
        "Discusses(a_3, a_2) ∧ Discusses(a_6, a_2) ::: Mrs. Fainall and Mrs. Marwood are discussing their hatred of men.",
        "Accuses(a_2, a_6) ∧ Loves(a_6, a_4) ::: Fainall accuses Mrs. Marwood of loving Mirabell.",
        "Hates(a_3, a_2) ::: Mrs. Fainall tells Mirabell that she hates her husband.",
        "Plots(a_3, a_1) ∧ Plo(a_4, a_1) ::: Mrs. Fainall and Mirabell plot to deceive Lady Wishfort into giving her consent to the marriage.",
        "Angry(a_8) ∧ HasVagueIdea(a_8, d) ::: Millamant is angry about the previous night and has a vague idea about the plan.",
        "Reminds(a_4, a_5) ::: Mirabell reminds the newly wed servants of their roles in the plan.",
        "NewlyWed(a_5) ∧ NewlyWed(a_7) ::: The newly wed servants appear in the park.",
        "Conclusion:",
        "Plots(a_3, a_1) ::: Mrs. Fainall and Mirabell plot to deceive Lady Wishfort into giving her consent to the marriage."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 324,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 3,
      "paragraph": "Mirabell and Millamant, equally strong-willed, discuss in detail the conditions under which they would accept each other in marriage (otherwise known as the \"proviso scene\"), showing the depth of their feeling for each other. Mirabell finally proposes to Millamant and, with Mrs. Fainall's encouragement (almost consent, as Millamant knows of their previous relations), Millamant accepts. Mirabell leaves as Lady Wishfort arrives, and she lets it be known that she wants Millamant to marry her nephew, Sir Wilfull Witwoud, who has just arrived from the countryside. Lady Wishfort later gets a letter telling her about the Sir Rowland plot. Sir Rowland takes the letter and accuses Mirabell of trying to sabotage their wedding. Lady Wishfort agrees to let Sir Rowland bring a marriage contract that night.",
      "question_template": "Mirabell will lose [[CANDIDATE_ANSWER]] if Lady Wishfort gets married.",
      "candidate_answers": [
        "Mrs. Fainall"
      ],
      "predicates": [
        "StrongWilled(x) ::: x is strong-willed.",
        "Discuss(x, y) ::: x discusses y.",
        "Propose(x, y) ::: x proposes to y.",
        "Accept(x, y) ::: x accepts y's proposal.",
        "EncouragedBy(x, y) ::: x is encouraged by y.",
        "Wants(x, y) ::: x wants y to marry.",
        "Arrives(x) ::: x arrives.",
        "Accuses(x, y) ::: x accuses y of something.",
        "Brings(x, y) ::: x brings y.",
        "Agrees(x, y) ::: x agrees to y."
      ],
      "premises": [
        "StrongWilled(mirabell) ∧ StrongWilled(millamant) ::: Mirabell and Millamant are equally strong-willed.",
        "Discuss(mirabell, conditions) ::: Mirabell and Millamant discuss the conditions under which they would accept each other in marriage.",
        "Propose(mirabell, millamant) ::: Mirabell proposes to Millamant.",
        "Accept(millamant, mirabell) ∧ EncouragedBy(millamant, mrsFainall) ::: Millamant accepts Mirabell's proposal with encouragement from Mrs. Fainall.",
        "Arrives(ladyWishfort) ::: Lady Wishfort arrives.",
        "Wants(ladyWishfort, sirWilfullWitwoud) ::: Lady Wishfort wants Millamant to marry her nephew, Sir Wilfull Witwoud.",
        "Accuses(sirRowland, mirabell) ::: Sir Rowland accuses Mirabell of trying to sabotage their wedding.",
        "Agrees(ladyWishfort, marriageContract) ::: Lady Wishfort agrees to let Sir Rowland bring a marriage contract that night.",
        "Conclusion:",
        "∃x (StrongWilled(x) ∧ Discuss(mirabell, conditions) ∧ Accept(millamant, mirabell)) ::: There exists a strong-willed person who discusses conditions and accepts a marriage proposal."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 324,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 4,
      "paragraph": "By Act 5, Lady Wishfort has found out the plot, and Fainall has had Waitwell arrested. Mrs. Fainall tells Foible that her previous affair with Mirabell is now public knowledge. Lady Wishfort appears with Mrs. Marwood, whom she thanks for unveiling the plot. Fainall then appears and uses the information of Mrs. Fainall's previous affair with Mirabell and Millamant's contract to marry him to blackmail Lady Wishfort, telling that she should never marry and that she is to transfer her fortune to him. Lady Wishfort offers Mirabell her consent to the marriage if he can save her fortune and honour. Mirabell calls on Waitwell who brings a contract from the time before the marriage of the Fainalls in which Mrs. Fainall gives all her property to Mirabell. This neutralises the blackmail attempts, after which Mirabell restores Mrs. Fainall's property to her possession and then is free to marry Millamant with the full £6000 inheritance.",
      "question_template": "Mirabell will lose [[CANDIDATE_ANSWER]] if Lady Wishfort gets married.",
      "candidate_answers": [
        "Mrs. Fainall",
        "Lady Wishfort"
      ],
      "predicates": [
        "Consent(a_1, a_4) ::: Lady Wishfort gives her consent to Mirabell.",
        "SavesFortuneAndHonour(a_4, a_1) ::: Mirabell saves Lady Wishfort's fortune and honour.",
        "TransfersProperty(a_3, a_4, e) ::: Mrs. Fainall transfers her property to Mirabell by the contract.",
        "Blackmails(a_2, a_1) ::: Fainall blackmails Lady Wishfort.",
        "HasContract(a_4, e) ::: Mirabell has the contract.",
        "RestoresProperty(a_4, a_3) ::: Mirabell restores Mrs. Fainall's property to her possession.",
        "Marries(a_4, a_8) ::: Mirabell marries Millamant.",
        "HasInheritance(a_4, c) ::: Mirabell has the £6000 inheritance."
      ],
      "premises": [
        "Consent(a_1, a_4) → SavesFortuneAndHonour(a_4, a_1) ::: Lady Wishfort's consent to the marriage is conditional on Mirabell saving her fortune and honour.",
        "TransfersProperty(a_3, a_4, e) ::: Mrs. Fainall's property is transferred to Mirabell by the contract.",
        "Blackmails(a_2, a_1) ::: Fainall blackmails Lady Wishfort.",
        "HasContract(a_4, e) ::: Mirabell has the contract.",
        "RestoresProperty(a_4, a_3) ::: Mirabell restores Mrs. Fainall's property to her possession.",
        "Marries(a_4, a_8) ::: Mirabell marries Millamant.",
        "HasInheritance(a_4, c) ::: Mirabell has the £6000 inheritance."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "325": [
    {
      "id": 325,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 1,
      "paragraph": "Act 2 is set in St. James’ Park. Mrs. Fainall and Mrs. Marwood are discussing their hatred of men. Fainall appears and accuses Mrs. Marwood (with whom he is having an affair) of loving Mirabell (which she does). Meanwhile, Mrs. Fainall (Mirabell's former lover) tells Mirabell that she hates her husband, and they begin to plot to deceive Lady Wishfort into giving her consent to the marriage. Millamant appears in the park and, angry about the previous night (when Mirabell was confronted by Lady Wishfort), she tells Mirabell of her displeasure in his plan, which she only has a vague idea about. After she leaves, the newly wed servants appear and Mirabell reminds them of their roles in the plan.",
      "question_template": "[[CANDIDATE_ANSWER]] is Lady Wishfort's female servant.",
      "candidate_answers": [
        "- Plot to deceive Lady Wishfort into giving her consent to the marriage"
      ],
      "predicates": [
        "Hates(x, y) ::: x hates y.",
        "Loves(x, y) ::: x loves y.",
        "Accuses(x, y) ::: x accuses y.",
        "Discusses(x, y) ::: x discusses y.",
        "Plots(x, y) ::: x plots to deceive y.",
        "Angry(x) ::: x is angry.",
        "Reminds(x, y) ::: x reminds y of their roles.",
        "HasVagueIdea(x, y) ::: x has a vague idea about y.",
        "Inherits(x, y) ::: x inherits y.",
        "NewlyWed(x) ::: x is a newly wed."
      ],
      "premises": [
        "Discusses(a_3, a_2) ∧ Discusses(a_6, a_2) ::: Mrs. Fainall and Mrs. Marwood are discussing their hatred of men.",
        "Accuses(a_2, a_6) ∧ Loves(a_6, a_4) ::: Fainall accuses Mrs. Marwood of loving Mirabell.",
        "Hates(a_3, a_2) ::: Mrs. Fainall tells Mirabell that she hates her husband.",
        "Plots(a_3, a_1) ∧ Plo(a_4, a_1) ::: Mrs. Fainall and Mirabell plot to deceive Lady Wishfort into giving her consent to the marriage.",
        "Angry(a_8) ∧ HasVagueIdea(a_8, d) ::: Millamant is angry about the previous night and has a vague idea about the plan.",
        "Reminds(a_4, a_5) ::: Mirabell reminds the newly wed servants of their roles in the plan.",
        "NewlyWed(a_5) ∧ NewlyWed(a_7) ::: The newly wed servants appear in the park.",
        "Conclusion:",
        "Plots(a_3, a_1) ::: Mrs. Fainall and Mirabell plot to deceive Lady Wishfort into giving her consent to the marriage."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "327": [
    {
      "id": 327,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 0,
      "paragraph": " Act 1 is set in a chocolate house where Mirabell and Fainall have just finished playing cards. A footman comes and tells Mirabell that Waitwell (Mirabell's male servant) and Foible (Lady Wishfort's female servant) were married that morning. Mirabell tells Fainall about his love of Millamant and is encouraged to marry her. Witwoud and Petulant appear and Mirabell is informed that should Lady Wishfort marry, he will lose £6000 of Millamant's inheritance.He will only get this money if he can make Lady Wishfort consent to his and Millamant's marriage.",
      "question_template": "Mirabell and Millamant are trying to [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Lady Wishfort",
        "Mirabell"
      ],
      "predicates": [
        "Marries(x, y) ::: x marries y.",
        "LosesInheritance(x, y) ::: x loses y of Millamant's inheritance.",
        "Consents(x, y) ::: x consents to y.",
        "Encourages(x, y) ::: x encourages y.",
        "Loves(x, y) ::: x loves y.",
        "Informs(x, y) ::: x informs y about y's situation."
      ],
      "premises": [
        "Marries(a_1) → LosesInheritance(a_4, c) ::: If Lady Wishfort marries, Mirabell will lose £6000 of Millamant's inheritance.",
        "Consents(a_1, d) → LosesInheritance(a_4, c) ::: Mirabell will get £6000 of Millamant's inheritance if Lady Wishfort consents to his and Millamant's marriage.",
        "Loves(a_4, a_8) ::: Mirabell loves Millamant.",
        "Encourages(a_2, a_4) ::: Fainall encourages Mirabell to marry Millamant.",
        "Informs(a_4, a_2) ::: Mirabell informs Fainall about his love for Millamant."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 327,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 1,
      "paragraph": "Act 2 is set in St. James’ Park. Mrs. Fainall and Mrs. Marwood are discussing their hatred of men. Fainall appears and accuses Mrs. Marwood (with whom he is having an affair) of loving Mirabell (which she does). Meanwhile, Mrs. Fainall (Mirabell's former lover) tells Mirabell that she hates her husband, and they begin to plot to deceive Lady Wishfort into giving her consent to the marriage. Millamant appears in the park and, angry about the previous night (when Mirabell was confronted by Lady Wishfort), she tells Mirabell of her displeasure in his plan, which she only has a vague idea about. After she leaves, the newly wed servants appear and Mirabell reminds them of their roles in the plan.",
      "question_template": "Mirabell and Millamant are trying to [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Lady Wishfort",
        "Millamant",
        "Mirabell"
      ],
      "predicates": [
        "Hates(x, y) ::: x hates y.",
        "Loves(x, y) ::: x loves y.",
        "Accuses(x, y) ::: x accuses y.",
        "Discusses(x, y) ::: x discusses y.",
        "Plots(x, y) ::: x plots to deceive y.",
        "Angry(x) ::: x is angry.",
        "Reminds(x, y) ::: x reminds y of their roles.",
        "HasVagueIdea(x, y) ::: x has a vague idea about y.",
        "Inherits(x, y) ::: x inherits y.",
        "NewlyWed(x) ::: x is a newly wed."
      ],
      "premises": [
        "Discusses(a_3, a_2) ∧ Discusses(a_6, a_2) ::: Mrs. Fainall and Mrs. Marwood are discussing their hatred of men.",
        "Accuses(a_2, a_6) ∧ Loves(a_6, a_4) ::: Fainall accuses Mrs. Marwood of loving Mirabell.",
        "Hates(a_3, a_2) ::: Mrs. Fainall tells Mirabell that she hates her husband.",
        "Plots(a_3, a_1) ∧ Plo(a_4, a_1) ::: Mrs. Fainall and Mirabell plot to deceive Lady Wishfort into giving her consent to the marriage.",
        "Angry(a_8) ∧ HasVagueIdea(a_8, d) ::: Millamant is angry about the previous night and has a vague idea about the plan.",
        "Reminds(a_4, a_5) ::: Mirabell reminds the newly wed servants of their roles in the plan.",
        "NewlyWed(a_5) ∧ NewlyWed(a_7) ::: The newly wed servants appear in the park.",
        "Conclusion:",
        "Plots(a_3, a_1) ::: Mrs. Fainall and Mirabell plot to deceive Lady Wishfort into giving her consent to the marriage."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 327,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 3,
      "paragraph": "Mirabell and Millamant, equally strong-willed, discuss in detail the conditions under which they would accept each other in marriage (otherwise known as the \"proviso scene\"), showing the depth of their feeling for each other. Mirabell finally proposes to Millamant and, with Mrs. Fainall's encouragement (almost consent, as Millamant knows of their previous relations), Millamant accepts. Mirabell leaves as Lady Wishfort arrives, and she lets it be known that she wants Millamant to marry her nephew, Sir Wilfull Witwoud, who has just arrived from the countryside. Lady Wishfort later gets a letter telling her about the Sir Rowland plot. Sir Rowland takes the letter and accuses Mirabell of trying to sabotage their wedding. Lady Wishfort agrees to let Sir Rowland bring a marriage contract that night.",
      "question_template": "Mirabell and Millamant are trying to [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Sir Wilfull Witwoud"
      ],
      "predicates": [
        "StrongWilled(x) ::: x is strong-willed.",
        "Discuss(x, y) ::: x discusses y.",
        "Propose(x, y) ::: x proposes to y.",
        "Accept(x, y) ::: x accepts y's proposal.",
        "EncouragedBy(x, y) ::: x is encouraged by y.",
        "Wants(x, y) ::: x wants y to marry.",
        "Arrives(x) ::: x arrives.",
        "Accuses(x, y) ::: x accuses y of something.",
        "Brings(x, y) ::: x brings y.",
        "Agrees(x, y) ::: x agrees to y."
      ],
      "premises": [
        "StrongWilled(mirabell) ∧ StrongWilled(millamant) ::: Mirabell and Millamant are equally strong-willed.",
        "Discuss(mirabell, conditions) ::: Mirabell and Millamant discuss the conditions under which they would accept each other in marriage.",
        "Propose(mirabell, millamant) ::: Mirabell proposes to Millamant.",
        "Accept(millamant, mirabell) ∧ EncouragedBy(millamant, mrsFainall) ::: Millamant accepts Mirabell's proposal with encouragement from Mrs. Fainall.",
        "Arrives(ladyWishfort) ::: Lady Wishfort arrives.",
        "Wants(ladyWishfort, sirWilfullWitwoud) ::: Lady Wishfort wants Millamant to marry her nephew, Sir Wilfull Witwoud.",
        "Accuses(sirRowland, mirabell) ::: Sir Rowland accuses Mirabell of trying to sabotage their wedding.",
        "Agrees(ladyWishfort, marriageContract) ::: Lady Wishfort agrees to let Sir Rowland bring a marriage contract that night.",
        "Conclusion:",
        "∃x (StrongWilled(x) ∧ Discuss(mirabell, conditions) ∧ Accept(millamant, mirabell)) ::: There exists a strong-willed person who discusses conditions and accepts a marriage proposal."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "330": [
    {
      "id": 330,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 1,
      "paragraph": "Act 2 is set in St. James’ Park. Mrs. Fainall and Mrs. Marwood are discussing their hatred of men. Fainall appears and accuses Mrs. Marwood (with whom he is having an affair) of loving Mirabell (which she does). Meanwhile, Mrs. Fainall (Mirabell's former lover) tells Mirabell that she hates her husband, and they begin to plot to deceive Lady Wishfort into giving her consent to the marriage. Millamant appears in the park and, angry about the previous night (when Mirabell was confronted by Lady Wishfort), she tells Mirabell of her displeasure in his plan, which she only has a vague idea about. After she leaves, the newly wed servants appear and Mirabell reminds them of their roles in the plan.",
      "question_template": "[[CANDIDATE_ANSWER]] ultimately had Waitwell arrested.",
      "candidate_answers": [
        "Mrs. Marwood",
        "Fainall accuses Mrs. Marwood of loving Mirabell"
      ],
      "predicates": [
        "Hates(x, y) ::: x hates y.",
        "Loves(x, y) ::: x loves y.",
        "Accuses(x, y) ::: x accuses y.",
        "Discusses(x, y) ::: x discusses y.",
        "Plots(x, y) ::: x plots to deceive y.",
        "Angry(x) ::: x is angry.",
        "Reminds(x, y) ::: x reminds y of their roles.",
        "HasVagueIdea(x, y) ::: x has a vague idea about y.",
        "Inherits(x, y) ::: x inherits y.",
        "NewlyWed(x) ::: x is a newly wed."
      ],
      "premises": [
        "Discusses(a_3, a_2) ∧ Discusses(a_6, a_2) ::: Mrs. Fainall and Mrs. Marwood are discussing their hatred of men.",
        "Accuses(a_2, a_6) ∧ Loves(a_6, a_4) ::: Fainall accuses Mrs. Marwood of loving Mirabell.",
        "Hates(a_3, a_2) ::: Mrs. Fainall tells Mirabell that she hates her husband.",
        "Plots(a_3, a_1) ∧ Plo(a_4, a_1) ::: Mrs. Fainall and Mirabell plot to deceive Lady Wishfort into giving her consent to the marriage.",
        "Angry(a_8) ∧ HasVagueIdea(a_8, d) ::: Millamant is angry about the previous night and has a vague idea about the plan.",
        "Reminds(a_4, a_5) ::: Mirabell reminds the newly wed servants of their roles in the plan.",
        "NewlyWed(a_5) ∧ NewlyWed(a_7) ::: The newly wed servants appear in the park.",
        "Conclusion:",
        "Plots(a_3, a_1) ::: Mrs. Fainall and Mirabell plot to deceive Lady Wishfort into giving her consent to the marriage."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 330,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 3,
      "paragraph": "Mirabell and Millamant, equally strong-willed, discuss in detail the conditions under which they would accept each other in marriage (otherwise known as the \"proviso scene\"), showing the depth of their feeling for each other. Mirabell finally proposes to Millamant and, with Mrs. Fainall's encouragement (almost consent, as Millamant knows of their previous relations), Millamant accepts. Mirabell leaves as Lady Wishfort arrives, and she lets it be known that she wants Millamant to marry her nephew, Sir Wilfull Witwoud, who has just arrived from the countryside. Lady Wishfort later gets a letter telling her about the Sir Rowland plot. Sir Rowland takes the letter and accuses Mirabell of trying to sabotage their wedding. Lady Wishfort agrees to let Sir Rowland bring a marriage contract that night.",
      "question_template": "[[CANDIDATE_ANSWER]] ultimately had Waitwell arrested.",
      "candidate_answers": [
        "Mirabell",
        "Sir Rowland"
      ],
      "predicates": [
        "StrongWilled(x) ::: x is strong-willed.",
        "Discuss(x, y) ::: x discusses y.",
        "Propose(x, y) ::: x proposes to y.",
        "Accept(x, y) ::: x accepts y's proposal.",
        "EncouragedBy(x, y) ::: x is encouraged by y.",
        "Wants(x, y) ::: x wants y to marry.",
        "Arrives(x) ::: x arrives.",
        "Accuses(x, y) ::: x accuses y of something.",
        "Brings(x, y) ::: x brings y.",
        "Agrees(x, y) ::: x agrees to y."
      ],
      "premises": [
        "StrongWilled(mirabell) ∧ StrongWilled(millamant) ::: Mirabell and Millamant are equally strong-willed.",
        "Discuss(mirabell, conditions) ::: Mirabell and Millamant discuss the conditions under which they would accept each other in marriage.",
        "Propose(mirabell, millamant) ::: Mirabell proposes to Millamant.",
        "Accept(millamant, mirabell) ∧ EncouragedBy(millamant, mrsFainall) ::: Millamant accepts Mirabell's proposal with encouragement from Mrs. Fainall.",
        "Arrives(ladyWishfort) ::: Lady Wishfort arrives.",
        "Wants(ladyWishfort, sirWilfullWitwoud) ::: Lady Wishfort wants Millamant to marry her nephew, Sir Wilfull Witwoud.",
        "Accuses(sirRowland, mirabell) ::: Sir Rowland accuses Mirabell of trying to sabotage their wedding.",
        "Agrees(ladyWishfort, marriageContract) ::: Lady Wishfort agrees to let Sir Rowland bring a marriage contract that night.",
        "Conclusion:",
        "∃x (StrongWilled(x) ∧ Discuss(mirabell, conditions) ∧ Accept(millamant, mirabell)) ::: There exists a strong-willed person who discusses conditions and accepts a marriage proposal."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "331": [
    {
      "id": 331,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 1,
      "paragraph": "Act 2 is set in St. James’ Park. Mrs. Fainall and Mrs. Marwood are discussing their hatred of men. Fainall appears and accuses Mrs. Marwood (with whom he is having an affair) of loving Mirabell (which she does). Meanwhile, Mrs. Fainall (Mirabell's former lover) tells Mirabell that she hates her husband, and they begin to plot to deceive Lady Wishfort into giving her consent to the marriage. Millamant appears in the park and, angry about the previous night (when Mirabell was confronted by Lady Wishfort), she tells Mirabell of her displeasure in his plan, which she only has a vague idea about. After she leaves, the newly wed servants appear and Mirabell reminds them of their roles in the plan.",
      "question_template": "Lady Wishfort figured out the scam against her by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Mrs. Fainall and Mrs. Marwood are discussing their hatred of men.",
        "- Fainall appears and accuses Mrs. Marwood of loving Mirabell.",
        "- Mrs. Fainall tells Mirabell that she hates her husband, and they begin to plot to deceive Lady Wishfort into giving her consent to the marriage.",
        "- Millamant appears in the park and tells Mirabell of her displeasure in his plan."
      ],
      "predicates": [
        "Hates(x, y) ::: x hates y.",
        "Loves(x, y) ::: x loves y.",
        "Accuses(x, y) ::: x accuses y.",
        "Discusses(x, y) ::: x discusses y.",
        "Plots(x, y) ::: x plots to deceive y.",
        "Angry(x) ::: x is angry.",
        "Reminds(x, y) ::: x reminds y of their roles.",
        "HasVagueIdea(x, y) ::: x has a vague idea about y.",
        "Inherits(x, y) ::: x inherits y.",
        "NewlyWed(x) ::: x is a newly wed."
      ],
      "premises": [
        "Discusses(a_3, a_2) ∧ Discusses(a_6, a_2) ::: Mrs. Fainall and Mrs. Marwood are discussing their hatred of men.",
        "Accuses(a_2, a_6) ∧ Loves(a_6, a_4) ::: Fainall accuses Mrs. Marwood of loving Mirabell.",
        "Hates(a_3, a_2) ::: Mrs. Fainall tells Mirabell that she hates her husband.",
        "Plots(a_3, a_1) ∧ Plo(a_4, a_1) ::: Mrs. Fainall and Mirabell plot to deceive Lady Wishfort into giving her consent to the marriage.",
        "Angry(a_8) ∧ HasVagueIdea(a_8, d) ::: Millamant is angry about the previous night and has a vague idea about the plan.",
        "Reminds(a_4, a_5) ::: Mirabell reminds the newly wed servants of their roles in the plan.",
        "NewlyWed(a_5) ∧ NewlyWed(a_7) ::: The newly wed servants appear in the park.",
        "Conclusion:",
        "Plots(a_3, a_1) ::: Mrs. Fainall and Mirabell plot to deceive Lady Wishfort into giving her consent to the marriage."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 331,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 4,
      "paragraph": "By Act 5, Lady Wishfort has found out the plot, and Fainall has had Waitwell arrested. Mrs. Fainall tells Foible that her previous affair with Mirabell is now public knowledge. Lady Wishfort appears with Mrs. Marwood, whom she thanks for unveiling the plot. Fainall then appears and uses the information of Mrs. Fainall's previous affair with Mirabell and Millamant's contract to marry him to blackmail Lady Wishfort, telling that she should never marry and that she is to transfer her fortune to him. Lady Wishfort offers Mirabell her consent to the marriage if he can save her fortune and honour. Mirabell calls on Waitwell who brings a contract from the time before the marriage of the Fainalls in which Mrs. Fainall gives all her property to Mirabell. This neutralises the blackmail attempts, after which Mirabell restores Mrs. Fainall's property to her possession and then is free to marry Millamant with the full £6000 inheritance.",
      "question_template": "Lady Wishfort figured out the scam against her by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Lady Wishfort has found out the plot",
        "- Mrs. Fainall tells Foible that her previous affair with Mirabell is now public knowledge",
        "- Fainall uses the information of Mrs. Fainall's previous affair with Mirabell and Millamant's contract to marry him to blackmail Lady Wishfort",
        "- Lady Wishfort offers Mirabell her consent to the marriage if he can save her fortune and honour",
        "- Mirabell restores Mrs. Fainall's property to her possession and then is free to marry Millamant"
      ],
      "predicates": [
        "Consent(a_1, a_4) ::: Lady Wishfort gives her consent to Mirabell.",
        "SavesFortuneAndHonour(a_4, a_1) ::: Mirabell saves Lady Wishfort's fortune and honour.",
        "TransfersProperty(a_3, a_4, e) ::: Mrs. Fainall transfers her property to Mirabell by the contract.",
        "Blackmails(a_2, a_1) ::: Fainall blackmails Lady Wishfort.",
        "HasContract(a_4, e) ::: Mirabell has the contract.",
        "RestoresProperty(a_4, a_3) ::: Mirabell restores Mrs. Fainall's property to her possession.",
        "Marries(a_4, a_8) ::: Mirabell marries Millamant.",
        "HasInheritance(a_4, c) ::: Mirabell has the £6000 inheritance."
      ],
      "premises": [
        "Consent(a_1, a_4) → SavesFortuneAndHonour(a_4, a_1) ::: Lady Wishfort's consent to the marriage is conditional on Mirabell saving her fortune and honour.",
        "TransfersProperty(a_3, a_4, e) ::: Mrs. Fainall's property is transferred to Mirabell by the contract.",
        "Blackmails(a_2, a_1) ::: Fainall blackmails Lady Wishfort.",
        "HasContract(a_4, e) ::: Mirabell has the contract.",
        "RestoresProperty(a_4, a_3) ::: Mirabell restores Mrs. Fainall's property to her possession.",
        "Marries(a_4, a_8) ::: Mirabell marries Millamant.",
        "HasInheritance(a_4, c) ::: Mirabell has the £6000 inheritance."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "RestoresProperty(a_4, a_3) ∧ Marries(a_4, a_8)"
      ]
    }
  ],
  "332": [
    {
      "id": 332,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 2,
      "paragraph": "Acts 3, 4 and 5 are all set in the home of Lady Wishfort. We are introduced to Lady Wishfort who is encouraged by Foible to marry the supposed Sir Rowland – Mirabell's supposed uncle – so that Mirabell will lose his inheritance. Sir Rowland is, however, Waitwell in disguise, and the plan is to entangle Lady Wishfort in a marriage which cannot go ahead, because it would be bigamy, not to mention a social disgrace (Waitwell is only a serving man, Lady Wishfort an aristocrat). Mirabell will offer to help her out of the embarrassing situation if she consents to his marriage. Later, Mrs. Fainall discusses this plan with Foible, but this is overheard by Mrs. Marwood. She later tells the plan to Fainall, who decides that he will take his wife's money and go away with Mrs. Marwood.",
      "question_template": "[[CANDIDATE_ANSWER]] was accused of trying to sabotage the wedding.",
      "candidate_answers": [
        "Sir Rowland is Mirabell's supposed uncle",
        "Sir Rowland is Waitwell in disguise",
        "Waitwell is only a serving man"
      ],
      "predicates": [
        "Marries(x, y) ::: x marries y.",
        "LosesInheritance(x) ::: x loses his inheritance.",
        "LearnsOfPlan(x) ::: x learns of the plan.",
        "TakesMoney(x, y) ::: x takes y's money.",
        "GoesAwayWith(x, y) ::: x goes away with y.",
        "DisguisedAs(x, y) ::: x is disguised as y.",
        "EncouragedBy(x, y) ::: x is encouraged by y.",
        "Overheard(x, y) ::: x overhears y.",
        "OffersHelp(x, y) ::: x offers help to y.",
        "EmbarrassingSituation(x) ::: x is in an embarrassing situation."
      ],
      "premises": [
        "Marries(a_1, a_7) → LosesInheritance(a_4) ::: If Lady Wishfort marries the supposed Sir Rowland, then Mirabell will lose his inheritance.",
        "LearnsOfPlan(a_2) → (TakesMoney(a_2, a_3) ∧ GoesAwayWith(a_2, a_6)) ::: If Fainall learns of the plan, then he will take his wife's money and go away with Mrs. Marwood.",
        "DisguisedAs(a_7, a_4) ::: Waitwell is disguised as Mirabell's supposed uncle, Sir Rowland.",
        "EncouragedBy(a_1, a_5) ::: Lady Wishfort is encouraged by Foible.",
        "OffersHelp(a_4, a_1) ::: Mirabell offers to help Lady Wishfort out of the embarrassing situation.",
        "Overheard(a_6, d) ::: Mrs. Marwood overhears the discussion of the plan by Mrs. Fainall and Foible."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 332,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 3,
      "paragraph": "Mirabell and Millamant, equally strong-willed, discuss in detail the conditions under which they would accept each other in marriage (otherwise known as the \"proviso scene\"), showing the depth of their feeling for each other. Mirabell finally proposes to Millamant and, with Mrs. Fainall's encouragement (almost consent, as Millamant knows of their previous relations), Millamant accepts. Mirabell leaves as Lady Wishfort arrives, and she lets it be known that she wants Millamant to marry her nephew, Sir Wilfull Witwoud, who has just arrived from the countryside. Lady Wishfort later gets a letter telling her about the Sir Rowland plot. Sir Rowland takes the letter and accuses Mirabell of trying to sabotage their wedding. Lady Wishfort agrees to let Sir Rowland bring a marriage contract that night.",
      "question_template": "[[CANDIDATE_ANSWER]] was accused of trying to sabotage the wedding.",
      "candidate_answers": [
        "Sir Rowland",
        "A letter telling her about the Sir Rowland plot",
        "Accuses Mirabell of trying to sabotage their wedding"
      ],
      "predicates": [
        "StrongWilled(x) ::: x is strong-willed.",
        "Discuss(x, y) ::: x discusses y.",
        "Propose(x, y) ::: x proposes to y.",
        "Accept(x, y) ::: x accepts y's proposal.",
        "EncouragedBy(x, y) ::: x is encouraged by y.",
        "Wants(x, y) ::: x wants y to marry.",
        "Arrives(x) ::: x arrives.",
        "Accuses(x, y) ::: x accuses y of something.",
        "Brings(x, y) ::: x brings y.",
        "Agrees(x, y) ::: x agrees to y."
      ],
      "premises": [
        "StrongWilled(mirabell) ∧ StrongWilled(millamant) ::: Mirabell and Millamant are equally strong-willed.",
        "Discuss(mirabell, conditions) ::: Mirabell and Millamant discuss the conditions under which they would accept each other in marriage.",
        "Propose(mirabell, millamant) ::: Mirabell proposes to Millamant.",
        "Accept(millamant, mirabell) ∧ EncouragedBy(millamant, mrsFainall) ::: Millamant accepts Mirabell's proposal with encouragement from Mrs. Fainall.",
        "Arrives(ladyWishfort) ::: Lady Wishfort arrives.",
        "Wants(ladyWishfort, sirWilfullWitwoud) ::: Lady Wishfort wants Millamant to marry her nephew, Sir Wilfull Witwoud.",
        "Accuses(sirRowland, mirabell) ::: Sir Rowland accuses Mirabell of trying to sabotage their wedding.",
        "Agrees(ladyWishfort, marriageContract) ::: Lady Wishfort agrees to let Sir Rowland bring a marriage contract that night.",
        "Conclusion:",
        "∃x (StrongWilled(x) ∧ Discuss(mirabell, conditions) ∧ Accept(millamant, mirabell)) ::: There exists a strong-willed person who discusses conditions and accepts a marriage proposal."
      ],
      "conclusions": [
        "Accuses(sirRowland, mirabell)",
        "None",
        "None"
      ]
    }
  ],
  "333": [
    {
      "id": 333,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 2,
      "paragraph": "Acts 3, 4 and 5 are all set in the home of Lady Wishfort. We are introduced to Lady Wishfort who is encouraged by Foible to marry the supposed Sir Rowland – Mirabell's supposed uncle – so that Mirabell will lose his inheritance. Sir Rowland is, however, Waitwell in disguise, and the plan is to entangle Lady Wishfort in a marriage which cannot go ahead, because it would be bigamy, not to mention a social disgrace (Waitwell is only a serving man, Lady Wishfort an aristocrat). Mirabell will offer to help her out of the embarrassing situation if she consents to his marriage. Later, Mrs. Fainall discusses this plan with Foible, but this is overheard by Mrs. Marwood. She later tells the plan to Fainall, who decides that he will take his wife's money and go away with Mrs. Marwood.",
      "question_template": "[[CANDIDATE_ANSWER]] brings up the subject of marriage in the beginning.",
      "candidate_answers": [
        "a marriage which cannot go ahead, because it would be bigamy",
        "a social disgrace"
      ],
      "predicates": [
        "Marries(x, y) ::: x marries y.",
        "LosesInheritance(x) ::: x loses his inheritance.",
        "LearnsOfPlan(x) ::: x learns of the plan.",
        "TakesMoney(x, y) ::: x takes y's money.",
        "GoesAwayWith(x, y) ::: x goes away with y.",
        "DisguisedAs(x, y) ::: x is disguised as y.",
        "EncouragedBy(x, y) ::: x is encouraged by y.",
        "Overheard(x, y) ::: x overhears y.",
        "OffersHelp(x, y) ::: x offers help to y.",
        "EmbarrassingSituation(x) ::: x is in an embarrassing situation."
      ],
      "premises": [
        "Marries(a_1, a_7) → LosesInheritance(a_4) ::: If Lady Wishfort marries the supposed Sir Rowland, then Mirabell will lose his inheritance.",
        "LearnsOfPlan(a_2) → (TakesMoney(a_2, a_3) ∧ GoesAwayWith(a_2, a_6)) ::: If Fainall learns of the plan, then he will take his wife's money and go away with Mrs. Marwood.",
        "DisguisedAs(a_7, a_4) ::: Waitwell is disguised as Mirabell's supposed uncle, Sir Rowland.",
        "EncouragedBy(a_1, a_5) ::: Lady Wishfort is encouraged by Foible.",
        "OffersHelp(a_4, a_1) ::: Mirabell offers to help Lady Wishfort out of the embarrassing situation.",
        "Overheard(a_6, d) ::: Mrs. Marwood overhears the discussion of the plan by Mrs. Fainall and Foible."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "334": [
    {
      "id": 334,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 0,
      "paragraph": " Act 1 is set in a chocolate house where Mirabell and Fainall have just finished playing cards. A footman comes and tells Mirabell that Waitwell (Mirabell's male servant) and Foible (Lady Wishfort's female servant) were married that morning. Mirabell tells Fainall about his love of Millamant and is encouraged to marry her. Witwoud and Petulant appear and Mirabell is informed that should Lady Wishfort marry, he will lose £6000 of Millamant's inheritance.He will only get this money if he can make Lady Wishfort consent to his and Millamant's marriage.",
      "question_template": "Sir Rowland is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "£6000"
      ],
      "predicates": [
        "Marries(x, y) ::: x marries y.",
        "LosesInheritance(x, y) ::: x loses y of Millamant's inheritance.",
        "Consents(x, y) ::: x consents to y.",
        "Encourages(x, y) ::: x encourages y.",
        "Loves(x, y) ::: x loves y.",
        "Informs(x, y) ::: x informs y about y's situation."
      ],
      "premises": [
        "Marries(a_1) → LosesInheritance(a_4, c) ::: If Lady Wishfort marries, Mirabell will lose £6000 of Millamant's inheritance.",
        "Consents(a_1, d) → LosesInheritance(a_4, c) ::: Mirabell will get £6000 of Millamant's inheritance if Lady Wishfort consents to his and Millamant's marriage.",
        "Loves(a_4, a_8) ::: Mirabell loves Millamant.",
        "Encourages(a_2, a_4) ::: Fainall encourages Mirabell to marry Millamant.",
        "Informs(a_4, a_2) ::: Mirabell informs Fainall about his love for Millamant."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "335": [
    {
      "id": 335,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 0,
      "paragraph": " Act 1 is set in a chocolate house where Mirabell and Fainall have just finished playing cards. A footman comes and tells Mirabell that Waitwell (Mirabell's male servant) and Foible (Lady Wishfort's female servant) were married that morning. Mirabell tells Fainall about his love of Millamant and is encouraged to marry her. Witwoud and Petulant appear and Mirabell is informed that should Lady Wishfort marry, he will lose £6000 of Millamant's inheritance.He will only get this money if he can make Lady Wishfort consent to his and Millamant's marriage.",
      "question_template": "Bigamy is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "There is no information in the paragraph regarding Waitwell's ability to marry Mrs. Wishfort."
      ],
      "predicates": [
        "Marries(x, y) ::: x marries y.",
        "LosesInheritance(x, y) ::: x loses y of Millamant's inheritance.",
        "Consents(x, y) ::: x consents to y.",
        "Encourages(x, y) ::: x encourages y.",
        "Loves(x, y) ::: x loves y.",
        "Informs(x, y) ::: x informs y about y's situation."
      ],
      "premises": [
        "Marries(a_1) → LosesInheritance(a_4, c) ::: If Lady Wishfort marries, Mirabell will lose £6000 of Millamant's inheritance.",
        "Consents(a_1, d) → LosesInheritance(a_4, c) ::: Mirabell will get £6000 of Millamant's inheritance if Lady Wishfort consents to his and Millamant's marriage.",
        "Loves(a_4, a_8) ::: Mirabell loves Millamant.",
        "Encourages(a_2, a_4) ::: Fainall encourages Mirabell to marry Millamant.",
        "Informs(a_4, a_2) ::: Mirabell informs Fainall about his love for Millamant."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 335,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 2,
      "paragraph": "Acts 3, 4 and 5 are all set in the home of Lady Wishfort. We are introduced to Lady Wishfort who is encouraged by Foible to marry the supposed Sir Rowland – Mirabell's supposed uncle – so that Mirabell will lose his inheritance. Sir Rowland is, however, Waitwell in disguise, and the plan is to entangle Lady Wishfort in a marriage which cannot go ahead, because it would be bigamy, not to mention a social disgrace (Waitwell is only a serving man, Lady Wishfort an aristocrat). Mirabell will offer to help her out of the embarrassing situation if she consents to his marriage. Later, Mrs. Fainall discusses this plan with Foible, but this is overheard by Mrs. Marwood. She later tells the plan to Fainall, who decides that he will take his wife's money and go away with Mrs. Marwood.",
      "question_template": "Bigamy is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- The plan is to entangle Lady Wishfort in a marriage which cannot go ahead, because it would be bigamy, not to mention a social disgrace ."
      ],
      "predicates": [
        "Marries(x, y) ::: x marries y.",
        "LosesInheritance(x) ::: x loses his inheritance.",
        "LearnsOfPlan(x) ::: x learns of the plan.",
        "TakesMoney(x, y) ::: x takes y's money.",
        "GoesAwayWith(x, y) ::: x goes away with y.",
        "DisguisedAs(x, y) ::: x is disguised as y.",
        "EncouragedBy(x, y) ::: x is encouraged by y.",
        "Overheard(x, y) ::: x overhears y.",
        "OffersHelp(x, y) ::: x offers help to y.",
        "EmbarrassingSituation(x) ::: x is in an embarrassing situation."
      ],
      "premises": [
        "Marries(a_1, a_7) → LosesInheritance(a_4) ::: If Lady Wishfort marries the supposed Sir Rowland, then Mirabell will lose his inheritance.",
        "LearnsOfPlan(a_2) → (TakesMoney(a_2, a_3) ∧ GoesAwayWith(a_2, a_6)) ::: If Fainall learns of the plan, then he will take his wife's money and go away with Mrs. Marwood.",
        "DisguisedAs(a_7, a_4) ::: Waitwell is disguised as Mirabell's supposed uncle, Sir Rowland.",
        "EncouragedBy(a_1, a_5) ::: Lady Wishfort is encouraged by Foible.",
        "OffersHelp(a_4, a_1) ::: Mirabell offers to help Lady Wishfort out of the embarrassing situation.",
        "Overheard(a_6, d) ::: Mrs. Marwood overhears the discussion of the plan by Mrs. Fainall and Foible."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "336": [
    {
      "id": 336,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 1,
      "paragraph": "Act 2 is set in St. James’ Park. Mrs. Fainall and Mrs. Marwood are discussing their hatred of men. Fainall appears and accuses Mrs. Marwood (with whom he is having an affair) of loving Mirabell (which she does). Meanwhile, Mrs. Fainall (Mirabell's former lover) tells Mirabell that she hates her husband, and they begin to plot to deceive Lady Wishfort into giving her consent to the marriage. Millamant appears in the park and, angry about the previous night (when Mirabell was confronted by Lady Wishfort), she tells Mirabell of her displeasure in his plan, which she only has a vague idea about. After she leaves, the newly wed servants appear and Mirabell reminds them of their roles in the plan.",
      "question_template": "The inheritance in question is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Their hatred of men",
        "- Plot to deceive Lady Wishfort into giving her consent to the marriage"
      ],
      "predicates": [
        "Hates(x, y) ::: x hates y.",
        "Loves(x, y) ::: x loves y.",
        "Accuses(x, y) ::: x accuses y.",
        "Discusses(x, y) ::: x discusses y.",
        "Plots(x, y) ::: x plots to deceive y.",
        "Angry(x) ::: x is angry.",
        "Reminds(x, y) ::: x reminds y of their roles.",
        "HasVagueIdea(x, y) ::: x has a vague idea about y.",
        "Inherits(x, y) ::: x inherits y.",
        "NewlyWed(x) ::: x is a newly wed."
      ],
      "premises": [
        "Discusses(a_3, a_2) ∧ Discusses(a_6, a_2) ::: Mrs. Fainall and Mrs. Marwood are discussing their hatred of men.",
        "Accuses(a_2, a_6) ∧ Loves(a_6, a_4) ::: Fainall accuses Mrs. Marwood of loving Mirabell.",
        "Hates(a_3, a_2) ::: Mrs. Fainall tells Mirabell that she hates her husband.",
        "Plots(a_3, a_1) ∧ Plo(a_4, a_1) ::: Mrs. Fainall and Mirabell plot to deceive Lady Wishfort into giving her consent to the marriage.",
        "Angry(a_8) ∧ HasVagueIdea(a_8, d) ::: Millamant is angry about the previous night and has a vague idea about the plan.",
        "Reminds(a_4, a_5) ::: Mirabell reminds the newly wed servants of their roles in the plan.",
        "NewlyWed(a_5) ∧ NewlyWed(a_7) ::: The newly wed servants appear in the park.",
        "Conclusion:",
        "Plots(a_3, a_1) ::: Mrs. Fainall and Mirabell plot to deceive Lady Wishfort into giving her consent to the marriage."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 336,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 2,
      "paragraph": "Acts 3, 4 and 5 are all set in the home of Lady Wishfort. We are introduced to Lady Wishfort who is encouraged by Foible to marry the supposed Sir Rowland – Mirabell's supposed uncle – so that Mirabell will lose his inheritance. Sir Rowland is, however, Waitwell in disguise, and the plan is to entangle Lady Wishfort in a marriage which cannot go ahead, because it would be bigamy, not to mention a social disgrace (Waitwell is only a serving man, Lady Wishfort an aristocrat). Mirabell will offer to help her out of the embarrassing situation if she consents to his marriage. Later, Mrs. Fainall discusses this plan with Foible, but this is overheard by Mrs. Marwood. She later tells the plan to Fainall, who decides that he will take his wife's money and go away with Mrs. Marwood.",
      "question_template": "The inheritance in question is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Mrs. Fainall discusses this plan with Foible",
        "This is overheard by Mrs. Marwood"
      ],
      "predicates": [
        "Marries(x, y) ::: x marries y.",
        "LosesInheritance(x) ::: x loses his inheritance.",
        "LearnsOfPlan(x) ::: x learns of the plan.",
        "TakesMoney(x, y) ::: x takes y's money.",
        "GoesAwayWith(x, y) ::: x goes away with y.",
        "DisguisedAs(x, y) ::: x is disguised as y.",
        "EncouragedBy(x, y) ::: x is encouraged by y.",
        "Overheard(x, y) ::: x overhears y.",
        "OffersHelp(x, y) ::: x offers help to y.",
        "EmbarrassingSituation(x) ::: x is in an embarrassing situation."
      ],
      "premises": [
        "Marries(a_1, a_7) → LosesInheritance(a_4) ::: If Lady Wishfort marries the supposed Sir Rowland, then Mirabell will lose his inheritance.",
        "LearnsOfPlan(a_2) → (TakesMoney(a_2, a_3) ∧ GoesAwayWith(a_2, a_6)) ::: If Fainall learns of the plan, then he will take his wife's money and go away with Mrs. Marwood.",
        "DisguisedAs(a_7, a_4) ::: Waitwell is disguised as Mirabell's supposed uncle, Sir Rowland.",
        "EncouragedBy(a_1, a_5) ::: Lady Wishfort is encouraged by Foible.",
        "OffersHelp(a_4, a_1) ::: Mirabell offers to help Lady Wishfort out of the embarrassing situation.",
        "Overheard(a_6, d) ::: Mrs. Marwood overhears the discussion of the plan by Mrs. Fainall and Foible."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "337": [
    {
      "id": 337,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 1,
      "paragraph": "Act 2 is set in St. James’ Park. Mrs. Fainall and Mrs. Marwood are discussing their hatred of men. Fainall appears and accuses Mrs. Marwood (with whom he is having an affair) of loving Mirabell (which she does). Meanwhile, Mrs. Fainall (Mirabell's former lover) tells Mirabell that she hates her husband, and they begin to plot to deceive Lady Wishfort into giving her consent to the marriage. Millamant appears in the park and, angry about the previous night (when Mirabell was confronted by Lady Wishfort), she tells Mirabell of her displeasure in his plan, which she only has a vague idea about. After she leaves, the newly wed servants appear and Mirabell reminds them of their roles in the plan.",
      "question_template": "Waitwell couldn't marry Mrs. Wishfort because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "No relevant information found in the paragraph."
      ],
      "predicates": [
        "Hates(x, y) ::: x hates y.",
        "Loves(x, y) ::: x loves y.",
        "Accuses(x, y) ::: x accuses y.",
        "Discusses(x, y) ::: x discusses y.",
        "Plots(x, y) ::: x plots to deceive y.",
        "Angry(x) ::: x is angry.",
        "Reminds(x, y) ::: x reminds y of their roles.",
        "HasVagueIdea(x, y) ::: x has a vague idea about y.",
        "Inherits(x, y) ::: x inherits y.",
        "NewlyWed(x) ::: x is a newly wed."
      ],
      "premises": [
        "Discusses(a_3, a_2) ∧ Discusses(a_6, a_2) ::: Mrs. Fainall and Mrs. Marwood are discussing their hatred of men.",
        "Accuses(a_2, a_6) ∧ Loves(a_6, a_4) ::: Fainall accuses Mrs. Marwood of loving Mirabell.",
        "Hates(a_3, a_2) ::: Mrs. Fainall tells Mirabell that she hates her husband.",
        "Plots(a_3, a_1) ∧ Plo(a_4, a_1) ::: Mrs. Fainall and Mirabell plot to deceive Lady Wishfort into giving her consent to the marriage.",
        "Angry(a_8) ∧ HasVagueIdea(a_8, d) ::: Millamant is angry about the previous night and has a vague idea about the plan.",
        "Reminds(a_4, a_5) ::: Mirabell reminds the newly wed servants of their roles in the plan.",
        "NewlyWed(a_5) ∧ NewlyWed(a_7) ::: The newly wed servants appear in the park.",
        "Conclusion:",
        "Plots(a_3, a_1) ::: Mrs. Fainall and Mirabell plot to deceive Lady Wishfort into giving her consent to the marriage."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 337,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 3,
      "paragraph": "Mirabell and Millamant, equally strong-willed, discuss in detail the conditions under which they would accept each other in marriage (otherwise known as the \"proviso scene\"), showing the depth of their feeling for each other. Mirabell finally proposes to Millamant and, with Mrs. Fainall's encouragement (almost consent, as Millamant knows of their previous relations), Millamant accepts. Mirabell leaves as Lady Wishfort arrives, and she lets it be known that she wants Millamant to marry her nephew, Sir Wilfull Witwoud, who has just arrived from the countryside. Lady Wishfort later gets a letter telling her about the Sir Rowland plot. Sir Rowland takes the letter and accuses Mirabell of trying to sabotage their wedding. Lady Wishfort agrees to let Sir Rowland bring a marriage contract that night.",
      "question_template": "Waitwell couldn't marry Mrs. Wishfort because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Lady Wishfort",
        "Sir Rowland"
      ],
      "predicates": [
        "StrongWilled(x) ::: x is strong-willed.",
        "Discuss(x, y) ::: x discusses y.",
        "Propose(x, y) ::: x proposes to y.",
        "Accept(x, y) ::: x accepts y's proposal.",
        "EncouragedBy(x, y) ::: x is encouraged by y.",
        "Wants(x, y) ::: x wants y to marry.",
        "Arrives(x) ::: x arrives.",
        "Accuses(x, y) ::: x accuses y of something.",
        "Brings(x, y) ::: x brings y.",
        "Agrees(x, y) ::: x agrees to y."
      ],
      "premises": [
        "StrongWilled(mirabell) ∧ StrongWilled(millamant) ::: Mirabell and Millamant are equally strong-willed.",
        "Discuss(mirabell, conditions) ::: Mirabell and Millamant discuss the conditions under which they would accept each other in marriage.",
        "Propose(mirabell, millamant) ::: Mirabell proposes to Millamant.",
        "Accept(millamant, mirabell) ∧ EncouragedBy(millamant, mrsFainall) ::: Millamant accepts Mirabell's proposal with encouragement from Mrs. Fainall.",
        "Arrives(ladyWishfort) ::: Lady Wishfort arrives.",
        "Wants(ladyWishfort, sirWilfullWitwoud) ::: Lady Wishfort wants Millamant to marry her nephew, Sir Wilfull Witwoud.",
        "Accuses(sirRowland, mirabell) ::: Sir Rowland accuses Mirabell of trying to sabotage their wedding.",
        "Agrees(ladyWishfort, marriageContract) ::: Lady Wishfort agrees to let Sir Rowland bring a marriage contract that night.",
        "Conclusion:",
        "∃x (StrongWilled(x) ∧ Discuss(mirabell, conditions) ∧ Accept(millamant, mirabell)) ::: There exists a strong-willed person who discusses conditions and accepts a marriage proposal."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "338": [
    {
      "id": 338,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 1,
      "paragraph": "Act 2 is set in St. James’ Park. Mrs. Fainall and Mrs. Marwood are discussing their hatred of men. Fainall appears and accuses Mrs. Marwood (with whom he is having an affair) of loving Mirabell (which she does). Meanwhile, Mrs. Fainall (Mirabell's former lover) tells Mirabell that she hates her husband, and they begin to plot to deceive Lady Wishfort into giving her consent to the marriage. Millamant appears in the park and, angry about the previous night (when Mirabell was confronted by Lady Wishfort), she tells Mirabell of her displeasure in his plan, which she only has a vague idea about. After she leaves, the newly wed servants appear and Mirabell reminds them of their roles in the plan.",
      "question_template": "The women in the park are discussing [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Mrs. Fainall and Mirabell",
        "Millamant and Mirabell"
      ],
      "predicates": [
        "Hates(x, y) ::: x hates y.",
        "Loves(x, y) ::: x loves y.",
        "Accuses(x, y) ::: x accuses y.",
        "Discusses(x, y) ::: x discusses y.",
        "Plots(x, y) ::: x plots to deceive y.",
        "Angry(x) ::: x is angry.",
        "Reminds(x, y) ::: x reminds y of their roles.",
        "HasVagueIdea(x, y) ::: x has a vague idea about y.",
        "Inherits(x, y) ::: x inherits y.",
        "NewlyWed(x) ::: x is a newly wed."
      ],
      "premises": [
        "Discusses(a_3, a_2) ∧ Discusses(a_6, a_2) ::: Mrs. Fainall and Mrs. Marwood are discussing their hatred of men.",
        "Accuses(a_2, a_6) ∧ Loves(a_6, a_4) ::: Fainall accuses Mrs. Marwood of loving Mirabell.",
        "Hates(a_3, a_2) ::: Mrs. Fainall tells Mirabell that she hates her husband.",
        "Plots(a_3, a_1) ∧ Plo(a_4, a_1) ::: Mrs. Fainall and Mirabell plot to deceive Lady Wishfort into giving her consent to the marriage.",
        "Angry(a_8) ∧ HasVagueIdea(a_8, d) ::: Millamant is angry about the previous night and has a vague idea about the plan.",
        "Reminds(a_4, a_5) ::: Mirabell reminds the newly wed servants of their roles in the plan.",
        "NewlyWed(a_5) ∧ NewlyWed(a_7) ::: The newly wed servants appear in the park.",
        "Conclusion:",
        "Plots(a_3, a_1) ::: Mrs. Fainall and Mirabell plot to deceive Lady Wishfort into giving her consent to the marriage."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "339": [
    {
      "id": 339,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 1,
      "paragraph": "Act 2 is set in St. James’ Park. Mrs. Fainall and Mrs. Marwood are discussing their hatred of men. Fainall appears and accuses Mrs. Marwood (with whom he is having an affair) of loving Mirabell (which she does). Meanwhile, Mrs. Fainall (Mirabell's former lover) tells Mirabell that she hates her husband, and they begin to plot to deceive Lady Wishfort into giving her consent to the marriage. Millamant appears in the park and, angry about the previous night (when Mirabell was confronted by Lady Wishfort), she tells Mirabell of her displeasure in his plan, which she only has a vague idea about. After she leaves, the newly wed servants appear and Mirabell reminds them of their roles in the plan.",
      "question_template": "[[CANDIDATE_ANSWER]] reveals the deception to Mrs. Wishfort.",
      "candidate_answers": [
        "- Accuses Mrs. Marwood of loving Mirabell",
        "- Tells Mirabell that she hates her husband",
        "- Plot to deceive Lady Wishfort into giving her consent to the marriage"
      ],
      "predicates": [
        "Hates(x, y) ::: x hates y.",
        "Loves(x, y) ::: x loves y.",
        "Accuses(x, y) ::: x accuses y.",
        "Discusses(x, y) ::: x discusses y.",
        "Plots(x, y) ::: x plots to deceive y.",
        "Angry(x) ::: x is angry.",
        "Reminds(x, y) ::: x reminds y of their roles.",
        "HasVagueIdea(x, y) ::: x has a vague idea about y.",
        "Inherits(x, y) ::: x inherits y.",
        "NewlyWed(x) ::: x is a newly wed."
      ],
      "premises": [
        "Discusses(a_3, a_2) ∧ Discusses(a_6, a_2) ::: Mrs. Fainall and Mrs. Marwood are discussing their hatred of men.",
        "Accuses(a_2, a_6) ∧ Loves(a_6, a_4) ::: Fainall accuses Mrs. Marwood of loving Mirabell.",
        "Hates(a_3, a_2) ::: Mrs. Fainall tells Mirabell that she hates her husband.",
        "Plots(a_3, a_1) ∧ Plo(a_4, a_1) ::: Mrs. Fainall and Mirabell plot to deceive Lady Wishfort into giving her consent to the marriage.",
        "Angry(a_8) ∧ HasVagueIdea(a_8, d) ::: Millamant is angry about the previous night and has a vague idea about the plan.",
        "Reminds(a_4, a_5) ::: Mirabell reminds the newly wed servants of their roles in the plan.",
        "NewlyWed(a_5) ∧ NewlyWed(a_7) ::: The newly wed servants appear in the park.",
        "Conclusion:",
        "Plots(a_3, a_1) ::: Mrs. Fainall and Mirabell plot to deceive Lady Wishfort into giving her consent to the marriage."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 339,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 2,
      "paragraph": "Acts 3, 4 and 5 are all set in the home of Lady Wishfort. We are introduced to Lady Wishfort who is encouraged by Foible to marry the supposed Sir Rowland – Mirabell's supposed uncle – so that Mirabell will lose his inheritance. Sir Rowland is, however, Waitwell in disguise, and the plan is to entangle Lady Wishfort in a marriage which cannot go ahead, because it would be bigamy, not to mention a social disgrace (Waitwell is only a serving man, Lady Wishfort an aristocrat). Mirabell will offer to help her out of the embarrassing situation if she consents to his marriage. Later, Mrs. Fainall discusses this plan with Foible, but this is overheard by Mrs. Marwood. She later tells the plan to Fainall, who decides that he will take his wife's money and go away with Mrs. Marwood.",
      "question_template": "[[CANDIDATE_ANSWER]] reveals the deception to Mrs. Wishfort.",
      "candidate_answers": [
        "- Take his wife's money and go away with Mrs. Marwood"
      ],
      "predicates": [
        "Marries(x, y) ::: x marries y.",
        "LosesInheritance(x) ::: x loses his inheritance.",
        "LearnsOfPlan(x) ::: x learns of the plan.",
        "TakesMoney(x, y) ::: x takes y's money.",
        "GoesAwayWith(x, y) ::: x goes away with y.",
        "DisguisedAs(x, y) ::: x is disguised as y.",
        "EncouragedBy(x, y) ::: x is encouraged by y.",
        "Overheard(x, y) ::: x overhears y.",
        "OffersHelp(x, y) ::: x offers help to y.",
        "EmbarrassingSituation(x) ::: x is in an embarrassing situation."
      ],
      "premises": [
        "Marries(a_1, a_7) → LosesInheritance(a_4) ::: If Lady Wishfort marries the supposed Sir Rowland, then Mirabell will lose his inheritance.",
        "LearnsOfPlan(a_2) → (TakesMoney(a_2, a_3) ∧ GoesAwayWith(a_2, a_6)) ::: If Fainall learns of the plan, then he will take his wife's money and go away with Mrs. Marwood.",
        "DisguisedAs(a_7, a_4) ::: Waitwell is disguised as Mirabell's supposed uncle, Sir Rowland.",
        "EncouragedBy(a_1, a_5) ::: Lady Wishfort is encouraged by Foible.",
        "OffersHelp(a_4, a_1) ::: Mirabell offers to help Lady Wishfort out of the embarrassing situation.",
        "Overheard(a_6, d) ::: Mrs. Marwood overhears the discussion of the plan by Mrs. Fainall and Foible."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 339,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 3,
      "paragraph": "Mirabell and Millamant, equally strong-willed, discuss in detail the conditions under which they would accept each other in marriage (otherwise known as the \"proviso scene\"), showing the depth of their feeling for each other. Mirabell finally proposes to Millamant and, with Mrs. Fainall's encouragement (almost consent, as Millamant knows of their previous relations), Millamant accepts. Mirabell leaves as Lady Wishfort arrives, and she lets it be known that she wants Millamant to marry her nephew, Sir Wilfull Witwoud, who has just arrived from the countryside. Lady Wishfort later gets a letter telling her about the Sir Rowland plot. Sir Rowland takes the letter and accuses Mirabell of trying to sabotage their wedding. Lady Wishfort agrees to let Sir Rowland bring a marriage contract that night.",
      "question_template": "[[CANDIDATE_ANSWER]] reveals the deception to Mrs. Wishfort.",
      "candidate_answers": [
        "Mrs. Fainall's encouragement",
        "Lady Wishfort agrees to let Sir Rowland bring a marriage contract that night."
      ],
      "predicates": [
        "StrongWilled(x) ::: x is strong-willed.",
        "Discuss(x, y) ::: x discusses y.",
        "Propose(x, y) ::: x proposes to y.",
        "Accept(x, y) ::: x accepts y's proposal.",
        "EncouragedBy(x, y) ::: x is encouraged by y.",
        "Wants(x, y) ::: x wants y to marry.",
        "Arrives(x) ::: x arrives.",
        "Accuses(x, y) ::: x accuses y of something.",
        "Brings(x, y) ::: x brings y.",
        "Agrees(x, y) ::: x agrees to y."
      ],
      "premises": [
        "StrongWilled(mirabell) ∧ StrongWilled(millamant) ::: Mirabell and Millamant are equally strong-willed.",
        "Discuss(mirabell, conditions) ::: Mirabell and Millamant discuss the conditions under which they would accept each other in marriage.",
        "Propose(mirabell, millamant) ::: Mirabell proposes to Millamant.",
        "Accept(millamant, mirabell) ∧ EncouragedBy(millamant, mrsFainall) ::: Millamant accepts Mirabell's proposal with encouragement from Mrs. Fainall.",
        "Arrives(ladyWishfort) ::: Lady Wishfort arrives.",
        "Wants(ladyWishfort, sirWilfullWitwoud) ::: Lady Wishfort wants Millamant to marry her nephew, Sir Wilfull Witwoud.",
        "Accuses(sirRowland, mirabell) ::: Sir Rowland accuses Mirabell of trying to sabotage their wedding.",
        "Agrees(ladyWishfort, marriageContract) ::: Lady Wishfort agrees to let Sir Rowland bring a marriage contract that night.",
        "Conclusion:",
        "∃x (StrongWilled(x) ∧ Discuss(mirabell, conditions) ∧ Accept(millamant, mirabell)) ::: There exists a strong-willed person who discusses conditions and accepts a marriage proposal."
      ],
      "conclusions": [
        "None",
        "Agrees(ladyWishfort, marriageContract)"
      ]
    }
  ],
  "340": [
    {
      "id": 340,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 0,
      "paragraph": " Act 1 is set in a chocolate house where Mirabell and Fainall have just finished playing cards. A footman comes and tells Mirabell that Waitwell (Mirabell's male servant) and Foible (Lady Wishfort's female servant) were married that morning. Mirabell tells Fainall about his love of Millamant and is encouraged to marry her. Witwoud and Petulant appear and Mirabell is informed that should Lady Wishfort marry, he will lose £6000 of Millamant's inheritance.He will only get this money if he can make Lady Wishfort consent to his and Millamant's marriage.",
      "question_template": "[[CANDIDATE_ANSWER]] is able to marry who they wish in this story.",
      "candidate_answers": [
        "No relevant information found in the paragraph."
      ],
      "predicates": [
        "Marries(x, y) ::: x marries y.",
        "LosesInheritance(x, y) ::: x loses y of Millamant's inheritance.",
        "Consents(x, y) ::: x consents to y.",
        "Encourages(x, y) ::: x encourages y.",
        "Loves(x, y) ::: x loves y.",
        "Informs(x, y) ::: x informs y about y's situation."
      ],
      "premises": [
        "Marries(a_1) → LosesInheritance(a_4, c) ::: If Lady Wishfort marries, Mirabell will lose £6000 of Millamant's inheritance.",
        "Consents(a_1, d) → LosesInheritance(a_4, c) ::: Mirabell will get £6000 of Millamant's inheritance if Lady Wishfort consents to his and Millamant's marriage.",
        "Loves(a_4, a_8) ::: Mirabell loves Millamant.",
        "Encourages(a_2, a_4) ::: Fainall encourages Mirabell to marry Millamant.",
        "Informs(a_4, a_2) ::: Mirabell informs Fainall about his love for Millamant."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 340,
      "context_id": "29b3a0b4e9bd807c59912ec69f4617e1fa5c6a3e",
      "paragraph_id": 2,
      "paragraph": "Acts 3, 4 and 5 are all set in the home of Lady Wishfort. We are introduced to Lady Wishfort who is encouraged by Foible to marry the supposed Sir Rowland – Mirabell's supposed uncle – so that Mirabell will lose his inheritance. Sir Rowland is, however, Waitwell in disguise, and the plan is to entangle Lady Wishfort in a marriage which cannot go ahead, because it would be bigamy, not to mention a social disgrace (Waitwell is only a serving man, Lady Wishfort an aristocrat). Mirabell will offer to help her out of the embarrassing situation if she consents to his marriage. Later, Mrs. Fainall discusses this plan with Foible, but this is overheard by Mrs. Marwood. She later tells the plan to Fainall, who decides that he will take his wife's money and go away with Mrs. Marwood.",
      "question_template": "[[CANDIDATE_ANSWER]] is able to marry who they wish in this story.",
      "candidate_answers": [
        "- Mirabell will offer to help her out of the embarrassing situation if she consents to his marriage."
      ],
      "predicates": [
        "Marries(x, y) ::: x marries y.",
        "LosesInheritance(x) ::: x loses his inheritance.",
        "LearnsOfPlan(x) ::: x learns of the plan.",
        "TakesMoney(x, y) ::: x takes y's money.",
        "GoesAwayWith(x, y) ::: x goes away with y.",
        "DisguisedAs(x, y) ::: x is disguised as y.",
        "EncouragedBy(x, y) ::: x is encouraged by y.",
        "Overheard(x, y) ::: x overhears y.",
        "OffersHelp(x, y) ::: x offers help to y.",
        "EmbarrassingSituation(x) ::: x is in an embarrassing situation."
      ],
      "premises": [
        "Marries(a_1, a_7) → LosesInheritance(a_4) ::: If Lady Wishfort marries the supposed Sir Rowland, then Mirabell will lose his inheritance.",
        "LearnsOfPlan(a_2) → (TakesMoney(a_2, a_3) ∧ GoesAwayWith(a_2, a_6)) ::: If Fainall learns of the plan, then he will take his wife's money and go away with Mrs. Marwood.",
        "DisguisedAs(a_7, a_4) ::: Waitwell is disguised as Mirabell's supposed uncle, Sir Rowland.",
        "EncouragedBy(a_1, a_5) ::: Lady Wishfort is encouraged by Foible.",
        "OffersHelp(a_4, a_1) ::: Mirabell offers to help Lady Wishfort out of the embarrassing situation.",
        "Overheard(a_6, d) ::: Mrs. Marwood overhears the discussion of the plan by Mrs. Fainall and Foible."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "341": [
    {
      "id": 341,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 0,
      "paragraph": " The tale begins with three feline siblings â Mittens, Tom Kitten, and Moppet â tumbling about the doorstep and playing in the dust. Their mother, Mrs. Tabitha Twitchit, expects \"fine company\" for tea so she fetches the children indoors to wash and dress them before her friends arrive. Tom is \"very naughty\" and scratches his mother while she grooms him. Tabitha dresses Moppet and Mittens in clean pinafores and tuckers, and Tom in \"all sorts of elegant uncomfortable clothes\" taken from a chest of drawers. Tom is fat and bursts several buttons, but his mother sews them back on again.",
      "question_template": "Fainall plans to [[CANDIDATE_ANSWER]] to his wife.",
      "candidate_answers": [
        "three feline siblings",
        "Mittens, Tom Kitten, and Moppet"
      ],
      "predicates": [
        "Expecting(x) ::: x expects fine company for tea.",
        "Fetches(x, y) ::: x fetches y indoors.",
        "Washes(x) ::: x is washed.",
        "Dresses(x, y) ::: x dresses y in clothing.",
        "Naughty(x) ::: x is very naughty.",
        "Scratches(x, y) ::: x scratches y.",
        "DressesIn(x, y) ::: x is dressed in y.",
        "Fat(x) ::: x is fat.",
        "BurstsButtons(x) ::: x bursts several buttons.",
        "SewsBackOn(x, y) ::: x sews y back on."
      ],
      "premises": [
        "Expecting(a_1) ::: Tabitha expects \"fine company\" for tea.",
        "Fetches(a_1, a_0) ::: Tabitha fetches the children indoors.",
        "Washes(a_0) ::: The children are washed.",
        "Dresses(a_1, a_0) ::: Tabitha dresses the children before her friends arrive.",
        "Naughty(a_2) ::: Tom is \"very naughty.\"",
        "Scratches(a_2, a_1) ::: Tom scratches his mother while she grooms him.",
        "DressesIn(a_1, cleanPinafores) ∧ DressesIn(a_1, tuckers) ∧ DressesIn(a_1, elegantUncomfortableClothes) ::: Tabitha dresses Moppet and Mittens in clean pinafores and tuckers, and Tom in \"all sorts of elegant uncomfortable clothes.\"",
        "Fat(a_2) ::: Tom is fat.",
        "BurstsButtons(a_2) ::: Tom bursts several buttons.",
        "SewsBackOn(a_1, buttons) ::: Tabitha sews the buttons back on again."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 341,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 1,
      "paragraph": "Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party. She tells them to keep their frocks clean and keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks, and then returns to her work. Moppet and Mittens soon have their pinafores smeared with grass stains. They climb upon the garden wall and lose some of their clothing in the ascent. Tom has a more difficult time gaining the top of the wall \"breaking the ferns, and shedding buttons right and left\". He is disheveled when he reaches the top of the wall, and loses his hat, but his sisters try to pull him together. The rest of his buttons burst.",
      "question_template": "Fainall plans to [[CANDIDATE_ANSWER]] to his wife.",
      "candidate_answers": [
        "Moppet and Mittens",
        "Tom"
      ],
      "predicates": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden.",
        "KeepsClean(b_1) ::: The kittens keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: The kittens keep away from the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: Tom's sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of Tom's buttons burst."
      ],
      "premises": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party.",
        "KeepsClean(b_1) ::: She tells them to keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: She tells them to keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens soon have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall and loses some of his clothing in the ascent.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: His sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of his buttons burst."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 341,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 2,
      "paragraph": "Three Puddle-ducks come marching along the road â \"pit pat paddle pat! pit pat waddle pat!\" Jemima Puddle-duck and Rebeccah put on some of the dropped clothing. The kittens lose the rest of their clothing descending the wall. Moppet invites Mr. Drake Puddle-duck to help dress Tom. He picks up various articles of Tom's clothing and \"he put[s] them on himself!\" The three ducks set off up the road just as Tabitha approaches and discovers her three children with no clothes on. She pulls them off the wall, \"smacks\" them, and takes them back to the house. \"My friends will arrive in a minute, and you are not fit to be seen; I am affronted!\" she says.",
      "question_template": "Fainall plans to [[CANDIDATE_ANSWER]] to his wife.",
      "candidate_answers": [
        "Three kittens",
        "Three Puddle-ducks"
      ],
      "predicates": [
        "PuddleDuck(x) ::: x is a Puddle-duck.",
        "Kittens(x) ::: x is a kitten.",
        "Dresses(x, y) ::: x dresses y.",
        "Clothing(x) ::: x is an article of clothing.",
        "Approaches(x, y) ::: x approaches y.",
        "Discovers(x, y) ::: x discovers y.",
        "Smacks(x, y) ::: x smacks y.",
        "TakesBack(x, y) ::: x takes y back.",
        "FitToBeSeen(x) ::: x is fit to be seen.",
        "Affronted(x) ::: x is affronted."
      ],
      "premises": [
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ Dresses(jemima, clothing) ∧ Dresses(rebeccah, clothing) ::: Jemima Puddle-duck and Rebeccah put on some of the dropped clothing.",
        "Kittens(kittens) ∧ ¬Clothing(kittens) ∧ Descends(kittens, wall) ::: The kittens lose the rest of their clothing descending the wall.",
        "Dresses(moppet, tom) ∧ PicksUp(mrDrake, clothing) ∧ Dresses(mrDrake, clothing) ::: Moppet invites Mr. Drake Puddle-duck to help dress Tom, and he picks up various articles of Tom's clothing and puts them on himself.",
        "Approaches(tabitha, kittens) ∧ Discovers(tabitha, kittens) ∧ Smacks(tabitha, kittens) ∧ TakesBack(tabitha, kittens) ::: Tabitha approaches and discovers her three children with no clothes on, smacks them, and takes them back to the house.",
        "¬FitToBeSeen(kittens) ∧ Affronted(tabitha) ::: Tabitha is affronted because her children are not fit to be seen.",
        "Conclusion:",
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ PuddleDuck(mrDrake) ::: Jemima Puddle-duck, Rebeccah, and Mr. Drake are all Puddle-ducks."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 341,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 3,
      "paragraph": "Tabitha sends her kittens upstairs, and tells her guests the kittens are in bed with the measles. However, \"the dignity and repose of the tea party\" is disturbed by the \"very extraordinary noises overhead\" as the playful kittens romp in a bedroom. An illustration depicts the bedroom in complete disorder and Tom in his mother's bonnet. The next illustration shows Tabitha entering the room. The author interrupts to promise the reader she will make a larger book about Tom some day. In the last pages, the Puddle-ducks have lost the kittens' clothing in a pond, and they have been looking for them ever since.",
      "question_template": "Fainall plans to [[CANDIDATE_ANSWER]] to his wife.",
      "candidate_answers": [
        "kittens"
      ],
      "predicates": [
        "Sends(x, y) ::: x sends y.",
        "InBedWithMeasles(x) ::: x is in bed with the measles.",
        "Disturbs(x, y) ::: x disturbs y.",
        "Romp(x) ::: x romps around.",
        "InDisorder(x) ::: x is in complete disorder.",
        "Promises(x, y) ::: x promises y.",
        "LookingFor(x, y) ::: x is looking for y.",
        "Lost(x, y) ::: x has lost y."
      ],
      "premises": [
        "Sends(a_1, b_1) ::: Tabitha sends her kittens upstairs.",
        "InBedWithMeasles(b_1) ::: The kittens are in bed with the measles.",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the dignity and repose of the tea party.",
        "Romp(b_1) ::: The playful kittens romp in the bedroom.",
        "InDisorder(c_1) ::: The bedroom is in complete disorder.",
        "Promises(a_0, \"larger book about Tom\") ::: The author promises the reader she will make a larger book about Tom some day.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens.",
        "Lost(b_1, \"kittens' clothing\") ::: The Puddle-ducks have lost the kittens' clothing in a pond.",
        "Conclusion:",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the tea party.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "342": [
    {
      "id": 342,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 0,
      "paragraph": " The tale begins with three feline siblings â Mittens, Tom Kitten, and Moppet â tumbling about the doorstep and playing in the dust. Their mother, Mrs. Tabitha Twitchit, expects \"fine company\" for tea so she fetches the children indoors to wash and dress them before her friends arrive. Tom is \"very naughty\" and scratches his mother while she grooms him. Tabitha dresses Moppet and Mittens in clean pinafores and tuckers, and Tom in \"all sorts of elegant uncomfortable clothes\" taken from a chest of drawers. Tom is fat and bursts several buttons, but his mother sews them back on again.",
      "question_template": "Mrs. Wishfort finally consents to Mirabell's wedding because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Mrs. Tabitha Twitchit"
      ],
      "predicates": [
        "Expecting(x) ::: x expects fine company for tea.",
        "Fetches(x, y) ::: x fetches y indoors.",
        "Washes(x) ::: x is washed.",
        "Dresses(x, y) ::: x dresses y in clothing.",
        "Naughty(x) ::: x is very naughty.",
        "Scratches(x, y) ::: x scratches y.",
        "DressesIn(x, y) ::: x is dressed in y.",
        "Fat(x) ::: x is fat.",
        "BurstsButtons(x) ::: x bursts several buttons.",
        "SewsBackOn(x, y) ::: x sews y back on."
      ],
      "premises": [
        "Expecting(a_1) ::: Tabitha expects \"fine company\" for tea.",
        "Fetches(a_1, a_0) ::: Tabitha fetches the children indoors.",
        "Washes(a_0) ::: The children are washed.",
        "Dresses(a_1, a_0) ::: Tabitha dresses the children before her friends arrive.",
        "Naughty(a_2) ::: Tom is \"very naughty.\"",
        "Scratches(a_2, a_1) ::: Tom scratches his mother while she grooms him.",
        "DressesIn(a_1, cleanPinafores) ∧ DressesIn(a_1, tuckers) ∧ DressesIn(a_1, elegantUncomfortableClothes) ::: Tabitha dresses Moppet and Mittens in clean pinafores and tuckers, and Tom in \"all sorts of elegant uncomfortable clothes.\"",
        "Fat(a_2) ::: Tom is fat.",
        "BurstsButtons(a_2) ::: Tom bursts several buttons.",
        "SewsBackOn(a_1, buttons) ::: Tabitha sews the buttons back on again."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 342,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 1,
      "paragraph": "Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party. She tells them to keep their frocks clean and keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks, and then returns to her work. Moppet and Mittens soon have their pinafores smeared with grass stains. They climb upon the garden wall and lose some of their clothing in the ascent. Tom has a more difficult time gaining the top of the wall \"breaking the ferns, and shedding buttons right and left\". He is disheveled when he reaches the top of the wall, and loses his hat, but his sisters try to pull him together. The rest of his buttons burst.",
      "question_template": "Mrs. Wishfort finally consents to Mirabell's wedding because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Tabitha"
      ],
      "predicates": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden.",
        "KeepsClean(b_1) ::: The kittens keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: The kittens keep away from the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: Tom's sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of Tom's buttons burst."
      ],
      "premises": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party.",
        "KeepsClean(b_1) ::: She tells them to keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: She tells them to keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens soon have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall and loses some of his clothing in the ascent.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: His sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of his buttons burst."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 342,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 2,
      "paragraph": "Three Puddle-ducks come marching along the road â \"pit pat paddle pat! pit pat waddle pat!\" Jemima Puddle-duck and Rebeccah put on some of the dropped clothing. The kittens lose the rest of their clothing descending the wall. Moppet invites Mr. Drake Puddle-duck to help dress Tom. He picks up various articles of Tom's clothing and \"he put[s] them on himself!\" The three ducks set off up the road just as Tabitha approaches and discovers her three children with no clothes on. She pulls them off the wall, \"smacks\" them, and takes them back to the house. \"My friends will arrive in a minute, and you are not fit to be seen; I am affronted!\" she says.",
      "question_template": "Mrs. Wishfort finally consents to Mirabell's wedding because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Tabitha"
      ],
      "predicates": [
        "PuddleDuck(x) ::: x is a Puddle-duck.",
        "Kittens(x) ::: x is a kitten.",
        "Dresses(x, y) ::: x dresses y.",
        "Clothing(x) ::: x is an article of clothing.",
        "Approaches(x, y) ::: x approaches y.",
        "Discovers(x, y) ::: x discovers y.",
        "Smacks(x, y) ::: x smacks y.",
        "TakesBack(x, y) ::: x takes y back.",
        "FitToBeSeen(x) ::: x is fit to be seen.",
        "Affronted(x) ::: x is affronted."
      ],
      "premises": [
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ Dresses(jemima, clothing) ∧ Dresses(rebeccah, clothing) ::: Jemima Puddle-duck and Rebeccah put on some of the dropped clothing.",
        "Kittens(kittens) ∧ ¬Clothing(kittens) ∧ Descends(kittens, wall) ::: The kittens lose the rest of their clothing descending the wall.",
        "Dresses(moppet, tom) ∧ PicksUp(mrDrake, clothing) ∧ Dresses(mrDrake, clothing) ::: Moppet invites Mr. Drake Puddle-duck to help dress Tom, and he picks up various articles of Tom's clothing and puts them on himself.",
        "Approaches(tabitha, kittens) ∧ Discovers(tabitha, kittens) ∧ Smacks(tabitha, kittens) ∧ TakesBack(tabitha, kittens) ::: Tabitha approaches and discovers her three children with no clothes on, smacks them, and takes them back to the house.",
        "¬FitToBeSeen(kittens) ∧ Affronted(tabitha) ::: Tabitha is affronted because her children are not fit to be seen.",
        "Conclusion:",
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ PuddleDuck(mrDrake) ::: Jemima Puddle-duck, Rebeccah, and Mr. Drake are all Puddle-ducks."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 342,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 3,
      "paragraph": "Tabitha sends her kittens upstairs, and tells her guests the kittens are in bed with the measles. However, \"the dignity and repose of the tea party\" is disturbed by the \"very extraordinary noises overhead\" as the playful kittens romp in a bedroom. An illustration depicts the bedroom in complete disorder and Tom in his mother's bonnet. The next illustration shows Tabitha entering the room. The author interrupts to promise the reader she will make a larger book about Tom some day. In the last pages, the Puddle-ducks have lost the kittens' clothing in a pond, and they have been looking for them ever since.",
      "question_template": "Mrs. Wishfort finally consents to Mirabell's wedding because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Tabitha"
      ],
      "predicates": [
        "Sends(x, y) ::: x sends y.",
        "InBedWithMeasles(x) ::: x is in bed with the measles.",
        "Disturbs(x, y) ::: x disturbs y.",
        "Romp(x) ::: x romps around.",
        "InDisorder(x) ::: x is in complete disorder.",
        "Promises(x, y) ::: x promises y.",
        "LookingFor(x, y) ::: x is looking for y.",
        "Lost(x, y) ::: x has lost y."
      ],
      "premises": [
        "Sends(a_1, b_1) ::: Tabitha sends her kittens upstairs.",
        "InBedWithMeasles(b_1) ::: The kittens are in bed with the measles.",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the dignity and repose of the tea party.",
        "Romp(b_1) ::: The playful kittens romp in the bedroom.",
        "InDisorder(c_1) ::: The bedroom is in complete disorder.",
        "Promises(a_0, \"larger book about Tom\") ::: The author promises the reader she will make a larger book about Tom some day.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens.",
        "Lost(b_1, \"kittens' clothing\") ::: The Puddle-ducks have lost the kittens' clothing in a pond.",
        "Conclusion:",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the tea party.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "343": [
    {
      "id": 343,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 0,
      "paragraph": " The tale begins with three feline siblings â Mittens, Tom Kitten, and Moppet â tumbling about the doorstep and playing in the dust. Their mother, Mrs. Tabitha Twitchit, expects \"fine company\" for tea so she fetches the children indoors to wash and dress them before her friends arrive. Tom is \"very naughty\" and scratches his mother while she grooms him. Tabitha dresses Moppet and Mittens in clean pinafores and tuckers, and Tom in \"all sorts of elegant uncomfortable clothes\" taken from a chest of drawers. Tom is fat and bursts several buttons, but his mother sews them back on again.",
      "question_template": "There are [[CANDIDATE_ANSWER]] feline siblings.",
      "candidate_answers": [
        "- scratches his mother"
      ],
      "predicates": [
        "Expecting(x) ::: x expects fine company for tea.",
        "Fetches(x, y) ::: x fetches y indoors.",
        "Washes(x) ::: x is washed.",
        "Dresses(x, y) ::: x dresses y in clothing.",
        "Naughty(x) ::: x is very naughty.",
        "Scratches(x, y) ::: x scratches y.",
        "DressesIn(x, y) ::: x is dressed in y.",
        "Fat(x) ::: x is fat.",
        "BurstsButtons(x) ::: x bursts several buttons.",
        "SewsBackOn(x, y) ::: x sews y back on."
      ],
      "premises": [
        "Expecting(a_1) ::: Tabitha expects \"fine company\" for tea.",
        "Fetches(a_1, a_0) ::: Tabitha fetches the children indoors.",
        "Washes(a_0) ::: The children are washed.",
        "Dresses(a_1, a_0) ::: Tabitha dresses the children before her friends arrive.",
        "Naughty(a_2) ::: Tom is \"very naughty.\"",
        "Scratches(a_2, a_1) ::: Tom scratches his mother while she grooms him.",
        "DressesIn(a_1, cleanPinafores) ∧ DressesIn(a_1, tuckers) ∧ DressesIn(a_1, elegantUncomfortableClothes) ::: Tabitha dresses Moppet and Mittens in clean pinafores and tuckers, and Tom in \"all sorts of elegant uncomfortable clothes.\"",
        "Fat(a_2) ::: Tom is fat.",
        "BurstsButtons(a_2) ::: Tom bursts several buttons.",
        "SewsBackOn(a_1, buttons) ::: Tabitha sews the buttons back on again."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 343,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 3,
      "paragraph": "Tabitha sends her kittens upstairs, and tells her guests the kittens are in bed with the measles. However, \"the dignity and repose of the tea party\" is disturbed by the \"very extraordinary noises overhead\" as the playful kittens romp in a bedroom. An illustration depicts the bedroom in complete disorder and Tom in his mother's bonnet. The next illustration shows Tabitha entering the room. The author interrupts to promise the reader she will make a larger book about Tom some day. In the last pages, the Puddle-ducks have lost the kittens' clothing in a pond, and they have been looking for them ever since.",
      "question_template": "There are [[CANDIDATE_ANSWER]] feline siblings.",
      "candidate_answers": [
        "Tom is in his mother's bonnet"
      ],
      "predicates": [
        "Sends(x, y) ::: x sends y.",
        "InBedWithMeasles(x) ::: x is in bed with the measles.",
        "Disturbs(x, y) ::: x disturbs y.",
        "Romp(x) ::: x romps around.",
        "InDisorder(x) ::: x is in complete disorder.",
        "Promises(x, y) ::: x promises y.",
        "LookingFor(x, y) ::: x is looking for y.",
        "Lost(x, y) ::: x has lost y."
      ],
      "premises": [
        "Sends(a_1, b_1) ::: Tabitha sends her kittens upstairs.",
        "InBedWithMeasles(b_1) ::: The kittens are in bed with the measles.",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the dignity and repose of the tea party.",
        "Romp(b_1) ::: The playful kittens romp in the bedroom.",
        "InDisorder(c_1) ::: The bedroom is in complete disorder.",
        "Promises(a_0, \"larger book about Tom\") ::: The author promises the reader she will make a larger book about Tom some day.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens.",
        "Lost(b_1, \"kittens' clothing\") ::: The Puddle-ducks have lost the kittens' clothing in a pond.",
        "Conclusion:",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the tea party.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "344": [
    {
      "id": 344,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 0,
      "paragraph": " The tale begins with three feline siblings â Mittens, Tom Kitten, and Moppet â tumbling about the doorstep and playing in the dust. Their mother, Mrs. Tabitha Twitchit, expects \"fine company\" for tea so she fetches the children indoors to wash and dress them before her friends arrive. Tom is \"very naughty\" and scratches his mother while she grooms him. Tabitha dresses Moppet and Mittens in clean pinafores and tuckers, and Tom in \"all sorts of elegant uncomfortable clothes\" taken from a chest of drawers. Tom is fat and bursts several buttons, but his mother sews them back on again.",
      "question_template": "[[CANDIDATE_ANSWER]] is the name of the mother to the feline siblings.",
      "candidate_answers": [
        "indoors",
        "to wash and dress them"
      ],
      "predicates": [
        "Expecting(x) ::: x expects fine company for tea.",
        "Fetches(x, y) ::: x fetches y indoors.",
        "Washes(x) ::: x is washed.",
        "Dresses(x, y) ::: x dresses y in clothing.",
        "Naughty(x) ::: x is very naughty.",
        "Scratches(x, y) ::: x scratches y.",
        "DressesIn(x, y) ::: x is dressed in y.",
        "Fat(x) ::: x is fat.",
        "BurstsButtons(x) ::: x bursts several buttons.",
        "SewsBackOn(x, y) ::: x sews y back on."
      ],
      "premises": [
        "Expecting(a_1) ::: Tabitha expects \"fine company\" for tea.",
        "Fetches(a_1, a_0) ::: Tabitha fetches the children indoors.",
        "Washes(a_0) ::: The children are washed.",
        "Dresses(a_1, a_0) ::: Tabitha dresses the children before her friends arrive.",
        "Naughty(a_2) ::: Tom is \"very naughty.\"",
        "Scratches(a_2, a_1) ::: Tom scratches his mother while she grooms him.",
        "DressesIn(a_1, cleanPinafores) ∧ DressesIn(a_1, tuckers) ∧ DressesIn(a_1, elegantUncomfortableClothes) ::: Tabitha dresses Moppet and Mittens in clean pinafores and tuckers, and Tom in \"all sorts of elegant uncomfortable clothes.\"",
        "Fat(a_2) ::: Tom is fat.",
        "BurstsButtons(a_2) ::: Tom bursts several buttons.",
        "SewsBackOn(a_1, buttons) ::: Tabitha sews the buttons back on again."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 344,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 1,
      "paragraph": "Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party. She tells them to keep their frocks clean and keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks, and then returns to her work. Moppet and Mittens soon have their pinafores smeared with grass stains. They climb upon the garden wall and lose some of their clothing in the ascent. Tom has a more difficult time gaining the top of the wall \"breaking the ferns, and shedding buttons right and left\". He is disheveled when he reaches the top of the wall, and loses his hat, but his sisters try to pull him together. The rest of his buttons burst.",
      "question_template": "[[CANDIDATE_ANSWER]] is the name of the mother to the feline siblings.",
      "candidate_answers": [
        "the garden"
      ],
      "predicates": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden.",
        "KeepsClean(b_1) ::: The kittens keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: The kittens keep away from the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: Tom's sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of Tom's buttons burst."
      ],
      "premises": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party.",
        "KeepsClean(b_1) ::: She tells them to keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: She tells them to keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens soon have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall and loses some of his clothing in the ascent.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: His sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of his buttons burst."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 344,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 2,
      "paragraph": "Three Puddle-ducks come marching along the road â \"pit pat paddle pat! pit pat waddle pat!\" Jemima Puddle-duck and Rebeccah put on some of the dropped clothing. The kittens lose the rest of their clothing descending the wall. Moppet invites Mr. Drake Puddle-duck to help dress Tom. He picks up various articles of Tom's clothing and \"he put[s] them on himself!\" The three ducks set off up the road just as Tabitha approaches and discovers her three children with no clothes on. She pulls them off the wall, \"smacks\" them, and takes them back to the house. \"My friends will arrive in a minute, and you are not fit to be seen; I am affronted!\" she says.",
      "question_template": "[[CANDIDATE_ANSWER]] is the name of the mother to the feline siblings.",
      "candidate_answers": [
        "The three ducks set off up the road",
        "Tabitha approaches and discovers her three children with no clothes on",
        "She pulls them off the wall, \"smacks\" them, and takes them back to the house"
      ],
      "predicates": [
        "PuddleDuck(x) ::: x is a Puddle-duck.",
        "Kittens(x) ::: x is a kitten.",
        "Dresses(x, y) ::: x dresses y.",
        "Clothing(x) ::: x is an article of clothing.",
        "Approaches(x, y) ::: x approaches y.",
        "Discovers(x, y) ::: x discovers y.",
        "Smacks(x, y) ::: x smacks y.",
        "TakesBack(x, y) ::: x takes y back.",
        "FitToBeSeen(x) ::: x is fit to be seen.",
        "Affronted(x) ::: x is affronted."
      ],
      "premises": [
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ Dresses(jemima, clothing) ∧ Dresses(rebeccah, clothing) ::: Jemima Puddle-duck and Rebeccah put on some of the dropped clothing.",
        "Kittens(kittens) ∧ ¬Clothing(kittens) ∧ Descends(kittens, wall) ::: The kittens lose the rest of their clothing descending the wall.",
        "Dresses(moppet, tom) ∧ PicksUp(mrDrake, clothing) ∧ Dresses(mrDrake, clothing) ::: Moppet invites Mr. Drake Puddle-duck to help dress Tom, and he picks up various articles of Tom's clothing and puts them on himself.",
        "Approaches(tabitha, kittens) ∧ Discovers(tabitha, kittens) ∧ Smacks(tabitha, kittens) ∧ TakesBack(tabitha, kittens) ::: Tabitha approaches and discovers her three children with no clothes on, smacks them, and takes them back to the house.",
        "¬FitToBeSeen(kittens) ∧ Affronted(tabitha) ::: Tabitha is affronted because her children are not fit to be seen.",
        "Conclusion:",
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ PuddleDuck(mrDrake) ::: Jemima Puddle-duck, Rebeccah, and Mr. Drake are all Puddle-ducks."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 344,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 3,
      "paragraph": "Tabitha sends her kittens upstairs, and tells her guests the kittens are in bed with the measles. However, \"the dignity and repose of the tea party\" is disturbed by the \"very extraordinary noises overhead\" as the playful kittens romp in a bedroom. An illustration depicts the bedroom in complete disorder and Tom in his mother's bonnet. The next illustration shows Tabitha entering the room. The author interrupts to promise the reader she will make a larger book about Tom some day. In the last pages, the Puddle-ducks have lost the kittens' clothing in a pond, and they have been looking for them ever since.",
      "question_template": "[[CANDIDATE_ANSWER]] is the name of the mother to the feline siblings.",
      "candidate_answers": [
        "upstairs",
        "in bed with the measles"
      ],
      "predicates": [
        "Sends(x, y) ::: x sends y.",
        "InBedWithMeasles(x) ::: x is in bed with the measles.",
        "Disturbs(x, y) ::: x disturbs y.",
        "Romp(x) ::: x romps around.",
        "InDisorder(x) ::: x is in complete disorder.",
        "Promises(x, y) ::: x promises y.",
        "LookingFor(x, y) ::: x is looking for y.",
        "Lost(x, y) ::: x has lost y."
      ],
      "premises": [
        "Sends(a_1, b_1) ::: Tabitha sends her kittens upstairs.",
        "InBedWithMeasles(b_1) ::: The kittens are in bed with the measles.",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the dignity and repose of the tea party.",
        "Romp(b_1) ::: The playful kittens romp in the bedroom.",
        "InDisorder(c_1) ::: The bedroom is in complete disorder.",
        "Promises(a_0, \"larger book about Tom\") ::: The author promises the reader she will make a larger book about Tom some day.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens.",
        "Lost(b_1, \"kittens' clothing\") ::: The Puddle-ducks have lost the kittens' clothing in a pond.",
        "Conclusion:",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the tea party.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "345": [
    {
      "id": 345,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 1,
      "paragraph": "Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party. She tells them to keep their frocks clean and keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks, and then returns to her work. Moppet and Mittens soon have their pinafores smeared with grass stains. They climb upon the garden wall and lose some of their clothing in the ascent. Tom has a more difficult time gaining the top of the wall \"breaking the ferns, and shedding buttons right and left\". He is disheveled when he reaches the top of the wall, and loses his hat, but his sisters try to pull him together. The rest of his buttons burst.",
      "question_template": "Tom [[CANDIDATE_ANSWER]] while she is grooming him.",
      "candidate_answers": [
        "Tom has a more difficult time gaining the top of the wall \"breaking the ferns, and shedding buttons right and left\". He is disheveled when he reaches the top of the wall, and loses his hat, but his sisters try to pull him together. The rest of his buttons burst."
      ],
      "predicates": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden.",
        "KeepsClean(b_1) ::: The kittens keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: The kittens keep away from the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: Tom's sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of Tom's buttons burst."
      ],
      "premises": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party.",
        "KeepsClean(b_1) ::: She tells them to keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: She tells them to keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens soon have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall and loses some of his clothing in the ascent.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: His sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of his buttons burst."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "346": [
    {
      "id": 346,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 2,
      "paragraph": "Three Puddle-ducks come marching along the road â \"pit pat paddle pat! pit pat waddle pat!\" Jemima Puddle-duck and Rebeccah put on some of the dropped clothing. The kittens lose the rest of their clothing descending the wall. Moppet invites Mr. Drake Puddle-duck to help dress Tom. He picks up various articles of Tom's clothing and \"he put[s] them on himself!\" The three ducks set off up the road just as Tabitha approaches and discovers her three children with no clothes on. She pulls them off the wall, \"smacks\" them, and takes them back to the house. \"My friends will arrive in a minute, and you are not fit to be seen; I am affronted!\" she says.",
      "question_template": "Tabitha sends her kittens [[CANDIDATE_ANSWER]] to keep them out of the way while getting ready for the party.",
      "candidate_answers": [
        "Three Puddle-ducks",
        "Jemima Puddle-duck and Rebeccah"
      ],
      "predicates": [
        "PuddleDuck(x) ::: x is a Puddle-duck.",
        "Kittens(x) ::: x is a kitten.",
        "Dresses(x, y) ::: x dresses y.",
        "Clothing(x) ::: x is an article of clothing.",
        "Approaches(x, y) ::: x approaches y.",
        "Discovers(x, y) ::: x discovers y.",
        "Smacks(x, y) ::: x smacks y.",
        "TakesBack(x, y) ::: x takes y back.",
        "FitToBeSeen(x) ::: x is fit to be seen.",
        "Affronted(x) ::: x is affronted."
      ],
      "premises": [
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ Dresses(jemima, clothing) ∧ Dresses(rebeccah, clothing) ::: Jemima Puddle-duck and Rebeccah put on some of the dropped clothing.",
        "Kittens(kittens) ∧ ¬Clothing(kittens) ∧ Descends(kittens, wall) ::: The kittens lose the rest of their clothing descending the wall.",
        "Dresses(moppet, tom) ∧ PicksUp(mrDrake, clothing) ∧ Dresses(mrDrake, clothing) ::: Moppet invites Mr. Drake Puddle-duck to help dress Tom, and he picks up various articles of Tom's clothing and puts them on himself.",
        "Approaches(tabitha, kittens) ∧ Discovers(tabitha, kittens) ∧ Smacks(tabitha, kittens) ∧ TakesBack(tabitha, kittens) ::: Tabitha approaches and discovers her three children with no clothes on, smacks them, and takes them back to the house.",
        "¬FitToBeSeen(kittens) ∧ Affronted(tabitha) ::: Tabitha is affronted because her children are not fit to be seen.",
        "Conclusion:",
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ PuddleDuck(mrDrake) ::: Jemima Puddle-duck, Rebeccah, and Mr. Drake are all Puddle-ducks."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "347": [
    {
      "id": 347,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 1,
      "paragraph": "Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party. She tells them to keep their frocks clean and keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks, and then returns to her work. Moppet and Mittens soon have their pinafores smeared with grass stains. They climb upon the garden wall and lose some of their clothing in the ascent. Tom has a more difficult time gaining the top of the wall \"breaking the ferns, and shedding buttons right and left\". He is disheveled when he reaches the top of the wall, and loses his hat, but his sisters try to pull him together. The rest of his buttons burst.",
      "question_template": "[[CANDIDATE_ANSWER]] is too fat for its clothes.",
      "candidate_answers": [
        "Sally Henny Penny",
        "The Puddle-Ducks"
      ],
      "predicates": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden.",
        "KeepsClean(b_1) ::: The kittens keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: The kittens keep away from the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: Tom's sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of Tom's buttons burst."
      ],
      "premises": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party.",
        "KeepsClean(b_1) ::: She tells them to keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: She tells them to keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens soon have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall and loses some of his clothing in the ascent.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: His sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of his buttons burst."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 347,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 3,
      "paragraph": "Tabitha sends her kittens upstairs, and tells her guests the kittens are in bed with the measles. However, \"the dignity and repose of the tea party\" is disturbed by the \"very extraordinary noises overhead\" as the playful kittens romp in a bedroom. An illustration depicts the bedroom in complete disorder and Tom in his mother's bonnet. The next illustration shows Tabitha entering the room. The author interrupts to promise the reader she will make a larger book about Tom some day. In the last pages, the Puddle-ducks have lost the kittens' clothing in a pond, and they have been looking for them ever since.",
      "question_template": "[[CANDIDATE_ANSWER]] is too fat for its clothes.",
      "candidate_answers": [
        "The Puddle-ducks have lost the kittens' clothing in a pond",
        "They have been looking for them ever since"
      ],
      "predicates": [
        "Sends(x, y) ::: x sends y.",
        "InBedWithMeasles(x) ::: x is in bed with the measles.",
        "Disturbs(x, y) ::: x disturbs y.",
        "Romp(x) ::: x romps around.",
        "InDisorder(x) ::: x is in complete disorder.",
        "Promises(x, y) ::: x promises y.",
        "LookingFor(x, y) ::: x is looking for y.",
        "Lost(x, y) ::: x has lost y."
      ],
      "premises": [
        "Sends(a_1, b_1) ::: Tabitha sends her kittens upstairs.",
        "InBedWithMeasles(b_1) ::: The kittens are in bed with the measles.",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the dignity and repose of the tea party.",
        "Romp(b_1) ::: The playful kittens romp in the bedroom.",
        "InDisorder(c_1) ::: The bedroom is in complete disorder.",
        "Promises(a_0, \"larger book about Tom\") ::: The author promises the reader she will make a larger book about Tom some day.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens.",
        "Lost(b_1, \"kittens' clothing\") ::: The Puddle-ducks have lost the kittens' clothing in a pond.",
        "Conclusion:",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the tea party.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "348": [
    {
      "id": 348,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 1,
      "paragraph": "Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party. She tells them to keep their frocks clean and keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks, and then returns to her work. Moppet and Mittens soon have their pinafores smeared with grass stains. They climb upon the garden wall and lose some of their clothing in the ascent. Tom has a more difficult time gaining the top of the wall \"breaking the ferns, and shedding buttons right and left\". He is disheveled when he reaches the top of the wall, and loses his hat, but his sisters try to pull him together. The rest of his buttons burst.",
      "question_template": "The kittens encounter [[CANDIDATE_ANSWER]] in the road.",
      "candidate_answers": [
        "Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party.",
        "She tells them to keep their frocks clean and keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks."
      ],
      "predicates": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden.",
        "KeepsClean(b_1) ::: The kittens keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: The kittens keep away from the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: Tom's sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of Tom's buttons burst."
      ],
      "premises": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party.",
        "KeepsClean(b_1) ::: She tells them to keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: She tells them to keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens soon have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall and loses some of his clothing in the ascent.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: His sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of his buttons burst."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 348,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 2,
      "paragraph": "Three Puddle-ducks come marching along the road â \"pit pat paddle pat! pit pat waddle pat!\" Jemima Puddle-duck and Rebeccah put on some of the dropped clothing. The kittens lose the rest of their clothing descending the wall. Moppet invites Mr. Drake Puddle-duck to help dress Tom. He picks up various articles of Tom's clothing and \"he put[s] them on himself!\" The three ducks set off up the road just as Tabitha approaches and discovers her three children with no clothes on. She pulls them off the wall, \"smacks\" them, and takes them back to the house. \"My friends will arrive in a minute, and you are not fit to be seen; I am affronted!\" she says.",
      "question_template": "The kittens encounter [[CANDIDATE_ANSWER]] in the road.",
      "candidate_answers": [
        "\"I am affronted!\""
      ],
      "predicates": [
        "PuddleDuck(x) ::: x is a Puddle-duck.",
        "Kittens(x) ::: x is a kitten.",
        "Dresses(x, y) ::: x dresses y.",
        "Clothing(x) ::: x is an article of clothing.",
        "Approaches(x, y) ::: x approaches y.",
        "Discovers(x, y) ::: x discovers y.",
        "Smacks(x, y) ::: x smacks y.",
        "TakesBack(x, y) ::: x takes y back.",
        "FitToBeSeen(x) ::: x is fit to be seen.",
        "Affronted(x) ::: x is affronted."
      ],
      "premises": [
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ Dresses(jemima, clothing) ∧ Dresses(rebeccah, clothing) ::: Jemima Puddle-duck and Rebeccah put on some of the dropped clothing.",
        "Kittens(kittens) ∧ ¬Clothing(kittens) ∧ Descends(kittens, wall) ::: The kittens lose the rest of their clothing descending the wall.",
        "Dresses(moppet, tom) ∧ PicksUp(mrDrake, clothing) ∧ Dresses(mrDrake, clothing) ::: Moppet invites Mr. Drake Puddle-duck to help dress Tom, and he picks up various articles of Tom's clothing and puts them on himself.",
        "Approaches(tabitha, kittens) ∧ Discovers(tabitha, kittens) ∧ Smacks(tabitha, kittens) ∧ TakesBack(tabitha, kittens) ::: Tabitha approaches and discovers her three children with no clothes on, smacks them, and takes them back to the house.",
        "¬FitToBeSeen(kittens) ∧ Affronted(tabitha) ::: Tabitha is affronted because her children are not fit to be seen.",
        "Conclusion:",
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ PuddleDuck(mrDrake) ::: Jemima Puddle-duck, Rebeccah, and Mr. Drake are all Puddle-ducks."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 348,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 3,
      "paragraph": "Tabitha sends her kittens upstairs, and tells her guests the kittens are in bed with the measles. However, \"the dignity and repose of the tea party\" is disturbed by the \"very extraordinary noises overhead\" as the playful kittens romp in a bedroom. An illustration depicts the bedroom in complete disorder and Tom in his mother's bonnet. The next illustration shows Tabitha entering the room. The author interrupts to promise the reader she will make a larger book about Tom some day. In the last pages, the Puddle-ducks have lost the kittens' clothing in a pond, and they have been looking for them ever since.",
      "question_template": "The kittens encounter [[CANDIDATE_ANSWER]] in the road.",
      "candidate_answers": [
        "The kittens are in bed with the measles"
      ],
      "predicates": [
        "Sends(x, y) ::: x sends y.",
        "InBedWithMeasles(x) ::: x is in bed with the measles.",
        "Disturbs(x, y) ::: x disturbs y.",
        "Romp(x) ::: x romps around.",
        "InDisorder(x) ::: x is in complete disorder.",
        "Promises(x, y) ::: x promises y.",
        "LookingFor(x, y) ::: x is looking for y.",
        "Lost(x, y) ::: x has lost y."
      ],
      "premises": [
        "Sends(a_1, b_1) ::: Tabitha sends her kittens upstairs.",
        "InBedWithMeasles(b_1) ::: The kittens are in bed with the measles.",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the dignity and repose of the tea party.",
        "Romp(b_1) ::: The playful kittens romp in the bedroom.",
        "InDisorder(c_1) ::: The bedroom is in complete disorder.",
        "Promises(a_0, \"larger book about Tom\") ::: The author promises the reader she will make a larger book about Tom some day.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens.",
        "Lost(b_1, \"kittens' clothing\") ::: The Puddle-ducks have lost the kittens' clothing in a pond.",
        "Conclusion:",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the tea party.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "349": [
    {
      "id": 349,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 1,
      "paragraph": "Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party. She tells them to keep their frocks clean and keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks, and then returns to her work. Moppet and Mittens soon have their pinafores smeared with grass stains. They climb upon the garden wall and lose some of their clothing in the ascent. Tom has a more difficult time gaining the top of the wall \"breaking the ferns, and shedding buttons right and left\". He is disheveled when he reaches the top of the wall, and loses his hat, but his sisters try to pull him together. The rest of his buttons burst.",
      "question_template": "[[CANDIDATE_ANSWER]] puts on Tom's clothes.",
      "candidate_answers": [
        "The pigsty",
        "The dirty ash pit",
        "The garden wall"
      ],
      "predicates": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden.",
        "KeepsClean(b_1) ::: The kittens keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: The kittens keep away from the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: Tom's sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of Tom's buttons burst."
      ],
      "premises": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party.",
        "KeepsClean(b_1) ::: She tells them to keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: She tells them to keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens soon have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall and loses some of his clothing in the ascent.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: His sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of his buttons burst."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 349,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 2,
      "paragraph": "Three Puddle-ducks come marching along the road â \"pit pat paddle pat! pit pat waddle pat!\" Jemima Puddle-duck and Rebeccah put on some of the dropped clothing. The kittens lose the rest of their clothing descending the wall. Moppet invites Mr. Drake Puddle-duck to help dress Tom. He picks up various articles of Tom's clothing and \"he put[s] them on himself!\" The three ducks set off up the road just as Tabitha approaches and discovers her three children with no clothes on. She pulls them off the wall, \"smacks\" them, and takes them back to the house. \"My friends will arrive in a minute, and you are not fit to be seen; I am affronted!\" she says.",
      "question_template": "[[CANDIDATE_ANSWER]] puts on Tom's clothes.",
      "candidate_answers": [
        "The wall"
      ],
      "predicates": [
        "PuddleDuck(x) ::: x is a Puddle-duck.",
        "Kittens(x) ::: x is a kitten.",
        "Dresses(x, y) ::: x dresses y.",
        "Clothing(x) ::: x is an article of clothing.",
        "Approaches(x, y) ::: x approaches y.",
        "Discovers(x, y) ::: x discovers y.",
        "Smacks(x, y) ::: x smacks y.",
        "TakesBack(x, y) ::: x takes y back.",
        "FitToBeSeen(x) ::: x is fit to be seen.",
        "Affronted(x) ::: x is affronted."
      ],
      "premises": [
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ Dresses(jemima, clothing) ∧ Dresses(rebeccah, clothing) ::: Jemima Puddle-duck and Rebeccah put on some of the dropped clothing.",
        "Kittens(kittens) ∧ ¬Clothing(kittens) ∧ Descends(kittens, wall) ::: The kittens lose the rest of their clothing descending the wall.",
        "Dresses(moppet, tom) ∧ PicksUp(mrDrake, clothing) ∧ Dresses(mrDrake, clothing) ::: Moppet invites Mr. Drake Puddle-duck to help dress Tom, and he picks up various articles of Tom's clothing and puts them on himself.",
        "Approaches(tabitha, kittens) ∧ Discovers(tabitha, kittens) ∧ Smacks(tabitha, kittens) ∧ TakesBack(tabitha, kittens) ::: Tabitha approaches and discovers her three children with no clothes on, smacks them, and takes them back to the house.",
        "¬FitToBeSeen(kittens) ∧ Affronted(tabitha) ::: Tabitha is affronted because her children are not fit to be seen.",
        "Conclusion:",
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ PuddleDuck(mrDrake) ::: Jemima Puddle-duck, Rebeccah, and Mr. Drake are all Puddle-ducks."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 349,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 3,
      "paragraph": "Tabitha sends her kittens upstairs, and tells her guests the kittens are in bed with the measles. However, \"the dignity and repose of the tea party\" is disturbed by the \"very extraordinary noises overhead\" as the playful kittens romp in a bedroom. An illustration depicts the bedroom in complete disorder and Tom in his mother's bonnet. The next illustration shows Tabitha entering the room. The author interrupts to promise the reader she will make a larger book about Tom some day. In the last pages, the Puddle-ducks have lost the kittens' clothing in a pond, and they have been looking for them ever since.",
      "question_template": "[[CANDIDATE_ANSWER]] puts on Tom's clothes.",
      "candidate_answers": [
        "In a pond"
      ],
      "predicates": [
        "Sends(x, y) ::: x sends y.",
        "InBedWithMeasles(x) ::: x is in bed with the measles.",
        "Disturbs(x, y) ::: x disturbs y.",
        "Romp(x) ::: x romps around.",
        "InDisorder(x) ::: x is in complete disorder.",
        "Promises(x, y) ::: x promises y.",
        "LookingFor(x, y) ::: x is looking for y.",
        "Lost(x, y) ::: x has lost y."
      ],
      "premises": [
        "Sends(a_1, b_1) ::: Tabitha sends her kittens upstairs.",
        "InBedWithMeasles(b_1) ::: The kittens are in bed with the measles.",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the dignity and repose of the tea party.",
        "Romp(b_1) ::: The playful kittens romp in the bedroom.",
        "InDisorder(c_1) ::: The bedroom is in complete disorder.",
        "Promises(a_0, \"larger book about Tom\") ::: The author promises the reader she will make a larger book about Tom some day.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens.",
        "Lost(b_1, \"kittens' clothing\") ::: The Puddle-ducks have lost the kittens' clothing in a pond.",
        "Conclusion:",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the tea party.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "351": [
    {
      "id": 351,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 1,
      "paragraph": "Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party. She tells them to keep their frocks clean and keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks, and then returns to her work. Moppet and Mittens soon have their pinafores smeared with grass stains. They climb upon the garden wall and lose some of their clothing in the ascent. Tom has a more difficult time gaining the top of the wall \"breaking the ferns, and shedding buttons right and left\". He is disheveled when he reaches the top of the wall, and loses his hat, but his sisters try to pull him together. The rest of his buttons burst.",
      "question_template": "The puddle-ducks lose the kittens' clothes in [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Tom has a more difficult time gaining the top of the wall \"breaking the ferns, and shedding buttons right and left\".",
        "- The rest of his buttons burst."
      ],
      "predicates": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden.",
        "KeepsClean(b_1) ::: The kittens keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: The kittens keep away from the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: Tom's sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of Tom's buttons burst."
      ],
      "premises": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party.",
        "KeepsClean(b_1) ::: She tells them to keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: She tells them to keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens soon have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall and loses some of his clothing in the ascent.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: His sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of his buttons burst."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 351,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 3,
      "paragraph": "Tabitha sends her kittens upstairs, and tells her guests the kittens are in bed with the measles. However, \"the dignity and repose of the tea party\" is disturbed by the \"very extraordinary noises overhead\" as the playful kittens romp in a bedroom. An illustration depicts the bedroom in complete disorder and Tom in his mother's bonnet. The next illustration shows Tabitha entering the room. The author interrupts to promise the reader she will make a larger book about Tom some day. In the last pages, the Puddle-ducks have lost the kittens' clothing in a pond, and they have been looking for them ever since.",
      "question_template": "The puddle-ducks lose the kittens' clothes in [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The playful kittens romp in a bedroom",
        "The dignity and repose of the tea party is disturbed by the very extraordinary noises overhead",
        "An illustration depicts the bedroom in complete disorder and Tom in his mother's bonnet",
        "The Puddle-ducks have lost the kittens' clothing in a pond"
      ],
      "predicates": [
        "Sends(x, y) ::: x sends y.",
        "InBedWithMeasles(x) ::: x is in bed with the measles.",
        "Disturbs(x, y) ::: x disturbs y.",
        "Romp(x) ::: x romps around.",
        "InDisorder(x) ::: x is in complete disorder.",
        "Promises(x, y) ::: x promises y.",
        "LookingFor(x, y) ::: x is looking for y.",
        "Lost(x, y) ::: x has lost y."
      ],
      "premises": [
        "Sends(a_1, b_1) ::: Tabitha sends her kittens upstairs.",
        "InBedWithMeasles(b_1) ::: The kittens are in bed with the measles.",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the dignity and repose of the tea party.",
        "Romp(b_1) ::: The playful kittens romp in the bedroom.",
        "InDisorder(c_1) ::: The bedroom is in complete disorder.",
        "Promises(a_0, \"larger book about Tom\") ::: The author promises the reader she will make a larger book about Tom some day.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens.",
        "Lost(b_1, \"kittens' clothing\") ::: The Puddle-ducks have lost the kittens' clothing in a pond.",
        "Conclusion:",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the tea party.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "352": [
    {
      "id": 352,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 3,
      "paragraph": "Tabitha sends her kittens upstairs, and tells her guests the kittens are in bed with the measles. However, \"the dignity and repose of the tea party\" is disturbed by the \"very extraordinary noises overhead\" as the playful kittens romp in a bedroom. An illustration depicts the bedroom in complete disorder and Tom in his mother's bonnet. The next illustration shows Tabitha entering the room. The author interrupts to promise the reader she will make a larger book about Tom some day. In the last pages, the Puddle-ducks have lost the kittens' clothing in a pond, and they have been looking for them ever since.",
      "question_template": "Tabitha pulls [[CANDIDATE_ANSWER]] off of the wall.",
      "candidate_answers": [
        "Tabitha",
        "Her guests"
      ],
      "predicates": [
        "Sends(x, y) ::: x sends y.",
        "InBedWithMeasles(x) ::: x is in bed with the measles.",
        "Disturbs(x, y) ::: x disturbs y.",
        "Romp(x) ::: x romps around.",
        "InDisorder(x) ::: x is in complete disorder.",
        "Promises(x, y) ::: x promises y.",
        "LookingFor(x, y) ::: x is looking for y.",
        "Lost(x, y) ::: x has lost y."
      ],
      "premises": [
        "Sends(a_1, b_1) ::: Tabitha sends her kittens upstairs.",
        "InBedWithMeasles(b_1) ::: The kittens are in bed with the measles.",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the dignity and repose of the tea party.",
        "Romp(b_1) ::: The playful kittens romp in the bedroom.",
        "InDisorder(c_1) ::: The bedroom is in complete disorder.",
        "Promises(a_0, \"larger book about Tom\") ::: The author promises the reader she will make a larger book about Tom some day.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens.",
        "Lost(b_1, \"kittens' clothing\") ::: The Puddle-ducks have lost the kittens' clothing in a pond.",
        "Conclusion:",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the tea party.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "353": [
    {
      "id": 353,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 0,
      "paragraph": " The tale begins with three feline siblings â Mittens, Tom Kitten, and Moppet â tumbling about the doorstep and playing in the dust. Their mother, Mrs. Tabitha Twitchit, expects \"fine company\" for tea so she fetches the children indoors to wash and dress them before her friends arrive. Tom is \"very naughty\" and scratches his mother while she grooms him. Tabitha dresses Moppet and Mittens in clean pinafores and tuckers, and Tom in \"all sorts of elegant uncomfortable clothes\" taken from a chest of drawers. Tom is fat and bursts several buttons, but his mother sews them back on again.",
      "question_template": "Mrs. Tabitha Twitchit has to sew buttons back on Tom's clothing because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "indoors",
        "to wash and dress them"
      ],
      "predicates": [
        "Expecting(x) ::: x expects fine company for tea.",
        "Fetches(x, y) ::: x fetches y indoors.",
        "Washes(x) ::: x is washed.",
        "Dresses(x, y) ::: x dresses y in clothing.",
        "Naughty(x) ::: x is very naughty.",
        "Scratches(x, y) ::: x scratches y.",
        "DressesIn(x, y) ::: x is dressed in y.",
        "Fat(x) ::: x is fat.",
        "BurstsButtons(x) ::: x bursts several buttons.",
        "SewsBackOn(x, y) ::: x sews y back on."
      ],
      "premises": [
        "Expecting(a_1) ::: Tabitha expects \"fine company\" for tea.",
        "Fetches(a_1, a_0) ::: Tabitha fetches the children indoors.",
        "Washes(a_0) ::: The children are washed.",
        "Dresses(a_1, a_0) ::: Tabitha dresses the children before her friends arrive.",
        "Naughty(a_2) ::: Tom is \"very naughty.\"",
        "Scratches(a_2, a_1) ::: Tom scratches his mother while she grooms him.",
        "DressesIn(a_1, cleanPinafores) ∧ DressesIn(a_1, tuckers) ∧ DressesIn(a_1, elegantUncomfortableClothes) ::: Tabitha dresses Moppet and Mittens in clean pinafores and tuckers, and Tom in \"all sorts of elegant uncomfortable clothes.\"",
        "Fat(a_2) ::: Tom is fat.",
        "BurstsButtons(a_2) ::: Tom bursts several buttons.",
        "SewsBackOn(a_1, buttons) ::: Tabitha sews the buttons back on again."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 353,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 1,
      "paragraph": "Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party. She tells them to keep their frocks clean and keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks, and then returns to her work. Moppet and Mittens soon have their pinafores smeared with grass stains. They climb upon the garden wall and lose some of their clothing in the ascent. Tom has a more difficult time gaining the top of the wall \"breaking the ferns, and shedding buttons right and left\". He is disheveled when he reaches the top of the wall, and loses his hat, but his sisters try to pull him together. The rest of his buttons burst.",
      "question_template": "Mrs. Tabitha Twitchit has to sew buttons back on Tom's clothing because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "the garden"
      ],
      "predicates": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden.",
        "KeepsClean(b_1) ::: The kittens keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: The kittens keep away from the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: Tom's sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of Tom's buttons burst."
      ],
      "premises": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party.",
        "KeepsClean(b_1) ::: She tells them to keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: She tells them to keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens soon have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall and loses some of his clothing in the ascent.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: His sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of his buttons burst."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 353,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 3,
      "paragraph": "Tabitha sends her kittens upstairs, and tells her guests the kittens are in bed with the measles. However, \"the dignity and repose of the tea party\" is disturbed by the \"very extraordinary noises overhead\" as the playful kittens romp in a bedroom. An illustration depicts the bedroom in complete disorder and Tom in his mother's bonnet. The next illustration shows Tabitha entering the room. The author interrupts to promise the reader she will make a larger book about Tom some day. In the last pages, the Puddle-ducks have lost the kittens' clothing in a pond, and they have been looking for them ever since.",
      "question_template": "Mrs. Tabitha Twitchit has to sew buttons back on Tom's clothing because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Upstairs",
        "In bed with the measles"
      ],
      "predicates": [
        "Sends(x, y) ::: x sends y.",
        "InBedWithMeasles(x) ::: x is in bed with the measles.",
        "Disturbs(x, y) ::: x disturbs y.",
        "Romp(x) ::: x romps around.",
        "InDisorder(x) ::: x is in complete disorder.",
        "Promises(x, y) ::: x promises y.",
        "LookingFor(x, y) ::: x is looking for y.",
        "Lost(x, y) ::: x has lost y."
      ],
      "premises": [
        "Sends(a_1, b_1) ::: Tabitha sends her kittens upstairs.",
        "InBedWithMeasles(b_1) ::: The kittens are in bed with the measles.",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the dignity and repose of the tea party.",
        "Romp(b_1) ::: The playful kittens romp in the bedroom.",
        "InDisorder(c_1) ::: The bedroom is in complete disorder.",
        "Promises(a_0, \"larger book about Tom\") ::: The author promises the reader she will make a larger book about Tom some day.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens.",
        "Lost(b_1, \"kittens' clothing\") ::: The Puddle-ducks have lost the kittens' clothing in a pond.",
        "Conclusion:",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the tea party.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "354": [
    {
      "id": 354,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 1,
      "paragraph": "Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party. She tells them to keep their frocks clean and keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks, and then returns to her work. Moppet and Mittens soon have their pinafores smeared with grass stains. They climb upon the garden wall and lose some of their clothing in the ascent. Tom has a more difficult time gaining the top of the wall \"breaking the ferns, and shedding buttons right and left\". He is disheveled when he reaches the top of the wall, and loses his hat, but his sisters try to pull him together. The rest of his buttons burst.",
      "question_template": "[[CANDIDATE_ANSWER]] was coming for tea when the story opens.",
      "candidate_answers": [
        "When he reaches the top of the wall",
        "Tom has a more difficult time gaining the top of the wall \"breaking the ferns, and shedding buttons right and left\""
      ],
      "predicates": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden.",
        "KeepsClean(b_1) ::: The kittens keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: The kittens keep away from the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: Tom's sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of Tom's buttons burst."
      ],
      "premises": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party.",
        "KeepsClean(b_1) ::: She tells them to keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: She tells them to keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens soon have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall and loses some of his clothing in the ascent.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: His sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of his buttons burst."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 354,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 2,
      "paragraph": "Three Puddle-ducks come marching along the road â \"pit pat paddle pat! pit pat waddle pat!\" Jemima Puddle-duck and Rebeccah put on some of the dropped clothing. The kittens lose the rest of their clothing descending the wall. Moppet invites Mr. Drake Puddle-duck to help dress Tom. He picks up various articles of Tom's clothing and \"he put[s] them on himself!\" The three ducks set off up the road just as Tabitha approaches and discovers her three children with no clothes on. She pulls them off the wall, \"smacks\" them, and takes them back to the house. \"My friends will arrive in a minute, and you are not fit to be seen; I am affronted!\" she says.",
      "question_template": "[[CANDIDATE_ANSWER]] was coming for tea when the story opens.",
      "candidate_answers": [
        "The kittens lose the rest of their clothing descending the wall."
      ],
      "predicates": [
        "PuddleDuck(x) ::: x is a Puddle-duck.",
        "Kittens(x) ::: x is a kitten.",
        "Dresses(x, y) ::: x dresses y.",
        "Clothing(x) ::: x is an article of clothing.",
        "Approaches(x, y) ::: x approaches y.",
        "Discovers(x, y) ::: x discovers y.",
        "Smacks(x, y) ::: x smacks y.",
        "TakesBack(x, y) ::: x takes y back.",
        "FitToBeSeen(x) ::: x is fit to be seen.",
        "Affronted(x) ::: x is affronted."
      ],
      "premises": [
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ Dresses(jemima, clothing) ∧ Dresses(rebeccah, clothing) ::: Jemima Puddle-duck and Rebeccah put on some of the dropped clothing.",
        "Kittens(kittens) ∧ ¬Clothing(kittens) ∧ Descends(kittens, wall) ::: The kittens lose the rest of their clothing descending the wall.",
        "Dresses(moppet, tom) ∧ PicksUp(mrDrake, clothing) ∧ Dresses(mrDrake, clothing) ::: Moppet invites Mr. Drake Puddle-duck to help dress Tom, and he picks up various articles of Tom's clothing and puts them on himself.",
        "Approaches(tabitha, kittens) ∧ Discovers(tabitha, kittens) ∧ Smacks(tabitha, kittens) ∧ TakesBack(tabitha, kittens) ::: Tabitha approaches and discovers her three children with no clothes on, smacks them, and takes them back to the house.",
        "¬FitToBeSeen(kittens) ∧ Affronted(tabitha) ::: Tabitha is affronted because her children are not fit to be seen.",
        "Conclusion:",
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ PuddleDuck(mrDrake) ::: Jemima Puddle-duck, Rebeccah, and Mr. Drake are all Puddle-ducks."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "355": [
    {
      "id": 355,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 0,
      "paragraph": " The tale begins with three feline siblings â Mittens, Tom Kitten, and Moppet â tumbling about the doorstep and playing in the dust. Their mother, Mrs. Tabitha Twitchit, expects \"fine company\" for tea so she fetches the children indoors to wash and dress them before her friends arrive. Tom is \"very naughty\" and scratches his mother while she grooms him. Tabitha dresses Moppet and Mittens in clean pinafores and tuckers, and Tom in \"all sorts of elegant uncomfortable clothes\" taken from a chest of drawers. Tom is fat and bursts several buttons, but his mother sews them back on again.",
      "question_template": "The kittens go [[CANDIDATE_ANSWER]] while their mother prepares for the party.",
      "candidate_answers": [
        "- Tumbling about the doorstep and playing in the dust",
        "- Very naughty",
        "- Scratches his mother while she grooms him",
        "- Dressed in clean pinafores and tuckers",
        "- Tom is fat and bursts several buttons"
      ],
      "predicates": [
        "Expecting(x) ::: x expects fine company for tea.",
        "Fetches(x, y) ::: x fetches y indoors.",
        "Washes(x) ::: x is washed.",
        "Dresses(x, y) ::: x dresses y in clothing.",
        "Naughty(x) ::: x is very naughty.",
        "Scratches(x, y) ::: x scratches y.",
        "DressesIn(x, y) ::: x is dressed in y.",
        "Fat(x) ::: x is fat.",
        "BurstsButtons(x) ::: x bursts several buttons.",
        "SewsBackOn(x, y) ::: x sews y back on."
      ],
      "premises": [
        "Expecting(a_1) ::: Tabitha expects \"fine company\" for tea.",
        "Fetches(a_1, a_0) ::: Tabitha fetches the children indoors.",
        "Washes(a_0) ::: The children are washed.",
        "Dresses(a_1, a_0) ::: Tabitha dresses the children before her friends arrive.",
        "Naughty(a_2) ::: Tom is \"very naughty.\"",
        "Scratches(a_2, a_1) ::: Tom scratches his mother while she grooms him.",
        "DressesIn(a_1, cleanPinafores) ∧ DressesIn(a_1, tuckers) ∧ DressesIn(a_1, elegantUncomfortableClothes) ::: Tabitha dresses Moppet and Mittens in clean pinafores and tuckers, and Tom in \"all sorts of elegant uncomfortable clothes.\"",
        "Fat(a_2) ::: Tom is fat.",
        "BurstsButtons(a_2) ::: Tom bursts several buttons.",
        "SewsBackOn(a_1, buttons) ::: Tabitha sews the buttons back on again."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "Fat(tom) ∧ BurstsButtons(tom) ∧ Expecting(tabitha)"
      ]
    },
    {
      "id": 355,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 2,
      "paragraph": "Three Puddle-ducks come marching along the road â \"pit pat paddle pat! pit pat waddle pat!\" Jemima Puddle-duck and Rebeccah put on some of the dropped clothing. The kittens lose the rest of their clothing descending the wall. Moppet invites Mr. Drake Puddle-duck to help dress Tom. He picks up various articles of Tom's clothing and \"he put[s] them on himself!\" The three ducks set off up the road just as Tabitha approaches and discovers her three children with no clothes on. She pulls them off the wall, \"smacks\" them, and takes them back to the house. \"My friends will arrive in a minute, and you are not fit to be seen; I am affronted!\" she says.",
      "question_template": "The kittens go [[CANDIDATE_ANSWER]] while their mother prepares for the party.",
      "candidate_answers": [
        "No clothes on",
        "With no clothes on"
      ],
      "predicates": [
        "PuddleDuck(x) ::: x is a Puddle-duck.",
        "Kittens(x) ::: x is a kitten.",
        "Dresses(x, y) ::: x dresses y.",
        "Clothing(x) ::: x is an article of clothing.",
        "Approaches(x, y) ::: x approaches y.",
        "Discovers(x, y) ::: x discovers y.",
        "Smacks(x, y) ::: x smacks y.",
        "TakesBack(x, y) ::: x takes y back.",
        "FitToBeSeen(x) ::: x is fit to be seen.",
        "Affronted(x) ::: x is affronted."
      ],
      "premises": [
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ Dresses(jemima, clothing) ∧ Dresses(rebeccah, clothing) ::: Jemima Puddle-duck and Rebeccah put on some of the dropped clothing.",
        "Kittens(kittens) ∧ ¬Clothing(kittens) ∧ Descends(kittens, wall) ::: The kittens lose the rest of their clothing descending the wall.",
        "Dresses(moppet, tom) ∧ PicksUp(mrDrake, clothing) ∧ Dresses(mrDrake, clothing) ::: Moppet invites Mr. Drake Puddle-duck to help dress Tom, and he picks up various articles of Tom's clothing and puts them on himself.",
        "Approaches(tabitha, kittens) ∧ Discovers(tabitha, kittens) ∧ Smacks(tabitha, kittens) ∧ TakesBack(tabitha, kittens) ::: Tabitha approaches and discovers her three children with no clothes on, smacks them, and takes them back to the house.",
        "¬FitToBeSeen(kittens) ∧ Affronted(tabitha) ::: Tabitha is affronted because her children are not fit to be seen.",
        "Conclusion:",
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ PuddleDuck(mrDrake) ::: Jemima Puddle-duck, Rebeccah, and Mr. Drake are all Puddle-ducks."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "356": [
    {
      "id": 356,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 0,
      "paragraph": " The tale begins with three feline siblings â Mittens, Tom Kitten, and Moppet â tumbling about the doorstep and playing in the dust. Their mother, Mrs. Tabitha Twitchit, expects \"fine company\" for tea so she fetches the children indoors to wash and dress them before her friends arrive. Tom is \"very naughty\" and scratches his mother while she grooms him. Tabitha dresses Moppet and Mittens in clean pinafores and tuckers, and Tom in \"all sorts of elegant uncomfortable clothes\" taken from a chest of drawers. Tom is fat and bursts several buttons, but his mother sews them back on again.",
      "question_template": "Tom loses his hat when [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Tom is \"very naughty\" and scratches his mother while she grooms him."
      ],
      "predicates": [
        "Expecting(x) ::: x expects fine company for tea.",
        "Fetches(x, y) ::: x fetches y indoors.",
        "Washes(x) ::: x is washed.",
        "Dresses(x, y) ::: x dresses y in clothing.",
        "Naughty(x) ::: x is very naughty.",
        "Scratches(x, y) ::: x scratches y.",
        "DressesIn(x, y) ::: x is dressed in y.",
        "Fat(x) ::: x is fat.",
        "BurstsButtons(x) ::: x bursts several buttons.",
        "SewsBackOn(x, y) ::: x sews y back on."
      ],
      "premises": [
        "Expecting(a_1) ::: Tabitha expects \"fine company\" for tea.",
        "Fetches(a_1, a_0) ::: Tabitha fetches the children indoors.",
        "Washes(a_0) ::: The children are washed.",
        "Dresses(a_1, a_0) ::: Tabitha dresses the children before her friends arrive.",
        "Naughty(a_2) ::: Tom is \"very naughty.\"",
        "Scratches(a_2, a_1) ::: Tom scratches his mother while she grooms him.",
        "DressesIn(a_1, cleanPinafores) ∧ DressesIn(a_1, tuckers) ∧ DressesIn(a_1, elegantUncomfortableClothes) ::: Tabitha dresses Moppet and Mittens in clean pinafores and tuckers, and Tom in \"all sorts of elegant uncomfortable clothes.\"",
        "Fat(a_2) ::: Tom is fat.",
        "BurstsButtons(a_2) ::: Tom bursts several buttons.",
        "SewsBackOn(a_1, buttons) ::: Tabitha sews the buttons back on again."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 356,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 1,
      "paragraph": "Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party. She tells them to keep their frocks clean and keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks, and then returns to her work. Moppet and Mittens soon have their pinafores smeared with grass stains. They climb upon the garden wall and lose some of their clothing in the ascent. Tom has a more difficult time gaining the top of the wall \"breaking the ferns, and shedding buttons right and left\". He is disheveled when he reaches the top of the wall, and loses his hat, but his sisters try to pull him together. The rest of his buttons burst.",
      "question_template": "Tom loses his hat when [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Tom has a more difficult time gaining the top of the wall \"breaking the ferns, and shedding buttons right and left\".",
        "- He is disheveled when he reaches the top of the wall, and loses his hat, but his sisters try to pull him together.",
        "- The rest of his buttons burst."
      ],
      "predicates": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden.",
        "KeepsClean(b_1) ::: The kittens keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: The kittens keep away from the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: Tom's sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of Tom's buttons burst."
      ],
      "premises": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party.",
        "KeepsClean(b_1) ::: She tells them to keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: She tells them to keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens soon have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall and loses some of his clothing in the ascent.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: His sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of his buttons burst."
      ],
      "conclusions": [
        "Loses(tom, hat) ∧ Disheveled(tom)",
        "Loses(tom, hat) ∧ Disheveled(tom) ∧ Climbs(tom, garden_wall) ∧ PullsTogether(sisters, tom)",
        "Loses(tom, hat) ∧ Burst(tom, buttons)"
      ]
    },
    {
      "id": 356,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 2,
      "paragraph": "Three Puddle-ducks come marching along the road â \"pit pat paddle pat! pit pat waddle pat!\" Jemima Puddle-duck and Rebeccah put on some of the dropped clothing. The kittens lose the rest of their clothing descending the wall. Moppet invites Mr. Drake Puddle-duck to help dress Tom. He picks up various articles of Tom's clothing and \"he put[s] them on himself!\" The three ducks set off up the road just as Tabitha approaches and discovers her three children with no clothes on. She pulls them off the wall, \"smacks\" them, and takes them back to the house. \"My friends will arrive in a minute, and you are not fit to be seen; I am affronted!\" she says.",
      "question_template": "Tom loses his hat when [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- The kittens lose the rest of their clothing descending the wall.",
        "- Tabitha discovers her three children with no clothes on.",
        "- She pulls them off the wall, \"smacks\" them, and takes them back to the house.",
        "- \"My friends will arrive in a minute, and you are not fit to be seen; I am affronted!\""
      ],
      "predicates": [
        "PuddleDuck(x) ::: x is a Puddle-duck.",
        "Kittens(x) ::: x is a kitten.",
        "Dresses(x, y) ::: x dresses y.",
        "Clothing(x) ::: x is an article of clothing.",
        "Approaches(x, y) ::: x approaches y.",
        "Discovers(x, y) ::: x discovers y.",
        "Smacks(x, y) ::: x smacks y.",
        "TakesBack(x, y) ::: x takes y back.",
        "FitToBeSeen(x) ::: x is fit to be seen.",
        "Affronted(x) ::: x is affronted."
      ],
      "premises": [
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ Dresses(jemima, clothing) ∧ Dresses(rebeccah, clothing) ::: Jemima Puddle-duck and Rebeccah put on some of the dropped clothing.",
        "Kittens(kittens) ∧ ¬Clothing(kittens) ∧ Descends(kittens, wall) ::: The kittens lose the rest of their clothing descending the wall.",
        "Dresses(moppet, tom) ∧ PicksUp(mrDrake, clothing) ∧ Dresses(mrDrake, clothing) ::: Moppet invites Mr. Drake Puddle-duck to help dress Tom, and he picks up various articles of Tom's clothing and puts them on himself.",
        "Approaches(tabitha, kittens) ∧ Discovers(tabitha, kittens) ∧ Smacks(tabitha, kittens) ∧ TakesBack(tabitha, kittens) ::: Tabitha approaches and discovers her three children with no clothes on, smacks them, and takes them back to the house.",
        "¬FitToBeSeen(kittens) ∧ Affronted(tabitha) ::: Tabitha is affronted because her children are not fit to be seen.",
        "Conclusion:",
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ PuddleDuck(mrDrake) ::: Jemima Puddle-duck, Rebeccah, and Mr. Drake are all Puddle-ducks."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 356,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 3,
      "paragraph": "Tabitha sends her kittens upstairs, and tells her guests the kittens are in bed with the measles. However, \"the dignity and repose of the tea party\" is disturbed by the \"very extraordinary noises overhead\" as the playful kittens romp in a bedroom. An illustration depicts the bedroom in complete disorder and Tom in his mother's bonnet. The next illustration shows Tabitha entering the room. The author interrupts to promise the reader she will make a larger book about Tom some day. In the last pages, the Puddle-ducks have lost the kittens' clothing in a pond, and they have been looking for them ever since.",
      "question_template": "Tom loses his hat when [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- The playful kittens romp in a bedroom",
        "- An illustration depicts the bedroom in complete disorder and Tom in his mother's bonnet"
      ],
      "predicates": [
        "Sends(x, y) ::: x sends y.",
        "InBedWithMeasles(x) ::: x is in bed with the measles.",
        "Disturbs(x, y) ::: x disturbs y.",
        "Romp(x) ::: x romps around.",
        "InDisorder(x) ::: x is in complete disorder.",
        "Promises(x, y) ::: x promises y.",
        "LookingFor(x, y) ::: x is looking for y.",
        "Lost(x, y) ::: x has lost y."
      ],
      "premises": [
        "Sends(a_1, b_1) ::: Tabitha sends her kittens upstairs.",
        "InBedWithMeasles(b_1) ::: The kittens are in bed with the measles.",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the dignity and repose of the tea party.",
        "Romp(b_1) ::: The playful kittens romp in the bedroom.",
        "InDisorder(c_1) ::: The bedroom is in complete disorder.",
        "Promises(a_0, \"larger book about Tom\") ::: The author promises the reader she will make a larger book about Tom some day.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens.",
        "Lost(b_1, \"kittens' clothing\") ::: The Puddle-ducks have lost the kittens' clothing in a pond.",
        "Conclusion:",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the tea party.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "357": [
    {
      "id": 357,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 0,
      "paragraph": " The tale begins with three feline siblings â Mittens, Tom Kitten, and Moppet â tumbling about the doorstep and playing in the dust. Their mother, Mrs. Tabitha Twitchit, expects \"fine company\" for tea so she fetches the children indoors to wash and dress them before her friends arrive. Tom is \"very naughty\" and scratches his mother while she grooms him. Tabitha dresses Moppet and Mittens in clean pinafores and tuckers, and Tom in \"all sorts of elegant uncomfortable clothes\" taken from a chest of drawers. Tom is fat and bursts several buttons, but his mother sews them back on again.",
      "question_template": "Tabitha discovers the kittens in the road when they are [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Mrs. Tabitha Twitchit",
        "Tabitha dresses Moppet and Mittens in clean pinafores and tuckers, and Tom in \"all sorts of elegant uncomfortable clothes\""
      ],
      "predicates": [
        "Expecting(x) ::: x expects fine company for tea.",
        "Fetches(x, y) ::: x fetches y indoors.",
        "Washes(x) ::: x is washed.",
        "Dresses(x, y) ::: x dresses y in clothing.",
        "Naughty(x) ::: x is very naughty.",
        "Scratches(x, y) ::: x scratches y.",
        "DressesIn(x, y) ::: x is dressed in y.",
        "Fat(x) ::: x is fat.",
        "BurstsButtons(x) ::: x bursts several buttons.",
        "SewsBackOn(x, y) ::: x sews y back on."
      ],
      "premises": [
        "Expecting(a_1) ::: Tabitha expects \"fine company\" for tea.",
        "Fetches(a_1, a_0) ::: Tabitha fetches the children indoors.",
        "Washes(a_0) ::: The children are washed.",
        "Dresses(a_1, a_0) ::: Tabitha dresses the children before her friends arrive.",
        "Naughty(a_2) ::: Tom is \"very naughty.\"",
        "Scratches(a_2, a_1) ::: Tom scratches his mother while she grooms him.",
        "DressesIn(a_1, cleanPinafores) ∧ DressesIn(a_1, tuckers) ∧ DressesIn(a_1, elegantUncomfortableClothes) ::: Tabitha dresses Moppet and Mittens in clean pinafores and tuckers, and Tom in \"all sorts of elegant uncomfortable clothes.\"",
        "Fat(a_2) ::: Tom is fat.",
        "BurstsButtons(a_2) ::: Tom bursts several buttons.",
        "SewsBackOn(a_1, buttons) ::: Tabitha sews the buttons back on again."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 357,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 1,
      "paragraph": "Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party. She tells them to keep their frocks clean and keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks, and then returns to her work. Moppet and Mittens soon have their pinafores smeared with grass stains. They climb upon the garden wall and lose some of their clothing in the ascent. Tom has a more difficult time gaining the top of the wall \"breaking the ferns, and shedding buttons right and left\". He is disheveled when he reaches the top of the wall, and loses his hat, but his sisters try to pull him together. The rest of his buttons burst.",
      "question_template": "Tabitha discovers the kittens in the road when they are [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Moppet and Mittens",
        "Tom"
      ],
      "predicates": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden.",
        "KeepsClean(b_1) ::: The kittens keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: The kittens keep away from the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: Tom's sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of Tom's buttons burst."
      ],
      "premises": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party.",
        "KeepsClean(b_1) ::: She tells them to keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: She tells them to keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens soon have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall and loses some of his clothing in the ascent.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: His sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of his buttons burst."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 357,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 2,
      "paragraph": "Three Puddle-ducks come marching along the road â \"pit pat paddle pat! pit pat waddle pat!\" Jemima Puddle-duck and Rebeccah put on some of the dropped clothing. The kittens lose the rest of their clothing descending the wall. Moppet invites Mr. Drake Puddle-duck to help dress Tom. He picks up various articles of Tom's clothing and \"he put[s] them on himself!\" The three ducks set off up the road just as Tabitha approaches and discovers her three children with no clothes on. She pulls them off the wall, \"smacks\" them, and takes them back to the house. \"My friends will arrive in a minute, and you are not fit to be seen; I am affronted!\" she says.",
      "question_template": "Tabitha discovers the kittens in the road when they are [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Jemima Puddle-duck and Rebeccah",
        "Mr. Drake Puddle-duck"
      ],
      "predicates": [
        "PuddleDuck(x) ::: x is a Puddle-duck.",
        "Kittens(x) ::: x is a kitten.",
        "Dresses(x, y) ::: x dresses y.",
        "Clothing(x) ::: x is an article of clothing.",
        "Approaches(x, y) ::: x approaches y.",
        "Discovers(x, y) ::: x discovers y.",
        "Smacks(x, y) ::: x smacks y.",
        "TakesBack(x, y) ::: x takes y back.",
        "FitToBeSeen(x) ::: x is fit to be seen.",
        "Affronted(x) ::: x is affronted."
      ],
      "premises": [
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ Dresses(jemima, clothing) ∧ Dresses(rebeccah, clothing) ::: Jemima Puddle-duck and Rebeccah put on some of the dropped clothing.",
        "Kittens(kittens) ∧ ¬Clothing(kittens) ∧ Descends(kittens, wall) ::: The kittens lose the rest of their clothing descending the wall.",
        "Dresses(moppet, tom) ∧ PicksUp(mrDrake, clothing) ∧ Dresses(mrDrake, clothing) ::: Moppet invites Mr. Drake Puddle-duck to help dress Tom, and he picks up various articles of Tom's clothing and puts them on himself.",
        "Approaches(tabitha, kittens) ∧ Discovers(tabitha, kittens) ∧ Smacks(tabitha, kittens) ∧ TakesBack(tabitha, kittens) ::: Tabitha approaches and discovers her three children with no clothes on, smacks them, and takes them back to the house.",
        "¬FitToBeSeen(kittens) ∧ Affronted(tabitha) ::: Tabitha is affronted because her children are not fit to be seen.",
        "Conclusion:",
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ PuddleDuck(mrDrake) ::: Jemima Puddle-duck, Rebeccah, and Mr. Drake are all Puddle-ducks."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 357,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 3,
      "paragraph": "Tabitha sends her kittens upstairs, and tells her guests the kittens are in bed with the measles. However, \"the dignity and repose of the tea party\" is disturbed by the \"very extraordinary noises overhead\" as the playful kittens romp in a bedroom. An illustration depicts the bedroom in complete disorder and Tom in his mother's bonnet. The next illustration shows Tabitha entering the room. The author interrupts to promise the reader she will make a larger book about Tom some day. In the last pages, the Puddle-ducks have lost the kittens' clothing in a pond, and they have been looking for them ever since.",
      "question_template": "Tabitha discovers the kittens in the road when they are [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The Puddle-ducks",
        "The kittens"
      ],
      "predicates": [
        "Sends(x, y) ::: x sends y.",
        "InBedWithMeasles(x) ::: x is in bed with the measles.",
        "Disturbs(x, y) ::: x disturbs y.",
        "Romp(x) ::: x romps around.",
        "InDisorder(x) ::: x is in complete disorder.",
        "Promises(x, y) ::: x promises y.",
        "LookingFor(x, y) ::: x is looking for y.",
        "Lost(x, y) ::: x has lost y."
      ],
      "premises": [
        "Sends(a_1, b_1) ::: Tabitha sends her kittens upstairs.",
        "InBedWithMeasles(b_1) ::: The kittens are in bed with the measles.",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the dignity and repose of the tea party.",
        "Romp(b_1) ::: The playful kittens romp in the bedroom.",
        "InDisorder(c_1) ::: The bedroom is in complete disorder.",
        "Promises(a_0, \"larger book about Tom\") ::: The author promises the reader she will make a larger book about Tom some day.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens.",
        "Lost(b_1, \"kittens' clothing\") ::: The Puddle-ducks have lost the kittens' clothing in a pond.",
        "Conclusion:",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the tea party.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "358": [
    {
      "id": 358,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 3,
      "paragraph": "Tabitha sends her kittens upstairs, and tells her guests the kittens are in bed with the measles. However, \"the dignity and repose of the tea party\" is disturbed by the \"very extraordinary noises overhead\" as the playful kittens romp in a bedroom. An illustration depicts the bedroom in complete disorder and Tom in his mother's bonnet. The next illustration shows Tabitha entering the room. The author interrupts to promise the reader she will make a larger book about Tom some day. In the last pages, the Puddle-ducks have lost the kittens' clothing in a pond, and they have been looking for them ever since.",
      "question_template": "Tom is described as very naughty because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "the kittens are in bed with the measles"
      ],
      "predicates": [
        "Sends(x, y) ::: x sends y.",
        "InBedWithMeasles(x) ::: x is in bed with the measles.",
        "Disturbs(x, y) ::: x disturbs y.",
        "Romp(x) ::: x romps around.",
        "InDisorder(x) ::: x is in complete disorder.",
        "Promises(x, y) ::: x promises y.",
        "LookingFor(x, y) ::: x is looking for y.",
        "Lost(x, y) ::: x has lost y."
      ],
      "premises": [
        "Sends(a_1, b_1) ::: Tabitha sends her kittens upstairs.",
        "InBedWithMeasles(b_1) ::: The kittens are in bed with the measles.",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the dignity and repose of the tea party.",
        "Romp(b_1) ::: The playful kittens romp in the bedroom.",
        "InDisorder(c_1) ::: The bedroom is in complete disorder.",
        "Promises(a_0, \"larger book about Tom\") ::: The author promises the reader she will make a larger book about Tom some day.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens.",
        "Lost(b_1, \"kittens' clothing\") ::: The Puddle-ducks have lost the kittens' clothing in a pond.",
        "Conclusion:",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the tea party.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "359": [
    {
      "id": 359,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 0,
      "paragraph": " The tale begins with three feline siblings â Mittens, Tom Kitten, and Moppet â tumbling about the doorstep and playing in the dust. Their mother, Mrs. Tabitha Twitchit, expects \"fine company\" for tea so she fetches the children indoors to wash and dress them before her friends arrive. Tom is \"very naughty\" and scratches his mother while she grooms him. Tabitha dresses Moppet and Mittens in clean pinafores and tuckers, and Tom in \"all sorts of elegant uncomfortable clothes\" taken from a chest of drawers. Tom is fat and bursts several buttons, but his mother sews them back on again.",
      "question_template": "[[CANDIDATE_ANSWER]] put on the clothing that fell off the kittens.",
      "candidate_answers": [
        "- Tumbling about the doorstep and playing in the dust",
        "- Tom is \"very naughty\" and scratches his mother while she grooms him"
      ],
      "predicates": [
        "Expecting(x) ::: x expects fine company for tea.",
        "Fetches(x, y) ::: x fetches y indoors.",
        "Washes(x) ::: x is washed.",
        "Dresses(x, y) ::: x dresses y in clothing.",
        "Naughty(x) ::: x is very naughty.",
        "Scratches(x, y) ::: x scratches y.",
        "DressesIn(x, y) ::: x is dressed in y.",
        "Fat(x) ::: x is fat.",
        "BurstsButtons(x) ::: x bursts several buttons.",
        "SewsBackOn(x, y) ::: x sews y back on."
      ],
      "premises": [
        "Expecting(a_1) ::: Tabitha expects \"fine company\" for tea.",
        "Fetches(a_1, a_0) ::: Tabitha fetches the children indoors.",
        "Washes(a_0) ::: The children are washed.",
        "Dresses(a_1, a_0) ::: Tabitha dresses the children before her friends arrive.",
        "Naughty(a_2) ::: Tom is \"very naughty.\"",
        "Scratches(a_2, a_1) ::: Tom scratches his mother while she grooms him.",
        "DressesIn(a_1, cleanPinafores) ∧ DressesIn(a_1, tuckers) ∧ DressesIn(a_1, elegantUncomfortableClothes) ::: Tabitha dresses Moppet and Mittens in clean pinafores and tuckers, and Tom in \"all sorts of elegant uncomfortable clothes.\"",
        "Fat(a_2) ::: Tom is fat.",
        "BurstsButtons(a_2) ::: Tom bursts several buttons.",
        "SewsBackOn(a_1, buttons) ::: Tabitha sews the buttons back on again."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 359,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 1,
      "paragraph": "Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party. She tells them to keep their frocks clean and keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks, and then returns to her work. Moppet and Mittens soon have their pinafores smeared with grass stains. They climb upon the garden wall and lose some of their clothing in the ascent. Tom has a more difficult time gaining the top of the wall \"breaking the ferns, and shedding buttons right and left\". He is disheveled when he reaches the top of the wall, and loses his hat, but his sisters try to pull him together. The rest of his buttons burst.",
      "question_template": "[[CANDIDATE_ANSWER]] put on the clothing that fell off the kittens.",
      "candidate_answers": [
        "- Moppet and Mittens soon have their pinafores smeared with grass stains.",
        "- They climb upon the garden wall and lose some of their clothing in the ascent.",
        "- Tom has a more difficult time gaining the top of the wall \"breaking the ferns, and shedding buttons right and left\".",
        "- He is disheveled when he reaches the top of the wall, and loses his hat, but his sisters try to pull him together.",
        "- The rest of his buttons burst."
      ],
      "predicates": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden.",
        "KeepsClean(b_1) ::: The kittens keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: The kittens keep away from the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: Tom's sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of Tom's buttons burst."
      ],
      "premises": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party.",
        "KeepsClean(b_1) ::: She tells them to keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: She tells them to keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens soon have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall and loses some of his clothing in the ascent.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: His sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of his buttons burst."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 359,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 2,
      "paragraph": "Three Puddle-ducks come marching along the road â \"pit pat paddle pat! pit pat waddle pat!\" Jemima Puddle-duck and Rebeccah put on some of the dropped clothing. The kittens lose the rest of their clothing descending the wall. Moppet invites Mr. Drake Puddle-duck to help dress Tom. He picks up various articles of Tom's clothing and \"he put[s] them on himself!\" The three ducks set off up the road just as Tabitha approaches and discovers her three children with no clothes on. She pulls them off the wall, \"smacks\" them, and takes them back to the house. \"My friends will arrive in a minute, and you are not fit to be seen; I am affronted!\" she says.",
      "question_template": "[[CANDIDATE_ANSWER]] put on the clothing that fell off the kittens.",
      "candidate_answers": [
        "The kittens lose the rest of their clothing descending the wall.",
        "Tabitha approaches and discovers her three children with no clothes on.",
        "She pulls them off the wall, \"smacks\" them, and takes them back to the house."
      ],
      "predicates": [
        "PuddleDuck(x) ::: x is a Puddle-duck.",
        "Kittens(x) ::: x is a kitten.",
        "Dresses(x, y) ::: x dresses y.",
        "Clothing(x) ::: x is an article of clothing.",
        "Approaches(x, y) ::: x approaches y.",
        "Discovers(x, y) ::: x discovers y.",
        "Smacks(x, y) ::: x smacks y.",
        "TakesBack(x, y) ::: x takes y back.",
        "FitToBeSeen(x) ::: x is fit to be seen.",
        "Affronted(x) ::: x is affronted."
      ],
      "premises": [
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ Dresses(jemima, clothing) ∧ Dresses(rebeccah, clothing) ::: Jemima Puddle-duck and Rebeccah put on some of the dropped clothing.",
        "Kittens(kittens) ∧ ¬Clothing(kittens) ∧ Descends(kittens, wall) ::: The kittens lose the rest of their clothing descending the wall.",
        "Dresses(moppet, tom) ∧ PicksUp(mrDrake, clothing) ∧ Dresses(mrDrake, clothing) ::: Moppet invites Mr. Drake Puddle-duck to help dress Tom, and he picks up various articles of Tom's clothing and puts them on himself.",
        "Approaches(tabitha, kittens) ∧ Discovers(tabitha, kittens) ∧ Smacks(tabitha, kittens) ∧ TakesBack(tabitha, kittens) ::: Tabitha approaches and discovers her three children with no clothes on, smacks them, and takes them back to the house.",
        "¬FitToBeSeen(kittens) ∧ Affronted(tabitha) ::: Tabitha is affronted because her children are not fit to be seen.",
        "Conclusion:",
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ PuddleDuck(mrDrake) ::: Jemima Puddle-duck, Rebeccah, and Mr. Drake are all Puddle-ducks."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 359,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 3,
      "paragraph": "Tabitha sends her kittens upstairs, and tells her guests the kittens are in bed with the measles. However, \"the dignity and repose of the tea party\" is disturbed by the \"very extraordinary noises overhead\" as the playful kittens romp in a bedroom. An illustration depicts the bedroom in complete disorder and Tom in his mother's bonnet. The next illustration shows Tabitha entering the room. The author interrupts to promise the reader she will make a larger book about Tom some day. In the last pages, the Puddle-ducks have lost the kittens' clothing in a pond, and they have been looking for them ever since.",
      "question_template": "[[CANDIDATE_ANSWER]] put on the clothing that fell off the kittens.",
      "candidate_answers": [
        "- The dignity and repose of the tea party is disturbed by the \"very extraordinary noises overhead\"",
        "- The playful kittens romp in a bedroom",
        "- An illustration depicts the bedroom in complete disorder and Tom in his mother's bonnet"
      ],
      "predicates": [
        "Sends(x, y) ::: x sends y.",
        "InBedWithMeasles(x) ::: x is in bed with the measles.",
        "Disturbs(x, y) ::: x disturbs y.",
        "Romp(x) ::: x romps around.",
        "InDisorder(x) ::: x is in complete disorder.",
        "Promises(x, y) ::: x promises y.",
        "LookingFor(x, y) ::: x is looking for y.",
        "Lost(x, y) ::: x has lost y."
      ],
      "premises": [
        "Sends(a_1, b_1) ::: Tabitha sends her kittens upstairs.",
        "InBedWithMeasles(b_1) ::: The kittens are in bed with the measles.",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the dignity and repose of the tea party.",
        "Romp(b_1) ::: The playful kittens romp in the bedroom.",
        "InDisorder(c_1) ::: The bedroom is in complete disorder.",
        "Promises(a_0, \"larger book about Tom\") ::: The author promises the reader she will make a larger book about Tom some day.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens.",
        "Lost(b_1, \"kittens' clothing\") ::: The Puddle-ducks have lost the kittens' clothing in a pond.",
        "Conclusion:",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the tea party.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "360": [
    {
      "id": 360,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 2,
      "paragraph": "Three Puddle-ducks come marching along the road â \"pit pat paddle pat! pit pat waddle pat!\" Jemima Puddle-duck and Rebeccah put on some of the dropped clothing. The kittens lose the rest of their clothing descending the wall. Moppet invites Mr. Drake Puddle-duck to help dress Tom. He picks up various articles of Tom's clothing and \"he put[s] them on himself!\" The three ducks set off up the road just as Tabitha approaches and discovers her three children with no clothes on. She pulls them off the wall, \"smacks\" them, and takes them back to the house. \"My friends will arrive in a minute, and you are not fit to be seen; I am affronted!\" she says.",
      "question_template": "Mrs. Twitchit tells her guests that the kittens are [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The rest of their clothing descending the wall"
      ],
      "predicates": [
        "PuddleDuck(x) ::: x is a Puddle-duck.",
        "Kittens(x) ::: x is a kitten.",
        "Dresses(x, y) ::: x dresses y.",
        "Clothing(x) ::: x is an article of clothing.",
        "Approaches(x, y) ::: x approaches y.",
        "Discovers(x, y) ::: x discovers y.",
        "Smacks(x, y) ::: x smacks y.",
        "TakesBack(x, y) ::: x takes y back.",
        "FitToBeSeen(x) ::: x is fit to be seen.",
        "Affronted(x) ::: x is affronted."
      ],
      "premises": [
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ Dresses(jemima, clothing) ∧ Dresses(rebeccah, clothing) ::: Jemima Puddle-duck and Rebeccah put on some of the dropped clothing.",
        "Kittens(kittens) ∧ ¬Clothing(kittens) ∧ Descends(kittens, wall) ::: The kittens lose the rest of their clothing descending the wall.",
        "Dresses(moppet, tom) ∧ PicksUp(mrDrake, clothing) ∧ Dresses(mrDrake, clothing) ::: Moppet invites Mr. Drake Puddle-duck to help dress Tom, and he picks up various articles of Tom's clothing and puts them on himself.",
        "Approaches(tabitha, kittens) ∧ Discovers(tabitha, kittens) ∧ Smacks(tabitha, kittens) ∧ TakesBack(tabitha, kittens) ::: Tabitha approaches and discovers her three children with no clothes on, smacks them, and takes them back to the house.",
        "¬FitToBeSeen(kittens) ∧ Affronted(tabitha) ::: Tabitha is affronted because her children are not fit to be seen.",
        "Conclusion:",
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ PuddleDuck(mrDrake) ::: Jemima Puddle-duck, Rebeccah, and Mr. Drake are all Puddle-ducks."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 360,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 3,
      "paragraph": "Tabitha sends her kittens upstairs, and tells her guests the kittens are in bed with the measles. However, \"the dignity and repose of the tea party\" is disturbed by the \"very extraordinary noises overhead\" as the playful kittens romp in a bedroom. An illustration depicts the bedroom in complete disorder and Tom in his mother's bonnet. The next illustration shows Tabitha entering the room. The author interrupts to promise the reader she will make a larger book about Tom some day. In the last pages, the Puddle-ducks have lost the kittens' clothing in a pond, and they have been looking for them ever since.",
      "question_template": "Mrs. Twitchit tells her guests that the kittens are [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "In a pond"
      ],
      "predicates": [
        "Sends(x, y) ::: x sends y.",
        "InBedWithMeasles(x) ::: x is in bed with the measles.",
        "Disturbs(x, y) ::: x disturbs y.",
        "Romp(x) ::: x romps around.",
        "InDisorder(x) ::: x is in complete disorder.",
        "Promises(x, y) ::: x promises y.",
        "LookingFor(x, y) ::: x is looking for y.",
        "Lost(x, y) ::: x has lost y."
      ],
      "premises": [
        "Sends(a_1, b_1) ::: Tabitha sends her kittens upstairs.",
        "InBedWithMeasles(b_1) ::: The kittens are in bed with the measles.",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the dignity and repose of the tea party.",
        "Romp(b_1) ::: The playful kittens romp in the bedroom.",
        "InDisorder(c_1) ::: The bedroom is in complete disorder.",
        "Promises(a_0, \"larger book about Tom\") ::: The author promises the reader she will make a larger book about Tom some day.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens.",
        "Lost(b_1, \"kittens' clothing\") ::: The Puddle-ducks have lost the kittens' clothing in a pond.",
        "Conclusion:",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the tea party.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "361": [
    {
      "id": 361,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 0,
      "paragraph": " The tale begins with three feline siblings â Mittens, Tom Kitten, and Moppet â tumbling about the doorstep and playing in the dust. Their mother, Mrs. Tabitha Twitchit, expects \"fine company\" for tea so she fetches the children indoors to wash and dress them before her friends arrive. Tom is \"very naughty\" and scratches his mother while she grooms him. Tabitha dresses Moppet and Mittens in clean pinafores and tuckers, and Tom in \"all sorts of elegant uncomfortable clothes\" taken from a chest of drawers. Tom is fat and bursts several buttons, but his mother sews them back on again.",
      "question_template": "The kittens interrupt their mother's tea party by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Tom"
      ],
      "predicates": [
        "Expecting(x) ::: x expects fine company for tea.",
        "Fetches(x, y) ::: x fetches y indoors.",
        "Washes(x) ::: x is washed.",
        "Dresses(x, y) ::: x dresses y in clothing.",
        "Naughty(x) ::: x is very naughty.",
        "Scratches(x, y) ::: x scratches y.",
        "DressesIn(x, y) ::: x is dressed in y.",
        "Fat(x) ::: x is fat.",
        "BurstsButtons(x) ::: x bursts several buttons.",
        "SewsBackOn(x, y) ::: x sews y back on."
      ],
      "premises": [
        "Expecting(a_1) ::: Tabitha expects \"fine company\" for tea.",
        "Fetches(a_1, a_0) ::: Tabitha fetches the children indoors.",
        "Washes(a_0) ::: The children are washed.",
        "Dresses(a_1, a_0) ::: Tabitha dresses the children before her friends arrive.",
        "Naughty(a_2) ::: Tom is \"very naughty.\"",
        "Scratches(a_2, a_1) ::: Tom scratches his mother while she grooms him.",
        "DressesIn(a_1, cleanPinafores) ∧ DressesIn(a_1, tuckers) ∧ DressesIn(a_1, elegantUncomfortableClothes) ::: Tabitha dresses Moppet and Mittens in clean pinafores and tuckers, and Tom in \"all sorts of elegant uncomfortable clothes.\"",
        "Fat(a_2) ::: Tom is fat.",
        "BurstsButtons(a_2) ::: Tom bursts several buttons.",
        "SewsBackOn(a_1, buttons) ::: Tabitha sews the buttons back on again."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 361,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 2,
      "paragraph": "Three Puddle-ducks come marching along the road â \"pit pat paddle pat! pit pat waddle pat!\" Jemima Puddle-duck and Rebeccah put on some of the dropped clothing. The kittens lose the rest of their clothing descending the wall. Moppet invites Mr. Drake Puddle-duck to help dress Tom. He picks up various articles of Tom's clothing and \"he put[s] them on himself!\" The three ducks set off up the road just as Tabitha approaches and discovers her three children with no clothes on. She pulls them off the wall, \"smacks\" them, and takes them back to the house. \"My friends will arrive in a minute, and you are not fit to be seen; I am affronted!\" she says.",
      "question_template": "The kittens interrupt their mother's tea party by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Moppet",
        "Tom"
      ],
      "predicates": [
        "PuddleDuck(x) ::: x is a Puddle-duck.",
        "Kittens(x) ::: x is a kitten.",
        "Dresses(x, y) ::: x dresses y.",
        "Clothing(x) ::: x is an article of clothing.",
        "Approaches(x, y) ::: x approaches y.",
        "Discovers(x, y) ::: x discovers y.",
        "Smacks(x, y) ::: x smacks y.",
        "TakesBack(x, y) ::: x takes y back.",
        "FitToBeSeen(x) ::: x is fit to be seen.",
        "Affronted(x) ::: x is affronted."
      ],
      "premises": [
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ Dresses(jemima, clothing) ∧ Dresses(rebeccah, clothing) ::: Jemima Puddle-duck and Rebeccah put on some of the dropped clothing.",
        "Kittens(kittens) ∧ ¬Clothing(kittens) ∧ Descends(kittens, wall) ::: The kittens lose the rest of their clothing descending the wall.",
        "Dresses(moppet, tom) ∧ PicksUp(mrDrake, clothing) ∧ Dresses(mrDrake, clothing) ::: Moppet invites Mr. Drake Puddle-duck to help dress Tom, and he picks up various articles of Tom's clothing and puts them on himself.",
        "Approaches(tabitha, kittens) ∧ Discovers(tabitha, kittens) ∧ Smacks(tabitha, kittens) ∧ TakesBack(tabitha, kittens) ::: Tabitha approaches and discovers her three children with no clothes on, smacks them, and takes them back to the house.",
        "¬FitToBeSeen(kittens) ∧ Affronted(tabitha) ::: Tabitha is affronted because her children are not fit to be seen.",
        "Conclusion:",
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ PuddleDuck(mrDrake) ::: Jemima Puddle-duck, Rebeccah, and Mr. Drake are all Puddle-ducks."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "362": [
    {
      "id": 362,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 1,
      "paragraph": "Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party. She tells them to keep their frocks clean and keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks, and then returns to her work. Moppet and Mittens soon have their pinafores smeared with grass stains. They climb upon the garden wall and lose some of their clothing in the ascent. Tom has a more difficult time gaining the top of the wall \"breaking the ferns, and shedding buttons right and left\". He is disheveled when he reaches the top of the wall, and loses his hat, but his sisters try to pull him together. The rest of his buttons burst.",
      "question_template": "The Puddle-ducks lost the clothing they got from the kittens in [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Tom has a more difficult time gaining the top of the wall \"breaking the ferns, and shedding buttons right and left\".",
        "He is disheveled when he reaches the top of the wall, and loses his hat, but his sisters try to pull him together.",
        "The rest of his buttons burst."
      ],
      "predicates": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden.",
        "KeepsClean(b_1) ::: The kittens keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: The kittens keep away from the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: Tom's sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of Tom's buttons burst."
      ],
      "premises": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party.",
        "KeepsClean(b_1) ::: She tells them to keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: She tells them to keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens soon have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall and loses some of his clothing in the ascent.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: His sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of his buttons burst."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 362,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 2,
      "paragraph": "Three Puddle-ducks come marching along the road â \"pit pat paddle pat! pit pat waddle pat!\" Jemima Puddle-duck and Rebeccah put on some of the dropped clothing. The kittens lose the rest of their clothing descending the wall. Moppet invites Mr. Drake Puddle-duck to help dress Tom. He picks up various articles of Tom's clothing and \"he put[s] them on himself!\" The three ducks set off up the road just as Tabitha approaches and discovers her three children with no clothes on. She pulls them off the wall, \"smacks\" them, and takes them back to the house. \"My friends will arrive in a minute, and you are not fit to be seen; I am affronted!\" she says.",
      "question_template": "The Puddle-ducks lost the clothing they got from the kittens in [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The kittens lose the rest of their clothing descending the wall.",
        "Tabitha approaches and discovers her three children with no clothes on.",
        "She pulls them off the wall, \"smacks\" them, and takes them back to the house."
      ],
      "predicates": [
        "PuddleDuck(x) ::: x is a Puddle-duck.",
        "Kittens(x) ::: x is a kitten.",
        "Dresses(x, y) ::: x dresses y.",
        "Clothing(x) ::: x is an article of clothing.",
        "Approaches(x, y) ::: x approaches y.",
        "Discovers(x, y) ::: x discovers y.",
        "Smacks(x, y) ::: x smacks y.",
        "TakesBack(x, y) ::: x takes y back.",
        "FitToBeSeen(x) ::: x is fit to be seen.",
        "Affronted(x) ::: x is affronted."
      ],
      "premises": [
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ Dresses(jemima, clothing) ∧ Dresses(rebeccah, clothing) ::: Jemima Puddle-duck and Rebeccah put on some of the dropped clothing.",
        "Kittens(kittens) ∧ ¬Clothing(kittens) ∧ Descends(kittens, wall) ::: The kittens lose the rest of their clothing descending the wall.",
        "Dresses(moppet, tom) ∧ PicksUp(mrDrake, clothing) ∧ Dresses(mrDrake, clothing) ::: Moppet invites Mr. Drake Puddle-duck to help dress Tom, and he picks up various articles of Tom's clothing and puts them on himself.",
        "Approaches(tabitha, kittens) ∧ Discovers(tabitha, kittens) ∧ Smacks(tabitha, kittens) ∧ TakesBack(tabitha, kittens) ::: Tabitha approaches and discovers her three children with no clothes on, smacks them, and takes them back to the house.",
        "¬FitToBeSeen(kittens) ∧ Affronted(tabitha) ::: Tabitha is affronted because her children are not fit to be seen.",
        "Conclusion:",
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ PuddleDuck(mrDrake) ::: Jemima Puddle-duck, Rebeccah, and Mr. Drake are all Puddle-ducks."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 362,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 3,
      "paragraph": "Tabitha sends her kittens upstairs, and tells her guests the kittens are in bed with the measles. However, \"the dignity and repose of the tea party\" is disturbed by the \"very extraordinary noises overhead\" as the playful kittens romp in a bedroom. An illustration depicts the bedroom in complete disorder and Tom in his mother's bonnet. The next illustration shows Tabitha entering the room. The author interrupts to promise the reader she will make a larger book about Tom some day. In the last pages, the Puddle-ducks have lost the kittens' clothing in a pond, and they have been looking for them ever since.",
      "question_template": "The Puddle-ducks lost the clothing they got from the kittens in [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Tom in his mother's bonnet"
      ],
      "predicates": [
        "Sends(x, y) ::: x sends y.",
        "InBedWithMeasles(x) ::: x is in bed with the measles.",
        "Disturbs(x, y) ::: x disturbs y.",
        "Romp(x) ::: x romps around.",
        "InDisorder(x) ::: x is in complete disorder.",
        "Promises(x, y) ::: x promises y.",
        "LookingFor(x, y) ::: x is looking for y.",
        "Lost(x, y) ::: x has lost y."
      ],
      "premises": [
        "Sends(a_1, b_1) ::: Tabitha sends her kittens upstairs.",
        "InBedWithMeasles(b_1) ::: The kittens are in bed with the measles.",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the dignity and repose of the tea party.",
        "Romp(b_1) ::: The playful kittens romp in the bedroom.",
        "InDisorder(c_1) ::: The bedroom is in complete disorder.",
        "Promises(a_0, \"larger book about Tom\") ::: The author promises the reader she will make a larger book about Tom some day.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens.",
        "Lost(b_1, \"kittens' clothing\") ::: The Puddle-ducks have lost the kittens' clothing in a pond.",
        "Conclusion:",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the tea party.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "363": [
    {
      "id": 363,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 0,
      "paragraph": " The tale begins with three feline siblings â Mittens, Tom Kitten, and Moppet â tumbling about the doorstep and playing in the dust. Their mother, Mrs. Tabitha Twitchit, expects \"fine company\" for tea so she fetches the children indoors to wash and dress them before her friends arrive. Tom is \"very naughty\" and scratches his mother while she grooms him. Tabitha dresses Moppet and Mittens in clean pinafores and tuckers, and Tom in \"all sorts of elegant uncomfortable clothes\" taken from a chest of drawers. Tom is fat and bursts several buttons, but his mother sews them back on again.",
      "question_template": "[[CANDIDATE_ANSWER]] is the naughty kitten.",
      "candidate_answers": [
        "\"all sorts of elegant uncomfortable clothes\"",
        "\"clean pinafores and tuckers\""
      ],
      "predicates": [
        "Expecting(x) ::: x expects fine company for tea.",
        "Fetches(x, y) ::: x fetches y indoors.",
        "Washes(x) ::: x is washed.",
        "Dresses(x, y) ::: x dresses y in clothing.",
        "Naughty(x) ::: x is very naughty.",
        "Scratches(x, y) ::: x scratches y.",
        "DressesIn(x, y) ::: x is dressed in y.",
        "Fat(x) ::: x is fat.",
        "BurstsButtons(x) ::: x bursts several buttons.",
        "SewsBackOn(x, y) ::: x sews y back on."
      ],
      "premises": [
        "Expecting(a_1) ::: Tabitha expects \"fine company\" for tea.",
        "Fetches(a_1, a_0) ::: Tabitha fetches the children indoors.",
        "Washes(a_0) ::: The children are washed.",
        "Dresses(a_1, a_0) ::: Tabitha dresses the children before her friends arrive.",
        "Naughty(a_2) ::: Tom is \"very naughty.\"",
        "Scratches(a_2, a_1) ::: Tom scratches his mother while she grooms him.",
        "DressesIn(a_1, cleanPinafores) ∧ DressesIn(a_1, tuckers) ∧ DressesIn(a_1, elegantUncomfortableClothes) ::: Tabitha dresses Moppet and Mittens in clean pinafores and tuckers, and Tom in \"all sorts of elegant uncomfortable clothes.\"",
        "Fat(a_2) ::: Tom is fat.",
        "BurstsButtons(a_2) ::: Tom bursts several buttons.",
        "SewsBackOn(a_1, buttons) ::: Tabitha sews the buttons back on again."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 363,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 1,
      "paragraph": "Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party. She tells them to keep their frocks clean and keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks, and then returns to her work. Moppet and Mittens soon have their pinafores smeared with grass stains. They climb upon the garden wall and lose some of their clothing in the ascent. Tom has a more difficult time gaining the top of the wall \"breaking the ferns, and shedding buttons right and left\". He is disheveled when he reaches the top of the wall, and loses his hat, but his sisters try to pull him together. The rest of his buttons burst.",
      "question_template": "[[CANDIDATE_ANSWER]] is the naughty kitten.",
      "candidate_answers": [
        "His hat",
        "Pinafores",
        "Clothing"
      ],
      "predicates": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden.",
        "KeepsClean(b_1) ::: The kittens keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: The kittens keep away from the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: Tom's sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of Tom's buttons burst."
      ],
      "premises": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party.",
        "KeepsClean(b_1) ::: She tells them to keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: She tells them to keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens soon have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall and loses some of his clothing in the ascent.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: His sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of his buttons burst."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 363,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 2,
      "paragraph": "Three Puddle-ducks come marching along the road â \"pit pat paddle pat! pit pat waddle pat!\" Jemima Puddle-duck and Rebeccah put on some of the dropped clothing. The kittens lose the rest of their clothing descending the wall. Moppet invites Mr. Drake Puddle-duck to help dress Tom. He picks up various articles of Tom's clothing and \"he put[s] them on himself!\" The three ducks set off up the road just as Tabitha approaches and discovers her three children with no clothes on. She pulls them off the wall, \"smacks\" them, and takes them back to the house. \"My friends will arrive in a minute, and you are not fit to be seen; I am affronted!\" she says.",
      "question_template": "[[CANDIDATE_ANSWER]] is the naughty kitten.",
      "candidate_answers": [
        "The dropped clothing",
        "Various articles of Tom's clothing"
      ],
      "predicates": [
        "PuddleDuck(x) ::: x is a Puddle-duck.",
        "Kittens(x) ::: x is a kitten.",
        "Dresses(x, y) ::: x dresses y.",
        "Clothing(x) ::: x is an article of clothing.",
        "Approaches(x, y) ::: x approaches y.",
        "Discovers(x, y) ::: x discovers y.",
        "Smacks(x, y) ::: x smacks y.",
        "TakesBack(x, y) ::: x takes y back.",
        "FitToBeSeen(x) ::: x is fit to be seen.",
        "Affronted(x) ::: x is affronted."
      ],
      "premises": [
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ Dresses(jemima, clothing) ∧ Dresses(rebeccah, clothing) ::: Jemima Puddle-duck and Rebeccah put on some of the dropped clothing.",
        "Kittens(kittens) ∧ ¬Clothing(kittens) ∧ Descends(kittens, wall) ::: The kittens lose the rest of their clothing descending the wall.",
        "Dresses(moppet, tom) ∧ PicksUp(mrDrake, clothing) ∧ Dresses(mrDrake, clothing) ::: Moppet invites Mr. Drake Puddle-duck to help dress Tom, and he picks up various articles of Tom's clothing and puts them on himself.",
        "Approaches(tabitha, kittens) ∧ Discovers(tabitha, kittens) ∧ Smacks(tabitha, kittens) ∧ TakesBack(tabitha, kittens) ::: Tabitha approaches and discovers her three children with no clothes on, smacks them, and takes them back to the house.",
        "¬FitToBeSeen(kittens) ∧ Affronted(tabitha) ::: Tabitha is affronted because her children are not fit to be seen.",
        "Conclusion:",
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ PuddleDuck(mrDrake) ::: Jemima Puddle-duck, Rebeccah, and Mr. Drake are all Puddle-ducks."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "364": [
    {
      "id": 364,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 0,
      "paragraph": " The tale begins with three feline siblings â Mittens, Tom Kitten, and Moppet â tumbling about the doorstep and playing in the dust. Their mother, Mrs. Tabitha Twitchit, expects \"fine company\" for tea so she fetches the children indoors to wash and dress them before her friends arrive. Tom is \"very naughty\" and scratches his mother while she grooms him. Tabitha dresses Moppet and Mittens in clean pinafores and tuckers, and Tom in \"all sorts of elegant uncomfortable clothes\" taken from a chest of drawers. Tom is fat and bursts several buttons, but his mother sews them back on again.",
      "question_template": "[[CANDIDATE_ANSWER]] is what Tom Kitten does to his mother.",
      "candidate_answers": [
        "Mrs. Tabitha Twitchit expects \"fine company\" for tea"
      ],
      "predicates": [
        "Expecting(x) ::: x expects fine company for tea.",
        "Fetches(x, y) ::: x fetches y indoors.",
        "Washes(x) ::: x is washed.",
        "Dresses(x, y) ::: x dresses y in clothing.",
        "Naughty(x) ::: x is very naughty.",
        "Scratches(x, y) ::: x scratches y.",
        "DressesIn(x, y) ::: x is dressed in y.",
        "Fat(x) ::: x is fat.",
        "BurstsButtons(x) ::: x bursts several buttons.",
        "SewsBackOn(x, y) ::: x sews y back on."
      ],
      "premises": [
        "Expecting(a_1) ::: Tabitha expects \"fine company\" for tea.",
        "Fetches(a_1, a_0) ::: Tabitha fetches the children indoors.",
        "Washes(a_0) ::: The children are washed.",
        "Dresses(a_1, a_0) ::: Tabitha dresses the children before her friends arrive.",
        "Naughty(a_2) ::: Tom is \"very naughty.\"",
        "Scratches(a_2, a_1) ::: Tom scratches his mother while she grooms him.",
        "DressesIn(a_1, cleanPinafores) ∧ DressesIn(a_1, tuckers) ∧ DressesIn(a_1, elegantUncomfortableClothes) ::: Tabitha dresses Moppet and Mittens in clean pinafores and tuckers, and Tom in \"all sorts of elegant uncomfortable clothes.\"",
        "Fat(a_2) ::: Tom is fat.",
        "BurstsButtons(a_2) ::: Tom bursts several buttons.",
        "SewsBackOn(a_1, buttons) ::: Tabitha sews the buttons back on again."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 364,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 2,
      "paragraph": "Three Puddle-ducks come marching along the road â \"pit pat paddle pat! pit pat waddle pat!\" Jemima Puddle-duck and Rebeccah put on some of the dropped clothing. The kittens lose the rest of their clothing descending the wall. Moppet invites Mr. Drake Puddle-duck to help dress Tom. He picks up various articles of Tom's clothing and \"he put[s] them on himself!\" The three ducks set off up the road just as Tabitha approaches and discovers her three children with no clothes on. She pulls them off the wall, \"smacks\" them, and takes them back to the house. \"My friends will arrive in a minute, and you are not fit to be seen; I am affronted!\" she says.",
      "question_template": "[[CANDIDATE_ANSWER]] is what Tom Kitten does to his mother.",
      "candidate_answers": [
        "My friends will arrive in a minute"
      ],
      "predicates": [
        "PuddleDuck(x) ::: x is a Puddle-duck.",
        "Kittens(x) ::: x is a kitten.",
        "Dresses(x, y) ::: x dresses y.",
        "Clothing(x) ::: x is an article of clothing.",
        "Approaches(x, y) ::: x approaches y.",
        "Discovers(x, y) ::: x discovers y.",
        "Smacks(x, y) ::: x smacks y.",
        "TakesBack(x, y) ::: x takes y back.",
        "FitToBeSeen(x) ::: x is fit to be seen.",
        "Affronted(x) ::: x is affronted."
      ],
      "premises": [
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ Dresses(jemima, clothing) ∧ Dresses(rebeccah, clothing) ::: Jemima Puddle-duck and Rebeccah put on some of the dropped clothing.",
        "Kittens(kittens) ∧ ¬Clothing(kittens) ∧ Descends(kittens, wall) ::: The kittens lose the rest of their clothing descending the wall.",
        "Dresses(moppet, tom) ∧ PicksUp(mrDrake, clothing) ∧ Dresses(mrDrake, clothing) ::: Moppet invites Mr. Drake Puddle-duck to help dress Tom, and he picks up various articles of Tom's clothing and puts them on himself.",
        "Approaches(tabitha, kittens) ∧ Discovers(tabitha, kittens) ∧ Smacks(tabitha, kittens) ∧ TakesBack(tabitha, kittens) ::: Tabitha approaches and discovers her three children with no clothes on, smacks them, and takes them back to the house.",
        "¬FitToBeSeen(kittens) ∧ Affronted(tabitha) ::: Tabitha is affronted because her children are not fit to be seen.",
        "Conclusion:",
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ PuddleDuck(mrDrake) ::: Jemima Puddle-duck, Rebeccah, and Mr. Drake are all Puddle-ducks."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 364,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 3,
      "paragraph": "Tabitha sends her kittens upstairs, and tells her guests the kittens are in bed with the measles. However, \"the dignity and repose of the tea party\" is disturbed by the \"very extraordinary noises overhead\" as the playful kittens romp in a bedroom. An illustration depicts the bedroom in complete disorder and Tom in his mother's bonnet. The next illustration shows Tabitha entering the room. The author interrupts to promise the reader she will make a larger book about Tom some day. In the last pages, the Puddle-ducks have lost the kittens' clothing in a pond, and they have been looking for them ever since.",
      "question_template": "[[CANDIDATE_ANSWER]] is what Tom Kitten does to his mother.",
      "candidate_answers": [
        "Tabitha",
        "Her guests"
      ],
      "predicates": [
        "Sends(x, y) ::: x sends y.",
        "InBedWithMeasles(x) ::: x is in bed with the measles.",
        "Disturbs(x, y) ::: x disturbs y.",
        "Romp(x) ::: x romps around.",
        "InDisorder(x) ::: x is in complete disorder.",
        "Promises(x, y) ::: x promises y.",
        "LookingFor(x, y) ::: x is looking for y.",
        "Lost(x, y) ::: x has lost y."
      ],
      "premises": [
        "Sends(a_1, b_1) ::: Tabitha sends her kittens upstairs.",
        "InBedWithMeasles(b_1) ::: The kittens are in bed with the measles.",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the dignity and repose of the tea party.",
        "Romp(b_1) ::: The playful kittens romp in the bedroom.",
        "InDisorder(c_1) ::: The bedroom is in complete disorder.",
        "Promises(a_0, \"larger book about Tom\") ::: The author promises the reader she will make a larger book about Tom some day.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens.",
        "Lost(b_1, \"kittens' clothing\") ::: The Puddle-ducks have lost the kittens' clothing in a pond.",
        "Conclusion:",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the tea party.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "365": [
    {
      "id": 365,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 1,
      "paragraph": "Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party. She tells them to keep their frocks clean and keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks, and then returns to her work. Moppet and Mittens soon have their pinafores smeared with grass stains. They climb upon the garden wall and lose some of their clothing in the ascent. Tom has a more difficult time gaining the top of the wall \"breaking the ferns, and shedding buttons right and left\". He is disheveled when he reaches the top of the wall, and loses his hat, but his sisters try to pull him together. The rest of his buttons burst.",
      "question_template": "The illustration depicts Tom wearing [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "His hat",
        "His buttons"
      ],
      "predicates": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden.",
        "KeepsClean(b_1) ::: The kittens keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: The kittens keep away from the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: Tom's sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of Tom's buttons burst."
      ],
      "premises": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party.",
        "KeepsClean(b_1) ::: She tells them to keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: She tells them to keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens soon have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall and loses some of his clothing in the ascent.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: His sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of his buttons burst."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 365,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 2,
      "paragraph": "Three Puddle-ducks come marching along the road â \"pit pat paddle pat! pit pat waddle pat!\" Jemima Puddle-duck and Rebeccah put on some of the dropped clothing. The kittens lose the rest of their clothing descending the wall. Moppet invites Mr. Drake Puddle-duck to help dress Tom. He picks up various articles of Tom's clothing and \"he put[s] them on himself!\" The three ducks set off up the road just as Tabitha approaches and discovers her three children with no clothes on. She pulls them off the wall, \"smacks\" them, and takes them back to the house. \"My friends will arrive in a minute, and you are not fit to be seen; I am affronted!\" she says.",
      "question_template": "The illustration depicts Tom wearing [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The rest of their clothing"
      ],
      "predicates": [
        "PuddleDuck(x) ::: x is a Puddle-duck.",
        "Kittens(x) ::: x is a kitten.",
        "Dresses(x, y) ::: x dresses y.",
        "Clothing(x) ::: x is an article of clothing.",
        "Approaches(x, y) ::: x approaches y.",
        "Discovers(x, y) ::: x discovers y.",
        "Smacks(x, y) ::: x smacks y.",
        "TakesBack(x, y) ::: x takes y back.",
        "FitToBeSeen(x) ::: x is fit to be seen.",
        "Affronted(x) ::: x is affronted."
      ],
      "premises": [
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ Dresses(jemima, clothing) ∧ Dresses(rebeccah, clothing) ::: Jemima Puddle-duck and Rebeccah put on some of the dropped clothing.",
        "Kittens(kittens) ∧ ¬Clothing(kittens) ∧ Descends(kittens, wall) ::: The kittens lose the rest of their clothing descending the wall.",
        "Dresses(moppet, tom) ∧ PicksUp(mrDrake, clothing) ∧ Dresses(mrDrake, clothing) ::: Moppet invites Mr. Drake Puddle-duck to help dress Tom, and he picks up various articles of Tom's clothing and puts them on himself.",
        "Approaches(tabitha, kittens) ∧ Discovers(tabitha, kittens) ∧ Smacks(tabitha, kittens) ∧ TakesBack(tabitha, kittens) ::: Tabitha approaches and discovers her three children with no clothes on, smacks them, and takes them back to the house.",
        "¬FitToBeSeen(kittens) ∧ Affronted(tabitha) ::: Tabitha is affronted because her children are not fit to be seen.",
        "Conclusion:",
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ PuddleDuck(mrDrake) ::: Jemima Puddle-duck, Rebeccah, and Mr. Drake are all Puddle-ducks."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "366": [
    {
      "id": 366,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 1,
      "paragraph": "Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party. She tells them to keep their frocks clean and keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks, and then returns to her work. Moppet and Mittens soon have their pinafores smeared with grass stains. They climb upon the garden wall and lose some of their clothing in the ascent. Tom has a more difficult time gaining the top of the wall \"breaking the ferns, and shedding buttons right and left\". He is disheveled when he reaches the top of the wall, and loses his hat, but his sisters try to pull him together. The rest of his buttons burst.",
      "question_template": "[[CANDIDATE_ANSWER]] is coming to visit.",
      "candidate_answers": [
        "Moppet",
        "Mittens"
      ],
      "predicates": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden.",
        "KeepsClean(b_1) ::: The kittens keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: The kittens keep away from the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: Tom's sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of Tom's buttons burst."
      ],
      "premises": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party.",
        "KeepsClean(b_1) ::: She tells them to keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: She tells them to keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens soon have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall and loses some of his clothing in the ascent.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: His sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of his buttons burst."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 366,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 2,
      "paragraph": "Three Puddle-ducks come marching along the road â \"pit pat paddle pat! pit pat waddle pat!\" Jemima Puddle-duck and Rebeccah put on some of the dropped clothing. The kittens lose the rest of their clothing descending the wall. Moppet invites Mr. Drake Puddle-duck to help dress Tom. He picks up various articles of Tom's clothing and \"he put[s] them on himself!\" The three ducks set off up the road just as Tabitha approaches and discovers her three children with no clothes on. She pulls them off the wall, \"smacks\" them, and takes them back to the house. \"My friends will arrive in a minute, and you are not fit to be seen; I am affronted!\" she says.",
      "question_template": "[[CANDIDATE_ANSWER]] is coming to visit.",
      "candidate_answers": [
        "Jemima Puddle-duck",
        "Rebeccah",
        "Moppet"
      ],
      "predicates": [
        "PuddleDuck(x) ::: x is a Puddle-duck.",
        "Kittens(x) ::: x is a kitten.",
        "Dresses(x, y) ::: x dresses y.",
        "Clothing(x) ::: x is an article of clothing.",
        "Approaches(x, y) ::: x approaches y.",
        "Discovers(x, y) ::: x discovers y.",
        "Smacks(x, y) ::: x smacks y.",
        "TakesBack(x, y) ::: x takes y back.",
        "FitToBeSeen(x) ::: x is fit to be seen.",
        "Affronted(x) ::: x is affronted."
      ],
      "premises": [
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ Dresses(jemima, clothing) ∧ Dresses(rebeccah, clothing) ::: Jemima Puddle-duck and Rebeccah put on some of the dropped clothing.",
        "Kittens(kittens) ∧ ¬Clothing(kittens) ∧ Descends(kittens, wall) ::: The kittens lose the rest of their clothing descending the wall.",
        "Dresses(moppet, tom) ∧ PicksUp(mrDrake, clothing) ∧ Dresses(mrDrake, clothing) ::: Moppet invites Mr. Drake Puddle-duck to help dress Tom, and he picks up various articles of Tom's clothing and puts them on himself.",
        "Approaches(tabitha, kittens) ∧ Discovers(tabitha, kittens) ∧ Smacks(tabitha, kittens) ∧ TakesBack(tabitha, kittens) ::: Tabitha approaches and discovers her three children with no clothes on, smacks them, and takes them back to the house.",
        "¬FitToBeSeen(kittens) ∧ Affronted(tabitha) ::: Tabitha is affronted because her children are not fit to be seen.",
        "Conclusion:",
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ PuddleDuck(mrDrake) ::: Jemima Puddle-duck, Rebeccah, and Mr. Drake are all Puddle-ducks."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "367": [
    {
      "id": 367,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 1,
      "paragraph": "Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party. She tells them to keep their frocks clean and keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks, and then returns to her work. Moppet and Mittens soon have their pinafores smeared with grass stains. They climb upon the garden wall and lose some of their clothing in the ascent. Tom has a more difficult time gaining the top of the wall \"breaking the ferns, and shedding buttons right and left\". He is disheveled when he reaches the top of the wall, and loses his hat, but his sisters try to pull him together. The rest of his buttons burst.",
      "question_template": "[[CANDIDATE_ANSWER]] is what Tom's mother has to sew back on him.",
      "candidate_answers": [
        "Sally Henny Penny",
        "The Puddle-Ducks"
      ],
      "predicates": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden.",
        "KeepsClean(b_1) ::: The kittens keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: The kittens keep away from the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: Tom's sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of Tom's buttons burst."
      ],
      "premises": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party.",
        "KeepsClean(b_1) ::: She tells them to keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: She tells them to keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens soon have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall and loses some of his clothing in the ascent.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: His sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of his buttons burst."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 367,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 2,
      "paragraph": "Three Puddle-ducks come marching along the road â \"pit pat paddle pat! pit pat waddle pat!\" Jemima Puddle-duck and Rebeccah put on some of the dropped clothing. The kittens lose the rest of their clothing descending the wall. Moppet invites Mr. Drake Puddle-duck to help dress Tom. He picks up various articles of Tom's clothing and \"he put[s] them on himself!\" The three ducks set off up the road just as Tabitha approaches and discovers her three children with no clothes on. She pulls them off the wall, \"smacks\" them, and takes them back to the house. \"My friends will arrive in a minute, and you are not fit to be seen; I am affronted!\" she says.",
      "question_template": "[[CANDIDATE_ANSWER]] is what Tom's mother has to sew back on him.",
      "candidate_answers": [
        "Jemima Puddle-duck",
        "Rebeccah",
        "Mr. Drake Puddle-duck"
      ],
      "predicates": [
        "PuddleDuck(x) ::: x is a Puddle-duck.",
        "Kittens(x) ::: x is a kitten.",
        "Dresses(x, y) ::: x dresses y.",
        "Clothing(x) ::: x is an article of clothing.",
        "Approaches(x, y) ::: x approaches y.",
        "Discovers(x, y) ::: x discovers y.",
        "Smacks(x, y) ::: x smacks y.",
        "TakesBack(x, y) ::: x takes y back.",
        "FitToBeSeen(x) ::: x is fit to be seen.",
        "Affronted(x) ::: x is affronted."
      ],
      "premises": [
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ Dresses(jemima, clothing) ∧ Dresses(rebeccah, clothing) ::: Jemima Puddle-duck and Rebeccah put on some of the dropped clothing.",
        "Kittens(kittens) ∧ ¬Clothing(kittens) ∧ Descends(kittens, wall) ::: The kittens lose the rest of their clothing descending the wall.",
        "Dresses(moppet, tom) ∧ PicksUp(mrDrake, clothing) ∧ Dresses(mrDrake, clothing) ::: Moppet invites Mr. Drake Puddle-duck to help dress Tom, and he picks up various articles of Tom's clothing and puts them on himself.",
        "Approaches(tabitha, kittens) ∧ Discovers(tabitha, kittens) ∧ Smacks(tabitha, kittens) ∧ TakesBack(tabitha, kittens) ::: Tabitha approaches and discovers her three children with no clothes on, smacks them, and takes them back to the house.",
        "¬FitToBeSeen(kittens) ∧ Affronted(tabitha) ::: Tabitha is affronted because her children are not fit to be seen.",
        "Conclusion:",
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ PuddleDuck(mrDrake) ::: Jemima Puddle-duck, Rebeccah, and Mr. Drake are all Puddle-ducks."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 367,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 3,
      "paragraph": "Tabitha sends her kittens upstairs, and tells her guests the kittens are in bed with the measles. However, \"the dignity and repose of the tea party\" is disturbed by the \"very extraordinary noises overhead\" as the playful kittens romp in a bedroom. An illustration depicts the bedroom in complete disorder and Tom in his mother's bonnet. The next illustration shows Tabitha entering the room. The author interrupts to promise the reader she will make a larger book about Tom some day. In the last pages, the Puddle-ducks have lost the kittens' clothing in a pond, and they have been looking for them ever since.",
      "question_template": "[[CANDIDATE_ANSWER]] is what Tom's mother has to sew back on him.",
      "candidate_answers": [
        "Puddle-ducks"
      ],
      "predicates": [
        "Sends(x, y) ::: x sends y.",
        "InBedWithMeasles(x) ::: x is in bed with the measles.",
        "Disturbs(x, y) ::: x disturbs y.",
        "Romp(x) ::: x romps around.",
        "InDisorder(x) ::: x is in complete disorder.",
        "Promises(x, y) ::: x promises y.",
        "LookingFor(x, y) ::: x is looking for y.",
        "Lost(x, y) ::: x has lost y."
      ],
      "premises": [
        "Sends(a_1, b_1) ::: Tabitha sends her kittens upstairs.",
        "InBedWithMeasles(b_1) ::: The kittens are in bed with the measles.",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the dignity and repose of the tea party.",
        "Romp(b_1) ::: The playful kittens romp in the bedroom.",
        "InDisorder(c_1) ::: The bedroom is in complete disorder.",
        "Promises(a_0, \"larger book about Tom\") ::: The author promises the reader she will make a larger book about Tom some day.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens.",
        "Lost(b_1, \"kittens' clothing\") ::: The Puddle-ducks have lost the kittens' clothing in a pond.",
        "Conclusion:",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the tea party.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "369": [
    {
      "id": 369,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 0,
      "paragraph": " The tale begins with three feline siblings â Mittens, Tom Kitten, and Moppet â tumbling about the doorstep and playing in the dust. Their mother, Mrs. Tabitha Twitchit, expects \"fine company\" for tea so she fetches the children indoors to wash and dress them before her friends arrive. Tom is \"very naughty\" and scratches his mother while she grooms him. Tabitha dresses Moppet and Mittens in clean pinafores and tuckers, and Tom in \"all sorts of elegant uncomfortable clothes\" taken from a chest of drawers. Tom is fat and bursts several buttons, but his mother sews them back on again.",
      "question_template": "The ducks that his mother wants him to stay away from are called [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Tom loses several buttons"
      ],
      "predicates": [
        "Expecting(x) ::: x expects fine company for tea.",
        "Fetches(x, y) ::: x fetches y indoors.",
        "Washes(x) ::: x is washed.",
        "Dresses(x, y) ::: x dresses y in clothing.",
        "Naughty(x) ::: x is very naughty.",
        "Scratches(x, y) ::: x scratches y.",
        "DressesIn(x, y) ::: x is dressed in y.",
        "Fat(x) ::: x is fat.",
        "BurstsButtons(x) ::: x bursts several buttons.",
        "SewsBackOn(x, y) ::: x sews y back on."
      ],
      "premises": [
        "Expecting(a_1) ::: Tabitha expects \"fine company\" for tea.",
        "Fetches(a_1, a_0) ::: Tabitha fetches the children indoors.",
        "Washes(a_0) ::: The children are washed.",
        "Dresses(a_1, a_0) ::: Tabitha dresses the children before her friends arrive.",
        "Naughty(a_2) ::: Tom is \"very naughty.\"",
        "Scratches(a_2, a_1) ::: Tom scratches his mother while she grooms him.",
        "DressesIn(a_1, cleanPinafores) ∧ DressesIn(a_1, tuckers) ∧ DressesIn(a_1, elegantUncomfortableClothes) ::: Tabitha dresses Moppet and Mittens in clean pinafores and tuckers, and Tom in \"all sorts of elegant uncomfortable clothes.\"",
        "Fat(a_2) ::: Tom is fat.",
        "BurstsButtons(a_2) ::: Tom bursts several buttons.",
        "SewsBackOn(a_1, buttons) ::: Tabitha sews the buttons back on again."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 369,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 1,
      "paragraph": "Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party. She tells them to keep their frocks clean and keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks, and then returns to her work. Moppet and Mittens soon have their pinafores smeared with grass stains. They climb upon the garden wall and lose some of their clothing in the ascent. Tom has a more difficult time gaining the top of the wall \"breaking the ferns, and shedding buttons right and left\". He is disheveled when he reaches the top of the wall, and loses his hat, but his sisters try to pull him together. The rest of his buttons burst.",
      "question_template": "The ducks that his mother wants him to stay away from are called [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "His hat",
        "Some of their clothing",
        "His buttons"
      ],
      "predicates": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden.",
        "KeepsClean(b_1) ::: The kittens keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: The kittens keep away from the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: Tom's sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of Tom's buttons burst."
      ],
      "premises": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party.",
        "KeepsClean(b_1) ::: She tells them to keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: She tells them to keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens soon have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall and loses some of his clothing in the ascent.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: His sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of his buttons burst."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 369,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 2,
      "paragraph": "Three Puddle-ducks come marching along the road â \"pit pat paddle pat! pit pat waddle pat!\" Jemima Puddle-duck and Rebeccah put on some of the dropped clothing. The kittens lose the rest of their clothing descending the wall. Moppet invites Mr. Drake Puddle-duck to help dress Tom. He picks up various articles of Tom's clothing and \"he put[s] them on himself!\" The three ducks set off up the road just as Tabitha approaches and discovers her three children with no clothes on. She pulls them off the wall, \"smacks\" them, and takes them back to the house. \"My friends will arrive in a minute, and you are not fit to be seen; I am affronted!\" she says.",
      "question_template": "The ducks that his mother wants him to stay away from are called [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The rest of their clothing"
      ],
      "predicates": [
        "PuddleDuck(x) ::: x is a Puddle-duck.",
        "Kittens(x) ::: x is a kitten.",
        "Dresses(x, y) ::: x dresses y.",
        "Clothing(x) ::: x is an article of clothing.",
        "Approaches(x, y) ::: x approaches y.",
        "Discovers(x, y) ::: x discovers y.",
        "Smacks(x, y) ::: x smacks y.",
        "TakesBack(x, y) ::: x takes y back.",
        "FitToBeSeen(x) ::: x is fit to be seen.",
        "Affronted(x) ::: x is affronted."
      ],
      "premises": [
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ Dresses(jemima, clothing) ∧ Dresses(rebeccah, clothing) ::: Jemima Puddle-duck and Rebeccah put on some of the dropped clothing.",
        "Kittens(kittens) ∧ ¬Clothing(kittens) ∧ Descends(kittens, wall) ::: The kittens lose the rest of their clothing descending the wall.",
        "Dresses(moppet, tom) ∧ PicksUp(mrDrake, clothing) ∧ Dresses(mrDrake, clothing) ::: Moppet invites Mr. Drake Puddle-duck to help dress Tom, and he picks up various articles of Tom's clothing and puts them on himself.",
        "Approaches(tabitha, kittens) ∧ Discovers(tabitha, kittens) ∧ Smacks(tabitha, kittens) ∧ TakesBack(tabitha, kittens) ::: Tabitha approaches and discovers her three children with no clothes on, smacks them, and takes them back to the house.",
        "¬FitToBeSeen(kittens) ∧ Affronted(tabitha) ::: Tabitha is affronted because her children are not fit to be seen.",
        "Conclusion:",
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ PuddleDuck(mrDrake) ::: Jemima Puddle-duck, Rebeccah, and Mr. Drake are all Puddle-ducks."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "370": [
    {
      "id": 370,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 0,
      "paragraph": " The tale begins with three feline siblings â Mittens, Tom Kitten, and Moppet â tumbling about the doorstep and playing in the dust. Their mother, Mrs. Tabitha Twitchit, expects \"fine company\" for tea so she fetches the children indoors to wash and dress them before her friends arrive. Tom is \"very naughty\" and scratches his mother while she grooms him. Tabitha dresses Moppet and Mittens in clean pinafores and tuckers, and Tom in \"all sorts of elegant uncomfortable clothes\" taken from a chest of drawers. Tom is fat and bursts several buttons, but his mother sews them back on again.",
      "question_template": "When their mother sees them on the wall, she does [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Mrs. Tabitha Twitchit",
        "Tabitha dresses Moppet and Mittens in clean pinafores and tuckers, and Tom in \"all sorts of elegant uncomfortable clothes\""
      ],
      "predicates": [
        "Expecting(x) ::: x expects fine company for tea.",
        "Fetches(x, y) ::: x fetches y indoors.",
        "Washes(x) ::: x is washed.",
        "Dresses(x, y) ::: x dresses y in clothing.",
        "Naughty(x) ::: x is very naughty.",
        "Scratches(x, y) ::: x scratches y.",
        "DressesIn(x, y) ::: x is dressed in y.",
        "Fat(x) ::: x is fat.",
        "BurstsButtons(x) ::: x bursts several buttons.",
        "SewsBackOn(x, y) ::: x sews y back on."
      ],
      "premises": [
        "Expecting(a_1) ::: Tabitha expects \"fine company\" for tea.",
        "Fetches(a_1, a_0) ::: Tabitha fetches the children indoors.",
        "Washes(a_0) ::: The children are washed.",
        "Dresses(a_1, a_0) ::: Tabitha dresses the children before her friends arrive.",
        "Naughty(a_2) ::: Tom is \"very naughty.\"",
        "Scratches(a_2, a_1) ::: Tom scratches his mother while she grooms him.",
        "DressesIn(a_1, cleanPinafores) ∧ DressesIn(a_1, tuckers) ∧ DressesIn(a_1, elegantUncomfortableClothes) ::: Tabitha dresses Moppet and Mittens in clean pinafores and tuckers, and Tom in \"all sorts of elegant uncomfortable clothes.\"",
        "Fat(a_2) ::: Tom is fat.",
        "BurstsButtons(a_2) ::: Tom bursts several buttons.",
        "SewsBackOn(a_1, buttons) ::: Tabitha sews the buttons back on again."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 370,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 1,
      "paragraph": "Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party. She tells them to keep their frocks clean and keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks, and then returns to her work. Moppet and Mittens soon have their pinafores smeared with grass stains. They climb upon the garden wall and lose some of their clothing in the ascent. Tom has a more difficult time gaining the top of the wall \"breaking the ferns, and shedding buttons right and left\". He is disheveled when he reaches the top of the wall, and loses his hat, but his sisters try to pull him together. The rest of his buttons burst.",
      "question_template": "When their mother sees them on the wall, she does [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "His sisters"
      ],
      "predicates": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden.",
        "KeepsClean(b_1) ::: The kittens keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: The kittens keep away from the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: Tom's sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of Tom's buttons burst."
      ],
      "premises": [
        "Turns(a_1, b_1, c_0) ::: Tabitha turns her kittens into the garden to keep them out of the way while she makes hot buttered toast for the party.",
        "KeepsClean(b_1) ::: She tells them to keep their frocks clean.",
        "KeepsAway(b_1, b_2) ::: She tells them to keep away from the pigsty, the dirty ash pit, Sally Henny Penny, and the Puddle-Ducks.",
        "Smeared(b_1, grass stains) ::: Moppet and Mittens soon have their pinafores smeared with grass stains.",
        "Climbs(b_2, c_0) ::: Tom climbs upon the garden wall and loses some of his clothing in the ascent.",
        "Disheveled(b_2) ::: Tom is disheveled when he reaches the top of the wall.",
        "Loses(b_2, hat) ::: Tom loses his hat.",
        "PullsTogether(b_1, b_2) ::: His sisters try to pull him together.",
        "Burst(b_2, buttons) ::: The rest of his buttons burst."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 370,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 2,
      "paragraph": "Three Puddle-ducks come marching along the road â \"pit pat paddle pat! pit pat waddle pat!\" Jemima Puddle-duck and Rebeccah put on some of the dropped clothing. The kittens lose the rest of their clothing descending the wall. Moppet invites Mr. Drake Puddle-duck to help dress Tom. He picks up various articles of Tom's clothing and \"he put[s] them on himself!\" The three ducks set off up the road just as Tabitha approaches and discovers her three children with no clothes on. She pulls them off the wall, \"smacks\" them, and takes them back to the house. \"My friends will arrive in a minute, and you are not fit to be seen; I am affronted!\" she says.",
      "question_template": "When their mother sees them on the wall, she does [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Moppet invites Mr. Drake Puddle-duck to help dress Tom.",
        "He picks up various articles of Tom's clothing and \"he put[s] them on himself!\""
      ],
      "predicates": [
        "PuddleDuck(x) ::: x is a Puddle-duck.",
        "Kittens(x) ::: x is a kitten.",
        "Dresses(x, y) ::: x dresses y.",
        "Clothing(x) ::: x is an article of clothing.",
        "Approaches(x, y) ::: x approaches y.",
        "Discovers(x, y) ::: x discovers y.",
        "Smacks(x, y) ::: x smacks y.",
        "TakesBack(x, y) ::: x takes y back.",
        "FitToBeSeen(x) ::: x is fit to be seen.",
        "Affronted(x) ::: x is affronted."
      ],
      "premises": [
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ Dresses(jemima, clothing) ∧ Dresses(rebeccah, clothing) ::: Jemima Puddle-duck and Rebeccah put on some of the dropped clothing.",
        "Kittens(kittens) ∧ ¬Clothing(kittens) ∧ Descends(kittens, wall) ::: The kittens lose the rest of their clothing descending the wall.",
        "Dresses(moppet, tom) ∧ PicksUp(mrDrake, clothing) ∧ Dresses(mrDrake, clothing) ::: Moppet invites Mr. Drake Puddle-duck to help dress Tom, and he picks up various articles of Tom's clothing and puts them on himself.",
        "Approaches(tabitha, kittens) ∧ Discovers(tabitha, kittens) ∧ Smacks(tabitha, kittens) ∧ TakesBack(tabitha, kittens) ::: Tabitha approaches and discovers her three children with no clothes on, smacks them, and takes them back to the house.",
        "¬FitToBeSeen(kittens) ∧ Affronted(tabitha) ::: Tabitha is affronted because her children are not fit to be seen.",
        "Conclusion:",
        "PuddleDuck(jemima) ∧ PuddleDuck(rebeccah) ∧ PuddleDuck(mrDrake) ::: Jemima Puddle-duck, Rebeccah, and Mr. Drake are all Puddle-ducks."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 370,
      "context_id": "2c5f448df18172babaac38806e1fb699a8baf65b",
      "paragraph_id": 3,
      "paragraph": "Tabitha sends her kittens upstairs, and tells her guests the kittens are in bed with the measles. However, \"the dignity and repose of the tea party\" is disturbed by the \"very extraordinary noises overhead\" as the playful kittens romp in a bedroom. An illustration depicts the bedroom in complete disorder and Tom in his mother's bonnet. The next illustration shows Tabitha entering the room. The author interrupts to promise the reader she will make a larger book about Tom some day. In the last pages, the Puddle-ducks have lost the kittens' clothing in a pond, and they have been looking for them ever since.",
      "question_template": "When their mother sees them on the wall, she does [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Tabitha",
        "The Puddle-ducks"
      ],
      "predicates": [
        "Sends(x, y) ::: x sends y.",
        "InBedWithMeasles(x) ::: x is in bed with the measles.",
        "Disturbs(x, y) ::: x disturbs y.",
        "Romp(x) ::: x romps around.",
        "InDisorder(x) ::: x is in complete disorder.",
        "Promises(x, y) ::: x promises y.",
        "LookingFor(x, y) ::: x is looking for y.",
        "Lost(x, y) ::: x has lost y."
      ],
      "premises": [
        "Sends(a_1, b_1) ::: Tabitha sends her kittens upstairs.",
        "InBedWithMeasles(b_1) ::: The kittens are in bed with the measles.",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the dignity and repose of the tea party.",
        "Romp(b_1) ::: The playful kittens romp in the bedroom.",
        "InDisorder(c_1) ::: The bedroom is in complete disorder.",
        "Promises(a_0, \"larger book about Tom\") ::: The author promises the reader she will make a larger book about Tom some day.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens.",
        "Lost(b_1, \"kittens' clothing\") ::: The Puddle-ducks have lost the kittens' clothing in a pond.",
        "Conclusion:",
        "Disturbs(d_2, d_1) ::: The extraordinary noises disturb the tea party.",
        "LookingFor(b_2, b_1) ::: The Puddle-ducks are looking for the kittens."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "371": [
    {
      "id": 371,
      "context_id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 2,
      "paragraph": "As he goes in, there is already another surfer in the wave, leaving Utah with an unstable wave. Utah gets sucked into the wave and faints, but the other surfer bails and rescues Utah. He wakes aboard a yacht with the surfer, Bodhi (Ădgar RamĂ­rez), and his team Roach (Clemens Schick), Chowder (Tobias Santelmann), and Grommet (Matias Varela). They leave him to enjoy the party and he gets acquainted with a girl, Samsara (Teresa Palmer). The next day, Utah finds the men in an abandoned Paris train station after he overhears them talk about the location. Bodhi gives him an initiation fight and soon he is accepted in the circle. They travel to the Alps for the next ordeal, wingsuit flying through the cliffs \"The Life of Wind\". The four succeed in their attempt and spend some time together with Samsara. The next day, they climb the snow peaks for the sixth ordeal, snowboarding through a steep wall of snow. They reach their spot, but Utah decides to extend his line so the others follow him. Chowder slips and falls to his death, and Utah becomes depressed about it.",
      "question_template": "Tom loses [[CANDIDATE_ANSWER]] going up the wall.",
      "candidate_answers": [
        "- Aboard a yacht with the surfer, Bodhi",
        "- In an abandoned Paris train station",
        "- To the Alps for the next ordeal"
      ],
      "predicates": [
        "Surfer(x) ::: x is a surfer.",
        "Faints(x) ::: x faints.",
        "Rescues(x, y) ::: x rescues y.",
        "WakesUp(x, y) ::: x wakes up with y.",
        "AcquaintedWith(x, y) ::: x gets acquainted with y.",
        "InitiationFight(x, y) ::: x gives y an initiation fight.",
        "AcceptedInCircle(x, y) ::: x is accepted in y's circle.",
        "TravelTo(x, y) ::: x travels to y.",
        "SucceedInAttempt(x) ::: x succeeds in their attempt.",
        "Climbs(x, y) ::: x climbs y.",
        "ExtendsLine(x) ::: x extends his line.",
        "FallsToDeath(x) ::: x falls to his death.",
        "ExperiencesDepression(x) ::: x experiences depression."
      ],
      "premises": [
        "Rescues(a_2, a_1) ::: The other surfer rescues Utah.",
        "WakesUp(a_1, a_2) ::: Utah wakes up aboard a yacht with Bodhi.",
        "AcquaintedWith(a_1, a_4) ::: Utah gets acquainted with Samsara.",
        "InitiationFight(a_2, a_1) ::: Bodhi gives Utah an initiation fight.",
        "AcceptedInCircle(a_1, a_2) ::: Utah is accepted into Bodhi's circle after the initiation fight.",
        "TravelTo(a_1, b_0) ::: They travel to the Alps for the next ordeal.",
        "SucceedInAttempt(a_1) ::: The four succeed in their attempt.",
        "Climbs(a_1, c_0) ::: They climb the snow peaks for the sixth ordeal.",
        "ExtendsLine(a_1) ::: Utah decides to extend his line.",
        "FallsToDeath(a_3) ::: Chowder slips and falls to his death.",
        "ExperiencesDepression(a_1) ::: Utah experiences depression after Chowder's death."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "374": [
    {
      "id": 374,
      "context_id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 0,
      "paragraph": " Extreme sport athlete Johnny Utah (Luke Bracey), and his friend Jeff (Max Thieriot), are traversing a steep ridgeline on motorbikes. The run ends with a jump onto a lone stone column, where Jeff overshoots the landing and falls to his death.",
      "question_template": "Utah's undercover name while in France is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Jeff overshoots the landing and falls to his death."
      ],
      "predicates": [
        "ExtremeSportAthlete(x) ::: x is an extreme sport athlete.",
        "Traversing(x, y) ::: x is traversing location y.",
        "Jump(x, y) ::: x jumps onto y.",
        "Overshoot(x, y) ::: x overshoots the landing on y.",
        "FallsToDeath(x) ::: x falls to his death."
      ],
      "premises": [
        "ExtremeSportAthlete(Johnny) ∧ ExtremeSportAthlete(Jeff) ::: Johnny Utah and Jeff are extreme sport athletes.",
        "Traversing(Johnny, ridgeline) ∧ Traversing(Jeff, ridgeline) ::: Johnny and Jeff are traversing a steep ridgeline on motorbikes.",
        "Jump(Jeff, stoneColumn) ∧ Overshoot(Jeff, stoneColumn) ::: Jeff jumps onto a lone stone column and overshoots the landing.",
        "FallsToDeath(Jeff) ::: Jeff falls to his death.",
        "Conclusion:",
        "FallsToDeath(Jeff) ::: Jeff falls to his death after overshooting the landing."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 374,
      "context_id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 4,
      "paragraph": "Next they travel to a gold mine where Bodhi detonates explosives Grommet and Roach planted. After blowing his cover, Utah chases Bodhi, managing to trip his bike. Bodhi escapes as Utah cannot stand up after the crash. The FBI freezes Bodhi's sponsors' assets; Bodhi plans to rob a nearby Italian bank on a mountain top. Utah and the police intercept the group, resulting in a crossfire that kills Roach. As the group flees, Utah chases and shoots one of them, revealed to be Samsara.",
      "question_template": "Utah's undercover name while in France is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "No relevant information found in the paragraph."
      ],
      "predicates": [
        "Detonates(x, y) ::: x detonates explosives y.",
        "Chases(x, y) ::: x chases y.",
        "Tripped(x, y) ::: x trips y.",
        "Escapes(x) ::: x escapes.",
        "FreezesAssets(x, y) ::: x freezes the assets of y.",
        "PlansToRob(x, y) ::: x plans to rob y.",
        "Intercepts(x, y) ::: x intercepts y.",
        "ResultsIn(x, y) ::: x results in y.",
        "Shoots(x, y) ::: x shoots y.",
        "RevealedAs(x, y) ::: x is revealed to be y."
      ],
      "premises": [
        "Detonates(bodhi, explosives) ::: Bodhi detonates explosives.",
        "Chases(utah, bodhi) ::: Utah chases Bodhi.",
        "Tripped(utah, bike) ::: Utah trips Bodhi's bike.",
        "Escapes(bodhi) ::: Bodhi escapes.",
        "FreezesAssets(fbi, bodhi's sponsors) ::: The FBI freezes Bodhi's sponsors' assets.",
        "PlansToRob(bodhi, italian bank) ::: Bodhi plans to rob a nearby Italian bank.",
        "Intercepts(utah, group) ::: Utah and the police intercept the group.",
        "ResultsIn(crossfire, kills(roaches)) ::: The crossfire results in the death of Roach.",
        "Chases(utah, group) ::: Utah chases the group.",
        "Shoots(utah, one of them) ::: Utah shoots one of the group members.",
        "RevealedAs(one of them, samsara) ::: One of the group members is revealed to be Samsara.",
        "Conclusion:",
        "PlansToRob(bodhi, italian bank) → FreezesAssets(fbi, bodhi's sponsors) ::: Bodhi's plan to rob the bank is linked to the actions of the FBI freezing his sponsors' assets."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 374,
      "context_id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 5,
      "paragraph": "Utah finds the location of the next ordeal: solo rock climbing with no safety beside a waterfall Angel Falls in Venezuela. He finds Bodhi and Grommet and chases them on the climb, but Grommet cramps and falters, falling to his death. Utah catches up to Bodhi, but he leaps down the waterfall, completing what would have been the last ordeal; Bodhi has to redo the fourth ordeal as he bailed out on the wave when he had to save Johnny. Seventeen months later, Utah finds him in the Pacific facing another giant wave. As Utah tries to get Bodhi to come back with him, and pay for his crimes, he eventually lets Bodhi attempt to surf it, both knowing that he will not come back. The wave engulfs Bodhi and Utah continues his career in the FBI, and starts to go through his own eight ordeals.",
      "question_template": "Utah's undercover name while in France is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "No relevant information found in the paragraph."
      ],
      "predicates": [
        "Location(x) ::: x is a location.",
        "ClimbingEvent(x) ::: x is an event of solo rock climbing.",
        "WaterfallLeap(x) ::: x is an event of leaping down a waterfall.",
        "GiantWave(x) ::: x is an event of facing a giant wave.",
        "Career(x) ::: x is a career.",
        "FBI(x) ::: x is part of the FBI.",
        "AttemptSurf(x, y) ::: x attempts to surf y.",
        "CatchesUp(x, y) ::: x catches up to y.",
        "FallsToDeath(x) ::: x falls to his death.",
        "RedoOrdeal(x) ::: x has to redo an ordeal.",
        "CompletesOrdeal(x) ::: x completes an ordeal.",
        "Knows(x, y) ::: x knows y.",
        "Chases(x, y) ::: x chases y.",
        "Engulfs(x, y) ::: x engulfs y."
      ],
      "premises": [
        "Location(AngelFalls) ∧ Location(Venezuela) ::: Angel Falls is a location in Venezuela.",
        "ClimbingEvent(soloRockClimbing) ::: Solo rock climbing is an event.",
        "WaterfallLeap(waterfallLeap) ::: Leaping down the waterfall is an event.",
        "GiantWave(giantWave) ::: Facing a giant wave is an event.",
        "Career(utah) ∧ FBI(utah) ::: Utah continues his career in the FBI.",
        "CatchesUp(utah, bodhi) ::: Utah catches up to Bodhi.",
        "FallsToDeath(grommet) ::: Grommet falls to his death.",
        "Chases(utah, grommet) ::: Utah chases Grommet on the climb.",
        "CompletesOrdeal(bodhi) ::: Bodhi completes what would have been the last ordeal.",
        "RedoOrdeal(bodhi) ::: Bodhi has to redo the fourth ordeal.",
        "Knows(utah, bodhi) ::: Utah knows that Bodhi will not come back after attempting to surf the wave.",
        "AttemptSurf(bodhi, giantWave) ::: Bodhi attempts to surf the giant wave.",
        "Engulfs(giantWave, bodhi) ::: The giant wave engulfs Bodhi.",
        "Conclusion:",
        "¬Returns(bodhi) ::: Bodhi does not return after attempting to surf the wave."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "375": [
    {
      "id": 375,
      "context_id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 1,
      "paragraph": "Seven years later, Utah is an FBI agent candidate. He attends a briefing on a skyscraper heist, in which the criminals steal diamonds, escaping by parachute, in Mumbai. A similar heist happens over Mexico where the criminals unload millions of dollars in bills over Mexico, then disappear into the Cave of Swallows. Utah's research concludes that they were done by the same men, who are attempting to complete the Ozaki 8, a list of eight extreme ordeals to honor the forces of nature. They have already completed three, and Utah predicts they'll attempt the fourth on a rare sea wave phenomenon in France. After presenting his analysis, Utah is sent undercover to France under a field agent named Pappas (Ray Winstone). They reach France and Utah gets help from others to surf the tall tube wave.",
      "question_template": "Utah shoots at the [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Seven years later",
        "Utah is an FBI agent candidate"
      ],
      "predicates": [
        "FBI_Agent_Candidate(x) ::: x is an FBI agent candidate.",
        "Attends(x, y) ::: x attends event y.",
        "Heist(x) ::: x is a heist.",
        "Steal(x, y) ::: x steals y.",
        "EscapeByParachute(x) ::: x escapes by parachute.",
        "Unload(x, y) ::: x unloads y.",
        "Disappear(x, y) ::: x disappears into location y.",
        "Research(x, y) ::: x conducts research on y.",
        "Complete(x, y) ::: x completes ordeal y.",
        "Attempt(x, y) ::: x attempts ordeal y.",
        "Help(x, y) ::: x gets help from y.",
        "Surf(x, y) ::: x surfs wave y.",
        "FieldAgent(x, y) ::: x is a field agent for y."
      ],
      "premises": [
        "FBI_Agent_Candidate(utah) ::: Utah is an FBI agent candidate.",
        "Attends(utah, briefing) ::: Utah attends a briefing on a skyscraper heist.",
        "Heist(skyscraper_heist) ::: The event is a heist involving a skyscraper.",
        "Steal(criminals, diamonds) ::: The criminals steal diamonds.",
        "EscapeByParachute(criminals) ::: The criminals escape by parachute.",
        "Heist(mexico_heist) ::: A similar heist happens over Mexico.",
        "Unload(criminals, millions_of_dollars) ::: The criminals unload millions of dollars in bills.",
        "Disappear(criminals, cave_of_swallows) ::: The criminals disappear into the Cave of Swallows.",
        "Research(utah, heists) ::: Utah's research concludes that the heists were done by the same men.",
        "Complete(criminals, eight_ordeals) ::: The criminals are attempting to complete the Ozaki 8.",
        "Attempt(criminals, fourth_ordeal) ::: They will attempt the fourth ordeal.",
        "RareSeaWavePhenomenon(france) ::: The fourth ordeal is on a rare sea wave phenomenon in France.",
        "FieldAgent(pappas, fbi) ::: Pappas is a field agent for the FBI.",
        "Help(utah, others) ::: Utah gets help from others.",
        "Surf(utah, tall_tube_wave) ::: Utah surfs the tall tube wave.",
        "Conclusion:",
        "Attempt(criminals, eight_ordeals) ::: The criminals are attempting to complete the Ozaki 8 by performing extreme ordeals."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 375,
      "context_id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 2,
      "paragraph": "As he goes in, there is already another surfer in the wave, leaving Utah with an unstable wave. Utah gets sucked into the wave and faints, but the other surfer bails and rescues Utah. He wakes aboard a yacht with the surfer, Bodhi (Ădgar RamĂ­rez), and his team Roach (Clemens Schick), Chowder (Tobias Santelmann), and Grommet (Matias Varela). They leave him to enjoy the party and he gets acquainted with a girl, Samsara (Teresa Palmer). The next day, Utah finds the men in an abandoned Paris train station after he overhears them talk about the location. Bodhi gives him an initiation fight and soon he is accepted in the circle. They travel to the Alps for the next ordeal, wingsuit flying through the cliffs \"The Life of Wind\". The four succeed in their attempt and spend some time together with Samsara. The next day, they climb the snow peaks for the sixth ordeal, snowboarding through a steep wall of snow. They reach their spot, but Utah decides to extend his line so the others follow him. Chowder slips and falls to his death, and Utah becomes depressed about it.",
      "question_template": "Utah shoots at the [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "There is no relevant information in the paragraph regarding the time frame after Jeff's death before we see Utah again."
      ],
      "predicates": [
        "Surfer(x) ::: x is a surfer.",
        "Faints(x) ::: x faints.",
        "Rescues(x, y) ::: x rescues y.",
        "WakesUp(x, y) ::: x wakes up with y.",
        "AcquaintedWith(x, y) ::: x gets acquainted with y.",
        "InitiationFight(x, y) ::: x gives y an initiation fight.",
        "AcceptedInCircle(x, y) ::: x is accepted in y's circle.",
        "TravelTo(x, y) ::: x travels to y.",
        "SucceedInAttempt(x) ::: x succeeds in their attempt.",
        "Climbs(x, y) ::: x climbs y.",
        "ExtendsLine(x) ::: x extends his line.",
        "FallsToDeath(x) ::: x falls to his death.",
        "ExperiencesDepression(x) ::: x experiences depression."
      ],
      "premises": [
        "Rescues(a_2, a_1) ::: The other surfer rescues Utah.",
        "WakesUp(a_1, a_2) ::: Utah wakes up aboard a yacht with Bodhi.",
        "AcquaintedWith(a_1, a_4) ::: Utah gets acquainted with Samsara.",
        "InitiationFight(a_2, a_1) ::: Bodhi gives Utah an initiation fight.",
        "AcceptedInCircle(a_1, a_2) ::: Utah is accepted into Bodhi's circle after the initiation fight.",
        "TravelTo(a_1, b_0) ::: They travel to the Alps for the next ordeal.",
        "SucceedInAttempt(a_1) ::: The four succeed in their attempt.",
        "Climbs(a_1, c_0) ::: They climb the snow peaks for the sixth ordeal.",
        "ExtendsLine(a_1) ::: Utah decides to extend his line.",
        "FallsToDeath(a_3) ::: Chowder slips and falls to his death.",
        "ExperiencesDepression(a_1) ::: Utah experiences depression after Chowder's death."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "377": [
    {
      "id": 377,
      "context_id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 1,
      "paragraph": "Seven years later, Utah is an FBI agent candidate. He attends a briefing on a skyscraper heist, in which the criminals steal diamonds, escaping by parachute, in Mumbai. A similar heist happens over Mexico where the criminals unload millions of dollars in bills over Mexico, then disappear into the Cave of Swallows. Utah's research concludes that they were done by the same men, who are attempting to complete the Ozaki 8, a list of eight extreme ordeals to honor the forces of nature. They have already completed three, and Utah predicts they'll attempt the fourth on a rare sea wave phenomenon in France. After presenting his analysis, Utah is sent undercover to France under a field agent named Pappas (Ray Winstone). They reach France and Utah gets help from others to surf the tall tube wave.",
      "question_template": "It has been [[CANDIDATE_ANSWER]] after Jeff's death before we see Utah again.",
      "candidate_answers": [
        "- Utah is sent undercover to France under a field agent named Pappas .",
        "- They reach France and Utah gets help from others to surf the tall tube wave."
      ],
      "predicates": [
        "FBI_Agent_Candidate(x) ::: x is an FBI agent candidate.",
        "Attends(x, y) ::: x attends event y.",
        "Heist(x) ::: x is a heist.",
        "Steal(x, y) ::: x steals y.",
        "EscapeByParachute(x) ::: x escapes by parachute.",
        "Unload(x, y) ::: x unloads y.",
        "Disappear(x, y) ::: x disappears into location y.",
        "Research(x, y) ::: x conducts research on y.",
        "Complete(x, y) ::: x completes ordeal y.",
        "Attempt(x, y) ::: x attempts ordeal y.",
        "Help(x, y) ::: x gets help from y.",
        "Surf(x, y) ::: x surfs wave y.",
        "FieldAgent(x, y) ::: x is a field agent for y."
      ],
      "premises": [
        "FBI_Agent_Candidate(utah) ::: Utah is an FBI agent candidate.",
        "Attends(utah, briefing) ::: Utah attends a briefing on a skyscraper heist.",
        "Heist(skyscraper_heist) ::: The event is a heist involving a skyscraper.",
        "Steal(criminals, diamonds) ::: The criminals steal diamonds.",
        "EscapeByParachute(criminals) ::: The criminals escape by parachute.",
        "Heist(mexico_heist) ::: A similar heist happens over Mexico.",
        "Unload(criminals, millions_of_dollars) ::: The criminals unload millions of dollars in bills.",
        "Disappear(criminals, cave_of_swallows) ::: The criminals disappear into the Cave of Swallows.",
        "Research(utah, heists) ::: Utah's research concludes that the heists were done by the same men.",
        "Complete(criminals, eight_ordeals) ::: The criminals are attempting to complete the Ozaki 8.",
        "Attempt(criminals, fourth_ordeal) ::: They will attempt the fourth ordeal.",
        "RareSeaWavePhenomenon(france) ::: The fourth ordeal is on a rare sea wave phenomenon in France.",
        "FieldAgent(pappas, fbi) ::: Pappas is a field agent for the FBI.",
        "Help(utah, others) ::: Utah gets help from others.",
        "Surf(utah, tall_tube_wave) ::: Utah surfs the tall tube wave.",
        "Conclusion:",
        "Attempt(criminals, eight_ordeals) ::: The criminals are attempting to complete the Ozaki 8 by performing extreme ordeals."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 377,
      "context_id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 4,
      "paragraph": "Next they travel to a gold mine where Bodhi detonates explosives Grommet and Roach planted. After blowing his cover, Utah chases Bodhi, managing to trip his bike. Bodhi escapes as Utah cannot stand up after the crash. The FBI freezes Bodhi's sponsors' assets; Bodhi plans to rob a nearby Italian bank on a mountain top. Utah and the police intercept the group, resulting in a crossfire that kills Roach. As the group flees, Utah chases and shoots one of them, revealed to be Samsara.",
      "question_template": "It has been [[CANDIDATE_ANSWER]] after Jeff's death before we see Utah again.",
      "candidate_answers": [
        "The paragraph does not provide information on how Utah meets Bodhi."
      ],
      "predicates": [
        "Detonates(x, y) ::: x detonates explosives y.",
        "Chases(x, y) ::: x chases y.",
        "Tripped(x, y) ::: x trips y.",
        "Escapes(x) ::: x escapes.",
        "FreezesAssets(x, y) ::: x freezes the assets of y.",
        "PlansToRob(x, y) ::: x plans to rob y.",
        "Intercepts(x, y) ::: x intercepts y.",
        "ResultsIn(x, y) ::: x results in y.",
        "Shoots(x, y) ::: x shoots y.",
        "RevealedAs(x, y) ::: x is revealed to be y."
      ],
      "premises": [
        "Detonates(bodhi, explosives) ::: Bodhi detonates explosives.",
        "Chases(utah, bodhi) ::: Utah chases Bodhi.",
        "Tripped(utah, bike) ::: Utah trips Bodhi's bike.",
        "Escapes(bodhi) ::: Bodhi escapes.",
        "FreezesAssets(fbi, bodhi's sponsors) ::: The FBI freezes Bodhi's sponsors' assets.",
        "PlansToRob(bodhi, italian bank) ::: Bodhi plans to rob a nearby Italian bank.",
        "Intercepts(utah, group) ::: Utah and the police intercept the group.",
        "ResultsIn(crossfire, kills(roaches)) ::: The crossfire results in the death of Roach.",
        "Chases(utah, group) ::: Utah chases the group.",
        "Shoots(utah, one of them) ::: Utah shoots one of the group members.",
        "RevealedAs(one of them, samsara) ::: One of the group members is revealed to be Samsara.",
        "Conclusion:",
        "PlansToRob(bodhi, italian bank) → FreezesAssets(fbi, bodhi's sponsors) ::: Bodhi's plan to rob the bank is linked to the actions of the FBI freezing his sponsors' assets."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "378": [
    {
      "id": 378,
      "context_id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 1,
      "paragraph": "Seven years later, Utah is an FBI agent candidate. He attends a briefing on a skyscraper heist, in which the criminals steal diamonds, escaping by parachute, in Mumbai. A similar heist happens over Mexico where the criminals unload millions of dollars in bills over Mexico, then disappear into the Cave of Swallows. Utah's research concludes that they were done by the same men, who are attempting to complete the Ozaki 8, a list of eight extreme ordeals to honor the forces of nature. They have already completed three, and Utah predicts they'll attempt the fourth on a rare sea wave phenomenon in France. After presenting his analysis, Utah is sent undercover to France under a field agent named Pappas (Ray Winstone). They reach France and Utah gets help from others to surf the tall tube wave.",
      "question_template": "Utah is going for [[CANDIDATE_ANSWER]] in the beginning of the story.",
      "candidate_answers": [
        "- Utah is sent undercover to France under a field agent named Pappas.",
        "- He gets help from others to surf the tall tube wave."
      ],
      "predicates": [
        "FBI_Agent_Candidate(x) ::: x is an FBI agent candidate.",
        "Attends(x, y) ::: x attends event y.",
        "Heist(x) ::: x is a heist.",
        "Steal(x, y) ::: x steals y.",
        "EscapeByParachute(x) ::: x escapes by parachute.",
        "Unload(x, y) ::: x unloads y.",
        "Disappear(x, y) ::: x disappears into location y.",
        "Research(x, y) ::: x conducts research on y.",
        "Complete(x, y) ::: x completes ordeal y.",
        "Attempt(x, y) ::: x attempts ordeal y.",
        "Help(x, y) ::: x gets help from y.",
        "Surf(x, y) ::: x surfs wave y.",
        "FieldAgent(x, y) ::: x is a field agent for y."
      ],
      "premises": [
        "FBI_Agent_Candidate(utah) ::: Utah is an FBI agent candidate.",
        "Attends(utah, briefing) ::: Utah attends a briefing on a skyscraper heist.",
        "Heist(skyscraper_heist) ::: The event is a heist involving a skyscraper.",
        "Steal(criminals, diamonds) ::: The criminals steal diamonds.",
        "EscapeByParachute(criminals) ::: The criminals escape by parachute.",
        "Heist(mexico_heist) ::: A similar heist happens over Mexico.",
        "Unload(criminals, millions_of_dollars) ::: The criminals unload millions of dollars in bills.",
        "Disappear(criminals, cave_of_swallows) ::: The criminals disappear into the Cave of Swallows.",
        "Research(utah, heists) ::: Utah's research concludes that the heists were done by the same men.",
        "Complete(criminals, eight_ordeals) ::: The criminals are attempting to complete the Ozaki 8.",
        "Attempt(criminals, fourth_ordeal) ::: They will attempt the fourth ordeal.",
        "RareSeaWavePhenomenon(france) ::: The fourth ordeal is on a rare sea wave phenomenon in France.",
        "FieldAgent(pappas, fbi) ::: Pappas is a field agent for the FBI.",
        "Help(utah, others) ::: Utah gets help from others.",
        "Surf(utah, tall_tube_wave) ::: Utah surfs the tall tube wave.",
        "Conclusion:",
        "Attempt(criminals, eight_ordeals) ::: The criminals are attempting to complete the Ozaki 8 by performing extreme ordeals."
      ],
      "conclusions": [
        "None",
        "Help(utah, others) ∧ Surf(utah, tall_tube_wave)"
      ]
    }
  ],
  "380": [
    {
      "id": 380,
      "context_id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 3,
      "paragraph": "After a party, Samsara explains that she and Bodhi both knew Ono Ozaki when they were young, that her parents died in an avalanche accident and Ozaki gave her a home after. She explains further that Ozaki actually completed his third ordeal, as was widely believed. He did not die attempting the ordeal, but was actually killed by a whaling ship crashing into his boat while he was trying to save humpback whales. On his boat, a young boy, Bodhi, decided not to tell the truth of his story but to finish what Ozaki started.",
      "question_template": "Utah gets accepted into the circle of the three criminals [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Killed by a whaling ship crashing into his boat while he was trying to save humpback whales."
      ],
      "predicates": [
        "Knew(x, y) ::: x knew y when they were young.",
        "GaveHome(x, y) ::: x gave y a home.",
        "CompletedOrdeal(x) ::: x completed his third ordeal.",
        "DidNotDie(x) ::: x did not die attempting the ordeal.",
        "KilledByWhalingShip(x) ::: x was killed by a whaling ship.",
        "TryingToSave(x, y) ::: x was trying to save y.",
        "DecidedNotToTellTruth(x) ::: x decided not to tell the truth of his story.",
        "FinishedWhatStarted(x, y) ::: x finished what y started."
      ],
      "premises": [
        "Knew(samsara, ozaki) ∧ Knew(bodhi, ozaki) ::: Samsara and Bodhi both knew Ono Ozaki when they were young.",
        "GaveHome(ozaki, samsara) ::: Ozaki gave Samsara a home after her parents died in an avalanche accident.",
        "CompletedOrdeal(ozaki) ::: Ozaki actually completed his third ordeal, as was widely believed.",
        "¬DidNotDie(ozaki) ∧ KilledByWhalingShip(ozaki) ::: He did not die attempting the ordeal, but was actually killed by a whaling ship crashing into his boat.",
        "TryingToSave(ozaki, humpbackWhales) ::: Ozaki was trying to save humpback whales.",
        "DecidedNotToTellTruth(bodhi) ::: Bodhi decided not to tell the truth of his story.",
        "FinishedWhatStarted(bodhi, ozaki) ::: Bodhi finished what Ozaki started."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "382": [
    {
      "id": 382,
      "context_id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 1,
      "paragraph": "Seven years later, Utah is an FBI agent candidate. He attends a briefing on a skyscraper heist, in which the criminals steal diamonds, escaping by parachute, in Mumbai. A similar heist happens over Mexico where the criminals unload millions of dollars in bills over Mexico, then disappear into the Cave of Swallows. Utah's research concludes that they were done by the same men, who are attempting to complete the Ozaki 8, a list of eight extreme ordeals to honor the forces of nature. They have already completed three, and Utah predicts they'll attempt the fourth on a rare sea wave phenomenon in France. After presenting his analysis, Utah is sent undercover to France under a field agent named Pappas (Ray Winstone). They reach France and Utah gets help from others to surf the tall tube wave.",
      "question_template": "Ono Ozaki died [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "France"
      ],
      "predicates": [
        "FBI_Agent_Candidate(x) ::: x is an FBI agent candidate.",
        "Attends(x, y) ::: x attends event y.",
        "Heist(x) ::: x is a heist.",
        "Steal(x, y) ::: x steals y.",
        "EscapeByParachute(x) ::: x escapes by parachute.",
        "Unload(x, y) ::: x unloads y.",
        "Disappear(x, y) ::: x disappears into location y.",
        "Research(x, y) ::: x conducts research on y.",
        "Complete(x, y) ::: x completes ordeal y.",
        "Attempt(x, y) ::: x attempts ordeal y.",
        "Help(x, y) ::: x gets help from y.",
        "Surf(x, y) ::: x surfs wave y.",
        "FieldAgent(x, y) ::: x is a field agent for y."
      ],
      "premises": [
        "FBI_Agent_Candidate(utah) ::: Utah is an FBI agent candidate.",
        "Attends(utah, briefing) ::: Utah attends a briefing on a skyscraper heist.",
        "Heist(skyscraper_heist) ::: The event is a heist involving a skyscraper.",
        "Steal(criminals, diamonds) ::: The criminals steal diamonds.",
        "EscapeByParachute(criminals) ::: The criminals escape by parachute.",
        "Heist(mexico_heist) ::: A similar heist happens over Mexico.",
        "Unload(criminals, millions_of_dollars) ::: The criminals unload millions of dollars in bills.",
        "Disappear(criminals, cave_of_swallows) ::: The criminals disappear into the Cave of Swallows.",
        "Research(utah, heists) ::: Utah's research concludes that the heists were done by the same men.",
        "Complete(criminals, eight_ordeals) ::: The criminals are attempting to complete the Ozaki 8.",
        "Attempt(criminals, fourth_ordeal) ::: They will attempt the fourth ordeal.",
        "RareSeaWavePhenomenon(france) ::: The fourth ordeal is on a rare sea wave phenomenon in France.",
        "FieldAgent(pappas, fbi) ::: Pappas is a field agent for the FBI.",
        "Help(utah, others) ::: Utah gets help from others.",
        "Surf(utah, tall_tube_wave) ::: Utah surfs the tall tube wave.",
        "Conclusion:",
        "Attempt(criminals, eight_ordeals) ::: The criminals are attempting to complete the Ozaki 8 by performing extreme ordeals."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 382,
      "context_id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 5,
      "paragraph": "Utah finds the location of the next ordeal: solo rock climbing with no safety beside a waterfall Angel Falls in Venezuela. He finds Bodhi and Grommet and chases them on the climb, but Grommet cramps and falters, falling to his death. Utah catches up to Bodhi, but he leaps down the waterfall, completing what would have been the last ordeal; Bodhi has to redo the fourth ordeal as he bailed out on the wave when he had to save Johnny. Seventeen months later, Utah finds him in the Pacific facing another giant wave. As Utah tries to get Bodhi to come back with him, and pay for his crimes, he eventually lets Bodhi attempt to surf it, both knowing that he will not come back. The wave engulfs Bodhi and Utah continues his career in the FBI, and starts to go through his own eight ordeals.",
      "question_template": "Ono Ozaki died [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Venezuela",
        "Pacific"
      ],
      "predicates": [
        "Location(x) ::: x is a location.",
        "ClimbingEvent(x) ::: x is an event of solo rock climbing.",
        "WaterfallLeap(x) ::: x is an event of leaping down a waterfall.",
        "GiantWave(x) ::: x is an event of facing a giant wave.",
        "Career(x) ::: x is a career.",
        "FBI(x) ::: x is part of the FBI.",
        "AttemptSurf(x, y) ::: x attempts to surf y.",
        "CatchesUp(x, y) ::: x catches up to y.",
        "FallsToDeath(x) ::: x falls to his death.",
        "RedoOrdeal(x) ::: x has to redo an ordeal.",
        "CompletesOrdeal(x) ::: x completes an ordeal.",
        "Knows(x, y) ::: x knows y.",
        "Chases(x, y) ::: x chases y.",
        "Engulfs(x, y) ::: x engulfs y."
      ],
      "premises": [
        "Location(AngelFalls) ∧ Location(Venezuela) ::: Angel Falls is a location in Venezuela.",
        "ClimbingEvent(soloRockClimbing) ::: Solo rock climbing is an event.",
        "WaterfallLeap(waterfallLeap) ::: Leaping down the waterfall is an event.",
        "GiantWave(giantWave) ::: Facing a giant wave is an event.",
        "Career(utah) ∧ FBI(utah) ::: Utah continues his career in the FBI.",
        "CatchesUp(utah, bodhi) ::: Utah catches up to Bodhi.",
        "FallsToDeath(grommet) ::: Grommet falls to his death.",
        "Chases(utah, grommet) ::: Utah chases Grommet on the climb.",
        "CompletesOrdeal(bodhi) ::: Bodhi completes what would have been the last ordeal.",
        "RedoOrdeal(bodhi) ::: Bodhi has to redo the fourth ordeal.",
        "Knows(utah, bodhi) ::: Utah knows that Bodhi will not come back after attempting to surf the wave.",
        "AttemptSurf(bodhi, giantWave) ::: Bodhi attempts to surf the giant wave.",
        "Engulfs(giantWave, bodhi) ::: The giant wave engulfs Bodhi.",
        "Conclusion:",
        "¬Returns(bodhi) ::: Bodhi does not return after attempting to surf the wave."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "383": [
    {
      "id": 383,
      "context_id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 0,
      "paragraph": " Extreme sport athlete Johnny Utah (Luke Bracey), and his friend Jeff (Max Thieriot), are traversing a steep ridgeline on motorbikes. The run ends with a jump onto a lone stone column, where Jeff overshoots the landing and falls to his death.",
      "question_template": "The Ozkai 8 is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Jeff",
        "Falls to his death"
      ],
      "predicates": [
        "ExtremeSportAthlete(x) ::: x is an extreme sport athlete.",
        "Traversing(x, y) ::: x is traversing location y.",
        "Jump(x, y) ::: x jumps onto y.",
        "Overshoot(x, y) ::: x overshoots the landing on y.",
        "FallsToDeath(x) ::: x falls to his death."
      ],
      "premises": [
        "ExtremeSportAthlete(Johnny) ∧ ExtremeSportAthlete(Jeff) ::: Johnny Utah and Jeff are extreme sport athletes.",
        "Traversing(Johnny, ridgeline) ∧ Traversing(Jeff, ridgeline) ::: Johnny and Jeff are traversing a steep ridgeline on motorbikes.",
        "Jump(Jeff, stoneColumn) ∧ Overshoot(Jeff, stoneColumn) ::: Jeff jumps onto a lone stone column and overshoots the landing.",
        "FallsToDeath(Jeff) ::: Jeff falls to his death.",
        "Conclusion:",
        "FallsToDeath(Jeff) ::: Jeff falls to his death after overshooting the landing."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 383,
      "context_id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 3,
      "paragraph": "After a party, Samsara explains that she and Bodhi both knew Ono Ozaki when they were young, that her parents died in an avalanche accident and Ozaki gave her a home after. She explains further that Ozaki actually completed his third ordeal, as was widely believed. He did not die attempting the ordeal, but was actually killed by a whaling ship crashing into his boat while he was trying to save humpback whales. On his boat, a young boy, Bodhi, decided not to tell the truth of his story but to finish what Ozaki started.",
      "question_template": "The Ozkai 8 is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Ono Ozaki",
        "He did not die attempting the ordeal, but was actually killed by a whaling ship crashing into his boat"
      ],
      "predicates": [
        "Knew(x, y) ::: x knew y when they were young.",
        "GaveHome(x, y) ::: x gave y a home.",
        "CompletedOrdeal(x) ::: x completed his third ordeal.",
        "DidNotDie(x) ::: x did not die attempting the ordeal.",
        "KilledByWhalingShip(x) ::: x was killed by a whaling ship.",
        "TryingToSave(x, y) ::: x was trying to save y.",
        "DecidedNotToTellTruth(x) ::: x decided not to tell the truth of his story.",
        "FinishedWhatStarted(x, y) ::: x finished what y started."
      ],
      "premises": [
        "Knew(samsara, ozaki) ∧ Knew(bodhi, ozaki) ::: Samsara and Bodhi both knew Ono Ozaki when they were young.",
        "GaveHome(ozaki, samsara) ::: Ozaki gave Samsara a home after her parents died in an avalanche accident.",
        "CompletedOrdeal(ozaki) ::: Ozaki actually completed his third ordeal, as was widely believed.",
        "¬DidNotDie(ozaki) ∧ KilledByWhalingShip(ozaki) ::: He did not die attempting the ordeal, but was actually killed by a whaling ship crashing into his boat.",
        "TryingToSave(ozaki, humpbackWhales) ::: Ozaki was trying to save humpback whales.",
        "DecidedNotToTellTruth(bodhi) ::: Bodhi decided not to tell the truth of his story.",
        "FinishedWhatStarted(bodhi, ozaki) ::: Bodhi finished what Ozaki started."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 383,
      "context_id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 4,
      "paragraph": "Next they travel to a gold mine where Bodhi detonates explosives Grommet and Roach planted. After blowing his cover, Utah chases Bodhi, managing to trip his bike. Bodhi escapes as Utah cannot stand up after the crash. The FBI freezes Bodhi's sponsors' assets; Bodhi plans to rob a nearby Italian bank on a mountain top. Utah and the police intercept the group, resulting in a crossfire that kills Roach. As the group flees, Utah chases and shoots one of them, revealed to be Samsara.",
      "question_template": "The Ozkai 8 is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Roach"
      ],
      "predicates": [
        "Detonates(x, y) ::: x detonates explosives y.",
        "Chases(x, y) ::: x chases y.",
        "Tripped(x, y) ::: x trips y.",
        "Escapes(x) ::: x escapes.",
        "FreezesAssets(x, y) ::: x freezes the assets of y.",
        "PlansToRob(x, y) ::: x plans to rob y.",
        "Intercepts(x, y) ::: x intercepts y.",
        "ResultsIn(x, y) ::: x results in y.",
        "Shoots(x, y) ::: x shoots y.",
        "RevealedAs(x, y) ::: x is revealed to be y."
      ],
      "premises": [
        "Detonates(bodhi, explosives) ::: Bodhi detonates explosives.",
        "Chases(utah, bodhi) ::: Utah chases Bodhi.",
        "Tripped(utah, bike) ::: Utah trips Bodhi's bike.",
        "Escapes(bodhi) ::: Bodhi escapes.",
        "FreezesAssets(fbi, bodhi's sponsors) ::: The FBI freezes Bodhi's sponsors' assets.",
        "PlansToRob(bodhi, italian bank) ::: Bodhi plans to rob a nearby Italian bank.",
        "Intercepts(utah, group) ::: Utah and the police intercept the group.",
        "ResultsIn(crossfire, kills(roaches)) ::: The crossfire results in the death of Roach.",
        "Chases(utah, group) ::: Utah chases the group.",
        "Shoots(utah, one of them) ::: Utah shoots one of the group members.",
        "RevealedAs(one of them, samsara) ::: One of the group members is revealed to be Samsara.",
        "Conclusion:",
        "PlansToRob(bodhi, italian bank) → FreezesAssets(fbi, bodhi's sponsors) ::: Bodhi's plan to rob the bank is linked to the actions of the FBI freezing his sponsors' assets."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "384": [
    {
      "id": 384,
      "context_id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 0,
      "paragraph": " Extreme sport athlete Johnny Utah (Luke Bracey), and his friend Jeff (Max Thieriot), are traversing a steep ridgeline on motorbikes. The run ends with a jump onto a lone stone column, where Jeff overshoots the landing and falls to his death.",
      "question_template": "Utah goes undercover in [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Jeff",
        "Johnny Utah"
      ],
      "predicates": [
        "ExtremeSportAthlete(x) ::: x is an extreme sport athlete.",
        "Traversing(x, y) ::: x is traversing location y.",
        "Jump(x, y) ::: x jumps onto y.",
        "Overshoot(x, y) ::: x overshoots the landing on y.",
        "FallsToDeath(x) ::: x falls to his death."
      ],
      "premises": [
        "ExtremeSportAthlete(Johnny) ∧ ExtremeSportAthlete(Jeff) ::: Johnny Utah and Jeff are extreme sport athletes.",
        "Traversing(Johnny, ridgeline) ∧ Traversing(Jeff, ridgeline) ::: Johnny and Jeff are traversing a steep ridgeline on motorbikes.",
        "Jump(Jeff, stoneColumn) ∧ Overshoot(Jeff, stoneColumn) ::: Jeff jumps onto a lone stone column and overshoots the landing.",
        "FallsToDeath(Jeff) ::: Jeff falls to his death.",
        "Conclusion:",
        "FallsToDeath(Jeff) ::: Jeff falls to his death after overshooting the landing."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 384,
      "context_id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 2,
      "paragraph": "As he goes in, there is already another surfer in the wave, leaving Utah with an unstable wave. Utah gets sucked into the wave and faints, but the other surfer bails and rescues Utah. He wakes aboard a yacht with the surfer, Bodhi (Ădgar RamĂ­rez), and his team Roach (Clemens Schick), Chowder (Tobias Santelmann), and Grommet (Matias Varela). They leave him to enjoy the party and he gets acquainted with a girl, Samsara (Teresa Palmer). The next day, Utah finds the men in an abandoned Paris train station after he overhears them talk about the location. Bodhi gives him an initiation fight and soon he is accepted in the circle. They travel to the Alps for the next ordeal, wingsuit flying through the cliffs \"The Life of Wind\". The four succeed in their attempt and spend some time together with Samsara. The next day, they climb the snow peaks for the sixth ordeal, snowboarding through a steep wall of snow. They reach their spot, but Utah decides to extend his line so the others follow him. Chowder slips and falls to his death, and Utah becomes depressed about it.",
      "question_template": "Utah goes undercover in [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Samsara",
        "Bodhi",
        "Utah",
        "Chowder"
      ],
      "predicates": [
        "Surfer(x) ::: x is a surfer.",
        "Faints(x) ::: x faints.",
        "Rescues(x, y) ::: x rescues y.",
        "WakesUp(x, y) ::: x wakes up with y.",
        "AcquaintedWith(x, y) ::: x gets acquainted with y.",
        "InitiationFight(x, y) ::: x gives y an initiation fight.",
        "AcceptedInCircle(x, y) ::: x is accepted in y's circle.",
        "TravelTo(x, y) ::: x travels to y.",
        "SucceedInAttempt(x) ::: x succeeds in their attempt.",
        "Climbs(x, y) ::: x climbs y.",
        "ExtendsLine(x) ::: x extends his line.",
        "FallsToDeath(x) ::: x falls to his death.",
        "ExperiencesDepression(x) ::: x experiences depression."
      ],
      "premises": [
        "Rescues(a_2, a_1) ::: The other surfer rescues Utah.",
        "WakesUp(a_1, a_2) ::: Utah wakes up aboard a yacht with Bodhi.",
        "AcquaintedWith(a_1, a_4) ::: Utah gets acquainted with Samsara.",
        "InitiationFight(a_2, a_1) ::: Bodhi gives Utah an initiation fight.",
        "AcceptedInCircle(a_1, a_2) ::: Utah is accepted into Bodhi's circle after the initiation fight.",
        "TravelTo(a_1, b_0) ::: They travel to the Alps for the next ordeal.",
        "SucceedInAttempt(a_1) ::: The four succeed in their attempt.",
        "Climbs(a_1, c_0) ::: They climb the snow peaks for the sixth ordeal.",
        "ExtendsLine(a_1) ::: Utah decides to extend his line.",
        "FallsToDeath(a_3) ::: Chowder slips and falls to his death.",
        "ExperiencesDepression(a_1) ::: Utah experiences depression after Chowder's death."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 384,
      "context_id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 3,
      "paragraph": "After a party, Samsara explains that she and Bodhi both knew Ono Ozaki when they were young, that her parents died in an avalanche accident and Ozaki gave her a home after. She explains further that Ozaki actually completed his third ordeal, as was widely believed. He did not die attempting the ordeal, but was actually killed by a whaling ship crashing into his boat while he was trying to save humpback whales. On his boat, a young boy, Bodhi, decided not to tell the truth of his story but to finish what Ozaki started.",
      "question_template": "Utah goes undercover in [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Ono Ozaki"
      ],
      "predicates": [
        "Knew(x, y) ::: x knew y when they were young.",
        "GaveHome(x, y) ::: x gave y a home.",
        "CompletedOrdeal(x) ::: x completed his third ordeal.",
        "DidNotDie(x) ::: x did not die attempting the ordeal.",
        "KilledByWhalingShip(x) ::: x was killed by a whaling ship.",
        "TryingToSave(x, y) ::: x was trying to save y.",
        "DecidedNotToTellTruth(x) ::: x decided not to tell the truth of his story.",
        "FinishedWhatStarted(x, y) ::: x finished what y started."
      ],
      "premises": [
        "Knew(samsara, ozaki) ∧ Knew(bodhi, ozaki) ::: Samsara and Bodhi both knew Ono Ozaki when they were young.",
        "GaveHome(ozaki, samsara) ::: Ozaki gave Samsara a home after her parents died in an avalanche accident.",
        "CompletedOrdeal(ozaki) ::: Ozaki actually completed his third ordeal, as was widely believed.",
        "¬DidNotDie(ozaki) ∧ KilledByWhalingShip(ozaki) ::: He did not die attempting the ordeal, but was actually killed by a whaling ship crashing into his boat.",
        "TryingToSave(ozaki, humpbackWhales) ::: Ozaki was trying to save humpback whales.",
        "DecidedNotToTellTruth(bodhi) ::: Bodhi decided not to tell the truth of his story.",
        "FinishedWhatStarted(bodhi, ozaki) ::: Bodhi finished what Ozaki started."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "385": [
    {
      "id": 385,
      "context_id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 3,
      "paragraph": "After a party, Samsara explains that she and Bodhi both knew Ono Ozaki when they were young, that her parents died in an avalanche accident and Ozaki gave her a home after. She explains further that Ozaki actually completed his third ordeal, as was widely believed. He did not die attempting the ordeal, but was actually killed by a whaling ship crashing into his boat while he was trying to save humpback whales. On his boat, a young boy, Bodhi, decided not to tell the truth of his story but to finish what Ozaki started.",
      "question_template": "[[CANDIDATE_ANSWER]] dies while completing the 6th ordeal.",
      "candidate_answers": [
        "- Samsara explains that she and Bodhi both knew Ono Ozaki when they were young",
        "- Her parents died in an avalanche accident and Ozaki gave her a home after",
        "- Ozaki actually completed his third ordeal, as was widely believed",
        "- He did not die attempting the ordeal, but was actually killed by a whaling ship crashing into his boat while he was trying to save humpback whales",
        "- On his boat, a young boy, Bodhi, decided not to tell the truth of his story but to finish what Ozaki started"
      ],
      "predicates": [
        "Knew(x, y) ::: x knew y when they were young.",
        "GaveHome(x, y) ::: x gave y a home.",
        "CompletedOrdeal(x) ::: x completed his third ordeal.",
        "DidNotDie(x) ::: x did not die attempting the ordeal.",
        "KilledByWhalingShip(x) ::: x was killed by a whaling ship.",
        "TryingToSave(x, y) ::: x was trying to save y.",
        "DecidedNotToTellTruth(x) ::: x decided not to tell the truth of his story.",
        "FinishedWhatStarted(x, y) ::: x finished what y started."
      ],
      "premises": [
        "Knew(samsara, ozaki) ∧ Knew(bodhi, ozaki) ::: Samsara and Bodhi both knew Ono Ozaki when they were young.",
        "GaveHome(ozaki, samsara) ::: Ozaki gave Samsara a home after her parents died in an avalanche accident.",
        "CompletedOrdeal(ozaki) ::: Ozaki actually completed his third ordeal, as was widely believed.",
        "¬DidNotDie(ozaki) ∧ KilledByWhalingShip(ozaki) ::: He did not die attempting the ordeal, but was actually killed by a whaling ship crashing into his boat.",
        "TryingToSave(ozaki, humpbackWhales) ::: Ozaki was trying to save humpback whales.",
        "DecidedNotToTellTruth(bodhi) ::: Bodhi decided not to tell the truth of his story.",
        "FinishedWhatStarted(bodhi, ozaki) ::: Bodhi finished what Ozaki started."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "389": [
    {
      "id": 389,
      "context_id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 4,
      "paragraph": "Next they travel to a gold mine where Bodhi detonates explosives Grommet and Roach planted. After blowing his cover, Utah chases Bodhi, managing to trip his bike. Bodhi escapes as Utah cannot stand up after the crash. The FBI freezes Bodhi's sponsors' assets; Bodhi plans to rob a nearby Italian bank on a mountain top. Utah and the police intercept the group, resulting in a crossfire that kills Roach. As the group flees, Utah chases and shoots one of them, revealed to be Samsara.",
      "question_template": "It takes [[CANDIDATE_ANSWER]] for Utah to find Bodhi again.",
      "candidate_answers": [
        "A gold mine",
        "A nearby Italian bank on a mountain top"
      ],
      "predicates": [
        "Detonates(x, y) ::: x detonates explosives y.",
        "Chases(x, y) ::: x chases y.",
        "Tripped(x, y) ::: x trips y.",
        "Escapes(x) ::: x escapes.",
        "FreezesAssets(x, y) ::: x freezes the assets of y.",
        "PlansToRob(x, y) ::: x plans to rob y.",
        "Intercepts(x, y) ::: x intercepts y.",
        "ResultsIn(x, y) ::: x results in y.",
        "Shoots(x, y) ::: x shoots y.",
        "RevealedAs(x, y) ::: x is revealed to be y."
      ],
      "premises": [
        "Detonates(bodhi, explosives) ::: Bodhi detonates explosives.",
        "Chases(utah, bodhi) ::: Utah chases Bodhi.",
        "Tripped(utah, bike) ::: Utah trips Bodhi's bike.",
        "Escapes(bodhi) ::: Bodhi escapes.",
        "FreezesAssets(fbi, bodhi's sponsors) ::: The FBI freezes Bodhi's sponsors' assets.",
        "PlansToRob(bodhi, italian bank) ::: Bodhi plans to rob a nearby Italian bank.",
        "Intercepts(utah, group) ::: Utah and the police intercept the group.",
        "ResultsIn(crossfire, kills(roaches)) ::: The crossfire results in the death of Roach.",
        "Chases(utah, group) ::: Utah chases the group.",
        "Shoots(utah, one of them) ::: Utah shoots one of the group members.",
        "RevealedAs(one of them, samsara) ::: One of the group members is revealed to be Samsara.",
        "Conclusion:",
        "PlansToRob(bodhi, italian bank) → FreezesAssets(fbi, bodhi's sponsors) ::: Bodhi's plan to rob the bank is linked to the actions of the FBI freezing his sponsors' assets."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 389,
      "context_id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 5,
      "paragraph": "Utah finds the location of the next ordeal: solo rock climbing with no safety beside a waterfall Angel Falls in Venezuela. He finds Bodhi and Grommet and chases them on the climb, but Grommet cramps and falters, falling to his death. Utah catches up to Bodhi, but he leaps down the waterfall, completing what would have been the last ordeal; Bodhi has to redo the fourth ordeal as he bailed out on the wave when he had to save Johnny. Seventeen months later, Utah finds him in the Pacific facing another giant wave. As Utah tries to get Bodhi to come back with him, and pay for his crimes, he eventually lets Bodhi attempt to surf it, both knowing that he will not come back. The wave engulfs Bodhi and Utah continues his career in the FBI, and starts to go through his own eight ordeals.",
      "question_template": "It takes [[CANDIDATE_ANSWER]] for Utah to find Bodhi again.",
      "candidate_answers": [
        "Angel Falls in Venezuela",
        "In the Pacific facing another giant wave"
      ],
      "predicates": [
        "Location(x) ::: x is a location.",
        "ClimbingEvent(x) ::: x is an event of solo rock climbing.",
        "WaterfallLeap(x) ::: x is an event of leaping down a waterfall.",
        "GiantWave(x) ::: x is an event of facing a giant wave.",
        "Career(x) ::: x is a career.",
        "FBI(x) ::: x is part of the FBI.",
        "AttemptSurf(x, y) ::: x attempts to surf y.",
        "CatchesUp(x, y) ::: x catches up to y.",
        "FallsToDeath(x) ::: x falls to his death.",
        "RedoOrdeal(x) ::: x has to redo an ordeal.",
        "CompletesOrdeal(x) ::: x completes an ordeal.",
        "Knows(x, y) ::: x knows y.",
        "Chases(x, y) ::: x chases y.",
        "Engulfs(x, y) ::: x engulfs y."
      ],
      "premises": [
        "Location(AngelFalls) ∧ Location(Venezuela) ::: Angel Falls is a location in Venezuela.",
        "ClimbingEvent(soloRockClimbing) ::: Solo rock climbing is an event.",
        "WaterfallLeap(waterfallLeap) ::: Leaping down the waterfall is an event.",
        "GiantWave(giantWave) ::: Facing a giant wave is an event.",
        "Career(utah) ∧ FBI(utah) ::: Utah continues his career in the FBI.",
        "CatchesUp(utah, bodhi) ::: Utah catches up to Bodhi.",
        "FallsToDeath(grommet) ::: Grommet falls to his death.",
        "Chases(utah, grommet) ::: Utah chases Grommet on the climb.",
        "CompletesOrdeal(bodhi) ::: Bodhi completes what would have been the last ordeal.",
        "RedoOrdeal(bodhi) ::: Bodhi has to redo the fourth ordeal.",
        "Knows(utah, bodhi) ::: Utah knows that Bodhi will not come back after attempting to surf the wave.",
        "AttemptSurf(bodhi, giantWave) ::: Bodhi attempts to surf the giant wave.",
        "Engulfs(giantWave, bodhi) ::: The giant wave engulfs Bodhi.",
        "Conclusion:",
        "¬Returns(bodhi) ::: Bodhi does not return after attempting to surf the wave."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "390": [
    {
      "id": 390,
      "context_id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 5,
      "paragraph": "Utah finds the location of the next ordeal: solo rock climbing with no safety beside a waterfall Angel Falls in Venezuela. He finds Bodhi and Grommet and chases them on the climb, but Grommet cramps and falters, falling to his death. Utah catches up to Bodhi, but he leaps down the waterfall, completing what would have been the last ordeal; Bodhi has to redo the fourth ordeal as he bailed out on the wave when he had to save Johnny. Seventeen months later, Utah finds him in the Pacific facing another giant wave. As Utah tries to get Bodhi to come back with him, and pay for his crimes, he eventually lets Bodhi attempt to surf it, both knowing that he will not come back. The wave engulfs Bodhi and Utah continues his career in the FBI, and starts to go through his own eight ordeals.",
      "question_template": "Ono Ozaki died [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Solo rock climbing with no safety beside a waterfall Angel Falls in Venezuela",
        "- He finds Bodhi and Grommet and chases them on the climb",
        "- Grommet cramps and falters, falling to his death",
        "- Bodhi leaps down the waterfall, completing what would have been the last ordeal",
        "- Bodhi has to redo the fourth ordeal as he bailed out on the wave when he had to save Johnny",
        "- Seventeen months later, Utah finds him in the Pacific facing another giant wave",
        "- Utah tries to get Bodhi to come back with him, and pay for his crimes",
        "- He eventually lets Bodhi attempt to surf it, both knowing that he will not come back",
        "- The wave engulfs Bodhi and Utah continues his career in the FBI, and starts to go through his own eight ordeals"
      ],
      "predicates": [
        "Location(x) ::: x is a location.",
        "ClimbingEvent(x) ::: x is an event of solo rock climbing.",
        "WaterfallLeap(x) ::: x is an event of leaping down a waterfall.",
        "GiantWave(x) ::: x is an event of facing a giant wave.",
        "Career(x) ::: x is a career.",
        "FBI(x) ::: x is part of the FBI.",
        "AttemptSurf(x, y) ::: x attempts to surf y.",
        "CatchesUp(x, y) ::: x catches up to y.",
        "FallsToDeath(x) ::: x falls to his death.",
        "RedoOrdeal(x) ::: x has to redo an ordeal.",
        "CompletesOrdeal(x) ::: x completes an ordeal.",
        "Knows(x, y) ::: x knows y.",
        "Chases(x, y) ::: x chases y.",
        "Engulfs(x, y) ::: x engulfs y."
      ],
      "premises": [
        "Location(AngelFalls) ∧ Location(Venezuela) ::: Angel Falls is a location in Venezuela.",
        "ClimbingEvent(soloRockClimbing) ::: Solo rock climbing is an event.",
        "WaterfallLeap(waterfallLeap) ::: Leaping down the waterfall is an event.",
        "GiantWave(giantWave) ::: Facing a giant wave is an event.",
        "Career(utah) ∧ FBI(utah) ::: Utah continues his career in the FBI.",
        "CatchesUp(utah, bodhi) ::: Utah catches up to Bodhi.",
        "FallsToDeath(grommet) ::: Grommet falls to his death.",
        "Chases(utah, grommet) ::: Utah chases Grommet on the climb.",
        "CompletesOrdeal(bodhi) ::: Bodhi completes what would have been the last ordeal.",
        "RedoOrdeal(bodhi) ::: Bodhi has to redo the fourth ordeal.",
        "Knows(utah, bodhi) ::: Utah knows that Bodhi will not come back after attempting to surf the wave.",
        "AttemptSurf(bodhi, giantWave) ::: Bodhi attempts to surf the giant wave.",
        "Engulfs(giantWave, bodhi) ::: The giant wave engulfs Bodhi.",
        "Conclusion:",
        "¬Returns(bodhi) ::: Bodhi does not return after attempting to surf the wave."
      ],
      "conclusions": [
        "None",
        "None",
        "FallsToDeath(grommet)",
        "CompletesOrdeal(bodhi)",
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "391": [
    {
      "id": 391,
      "context_id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 1,
      "paragraph": "Seven years later, Utah is an FBI agent candidate. He attends a briefing on a skyscraper heist, in which the criminals steal diamonds, escaping by parachute, in Mumbai. A similar heist happens over Mexico where the criminals unload millions of dollars in bills over Mexico, then disappear into the Cave of Swallows. Utah's research concludes that they were done by the same men, who are attempting to complete the Ozaki 8, a list of eight extreme ordeals to honor the forces of nature. They have already completed three, and Utah predicts they'll attempt the fourth on a rare sea wave phenomenon in France. After presenting his analysis, Utah is sent undercover to France under a field agent named Pappas (Ray Winstone). They reach France and Utah gets help from others to surf the tall tube wave.",
      "question_template": "The Ozkai 8 is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- By parachute",
        "- They disappear into the Cave of Swallows"
      ],
      "predicates": [
        "FBI_Agent_Candidate(x) ::: x is an FBI agent candidate.",
        "Attends(x, y) ::: x attends event y.",
        "Heist(x) ::: x is a heist.",
        "Steal(x, y) ::: x steals y.",
        "EscapeByParachute(x) ::: x escapes by parachute.",
        "Unload(x, y) ::: x unloads y.",
        "Disappear(x, y) ::: x disappears into location y.",
        "Research(x, y) ::: x conducts research on y.",
        "Complete(x, y) ::: x completes ordeal y.",
        "Attempt(x, y) ::: x attempts ordeal y.",
        "Help(x, y) ::: x gets help from y.",
        "Surf(x, y) ::: x surfs wave y.",
        "FieldAgent(x, y) ::: x is a field agent for y."
      ],
      "premises": [
        "FBI_Agent_Candidate(utah) ::: Utah is an FBI agent candidate.",
        "Attends(utah, briefing) ::: Utah attends a briefing on a skyscraper heist.",
        "Heist(skyscraper_heist) ::: The event is a heist involving a skyscraper.",
        "Steal(criminals, diamonds) ::: The criminals steal diamonds.",
        "EscapeByParachute(criminals) ::: The criminals escape by parachute.",
        "Heist(mexico_heist) ::: A similar heist happens over Mexico.",
        "Unload(criminals, millions_of_dollars) ::: The criminals unload millions of dollars in bills.",
        "Disappear(criminals, cave_of_swallows) ::: The criminals disappear into the Cave of Swallows.",
        "Research(utah, heists) ::: Utah's research concludes that the heists were done by the same men.",
        "Complete(criminals, eight_ordeals) ::: The criminals are attempting to complete the Ozaki 8.",
        "Attempt(criminals, fourth_ordeal) ::: They will attempt the fourth ordeal.",
        "RareSeaWavePhenomenon(france) ::: The fourth ordeal is on a rare sea wave phenomenon in France.",
        "FieldAgent(pappas, fbi) ::: Pappas is a field agent for the FBI.",
        "Help(utah, others) ::: Utah gets help from others.",
        "Surf(utah, tall_tube_wave) ::: Utah surfs the tall tube wave.",
        "Conclusion:",
        "Attempt(criminals, eight_ordeals) ::: The criminals are attempting to complete the Ozaki 8 by performing extreme ordeals."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 391,
      "context_id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 4,
      "paragraph": "Next they travel to a gold mine where Bodhi detonates explosives Grommet and Roach planted. After blowing his cover, Utah chases Bodhi, managing to trip his bike. Bodhi escapes as Utah cannot stand up after the crash. The FBI freezes Bodhi's sponsors' assets; Bodhi plans to rob a nearby Italian bank on a mountain top. Utah and the police intercept the group, resulting in a crossfire that kills Roach. As the group flees, Utah chases and shoots one of them, revealed to be Samsara.",
      "question_template": "The Ozkai 8 is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Bodhi detonates explosives Grommet and Roach planted",
        "- Bodhi plans to rob a nearby Italian bank on a mountain top",
        "- Utah and the police intercept the group, resulting in a crossfire that kills Roach"
      ],
      "predicates": [
        "Detonates(x, y) ::: x detonates explosives y.",
        "Chases(x, y) ::: x chases y.",
        "Tripped(x, y) ::: x trips y.",
        "Escapes(x) ::: x escapes.",
        "FreezesAssets(x, y) ::: x freezes the assets of y.",
        "PlansToRob(x, y) ::: x plans to rob y.",
        "Intercepts(x, y) ::: x intercepts y.",
        "ResultsIn(x, y) ::: x results in y.",
        "Shoots(x, y) ::: x shoots y.",
        "RevealedAs(x, y) ::: x is revealed to be y."
      ],
      "premises": [
        "Detonates(bodhi, explosives) ::: Bodhi detonates explosives.",
        "Chases(utah, bodhi) ::: Utah chases Bodhi.",
        "Tripped(utah, bike) ::: Utah trips Bodhi's bike.",
        "Escapes(bodhi) ::: Bodhi escapes.",
        "FreezesAssets(fbi, bodhi's sponsors) ::: The FBI freezes Bodhi's sponsors' assets.",
        "PlansToRob(bodhi, italian bank) ::: Bodhi plans to rob a nearby Italian bank.",
        "Intercepts(utah, group) ::: Utah and the police intercept the group.",
        "ResultsIn(crossfire, kills(roaches)) ::: The crossfire results in the death of Roach.",
        "Chases(utah, group) ::: Utah chases the group.",
        "Shoots(utah, one of them) ::: Utah shoots one of the group members.",
        "RevealedAs(one of them, samsara) ::: One of the group members is revealed to be Samsara.",
        "Conclusion:",
        "PlansToRob(bodhi, italian bank) → FreezesAssets(fbi, bodhi's sponsors) ::: Bodhi's plan to rob the bank is linked to the actions of the FBI freezing his sponsors' assets."
      ],
      "conclusions": [
        "None",
        "PlansToRob(bodhi, italian bank)",
        "None"
      ]
    }
  ],
  "392": [
    {
      "id": 392,
      "context_id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 2,
      "paragraph": "As he goes in, there is already another surfer in the wave, leaving Utah with an unstable wave. Utah gets sucked into the wave and faints, but the other surfer bails and rescues Utah. He wakes aboard a yacht with the surfer, Bodhi (Ădgar RamĂ­rez), and his team Roach (Clemens Schick), Chowder (Tobias Santelmann), and Grommet (Matias Varela). They leave him to enjoy the party and he gets acquainted with a girl, Samsara (Teresa Palmer). The next day, Utah finds the men in an abandoned Paris train station after he overhears them talk about the location. Bodhi gives him an initiation fight and soon he is accepted in the circle. They travel to the Alps for the next ordeal, wingsuit flying through the cliffs \"The Life of Wind\". The four succeed in their attempt and spend some time together with Samsara. The next day, they climb the snow peaks for the sixth ordeal, snowboarding through a steep wall of snow. They reach their spot, but Utah decides to extend his line so the others follow him. Chowder slips and falls to his death, and Utah becomes depressed about it.",
      "question_template": "Utah goes undercover in [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Wingsuit flying through the cliffs \"The Life of Wind\""
      ],
      "predicates": [
        "Surfer(x) ::: x is a surfer.",
        "Faints(x) ::: x faints.",
        "Rescues(x, y) ::: x rescues y.",
        "WakesUp(x, y) ::: x wakes up with y.",
        "AcquaintedWith(x, y) ::: x gets acquainted with y.",
        "InitiationFight(x, y) ::: x gives y an initiation fight.",
        "AcceptedInCircle(x, y) ::: x is accepted in y's circle.",
        "TravelTo(x, y) ::: x travels to y.",
        "SucceedInAttempt(x) ::: x succeeds in their attempt.",
        "Climbs(x, y) ::: x climbs y.",
        "ExtendsLine(x) ::: x extends his line.",
        "FallsToDeath(x) ::: x falls to his death.",
        "ExperiencesDepression(x) ::: x experiences depression."
      ],
      "premises": [
        "Rescues(a_2, a_1) ::: The other surfer rescues Utah.",
        "WakesUp(a_1, a_2) ::: Utah wakes up aboard a yacht with Bodhi.",
        "AcquaintedWith(a_1, a_4) ::: Utah gets acquainted with Samsara.",
        "InitiationFight(a_2, a_1) ::: Bodhi gives Utah an initiation fight.",
        "AcceptedInCircle(a_1, a_2) ::: Utah is accepted into Bodhi's circle after the initiation fight.",
        "TravelTo(a_1, b_0) ::: They travel to the Alps for the next ordeal.",
        "SucceedInAttempt(a_1) ::: The four succeed in their attempt.",
        "Climbs(a_1, c_0) ::: They climb the snow peaks for the sixth ordeal.",
        "ExtendsLine(a_1) ::: Utah decides to extend his line.",
        "FallsToDeath(a_3) ::: Chowder slips and falls to his death.",
        "ExperiencesDepression(a_1) ::: Utah experiences depression after Chowder's death."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "394": [
    {
      "id": 394,
      "context_id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 1,
      "paragraph": "Seven years later, Utah is an FBI agent candidate. He attends a briefing on a skyscraper heist, in which the criminals steal diamonds, escaping by parachute, in Mumbai. A similar heist happens over Mexico where the criminals unload millions of dollars in bills over Mexico, then disappear into the Cave of Swallows. Utah's research concludes that they were done by the same men, who are attempting to complete the Ozaki 8, a list of eight extreme ordeals to honor the forces of nature. They have already completed three, and Utah predicts they'll attempt the fourth on a rare sea wave phenomenon in France. After presenting his analysis, Utah is sent undercover to France under a field agent named Pappas (Ray Winstone). They reach France and Utah gets help from others to surf the tall tube wave.",
      "question_template": "Samsara and Bodhi both knew [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The Ozaki 8, a list of eight extreme ordeals to honor the forces of nature",
        "Attempt the fourth on a rare sea wave phenomenon in France"
      ],
      "predicates": [
        "FBI_Agent_Candidate(x) ::: x is an FBI agent candidate.",
        "Attends(x, y) ::: x attends event y.",
        "Heist(x) ::: x is a heist.",
        "Steal(x, y) ::: x steals y.",
        "EscapeByParachute(x) ::: x escapes by parachute.",
        "Unload(x, y) ::: x unloads y.",
        "Disappear(x, y) ::: x disappears into location y.",
        "Research(x, y) ::: x conducts research on y.",
        "Complete(x, y) ::: x completes ordeal y.",
        "Attempt(x, y) ::: x attempts ordeal y.",
        "Help(x, y) ::: x gets help from y.",
        "Surf(x, y) ::: x surfs wave y.",
        "FieldAgent(x, y) ::: x is a field agent for y."
      ],
      "premises": [
        "FBI_Agent_Candidate(utah) ::: Utah is an FBI agent candidate.",
        "Attends(utah, briefing) ::: Utah attends a briefing on a skyscraper heist.",
        "Heist(skyscraper_heist) ::: The event is a heist involving a skyscraper.",
        "Steal(criminals, diamonds) ::: The criminals steal diamonds.",
        "EscapeByParachute(criminals) ::: The criminals escape by parachute.",
        "Heist(mexico_heist) ::: A similar heist happens over Mexico.",
        "Unload(criminals, millions_of_dollars) ::: The criminals unload millions of dollars in bills.",
        "Disappear(criminals, cave_of_swallows) ::: The criminals disappear into the Cave of Swallows.",
        "Research(utah, heists) ::: Utah's research concludes that the heists were done by the same men.",
        "Complete(criminals, eight_ordeals) ::: The criminals are attempting to complete the Ozaki 8.",
        "Attempt(criminals, fourth_ordeal) ::: They will attempt the fourth ordeal.",
        "RareSeaWavePhenomenon(france) ::: The fourth ordeal is on a rare sea wave phenomenon in France.",
        "FieldAgent(pappas, fbi) ::: Pappas is a field agent for the FBI.",
        "Help(utah, others) ::: Utah gets help from others.",
        "Surf(utah, tall_tube_wave) ::: Utah surfs the tall tube wave.",
        "Conclusion:",
        "Attempt(criminals, eight_ordeals) ::: The criminals are attempting to complete the Ozaki 8 by performing extreme ordeals."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "395": [
    {
      "id": 395,
      "context_id": "35592c2abea624d315c5171d67ab5e14794ca071",
      "paragraph_id": 3,
      "paragraph": "After a party, Samsara explains that she and Bodhi both knew Ono Ozaki when they were young, that her parents died in an avalanche accident and Ozaki gave her a home after. She explains further that Ozaki actually completed his third ordeal, as was widely believed. He did not die attempting the ordeal, but was actually killed by a whaling ship crashing into his boat while he was trying to save humpback whales. On his boat, a young boy, Bodhi, decided not to tell the truth of his story but to finish what Ozaki started.",
      "question_template": "Bodhi leaped down the waterfall because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Samsara explains that she and Bodhi both knew Ono Ozaki when they were young, that her parents died in an avalanche accident"
      ],
      "predicates": [
        "Knew(x, y) ::: x knew y when they were young.",
        "GaveHome(x, y) ::: x gave y a home.",
        "CompletedOrdeal(x) ::: x completed his third ordeal.",
        "DidNotDie(x) ::: x did not die attempting the ordeal.",
        "KilledByWhalingShip(x) ::: x was killed by a whaling ship.",
        "TryingToSave(x, y) ::: x was trying to save y.",
        "DecidedNotToTellTruth(x) ::: x decided not to tell the truth of his story.",
        "FinishedWhatStarted(x, y) ::: x finished what y started."
      ],
      "premises": [
        "Knew(samsara, ozaki) ∧ Knew(bodhi, ozaki) ::: Samsara and Bodhi both knew Ono Ozaki when they were young.",
        "GaveHome(ozaki, samsara) ::: Ozaki gave Samsara a home after her parents died in an avalanche accident.",
        "CompletedOrdeal(ozaki) ::: Ozaki actually completed his third ordeal, as was widely believed.",
        "¬DidNotDie(ozaki) ∧ KilledByWhalingShip(ozaki) ::: He did not die attempting the ordeal, but was actually killed by a whaling ship crashing into his boat.",
        "TryingToSave(ozaki, humpbackWhales) ::: Ozaki was trying to save humpback whales.",
        "DecidedNotToTellTruth(bodhi) ::: Bodhi decided not to tell the truth of his story.",
        "FinishedWhatStarted(bodhi, ozaki) ::: Bodhi finished what Ozaki started."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "401": [
    {
      "id": 401,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 0,
      "paragraph": " The film opens with criminal Dean Keaton lying badly wounded on a ship docked in the San Pedro Bay. He is confronted by a mysterious figure whom he calls \"Keyser\", who shoots him dead and sets fire to the ship,",
      "question_template": "The criminals escape the skyscraper heist by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "San Pedro Bay"
      ],
      "predicates": [
        "Wounded(dean) ::: Dean Keaton is badly wounded.",
        "Confronted(dean, keyser) ::: Dean Keaton is confronted by the mysterious figure called \"Keyser\".",
        "Killed(dean, keyser) ::: Dean Keaton is killed by the mysterious figure.",
        "SetFire(ship) ::: The ship is set on fire.",
        "Docked(ship, sanPedroBay) ::: The ship is docked in San Pedro Bay."
      ],
      "premises": [
        "Wounded(dean) ::: The film opens with criminal Dean Keaton lying badly wounded.",
        "Confronted(dean, keyser) ::: He is confronted by a mysterious figure whom he calls \"Keyser\".",
        "Killed(dean, keyser) ::: Keyser shoots Dean Keaton dead.",
        "SetFire(ship) ::: Keyser sets fire to the ship.",
        "Docked(ship, sanPedroBay) ::: The ship is docked in the San Pedro Bay."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "404": [
    {
      "id": 404,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 6,
      "paragraph": "Moments later, Kujan realizes that Verbal's entire story was a lie, pieced together from details on a crowded bulletin board in his office. Meanwhile, Verbal walks outside, gradually dropping his limp and flexing his supposedly withered hand. As Kujan runs after Verbal, a fax comes in from California: a police sketch artist's rendering of Söze, dictated by Kovash, that looks exactly like Verbal. Kujan misses Verbal by moments, as the latter disappears into a car driven by \"Kobayashi\".",
      "question_template": "Utah must face [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Söze",
        "Verbal"
      ],
      "predicates": [
        "Fabricated(x, y) ::: x's story is fabricated from details found in y's office.",
        "Identical(x, y) ::: x's appearance is identical to y's appearance.",
        "Misses(x, y) ::: x misses y.",
        "Disappears(x, y) ::: x disappears into a vehicle driven by y.",
        "Flexes(x, y) ::: x flexes y."
      ],
      "premises": [
        "Fabricated(b_1, a_1) ::: Verbal's story is fabricated from details found in Kujan's office.",
        "Identical(a_2, a_3) ::: Verbal's appearance is identical to the police sketch of Söze.",
        "Misses(a_1, a_2) ::: Kujan misses Verbal by moments.",
        "Disappears(a_2, \"Kobayashi\") ::: Verbal disappears into a car driven by Kobayashi.",
        "Flexes(a_2, f) ::: Verbal flexes his supposedly withered hand."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "405": [
    {
      "id": 405,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 2,
      "paragraph": "Verbal explains that, six weeks earlier in New York, he and the other criminals were arrested on supposedly a trumped-up hijacking charge, and decided to pull another heist to get back at the police. Led by Keaton, a former corrupt policeman, they robbed a group of corrupt cops who transported smugglers in a police convoy. They then went to California to fence the stolen jewels with a criminal named Redfoot. Redfoot turned them on to another jewel heist, but the quarry turned out to be heroin, and the five had to shoot their way out. Soon after, a lawyer named Kobayashi contacted them and told them that Keyser Söze, a Turkish crime lord with a mythical reputation from whom all of the thieves had unwittingly stolen (including Hockney who hijacked the original truck six weeks earlier in New York), had offered them a job: invade a ship manned by a gang of Argentinian drug dealers with whom Söze was competing and destroy the $91 million worth of cocaine that they were transporting.",
      "question_template": "Samsara's parents died in an avalanche.",
      "candidate_answers": [
        "A lawyer named Kobayashi contacted them and told them that Keyser Söze",
        "Kobayashi"
      ],
      "predicates": [
        "Arrested(x, y) ::: x was arrested on charge y.",
        "Robbed(x, y) ::: x robbed y.",
        "Fenced(x, y) ::: x fenced stolen goods with y.",
        "Contacted(x, y) ::: x contacted y.",
        "OfferedJob(x, y, z) ::: x offered y a job to z.",
        "Transporting(x, y) ::: x is transporting y.",
        "Competing(x, y) ::: x is competing with y."
      ],
      "premises": [
        "Arrested(a_2, trumped_up_hijacking_charge) ::: Verbal and the other criminals were arrested on supposedly a trumped-up hijacking charge.",
        "Robbed(a_0, corrupt_cops) ::: Led by Keaton, they robbed a group of corrupt cops.",
        "Fenced(a_0, Redfoot) ::: They went to California to fence the stolen jewels with a criminal named Redfoot.",
        "Contacted(Kobayashi, a_0) ::: A lawyer named Kobayashi contacted them.",
        "OfferedJob(Keyser_Söze, a_0, invade_ship_and_destroy_cocaine) ::: Keyser Söze offered the group of criminals a job to invade a ship and destroy the cocaine being transported by the Argentinian drug dealers.",
        "Transporting(argentinian_drug_dealers, cocaine) ::: The Argentinian drug dealers were transporting cocaine.",
        "Competing(Keyser_Söze, argentinian_drug_dealers) ::: Keyser Söze was competing with the Argentinian drug dealers."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 405,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 6,
      "paragraph": "Moments later, Kujan realizes that Verbal's entire story was a lie, pieced together from details on a crowded bulletin board in his office. Meanwhile, Verbal walks outside, gradually dropping his limp and flexing his supposedly withered hand. As Kujan runs after Verbal, a fax comes in from California: a police sketch artist's rendering of Söze, dictated by Kovash, that looks exactly like Verbal. Kujan misses Verbal by moments, as the latter disappears into a car driven by \"Kobayashi\".",
      "question_template": "Samsara's parents died in an avalanche.",
      "candidate_answers": [
        "Kovash"
      ],
      "predicates": [
        "Fabricated(x, y) ::: x's story is fabricated from details found in y's office.",
        "Identical(x, y) ::: x's appearance is identical to y's appearance.",
        "Misses(x, y) ::: x misses y.",
        "Disappears(x, y) ::: x disappears into a vehicle driven by y.",
        "Flexes(x, y) ::: x flexes y."
      ],
      "premises": [
        "Fabricated(b_1, a_1) ::: Verbal's story is fabricated from details found in Kujan's office.",
        "Identical(a_2, a_3) ::: Verbal's appearance is identical to the police sketch of Söze.",
        "Misses(a_1, a_2) ::: Kujan misses Verbal by moments.",
        "Disappears(a_2, \"Kobayashi\") ::: Verbal disappears into a car driven by Kobayashi.",
        "Flexes(a_2, f) ::: Verbal flexes his supposedly withered hand."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "407": [
    {
      "id": 407,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 6,
      "paragraph": "Moments later, Kujan realizes that Verbal's entire story was a lie, pieced together from details on a crowded bulletin board in his office. Meanwhile, Verbal walks outside, gradually dropping his limp and flexing his supposedly withered hand. As Kujan runs after Verbal, a fax comes in from California: a police sketch artist's rendering of Söze, dictated by Kovash, that looks exactly like Verbal. Kujan misses Verbal by moments, as the latter disappears into a car driven by \"Kobayashi\".",
      "question_template": "The FBI freezes the assets of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "A fax comes in from California: a police sketch artist's rendering of Söze, dictated by Kovash, that looks exactly like Verbal.",
        "Verbal walks outside, gradually dropping his limp and flexing his supposedly withered hand."
      ],
      "predicates": [
        "Fabricated(x, y) ::: x's story is fabricated from details found in y's office.",
        "Identical(x, y) ::: x's appearance is identical to y's appearance.",
        "Misses(x, y) ::: x misses y.",
        "Disappears(x, y) ::: x disappears into a vehicle driven by y.",
        "Flexes(x, y) ::: x flexes y."
      ],
      "premises": [
        "Fabricated(b_1, a_1) ::: Verbal's story is fabricated from details found in Kujan's office.",
        "Identical(a_2, a_3) ::: Verbal's appearance is identical to the police sketch of Söze.",
        "Misses(a_1, a_2) ::: Kujan misses Verbal by moments.",
        "Disappears(a_2, \"Kobayashi\") ::: Verbal disappears into a car driven by Kobayashi.",
        "Flexes(a_2, f) ::: Verbal flexes his supposedly withered hand."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "408": [
    {
      "id": 408,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 2,
      "paragraph": "Verbal explains that, six weeks earlier in New York, he and the other criminals were arrested on supposedly a trumped-up hijacking charge, and decided to pull another heist to get back at the police. Led by Keaton, a former corrupt policeman, they robbed a group of corrupt cops who transported smugglers in a police convoy. They then went to California to fence the stolen jewels with a criminal named Redfoot. Redfoot turned them on to another jewel heist, but the quarry turned out to be heroin, and the five had to shoot their way out. Soon after, a lawyer named Kobayashi contacted them and told them that Keyser Söze, a Turkish crime lord with a mythical reputation from whom all of the thieves had unwittingly stolen (including Hockney who hijacked the original truck six weeks earlier in New York), had offered them a job: invade a ship manned by a gang of Argentinian drug dealers with whom Söze was competing and destroy the $91 million worth of cocaine that they were transporting.",
      "question_template": "Grommet dies [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Another jewel heist, but the quarry turned out to be heroin"
      ],
      "predicates": [
        "Arrested(x, y) ::: x was arrested on charge y.",
        "Robbed(x, y) ::: x robbed y.",
        "Fenced(x, y) ::: x fenced stolen goods with y.",
        "Contacted(x, y) ::: x contacted y.",
        "OfferedJob(x, y, z) ::: x offered y a job to z.",
        "Transporting(x, y) ::: x is transporting y.",
        "Competing(x, y) ::: x is competing with y."
      ],
      "premises": [
        "Arrested(a_2, trumped_up_hijacking_charge) ::: Verbal and the other criminals were arrested on supposedly a trumped-up hijacking charge.",
        "Robbed(a_0, corrupt_cops) ::: Led by Keaton, they robbed a group of corrupt cops.",
        "Fenced(a_0, Redfoot) ::: They went to California to fence the stolen jewels with a criminal named Redfoot.",
        "Contacted(Kobayashi, a_0) ::: A lawyer named Kobayashi contacted them.",
        "OfferedJob(Keyser_Söze, a_0, invade_ship_and_destroy_cocaine) ::: Keyser Söze offered the group of criminals a job to invade a ship and destroy the cocaine being transported by the Argentinian drug dealers.",
        "Transporting(argentinian_drug_dealers, cocaine) ::: The Argentinian drug dealers were transporting cocaine.",
        "Competing(Keyser_Söze, argentinian_drug_dealers) ::: Keyser Söze was competing with the Argentinian drug dealers."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 408,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 4,
      "paragraph": "Verbal goes on to explain that, after Fenster had bailed on the group, Kobayashi gave them a location at which to find their compatriot's dead body. They tried to kill Kobayashi, but he strong-armed them into performing the heist by threatening their loved ones. They staked out the ship and killed several Argentinian and Hungarian gangsters, but found no drugs on board. McManus, Hockney and a man locked aboard the ship were killed by an unseen person, who also killed Keaton and set the ship on fire as Verbal looked on.",
      "question_template": "Grommet dies [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- A location at which to find their compatriot's dead body",
        "- They tried to kill Kobayashi",
        "- Performing the heist by threatening their loved ones",
        "- They staked out the ship and killed several Argentinian and Hungarian gangsters",
        "- Found no drugs on board",
        "- McManus, Hockney and a man locked aboard the ship were killed by an unseen person",
        "- Killed Keaton and set the ship on fire as Verbal looked on"
      ],
      "predicates": [
        "BailedOnGroup(x) ::: x bailed on the group.",
        "GaveLocation(x, y) ::: x gave y a location.",
        "TriedToKill(x, y) ::: x tried to kill y.",
        "StrongArmed(x, y) ::: x strong-armed y.",
        "PerformedHeist(x) ::: x performed the heist.",
        "ThreatenedLovedOnes(x) ::: x threatened their loved ones.",
        "StakedOut(x, y) ::: x staked out y.",
        "Killed(x, y) ::: x killed y.",
        "FoundDrugsOnBoard(x) ::: x found drugs on board.",
        "KilledByUnseenPerson(x) ::: x was killed by an unseen person.",
        "SetOnFire(x) ::: x was set on fire.",
        "LookedOn(x, y) ::: x looked on at y."
      ],
      "premises": [
        "BailedOnGroup(fenster) ::: Fenster had bailed on the group.",
        "GaveLocation(kobayashi, deadBodyLocation) ::: Kobayashi gave them a location at which to find their compatriot's dead body.",
        "TriedToKill(group, kobayashi) ::: They tried to kill Kobayashi.",
        "StrongArmed(kobayashi, group) ::: Kobayashi strong-armed them into performing the heist by threatening their loved ones.",
        "StakedOut(group, ship) ::: They staked out the ship.",
        "Killed(group, argentinianGangsters) ::: They killed several Argentinian gangsters.",
        "Killed(group, hungarianGangsters) ::: They killed several Hungarian gangsters.",
        "¬FoundDrugsOnBoard(group) ::: They found no drugs on board.",
        "Killed(mcmanus, unseenPerson) ::: McManus was killed by an unseen person.",
        "Killed(hockney, unseenPerson) ::: Hockney was killed by an unseen person.",
        "Killed(lockedMan, unseenPerson) ::: The man locked aboard the ship was killed by an unseen person.",
        "Killed(keaton, unseenPerson) ::: Keaton was killed by an unseen person.",
        "SetOnFire(ship) ::: The ship was set on fire.",
        "LookedOn(verbal, ship) ::: Verbal looked on as the ship was set on fire."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 408,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 5,
      "paragraph": "Verbal concludes his story, but Kujan does not believe it. He insists that Keaton must be Söze, as one of the murder victims on the boat was Arturo Marquez, a drug dealer who escaped prosecution by claiming he could identify Söze — and who was represented by Edie Finneran, Keaton's lawyer and girlfriend. Kujan claims that the Argentinians were selling Marquez to Söze's Hungarian rivals and Keaton used the heist as a distraction to let him kill Marquez. Kujan also informs Verbal that Finneran has been murdered. Verbal says that the entire plan was Keaton's idea, but refuses to testify in court. Verbal's bond is posted and he is released.",
      "question_template": "Grommet dies [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The heist as a distraction to let him kill Marquez"
      ],
      "predicates": [
        "ImplicatedInMurder(x, y) ::: x is implicated in the murder of y.",
        "ConnectedToEvents(x, y) ::: x's murder is connected to the events surrounding y.",
        "ReleaseContingentOn(x, y) ::: x's release is contingent upon the posting of y.",
        "Testify(x) ::: x testifies in court.",
        "Idea(x, y) ::: x is the idea of y."
      ],
      "premises": [
        "ImplicatedInMurder(keaton, arturoMarquez) ::: Keaton is implicated in the murder of Arturo Marquez.",
        "ConnectedToEvents(edieFinneran, soze) ::: Edie Finneran's murder is connected to the events surrounding Söze.",
        "ReleaseContingentOn(verbal, bond) ::: Verbal's release is contingent upon the posting of his bond.",
        "¬Testify(verbal) ::: Verbal refuses to testify in court.",
        "Idea(keaton, plan) ::: The entire plan was Keaton's idea."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 408,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 6,
      "paragraph": "Moments later, Kujan realizes that Verbal's entire story was a lie, pieced together from details on a crowded bulletin board in his office. Meanwhile, Verbal walks outside, gradually dropping his limp and flexing his supposedly withered hand. As Kujan runs after Verbal, a fax comes in from California: a police sketch artist's rendering of Söze, dictated by Kovash, that looks exactly like Verbal. Kujan misses Verbal by moments, as the latter disappears into a car driven by \"Kobayashi\".",
      "question_template": "Grommet dies [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Verbal's entire story was a lie",
        "- Pieced together from details on a crowded bulletin board in his office",
        "- A fax comes in from California: a police sketch artist's rendering of Söze, dictated by Kovash, that looks exactly like Verbal"
      ],
      "predicates": [
        "Fabricated(x, y) ::: x's story is fabricated from details found in y's office.",
        "Identical(x, y) ::: x's appearance is identical to y's appearance.",
        "Misses(x, y) ::: x misses y.",
        "Disappears(x, y) ::: x disappears into a vehicle driven by y.",
        "Flexes(x, y) ::: x flexes y."
      ],
      "premises": [
        "Fabricated(b_1, a_1) ::: Verbal's story is fabricated from details found in Kujan's office.",
        "Identical(a_2, a_3) ::: Verbal's appearance is identical to the police sketch of Söze.",
        "Misses(a_1, a_2) ::: Kujan misses Verbal by moments.",
        "Disappears(a_2, \"Kobayashi\") ::: Verbal disappears into a car driven by Kobayashi.",
        "Flexes(a_2, f) ::: Verbal flexes his supposedly withered hand."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "409": [
    {
      "id": 409,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 1,
      "paragraph": "The bloodbath on the ship leaves only two survivors: Arkosh Kovash, a Hungarian mobster hospitalized with severe burns; and Roger \"Verbal\" Kint, a con artist with cerebral palsy. Customs agent Dave Kujan flies in from New York City to interrogate Verbal, who describes in flashback the events that led him and four other criminals - Keaton, Michael McManus, Fred Fenster and Todd Hockney - onto the ship.",
      "question_template": "Angel Falls is located in [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Arkosh Kovash, a Hungarian mobster hospitalized with severe burns",
        "Roger \"Verbal\" Kint, a con artist with cerebral palsy"
      ],
      "predicates": [
        "Survivor(x) ::: x is a survivor of the bloodbath on the ship.",
        "Mobster(x) ::: x is a mobster.",
        "Hospitalized(x) ::: x is hospitalized.",
        "ConArtist(x) ::: x is a con artist.",
        "CerebralPalsy(x) ::: x has cerebral palsy.",
        "Interrogates(x, y) ::: x interrogates y.",
        "Describes(x, y) ::: x describes y.",
        "Criminal(x) ::: x is a criminal.",
        "PartOfGroup(x, g) ::: x is part of group g.",
        "Event(x, y) ::: x is an event that leads to y."
      ],
      "premises": [
        "Survivor(arkosh) ∧ Mobster(arkosh) ∧ Hospitalized(arkosh) ::: Arkosh Kovash is a Hungarian mobster hospitalized with severe burns.",
        "Survivor(verbal) ∧ ConArtist(verbal) ∧ CerebralPalsy(verbal) ::: Roger \"Verbal\" Kint is a con artist with cerebral palsy.",
        "Interrogates(kujan, verbal) ::: Customs agent Dave Kujan interrogates Verbal.",
        "Describes(verbal, story) ::: Verbal describes the events that led him and four other criminals onto the ship.",
        "∃x (Criminal(x) ∧ PartOfGroup(x, group)) ::: There are criminals who are part of a group.",
        "Event(story, ship) ::: The story involves events that led to the situation on the ship.",
        "Conclusion:",
        "Survivor(arkosh) ∧ Survivor(verbal) ::: Arkosh Kovash and Roger \"Verbal\" Kint are the survivors of the bloodbath on the ship."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "410": [
    {
      "id": 410,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 5,
      "paragraph": "Verbal concludes his story, but Kujan does not believe it. He insists that Keaton must be Söze, as one of the murder victims on the boat was Arturo Marquez, a drug dealer who escaped prosecution by claiming he could identify Söze — and who was represented by Edie Finneran, Keaton's lawyer and girlfriend. Kujan claims that the Argentinians were selling Marquez to Söze's Hungarian rivals and Keaton used the heist as a distraction to let him kill Marquez. Kujan also informs Verbal that Finneran has been murdered. Verbal says that the entire plan was Keaton's idea, but refuses to testify in court. Verbal's bond is posted and he is released.",
      "question_template": "Bodhi is surfing in the [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Arturo Marquez",
        "One of the murder victims on the boat"
      ],
      "predicates": [
        "ImplicatedInMurder(x, y) ::: x is implicated in the murder of y.",
        "ConnectedToEvents(x, y) ::: x's murder is connected to the events surrounding y.",
        "ReleaseContingentOn(x, y) ::: x's release is contingent upon the posting of y.",
        "Testify(x) ::: x testifies in court.",
        "Idea(x, y) ::: x is the idea of y."
      ],
      "premises": [
        "ImplicatedInMurder(keaton, arturoMarquez) ::: Keaton is implicated in the murder of Arturo Marquez.",
        "ConnectedToEvents(edieFinneran, soze) ::: Edie Finneran's murder is connected to the events surrounding Söze.",
        "ReleaseContingentOn(verbal, bond) ::: Verbal's release is contingent upon the posting of his bond.",
        "¬Testify(verbal) ::: Verbal refuses to testify in court.",
        "Idea(keaton, plan) ::: The entire plan was Keaton's idea."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "411": [
    {
      "id": 411,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 0,
      "paragraph": " The film opens with criminal Dean Keaton lying badly wounded on a ship docked in the San Pedro Bay. He is confronted by a mysterious figure whom he calls \"Keyser\", who shoots him dead and sets fire to the ship,",
      "question_template": "The ship is docked in [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The ship is set on fire."
      ],
      "predicates": [
        "Wounded(dean) ::: Dean Keaton is badly wounded.",
        "Confronted(dean, keyser) ::: Dean Keaton is confronted by the mysterious figure called \"Keyser\".",
        "Killed(dean, keyser) ::: Dean Keaton is killed by the mysterious figure.",
        "SetFire(ship) ::: The ship is set on fire.",
        "Docked(ship, sanPedroBay) ::: The ship is docked in San Pedro Bay."
      ],
      "premises": [
        "Wounded(dean) ::: The film opens with criminal Dean Keaton lying badly wounded.",
        "Confronted(dean, keyser) ::: He is confronted by a mysterious figure whom he calls \"Keyser\".",
        "Killed(dean, keyser) ::: Keyser shoots Dean Keaton dead.",
        "SetFire(ship) ::: Keyser sets fire to the ship.",
        "Docked(ship, sanPedroBay) ::: The ship is docked in the San Pedro Bay."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 411,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 2,
      "paragraph": "Verbal explains that, six weeks earlier in New York, he and the other criminals were arrested on supposedly a trumped-up hijacking charge, and decided to pull another heist to get back at the police. Led by Keaton, a former corrupt policeman, they robbed a group of corrupt cops who transported smugglers in a police convoy. They then went to California to fence the stolen jewels with a criminal named Redfoot. Redfoot turned them on to another jewel heist, but the quarry turned out to be heroin, and the five had to shoot their way out. Soon after, a lawyer named Kobayashi contacted them and told them that Keyser Söze, a Turkish crime lord with a mythical reputation from whom all of the thieves had unwittingly stolen (including Hockney who hijacked the original truck six weeks earlier in New York), had offered them a job: invade a ship manned by a gang of Argentinian drug dealers with whom Söze was competing and destroy the $91 million worth of cocaine that they were transporting.",
      "question_template": "The ship is docked in [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- They robbed a group of corrupt cops who transported smugglers in a police convoy.",
        "- They then went to California to fence the stolen jewels with a criminal named Redfoot.",
        "- Redfoot turned them on to another jewel heist, but the quarry turned out to be heroin, and the five had to shoot their way out.",
        "- A lawyer named Kobayashi contacted them and told them that Keyser Söze... had offered them a job: invade a ship manned by a gang of Argentinian drug dealers... and destroy the $91 million worth of cocaine that they were transporting."
      ],
      "predicates": [
        "Arrested(x, y) ::: x was arrested on charge y.",
        "Robbed(x, y) ::: x robbed y.",
        "Fenced(x, y) ::: x fenced stolen goods with y.",
        "Contacted(x, y) ::: x contacted y.",
        "OfferedJob(x, y, z) ::: x offered y a job to z.",
        "Transporting(x, y) ::: x is transporting y.",
        "Competing(x, y) ::: x is competing with y."
      ],
      "premises": [
        "Arrested(a_2, trumped_up_hijacking_charge) ::: Verbal and the other criminals were arrested on supposedly a trumped-up hijacking charge.",
        "Robbed(a_0, corrupt_cops) ::: Led by Keaton, they robbed a group of corrupt cops.",
        "Fenced(a_0, Redfoot) ::: They went to California to fence the stolen jewels with a criminal named Redfoot.",
        "Contacted(Kobayashi, a_0) ::: A lawyer named Kobayashi contacted them.",
        "OfferedJob(Keyser_Söze, a_0, invade_ship_and_destroy_cocaine) ::: Keyser Söze offered the group of criminals a job to invade a ship and destroy the cocaine being transported by the Argentinian drug dealers.",
        "Transporting(argentinian_drug_dealers, cocaine) ::: The Argentinian drug dealers were transporting cocaine.",
        "Competing(Keyser_Söze, argentinian_drug_dealers) ::: Keyser Söze was competing with the Argentinian drug dealers."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 411,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 4,
      "paragraph": "Verbal goes on to explain that, after Fenster had bailed on the group, Kobayashi gave them a location at which to find their compatriot's dead body. They tried to kill Kobayashi, but he strong-armed them into performing the heist by threatening their loved ones. They staked out the ship and killed several Argentinian and Hungarian gangsters, but found no drugs on board. McManus, Hockney and a man locked aboard the ship were killed by an unseen person, who also killed Keaton and set the ship on fire as Verbal looked on.",
      "question_template": "The ship is docked in [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- They staked out the ship and killed several Argentinian and Hungarian gangsters, but found no drugs on board.",
        "- McManus, Hockney and a man locked aboard the ship were killed by an unseen person, who also killed Keaton and set the ship on fire as Verbal looked on."
      ],
      "predicates": [
        "BailedOnGroup(x) ::: x bailed on the group.",
        "GaveLocation(x, y) ::: x gave y a location.",
        "TriedToKill(x, y) ::: x tried to kill y.",
        "StrongArmed(x, y) ::: x strong-armed y.",
        "PerformedHeist(x) ::: x performed the heist.",
        "ThreatenedLovedOnes(x) ::: x threatened their loved ones.",
        "StakedOut(x, y) ::: x staked out y.",
        "Killed(x, y) ::: x killed y.",
        "FoundDrugsOnBoard(x) ::: x found drugs on board.",
        "KilledByUnseenPerson(x) ::: x was killed by an unseen person.",
        "SetOnFire(x) ::: x was set on fire.",
        "LookedOn(x, y) ::: x looked on at y."
      ],
      "premises": [
        "BailedOnGroup(fenster) ::: Fenster had bailed on the group.",
        "GaveLocation(kobayashi, deadBodyLocation) ::: Kobayashi gave them a location at which to find their compatriot's dead body.",
        "TriedToKill(group, kobayashi) ::: They tried to kill Kobayashi.",
        "StrongArmed(kobayashi, group) ::: Kobayashi strong-armed them into performing the heist by threatening their loved ones.",
        "StakedOut(group, ship) ::: They staked out the ship.",
        "Killed(group, argentinianGangsters) ::: They killed several Argentinian gangsters.",
        "Killed(group, hungarianGangsters) ::: They killed several Hungarian gangsters.",
        "¬FoundDrugsOnBoard(group) ::: They found no drugs on board.",
        "Killed(mcmanus, unseenPerson) ::: McManus was killed by an unseen person.",
        "Killed(hockney, unseenPerson) ::: Hockney was killed by an unseen person.",
        "Killed(lockedMan, unseenPerson) ::: The man locked aboard the ship was killed by an unseen person.",
        "Killed(keaton, unseenPerson) ::: Keaton was killed by an unseen person.",
        "SetOnFire(ship) ::: The ship was set on fire.",
        "LookedOn(verbal, ship) ::: Verbal looked on as the ship was set on fire."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "412": [
    {
      "id": 412,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 1,
      "paragraph": "The bloodbath on the ship leaves only two survivors: Arkosh Kovash, a Hungarian mobster hospitalized with severe burns; and Roger \"Verbal\" Kint, a con artist with cerebral palsy. Customs agent Dave Kujan flies in from New York City to interrogate Verbal, who describes in flashback the events that led him and four other criminals - Keaton, Michael McManus, Fred Fenster and Todd Hockney - onto the ship.",
      "question_template": "Kujan thinks Keaton is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "four other criminals",
        "Keaton, Michael McManus, Fred Fenster and Todd Hockney"
      ],
      "predicates": [
        "Survivor(x) ::: x is a survivor of the bloodbath on the ship.",
        "Mobster(x) ::: x is a mobster.",
        "Hospitalized(x) ::: x is hospitalized.",
        "ConArtist(x) ::: x is a con artist.",
        "CerebralPalsy(x) ::: x has cerebral palsy.",
        "Interrogates(x, y) ::: x interrogates y.",
        "Describes(x, y) ::: x describes y.",
        "Criminal(x) ::: x is a criminal.",
        "PartOfGroup(x, g) ::: x is part of group g.",
        "Event(x, y) ::: x is an event that leads to y."
      ],
      "premises": [
        "Survivor(arkosh) ∧ Mobster(arkosh) ∧ Hospitalized(arkosh) ::: Arkosh Kovash is a Hungarian mobster hospitalized with severe burns.",
        "Survivor(verbal) ∧ ConArtist(verbal) ∧ CerebralPalsy(verbal) ::: Roger \"Verbal\" Kint is a con artist with cerebral palsy.",
        "Interrogates(kujan, verbal) ::: Customs agent Dave Kujan interrogates Verbal.",
        "Describes(verbal, story) ::: Verbal describes the events that led him and four other criminals onto the ship.",
        "∃x (Criminal(x) ∧ PartOfGroup(x, group)) ::: There are criminals who are part of a group.",
        "Event(story, ship) ::: The story involves events that led to the situation on the ship.",
        "Conclusion:",
        "Survivor(arkosh) ∧ Survivor(verbal) ::: Arkosh Kovash and Roger \"Verbal\" Kint are the survivors of the bloodbath on the ship."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 412,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 2,
      "paragraph": "Verbal explains that, six weeks earlier in New York, he and the other criminals were arrested on supposedly a trumped-up hijacking charge, and decided to pull another heist to get back at the police. Led by Keaton, a former corrupt policeman, they robbed a group of corrupt cops who transported smugglers in a police convoy. They then went to California to fence the stolen jewels with a criminal named Redfoot. Redfoot turned them on to another jewel heist, but the quarry turned out to be heroin, and the five had to shoot their way out. Soon after, a lawyer named Kobayashi contacted them and told them that Keyser Söze, a Turkish crime lord with a mythical reputation from whom all of the thieves had unwittingly stolen (including Hockney who hijacked the original truck six weeks earlier in New York), had offered them a job: invade a ship manned by a gang of Argentinian drug dealers with whom Söze was competing and destroy the $91 million worth of cocaine that they were transporting.",
      "question_template": "Kujan thinks Keaton is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "the other criminals",
        "the five"
      ],
      "predicates": [
        "Arrested(x, y) ::: x was arrested on charge y.",
        "Robbed(x, y) ::: x robbed y.",
        "Fenced(x, y) ::: x fenced stolen goods with y.",
        "Contacted(x, y) ::: x contacted y.",
        "OfferedJob(x, y, z) ::: x offered y a job to z.",
        "Transporting(x, y) ::: x is transporting y.",
        "Competing(x, y) ::: x is competing with y."
      ],
      "premises": [
        "Arrested(a_2, trumped_up_hijacking_charge) ::: Verbal and the other criminals were arrested on supposedly a trumped-up hijacking charge.",
        "Robbed(a_0, corrupt_cops) ::: Led by Keaton, they robbed a group of corrupt cops.",
        "Fenced(a_0, Redfoot) ::: They went to California to fence the stolen jewels with a criminal named Redfoot.",
        "Contacted(Kobayashi, a_0) ::: A lawyer named Kobayashi contacted them.",
        "OfferedJob(Keyser_Söze, a_0, invade_ship_and_destroy_cocaine) ::: Keyser Söze offered the group of criminals a job to invade a ship and destroy the cocaine being transported by the Argentinian drug dealers.",
        "Transporting(argentinian_drug_dealers, cocaine) ::: The Argentinian drug dealers were transporting cocaine.",
        "Competing(Keyser_Söze, argentinian_drug_dealers) ::: Keyser Söze was competing with the Argentinian drug dealers."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "413": [
    {
      "id": 413,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 2,
      "paragraph": "Verbal explains that, six weeks earlier in New York, he and the other criminals were arrested on supposedly a trumped-up hijacking charge, and decided to pull another heist to get back at the police. Led by Keaton, a former corrupt policeman, they robbed a group of corrupt cops who transported smugglers in a police convoy. They then went to California to fence the stolen jewels with a criminal named Redfoot. Redfoot turned them on to another jewel heist, but the quarry turned out to be heroin, and the five had to shoot their way out. Soon after, a lawyer named Kobayashi contacted them and told them that Keyser Söze, a Turkish crime lord with a mythical reputation from whom all of the thieves had unwittingly stolen (including Hockney who hijacked the original truck six weeks earlier in New York), had offered them a job: invade a ship manned by a gang of Argentinian drug dealers with whom Söze was competing and destroy the $91 million worth of cocaine that they were transporting.",
      "question_template": "A police sketch artist's rendering of Söze was dictated by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "California to fence the stolen jewels with a criminal named Redfoot"
      ],
      "predicates": [
        "Arrested(x, y) ::: x was arrested on charge y.",
        "Robbed(x, y) ::: x robbed y.",
        "Fenced(x, y) ::: x fenced stolen goods with y.",
        "Contacted(x, y) ::: x contacted y.",
        "OfferedJob(x, y, z) ::: x offered y a job to z.",
        "Transporting(x, y) ::: x is transporting y.",
        "Competing(x, y) ::: x is competing with y."
      ],
      "premises": [
        "Arrested(a_2, trumped_up_hijacking_charge) ::: Verbal and the other criminals were arrested on supposedly a trumped-up hijacking charge.",
        "Robbed(a_0, corrupt_cops) ::: Led by Keaton, they robbed a group of corrupt cops.",
        "Fenced(a_0, Redfoot) ::: They went to California to fence the stolen jewels with a criminal named Redfoot.",
        "Contacted(Kobayashi, a_0) ::: A lawyer named Kobayashi contacted them.",
        "OfferedJob(Keyser_Söze, a_0, invade_ship_and_destroy_cocaine) ::: Keyser Söze offered the group of criminals a job to invade a ship and destroy the cocaine being transported by the Argentinian drug dealers.",
        "Transporting(argentinian_drug_dealers, cocaine) ::: The Argentinian drug dealers were transporting cocaine.",
        "Competing(Keyser_Söze, argentinian_drug_dealers) ::: Keyser Söze was competing with the Argentinian drug dealers."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "414": [
    {
      "id": 414,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 1,
      "paragraph": "The bloodbath on the ship leaves only two survivors: Arkosh Kovash, a Hungarian mobster hospitalized with severe burns; and Roger \"Verbal\" Kint, a con artist with cerebral palsy. Customs agent Dave Kujan flies in from New York City to interrogate Verbal, who describes in flashback the events that led him and four other criminals - Keaton, Michael McManus, Fred Fenster and Todd Hockney - onto the ship.",
      "question_template": "The artist's rendering looks like [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Customs agent Dave Kujan"
      ],
      "predicates": [
        "Survivor(x) ::: x is a survivor of the bloodbath on the ship.",
        "Mobster(x) ::: x is a mobster.",
        "Hospitalized(x) ::: x is hospitalized.",
        "ConArtist(x) ::: x is a con artist.",
        "CerebralPalsy(x) ::: x has cerebral palsy.",
        "Interrogates(x, y) ::: x interrogates y.",
        "Describes(x, y) ::: x describes y.",
        "Criminal(x) ::: x is a criminal.",
        "PartOfGroup(x, g) ::: x is part of group g.",
        "Event(x, y) ::: x is an event that leads to y."
      ],
      "premises": [
        "Survivor(arkosh) ∧ Mobster(arkosh) ∧ Hospitalized(arkosh) ::: Arkosh Kovash is a Hungarian mobster hospitalized with severe burns.",
        "Survivor(verbal) ∧ ConArtist(verbal) ∧ CerebralPalsy(verbal) ::: Roger \"Verbal\" Kint is a con artist with cerebral palsy.",
        "Interrogates(kujan, verbal) ::: Customs agent Dave Kujan interrogates Verbal.",
        "Describes(verbal, story) ::: Verbal describes the events that led him and four other criminals onto the ship.",
        "∃x (Criminal(x) ∧ PartOfGroup(x, group)) ::: There are criminals who are part of a group.",
        "Event(story, ship) ::: The story involves events that led to the situation on the ship.",
        "Conclusion:",
        "Survivor(arkosh) ∧ Survivor(verbal) ::: Arkosh Kovash and Roger \"Verbal\" Kint are the survivors of the bloodbath on the ship."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "415": [
    {
      "id": 415,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 2,
      "paragraph": "Verbal explains that, six weeks earlier in New York, he and the other criminals were arrested on supposedly a trumped-up hijacking charge, and decided to pull another heist to get back at the police. Led by Keaton, a former corrupt policeman, they robbed a group of corrupt cops who transported smugglers in a police convoy. They then went to California to fence the stolen jewels with a criminal named Redfoot. Redfoot turned them on to another jewel heist, but the quarry turned out to be heroin, and the five had to shoot their way out. Soon after, a lawyer named Kobayashi contacted them and told them that Keyser Söze, a Turkish crime lord with a mythical reputation from whom all of the thieves had unwittingly stolen (including Hockney who hijacked the original truck six weeks earlier in New York), had offered them a job: invade a ship manned by a gang of Argentinian drug dealers with whom Söze was competing and destroy the $91 million worth of cocaine that they were transporting.",
      "question_template": "[[CANDIDATE_ANSWER]] tells Kujan about Soze.",
      "candidate_answers": [
        "Kobayashi"
      ],
      "predicates": [
        "Arrested(x, y) ::: x was arrested on charge y.",
        "Robbed(x, y) ::: x robbed y.",
        "Fenced(x, y) ::: x fenced stolen goods with y.",
        "Contacted(x, y) ::: x contacted y.",
        "OfferedJob(x, y, z) ::: x offered y a job to z.",
        "Transporting(x, y) ::: x is transporting y.",
        "Competing(x, y) ::: x is competing with y."
      ],
      "premises": [
        "Arrested(a_2, trumped_up_hijacking_charge) ::: Verbal and the other criminals were arrested on supposedly a trumped-up hijacking charge.",
        "Robbed(a_0, corrupt_cops) ::: Led by Keaton, they robbed a group of corrupt cops.",
        "Fenced(a_0, Redfoot) ::: They went to California to fence the stolen jewels with a criminal named Redfoot.",
        "Contacted(Kobayashi, a_0) ::: A lawyer named Kobayashi contacted them.",
        "OfferedJob(Keyser_Söze, a_0, invade_ship_and_destroy_cocaine) ::: Keyser Söze offered the group of criminals a job to invade a ship and destroy the cocaine being transported by the Argentinian drug dealers.",
        "Transporting(argentinian_drug_dealers, cocaine) ::: The Argentinian drug dealers were transporting cocaine.",
        "Competing(Keyser_Söze, argentinian_drug_dealers) ::: Keyser Söze was competing with the Argentinian drug dealers."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 415,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 6,
      "paragraph": "Moments later, Kujan realizes that Verbal's entire story was a lie, pieced together from details on a crowded bulletin board in his office. Meanwhile, Verbal walks outside, gradually dropping his limp and flexing his supposedly withered hand. As Kujan runs after Verbal, a fax comes in from California: a police sketch artist's rendering of Söze, dictated by Kovash, that looks exactly like Verbal. Kujan misses Verbal by moments, as the latter disappears into a car driven by \"Kobayashi\".",
      "question_template": "[[CANDIDATE_ANSWER]] tells Kujan about Soze.",
      "candidate_answers": [
        "Kobayashi"
      ],
      "predicates": [
        "Fabricated(x, y) ::: x's story is fabricated from details found in y's office.",
        "Identical(x, y) ::: x's appearance is identical to y's appearance.",
        "Misses(x, y) ::: x misses y.",
        "Disappears(x, y) ::: x disappears into a vehicle driven by y.",
        "Flexes(x, y) ::: x flexes y."
      ],
      "premises": [
        "Fabricated(b_1, a_1) ::: Verbal's story is fabricated from details found in Kujan's office.",
        "Identical(a_2, a_3) ::: Verbal's appearance is identical to the police sketch of Söze.",
        "Misses(a_1, a_2) ::: Kujan misses Verbal by moments.",
        "Disappears(a_2, \"Kobayashi\") ::: Verbal disappears into a car driven by Kobayashi.",
        "Flexes(a_2, f) ::: Verbal flexes his supposedly withered hand."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "416": [
    {
      "id": 416,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 2,
      "paragraph": "Verbal explains that, six weeks earlier in New York, he and the other criminals were arrested on supposedly a trumped-up hijacking charge, and decided to pull another heist to get back at the police. Led by Keaton, a former corrupt policeman, they robbed a group of corrupt cops who transported smugglers in a police convoy. They then went to California to fence the stolen jewels with a criminal named Redfoot. Redfoot turned them on to another jewel heist, but the quarry turned out to be heroin, and the five had to shoot their way out. Soon after, a lawyer named Kobayashi contacted them and told them that Keyser Söze, a Turkish crime lord with a mythical reputation from whom all of the thieves had unwittingly stolen (including Hockney who hijacked the original truck six weeks earlier in New York), had offered them a job: invade a ship manned by a gang of Argentinian drug dealers with whom Söze was competing and destroy the $91 million worth of cocaine that they were transporting.",
      "question_template": "[[CANDIDATE_ANSWER]] is who Jack Baer works for.",
      "candidate_answers": [
        "Keyser Söze, a Turkish crime lord"
      ],
      "predicates": [
        "Arrested(x, y) ::: x was arrested on charge y.",
        "Robbed(x, y) ::: x robbed y.",
        "Fenced(x, y) ::: x fenced stolen goods with y.",
        "Contacted(x, y) ::: x contacted y.",
        "OfferedJob(x, y, z) ::: x offered y a job to z.",
        "Transporting(x, y) ::: x is transporting y.",
        "Competing(x, y) ::: x is competing with y."
      ],
      "premises": [
        "Arrested(a_2, trumped_up_hijacking_charge) ::: Verbal and the other criminals were arrested on supposedly a trumped-up hijacking charge.",
        "Robbed(a_0, corrupt_cops) ::: Led by Keaton, they robbed a group of corrupt cops.",
        "Fenced(a_0, Redfoot) ::: They went to California to fence the stolen jewels with a criminal named Redfoot.",
        "Contacted(Kobayashi, a_0) ::: A lawyer named Kobayashi contacted them.",
        "OfferedJob(Keyser_Söze, a_0, invade_ship_and_destroy_cocaine) ::: Keyser Söze offered the group of criminals a job to invade a ship and destroy the cocaine being transported by the Argentinian drug dealers.",
        "Transporting(argentinian_drug_dealers, cocaine) ::: The Argentinian drug dealers were transporting cocaine.",
        "Competing(Keyser_Söze, argentinian_drug_dealers) ::: Keyser Söze was competing with the Argentinian drug dealers."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 416,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 6,
      "paragraph": "Moments later, Kujan realizes that Verbal's entire story was a lie, pieced together from details on a crowded bulletin board in his office. Meanwhile, Verbal walks outside, gradually dropping his limp and flexing his supposedly withered hand. As Kujan runs after Verbal, a fax comes in from California: a police sketch artist's rendering of Söze, dictated by Kovash, that looks exactly like Verbal. Kujan misses Verbal by moments, as the latter disappears into a car driven by \"Kobayashi\".",
      "question_template": "[[CANDIDATE_ANSWER]] is who Jack Baer works for.",
      "candidate_answers": [
        "Söze",
        "A police sketch artist's rendering of Söze",
        "Verbal"
      ],
      "predicates": [
        "Fabricated(x, y) ::: x's story is fabricated from details found in y's office.",
        "Identical(x, y) ::: x's appearance is identical to y's appearance.",
        "Misses(x, y) ::: x misses y.",
        "Disappears(x, y) ::: x disappears into a vehicle driven by y.",
        "Flexes(x, y) ::: x flexes y."
      ],
      "premises": [
        "Fabricated(b_1, a_1) ::: Verbal's story is fabricated from details found in Kujan's office.",
        "Identical(a_2, a_3) ::: Verbal's appearance is identical to the police sketch of Söze.",
        "Misses(a_1, a_2) ::: Kujan misses Verbal by moments.",
        "Disappears(a_2, \"Kobayashi\") ::: Verbal disappears into a car driven by Kobayashi.",
        "Flexes(a_2, f) ::: Verbal flexes his supposedly withered hand."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "417": [
    {
      "id": 417,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 4,
      "paragraph": "Verbal goes on to explain that, after Fenster had bailed on the group, Kobayashi gave them a location at which to find their compatriot's dead body. They tried to kill Kobayashi, but he strong-armed them into performing the heist by threatening their loved ones. They staked out the ship and killed several Argentinian and Hungarian gangsters, but found no drugs on board. McManus, Hockney and a man locked aboard the ship were killed by an unseen person, who also killed Keaton and set the ship on fire as Verbal looked on.",
      "question_template": "Kobayashi's job is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Kobayashi gave them a location at which to find their compatriot's dead body.",
        "- They tried to kill Kobayashi, but he strong-armed them into performing the heist by threatening their loved ones.",
        "- They staked out the ship and killed several Argentinian and Hungarian gangsters, but found no drugs on board.",
        "- McManus, Hockney and a man locked aboard the ship were killed by an unseen person, who also killed Keaton and set the ship on fire as Verbal looked on."
      ],
      "predicates": [
        "BailedOnGroup(x) ::: x bailed on the group.",
        "GaveLocation(x, y) ::: x gave y a location.",
        "TriedToKill(x, y) ::: x tried to kill y.",
        "StrongArmed(x, y) ::: x strong-armed y.",
        "PerformedHeist(x) ::: x performed the heist.",
        "ThreatenedLovedOnes(x) ::: x threatened their loved ones.",
        "StakedOut(x, y) ::: x staked out y.",
        "Killed(x, y) ::: x killed y.",
        "FoundDrugsOnBoard(x) ::: x found drugs on board.",
        "KilledByUnseenPerson(x) ::: x was killed by an unseen person.",
        "SetOnFire(x) ::: x was set on fire.",
        "LookedOn(x, y) ::: x looked on at y."
      ],
      "premises": [
        "BailedOnGroup(fenster) ::: Fenster had bailed on the group.",
        "GaveLocation(kobayashi, deadBodyLocation) ::: Kobayashi gave them a location at which to find their compatriot's dead body.",
        "TriedToKill(group, kobayashi) ::: They tried to kill Kobayashi.",
        "StrongArmed(kobayashi, group) ::: Kobayashi strong-armed them into performing the heist by threatening their loved ones.",
        "StakedOut(group, ship) ::: They staked out the ship.",
        "Killed(group, argentinianGangsters) ::: They killed several Argentinian gangsters.",
        "Killed(group, hungarianGangsters) ::: They killed several Hungarian gangsters.",
        "¬FoundDrugsOnBoard(group) ::: They found no drugs on board.",
        "Killed(mcmanus, unseenPerson) ::: McManus was killed by an unseen person.",
        "Killed(hockney, unseenPerson) ::: Hockney was killed by an unseen person.",
        "Killed(lockedMan, unseenPerson) ::: The man locked aboard the ship was killed by an unseen person.",
        "Killed(keaton, unseenPerson) ::: Keaton was killed by an unseen person.",
        "SetOnFire(ship) ::: The ship was set on fire.",
        "LookedOn(verbal, ship) ::: Verbal looked on as the ship was set on fire."
      ],
      "conclusions": [
        "GaveLocation(kobayashi, deadBodyLocation)",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 417,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 5,
      "paragraph": "Verbal concludes his story, but Kujan does not believe it. He insists that Keaton must be Söze, as one of the murder victims on the boat was Arturo Marquez, a drug dealer who escaped prosecution by claiming he could identify Söze — and who was represented by Edie Finneran, Keaton's lawyer and girlfriend. Kujan claims that the Argentinians were selling Marquez to Söze's Hungarian rivals and Keaton used the heist as a distraction to let him kill Marquez. Kujan also informs Verbal that Finneran has been murdered. Verbal says that the entire plan was Keaton's idea, but refuses to testify in court. Verbal's bond is posted and he is released.",
      "question_template": "Kobayashi's job is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Kujan informs Verbal that Finneran has been murdered."
      ],
      "predicates": [
        "ImplicatedInMurder(x, y) ::: x is implicated in the murder of y.",
        "ConnectedToEvents(x, y) ::: x's murder is connected to the events surrounding y.",
        "ReleaseContingentOn(x, y) ::: x's release is contingent upon the posting of y.",
        "Testify(x) ::: x testifies in court.",
        "Idea(x, y) ::: x is the idea of y."
      ],
      "premises": [
        "ImplicatedInMurder(keaton, arturoMarquez) ::: Keaton is implicated in the murder of Arturo Marquez.",
        "ConnectedToEvents(edieFinneran, soze) ::: Edie Finneran's murder is connected to the events surrounding Söze.",
        "ReleaseContingentOn(verbal, bond) ::: Verbal's release is contingent upon the posting of his bond.",
        "¬Testify(verbal) ::: Verbal refuses to testify in court.",
        "Idea(keaton, plan) ::: The entire plan was Keaton's idea."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "418": [
    {
      "id": 418,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 1,
      "paragraph": "The bloodbath on the ship leaves only two survivors: Arkosh Kovash, a Hungarian mobster hospitalized with severe burns; and Roger \"Verbal\" Kint, a con artist with cerebral palsy. Customs agent Dave Kujan flies in from New York City to interrogate Verbal, who describes in flashback the events that led him and four other criminals - Keaton, Michael McManus, Fred Fenster and Todd Hockney - onto the ship.",
      "question_template": "The second jewelry heist, if it wasn't jewelry, was [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The events that led him and four other criminals onto the ship"
      ],
      "predicates": [
        "Survivor(x) ::: x is a survivor of the bloodbath on the ship.",
        "Mobster(x) ::: x is a mobster.",
        "Hospitalized(x) ::: x is hospitalized.",
        "ConArtist(x) ::: x is a con artist.",
        "CerebralPalsy(x) ::: x has cerebral palsy.",
        "Interrogates(x, y) ::: x interrogates y.",
        "Describes(x, y) ::: x describes y.",
        "Criminal(x) ::: x is a criminal.",
        "PartOfGroup(x, g) ::: x is part of group g.",
        "Event(x, y) ::: x is an event that leads to y."
      ],
      "premises": [
        "Survivor(arkosh) ∧ Mobster(arkosh) ∧ Hospitalized(arkosh) ::: Arkosh Kovash is a Hungarian mobster hospitalized with severe burns.",
        "Survivor(verbal) ∧ ConArtist(verbal) ∧ CerebralPalsy(verbal) ::: Roger \"Verbal\" Kint is a con artist with cerebral palsy.",
        "Interrogates(kujan, verbal) ::: Customs agent Dave Kujan interrogates Verbal.",
        "Describes(verbal, story) ::: Verbal describes the events that led him and four other criminals onto the ship.",
        "∃x (Criminal(x) ∧ PartOfGroup(x, group)) ::: There are criminals who are part of a group.",
        "Event(story, ship) ::: The story involves events that led to the situation on the ship.",
        "Conclusion:",
        "Survivor(arkosh) ∧ Survivor(verbal) ::: Arkosh Kovash and Roger \"Verbal\" Kint are the survivors of the bloodbath on the ship."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 418,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 2,
      "paragraph": "Verbal explains that, six weeks earlier in New York, he and the other criminals were arrested on supposedly a trumped-up hijacking charge, and decided to pull another heist to get back at the police. Led by Keaton, a former corrupt policeman, they robbed a group of corrupt cops who transported smugglers in a police convoy. They then went to California to fence the stolen jewels with a criminal named Redfoot. Redfoot turned them on to another jewel heist, but the quarry turned out to be heroin, and the five had to shoot their way out. Soon after, a lawyer named Kobayashi contacted them and told them that Keyser Söze, a Turkish crime lord with a mythical reputation from whom all of the thieves had unwittingly stolen (including Hockney who hijacked the original truck six weeks earlier in New York), had offered them a job: invade a ship manned by a gang of Argentinian drug dealers with whom Söze was competing and destroy the $91 million worth of cocaine that they were transporting.",
      "question_template": "The second jewelry heist, if it wasn't jewelry, was [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Verbal explains that, six weeks earlier in New York, he and the other criminals were arrested on supposedly a trumped-up hijacking charge",
        "- Led by Keaton, a former corrupt policeman, they robbed a group of corrupt cops who transported smugglers in a police convoy",
        "- They then went to California to fence the stolen jewels with a criminal named Redfoot",
        "- Redfoot turned them on to another jewel heist, but the quarry turned out to be heroin, and the five had to shoot their way out",
        "- Soon after, a lawyer named Kobayashi contacted them and told them that Keyser Söze, a Turkish crime lord with a mythical reputation from whom all of the thieves had unwittingly stolen, had offered them a job"
      ],
      "predicates": [
        "Arrested(x, y) ::: x was arrested on charge y.",
        "Robbed(x, y) ::: x robbed y.",
        "Fenced(x, y) ::: x fenced stolen goods with y.",
        "Contacted(x, y) ::: x contacted y.",
        "OfferedJob(x, y, z) ::: x offered y a job to z.",
        "Transporting(x, y) ::: x is transporting y.",
        "Competing(x, y) ::: x is competing with y."
      ],
      "premises": [
        "Arrested(a_2, trumped_up_hijacking_charge) ::: Verbal and the other criminals were arrested on supposedly a trumped-up hijacking charge.",
        "Robbed(a_0, corrupt_cops) ::: Led by Keaton, they robbed a group of corrupt cops.",
        "Fenced(a_0, Redfoot) ::: They went to California to fence the stolen jewels with a criminal named Redfoot.",
        "Contacted(Kobayashi, a_0) ::: A lawyer named Kobayashi contacted them.",
        "OfferedJob(Keyser_Söze, a_0, invade_ship_and_destroy_cocaine) ::: Keyser Söze offered the group of criminals a job to invade a ship and destroy the cocaine being transported by the Argentinian drug dealers.",
        "Transporting(argentinian_drug_dealers, cocaine) ::: The Argentinian drug dealers were transporting cocaine.",
        "Competing(Keyser_Söze, argentinian_drug_dealers) ::: Keyser Söze was competing with the Argentinian drug dealers."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 418,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 3,
      "paragraph": "When Kujan learns of Söze from FBI agent Jack Baer, he questions Verbal about him. Verbal tells Kujan an underworld legend about Söze: that he had murdered his own family after they had been attacked by a gang of Hungarian criminals, and then massacred the Hungarians and everyone they held dear. He then went underground, never to be seen again, and did business only through underlings who did not know for whom they were working. He became a fearsome urban legend, \"a spook story that criminals tell their kids at night\".",
      "question_template": "The second jewelry heist, if it wasn't jewelry, was [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "FBI agent Jack Baer",
        "An underworld legend about Söze",
        "Verbal tells Kujan an underworld legend about Söze"
      ],
      "predicates": [
        "Murdered(x) ::: x has murdered his own family.",
        "Massacred(x) ::: x has massacred a group of people.",
        "Underground(x) ::: x has gone underground.",
        "FearsomeLegend(x) ::: x is a fearsome urban legend.",
        "Tells(x, y) ::: x tells y about something.",
        "BusinessThroughUnderlings(x) ::: x does business only through underlings."
      ],
      "premises": [
        "Tells(a_2, a_1) ::: Verbal tells Kujan about Söze's legend.",
        "Murdered(söze) ::: Söze has murdered his own family after they were attacked by a gang of Hungarian criminals.",
        "Massacred(söze) ::: Söze has massacred the Hungarians and everyone they held dear.",
        "Underground(söze) ::: Söze has gone underground and has never been seen again.",
        "BusinessThroughUnderlings(söze) ::: Söze does business only through underlings who do not know for whom they are working.",
        "FearsomeLegend(söze) ::: Söze is a fearsome urban legend, \"a spook story that criminals tell their kids at night.\""
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 418,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 5,
      "paragraph": "Verbal concludes his story, but Kujan does not believe it. He insists that Keaton must be Söze, as one of the murder victims on the boat was Arturo Marquez, a drug dealer who escaped prosecution by claiming he could identify Söze — and who was represented by Edie Finneran, Keaton's lawyer and girlfriend. Kujan claims that the Argentinians were selling Marquez to Söze's Hungarian rivals and Keaton used the heist as a distraction to let him kill Marquez. Kujan also informs Verbal that Finneran has been murdered. Verbal says that the entire plan was Keaton's idea, but refuses to testify in court. Verbal's bond is posted and he is released.",
      "question_template": "The second jewelry heist, if it wasn't jewelry, was [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The entire plan was Keaton's idea",
        "Verbal concludes his story",
        "Kujan claims that the Argentinians were selling Marquez to Söze's Hungarian rivals"
      ],
      "predicates": [
        "ImplicatedInMurder(x, y) ::: x is implicated in the murder of y.",
        "ConnectedToEvents(x, y) ::: x's murder is connected to the events surrounding y.",
        "ReleaseContingentOn(x, y) ::: x's release is contingent upon the posting of y.",
        "Testify(x) ::: x testifies in court.",
        "Idea(x, y) ::: x is the idea of y."
      ],
      "premises": [
        "ImplicatedInMurder(keaton, arturoMarquez) ::: Keaton is implicated in the murder of Arturo Marquez.",
        "ConnectedToEvents(edieFinneran, soze) ::: Edie Finneran's murder is connected to the events surrounding Söze.",
        "ReleaseContingentOn(verbal, bond) ::: Verbal's release is contingent upon the posting of his bond.",
        "¬Testify(verbal) ::: Verbal refuses to testify in court.",
        "Idea(keaton, plan) ::: The entire plan was Keaton's idea."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "419": [
    {
      "id": 419,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 5,
      "paragraph": "Verbal concludes his story, but Kujan does not believe it. He insists that Keaton must be Söze, as one of the murder victims on the boat was Arturo Marquez, a drug dealer who escaped prosecution by claiming he could identify Söze — and who was represented by Edie Finneran, Keaton's lawyer and girlfriend. Kujan claims that the Argentinians were selling Marquez to Söze's Hungarian rivals and Keaton used the heist as a distraction to let him kill Marquez. Kujan also informs Verbal that Finneran has been murdered. Verbal says that the entire plan was Keaton's idea, but refuses to testify in court. Verbal's bond is posted and he is released.",
      "question_template": "The survivors on the ship are [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Kujan does not believe it",
        "Kujan claims that the Argentinians were selling Marquez to Söze's Hungarian rivals",
        "Kujan insists that Keaton must be Söze"
      ],
      "predicates": [
        "ImplicatedInMurder(x, y) ::: x is implicated in the murder of y.",
        "ConnectedToEvents(x, y) ::: x's murder is connected to the events surrounding y.",
        "ReleaseContingentOn(x, y) ::: x's release is contingent upon the posting of y.",
        "Testify(x) ::: x testifies in court.",
        "Idea(x, y) ::: x is the idea of y."
      ],
      "premises": [
        "ImplicatedInMurder(keaton, arturoMarquez) ::: Keaton is implicated in the murder of Arturo Marquez.",
        "ConnectedToEvents(edieFinneran, soze) ::: Edie Finneran's murder is connected to the events surrounding Söze.",
        "ReleaseContingentOn(verbal, bond) ::: Verbal's release is contingent upon the posting of his bond.",
        "¬Testify(verbal) ::: Verbal refuses to testify in court.",
        "Idea(keaton, plan) ::: The entire plan was Keaton's idea."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "420": [
    {
      "id": 420,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 1,
      "paragraph": "The bloodbath on the ship leaves only two survivors: Arkosh Kovash, a Hungarian mobster hospitalized with severe burns; and Roger \"Verbal\" Kint, a con artist with cerebral palsy. Customs agent Dave Kujan flies in from New York City to interrogate Verbal, who describes in flashback the events that led him and four other criminals - Keaton, Michael McManus, Fred Fenster and Todd Hockney - onto the ship.",
      "question_template": "[[CANDIDATE_ANSWER]] is the person that Soze killed.",
      "candidate_answers": [
        "Roger \"Verbal\" Kint",
        "A con artist with cerebral palsy"
      ],
      "predicates": [
        "Survivor(x) ::: x is a survivor of the bloodbath on the ship.",
        "Mobster(x) ::: x is a mobster.",
        "Hospitalized(x) ::: x is hospitalized.",
        "ConArtist(x) ::: x is a con artist.",
        "CerebralPalsy(x) ::: x has cerebral palsy.",
        "Interrogates(x, y) ::: x interrogates y.",
        "Describes(x, y) ::: x describes y.",
        "Criminal(x) ::: x is a criminal.",
        "PartOfGroup(x, g) ::: x is part of group g.",
        "Event(x, y) ::: x is an event that leads to y."
      ],
      "premises": [
        "Survivor(arkosh) ∧ Mobster(arkosh) ∧ Hospitalized(arkosh) ::: Arkosh Kovash is a Hungarian mobster hospitalized with severe burns.",
        "Survivor(verbal) ∧ ConArtist(verbal) ∧ CerebralPalsy(verbal) ::: Roger \"Verbal\" Kint is a con artist with cerebral palsy.",
        "Interrogates(kujan, verbal) ::: Customs agent Dave Kujan interrogates Verbal.",
        "Describes(verbal, story) ::: Verbal describes the events that led him and four other criminals onto the ship.",
        "∃x (Criminal(x) ∧ PartOfGroup(x, group)) ::: There are criminals who are part of a group.",
        "Event(story, ship) ::: The story involves events that led to the situation on the ship.",
        "Conclusion:",
        "Survivor(arkosh) ∧ Survivor(verbal) ::: Arkosh Kovash and Roger \"Verbal\" Kint are the survivors of the bloodbath on the ship."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 420,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 2,
      "paragraph": "Verbal explains that, six weeks earlier in New York, he and the other criminals were arrested on supposedly a trumped-up hijacking charge, and decided to pull another heist to get back at the police. Led by Keaton, a former corrupt policeman, they robbed a group of corrupt cops who transported smugglers in a police convoy. They then went to California to fence the stolen jewels with a criminal named Redfoot. Redfoot turned them on to another jewel heist, but the quarry turned out to be heroin, and the five had to shoot their way out. Soon after, a lawyer named Kobayashi contacted them and told them that Keyser Söze, a Turkish crime lord with a mythical reputation from whom all of the thieves had unwittingly stolen (including Hockney who hijacked the original truck six weeks earlier in New York), had offered them a job: invade a ship manned by a gang of Argentinian drug dealers with whom Söze was competing and destroy the $91 million worth of cocaine that they were transporting.",
      "question_template": "[[CANDIDATE_ANSWER]] is the person that Soze killed.",
      "candidate_answers": [
        "Verbal explains that, six weeks earlier in New York, he and the other criminals were arrested on supposedly a trumped-up hijacking charge",
        "A lawyer named Kobayashi contacted them and told them that Keyser Söze, a Turkish crime lord with a mythical reputation",
        "Keyser Söze, a Turkish crime lord with a mythical reputation from whom all of the thieves had unwittingly stolen"
      ],
      "predicates": [
        "Arrested(x, y) ::: x was arrested on charge y.",
        "Robbed(x, y) ::: x robbed y.",
        "Fenced(x, y) ::: x fenced stolen goods with y.",
        "Contacted(x, y) ::: x contacted y.",
        "OfferedJob(x, y, z) ::: x offered y a job to z.",
        "Transporting(x, y) ::: x is transporting y.",
        "Competing(x, y) ::: x is competing with y."
      ],
      "premises": [
        "Arrested(a_2, trumped_up_hijacking_charge) ::: Verbal and the other criminals were arrested on supposedly a trumped-up hijacking charge.",
        "Robbed(a_0, corrupt_cops) ::: Led by Keaton, they robbed a group of corrupt cops.",
        "Fenced(a_0, Redfoot) ::: They went to California to fence the stolen jewels with a criminal named Redfoot.",
        "Contacted(Kobayashi, a_0) ::: A lawyer named Kobayashi contacted them.",
        "OfferedJob(Keyser_Söze, a_0, invade_ship_and_destroy_cocaine) ::: Keyser Söze offered the group of criminals a job to invade a ship and destroy the cocaine being transported by the Argentinian drug dealers.",
        "Transporting(argentinian_drug_dealers, cocaine) ::: The Argentinian drug dealers were transporting cocaine.",
        "Competing(Keyser_Söze, argentinian_drug_dealers) ::: Keyser Söze was competing with the Argentinian drug dealers."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "422": [
    {
      "id": 422,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 1,
      "paragraph": "The bloodbath on the ship leaves only two survivors: Arkosh Kovash, a Hungarian mobster hospitalized with severe burns; and Roger \"Verbal\" Kint, a con artist with cerebral palsy. Customs agent Dave Kujan flies in from New York City to interrogate Verbal, who describes in flashback the events that led him and four other criminals - Keaton, Michael McManus, Fred Fenster and Todd Hockney - onto the ship.",
      "question_template": "According to the story, Roger committed crimes with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Customs agent"
      ],
      "predicates": [
        "Survivor(x) ::: x is a survivor of the bloodbath on the ship.",
        "Mobster(x) ::: x is a mobster.",
        "Hospitalized(x) ::: x is hospitalized.",
        "ConArtist(x) ::: x is a con artist.",
        "CerebralPalsy(x) ::: x has cerebral palsy.",
        "Interrogates(x, y) ::: x interrogates y.",
        "Describes(x, y) ::: x describes y.",
        "Criminal(x) ::: x is a criminal.",
        "PartOfGroup(x, g) ::: x is part of group g.",
        "Event(x, y) ::: x is an event that leads to y."
      ],
      "premises": [
        "Survivor(arkosh) ∧ Mobster(arkosh) ∧ Hospitalized(arkosh) ::: Arkosh Kovash is a Hungarian mobster hospitalized with severe burns.",
        "Survivor(verbal) ∧ ConArtist(verbal) ∧ CerebralPalsy(verbal) ::: Roger \"Verbal\" Kint is a con artist with cerebral palsy.",
        "Interrogates(kujan, verbal) ::: Customs agent Dave Kujan interrogates Verbal.",
        "Describes(verbal, story) ::: Verbal describes the events that led him and four other criminals onto the ship.",
        "∃x (Criminal(x) ∧ PartOfGroup(x, group)) ::: There are criminals who are part of a group.",
        "Event(story, ship) ::: The story involves events that led to the situation on the ship.",
        "Conclusion:",
        "Survivor(arkosh) ∧ Survivor(verbal) ::: Arkosh Kovash and Roger \"Verbal\" Kint are the survivors of the bloodbath on the ship."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 422,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 5,
      "paragraph": "Verbal concludes his story, but Kujan does not believe it. He insists that Keaton must be Söze, as one of the murder victims on the boat was Arturo Marquez, a drug dealer who escaped prosecution by claiming he could identify Söze — and who was represented by Edie Finneran, Keaton's lawyer and girlfriend. Kujan claims that the Argentinians were selling Marquez to Söze's Hungarian rivals and Keaton used the heist as a distraction to let him kill Marquez. Kujan also informs Verbal that Finneran has been murdered. Verbal says that the entire plan was Keaton's idea, but refuses to testify in court. Verbal's bond is posted and he is released.",
      "question_template": "According to the story, Roger committed crimes with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Kujan does not believe it",
        "Kujan claims that the Argentinians were selling Marquez to Söze's Hungarian rivals",
        "Kujan also informs Verbal that Finneran has been murdered"
      ],
      "predicates": [
        "ImplicatedInMurder(x, y) ::: x is implicated in the murder of y.",
        "ConnectedToEvents(x, y) ::: x's murder is connected to the events surrounding y.",
        "ReleaseContingentOn(x, y) ::: x's release is contingent upon the posting of y.",
        "Testify(x) ::: x testifies in court.",
        "Idea(x, y) ::: x is the idea of y."
      ],
      "premises": [
        "ImplicatedInMurder(keaton, arturoMarquez) ::: Keaton is implicated in the murder of Arturo Marquez.",
        "ConnectedToEvents(edieFinneran, soze) ::: Edie Finneran's murder is connected to the events surrounding Söze.",
        "ReleaseContingentOn(verbal, bond) ::: Verbal's release is contingent upon the posting of his bond.",
        "¬Testify(verbal) ::: Verbal refuses to testify in court.",
        "Idea(keaton, plan) ::: The entire plan was Keaton's idea."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 422,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 6,
      "paragraph": "Moments later, Kujan realizes that Verbal's entire story was a lie, pieced together from details on a crowded bulletin board in his office. Meanwhile, Verbal walks outside, gradually dropping his limp and flexing his supposedly withered hand. As Kujan runs after Verbal, a fax comes in from California: a police sketch artist's rendering of Söze, dictated by Kovash, that looks exactly like Verbal. Kujan misses Verbal by moments, as the latter disappears into a car driven by \"Kobayashi\".",
      "question_template": "According to the story, Roger committed crimes with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Kujan realizes that Verbal's entire story was a lie",
        "Kujan runs after Verbal",
        "A fax comes in from California",
        "A police sketch artist's rendering of Söze, dictated by Kovash"
      ],
      "predicates": [
        "Fabricated(x, y) ::: x's story is fabricated from details found in y's office.",
        "Identical(x, y) ::: x's appearance is identical to y's appearance.",
        "Misses(x, y) ::: x misses y.",
        "Disappears(x, y) ::: x disappears into a vehicle driven by y.",
        "Flexes(x, y) ::: x flexes y."
      ],
      "premises": [
        "Fabricated(b_1, a_1) ::: Verbal's story is fabricated from details found in Kujan's office.",
        "Identical(a_2, a_3) ::: Verbal's appearance is identical to the police sketch of Söze.",
        "Misses(a_1, a_2) ::: Kujan misses Verbal by moments.",
        "Disappears(a_2, \"Kobayashi\") ::: Verbal disappears into a car driven by Kobayashi.",
        "Flexes(a_2, f) ::: Verbal flexes his supposedly withered hand."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "423": [
    {
      "id": 423,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 0,
      "paragraph": " The film opens with criminal Dean Keaton lying badly wounded on a ship docked in the San Pedro Bay. He is confronted by a mysterious figure whom he calls \"Keyser\", who shoots him dead and sets fire to the ship,",
      "question_template": "Keaton was in [[CANDIDATE_ANSWER]] when he tried to sell stolen items to Redfoot.",
      "candidate_answers": [
        "a ship docked in the San Pedro Bay"
      ],
      "predicates": [
        "Wounded(dean) ::: Dean Keaton is badly wounded.",
        "Confronted(dean, keyser) ::: Dean Keaton is confronted by the mysterious figure called \"Keyser\".",
        "Killed(dean, keyser) ::: Dean Keaton is killed by the mysterious figure.",
        "SetFire(ship) ::: The ship is set on fire.",
        "Docked(ship, sanPedroBay) ::: The ship is docked in San Pedro Bay."
      ],
      "premises": [
        "Wounded(dean) ::: The film opens with criminal Dean Keaton lying badly wounded.",
        "Confronted(dean, keyser) ::: He is confronted by a mysterious figure whom he calls \"Keyser\".",
        "Killed(dean, keyser) ::: Keyser shoots Dean Keaton dead.",
        "SetFire(ship) ::: Keyser sets fire to the ship.",
        "Docked(ship, sanPedroBay) ::: The ship is docked in the San Pedro Bay."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 423,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 1,
      "paragraph": "The bloodbath on the ship leaves only two survivors: Arkosh Kovash, a Hungarian mobster hospitalized with severe burns; and Roger \"Verbal\" Kint, a con artist with cerebral palsy. Customs agent Dave Kujan flies in from New York City to interrogate Verbal, who describes in flashback the events that led him and four other criminals - Keaton, Michael McManus, Fred Fenster and Todd Hockney - onto the ship.",
      "question_template": "Keaton was in [[CANDIDATE_ANSWER]] when he tried to sell stolen items to Redfoot.",
      "candidate_answers": [
        "The bloodbath on the ship",
        "A Hungarian mobster hospitalized with severe burns",
        "Roger \"Verbal\" Kint, a con artist with cerebral palsy",
        "Customs agent Dave Kujan flies in from New York City to interrogate Verbal"
      ],
      "predicates": [
        "Survivor(x) ::: x is a survivor of the bloodbath on the ship.",
        "Mobster(x) ::: x is a mobster.",
        "Hospitalized(x) ::: x is hospitalized.",
        "ConArtist(x) ::: x is a con artist.",
        "CerebralPalsy(x) ::: x has cerebral palsy.",
        "Interrogates(x, y) ::: x interrogates y.",
        "Describes(x, y) ::: x describes y.",
        "Criminal(x) ::: x is a criminal.",
        "PartOfGroup(x, g) ::: x is part of group g.",
        "Event(x, y) ::: x is an event that leads to y."
      ],
      "premises": [
        "Survivor(arkosh) ∧ Mobster(arkosh) ∧ Hospitalized(arkosh) ::: Arkosh Kovash is a Hungarian mobster hospitalized with severe burns.",
        "Survivor(verbal) ∧ ConArtist(verbal) ∧ CerebralPalsy(verbal) ::: Roger \"Verbal\" Kint is a con artist with cerebral palsy.",
        "Interrogates(kujan, verbal) ::: Customs agent Dave Kujan interrogates Verbal.",
        "Describes(verbal, story) ::: Verbal describes the events that led him and four other criminals onto the ship.",
        "∃x (Criminal(x) ∧ PartOfGroup(x, group)) ::: There are criminals who are part of a group.",
        "Event(story, ship) ::: The story involves events that led to the situation on the ship.",
        "Conclusion:",
        "Survivor(arkosh) ∧ Survivor(verbal) ::: Arkosh Kovash and Roger \"Verbal\" Kint are the survivors of the bloodbath on the ship."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 423,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 2,
      "paragraph": "Verbal explains that, six weeks earlier in New York, he and the other criminals were arrested on supposedly a trumped-up hijacking charge, and decided to pull another heist to get back at the police. Led by Keaton, a former corrupt policeman, they robbed a group of corrupt cops who transported smugglers in a police convoy. They then went to California to fence the stolen jewels with a criminal named Redfoot. Redfoot turned them on to another jewel heist, but the quarry turned out to be heroin, and the five had to shoot their way out. Soon after, a lawyer named Kobayashi contacted them and told them that Keyser Söze, a Turkish crime lord with a mythical reputation from whom all of the thieves had unwittingly stolen (including Hockney who hijacked the original truck six weeks earlier in New York), had offered them a job: invade a ship manned by a gang of Argentinian drug dealers with whom Söze was competing and destroy the $91 million worth of cocaine that they were transporting.",
      "question_template": "Keaton was in [[CANDIDATE_ANSWER]] when he tried to sell stolen items to Redfoot.",
      "candidate_answers": [
        "New York",
        "California"
      ],
      "predicates": [
        "Arrested(x, y) ::: x was arrested on charge y.",
        "Robbed(x, y) ::: x robbed y.",
        "Fenced(x, y) ::: x fenced stolen goods with y.",
        "Contacted(x, y) ::: x contacted y.",
        "OfferedJob(x, y, z) ::: x offered y a job to z.",
        "Transporting(x, y) ::: x is transporting y.",
        "Competing(x, y) ::: x is competing with y."
      ],
      "premises": [
        "Arrested(a_2, trumped_up_hijacking_charge) ::: Verbal and the other criminals were arrested on supposedly a trumped-up hijacking charge.",
        "Robbed(a_0, corrupt_cops) ::: Led by Keaton, they robbed a group of corrupt cops.",
        "Fenced(a_0, Redfoot) ::: They went to California to fence the stolen jewels with a criminal named Redfoot.",
        "Contacted(Kobayashi, a_0) ::: A lawyer named Kobayashi contacted them.",
        "OfferedJob(Keyser_Söze, a_0, invade_ship_and_destroy_cocaine) ::: Keyser Söze offered the group of criminals a job to invade a ship and destroy the cocaine being transported by the Argentinian drug dealers.",
        "Transporting(argentinian_drug_dealers, cocaine) ::: The Argentinian drug dealers were transporting cocaine.",
        "Competing(Keyser_Söze, argentinian_drug_dealers) ::: Keyser Söze was competing with the Argentinian drug dealers."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 423,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 4,
      "paragraph": "Verbal goes on to explain that, after Fenster had bailed on the group, Kobayashi gave them a location at which to find their compatriot's dead body. They tried to kill Kobayashi, but he strong-armed them into performing the heist by threatening their loved ones. They staked out the ship and killed several Argentinian and Hungarian gangsters, but found no drugs on board. McManus, Hockney and a man locked aboard the ship were killed by an unseen person, who also killed Keaton and set the ship on fire as Verbal looked on.",
      "question_template": "Keaton was in [[CANDIDATE_ANSWER]] when he tried to sell stolen items to Redfoot.",
      "candidate_answers": [
        "- A location at which to find their compatriot's dead body",
        "- The ship"
      ],
      "predicates": [
        "BailedOnGroup(x) ::: x bailed on the group.",
        "GaveLocation(x, y) ::: x gave y a location.",
        "TriedToKill(x, y) ::: x tried to kill y.",
        "StrongArmed(x, y) ::: x strong-armed y.",
        "PerformedHeist(x) ::: x performed the heist.",
        "ThreatenedLovedOnes(x) ::: x threatened their loved ones.",
        "StakedOut(x, y) ::: x staked out y.",
        "Killed(x, y) ::: x killed y.",
        "FoundDrugsOnBoard(x) ::: x found drugs on board.",
        "KilledByUnseenPerson(x) ::: x was killed by an unseen person.",
        "SetOnFire(x) ::: x was set on fire.",
        "LookedOn(x, y) ::: x looked on at y."
      ],
      "premises": [
        "BailedOnGroup(fenster) ::: Fenster had bailed on the group.",
        "GaveLocation(kobayashi, deadBodyLocation) ::: Kobayashi gave them a location at which to find their compatriot's dead body.",
        "TriedToKill(group, kobayashi) ::: They tried to kill Kobayashi.",
        "StrongArmed(kobayashi, group) ::: Kobayashi strong-armed them into performing the heist by threatening their loved ones.",
        "StakedOut(group, ship) ::: They staked out the ship.",
        "Killed(group, argentinianGangsters) ::: They killed several Argentinian gangsters.",
        "Killed(group, hungarianGangsters) ::: They killed several Hungarian gangsters.",
        "¬FoundDrugsOnBoard(group) ::: They found no drugs on board.",
        "Killed(mcmanus, unseenPerson) ::: McManus was killed by an unseen person.",
        "Killed(hockney, unseenPerson) ::: Hockney was killed by an unseen person.",
        "Killed(lockedMan, unseenPerson) ::: The man locked aboard the ship was killed by an unseen person.",
        "Killed(keaton, unseenPerson) ::: Keaton was killed by an unseen person.",
        "SetOnFire(ship) ::: The ship was set on fire.",
        "LookedOn(verbal, ship) ::: Verbal looked on as the ship was set on fire."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 423,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 6,
      "paragraph": "Moments later, Kujan realizes that Verbal's entire story was a lie, pieced together from details on a crowded bulletin board in his office. Meanwhile, Verbal walks outside, gradually dropping his limp and flexing his supposedly withered hand. As Kujan runs after Verbal, a fax comes in from California: a police sketch artist's rendering of Söze, dictated by Kovash, that looks exactly like Verbal. Kujan misses Verbal by moments, as the latter disappears into a car driven by \"Kobayashi\".",
      "question_template": "Keaton was in [[CANDIDATE_ANSWER]] when he tried to sell stolen items to Redfoot.",
      "candidate_answers": [
        "The story begins in Kujan's office",
        "A crowded bulletin board in his office"
      ],
      "predicates": [
        "Fabricated(x, y) ::: x's story is fabricated from details found in y's office.",
        "Identical(x, y) ::: x's appearance is identical to y's appearance.",
        "Misses(x, y) ::: x misses y.",
        "Disappears(x, y) ::: x disappears into a vehicle driven by y.",
        "Flexes(x, y) ::: x flexes y."
      ],
      "premises": [
        "Fabricated(b_1, a_1) ::: Verbal's story is fabricated from details found in Kujan's office.",
        "Identical(a_2, a_3) ::: Verbal's appearance is identical to the police sketch of Söze.",
        "Misses(a_1, a_2) ::: Kujan misses Verbal by moments.",
        "Disappears(a_2, \"Kobayashi\") ::: Verbal disappears into a car driven by Kobayashi.",
        "Flexes(a_2, f) ::: Verbal flexes his supposedly withered hand."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "424": [
    {
      "id": 424,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 2,
      "paragraph": "Verbal explains that, six weeks earlier in New York, he and the other criminals were arrested on supposedly a trumped-up hijacking charge, and decided to pull another heist to get back at the police. Led by Keaton, a former corrupt policeman, they robbed a group of corrupt cops who transported smugglers in a police convoy. They then went to California to fence the stolen jewels with a criminal named Redfoot. Redfoot turned them on to another jewel heist, but the quarry turned out to be heroin, and the five had to shoot their way out. Soon after, a lawyer named Kobayashi contacted them and told them that Keyser Söze, a Turkish crime lord with a mythical reputation from whom all of the thieves had unwittingly stolen (including Hockney who hijacked the original truck six weeks earlier in New York), had offered them a job: invade a ship manned by a gang of Argentinian drug dealers with whom Söze was competing and destroy the $91 million worth of cocaine that they were transporting.",
      "question_template": "[[CANDIDATE_ANSWER]] sent an agent to interrogate Verbal.",
      "candidate_answers": [
        "- A lawyer named Kobayashi",
        "- Contacted them and told them that Keyser Söze... had offered them a job"
      ],
      "predicates": [
        "Arrested(x, y) ::: x was arrested on charge y.",
        "Robbed(x, y) ::: x robbed y.",
        "Fenced(x, y) ::: x fenced stolen goods with y.",
        "Contacted(x, y) ::: x contacted y.",
        "OfferedJob(x, y, z) ::: x offered y a job to z.",
        "Transporting(x, y) ::: x is transporting y.",
        "Competing(x, y) ::: x is competing with y."
      ],
      "premises": [
        "Arrested(a_2, trumped_up_hijacking_charge) ::: Verbal and the other criminals were arrested on supposedly a trumped-up hijacking charge.",
        "Robbed(a_0, corrupt_cops) ::: Led by Keaton, they robbed a group of corrupt cops.",
        "Fenced(a_0, Redfoot) ::: They went to California to fence the stolen jewels with a criminal named Redfoot.",
        "Contacted(Kobayashi, a_0) ::: A lawyer named Kobayashi contacted them.",
        "OfferedJob(Keyser_Söze, a_0, invade_ship_and_destroy_cocaine) ::: Keyser Söze offered the group of criminals a job to invade a ship and destroy the cocaine being transported by the Argentinian drug dealers.",
        "Transporting(argentinian_drug_dealers, cocaine) ::: The Argentinian drug dealers were transporting cocaine.",
        "Competing(Keyser_Söze, argentinian_drug_dealers) ::: Keyser Söze was competing with the Argentinian drug dealers."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 424,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 6,
      "paragraph": "Moments later, Kujan realizes that Verbal's entire story was a lie, pieced together from details on a crowded bulletin board in his office. Meanwhile, Verbal walks outside, gradually dropping his limp and flexing his supposedly withered hand. As Kujan runs after Verbal, a fax comes in from California: a police sketch artist's rendering of Söze, dictated by Kovash, that looks exactly like Verbal. Kujan misses Verbal by moments, as the latter disappears into a car driven by \"Kobayashi\".",
      "question_template": "[[CANDIDATE_ANSWER]] sent an agent to interrogate Verbal.",
      "candidate_answers": [
        "A car driven by \"Kobayashi\""
      ],
      "predicates": [
        "Fabricated(x, y) ::: x's story is fabricated from details found in y's office.",
        "Identical(x, y) ::: x's appearance is identical to y's appearance.",
        "Misses(x, y) ::: x misses y.",
        "Disappears(x, y) ::: x disappears into a vehicle driven by y.",
        "Flexes(x, y) ::: x flexes y."
      ],
      "premises": [
        "Fabricated(b_1, a_1) ::: Verbal's story is fabricated from details found in Kujan's office.",
        "Identical(a_2, a_3) ::: Verbal's appearance is identical to the police sketch of Söze.",
        "Misses(a_1, a_2) ::: Kujan misses Verbal by moments.",
        "Disappears(a_2, \"Kobayashi\") ::: Verbal disappears into a car driven by Kobayashi.",
        "Flexes(a_2, f) ::: Verbal flexes his supposedly withered hand."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "425": [
    {
      "id": 425,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 3,
      "paragraph": "When Kujan learns of Söze from FBI agent Jack Baer, he questions Verbal about him. Verbal tells Kujan an underworld legend about Söze: that he had murdered his own family after they had been attacked by a gang of Hungarian criminals, and then massacred the Hungarians and everyone they held dear. He then went underground, never to be seen again, and did business only through underlings who did not know for whom they were working. He became a fearsome urban legend, \"a spook story that criminals tell their kids at night\".",
      "question_template": "[[CANDIDATE_ANSWER]] was Keaton's lawyer.",
      "candidate_answers": [
        "Kujan learns of Söze from FBI agent Jack Baer",
        "Verbal tells Kujan an underworld legend about Söze",
        "He became a fearsome urban legend, \"a spook story that criminals tell their kids at night\""
      ],
      "predicates": [
        "Murdered(x) ::: x has murdered his own family.",
        "Massacred(x) ::: x has massacred a group of people.",
        "Underground(x) ::: x has gone underground.",
        "FearsomeLegend(x) ::: x is a fearsome urban legend.",
        "Tells(x, y) ::: x tells y about something.",
        "BusinessThroughUnderlings(x) ::: x does business only through underlings."
      ],
      "premises": [
        "Tells(a_2, a_1) ::: Verbal tells Kujan about Söze's legend.",
        "Murdered(söze) ::: Söze has murdered his own family after they were attacked by a gang of Hungarian criminals.",
        "Massacred(söze) ::: Söze has massacred the Hungarians and everyone they held dear.",
        "Underground(söze) ::: Söze has gone underground and has never been seen again.",
        "BusinessThroughUnderlings(söze) ::: Söze does business only through underlings who do not know for whom they are working.",
        "FearsomeLegend(söze) ::: Söze is a fearsome urban legend, \"a spook story that criminals tell their kids at night.\""
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 425,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 6,
      "paragraph": "Moments later, Kujan realizes that Verbal's entire story was a lie, pieced together from details on a crowded bulletin board in his office. Meanwhile, Verbal walks outside, gradually dropping his limp and flexing his supposedly withered hand. As Kujan runs after Verbal, a fax comes in from California: a police sketch artist's rendering of Söze, dictated by Kovash, that looks exactly like Verbal. Kujan misses Verbal by moments, as the latter disappears into a car driven by \"Kobayashi\".",
      "question_template": "[[CANDIDATE_ANSWER]] was Keaton's lawyer.",
      "candidate_answers": [
        "Verbal",
        "A police sketch artist's rendering of Söze, dictated by Kovash, that looks exactly like Verbal"
      ],
      "predicates": [
        "Fabricated(x, y) ::: x's story is fabricated from details found in y's office.",
        "Identical(x, y) ::: x's appearance is identical to y's appearance.",
        "Misses(x, y) ::: x misses y.",
        "Disappears(x, y) ::: x disappears into a vehicle driven by y.",
        "Flexes(x, y) ::: x flexes y."
      ],
      "premises": [
        "Fabricated(b_1, a_1) ::: Verbal's story is fabricated from details found in Kujan's office.",
        "Identical(a_2, a_3) ::: Verbal's appearance is identical to the police sketch of Söze.",
        "Misses(a_1, a_2) ::: Kujan misses Verbal by moments.",
        "Disappears(a_2, \"Kobayashi\") ::: Verbal disappears into a car driven by Kobayashi.",
        "Flexes(a_2, f) ::: Verbal flexes his supposedly withered hand."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "426": [
    {
      "id": 426,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 0,
      "paragraph": " The film opens with criminal Dean Keaton lying badly wounded on a ship docked in the San Pedro Bay. He is confronted by a mysterious figure whom he calls \"Keyser\", who shoots him dead and sets fire to the ship,",
      "question_template": "According to the story, the man in the urban legend was from [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Keyser"
      ],
      "predicates": [
        "Wounded(dean) ::: Dean Keaton is badly wounded.",
        "Confronted(dean, keyser) ::: Dean Keaton is confronted by the mysterious figure called \"Keyser\".",
        "Killed(dean, keyser) ::: Dean Keaton is killed by the mysterious figure.",
        "SetFire(ship) ::: The ship is set on fire.",
        "Docked(ship, sanPedroBay) ::: The ship is docked in San Pedro Bay."
      ],
      "premises": [
        "Wounded(dean) ::: The film opens with criminal Dean Keaton lying badly wounded.",
        "Confronted(dean, keyser) ::: He is confronted by a mysterious figure whom he calls \"Keyser\".",
        "Killed(dean, keyser) ::: Keyser shoots Dean Keaton dead.",
        "SetFire(ship) ::: Keyser sets fire to the ship.",
        "Docked(ship, sanPedroBay) ::: The ship is docked in the San Pedro Bay."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 426,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 2,
      "paragraph": "Verbal explains that, six weeks earlier in New York, he and the other criminals were arrested on supposedly a trumped-up hijacking charge, and decided to pull another heist to get back at the police. Led by Keaton, a former corrupt policeman, they robbed a group of corrupt cops who transported smugglers in a police convoy. They then went to California to fence the stolen jewels with a criminal named Redfoot. Redfoot turned them on to another jewel heist, but the quarry turned out to be heroin, and the five had to shoot their way out. Soon after, a lawyer named Kobayashi contacted them and told them that Keyser Söze, a Turkish crime lord with a mythical reputation from whom all of the thieves had unwittingly stolen (including Hockney who hijacked the original truck six weeks earlier in New York), had offered them a job: invade a ship manned by a gang of Argentinian drug dealers with whom Söze was competing and destroy the $91 million worth of cocaine that they were transporting.",
      "question_template": "According to the story, the man in the urban legend was from [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Keyser Söze",
        "A Turkish crime lord with a mythical reputation"
      ],
      "predicates": [
        "Arrested(x, y) ::: x was arrested on charge y.",
        "Robbed(x, y) ::: x robbed y.",
        "Fenced(x, y) ::: x fenced stolen goods with y.",
        "Contacted(x, y) ::: x contacted y.",
        "OfferedJob(x, y, z) ::: x offered y a job to z.",
        "Transporting(x, y) ::: x is transporting y.",
        "Competing(x, y) ::: x is competing with y."
      ],
      "premises": [
        "Arrested(a_2, trumped_up_hijacking_charge) ::: Verbal and the other criminals were arrested on supposedly a trumped-up hijacking charge.",
        "Robbed(a_0, corrupt_cops) ::: Led by Keaton, they robbed a group of corrupt cops.",
        "Fenced(a_0, Redfoot) ::: They went to California to fence the stolen jewels with a criminal named Redfoot.",
        "Contacted(Kobayashi, a_0) ::: A lawyer named Kobayashi contacted them.",
        "OfferedJob(Keyser_Söze, a_0, invade_ship_and_destroy_cocaine) ::: Keyser Söze offered the group of criminals a job to invade a ship and destroy the cocaine being transported by the Argentinian drug dealers.",
        "Transporting(argentinian_drug_dealers, cocaine) ::: The Argentinian drug dealers were transporting cocaine.",
        "Competing(Keyser_Söze, argentinian_drug_dealers) ::: Keyser Söze was competing with the Argentinian drug dealers."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 426,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 4,
      "paragraph": "Verbal goes on to explain that, after Fenster had bailed on the group, Kobayashi gave them a location at which to find their compatriot's dead body. They tried to kill Kobayashi, but he strong-armed them into performing the heist by threatening their loved ones. They staked out the ship and killed several Argentinian and Hungarian gangsters, but found no drugs on board. McManus, Hockney and a man locked aboard the ship were killed by an unseen person, who also killed Keaton and set the ship on fire as Verbal looked on.",
      "question_template": "According to the story, the man in the urban legend was from [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Verbal",
        "Kobayashi"
      ],
      "predicates": [
        "BailedOnGroup(x) ::: x bailed on the group.",
        "GaveLocation(x, y) ::: x gave y a location.",
        "TriedToKill(x, y) ::: x tried to kill y.",
        "StrongArmed(x, y) ::: x strong-armed y.",
        "PerformedHeist(x) ::: x performed the heist.",
        "ThreatenedLovedOnes(x) ::: x threatened their loved ones.",
        "StakedOut(x, y) ::: x staked out y.",
        "Killed(x, y) ::: x killed y.",
        "FoundDrugsOnBoard(x) ::: x found drugs on board.",
        "KilledByUnseenPerson(x) ::: x was killed by an unseen person.",
        "SetOnFire(x) ::: x was set on fire.",
        "LookedOn(x, y) ::: x looked on at y."
      ],
      "premises": [
        "BailedOnGroup(fenster) ::: Fenster had bailed on the group.",
        "GaveLocation(kobayashi, deadBodyLocation) ::: Kobayashi gave them a location at which to find their compatriot's dead body.",
        "TriedToKill(group, kobayashi) ::: They tried to kill Kobayashi.",
        "StrongArmed(kobayashi, group) ::: Kobayashi strong-armed them into performing the heist by threatening their loved ones.",
        "StakedOut(group, ship) ::: They staked out the ship.",
        "Killed(group, argentinianGangsters) ::: They killed several Argentinian gangsters.",
        "Killed(group, hungarianGangsters) ::: They killed several Hungarian gangsters.",
        "¬FoundDrugsOnBoard(group) ::: They found no drugs on board.",
        "Killed(mcmanus, unseenPerson) ::: McManus was killed by an unseen person.",
        "Killed(hockney, unseenPerson) ::: Hockney was killed by an unseen person.",
        "Killed(lockedMan, unseenPerson) ::: The man locked aboard the ship was killed by an unseen person.",
        "Killed(keaton, unseenPerson) ::: Keaton was killed by an unseen person.",
        "SetOnFire(ship) ::: The ship was set on fire.",
        "LookedOn(verbal, ship) ::: Verbal looked on as the ship was set on fire."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 426,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 6,
      "paragraph": "Moments later, Kujan realizes that Verbal's entire story was a lie, pieced together from details on a crowded bulletin board in his office. Meanwhile, Verbal walks outside, gradually dropping his limp and flexing his supposedly withered hand. As Kujan runs after Verbal, a fax comes in from California: a police sketch artist's rendering of Söze, dictated by Kovash, that looks exactly like Verbal. Kujan misses Verbal by moments, as the latter disappears into a car driven by \"Kobayashi\".",
      "question_template": "According to the story, the man in the urban legend was from [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Verbal",
        "Verbal's entire story was a lie",
        "A police sketch artist's rendering of Söze, dictated by Kovash, that looks exactly like Verbal"
      ],
      "predicates": [
        "Fabricated(x, y) ::: x's story is fabricated from details found in y's office.",
        "Identical(x, y) ::: x's appearance is identical to y's appearance.",
        "Misses(x, y) ::: x misses y.",
        "Disappears(x, y) ::: x disappears into a vehicle driven by y.",
        "Flexes(x, y) ::: x flexes y."
      ],
      "premises": [
        "Fabricated(b_1, a_1) ::: Verbal's story is fabricated from details found in Kujan's office.",
        "Identical(a_2, a_3) ::: Verbal's appearance is identical to the police sketch of Söze.",
        "Misses(a_1, a_2) ::: Kujan misses Verbal by moments.",
        "Disappears(a_2, \"Kobayashi\") ::: Verbal disappears into a car driven by Kobayashi.",
        "Flexes(a_2, f) ::: Verbal flexes his supposedly withered hand."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "428": [
    {
      "id": 428,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 1,
      "paragraph": "The bloodbath on the ship leaves only two survivors: Arkosh Kovash, a Hungarian mobster hospitalized with severe burns; and Roger \"Verbal\" Kint, a con artist with cerebral palsy. Customs agent Dave Kujan flies in from New York City to interrogate Verbal, who describes in flashback the events that led him and four other criminals - Keaton, Michael McManus, Fred Fenster and Todd Hockney - onto the ship.",
      "question_template": "The source of information for the story Roger told Dave was [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Verbal Kint",
        "A con artist with cerebral palsy",
        "Describes in flashback the events that led him and four other criminals onto the ship"
      ],
      "predicates": [
        "Survivor(x) ::: x is a survivor of the bloodbath on the ship.",
        "Mobster(x) ::: x is a mobster.",
        "Hospitalized(x) ::: x is hospitalized.",
        "ConArtist(x) ::: x is a con artist.",
        "CerebralPalsy(x) ::: x has cerebral palsy.",
        "Interrogates(x, y) ::: x interrogates y.",
        "Describes(x, y) ::: x describes y.",
        "Criminal(x) ::: x is a criminal.",
        "PartOfGroup(x, g) ::: x is part of group g.",
        "Event(x, y) ::: x is an event that leads to y."
      ],
      "premises": [
        "Survivor(arkosh) ∧ Mobster(arkosh) ∧ Hospitalized(arkosh) ::: Arkosh Kovash is a Hungarian mobster hospitalized with severe burns.",
        "Survivor(verbal) ∧ ConArtist(verbal) ∧ CerebralPalsy(verbal) ::: Roger \"Verbal\" Kint is a con artist with cerebral palsy.",
        "Interrogates(kujan, verbal) ::: Customs agent Dave Kujan interrogates Verbal.",
        "Describes(verbal, story) ::: Verbal describes the events that led him and four other criminals onto the ship.",
        "∃x (Criminal(x) ∧ PartOfGroup(x, group)) ::: There are criminals who are part of a group.",
        "Event(story, ship) ::: The story involves events that led to the situation on the ship.",
        "Conclusion:",
        "Survivor(arkosh) ∧ Survivor(verbal) ::: Arkosh Kovash and Roger \"Verbal\" Kint are the survivors of the bloodbath on the ship."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "429": [
    {
      "id": 429,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 2,
      "paragraph": "Verbal explains that, six weeks earlier in New York, he and the other criminals were arrested on supposedly a trumped-up hijacking charge, and decided to pull another heist to get back at the police. Led by Keaton, a former corrupt policeman, they robbed a group of corrupt cops who transported smugglers in a police convoy. They then went to California to fence the stolen jewels with a criminal named Redfoot. Redfoot turned them on to another jewel heist, but the quarry turned out to be heroin, and the five had to shoot their way out. Soon after, a lawyer named Kobayashi contacted them and told them that Keyser Söze, a Turkish crime lord with a mythical reputation from whom all of the thieves had unwittingly stolen (including Hockney who hijacked the original truck six weeks earlier in New York), had offered them a job: invade a ship manned by a gang of Argentinian drug dealers with whom Söze was competing and destroy the $91 million worth of cocaine that they were transporting.",
      "question_template": "Kujan figured out that Kint wasn't telling the truth when [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "A former corrupt policeman"
      ],
      "predicates": [
        "Arrested(x, y) ::: x was arrested on charge y.",
        "Robbed(x, y) ::: x robbed y.",
        "Fenced(x, y) ::: x fenced stolen goods with y.",
        "Contacted(x, y) ::: x contacted y.",
        "OfferedJob(x, y, z) ::: x offered y a job to z.",
        "Transporting(x, y) ::: x is transporting y.",
        "Competing(x, y) ::: x is competing with y."
      ],
      "premises": [
        "Arrested(a_2, trumped_up_hijacking_charge) ::: Verbal and the other criminals were arrested on supposedly a trumped-up hijacking charge.",
        "Robbed(a_0, corrupt_cops) ::: Led by Keaton, they robbed a group of corrupt cops.",
        "Fenced(a_0, Redfoot) ::: They went to California to fence the stolen jewels with a criminal named Redfoot.",
        "Contacted(Kobayashi, a_0) ::: A lawyer named Kobayashi contacted them.",
        "OfferedJob(Keyser_Söze, a_0, invade_ship_and_destroy_cocaine) ::: Keyser Söze offered the group of criminals a job to invade a ship and destroy the cocaine being transported by the Argentinian drug dealers.",
        "Transporting(argentinian_drug_dealers, cocaine) ::: The Argentinian drug dealers were transporting cocaine.",
        "Competing(Keyser_Söze, argentinian_drug_dealers) ::: Keyser Söze was competing with the Argentinian drug dealers."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 429,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 5,
      "paragraph": "Verbal concludes his story, but Kujan does not believe it. He insists that Keaton must be Söze, as one of the murder victims on the boat was Arturo Marquez, a drug dealer who escaped prosecution by claiming he could identify Söze — and who was represented by Edie Finneran, Keaton's lawyer and girlfriend. Kujan claims that the Argentinians were selling Marquez to Söze's Hungarian rivals and Keaton used the heist as a distraction to let him kill Marquez. Kujan also informs Verbal that Finneran has been murdered. Verbal says that the entire plan was Keaton's idea, but refuses to testify in court. Verbal's bond is posted and he is released.",
      "question_template": "Kujan figured out that Kint wasn't telling the truth when [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Keaton's lawyer and girlfriend",
        "The entire plan was Keaton's idea"
      ],
      "predicates": [
        "ImplicatedInMurder(x, y) ::: x is implicated in the murder of y.",
        "ConnectedToEvents(x, y) ::: x's murder is connected to the events surrounding y.",
        "ReleaseContingentOn(x, y) ::: x's release is contingent upon the posting of y.",
        "Testify(x) ::: x testifies in court.",
        "Idea(x, y) ::: x is the idea of y."
      ],
      "premises": [
        "ImplicatedInMurder(keaton, arturoMarquez) ::: Keaton is implicated in the murder of Arturo Marquez.",
        "ConnectedToEvents(edieFinneran, soze) ::: Edie Finneran's murder is connected to the events surrounding Söze.",
        "ReleaseContingentOn(verbal, bond) ::: Verbal's release is contingent upon the posting of his bond.",
        "¬Testify(verbal) ::: Verbal refuses to testify in court.",
        "Idea(keaton, plan) ::: The entire plan was Keaton's idea."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "430": [
    {
      "id": 430,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 2,
      "paragraph": "Verbal explains that, six weeks earlier in New York, he and the other criminals were arrested on supposedly a trumped-up hijacking charge, and decided to pull another heist to get back at the police. Led by Keaton, a former corrupt policeman, they robbed a group of corrupt cops who transported smugglers in a police convoy. They then went to California to fence the stolen jewels with a criminal named Redfoot. Redfoot turned them on to another jewel heist, but the quarry turned out to be heroin, and the five had to shoot their way out. Soon after, a lawyer named Kobayashi contacted them and told them that Keyser Söze, a Turkish crime lord with a mythical reputation from whom all of the thieves had unwittingly stolen (including Hockney who hijacked the original truck six weeks earlier in New York), had offered them a job: invade a ship manned by a gang of Argentinian drug dealers with whom Söze was competing and destroy the $91 million worth of cocaine that they were transporting.",
      "question_template": "A lawyer named Kobayashi contacted them and told them that [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Verbal explains that, six weeks earlier in New York, he and the other criminals were arrested on supposedly a trumped-up hijacking charge",
        "- They decided to pull another heist to get back at the police",
        "- Led by Keaton, a former corrupt policeman, they robbed a group of corrupt cops",
        "- They then went to California to fence the stolen jewels with a criminal named Redfoot",
        "- Redfoot turned them on to another jewel heist",
        "- The quarry turned out to be heroin, and the five had to shoot their way out",
        "- A lawyer named Kobayashi contacted them and told them that Keyser Söze had offered them a job",
        "- Invade a ship manned by a gang of Argentinian drug dealers and destroy the $91 million worth of cocaine"
      ],
      "predicates": [
        "Arrested(x, y) ::: x was arrested on charge y.",
        "Robbed(x, y) ::: x robbed y.",
        "Fenced(x, y) ::: x fenced stolen goods with y.",
        "Contacted(x, y) ::: x contacted y.",
        "OfferedJob(x, y, z) ::: x offered y a job to z.",
        "Transporting(x, y) ::: x is transporting y.",
        "Competing(x, y) ::: x is competing with y."
      ],
      "premises": [
        "Arrested(a_2, trumped_up_hijacking_charge) ::: Verbal and the other criminals were arrested on supposedly a trumped-up hijacking charge.",
        "Robbed(a_0, corrupt_cops) ::: Led by Keaton, they robbed a group of corrupt cops.",
        "Fenced(a_0, Redfoot) ::: They went to California to fence the stolen jewels with a criminal named Redfoot.",
        "Contacted(Kobayashi, a_0) ::: A lawyer named Kobayashi contacted them.",
        "OfferedJob(Keyser_Söze, a_0, invade_ship_and_destroy_cocaine) ::: Keyser Söze offered the group of criminals a job to invade a ship and destroy the cocaine being transported by the Argentinian drug dealers.",
        "Transporting(argentinian_drug_dealers, cocaine) ::: The Argentinian drug dealers were transporting cocaine.",
        "Competing(Keyser_Söze, argentinian_drug_dealers) ::: Keyser Söze was competing with the Argentinian drug dealers."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "Contacted(Kobayashi, a_0) ∧ OfferedJob(Keyser_Söze, a_0, invade_ship_and_destroy_cocaine)",
        "None"
      ]
    },
    {
      "id": 430,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 4,
      "paragraph": "Verbal goes on to explain that, after Fenster had bailed on the group, Kobayashi gave them a location at which to find their compatriot's dead body. They tried to kill Kobayashi, but he strong-armed them into performing the heist by threatening their loved ones. They staked out the ship and killed several Argentinian and Hungarian gangsters, but found no drugs on board. McManus, Hockney and a man locked aboard the ship were killed by an unseen person, who also killed Keaton and set the ship on fire as Verbal looked on.",
      "question_template": "A lawyer named Kobayashi contacted them and told them that [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Kobayashi gave them a location at which to find their compatriot's dead body.",
        "- They tried to kill Kobayashi, but he strong-armed them into performing the heist by threatening their loved ones.",
        "- They staked out the ship and killed several Argentinian and Hungarian gangsters, but found no drugs on board.",
        "- McManus, Hockney and a man locked aboard the ship were killed by an unseen person, who also killed Keaton and set the ship on fire as Verbal looked on."
      ],
      "predicates": [
        "BailedOnGroup(x) ::: x bailed on the group.",
        "GaveLocation(x, y) ::: x gave y a location.",
        "TriedToKill(x, y) ::: x tried to kill y.",
        "StrongArmed(x, y) ::: x strong-armed y.",
        "PerformedHeist(x) ::: x performed the heist.",
        "ThreatenedLovedOnes(x) ::: x threatened their loved ones.",
        "StakedOut(x, y) ::: x staked out y.",
        "Killed(x, y) ::: x killed y.",
        "FoundDrugsOnBoard(x) ::: x found drugs on board.",
        "KilledByUnseenPerson(x) ::: x was killed by an unseen person.",
        "SetOnFire(x) ::: x was set on fire.",
        "LookedOn(x, y) ::: x looked on at y."
      ],
      "premises": [
        "BailedOnGroup(fenster) ::: Fenster had bailed on the group.",
        "GaveLocation(kobayashi, deadBodyLocation) ::: Kobayashi gave them a location at which to find their compatriot's dead body.",
        "TriedToKill(group, kobayashi) ::: They tried to kill Kobayashi.",
        "StrongArmed(kobayashi, group) ::: Kobayashi strong-armed them into performing the heist by threatening their loved ones.",
        "StakedOut(group, ship) ::: They staked out the ship.",
        "Killed(group, argentinianGangsters) ::: They killed several Argentinian gangsters.",
        "Killed(group, hungarianGangsters) ::: They killed several Hungarian gangsters.",
        "¬FoundDrugsOnBoard(group) ::: They found no drugs on board.",
        "Killed(mcmanus, unseenPerson) ::: McManus was killed by an unseen person.",
        "Killed(hockney, unseenPerson) ::: Hockney was killed by an unseen person.",
        "Killed(lockedMan, unseenPerson) ::: The man locked aboard the ship was killed by an unseen person.",
        "Killed(keaton, unseenPerson) ::: Keaton was killed by an unseen person.",
        "SetOnFire(ship) ::: The ship was set on fire.",
        "LookedOn(verbal, ship) ::: Verbal looked on as the ship was set on fire."
      ],
      "conclusions": [
        "GaveLocation(kobayashi, deadBodyLocation)",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 430,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 5,
      "paragraph": "Verbal concludes his story, but Kujan does not believe it. He insists that Keaton must be Söze, as one of the murder victims on the boat was Arturo Marquez, a drug dealer who escaped prosecution by claiming he could identify Söze — and who was represented by Edie Finneran, Keaton's lawyer and girlfriend. Kujan claims that the Argentinians were selling Marquez to Söze's Hungarian rivals and Keaton used the heist as a distraction to let him kill Marquez. Kujan also informs Verbal that Finneran has been murdered. Verbal says that the entire plan was Keaton's idea, but refuses to testify in court. Verbal's bond is posted and he is released.",
      "question_template": "A lawyer named Kobayashi contacted them and told them that [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Verbal's bond is posted",
        "He is released"
      ],
      "predicates": [
        "ImplicatedInMurder(x, y) ::: x is implicated in the murder of y.",
        "ConnectedToEvents(x, y) ::: x's murder is connected to the events surrounding y.",
        "ReleaseContingentOn(x, y) ::: x's release is contingent upon the posting of y.",
        "Testify(x) ::: x testifies in court.",
        "Idea(x, y) ::: x is the idea of y."
      ],
      "premises": [
        "ImplicatedInMurder(keaton, arturoMarquez) ::: Keaton is implicated in the murder of Arturo Marquez.",
        "ConnectedToEvents(edieFinneran, soze) ::: Edie Finneran's murder is connected to the events surrounding Söze.",
        "ReleaseContingentOn(verbal, bond) ::: Verbal's release is contingent upon the posting of his bond.",
        "¬Testify(verbal) ::: Verbal refuses to testify in court.",
        "Idea(keaton, plan) ::: The entire plan was Keaton's idea."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 430,
      "context_id": "35891de62bab83d5b312ddeb835c7e0b245e3282",
      "paragraph_id": 6,
      "paragraph": "Moments later, Kujan realizes that Verbal's entire story was a lie, pieced together from details on a crowded bulletin board in his office. Meanwhile, Verbal walks outside, gradually dropping his limp and flexing his supposedly withered hand. As Kujan runs after Verbal, a fax comes in from California: a police sketch artist's rendering of Söze, dictated by Kovash, that looks exactly like Verbal. Kujan misses Verbal by moments, as the latter disappears into a car driven by \"Kobayashi\".",
      "question_template": "A lawyer named Kobayashi contacted them and told them that [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Verbal's entire story was a lie",
        "A fax comes in from California: a police sketch artist's rendering of Söze, dictated by Kovash, that looks exactly like Verbal",
        "Kujan misses Verbal by moments, as the latter disappears into a car driven by \"Kobayashi\""
      ],
      "predicates": [
        "Fabricated(x, y) ::: x's story is fabricated from details found in y's office.",
        "Identical(x, y) ::: x's appearance is identical to y's appearance.",
        "Misses(x, y) ::: x misses y.",
        "Disappears(x, y) ::: x disappears into a vehicle driven by y.",
        "Flexes(x, y) ::: x flexes y."
      ],
      "premises": [
        "Fabricated(b_1, a_1) ::: Verbal's story is fabricated from details found in Kujan's office.",
        "Identical(a_2, a_3) ::: Verbal's appearance is identical to the police sketch of Söze.",
        "Misses(a_1, a_2) ::: Kujan misses Verbal by moments.",
        "Disappears(a_2, \"Kobayashi\") ::: Verbal disappears into a car driven by Kobayashi.",
        "Flexes(a_2, f) ::: Verbal flexes his supposedly withered hand."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "436": [
    {
      "id": 436,
      "context_id": "42b6d4260bbc83d7d8343779d34e96a067dfaad4",
      "paragraph_id": 1,
      "paragraph": "The Rebels learn that the Empire has been constructing a second Death Star under the direct supervision of the Emperor himself. As the station is protected by an energy shield, Han leads a strike team to destroy the shield generator on the forest moon of Endor; doing so would allow a squadron of starfighters to destroy the Death Star. The strike team, accompanied by Luke and Leia, travels to Endor in a stolen Imperial shuttle. On Endor, Luke and his companions encounter a tribe of Ewoks and, after an initial conflict, gain their trust. Later, Luke tells Leia that she is his sister, Vader is their father, and he must go and confront him. Luke surrenders to Imperial troops and is taken to Vader. Luke tries to convince Vader to turn from the dark side of the Force, but fails.",
      "question_template": "[[CANDIDATE_ANSWER]] is revealed to be Soze.",
      "candidate_answers": [
        "Yoda confirms to Luke Skywalker that Vader is their father",
        "Luke tells Leia that she is his sister"
      ],
      "predicates": [
        "Constructing(c_1) ::: The Death Star is being constructed.",
        "Supervised(c_1, a_5) ::: The Emperor supervises the construction of the Death Star.",
        "Protected(c_1) ::: The Death Star is protected by an energy shield.",
        "Leads(a_4, b_0) ::: Han leads a strike team.",
        "Destroys(b_0, c_1) ::: The strike team destroys the Death Star.",
        "Travels(a_4, c_2, f) ::: Han travels to Endor in a stolen Imperial shuttle.",
        "Encounters(a_2, b_1) ::: Luke encounters a tribe of Ewoks.",
        "GainsTrust(a_2, b_1) ::: Luke gains the trust of the Ewoks.",
        "Tells(a_2, a_3) ::: Luke tells Leia something.",
        "Surrenders(a_2, a_5) ::: Luke surrenders to Vader.",
        "Confronts(a_2, a_5) ::: Luke confronts Vader.",
        "Fails(a_2, a_5) ::: Luke fails to convince Vader."
      ],
      "premises": [
        "Constructing(c_1) ∧ Supervised(c_1, a_5) ::: The Empire has been constructing a second Death Star under the direct supervision of the Emperor.",
        "Protected(c_1) ::: The station is protected by an energy shield.",
        "Leads(a_4, b_0) ∧ Destroys(b_0, c_1) ::: Han leads a strike team to destroy the shield generator on the forest moon of Endor; doing so would allow a squadron of starfighters to destroy the Death Star.",
        "Travels(a_4, c_2, f) ::: The strike team, accompanied by Luke and Leia, travels to Endor in a stolen Imperial shuttle.",
        "Encounters(a_2, b_1) ∧ GainsTrust(a_2, b_1) ::: Luke and his companions encounter a tribe of Ewoks and gain their trust.",
        "Tells(a_2, a_3) ::: Luke tells Leia that she is his sister, Vader is their father, and he must go and confront him.",
        "Surrenders(a_2, a_5) ::: Luke surrenders to Imperial troops and is taken to Vader.",
        "Fails(a_2, a_5) ::: Luke tries to convince Vader to turn from the dark side of the Force, but fails."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 436,
      "context_id": "42b6d4260bbc83d7d8343779d34e96a067dfaad4",
      "paragraph_id": 2,
      "paragraph": "Vader takes Luke to the new Death Star to meet the Emperor, who is intent on turning him to the dark side. The Emperor reveals that the Death Star is fully operational and the Rebel fleet will fall into a trap. On Endor, Han's strike team is captured by Imperial forces, but a surprise counterattack by the Ewoks allows the Rebels to battle the Imperials. Meanwhile, Lando, piloting the Millennium Falcon, leads the Rebel fleet to the Death Star, only to find that the station's shield is still active and the Imperial fleet is waiting for them. The Emperor tempts Luke to give in to his anger and join him. Luke engages Vader in a lightsaber duel. Vader senses that Luke has a sister and suggests turning her to the dark side. Enraged, Luke overpowers Vader and severs his father's prosthetic right hand. Upon seeing the remnants of Vader's prosthetic, he sees a parallel between himself and Vader, and fears he will become like Vader. The Emperor tells Luke to kill Vader and take his place, but Luke refuses, declaring himself a Jedi as his father had been. On Endor, the strike team defeats the Imperial forces and destroys the shield generator, allowing the Rebel fleet to launch their assault on the Death Star. Simultaneously, the Emperor tortures Luke with Force lightning. Unwilling to let his son die, Vader throws the Emperor down the Death Star reactor shaft, killing him, but is mortally wounded in the process. He asks Luke to remove his mask, and after a brief talk, he dies peacefully.",
      "question_template": "[[CANDIDATE_ANSWER]] is revealed to be Soze.",
      "candidate_answers": [
        "- \"He asks Luke to remove his mask\"",
        "- \"He dies peacefully\""
      ],
      "predicates": [
        "Jedi(x) ::: x is a Jedi.",
        "DarkSide(x) ::: x is on the dark side.",
        "Refuses(x, y) ::: x refuses to give in to y.",
        "Sacrifices(x, y) ::: x sacrifices himself to save y.",
        "Tortures(x, y) ::: x tortures y.",
        "Engages(x, y) ::: x engages in a duel with y.",
        "Overpowers(x, y) ::: x overpowers y.",
        "Severs(x, y) ::: x severs y.",
        "Dies(x) ::: x dies.",
        "Authorizes(x, y) ::: x authorizes y to take his place.",
        "HasSister(x) ::: x has a sister.",
        "RebelFleet(x) ::: x is part of the Rebel fleet.",
        "ImperialForces(x) ::: x is part of the Imperial forces.",
        "Counterattack(x, y) ::: x counterattacks y.",
        "Destroys(x, y) ::: x destroys y.",
        "LaunchesAssault(x, y) ::: x launches an assault on y."
      ],
      "premises": [
        "Refuses(luke, darkSide) ::: Luke refuses to give in to the dark side and declares himself a Jedi.",
        "Sacrifices(vader, luke) ::: Vader sacrifices himself to save Luke from the Emperor.",
        "Tortures(emperor, luke) ::: The Emperor tortures Luke with Force lightning.",
        "Engages(luke, vader) ::: Luke engages Vader in a lightsaber duel.",
        "Overpowers(luke, vader) ::: Luke overpowers Vader.",
        "Severs(luke, prostheticHand) ::: Luke severs Vader's prosthetic right hand.",
        "HasSister(luke) ::: Luke has a sister.",
        "Authorizes(emperor, luke) ::: The Emperor tells Luke to kill Vader and take his place.",
        "Counterattack(ewoks, imperialForces) ::: A surprise counterattack by the Ewoks allows the Rebels to battle the Imperials.",
        "Destroys(strikeTeam, shieldGenerator) ::: The strike team defeats the Imperial forces and destroys the shield generator.",
        "LaunchesAssault(rebelFleet, deathStar) ::: The Rebel fleet launches their assault on the Death Star.",
        "Dies(vader) ::: Vader dies peacefully after asking Luke to remove his mask.",
        "Conclusion:",
        "Jedi(luke) ::: Luke is a Jedi.",
        "RebelFleet(rebelFleet) ::: The Rebel fleet is part of the battle against the Death Star.",
        "ImperialForces(imperialForces) ::: The Imperial forces are defeated by the Rebels."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "437": [
    {
      "id": 437,
      "context_id": "42b6d4260bbc83d7d8343779d34e96a067dfaad4",
      "paragraph_id": 1,
      "paragraph": "The Rebels learn that the Empire has been constructing a second Death Star under the direct supervision of the Emperor himself. As the station is protected by an energy shield, Han leads a strike team to destroy the shield generator on the forest moon of Endor; doing so would allow a squadron of starfighters to destroy the Death Star. The strike team, accompanied by Luke and Leia, travels to Endor in a stolen Imperial shuttle. On Endor, Luke and his companions encounter a tribe of Ewoks and, after an initial conflict, gain their trust. Later, Luke tells Leia that she is his sister, Vader is their father, and he must go and confront him. Luke surrenders to Imperial troops and is taken to Vader. Luke tries to convince Vader to turn from the dark side of the Force, but fails.",
      "question_template": "The survivors found on the ship are [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Vader is their father"
      ],
      "predicates": [
        "Constructing(c_1) ::: The Death Star is being constructed.",
        "Supervised(c_1, a_5) ::: The Emperor supervises the construction of the Death Star.",
        "Protected(c_1) ::: The Death Star is protected by an energy shield.",
        "Leads(a_4, b_0) ::: Han leads a strike team.",
        "Destroys(b_0, c_1) ::: The strike team destroys the Death Star.",
        "Travels(a_4, c_2, f) ::: Han travels to Endor in a stolen Imperial shuttle.",
        "Encounters(a_2, b_1) ::: Luke encounters a tribe of Ewoks.",
        "GainsTrust(a_2, b_1) ::: Luke gains the trust of the Ewoks.",
        "Tells(a_2, a_3) ::: Luke tells Leia something.",
        "Surrenders(a_2, a_5) ::: Luke surrenders to Vader.",
        "Confronts(a_2, a_5) ::: Luke confronts Vader.",
        "Fails(a_2, a_5) ::: Luke fails to convince Vader."
      ],
      "premises": [
        "Constructing(c_1) ∧ Supervised(c_1, a_5) ::: The Empire has been constructing a second Death Star under the direct supervision of the Emperor.",
        "Protected(c_1) ::: The station is protected by an energy shield.",
        "Leads(a_4, b_0) ∧ Destroys(b_0, c_1) ::: Han leads a strike team to destroy the shield generator on the forest moon of Endor; doing so would allow a squadron of starfighters to destroy the Death Star.",
        "Travels(a_4, c_2, f) ::: The strike team, accompanied by Luke and Leia, travels to Endor in a stolen Imperial shuttle.",
        "Encounters(a_2, b_1) ∧ GainsTrust(a_2, b_1) ::: Luke and his companions encounter a tribe of Ewoks and gain their trust.",
        "Tells(a_2, a_3) ::: Luke tells Leia that she is his sister, Vader is their father, and he must go and confront him.",
        "Surrenders(a_2, a_5) ::: Luke surrenders to Imperial troops and is taken to Vader.",
        "Fails(a_2, a_5) ::: Luke tries to convince Vader to turn from the dark side of the Force, but fails."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 437,
      "context_id": "42b6d4260bbc83d7d8343779d34e96a067dfaad4",
      "paragraph_id": 3,
      "paragraph": "As the battle between the Imperial and Alliance fleets continues, Lando leads a group of Rebel ships into the Death Star's core and destroys the main reactor. As Luke escapes on a shuttle with his father's body, the Falcon flies out of the Death Star as the station explodes. On Endor, Leia reveals to Han that Luke is her brother, and they kiss. Luke returns to Endor and cremates his father's body on a funeral pyre. As the Rebels celebrate their victory over the Empire, Luke smiles as he sees the ghosts of Obi-Wan, Yoda, and the redeemed Anakin watching over them.",
      "question_template": "The survivors found on the ship are [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Anakin",
        "Anakin Skywalker"
      ],
      "predicates": [
        "Brother(x, y) ::: x is the brother of y.",
        "Son(x, y) ::: x is the son of y.",
        "Redeemed(x) ::: x is redeemed.",
        "JediGhost(x) ::: x is a Jedi ghost.",
        "Leads(x, y) ::: x leads a group of y.",
        "Destroys(x, y) ::: x destroys y.",
        "Escapes(x, y) ::: x escapes on y.",
        "FliesOut(x, y) ::: x flies out of y.",
        "Reveals(x, y, z) ::: x reveals to y that z is true.",
        "Kisses(x, y) ::: x kisses y.",
        "Returns(x, y) ::: x returns to y.",
        "Cremates(x, y) ::: x cremates y.",
        "Celebrates(x) ::: x celebrates.",
        "Smiles(x) ::: x smiles.",
        "Sees(x, y) ::: x sees y."
      ],
      "premises": [
        "Brother(luke, leia) ::: Luke is the brother of Leia.",
        "Son(luke, anakin) ::: Luke is the son of Anakin.",
        "Redeemed(anakin) ::: Anakin is redeemed.",
        "JediGhost(obi_wan) ::: Obi-Wan is a Jedi ghost.",
        "JediGhost(yoda) ::: Yoda is a Jedi ghost.",
        "Leads(lando, rebel_ships) ::: Lando leads a group of Rebel ships.",
        "Destroys(lando, main_reactor) ::: Lando destroys the main reactor.",
        "Escapes(luke, shuttle) ::: Luke escapes on a shuttle.",
        "FliesOut(falcon, death_star) ::: The Falcon flies out of the Death Star.",
        "Celebrates(rebels) ::: The Rebels celebrate their victory over the Empire.",
        "Returns(luke, endor) ::: Luke returns to Endor.",
        "Cremates(luke, body) ::: Luke cremates his father's body on a funeral pyre.",
        "Reveals(leia, han, brother_of_luke) ::: Leia reveals to Han that Luke is her brother.",
        "Kisses(leia, han) ::: Leia kisses Han.",
        "Sees(luke, jedi_ghosts) ::: Luke sees the ghosts of Obi-Wan, Yoda, and the redeemed Anakin watching over them.",
        "Smiles(luke) ::: Luke smiles.",
        "Conclusion:",
        "Celebrates(rebels) ::: The Rebels celebrate their victory over the Empire.",
        "Sees(luke, {obi_wan, yoda, anakin}) ::: Luke sees the Jedi ghosts of Obi-Wan, Yoda, and the redeemed Anakin."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "438": [
    {
      "id": 438,
      "context_id": "42b6d4260bbc83d7d8343779d34e96a067dfaad4",
      "paragraph_id": 3,
      "paragraph": "As the battle between the Imperial and Alliance fleets continues, Lando leads a group of Rebel ships into the Death Star's core and destroys the main reactor. As Luke escapes on a shuttle with his father's body, the Falcon flies out of the Death Star as the station explodes. On Endor, Leia reveals to Han that Luke is her brother, and they kiss. Luke returns to Endor and cremates his father's body on a funeral pyre. As the Rebels celebrate their victory over the Empire, Luke smiles as he sees the ghosts of Obi-Wan, Yoda, and the redeemed Anakin watching over them.",
      "question_template": "[[CANDIDATE_ANSWER]] gave the description of Soze to the police.",
      "candidate_answers": [
        "The Death Star"
      ],
      "predicates": [
        "Brother(x, y) ::: x is the brother of y.",
        "Son(x, y) ::: x is the son of y.",
        "Redeemed(x) ::: x is redeemed.",
        "JediGhost(x) ::: x is a Jedi ghost.",
        "Leads(x, y) ::: x leads a group of y.",
        "Destroys(x, y) ::: x destroys y.",
        "Escapes(x, y) ::: x escapes on y.",
        "FliesOut(x, y) ::: x flies out of y.",
        "Reveals(x, y, z) ::: x reveals to y that z is true.",
        "Kisses(x, y) ::: x kisses y.",
        "Returns(x, y) ::: x returns to y.",
        "Cremates(x, y) ::: x cremates y.",
        "Celebrates(x) ::: x celebrates.",
        "Smiles(x) ::: x smiles.",
        "Sees(x, y) ::: x sees y."
      ],
      "premises": [
        "Brother(luke, leia) ::: Luke is the brother of Leia.",
        "Son(luke, anakin) ::: Luke is the son of Anakin.",
        "Redeemed(anakin) ::: Anakin is redeemed.",
        "JediGhost(obi_wan) ::: Obi-Wan is a Jedi ghost.",
        "JediGhost(yoda) ::: Yoda is a Jedi ghost.",
        "Leads(lando, rebel_ships) ::: Lando leads a group of Rebel ships.",
        "Destroys(lando, main_reactor) ::: Lando destroys the main reactor.",
        "Escapes(luke, shuttle) ::: Luke escapes on a shuttle.",
        "FliesOut(falcon, death_star) ::: The Falcon flies out of the Death Star.",
        "Celebrates(rebels) ::: The Rebels celebrate their victory over the Empire.",
        "Returns(luke, endor) ::: Luke returns to Endor.",
        "Cremates(luke, body) ::: Luke cremates his father's body on a funeral pyre.",
        "Reveals(leia, han, brother_of_luke) ::: Leia reveals to Han that Luke is her brother.",
        "Kisses(leia, han) ::: Leia kisses Han.",
        "Sees(luke, jedi_ghosts) ::: Luke sees the ghosts of Obi-Wan, Yoda, and the redeemed Anakin watching over them.",
        "Smiles(luke) ::: Luke smiles.",
        "Conclusion:",
        "Celebrates(rebels) ::: The Rebels celebrate their victory over the Empire.",
        "Sees(luke, {obi_wan, yoda, anakin}) ::: Luke sees the Jedi ghosts of Obi-Wan, Yoda, and the redeemed Anakin."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "440": [
    {
      "id": 440,
      "context_id": "42b6d4260bbc83d7d8343779d34e96a067dfaad4",
      "paragraph_id": 3,
      "paragraph": "As the battle between the Imperial and Alliance fleets continues, Lando leads a group of Rebel ships into the Death Star's core and destroys the main reactor. As Luke escapes on a shuttle with his father's body, the Falcon flies out of the Death Star as the station explodes. On Endor, Leia reveals to Han that Luke is her brother, and they kiss. Luke returns to Endor and cremates his father's body on a funeral pyre. As the Rebels celebrate their victory over the Empire, Luke smiles as he sees the ghosts of Obi-Wan, Yoda, and the redeemed Anakin watching over them.",
      "question_template": "Verbal was freed by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The battle between the Imperial and Alliance fleets continues",
        "Lando leads a group of Rebel ships into the Death Star's core and destroys the main reactor",
        "The Falcon flies out of the Death Star as the station explodes",
        "Luke escapes on a shuttle with his father's body",
        "Leia reveals to Han that Luke is her brother",
        "Luke returns to Endor and cremates his father's body on a funeral pyre",
        "As the Rebels celebrate their victory over the Empire, Luke smiles as he sees the ghosts of Obi-Wan, Yoda, and the redeemed Anakin watching over them"
      ],
      "predicates": [
        "Brother(x, y) ::: x is the brother of y.",
        "Son(x, y) ::: x is the son of y.",
        "Redeemed(x) ::: x is redeemed.",
        "JediGhost(x) ::: x is a Jedi ghost.",
        "Leads(x, y) ::: x leads a group of y.",
        "Destroys(x, y) ::: x destroys y.",
        "Escapes(x, y) ::: x escapes on y.",
        "FliesOut(x, y) ::: x flies out of y.",
        "Reveals(x, y, z) ::: x reveals to y that z is true.",
        "Kisses(x, y) ::: x kisses y.",
        "Returns(x, y) ::: x returns to y.",
        "Cremates(x, y) ::: x cremates y.",
        "Celebrates(x) ::: x celebrates.",
        "Smiles(x) ::: x smiles.",
        "Sees(x, y) ::: x sees y."
      ],
      "premises": [
        "Brother(luke, leia) ::: Luke is the brother of Leia.",
        "Son(luke, anakin) ::: Luke is the son of Anakin.",
        "Redeemed(anakin) ::: Anakin is redeemed.",
        "JediGhost(obi_wan) ::: Obi-Wan is a Jedi ghost.",
        "JediGhost(yoda) ::: Yoda is a Jedi ghost.",
        "Leads(lando, rebel_ships) ::: Lando leads a group of Rebel ships.",
        "Destroys(lando, main_reactor) ::: Lando destroys the main reactor.",
        "Escapes(luke, shuttle) ::: Luke escapes on a shuttle.",
        "FliesOut(falcon, death_star) ::: The Falcon flies out of the Death Star.",
        "Celebrates(rebels) ::: The Rebels celebrate their victory over the Empire.",
        "Returns(luke, endor) ::: Luke returns to Endor.",
        "Cremates(luke, body) ::: Luke cremates his father's body on a funeral pyre.",
        "Reveals(leia, han, brother_of_luke) ::: Leia reveals to Han that Luke is her brother.",
        "Kisses(leia, han) ::: Leia kisses Han.",
        "Sees(luke, jedi_ghosts) ::: Luke sees the ghosts of Obi-Wan, Yoda, and the redeemed Anakin watching over them.",
        "Smiles(luke) ::: Luke smiles.",
        "Conclusion:",
        "Celebrates(rebels) ::: The Rebels celebrate their victory over the Empire.",
        "Sees(luke, {obi_wan, yoda, anakin}) ::: Luke sees the Jedi ghosts of Obi-Wan, Yoda, and the redeemed Anakin."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "443": [
    {
      "id": 443,
      "context_id": "42b6d4260bbc83d7d8343779d34e96a067dfaad4",
      "paragraph_id": 0,
      "paragraph": " Luke Skywalker initiates a plan to rescue Han Solo from the crime lord Jabba the Hutt with the help of Princess Leia, Lando Calrissian, Chewbacca, C-3PO, and R2-D2. Leia infiltrates Jabba's palace on Tatooine, disguised as a bounty hunter with Chewbacca as her prisoner. Lando is already there, disguised as a guard. Leia releases Han from the carbonite, but she is captured and enslaved. Luke arrives soon afterward but, after a tense standoff with Jabba and a battle with his rancor, is captured. Jabba sentences him, Han and Chewbacca to death, planning to feed them to the Sarlacc, a pit monster. They are taken to the Great Pit of Carkoon, the Sarlacc's nesting ground. Luke, with R2-D2's help, frees himself and battles Jabba's guards. During the chaos, Boba Fett attempts to attack Luke, but Han, temporarily blinded from the carbonite, inadvertently knocks him into the Sarlacc pit. Meanwhile, Leia strangles Jabba to death, and Luke destroys Jabba's sail barge as the group escapes. While the others rendezvous with the Rebel Alliance, Luke returns to Dagobah, where he finds that Yoda is on his deathbed. Before he dies, Yoda confirms that Darth Vader, once known as Anakin Skywalker, is Luke's father, and that \"there is another\". The ghost of Obi-Wan Kenobi confirms that this \"other\" is Luke's twin sister: Leia. Obi-Wan tells Luke that he must fight Vader again to defeat the Empire. Obi-Wan also warns Luke to keep his emotions in check, as his anger could lead him to the Dark Side.",
      "question_template": "Jabba plans to put Luke, Hans, and Chewbacca to death by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Death",
        "- Planning to feed them to the Sarlacc, a pit monster"
      ],
      "predicates": [
        "BountyHunter(x) ::: x is a bounty hunter.",
        "DisguisedAs(x, y) ::: x is disguised as y.",
        "Infiltrates(x, y) ::: x infiltrates y.",
        "Fights(x, y) ::: x fights y.",
        "Defeats(x, y) ::: x defeats y.",
        "LeadsTo(x, y) ::: x could lead to y.",
        "DarkSide(x) ::: x is the Dark Side.",
        "FatherOf(x, y) ::: x is the father of y.",
        "TwinSisterOf(x, y) ::: x is the twin sister of y.",
        "Captured(x) ::: x is captured.",
        "Rescued(x) ::: x is rescued.",
        "GroupEscape(x) ::: x is part of a group that escapes."
      ],
      "premises": [
        "DisguisedAs(a_3, bounty hunter) ∧ Infiltrates(a_3, Jabba's palace) ::: Leia is a bounty hunter disguised to infiltrate Jabba's palace.",
        "Fights(a_2, a_5) ::: Luke must fight Vader again to defeat the Empire.",
        "LeadsTo(anger(a_2), DarkSide(a_2)) ::: Luke's anger could lead him to the Dark Side.",
        "FatherOf(a_5, a_2) ::: Anakin is the father of Luke.",
        "TwinSisterOf(a_3, a_2) ::: Leia is Luke's twin sister.",
        "Captured(a_4) ∧ Rescued(a_4) ::: Han is captured and later rescued.",
        "GroupEscape(b_0) ::: The group escapes.",
        "Conclusion:",
        "BountyHunter(a_3) ∧ DisguisedAs(a_3, bounty hunter) ∧ Infiltrates(a_3, Jabba's palace) ::: Leia is a bounty hunter disguised to infiltrate Jabba's palace.",
        "Fights(a_2, a_5) ::: Luke must fight Vader again to defeat the Empire.",
        "LeadsTo(anger(a_2), DarkSide(a_2)) ::: Luke's anger could lead him to the Dark Side."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "446": [
    {
      "id": 446,
      "context_id": "42b6d4260bbc83d7d8343779d34e96a067dfaad4",
      "paragraph_id": 2,
      "paragraph": "Vader takes Luke to the new Death Star to meet the Emperor, who is intent on turning him to the dark side. The Emperor reveals that the Death Star is fully operational and the Rebel fleet will fall into a trap. On Endor, Han's strike team is captured by Imperial forces, but a surprise counterattack by the Ewoks allows the Rebels to battle the Imperials. Meanwhile, Lando, piloting the Millennium Falcon, leads the Rebel fleet to the Death Star, only to find that the station's shield is still active and the Imperial fleet is waiting for them. The Emperor tempts Luke to give in to his anger and join him. Luke engages Vader in a lightsaber duel. Vader senses that Luke has a sister and suggests turning her to the dark side. Enraged, Luke overpowers Vader and severs his father's prosthetic right hand. Upon seeing the remnants of Vader's prosthetic, he sees a parallel between himself and Vader, and fears he will become like Vader. The Emperor tells Luke to kill Vader and take his place, but Luke refuses, declaring himself a Jedi as his father had been. On Endor, the strike team defeats the Imperial forces and destroys the shield generator, allowing the Rebel fleet to launch their assault on the Death Star. Simultaneously, the Emperor tortures Luke with Force lightning. Unwilling to let his son die, Vader throws the Emperor down the Death Star reactor shaft, killing him, but is mortally wounded in the process. He asks Luke to remove his mask, and after a brief talk, he dies peacefully.",
      "question_template": "Yoda confirms to Luke Skywalker that [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- The Emperor tempts Luke to give in to his anger and join him.",
        "- Luke fears he will become like Vader."
      ],
      "predicates": [
        "Jedi(x) ::: x is a Jedi.",
        "DarkSide(x) ::: x is on the dark side.",
        "Refuses(x, y) ::: x refuses to give in to y.",
        "Sacrifices(x, y) ::: x sacrifices himself to save y.",
        "Tortures(x, y) ::: x tortures y.",
        "Engages(x, y) ::: x engages in a duel with y.",
        "Overpowers(x, y) ::: x overpowers y.",
        "Severs(x, y) ::: x severs y.",
        "Dies(x) ::: x dies.",
        "Authorizes(x, y) ::: x authorizes y to take his place.",
        "HasSister(x) ::: x has a sister.",
        "RebelFleet(x) ::: x is part of the Rebel fleet.",
        "ImperialForces(x) ::: x is part of the Imperial forces.",
        "Counterattack(x, y) ::: x counterattacks y.",
        "Destroys(x, y) ::: x destroys y.",
        "LaunchesAssault(x, y) ::: x launches an assault on y."
      ],
      "premises": [
        "Refuses(luke, darkSide) ::: Luke refuses to give in to the dark side and declares himself a Jedi.",
        "Sacrifices(vader, luke) ::: Vader sacrifices himself to save Luke from the Emperor.",
        "Tortures(emperor, luke) ::: The Emperor tortures Luke with Force lightning.",
        "Engages(luke, vader) ::: Luke engages Vader in a lightsaber duel.",
        "Overpowers(luke, vader) ::: Luke overpowers Vader.",
        "Severs(luke, prostheticHand) ::: Luke severs Vader's prosthetic right hand.",
        "HasSister(luke) ::: Luke has a sister.",
        "Authorizes(emperor, luke) ::: The Emperor tells Luke to kill Vader and take his place.",
        "Counterattack(ewoks, imperialForces) ::: A surprise counterattack by the Ewoks allows the Rebels to battle the Imperials.",
        "Destroys(strikeTeam, shieldGenerator) ::: The strike team defeats the Imperial forces and destroys the shield generator.",
        "LaunchesAssault(rebelFleet, deathStar) ::: The Rebel fleet launches their assault on the Death Star.",
        "Dies(vader) ::: Vader dies peacefully after asking Luke to remove his mask.",
        "Conclusion:",
        "Jedi(luke) ::: Luke is a Jedi.",
        "RebelFleet(rebelFleet) ::: The Rebel fleet is part of the battle against the Death Star.",
        "ImperialForces(imperialForces) ::: The Imperial forces are defeated by the Rebels."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "447": [
    {
      "id": 447,
      "context_id": "42b6d4260bbc83d7d8343779d34e96a067dfaad4",
      "paragraph_id": 1,
      "paragraph": "The Rebels learn that the Empire has been constructing a second Death Star under the direct supervision of the Emperor himself. As the station is protected by an energy shield, Han leads a strike team to destroy the shield generator on the forest moon of Endor; doing so would allow a squadron of starfighters to destroy the Death Star. The strike team, accompanied by Luke and Leia, travels to Endor in a stolen Imperial shuttle. On Endor, Luke and his companions encounter a tribe of Ewoks and, after an initial conflict, gain their trust. Later, Luke tells Leia that she is his sister, Vader is their father, and he must go and confront him. Luke surrenders to Imperial troops and is taken to Vader. Luke tries to convince Vader to turn from the dark side of the Force, but fails.",
      "question_template": "Darth Vader's real name is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "He tells Leia that she is his sister",
        "Vader is their father"
      ],
      "predicates": [
        "Constructing(c_1) ::: The Death Star is being constructed.",
        "Supervised(c_1, a_5) ::: The Emperor supervises the construction of the Death Star.",
        "Protected(c_1) ::: The Death Star is protected by an energy shield.",
        "Leads(a_4, b_0) ::: Han leads a strike team.",
        "Destroys(b_0, c_1) ::: The strike team destroys the Death Star.",
        "Travels(a_4, c_2, f) ::: Han travels to Endor in a stolen Imperial shuttle.",
        "Encounters(a_2, b_1) ::: Luke encounters a tribe of Ewoks.",
        "GainsTrust(a_2, b_1) ::: Luke gains the trust of the Ewoks.",
        "Tells(a_2, a_3) ::: Luke tells Leia something.",
        "Surrenders(a_2, a_5) ::: Luke surrenders to Vader.",
        "Confronts(a_2, a_5) ::: Luke confronts Vader.",
        "Fails(a_2, a_5) ::: Luke fails to convince Vader."
      ],
      "premises": [
        "Constructing(c_1) ∧ Supervised(c_1, a_5) ::: The Empire has been constructing a second Death Star under the direct supervision of the Emperor.",
        "Protected(c_1) ::: The station is protected by an energy shield.",
        "Leads(a_4, b_0) ∧ Destroys(b_0, c_1) ::: Han leads a strike team to destroy the shield generator on the forest moon of Endor; doing so would allow a squadron of starfighters to destroy the Death Star.",
        "Travels(a_4, c_2, f) ::: The strike team, accompanied by Luke and Leia, travels to Endor in a stolen Imperial shuttle.",
        "Encounters(a_2, b_1) ∧ GainsTrust(a_2, b_1) ::: Luke and his companions encounter a tribe of Ewoks and gain their trust.",
        "Tells(a_2, a_3) ::: Luke tells Leia that she is his sister, Vader is their father, and he must go and confront him.",
        "Surrenders(a_2, a_5) ::: Luke surrenders to Imperial troops and is taken to Vader.",
        "Fails(a_2, a_5) ::: Luke tries to convince Vader to turn from the dark side of the Force, but fails."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "461": [
    {
      "id": 461,
      "context_id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 2,
      "paragraph": "Conan, however, leaves the city and reveals to the reader that he had recognised them almost immediately. He takes his revenge on the tavern owner Aram Baksh by cutting out his tongue and shearing off his beard to render him mute and unrecognizable, and turning him over to the hungry cannibals to devour - one of the most profound displays of Conan's ironic sense of humor - and leaves the city with gold and the magic ring that started the night's intrigues (and which Conan had stolen from the mad Jungir on their first encounter), with the intent to sell it to another interested party.",
      "question_template": "Luke Skywalker wants to rescue [[CANDIDATE_ANSWER]] from Jabba, the crime Lord.",
      "candidate_answers": [
        "Aram Baksh",
        "The tavern owner"
      ],
      "predicates": [
        "Recognizes(x, y) ::: x recognizes y.",
        "TakesRevengeOn(x, y) ::: x takes revenge on y.",
        "CutsOutTongue(x, y) ::: x cuts out the tongue of y.",
        "ShearsOffBeard(x, y) ::: x shears off the beard of y.",
        "TurnsOverToCannibals(x, y) ::: x turns y over to the hungry cannibals.",
        "LeavesCity(x) ::: x leaves the city.",
        "HasGold(x) ::: x has gold.",
        "HasMagicRing(x) ::: x has the magic ring.",
        "DisplaysIrony(x) ::: x displays an ironic sense of humor.",
        "IntentToSell(x, y) ::: x intends to sell y to another interested party."
      ],
      "premises": [
        "Recognizes(conan, aramBaksh) ::: Conan recognized Aram Baksh almost immediately.",
        "TakesRevengeOn(conan, aramBaksh) ::: Conan takes revenge on the tavern owner Aram Baksh.",
        "CutsOutTongue(conan, aramBaksh) ::: Conan cuts out Aram Baksh's tongue.",
        "ShearsOffBeard(conan, aramBaksh) ::: Conan shears off Aram Baksh's beard.",
        "TurnsOverToCannibals(conan, aramBaksh) ::: Conan turns Aram Baksh over to the hungry cannibals.",
        "LeavesCity(conan) ::: Conan leaves the city.",
        "HasGold(conan) ::: Conan has gold.",
        "HasMagicRing(conan) ::: Conan has the magic ring that started the night's intrigues.",
        "DisplaysIrony(conan) ::: Conan's actions display an ironic sense of humor.",
        "IntentToSell(conan, magicRing) ::: Conan intends to sell the magic ring to another interested party."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "465": [
    {
      "id": 465,
      "context_id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 0,
      "paragraph": " Despite a warning received in the Suq by an elderly desert nomad, Conan stays the night in a cheap tavern in Zamboula, run by Aram Baksh. As night falls, a black Darfarian cannibal enters Conan's small chamber by means of a trick lock to drag him away to be eaten. All of the Darfarian slaves in the city are cannibals who roam the streets at night. As they only prey on travelers, the people of the city tolerate this and stay locked securely in their homes, while nomads and beggars make sure to spend the night at a comfortable distance from its walls. Even worse, Aram Baksh has made a deal with the cannibals - he provides them \"fresh meat,\" while he profits from the belongings of the ill-fated guests of his inn. This night, however, the unfortunate Darfarian attempts to prey on an armed and wary Conan, and pays with his life. Realizing the trap his room is, Conan takes to the Zamboulan streets where he soon runs into a naked woman chasing through the streets after her deranged lover; Conan rescues them from an attack by the cannibals. She tells him that she tried to secure her lover's unending affection via a love potion which instead made a raving lunatic of him. Suggestively promising Conan \"a reward\" in return for his assistance, they attempt to kill the high priest responsible for the man's madness.",
      "question_template": "[[CANDIDATE_ANSWER]] is a type of creature.",
      "candidate_answers": [
        "A naked woman chasing through the streets after her deranged lover",
        "Her lover"
      ],
      "predicates": [
        "Rescues(x, y) ::: x rescues y.",
        "Cannibal(x) ::: x is a cannibal.",
        "InCity(x, c) ::: x is in the city c.",
        "PreysOn(x, y) ::: x preys on y.",
        "LockedInHome(x) ::: x is locked securely in their home.",
        "MakesDeal(x, y) ::: x makes a deal with y.",
        "ProvidesFreshMeat(x, y) ::: x provides fresh meat to y.",
        "ProfitsFrom(x, y) ::: x profits from y.",
        "AttemptsToKill(x, y) ::: x attempts to kill y.",
        "Loves(x, y) ::: x loves y.",
        "MagicPotion(x) ::: x is a magic potion.",
        "NakedWoman(x) ::: x is a naked woman.",
        "DerangedLover(x) ::: x is a deranged lover."
      ],
      "premises": [
        "Rescues(a_1, a_3) ::: Conan rescues the naked woman and her deranged lover from cannibals.",
        "∀x (Cannibal(x) → PreysOn(x, a_0)) ::: All cannibals prey on travelers.",
        "∀x (InCity(x, c_1) → LockedInHome(x)) ::: The people of the city stay locked securely in their homes.",
        "∀x ∀y (MakesDeal(a_2, d) → ProvidesFreshMeat(a_2, d) ∧ ProfitsFrom(a_2, a_0)) ::: Aram Baksh makes a deal with the cannibals, providing them fresh meat while profiting from the belongings of his guests.",
        "∀x (NakedWoman(x) ∧ DerangedLover(y) ∧ Loves(y, x) ∧ MagicPotion(z) ∧ AttemptsToKill(a_1, a_2)) ::: The naked woman tried to secure her lover's affection via a love potion and they attempt to kill the high priest responsible for his madness."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 465,
      "context_id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 1,
      "paragraph": "The woman is captured in the attempt, and forced - via hypnotism - to dance before the High priest until she dies. Conan, defeating - quite literally - the strangler Baal-pteor at his own game, rescues her and kills the priest. At the point of claiming his payment, however, she reveals that she is really Nafertari, mistress to the satrap of the city, Jungir Khan (the mad man). Taking an antidote to Jungir, she promises Conan position and wealth.",
      "question_template": "[[CANDIDATE_ANSWER]] is a type of creature.",
      "candidate_answers": [
        "The woman is captured in the attempt",
        "Nafertari, mistress to the satrap of the city, Jungir Khan"
      ],
      "predicates": [
        "Captured(x) ::: x is captured in the attempt.",
        "Hypnotized(x) ::: x is forced via hypnotism.",
        "DancesBefore(x, y) ::: x dances before y.",
        "Dies(x) ::: x dies.",
        "Defeats(x, y) ::: x defeats y.",
        "Rescues(x, y) ::: x rescues y.",
        "Kills(x, y) ::: x kills y.",
        "Reveals(x, y) ::: x reveals y.",
        "Promises(x, y) ::: x promises y.",
        "TakesAntidote(x, y) ::: x takes an antidote to y.",
        "MistressTo(x, y) ::: x is the mistress to y."
      ],
      "premises": [
        "Captured(woman) ∧ Hypnotized(woman) ∧ DancesBefore(woman, highPriest) ∧ Dies(woman) ::: The woman is captured in the attempt, and forced via hypnotism to dance before the High priest until she dies.",
        "Defeats(conan, stranglerBaalPteor) ∧ Rescues(conan, woman) ∧ Kills(conan, highPriest) ::: Conan defeats the strangler Baal-pteor at his own game, rescues her, and kills the priest.",
        "Reveals(woman, nafertari) ∧ MistressTo(nafertari, jungir) ::: At the point of claiming his payment, she reveals that she is really Nafertari, mistress to the satrap of the city, Jungir Khan.",
        "TakesAntidote(nafertari, jungir) ∧ Promises(nafertari, positionAndWealth) ::: Taking an antidote to Jungir, she promises Conan position and wealth."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "466": [
    {
      "id": 466,
      "context_id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 0,
      "paragraph": " Despite a warning received in the Suq by an elderly desert nomad, Conan stays the night in a cheap tavern in Zamboula, run by Aram Baksh. As night falls, a black Darfarian cannibal enters Conan's small chamber by means of a trick lock to drag him away to be eaten. All of the Darfarian slaves in the city are cannibals who roam the streets at night. As they only prey on travelers, the people of the city tolerate this and stay locked securely in their homes, while nomads and beggars make sure to spend the night at a comfortable distance from its walls. Even worse, Aram Baksh has made a deal with the cannibals - he provides them \"fresh meat,\" while he profits from the belongings of the ill-fated guests of his inn. This night, however, the unfortunate Darfarian attempts to prey on an armed and wary Conan, and pays with his life. Realizing the trap his room is, Conan takes to the Zamboulan streets where he soon runs into a naked woman chasing through the streets after her deranged lover; Conan rescues them from an attack by the cannibals. She tells him that she tried to secure her lover's unending affection via a love potion which instead made a raving lunatic of him. Suggestively promising Conan \"a reward\" in return for his assistance, they attempt to kill the high priest responsible for the man's madness.",
      "question_template": "Jabba plans on feeding [[CANDIDATE_ANSWER]] to Sarlacc.",
      "candidate_answers": [
        "- A raving lunatic",
        "- Her deranged lover"
      ],
      "predicates": [
        "Rescues(x, y) ::: x rescues y.",
        "Cannibal(x) ::: x is a cannibal.",
        "InCity(x, c) ::: x is in the city c.",
        "PreysOn(x, y) ::: x preys on y.",
        "LockedInHome(x) ::: x is locked securely in their home.",
        "MakesDeal(x, y) ::: x makes a deal with y.",
        "ProvidesFreshMeat(x, y) ::: x provides fresh meat to y.",
        "ProfitsFrom(x, y) ::: x profits from y.",
        "AttemptsToKill(x, y) ::: x attempts to kill y.",
        "Loves(x, y) ::: x loves y.",
        "MagicPotion(x) ::: x is a magic potion.",
        "NakedWoman(x) ::: x is a naked woman.",
        "DerangedLover(x) ::: x is a deranged lover."
      ],
      "premises": [
        "Rescues(a_1, a_3) ::: Conan rescues the naked woman and her deranged lover from cannibals.",
        "∀x (Cannibal(x) → PreysOn(x, a_0)) ::: All cannibals prey on travelers.",
        "∀x (InCity(x, c_1) → LockedInHome(x)) ::: The people of the city stay locked securely in their homes.",
        "∀x ∀y (MakesDeal(a_2, d) → ProvidesFreshMeat(a_2, d) ∧ ProfitsFrom(a_2, a_0)) ::: Aram Baksh makes a deal with the cannibals, providing them fresh meat while profiting from the belongings of his guests.",
        "∀x (NakedWoman(x) ∧ DerangedLover(y) ∧ Loves(y, x) ∧ MagicPotion(z) ∧ AttemptsToKill(a_1, a_2)) ::: The naked woman tried to secure her lover's affection via a love potion and they attempt to kill the high priest responsible for his madness."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "468": [
    {
      "id": 468,
      "context_id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 1,
      "paragraph": "The woman is captured in the attempt, and forced - via hypnotism - to dance before the High priest until she dies. Conan, defeating - quite literally - the strangler Baal-pteor at his own game, rescues her and kills the priest. At the point of claiming his payment, however, she reveals that she is really Nafertari, mistress to the satrap of the city, Jungir Khan (the mad man). Taking an antidote to Jungir, she promises Conan position and wealth.",
      "question_template": "Jabba dies [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Position and wealth"
      ],
      "predicates": [
        "Captured(x) ::: x is captured in the attempt.",
        "Hypnotized(x) ::: x is forced via hypnotism.",
        "DancesBefore(x, y) ::: x dances before y.",
        "Dies(x) ::: x dies.",
        "Defeats(x, y) ::: x defeats y.",
        "Rescues(x, y) ::: x rescues y.",
        "Kills(x, y) ::: x kills y.",
        "Reveals(x, y) ::: x reveals y.",
        "Promises(x, y) ::: x promises y.",
        "TakesAntidote(x, y) ::: x takes an antidote to y.",
        "MistressTo(x, y) ::: x is the mistress to y."
      ],
      "premises": [
        "Captured(woman) ∧ Hypnotized(woman) ∧ DancesBefore(woman, highPriest) ∧ Dies(woman) ::: The woman is captured in the attempt, and forced via hypnotism to dance before the High priest until she dies.",
        "Defeats(conan, stranglerBaalPteor) ∧ Rescues(conan, woman) ∧ Kills(conan, highPriest) ::: Conan defeats the strangler Baal-pteor at his own game, rescues her, and kills the priest.",
        "Reveals(woman, nafertari) ∧ MistressTo(nafertari, jungir) ::: At the point of claiming his payment, she reveals that she is really Nafertari, mistress to the satrap of the city, Jungir Khan.",
        "TakesAntidote(nafertari, jungir) ∧ Promises(nafertari, positionAndWealth) ::: Taking an antidote to Jungir, she promises Conan position and wealth."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "469": [
    {
      "id": 469,
      "context_id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 2,
      "paragraph": "Conan, however, leaves the city and reveals to the reader that he had recognised them almost immediately. He takes his revenge on the tavern owner Aram Baksh by cutting out his tongue and shearing off his beard to render him mute and unrecognizable, and turning him over to the hungry cannibals to devour - one of the most profound displays of Conan's ironic sense of humor - and leaves the city with gold and the magic ring that started the night's intrigues (and which Conan had stolen from the mad Jungir on their first encounter), with the intent to sell it to another interested party.",
      "question_template": "Yoda reveals to Luke that [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Cutting out his tongue and shearing off his beard to render him mute and unrecognizable",
        "- One of the most profound displays of Conan's ironic sense of humor"
      ],
      "predicates": [
        "Recognizes(x, y) ::: x recognizes y.",
        "TakesRevengeOn(x, y) ::: x takes revenge on y.",
        "CutsOutTongue(x, y) ::: x cuts out the tongue of y.",
        "ShearsOffBeard(x, y) ::: x shears off the beard of y.",
        "TurnsOverToCannibals(x, y) ::: x turns y over to the hungry cannibals.",
        "LeavesCity(x) ::: x leaves the city.",
        "HasGold(x) ::: x has gold.",
        "HasMagicRing(x) ::: x has the magic ring.",
        "DisplaysIrony(x) ::: x displays an ironic sense of humor.",
        "IntentToSell(x, y) ::: x intends to sell y to another interested party."
      ],
      "premises": [
        "Recognizes(conan, aramBaksh) ::: Conan recognized Aram Baksh almost immediately.",
        "TakesRevengeOn(conan, aramBaksh) ::: Conan takes revenge on the tavern owner Aram Baksh.",
        "CutsOutTongue(conan, aramBaksh) ::: Conan cuts out Aram Baksh's tongue.",
        "ShearsOffBeard(conan, aramBaksh) ::: Conan shears off Aram Baksh's beard.",
        "TurnsOverToCannibals(conan, aramBaksh) ::: Conan turns Aram Baksh over to the hungry cannibals.",
        "LeavesCity(conan) ::: Conan leaves the city.",
        "HasGold(conan) ::: Conan has gold.",
        "HasMagicRing(conan) ::: Conan has the magic ring that started the night's intrigues.",
        "DisplaysIrony(conan) ::: Conan's actions display an ironic sense of humor.",
        "IntentToSell(conan, magicRing) ::: Conan intends to sell the magic ring to another interested party."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "470": [
    {
      "id": 470,
      "context_id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 0,
      "paragraph": " Despite a warning received in the Suq by an elderly desert nomad, Conan stays the night in a cheap tavern in Zamboula, run by Aram Baksh. As night falls, a black Darfarian cannibal enters Conan's small chamber by means of a trick lock to drag him away to be eaten. All of the Darfarian slaves in the city are cannibals who roam the streets at night. As they only prey on travelers, the people of the city tolerate this and stay locked securely in their homes, while nomads and beggars make sure to spend the night at a comfortable distance from its walls. Even worse, Aram Baksh has made a deal with the cannibals - he provides them \"fresh meat,\" while he profits from the belongings of the ill-fated guests of his inn. This night, however, the unfortunate Darfarian attempts to prey on an armed and wary Conan, and pays with his life. Realizing the trap his room is, Conan takes to the Zamboulan streets where he soon runs into a naked woman chasing through the streets after her deranged lover; Conan rescues them from an attack by the cannibals. She tells him that she tried to secure her lover's unending affection via a love potion which instead made a raving lunatic of him. Suggestively promising Conan \"a reward\" in return for his assistance, they attempt to kill the high priest responsible for the man's madness.",
      "question_template": "Leia's relationship to Luke is that [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "A naked woman",
        "A reward in return for his assistance"
      ],
      "predicates": [
        "Rescues(x, y) ::: x rescues y.",
        "Cannibal(x) ::: x is a cannibal.",
        "InCity(x, c) ::: x is in the city c.",
        "PreysOn(x, y) ::: x preys on y.",
        "LockedInHome(x) ::: x is locked securely in their home.",
        "MakesDeal(x, y) ::: x makes a deal with y.",
        "ProvidesFreshMeat(x, y) ::: x provides fresh meat to y.",
        "ProfitsFrom(x, y) ::: x profits from y.",
        "AttemptsToKill(x, y) ::: x attempts to kill y.",
        "Loves(x, y) ::: x loves y.",
        "MagicPotion(x) ::: x is a magic potion.",
        "NakedWoman(x) ::: x is a naked woman.",
        "DerangedLover(x) ::: x is a deranged lover."
      ],
      "premises": [
        "Rescues(a_1, a_3) ::: Conan rescues the naked woman and her deranged lover from cannibals.",
        "∀x (Cannibal(x) → PreysOn(x, a_0)) ::: All cannibals prey on travelers.",
        "∀x (InCity(x, c_1) → LockedInHome(x)) ::: The people of the city stay locked securely in their homes.",
        "∀x ∀y (MakesDeal(a_2, d) → ProvidesFreshMeat(a_2, d) ∧ ProfitsFrom(a_2, a_0)) ::: Aram Baksh makes a deal with the cannibals, providing them fresh meat while profiting from the belongings of his guests.",
        "∀x (NakedWoman(x) ∧ DerangedLover(y) ∧ Loves(y, x) ∧ MagicPotion(z) ∧ AttemptsToKill(a_1, a_2)) ::: The naked woman tried to secure her lover's affection via a love potion and they attempt to kill the high priest responsible for his madness."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 470,
      "context_id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 1,
      "paragraph": "The woman is captured in the attempt, and forced - via hypnotism - to dance before the High priest until she dies. Conan, defeating - quite literally - the strangler Baal-pteor at his own game, rescues her and kills the priest. At the point of claiming his payment, however, she reveals that she is really Nafertari, mistress to the satrap of the city, Jungir Khan (the mad man). Taking an antidote to Jungir, she promises Conan position and wealth.",
      "question_template": "Leia's relationship to Luke is that [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Position and wealth"
      ],
      "predicates": [
        "Captured(x) ::: x is captured in the attempt.",
        "Hypnotized(x) ::: x is forced via hypnotism.",
        "DancesBefore(x, y) ::: x dances before y.",
        "Dies(x) ::: x dies.",
        "Defeats(x, y) ::: x defeats y.",
        "Rescues(x, y) ::: x rescues y.",
        "Kills(x, y) ::: x kills y.",
        "Reveals(x, y) ::: x reveals y.",
        "Promises(x, y) ::: x promises y.",
        "TakesAntidote(x, y) ::: x takes an antidote to y.",
        "MistressTo(x, y) ::: x is the mistress to y."
      ],
      "premises": [
        "Captured(woman) ∧ Hypnotized(woman) ∧ DancesBefore(woman, highPriest) ∧ Dies(woman) ::: The woman is captured in the attempt, and forced via hypnotism to dance before the High priest until she dies.",
        "Defeats(conan, stranglerBaalPteor) ∧ Rescues(conan, woman) ∧ Kills(conan, highPriest) ::: Conan defeats the strangler Baal-pteor at his own game, rescues her, and kills the priest.",
        "Reveals(woman, nafertari) ∧ MistressTo(nafertari, jungir) ::: At the point of claiming his payment, she reveals that she is really Nafertari, mistress to the satrap of the city, Jungir Khan.",
        "TakesAntidote(nafertari, jungir) ∧ Promises(nafertari, positionAndWealth) ::: Taking an antidote to Jungir, she promises Conan position and wealth."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "473": [
    {
      "id": 473,
      "context_id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 2,
      "paragraph": "Conan, however, leaves the city and reveals to the reader that he had recognised them almost immediately. He takes his revenge on the tavern owner Aram Baksh by cutting out his tongue and shearing off his beard to render him mute and unrecognizable, and turning him over to the hungry cannibals to devour - one of the most profound displays of Conan's ironic sense of humor - and leaves the city with gold and the magic ring that started the night's intrigues (and which Conan had stolen from the mad Jungir on their first encounter), with the intent to sell it to another interested party.",
      "question_template": "[[CANDIDATE_ANSWER]] are most commonly known for being.",
      "candidate_answers": [
        "the tavern owner Aram Baksh"
      ],
      "predicates": [
        "Recognizes(x, y) ::: x recognizes y.",
        "TakesRevengeOn(x, y) ::: x takes revenge on y.",
        "CutsOutTongue(x, y) ::: x cuts out the tongue of y.",
        "ShearsOffBeard(x, y) ::: x shears off the beard of y.",
        "TurnsOverToCannibals(x, y) ::: x turns y over to the hungry cannibals.",
        "LeavesCity(x) ::: x leaves the city.",
        "HasGold(x) ::: x has gold.",
        "HasMagicRing(x) ::: x has the magic ring.",
        "DisplaysIrony(x) ::: x displays an ironic sense of humor.",
        "IntentToSell(x, y) ::: x intends to sell y to another interested party."
      ],
      "premises": [
        "Recognizes(conan, aramBaksh) ::: Conan recognized Aram Baksh almost immediately.",
        "TakesRevengeOn(conan, aramBaksh) ::: Conan takes revenge on the tavern owner Aram Baksh.",
        "CutsOutTongue(conan, aramBaksh) ::: Conan cuts out Aram Baksh's tongue.",
        "ShearsOffBeard(conan, aramBaksh) ::: Conan shears off Aram Baksh's beard.",
        "TurnsOverToCannibals(conan, aramBaksh) ::: Conan turns Aram Baksh over to the hungry cannibals.",
        "LeavesCity(conan) ::: Conan leaves the city.",
        "HasGold(conan) ::: Conan has gold.",
        "HasMagicRing(conan) ::: Conan has the magic ring that started the night's intrigues.",
        "DisplaysIrony(conan) ::: Conan's actions display an ironic sense of humor.",
        "IntentToSell(conan, magicRing) ::: Conan intends to sell the magic ring to another interested party."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "474": [
    {
      "id": 474,
      "context_id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 1,
      "paragraph": "The woman is captured in the attempt, and forced - via hypnotism - to dance before the High priest until she dies. Conan, defeating - quite literally - the strangler Baal-pteor at his own game, rescues her and kills the priest. At the point of claiming his payment, however, she reveals that she is really Nafertari, mistress to the satrap of the city, Jungir Khan (the mad man). Taking an antidote to Jungir, she promises Conan position and wealth.",
      "question_template": "Aram Baksh made a deal with the cannibals involving [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Nafertari",
        "Mistress to the satrap of the city, Jungir Khan"
      ],
      "predicates": [
        "Captured(x) ::: x is captured in the attempt.",
        "Hypnotized(x) ::: x is forced via hypnotism.",
        "DancesBefore(x, y) ::: x dances before y.",
        "Dies(x) ::: x dies.",
        "Defeats(x, y) ::: x defeats y.",
        "Rescues(x, y) ::: x rescues y.",
        "Kills(x, y) ::: x kills y.",
        "Reveals(x, y) ::: x reveals y.",
        "Promises(x, y) ::: x promises y.",
        "TakesAntidote(x, y) ::: x takes an antidote to y.",
        "MistressTo(x, y) ::: x is the mistress to y."
      ],
      "premises": [
        "Captured(woman) ∧ Hypnotized(woman) ∧ DancesBefore(woman, highPriest) ∧ Dies(woman) ::: The woman is captured in the attempt, and forced via hypnotism to dance before the High priest until she dies.",
        "Defeats(conan, stranglerBaalPteor) ∧ Rescues(conan, woman) ∧ Kills(conan, highPriest) ::: Conan defeats the strangler Baal-pteor at his own game, rescues her, and kills the priest.",
        "Reveals(woman, nafertari) ∧ MistressTo(nafertari, jungir) ::: At the point of claiming his payment, she reveals that she is really Nafertari, mistress to the satrap of the city, Jungir Khan.",
        "TakesAntidote(nafertari, jungir) ∧ Promises(nafertari, positionAndWealth) ::: Taking an antidote to Jungir, she promises Conan position and wealth."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 474,
      "context_id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 2,
      "paragraph": "Conan, however, leaves the city and reveals to the reader that he had recognised them almost immediately. He takes his revenge on the tavern owner Aram Baksh by cutting out his tongue and shearing off his beard to render him mute and unrecognizable, and turning him over to the hungry cannibals to devour - one of the most profound displays of Conan's ironic sense of humor - and leaves the city with gold and the magic ring that started the night's intrigues (and which Conan had stolen from the mad Jungir on their first encounter), with the intent to sell it to another interested party.",
      "question_template": "Aram Baksh made a deal with the cannibals involving [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Conan",
        "The tavern owner Aram Baksh"
      ],
      "predicates": [
        "Recognizes(x, y) ::: x recognizes y.",
        "TakesRevengeOn(x, y) ::: x takes revenge on y.",
        "CutsOutTongue(x, y) ::: x cuts out the tongue of y.",
        "ShearsOffBeard(x, y) ::: x shears off the beard of y.",
        "TurnsOverToCannibals(x, y) ::: x turns y over to the hungry cannibals.",
        "LeavesCity(x) ::: x leaves the city.",
        "HasGold(x) ::: x has gold.",
        "HasMagicRing(x) ::: x has the magic ring.",
        "DisplaysIrony(x) ::: x displays an ironic sense of humor.",
        "IntentToSell(x, y) ::: x intends to sell y to another interested party."
      ],
      "premises": [
        "Recognizes(conan, aramBaksh) ::: Conan recognized Aram Baksh almost immediately.",
        "TakesRevengeOn(conan, aramBaksh) ::: Conan takes revenge on the tavern owner Aram Baksh.",
        "CutsOutTongue(conan, aramBaksh) ::: Conan cuts out Aram Baksh's tongue.",
        "ShearsOffBeard(conan, aramBaksh) ::: Conan shears off Aram Baksh's beard.",
        "TurnsOverToCannibals(conan, aramBaksh) ::: Conan turns Aram Baksh over to the hungry cannibals.",
        "LeavesCity(conan) ::: Conan leaves the city.",
        "HasGold(conan) ::: Conan has gold.",
        "HasMagicRing(conan) ::: Conan has the magic ring that started the night's intrigues.",
        "DisplaysIrony(conan) ::: Conan's actions display an ironic sense of humor.",
        "IntentToSell(conan, magicRing) ::: Conan intends to sell the magic ring to another interested party."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "475": [
    {
      "id": 475,
      "context_id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 0,
      "paragraph": " Despite a warning received in the Suq by an elderly desert nomad, Conan stays the night in a cheap tavern in Zamboula, run by Aram Baksh. As night falls, a black Darfarian cannibal enters Conan's small chamber by means of a trick lock to drag him away to be eaten. All of the Darfarian slaves in the city are cannibals who roam the streets at night. As they only prey on travelers, the people of the city tolerate this and stay locked securely in their homes, while nomads and beggars make sure to spend the night at a comfortable distance from its walls. Even worse, Aram Baksh has made a deal with the cannibals - he provides them \"fresh meat,\" while he profits from the belongings of the ill-fated guests of his inn. This night, however, the unfortunate Darfarian attempts to prey on an armed and wary Conan, and pays with his life. Realizing the trap his room is, Conan takes to the Zamboulan streets where he soon runs into a naked woman chasing through the streets after her deranged lover; Conan rescues them from an attack by the cannibals. She tells him that she tried to secure her lover's unending affection via a love potion which instead made a raving lunatic of him. Suggestively promising Conan \"a reward\" in return for his assistance, they attempt to kill the high priest responsible for the man's madness.",
      "question_template": "The naked woman is chasing after [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "A naked woman chasing through the streets after her deranged lover",
        "She tells him that she tried to secure her lover's unending affection via a love potion which instead made a raving lunatic of him"
      ],
      "predicates": [
        "Rescues(x, y) ::: x rescues y.",
        "Cannibal(x) ::: x is a cannibal.",
        "InCity(x, c) ::: x is in the city c.",
        "PreysOn(x, y) ::: x preys on y.",
        "LockedInHome(x) ::: x is locked securely in their home.",
        "MakesDeal(x, y) ::: x makes a deal with y.",
        "ProvidesFreshMeat(x, y) ::: x provides fresh meat to y.",
        "ProfitsFrom(x, y) ::: x profits from y.",
        "AttemptsToKill(x, y) ::: x attempts to kill y.",
        "Loves(x, y) ::: x loves y.",
        "MagicPotion(x) ::: x is a magic potion.",
        "NakedWoman(x) ::: x is a naked woman.",
        "DerangedLover(x) ::: x is a deranged lover."
      ],
      "premises": [
        "Rescues(a_1, a_3) ::: Conan rescues the naked woman and her deranged lover from cannibals.",
        "∀x (Cannibal(x) → PreysOn(x, a_0)) ::: All cannibals prey on travelers.",
        "∀x (InCity(x, c_1) → LockedInHome(x)) ::: The people of the city stay locked securely in their homes.",
        "∀x ∀y (MakesDeal(a_2, d) → ProvidesFreshMeat(a_2, d) ∧ ProfitsFrom(a_2, a_0)) ::: Aram Baksh makes a deal with the cannibals, providing them fresh meat while profiting from the belongings of his guests.",
        "∀x (NakedWoman(x) ∧ DerangedLover(y) ∧ Loves(y, x) ∧ MagicPotion(z) ∧ AttemptsToKill(a_1, a_2)) ::: The naked woman tried to secure her lover's affection via a love potion and they attempt to kill the high priest responsible for his madness."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 475,
      "context_id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 1,
      "paragraph": "The woman is captured in the attempt, and forced - via hypnotism - to dance before the High priest until she dies. Conan, defeating - quite literally - the strangler Baal-pteor at his own game, rescues her and kills the priest. At the point of claiming his payment, however, she reveals that she is really Nafertari, mistress to the satrap of the city, Jungir Khan (the mad man). Taking an antidote to Jungir, she promises Conan position and wealth.",
      "question_template": "The naked woman is chasing after [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The woman",
        "Nafertari, mistress to the satrap of the city, Jungir Khan"
      ],
      "predicates": [
        "Captured(x) ::: x is captured in the attempt.",
        "Hypnotized(x) ::: x is forced via hypnotism.",
        "DancesBefore(x, y) ::: x dances before y.",
        "Dies(x) ::: x dies.",
        "Defeats(x, y) ::: x defeats y.",
        "Rescues(x, y) ::: x rescues y.",
        "Kills(x, y) ::: x kills y.",
        "Reveals(x, y) ::: x reveals y.",
        "Promises(x, y) ::: x promises y.",
        "TakesAntidote(x, y) ::: x takes an antidote to y.",
        "MistressTo(x, y) ::: x is the mistress to y."
      ],
      "premises": [
        "Captured(woman) ∧ Hypnotized(woman) ∧ DancesBefore(woman, highPriest) ∧ Dies(woman) ::: The woman is captured in the attempt, and forced via hypnotism to dance before the High priest until she dies.",
        "Defeats(conan, stranglerBaalPteor) ∧ Rescues(conan, woman) ∧ Kills(conan, highPriest) ::: Conan defeats the strangler Baal-pteor at his own game, rescues her, and kills the priest.",
        "Reveals(woman, nafertari) ∧ MistressTo(nafertari, jungir) ::: At the point of claiming his payment, she reveals that she is really Nafertari, mistress to the satrap of the city, Jungir Khan.",
        "TakesAntidote(nafertari, jungir) ∧ Promises(nafertari, positionAndWealth) ::: Taking an antidote to Jungir, she promises Conan position and wealth."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "476": [
    {
      "id": 476,
      "context_id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 1,
      "paragraph": "The woman is captured in the attempt, and forced - via hypnotism - to dance before the High priest until she dies. Conan, defeating - quite literally - the strangler Baal-pteor at his own game, rescues her and kills the priest. At the point of claiming his payment, however, she reveals that she is really Nafertari, mistress to the satrap of the city, Jungir Khan (the mad man). Taking an antidote to Jungir, she promises Conan position and wealth.",
      "question_template": "The naked woman's love potion actually turned her lover into [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "An antidote to Jungir"
      ],
      "predicates": [
        "Captured(x) ::: x is captured in the attempt.",
        "Hypnotized(x) ::: x is forced via hypnotism.",
        "DancesBefore(x, y) ::: x dances before y.",
        "Dies(x) ::: x dies.",
        "Defeats(x, y) ::: x defeats y.",
        "Rescues(x, y) ::: x rescues y.",
        "Kills(x, y) ::: x kills y.",
        "Reveals(x, y) ::: x reveals y.",
        "Promises(x, y) ::: x promises y.",
        "TakesAntidote(x, y) ::: x takes an antidote to y.",
        "MistressTo(x, y) ::: x is the mistress to y."
      ],
      "premises": [
        "Captured(woman) ∧ Hypnotized(woman) ∧ DancesBefore(woman, highPriest) ∧ Dies(woman) ::: The woman is captured in the attempt, and forced via hypnotism to dance before the High priest until she dies.",
        "Defeats(conan, stranglerBaalPteor) ∧ Rescues(conan, woman) ∧ Kills(conan, highPriest) ::: Conan defeats the strangler Baal-pteor at his own game, rescues her, and kills the priest.",
        "Reveals(woman, nafertari) ∧ MistressTo(nafertari, jungir) ::: At the point of claiming his payment, she reveals that she is really Nafertari, mistress to the satrap of the city, Jungir Khan.",
        "TakesAntidote(nafertari, jungir) ∧ Promises(nafertari, positionAndWealth) ::: Taking an antidote to Jungir, she promises Conan position and wealth."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "477": [
    {
      "id": 477,
      "context_id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 0,
      "paragraph": " Despite a warning received in the Suq by an elderly desert nomad, Conan stays the night in a cheap tavern in Zamboula, run by Aram Baksh. As night falls, a black Darfarian cannibal enters Conan's small chamber by means of a trick lock to drag him away to be eaten. All of the Darfarian slaves in the city are cannibals who roam the streets at night. As they only prey on travelers, the people of the city tolerate this and stay locked securely in their homes, while nomads and beggars make sure to spend the night at a comfortable distance from its walls. Even worse, Aram Baksh has made a deal with the cannibals - he provides them \"fresh meat,\" while he profits from the belongings of the ill-fated guests of his inn. This night, however, the unfortunate Darfarian attempts to prey on an armed and wary Conan, and pays with his life. Realizing the trap his room is, Conan takes to the Zamboulan streets where he soon runs into a naked woman chasing through the streets after her deranged lover; Conan rescues them from an attack by the cannibals. She tells him that she tried to secure her lover's unending affection via a love potion which instead made a raving lunatic of him. Suggestively promising Conan \"a reward\" in return for his assistance, they attempt to kill the high priest responsible for the man's madness.",
      "question_template": "The naked woman was forced to dance with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The high priest responsible for the man's madness"
      ],
      "predicates": [
        "Rescues(x, y) ::: x rescues y.",
        "Cannibal(x) ::: x is a cannibal.",
        "InCity(x, c) ::: x is in the city c.",
        "PreysOn(x, y) ::: x preys on y.",
        "LockedInHome(x) ::: x is locked securely in their home.",
        "MakesDeal(x, y) ::: x makes a deal with y.",
        "ProvidesFreshMeat(x, y) ::: x provides fresh meat to y.",
        "ProfitsFrom(x, y) ::: x profits from y.",
        "AttemptsToKill(x, y) ::: x attempts to kill y.",
        "Loves(x, y) ::: x loves y.",
        "MagicPotion(x) ::: x is a magic potion.",
        "NakedWoman(x) ::: x is a naked woman.",
        "DerangedLover(x) ::: x is a deranged lover."
      ],
      "premises": [
        "Rescues(a_1, a_3) ::: Conan rescues the naked woman and her deranged lover from cannibals.",
        "∀x (Cannibal(x) → PreysOn(x, a_0)) ::: All cannibals prey on travelers.",
        "∀x (InCity(x, c_1) → LockedInHome(x)) ::: The people of the city stay locked securely in their homes.",
        "∀x ∀y (MakesDeal(a_2, d) → ProvidesFreshMeat(a_2, d) ∧ ProfitsFrom(a_2, a_0)) ::: Aram Baksh makes a deal with the cannibals, providing them fresh meat while profiting from the belongings of his guests.",
        "∀x (NakedWoman(x) ∧ DerangedLover(y) ∧ Loves(y, x) ∧ MagicPotion(z) ∧ AttemptsToKill(a_1, a_2)) ::: The naked woman tried to secure her lover's affection via a love potion and they attempt to kill the high priest responsible for his madness."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 477,
      "context_id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 1,
      "paragraph": "The woman is captured in the attempt, and forced - via hypnotism - to dance before the High priest until she dies. Conan, defeating - quite literally - the strangler Baal-pteor at his own game, rescues her and kills the priest. At the point of claiming his payment, however, she reveals that she is really Nafertari, mistress to the satrap of the city, Jungir Khan (the mad man). Taking an antidote to Jungir, she promises Conan position and wealth.",
      "question_template": "The naked woman was forced to dance with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The High priest",
        "Jungir Khan"
      ],
      "predicates": [
        "Captured(x) ::: x is captured in the attempt.",
        "Hypnotized(x) ::: x is forced via hypnotism.",
        "DancesBefore(x, y) ::: x dances before y.",
        "Dies(x) ::: x dies.",
        "Defeats(x, y) ::: x defeats y.",
        "Rescues(x, y) ::: x rescues y.",
        "Kills(x, y) ::: x kills y.",
        "Reveals(x, y) ::: x reveals y.",
        "Promises(x, y) ::: x promises y.",
        "TakesAntidote(x, y) ::: x takes an antidote to y.",
        "MistressTo(x, y) ::: x is the mistress to y."
      ],
      "premises": [
        "Captured(woman) ∧ Hypnotized(woman) ∧ DancesBefore(woman, highPriest) ∧ Dies(woman) ::: The woman is captured in the attempt, and forced via hypnotism to dance before the High priest until she dies.",
        "Defeats(conan, stranglerBaalPteor) ∧ Rescues(conan, woman) ∧ Kills(conan, highPriest) ::: Conan defeats the strangler Baal-pteor at his own game, rescues her, and kills the priest.",
        "Reveals(woman, nafertari) ∧ MistressTo(nafertari, jungir) ::: At the point of claiming his payment, she reveals that she is really Nafertari, mistress to the satrap of the city, Jungir Khan.",
        "TakesAntidote(nafertari, jungir) ∧ Promises(nafertari, positionAndWealth) ::: Taking an antidote to Jungir, she promises Conan position and wealth."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "478": [
    {
      "id": 478,
      "context_id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 0,
      "paragraph": " Despite a warning received in the Suq by an elderly desert nomad, Conan stays the night in a cheap tavern in Zamboula, run by Aram Baksh. As night falls, a black Darfarian cannibal enters Conan's small chamber by means of a trick lock to drag him away to be eaten. All of the Darfarian slaves in the city are cannibals who roam the streets at night. As they only prey on travelers, the people of the city tolerate this and stay locked securely in their homes, while nomads and beggars make sure to spend the night at a comfortable distance from its walls. Even worse, Aram Baksh has made a deal with the cannibals - he provides them \"fresh meat,\" while he profits from the belongings of the ill-fated guests of his inn. This night, however, the unfortunate Darfarian attempts to prey on an armed and wary Conan, and pays with his life. Realizing the trap his room is, Conan takes to the Zamboulan streets where he soon runs into a naked woman chasing through the streets after her deranged lover; Conan rescues them from an attack by the cannibals. She tells him that she tried to secure her lover's unending affection via a love potion which instead made a raving lunatic of him. Suggestively promising Conan \"a reward\" in return for his assistance, they attempt to kill the high priest responsible for the man's madness.",
      "question_template": "Nafertari promises Conan [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Tried to secure her lover's unending affection via a love potion",
        "- Made a raving lunatic of him"
      ],
      "predicates": [
        "Rescues(x, y) ::: x rescues y.",
        "Cannibal(x) ::: x is a cannibal.",
        "InCity(x, c) ::: x is in the city c.",
        "PreysOn(x, y) ::: x preys on y.",
        "LockedInHome(x) ::: x is locked securely in their home.",
        "MakesDeal(x, y) ::: x makes a deal with y.",
        "ProvidesFreshMeat(x, y) ::: x provides fresh meat to y.",
        "ProfitsFrom(x, y) ::: x profits from y.",
        "AttemptsToKill(x, y) ::: x attempts to kill y.",
        "Loves(x, y) ::: x loves y.",
        "MagicPotion(x) ::: x is a magic potion.",
        "NakedWoman(x) ::: x is a naked woman.",
        "DerangedLover(x) ::: x is a deranged lover."
      ],
      "premises": [
        "Rescues(a_1, a_3) ::: Conan rescues the naked woman and her deranged lover from cannibals.",
        "∀x (Cannibal(x) → PreysOn(x, a_0)) ::: All cannibals prey on travelers.",
        "∀x (InCity(x, c_1) → LockedInHome(x)) ::: The people of the city stay locked securely in their homes.",
        "∀x ∀y (MakesDeal(a_2, d) → ProvidesFreshMeat(a_2, d) ∧ ProfitsFrom(a_2, a_0)) ::: Aram Baksh makes a deal with the cannibals, providing them fresh meat while profiting from the belongings of his guests.",
        "∀x (NakedWoman(x) ∧ DerangedLover(y) ∧ Loves(y, x) ∧ MagicPotion(z) ∧ AttemptsToKill(a_1, a_2)) ::: The naked woman tried to secure her lover's affection via a love potion and they attempt to kill the high priest responsible for his madness."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 478,
      "context_id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 1,
      "paragraph": "The woman is captured in the attempt, and forced - via hypnotism - to dance before the High priest until she dies. Conan, defeating - quite literally - the strangler Baal-pteor at his own game, rescues her and kills the priest. At the point of claiming his payment, however, she reveals that she is really Nafertari, mistress to the satrap of the city, Jungir Khan (the mad man). Taking an antidote to Jungir, she promises Conan position and wealth.",
      "question_template": "Nafertari promises Conan [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Dance before the High priest until she dies"
      ],
      "predicates": [
        "Captured(x) ::: x is captured in the attempt.",
        "Hypnotized(x) ::: x is forced via hypnotism.",
        "DancesBefore(x, y) ::: x dances before y.",
        "Dies(x) ::: x dies.",
        "Defeats(x, y) ::: x defeats y.",
        "Rescues(x, y) ::: x rescues y.",
        "Kills(x, y) ::: x kills y.",
        "Reveals(x, y) ::: x reveals y.",
        "Promises(x, y) ::: x promises y.",
        "TakesAntidote(x, y) ::: x takes an antidote to y.",
        "MistressTo(x, y) ::: x is the mistress to y."
      ],
      "premises": [
        "Captured(woman) ∧ Hypnotized(woman) ∧ DancesBefore(woman, highPriest) ∧ Dies(woman) ::: The woman is captured in the attempt, and forced via hypnotism to dance before the High priest until she dies.",
        "Defeats(conan, stranglerBaalPteor) ∧ Rescues(conan, woman) ∧ Kills(conan, highPriest) ::: Conan defeats the strangler Baal-pteor at his own game, rescues her, and kills the priest.",
        "Reveals(woman, nafertari) ∧ MistressTo(nafertari, jungir) ::: At the point of claiming his payment, she reveals that she is really Nafertari, mistress to the satrap of the city, Jungir Khan.",
        "TakesAntidote(nafertari, jungir) ∧ Promises(nafertari, positionAndWealth) ::: Taking an antidote to Jungir, she promises Conan position and wealth."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "480": [
    {
      "id": 480,
      "context_id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 2,
      "paragraph": "Conan, however, leaves the city and reveals to the reader that he had recognised them almost immediately. He takes his revenge on the tavern owner Aram Baksh by cutting out his tongue and shearing off his beard to render him mute and unrecognizable, and turning him over to the hungry cannibals to devour - one of the most profound displays of Conan's ironic sense of humor - and leaves the city with gold and the magic ring that started the night's intrigues (and which Conan had stolen from the mad Jungir on their first encounter), with the intent to sell it to another interested party.",
      "question_template": "Conan ends up leaving the city with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Cutting out his tongue"
      ],
      "predicates": [
        "Recognizes(x, y) ::: x recognizes y.",
        "TakesRevengeOn(x, y) ::: x takes revenge on y.",
        "CutsOutTongue(x, y) ::: x cuts out the tongue of y.",
        "ShearsOffBeard(x, y) ::: x shears off the beard of y.",
        "TurnsOverToCannibals(x, y) ::: x turns y over to the hungry cannibals.",
        "LeavesCity(x) ::: x leaves the city.",
        "HasGold(x) ::: x has gold.",
        "HasMagicRing(x) ::: x has the magic ring.",
        "DisplaysIrony(x) ::: x displays an ironic sense of humor.",
        "IntentToSell(x, y) ::: x intends to sell y to another interested party."
      ],
      "premises": [
        "Recognizes(conan, aramBaksh) ::: Conan recognized Aram Baksh almost immediately.",
        "TakesRevengeOn(conan, aramBaksh) ::: Conan takes revenge on the tavern owner Aram Baksh.",
        "CutsOutTongue(conan, aramBaksh) ::: Conan cuts out Aram Baksh's tongue.",
        "ShearsOffBeard(conan, aramBaksh) ::: Conan shears off Aram Baksh's beard.",
        "TurnsOverToCannibals(conan, aramBaksh) ::: Conan turns Aram Baksh over to the hungry cannibals.",
        "LeavesCity(conan) ::: Conan leaves the city.",
        "HasGold(conan) ::: Conan has gold.",
        "HasMagicRing(conan) ::: Conan has the magic ring that started the night's intrigues.",
        "DisplaysIrony(conan) ::: Conan's actions display an ironic sense of humor.",
        "IntentToSell(conan, magicRing) ::: Conan intends to sell the magic ring to another interested party."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "483": [
    {
      "id": 483,
      "context_id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 1,
      "paragraph": "The woman is captured in the attempt, and forced - via hypnotism - to dance before the High priest until she dies. Conan, defeating - quite literally - the strangler Baal-pteor at his own game, rescues her and kills the priest. At the point of claiming his payment, however, she reveals that she is really Nafertari, mistress to the satrap of the city, Jungir Khan (the mad man). Taking an antidote to Jungir, she promises Conan position and wealth.",
      "question_template": "The Cannibals mainly prey on [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The woman is captured in the attempt",
        "She reveals that she is really Nafertari, mistress to the satrap of the city",
        "Promises Conan position and wealth"
      ],
      "predicates": [
        "Captured(x) ::: x is captured in the attempt.",
        "Hypnotized(x) ::: x is forced via hypnotism.",
        "DancesBefore(x, y) ::: x dances before y.",
        "Dies(x) ::: x dies.",
        "Defeats(x, y) ::: x defeats y.",
        "Rescues(x, y) ::: x rescues y.",
        "Kills(x, y) ::: x kills y.",
        "Reveals(x, y) ::: x reveals y.",
        "Promises(x, y) ::: x promises y.",
        "TakesAntidote(x, y) ::: x takes an antidote to y.",
        "MistressTo(x, y) ::: x is the mistress to y."
      ],
      "premises": [
        "Captured(woman) ∧ Hypnotized(woman) ∧ DancesBefore(woman, highPriest) ∧ Dies(woman) ::: The woman is captured in the attempt, and forced via hypnotism to dance before the High priest until she dies.",
        "Defeats(conan, stranglerBaalPteor) ∧ Rescues(conan, woman) ∧ Kills(conan, highPriest) ::: Conan defeats the strangler Baal-pteor at his own game, rescues her, and kills the priest.",
        "Reveals(woman, nafertari) ∧ MistressTo(nafertari, jungir) ::: At the point of claiming his payment, she reveals that she is really Nafertari, mistress to the satrap of the city, Jungir Khan.",
        "TakesAntidote(nafertari, jungir) ∧ Promises(nafertari, positionAndWealth) ::: Taking an antidote to Jungir, she promises Conan position and wealth."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "484": [
    {
      "id": 484,
      "context_id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 2,
      "paragraph": "Conan, however, leaves the city and reveals to the reader that he had recognised them almost immediately. He takes his revenge on the tavern owner Aram Baksh by cutting out his tongue and shearing off his beard to render him mute and unrecognizable, and turning him over to the hungry cannibals to devour - one of the most profound displays of Conan's ironic sense of humor - and leaves the city with gold and the magic ring that started the night's intrigues (and which Conan had stolen from the mad Jungir on their first encounter), with the intent to sell it to another interested party.",
      "question_template": "[[CANDIDATE_ANSWER]] has made a deal with the cannibals.",
      "candidate_answers": [
        "- The tavern owner Aram Baksh",
        "- Conan"
      ],
      "predicates": [
        "Recognizes(x, y) ::: x recognizes y.",
        "TakesRevengeOn(x, y) ::: x takes revenge on y.",
        "CutsOutTongue(x, y) ::: x cuts out the tongue of y.",
        "ShearsOffBeard(x, y) ::: x shears off the beard of y.",
        "TurnsOverToCannibals(x, y) ::: x turns y over to the hungry cannibals.",
        "LeavesCity(x) ::: x leaves the city.",
        "HasGold(x) ::: x has gold.",
        "HasMagicRing(x) ::: x has the magic ring.",
        "DisplaysIrony(x) ::: x displays an ironic sense of humor.",
        "IntentToSell(x, y) ::: x intends to sell y to another interested party."
      ],
      "premises": [
        "Recognizes(conan, aramBaksh) ::: Conan recognized Aram Baksh almost immediately.",
        "TakesRevengeOn(conan, aramBaksh) ::: Conan takes revenge on the tavern owner Aram Baksh.",
        "CutsOutTongue(conan, aramBaksh) ::: Conan cuts out Aram Baksh's tongue.",
        "ShearsOffBeard(conan, aramBaksh) ::: Conan shears off Aram Baksh's beard.",
        "TurnsOverToCannibals(conan, aramBaksh) ::: Conan turns Aram Baksh over to the hungry cannibals.",
        "LeavesCity(conan) ::: Conan leaves the city.",
        "HasGold(conan) ::: Conan has gold.",
        "HasMagicRing(conan) ::: Conan has the magic ring that started the night's intrigues.",
        "DisplaysIrony(conan) ::: Conan's actions display an ironic sense of humor.",
        "IntentToSell(conan, magicRing) ::: Conan intends to sell the magic ring to another interested party."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "485": [
    {
      "id": 485,
      "context_id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 0,
      "paragraph": " Despite a warning received in the Suq by an elderly desert nomad, Conan stays the night in a cheap tavern in Zamboula, run by Aram Baksh. As night falls, a black Darfarian cannibal enters Conan's small chamber by means of a trick lock to drag him away to be eaten. All of the Darfarian slaves in the city are cannibals who roam the streets at night. As they only prey on travelers, the people of the city tolerate this and stay locked securely in their homes, while nomads and beggars make sure to spend the night at a comfortable distance from its walls. Even worse, Aram Baksh has made a deal with the cannibals - he provides them \"fresh meat,\" while he profits from the belongings of the ill-fated guests of his inn. This night, however, the unfortunate Darfarian attempts to prey on an armed and wary Conan, and pays with his life. Realizing the trap his room is, Conan takes to the Zamboulan streets where he soon runs into a naked woman chasing through the streets after her deranged lover; Conan rescues them from an attack by the cannibals. She tells him that she tried to secure her lover's unending affection via a love potion which instead made a raving lunatic of him. Suggestively promising Conan \"a reward\" in return for his assistance, they attempt to kill the high priest responsible for the man's madness.",
      "question_template": "Conan runs into [[CANDIDATE_ANSWER]] while running through the street.",
      "candidate_answers": [
        "- Aram Baksh has made a deal with the cannibals - he provides them \"fresh meat,\" while he profits from the belongings of the ill-fated guests of his inn.",
        "- Conan takes to the Zamboulan streets where he soon runs into a naked woman chasing through the streets after her deranged lover; Conan rescues them from an attack by the cannibals."
      ],
      "predicates": [
        "Rescues(x, y) ::: x rescues y.",
        "Cannibal(x) ::: x is a cannibal.",
        "InCity(x, c) ::: x is in the city c.",
        "PreysOn(x, y) ::: x preys on y.",
        "LockedInHome(x) ::: x is locked securely in their home.",
        "MakesDeal(x, y) ::: x makes a deal with y.",
        "ProvidesFreshMeat(x, y) ::: x provides fresh meat to y.",
        "ProfitsFrom(x, y) ::: x profits from y.",
        "AttemptsToKill(x, y) ::: x attempts to kill y.",
        "Loves(x, y) ::: x loves y.",
        "MagicPotion(x) ::: x is a magic potion.",
        "NakedWoman(x) ::: x is a naked woman.",
        "DerangedLover(x) ::: x is a deranged lover."
      ],
      "premises": [
        "Rescues(a_1, a_3) ::: Conan rescues the naked woman and her deranged lover from cannibals.",
        "∀x (Cannibal(x) → PreysOn(x, a_0)) ::: All cannibals prey on travelers.",
        "∀x (InCity(x, c_1) → LockedInHome(x)) ::: The people of the city stay locked securely in their homes.",
        "∀x ∀y (MakesDeal(a_2, d) → ProvidesFreshMeat(a_2, d) ∧ ProfitsFrom(a_2, a_0)) ::: Aram Baksh makes a deal with the cannibals, providing them fresh meat while profiting from the belongings of his guests.",
        "∀x (NakedWoman(x) ∧ DerangedLover(y) ∧ Loves(y, x) ∧ MagicPotion(z) ∧ AttemptsToKill(a_1, a_2)) ::: The naked woman tried to secure her lover's affection via a love potion and they attempt to kill the high priest responsible for his madness."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 485,
      "context_id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 2,
      "paragraph": "Conan, however, leaves the city and reveals to the reader that he had recognised them almost immediately. He takes his revenge on the tavern owner Aram Baksh by cutting out his tongue and shearing off his beard to render him mute and unrecognizable, and turning him over to the hungry cannibals to devour - one of the most profound displays of Conan's ironic sense of humor - and leaves the city with gold and the magic ring that started the night's intrigues (and which Conan had stolen from the mad Jungir on their first encounter), with the intent to sell it to another interested party.",
      "question_template": "Conan runs into [[CANDIDATE_ANSWER]] while running through the street.",
      "candidate_answers": [
        "- Takes his revenge on the tavern owner Aram Baksh by cutting out his tongue and shearing off his beard to render him mute and unrecognizable",
        "- Turns him over to the hungry cannibals to devour"
      ],
      "predicates": [
        "Recognizes(x, y) ::: x recognizes y.",
        "TakesRevengeOn(x, y) ::: x takes revenge on y.",
        "CutsOutTongue(x, y) ::: x cuts out the tongue of y.",
        "ShearsOffBeard(x, y) ::: x shears off the beard of y.",
        "TurnsOverToCannibals(x, y) ::: x turns y over to the hungry cannibals.",
        "LeavesCity(x) ::: x leaves the city.",
        "HasGold(x) ::: x has gold.",
        "HasMagicRing(x) ::: x has the magic ring.",
        "DisplaysIrony(x) ::: x displays an ironic sense of humor.",
        "IntentToSell(x, y) ::: x intends to sell y to another interested party."
      ],
      "premises": [
        "Recognizes(conan, aramBaksh) ::: Conan recognized Aram Baksh almost immediately.",
        "TakesRevengeOn(conan, aramBaksh) ::: Conan takes revenge on the tavern owner Aram Baksh.",
        "CutsOutTongue(conan, aramBaksh) ::: Conan cuts out Aram Baksh's tongue.",
        "ShearsOffBeard(conan, aramBaksh) ::: Conan shears off Aram Baksh's beard.",
        "TurnsOverToCannibals(conan, aramBaksh) ::: Conan turns Aram Baksh over to the hungry cannibals.",
        "LeavesCity(conan) ::: Conan leaves the city.",
        "HasGold(conan) ::: Conan has gold.",
        "HasMagicRing(conan) ::: Conan has the magic ring that started the night's intrigues.",
        "DisplaysIrony(conan) ::: Conan's actions display an ironic sense of humor.",
        "IntentToSell(conan, magicRing) ::: Conan intends to sell the magic ring to another interested party."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "486": [
    {
      "id": 486,
      "context_id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 1,
      "paragraph": "The woman is captured in the attempt, and forced - via hypnotism - to dance before the High priest until she dies. Conan, defeating - quite literally - the strangler Baal-pteor at his own game, rescues her and kills the priest. At the point of claiming his payment, however, she reveals that she is really Nafertari, mistress to the satrap of the city, Jungir Khan (the mad man). Taking an antidote to Jungir, she promises Conan position and wealth.",
      "question_template": "Nafertari tried to use [[CANDIDATE_ANSWER]] to secure undying affection from her lover.",
      "candidate_answers": [
        "The woman is captured in the attempt",
        "She reveals that she is really Nafertari, mistress to the satrap of the city, Jungir Khan",
        "Taking an antidote to Jungir, she promises Conan position and wealth"
      ],
      "predicates": [
        "Captured(x) ::: x is captured in the attempt.",
        "Hypnotized(x) ::: x is forced via hypnotism.",
        "DancesBefore(x, y) ::: x dances before y.",
        "Dies(x) ::: x dies.",
        "Defeats(x, y) ::: x defeats y.",
        "Rescues(x, y) ::: x rescues y.",
        "Kills(x, y) ::: x kills y.",
        "Reveals(x, y) ::: x reveals y.",
        "Promises(x, y) ::: x promises y.",
        "TakesAntidote(x, y) ::: x takes an antidote to y.",
        "MistressTo(x, y) ::: x is the mistress to y."
      ],
      "premises": [
        "Captured(woman) ∧ Hypnotized(woman) ∧ DancesBefore(woman, highPriest) ∧ Dies(woman) ::: The woman is captured in the attempt, and forced via hypnotism to dance before the High priest until she dies.",
        "Defeats(conan, stranglerBaalPteor) ∧ Rescues(conan, woman) ∧ Kills(conan, highPriest) ::: Conan defeats the strangler Baal-pteor at his own game, rescues her, and kills the priest.",
        "Reveals(woman, nafertari) ∧ MistressTo(nafertari, jungir) ::: At the point of claiming his payment, she reveals that she is really Nafertari, mistress to the satrap of the city, Jungir Khan.",
        "TakesAntidote(nafertari, jungir) ∧ Promises(nafertari, positionAndWealth) ::: Taking an antidote to Jungir, she promises Conan position and wealth."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 486,
      "context_id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 2,
      "paragraph": "Conan, however, leaves the city and reveals to the reader that he had recognised them almost immediately. He takes his revenge on the tavern owner Aram Baksh by cutting out his tongue and shearing off his beard to render him mute and unrecognizable, and turning him over to the hungry cannibals to devour - one of the most profound displays of Conan's ironic sense of humor - and leaves the city with gold and the magic ring that started the night's intrigues (and which Conan had stolen from the mad Jungir on their first encounter), with the intent to sell it to another interested party.",
      "question_template": "Nafertari tried to use [[CANDIDATE_ANSWER]] to secure undying affection from her lover.",
      "candidate_answers": [
        "He had recognised them almost immediately"
      ],
      "predicates": [
        "Recognizes(x, y) ::: x recognizes y.",
        "TakesRevengeOn(x, y) ::: x takes revenge on y.",
        "CutsOutTongue(x, y) ::: x cuts out the tongue of y.",
        "ShearsOffBeard(x, y) ::: x shears off the beard of y.",
        "TurnsOverToCannibals(x, y) ::: x turns y over to the hungry cannibals.",
        "LeavesCity(x) ::: x leaves the city.",
        "HasGold(x) ::: x has gold.",
        "HasMagicRing(x) ::: x has the magic ring.",
        "DisplaysIrony(x) ::: x displays an ironic sense of humor.",
        "IntentToSell(x, y) ::: x intends to sell y to another interested party."
      ],
      "premises": [
        "Recognizes(conan, aramBaksh) ::: Conan recognized Aram Baksh almost immediately.",
        "TakesRevengeOn(conan, aramBaksh) ::: Conan takes revenge on the tavern owner Aram Baksh.",
        "CutsOutTongue(conan, aramBaksh) ::: Conan cuts out Aram Baksh's tongue.",
        "ShearsOffBeard(conan, aramBaksh) ::: Conan shears off Aram Baksh's beard.",
        "TurnsOverToCannibals(conan, aramBaksh) ::: Conan turns Aram Baksh over to the hungry cannibals.",
        "LeavesCity(conan) ::: Conan leaves the city.",
        "HasGold(conan) ::: Conan has gold.",
        "HasMagicRing(conan) ::: Conan has the magic ring that started the night's intrigues.",
        "DisplaysIrony(conan) ::: Conan's actions display an ironic sense of humor.",
        "IntentToSell(conan, magicRing) ::: Conan intends to sell the magic ring to another interested party."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "487": [
    {
      "id": 487,
      "context_id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 2,
      "paragraph": "Conan, however, leaves the city and reveals to the reader that he had recognised them almost immediately. He takes his revenge on the tavern owner Aram Baksh by cutting out his tongue and shearing off his beard to render him mute and unrecognizable, and turning him over to the hungry cannibals to devour - one of the most profound displays of Conan's ironic sense of humor - and leaves the city with gold and the magic ring that started the night's intrigues (and which Conan had stolen from the mad Jungir on their first encounter), with the intent to sell it to another interested party.",
      "question_template": "Conan and the woman set out to kill [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "the magic ring that started the night's intrigues"
      ],
      "predicates": [
        "Recognizes(x, y) ::: x recognizes y.",
        "TakesRevengeOn(x, y) ::: x takes revenge on y.",
        "CutsOutTongue(x, y) ::: x cuts out the tongue of y.",
        "ShearsOffBeard(x, y) ::: x shears off the beard of y.",
        "TurnsOverToCannibals(x, y) ::: x turns y over to the hungry cannibals.",
        "LeavesCity(x) ::: x leaves the city.",
        "HasGold(x) ::: x has gold.",
        "HasMagicRing(x) ::: x has the magic ring.",
        "DisplaysIrony(x) ::: x displays an ironic sense of humor.",
        "IntentToSell(x, y) ::: x intends to sell y to another interested party."
      ],
      "premises": [
        "Recognizes(conan, aramBaksh) ::: Conan recognized Aram Baksh almost immediately.",
        "TakesRevengeOn(conan, aramBaksh) ::: Conan takes revenge on the tavern owner Aram Baksh.",
        "CutsOutTongue(conan, aramBaksh) ::: Conan cuts out Aram Baksh's tongue.",
        "ShearsOffBeard(conan, aramBaksh) ::: Conan shears off Aram Baksh's beard.",
        "TurnsOverToCannibals(conan, aramBaksh) ::: Conan turns Aram Baksh over to the hungry cannibals.",
        "LeavesCity(conan) ::: Conan leaves the city.",
        "HasGold(conan) ::: Conan has gold.",
        "HasMagicRing(conan) ::: Conan has the magic ring that started the night's intrigues.",
        "DisplaysIrony(conan) ::: Conan's actions display an ironic sense of humor.",
        "IntentToSell(conan, magicRing) ::: Conan intends to sell the magic ring to another interested party."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "488": [
    {
      "id": 488,
      "context_id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 0,
      "paragraph": " Despite a warning received in the Suq by an elderly desert nomad, Conan stays the night in a cheap tavern in Zamboula, run by Aram Baksh. As night falls, a black Darfarian cannibal enters Conan's small chamber by means of a trick lock to drag him away to be eaten. All of the Darfarian slaves in the city are cannibals who roam the streets at night. As they only prey on travelers, the people of the city tolerate this and stay locked securely in their homes, while nomads and beggars make sure to spend the night at a comfortable distance from its walls. Even worse, Aram Baksh has made a deal with the cannibals - he provides them \"fresh meat,\" while he profits from the belongings of the ill-fated guests of his inn. This night, however, the unfortunate Darfarian attempts to prey on an armed and wary Conan, and pays with his life. Realizing the trap his room is, Conan takes to the Zamboulan streets where he soon runs into a naked woman chasing through the streets after her deranged lover; Conan rescues them from an attack by the cannibals. She tells him that she tried to secure her lover's unending affection via a love potion which instead made a raving lunatic of him. Suggestively promising Conan \"a reward\" in return for his assistance, they attempt to kill the high priest responsible for the man's madness.",
      "question_template": "The woman is hypnotized to [[CANDIDATE_ANSWER]] before the priest.",
      "candidate_answers": [
        "- Tried to secure her lover's unending affection via a love potion",
        "- Made a raving lunatic of him"
      ],
      "predicates": [
        "Rescues(x, y) ::: x rescues y.",
        "Cannibal(x) ::: x is a cannibal.",
        "InCity(x, c) ::: x is in the city c.",
        "PreysOn(x, y) ::: x preys on y.",
        "LockedInHome(x) ::: x is locked securely in their home.",
        "MakesDeal(x, y) ::: x makes a deal with y.",
        "ProvidesFreshMeat(x, y) ::: x provides fresh meat to y.",
        "ProfitsFrom(x, y) ::: x profits from y.",
        "AttemptsToKill(x, y) ::: x attempts to kill y.",
        "Loves(x, y) ::: x loves y.",
        "MagicPotion(x) ::: x is a magic potion.",
        "NakedWoman(x) ::: x is a naked woman.",
        "DerangedLover(x) ::: x is a deranged lover."
      ],
      "premises": [
        "Rescues(a_1, a_3) ::: Conan rescues the naked woman and her deranged lover from cannibals.",
        "∀x (Cannibal(x) → PreysOn(x, a_0)) ::: All cannibals prey on travelers.",
        "∀x (InCity(x, c_1) → LockedInHome(x)) ::: The people of the city stay locked securely in their homes.",
        "∀x ∀y (MakesDeal(a_2, d) → ProvidesFreshMeat(a_2, d) ∧ ProfitsFrom(a_2, a_0)) ::: Aram Baksh makes a deal with the cannibals, providing them fresh meat while profiting from the belongings of his guests.",
        "∀x (NakedWoman(x) ∧ DerangedLover(y) ∧ Loves(y, x) ∧ MagicPotion(z) ∧ AttemptsToKill(a_1, a_2)) ::: The naked woman tried to secure her lover's affection via a love potion and they attempt to kill the high priest responsible for his madness."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 488,
      "context_id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 1,
      "paragraph": "The woman is captured in the attempt, and forced - via hypnotism - to dance before the High priest until she dies. Conan, defeating - quite literally - the strangler Baal-pteor at his own game, rescues her and kills the priest. At the point of claiming his payment, however, she reveals that she is really Nafertari, mistress to the satrap of the city, Jungir Khan (the mad man). Taking an antidote to Jungir, she promises Conan position and wealth.",
      "question_template": "The woman is hypnotized to [[CANDIDATE_ANSWER]] before the priest.",
      "candidate_answers": [
        "- Dance before the High priest until she dies"
      ],
      "predicates": [
        "Captured(x) ::: x is captured in the attempt.",
        "Hypnotized(x) ::: x is forced via hypnotism.",
        "DancesBefore(x, y) ::: x dances before y.",
        "Dies(x) ::: x dies.",
        "Defeats(x, y) ::: x defeats y.",
        "Rescues(x, y) ::: x rescues y.",
        "Kills(x, y) ::: x kills y.",
        "Reveals(x, y) ::: x reveals y.",
        "Promises(x, y) ::: x promises y.",
        "TakesAntidote(x, y) ::: x takes an antidote to y.",
        "MistressTo(x, y) ::: x is the mistress to y."
      ],
      "premises": [
        "Captured(woman) ∧ Hypnotized(woman) ∧ DancesBefore(woman, highPriest) ∧ Dies(woman) ::: The woman is captured in the attempt, and forced via hypnotism to dance before the High priest until she dies.",
        "Defeats(conan, stranglerBaalPteor) ∧ Rescues(conan, woman) ∧ Kills(conan, highPriest) ::: Conan defeats the strangler Baal-pteor at his own game, rescues her, and kills the priest.",
        "Reveals(woman, nafertari) ∧ MistressTo(nafertari, jungir) ::: At the point of claiming his payment, she reveals that she is really Nafertari, mistress to the satrap of the city, Jungir Khan.",
        "TakesAntidote(nafertari, jungir) ∧ Promises(nafertari, positionAndWealth) ::: Taking an antidote to Jungir, she promises Conan position and wealth."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "490": [
    {
      "id": 490,
      "context_id": "46e4a4aa0f4ba89cf4d4972f1b9f6657f56e8f63",
      "paragraph_id": 1,
      "paragraph": "The woman is captured in the attempt, and forced - via hypnotism - to dance before the High priest until she dies. Conan, defeating - quite literally - the strangler Baal-pteor at his own game, rescues her and kills the priest. At the point of claiming his payment, however, she reveals that she is really Nafertari, mistress to the satrap of the city, Jungir Khan (the mad man). Taking an antidote to Jungir, she promises Conan position and wealth.",
      "question_template": "Conan renders Aram mute by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "mistress to the satrap of the city, Jungir Khan"
      ],
      "predicates": [
        "Captured(x) ::: x is captured in the attempt.",
        "Hypnotized(x) ::: x is forced via hypnotism.",
        "DancesBefore(x, y) ::: x dances before y.",
        "Dies(x) ::: x dies.",
        "Defeats(x, y) ::: x defeats y.",
        "Rescues(x, y) ::: x rescues y.",
        "Kills(x, y) ::: x kills y.",
        "Reveals(x, y) ::: x reveals y.",
        "Promises(x, y) ::: x promises y.",
        "TakesAntidote(x, y) ::: x takes an antidote to y.",
        "MistressTo(x, y) ::: x is the mistress to y."
      ],
      "premises": [
        "Captured(woman) ∧ Hypnotized(woman) ∧ DancesBefore(woman, highPriest) ∧ Dies(woman) ::: The woman is captured in the attempt, and forced via hypnotism to dance before the High priest until she dies.",
        "Defeats(conan, stranglerBaalPteor) ∧ Rescues(conan, woman) ∧ Kills(conan, highPriest) ::: Conan defeats the strangler Baal-pteor at his own game, rescues her, and kills the priest.",
        "Reveals(woman, nafertari) ∧ MistressTo(nafertari, jungir) ::: At the point of claiming his payment, she reveals that she is really Nafertari, mistress to the satrap of the city, Jungir Khan.",
        "TakesAntidote(nafertari, jungir) ∧ Promises(nafertari, positionAndWealth) ::: Taking an antidote to Jungir, she promises Conan position and wealth."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "491": [
    {
      "id": 491,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 0,
      "paragraph": " Villette begins with its famously passive protagonist, Lucy Snowe, age 14, staying at the home of her godmother Mrs. Bretton in \"the clean and ancient town of Bretton\", in England. Also in residence are Mrs. Bretton's son, John Graham Bretton (whom the family calls Graham), and a young visitor, Paulina Home (who is called Polly). Polly is a peculiar little girl who soon develops a deep devotion to Graham, who showers her with attention. But Polly's visit is cut short when her father arrives to take her away.",
      "question_template": "The people of Zamboula tolerate the cannibal slaves because of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Her father"
      ],
      "predicates": [
        "PassiveProtagonist(x) ::: x is a passive protagonist.",
        "Age(x, y) ::: x is of age y.",
        "StaysAt(x, y) ::: x stays at the home of y.",
        "InResidence(x, y) ::: x is in residence with y.",
        "Devotion(x, y) ::: x has a deep devotion to y.",
        "Attention(x, y) ::: x showers y with attention.",
        "TakesAway(x, y) ::: x takes y away."
      ],
      "premises": [
        "PassiveProtagonist(lucy) ∧ Age(lucy, 14) ∧ StaysAt(lucy, mrsBretton) ::: Lucy Snowe is a famously passive protagonist, age 14, staying at the home of her godmother Mrs. Bretton.",
        "InResidence(mrsBretton, johnGraham) ∧ InResidence(mrsBretton, paulina) ::: Mrs. Bretton has her son John Graham Bretton and a young visitor Paulina Home in residence.",
        "Devotion(paulina, johnGraham) ∧ Attention(johnGraham, paulina) ::: Polly develops a deep devotion to Graham, who showers her with attention.",
        "TakesAway(father, paulina) ::: Polly's visit is cut short when her father arrives to take her away."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 491,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 1,
      "paragraph": "For reasons that are not stated, Lucy leaves Mrs. Bretton's home a few weeks after the Polly's departure. Some years pass, during which an unspecified family tragedy leaves Lucy without family, home, or means. After some initial hesitation, she is hired as a caregiver by Miss Marchmont, a rheumatic crippled woman. Lucy is soon accustomed to her work and has begun to feel content with her quiet lifestyle.",
      "question_template": "The people of Zamboula tolerate the cannibal slaves because of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Lucy leaves Mrs. Bretton's home a few weeks after Polly's departure."
      ],
      "predicates": [
        "Leaves(x, y) ::: x leaves y.",
        "HiredAs(x, y) ::: x is hired as y.",
        "Content(x) ::: x feels content.",
        "Caregiver(x) ::: x is a caregiver.",
        "RheumaticCrippled(x) ::: x is a rheumatic crippled person.",
        "FamilyTragedy(x) ::: x experiences a family tragedy.",
        "HomeLess(x) ::: x is without a home.",
        "MeansLess(x) ::: x is without means."
      ],
      "premises": [
        "Leaves(lucy, mrsBretton) ::: Lucy leaves Mrs. Bretton's home a few weeks after Polly's departure.",
        "FamilyTragedy(lucy) ∧ HomeLess(lucy) ∧ MeansLess(lucy) ::: An unspecified family tragedy leaves Lucy without family, home, or means.",
        "HiredAs(lucy, caregiver) ∧ RheumaticCrippled(missMarchmont) ::: Lucy is hired as a caregiver by Miss Marchmont, a rheumatic crippled woman.",
        "Content(lucy) ::: Lucy feels content with her quiet lifestyle."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 491,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 3,
      "paragraph": "Lucy then leaves the English countryside and goes to London. At the age of 23, she boards a ship for Labassecour despite knowing very little French. She travels to the city of Villette, where she finds employment as a bonne (nanny) at Mme. Beck's boarding school for girls. (This school is seen as being based upon the Hégers' Brussels pensionnat). After a time, she is hired to teach English at the school, in addition to having to mind Mme. Beck's three children. She thrives despite Mme. Beck's constant surveillance of the staff and students.",
      "question_template": "The people of Zamboula tolerate the cannibal slaves because of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Lucy",
        "Mme. Beck"
      ],
      "predicates": [
        "Leaves(x, y) ::: x leaves location y.",
        "Boards(x, y) ::: x boards a ship for destination y.",
        "TravelsTo(x, y) ::: x travels to location y.",
        "FindsEmployment(x, y) ::: x finds employment at location y.",
        "Teaches(x, y) ::: x teaches subject y.",
        "Minds(x, y) ::: x minds y (children).",
        "Thrives(x) ::: x thrives in the given situation.",
        "Surveillance(x, y) ::: x conducts surveillance on y."
      ],
      "premises": [
        "Leaves(a_0, English countryside) ::: Lucy leaves the English countryside.",
        "Boards(a_0, Labassecour) ::: Lucy boards a ship for Labassecour.",
        "TravelsTo(a_0, Villette) ::: Lucy travels to the city of Villette.",
        "FindsEmployment(a_0, Mme_Beck's_boarding_school) ::: Lucy finds employment as a bonne at Mme. Beck's boarding school for girls.",
        "Teaches(a_0, English) ::: Lucy is hired to teach English at the school.",
        "Minds(a_0, Mme_Beck's_children) ::: Lucy has to mind Mme. Beck's three children.",
        "Thrives(a_0) ::: Lucy thrives despite the situation.",
        "Surveillance(Mme_Beck, staff_and_students) ::: Mme. Beck conducts constant surveillance of the staff and students."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "492": [
    {
      "id": 492,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 2,
      "paragraph": "During an evening of dramatic weather changes, Miss Marchmont regains all her energy and feels young again. She shares with Lucy her sad love story of 30 years previously, and concludes that she should treat Lucy better and be a better person. She believes that death will reunite her with her dead lover. The next morning, Lucy finds Miss Marchmont dead.",
      "question_template": "The cannibal gets into Conan's room by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Miss Marchmont regains all her energy",
        "An evening of dramatic weather changes"
      ],
      "predicates": [
        "RegainsEnergy(a_0) ::: Miss Marchmont regains all her energy.",
        "FeelsYoung(a_0) ::: Miss Marchmont feels young again.",
        "Shares(a_0, a_1) ::: Miss Marchmont shares her story with Lucy.",
        "SadLoveStory(a_0) ::: Miss Marchmont shares her sad love story.",
        "TreatBetter(a_0) ::: Miss Marchmont concludes that she should treat Lucy better.",
        "Believes(a_0, b_0) ::: Miss Marchmont believes that death will reunite her with her dead lover.",
        "Finds(a_1, a_0) ::: Lucy finds Miss Marchmont dead.",
        "Dead(a_0) ::: Miss Marchmont is dead."
      ],
      "premises": [
        "RegainsEnergy(a_0) ∧ FeelsYoung(a_0) ::: During an evening of dramatic weather changes, Miss Marchmont regains all her energy and feels young again.",
        "Shares(a_0, a_1) ∧ SadLoveStory(a_0) ::: She shares with Lucy her sad love story of 30 years previously.",
        "TreatBetter(a_0) ::: She concludes that she should treat Lucy better and be a better person.",
        "Believes(a_0, b_0) ::: She believes that death will reunite her with her dead lover.",
        "Finds(a_1, a_0) ∧ Dead(a_0) ::: The next morning, Lucy finds Miss Marchmont dead.",
        "¬(Dead(a_0) ∧ (TreatBetter(a_0) ∧ Believes(a_0, b_0))) ::: Miss Marchmont's death occurs after she expresses her beliefs and conclusions."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "493": [
    {
      "id": 493,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 7,
      "paragraph": "However, a group of conspiring antagonists, including Mme. Beck, the priest Père Silas, and the relatives of M. Paul's long-dead fiancée, work to keep the two apart. They finally succeed in forcing M. Paul's departure for the West Indies to oversee a plantation there. He nonetheless declares his love for Lucy before his departure and arranges for her to live independently as the headmistress of her own day school, which she later expands into a pensionnat (boarding school).",
      "question_template": "The woman Conan meets in the street did [[CANDIDATE_ANSWER]] to her lover.",
      "candidate_answers": [
        "- Headmistress of her own day school",
        "- Expands into a pensionnat"
      ],
      "predicates": [
        "Antagonists(x) ::: x is a group of conspiring antagonists.",
        "KeepsApart(x, y) ::: x keeps y apart from z.",
        "DeclaresLove(x, y) ::: x declares love for y.",
        "Arranges(x, y, z) ::: x arranges for y to do z.",
        "Headmistress(x) ::: x is a headmistress.",
        "Pensionnat(x) ::: x is a boarding school."
      ],
      "premises": [
        "Antagonists(group) ::: A group of conspiring antagonists exists.",
        "KeepsApart(group, mPaul) ∧ KeepsApart(group, lucy) ::: The group of antagonists keeps M. Paul and Lucy apart.",
        "DeclaresLove(mPaul, lucy) ::: M. Paul declares his love for Lucy before his departure.",
        "Arranges(mPaul, lucy, liveIndependently) ::: M. Paul arranges for Lucy to live independently as the headmistress of her own day school.",
        "Headmistress(lucy) ::: Lucy is the headmistress of her own day school.",
        "Pensionnat(expandedSchool) ::: Lucy later expands her day school into a pensionnat (boarding school)."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "494": [
    {
      "id": 494,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 3,
      "paragraph": "Lucy then leaves the English countryside and goes to London. At the age of 23, she boards a ship for Labassecour despite knowing very little French. She travels to the city of Villette, where she finds employment as a bonne (nanny) at Mme. Beck's boarding school for girls. (This school is seen as being based upon the Hégers' Brussels pensionnat). After a time, she is hired to teach English at the school, in addition to having to mind Mme. Beck's three children. She thrives despite Mme. Beck's constant surveillance of the staff and students.",
      "question_template": "[[CANDIDATE_ANSWER]] is providing the cannibals with fresh meat.",
      "candidate_answers": [
        "English"
      ],
      "predicates": [
        "Leaves(x, y) ::: x leaves location y.",
        "Boards(x, y) ::: x boards a ship for destination y.",
        "TravelsTo(x, y) ::: x travels to location y.",
        "FindsEmployment(x, y) ::: x finds employment at location y.",
        "Teaches(x, y) ::: x teaches subject y.",
        "Minds(x, y) ::: x minds y (children).",
        "Thrives(x) ::: x thrives in the given situation.",
        "Surveillance(x, y) ::: x conducts surveillance on y."
      ],
      "premises": [
        "Leaves(a_0, English countryside) ::: Lucy leaves the English countryside.",
        "Boards(a_0, Labassecour) ::: Lucy boards a ship for Labassecour.",
        "TravelsTo(a_0, Villette) ::: Lucy travels to the city of Villette.",
        "FindsEmployment(a_0, Mme_Beck's_boarding_school) ::: Lucy finds employment as a bonne at Mme. Beck's boarding school for girls.",
        "Teaches(a_0, English) ::: Lucy is hired to teach English at the school.",
        "Minds(a_0, Mme_Beck's_children) ::: Lucy has to mind Mme. Beck's three children.",
        "Thrives(a_0) ::: Lucy thrives despite the situation.",
        "Surveillance(Mme_Beck, staff_and_students) ::: Mme. Beck conducts constant surveillance of the staff and students."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 494,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 6,
      "paragraph": "Lucy becomes progressively closer to a colleague, the irascible, autocratic, and male chauvinist professor, M. Paul Emanuel, a relative of Mme. Beck. Lucy and Paul eventually fall in love.",
      "question_template": "[[CANDIDATE_ANSWER]] is providing the cannibals with fresh meat.",
      "candidate_answers": [
        "Lucy becomes progressively closer to a colleague",
        "the irascible, autocratic, and male chauvinist professor, M. Paul Emanuel",
        "a relative of Mme. Beck",
        "Lucy and Paul eventually fall in love"
      ],
      "predicates": [
        "Closer(x, y) ::: x becomes progressively closer to y.",
        "InLove(x, y) ::: x and y are in love.",
        "Irascible(x) ::: x is irascible.",
        "Autocratic(x) ::: x is autocratic.",
        "MaleChauvinist(x) ::: x is a male chauvinist.",
        "Relative(x, y) ::: x is a relative of y."
      ],
      "premises": [
        "Closer(lucy, paul) ::: Lucy becomes progressively closer to M. Paul Emanuel.",
        "Irascible(paul) ::: M. Paul Emanuel is irascible.",
        "Autocratic(paul) ::: M. Paul Emanuel is autocratic.",
        "MaleChauvinist(paul) ::: M. Paul Emanuel is a male chauvinist.",
        "Relative(paul, beck) ::: M. Paul Emanuel is a relative of Mme. Beck.",
        "InLove(lucy, paul) ::: Lucy and M. Paul Emanuel eventually fall in love."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 494,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 7,
      "paragraph": "However, a group of conspiring antagonists, including Mme. Beck, the priest Père Silas, and the relatives of M. Paul's long-dead fiancée, work to keep the two apart. They finally succeed in forcing M. Paul's departure for the West Indies to oversee a plantation there. He nonetheless declares his love for Lucy before his departure and arranges for her to live independently as the headmistress of her own day school, which she later expands into a pensionnat (boarding school).",
      "question_template": "[[CANDIDATE_ANSWER]] is providing the cannibals with fresh meat.",
      "candidate_answers": [
        "Lucy was the headmistress of her own day school",
        "She later expands into a pensionnat"
      ],
      "predicates": [
        "Antagonists(x) ::: x is a group of conspiring antagonists.",
        "KeepsApart(x, y) ::: x keeps y apart from z.",
        "DeclaresLove(x, y) ::: x declares love for y.",
        "Arranges(x, y, z) ::: x arranges for y to do z.",
        "Headmistress(x) ::: x is a headmistress.",
        "Pensionnat(x) ::: x is a boarding school."
      ],
      "premises": [
        "Antagonists(group) ::: A group of conspiring antagonists exists.",
        "KeepsApart(group, mPaul) ∧ KeepsApart(group, lucy) ::: The group of antagonists keeps M. Paul and Lucy apart.",
        "DeclaresLove(mPaul, lucy) ::: M. Paul declares his love for Lucy before his departure.",
        "Arranges(mPaul, lucy, liveIndependently) ::: M. Paul arranges for Lucy to live independently as the headmistress of her own day school.",
        "Headmistress(lucy) ::: Lucy is the headmistress of her own day school.",
        "Pensionnat(expandedSchool) ::: Lucy later expands her day school into a pensionnat (boarding school)."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "495": [
    {
      "id": 495,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 0,
      "paragraph": " Villette begins with its famously passive protagonist, Lucy Snowe, age 14, staying at the home of her godmother Mrs. Bretton in \"the clean and ancient town of Bretton\", in England. Also in residence are Mrs. Bretton's son, John Graham Bretton (whom the family calls Graham), and a young visitor, Paulina Home (who is called Polly). Polly is a peculiar little girl who soon develops a deep devotion to Graham, who showers her with attention. But Polly's visit is cut short when her father arrives to take her away.",
      "question_template": "Conan does [[CANDIDATE_ANSWER]] to the innkeeper when he discovers what he's been doing.",
      "candidate_answers": [
        "Mrs. Bretton's son, John Graham Bretton",
        "Graham"
      ],
      "predicates": [
        "PassiveProtagonist(x) ::: x is a passive protagonist.",
        "Age(x, y) ::: x is of age y.",
        "StaysAt(x, y) ::: x stays at the home of y.",
        "InResidence(x, y) ::: x is in residence with y.",
        "Devotion(x, y) ::: x has a deep devotion to y.",
        "Attention(x, y) ::: x showers y with attention.",
        "TakesAway(x, y) ::: x takes y away."
      ],
      "premises": [
        "PassiveProtagonist(lucy) ∧ Age(lucy, 14) ∧ StaysAt(lucy, mrsBretton) ::: Lucy Snowe is a famously passive protagonist, age 14, staying at the home of her godmother Mrs. Bretton.",
        "InResidence(mrsBretton, johnGraham) ∧ InResidence(mrsBretton, paulina) ::: Mrs. Bretton has her son John Graham Bretton and a young visitor Paulina Home in residence.",
        "Devotion(paulina, johnGraham) ∧ Attention(johnGraham, paulina) ::: Polly develops a deep devotion to Graham, who showers her with attention.",
        "TakesAway(father, paulina) ::: Polly's visit is cut short when her father arrives to take her away."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 495,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 6,
      "paragraph": "Lucy becomes progressively closer to a colleague, the irascible, autocratic, and male chauvinist professor, M. Paul Emanuel, a relative of Mme. Beck. Lucy and Paul eventually fall in love.",
      "question_template": "Conan does [[CANDIDATE_ANSWER]] to the innkeeper when he discovers what he's been doing.",
      "candidate_answers": [
        "Lucy becomes progressively closer to a colleague",
        "The irascible, autocratic, and male chauvinist professor, M. Paul Emanuel",
        "Lucy and Paul eventually fall in love"
      ],
      "predicates": [
        "Closer(x, y) ::: x becomes progressively closer to y.",
        "InLove(x, y) ::: x and y are in love.",
        "Irascible(x) ::: x is irascible.",
        "Autocratic(x) ::: x is autocratic.",
        "MaleChauvinist(x) ::: x is a male chauvinist.",
        "Relative(x, y) ::: x is a relative of y."
      ],
      "premises": [
        "Closer(lucy, paul) ::: Lucy becomes progressively closer to M. Paul Emanuel.",
        "Irascible(paul) ::: M. Paul Emanuel is irascible.",
        "Autocratic(paul) ::: M. Paul Emanuel is autocratic.",
        "MaleChauvinist(paul) ::: M. Paul Emanuel is a male chauvinist.",
        "Relative(paul, beck) ::: M. Paul Emanuel is a relative of Mme. Beck.",
        "InLove(lucy, paul) ::: Lucy and M. Paul Emanuel eventually fall in love."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "496": [
    {
      "id": 496,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 7,
      "paragraph": "However, a group of conspiring antagonists, including Mme. Beck, the priest Père Silas, and the relatives of M. Paul's long-dead fiancée, work to keep the two apart. They finally succeed in forcing M. Paul's departure for the West Indies to oversee a plantation there. He nonetheless declares his love for Lucy before his departure and arranges for her to live independently as the headmistress of her own day school, which she later expands into a pensionnat (boarding school).",
      "question_template": "Conan reveals [[CANDIDATE_ANSWER]] to the readers.",
      "candidate_answers": [
        "The West Indies"
      ],
      "predicates": [
        "Antagonists(x) ::: x is a group of conspiring antagonists.",
        "KeepsApart(x, y) ::: x keeps y apart from z.",
        "DeclaresLove(x, y) ::: x declares love for y.",
        "Arranges(x, y, z) ::: x arranges for y to do z.",
        "Headmistress(x) ::: x is a headmistress.",
        "Pensionnat(x) ::: x is a boarding school."
      ],
      "premises": [
        "Antagonists(group) ::: A group of conspiring antagonists exists.",
        "KeepsApart(group, mPaul) ∧ KeepsApart(group, lucy) ::: The group of antagonists keeps M. Paul and Lucy apart.",
        "DeclaresLove(mPaul, lucy) ::: M. Paul declares his love for Lucy before his departure.",
        "Arranges(mPaul, lucy, liveIndependently) ::: M. Paul arranges for Lucy to live independently as the headmistress of her own day school.",
        "Headmistress(lucy) ::: Lucy is the headmistress of her own day school.",
        "Pensionnat(expandedSchool) ::: Lucy later expands her day school into a pensionnat (boarding school)."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 496,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 9,
      "paragraph": "Villette's final pages are ambiguous. Although Lucy says that she wants to leave the reader free to imagine a happy ending, she hints strongly that M. Paul's ship was destroyed by a storm during his return journey from the West Indies. She says that, \"M. Emanuel was away three years. Reader, they were the three happiest years of my life.\" This passage suggests that he was drowned by the \"destroying angel of tempest.\"",
      "question_template": "Conan reveals [[CANDIDATE_ANSWER]] to the readers.",
      "candidate_answers": [
        "West Indies"
      ],
      "predicates": [
        "Ambiguous(x) ::: x is ambiguous.",
        "Hints(x, y) ::: x hints strongly that y is true.",
        "WantsFreeEnding(x) ::: x wants to leave the reader free to imagine a happy ending.",
        "Drowned(x) ::: x was drowned.",
        "DestroyedByStorm(x) ::: x was destroyed by a storm.",
        "HappiestYears(x, y) ::: x had the happiest years of y's life."
      ],
      "premises": [
        "Ambiguous(villette) ::: Villette's final pages are ambiguous.",
        "WantsFreeEnding(lucy) ::: Lucy says that she wants to leave the reader free to imagine a happy ending.",
        "Hints(lucy, destroyedByStorm(mPaulShip)) ::: Lucy hints strongly that M. Paul's ship was destroyed by a storm during his return journey from the West Indies.",
        "Hints(lucy, drowned(mEmanuel)) ::: Lucy hints strongly that M. Emanuel was drowned.",
        "HappiestYears(mEmanuel, 3) ::: M. Emanuel was away three years, which were the three happiest years of Lucy's life."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "497": [
    {
      "id": 497,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 2,
      "paragraph": "During an evening of dramatic weather changes, Miss Marchmont regains all her energy and feels young again. She shares with Lucy her sad love story of 30 years previously, and concludes that she should treat Lucy better and be a better person. She believes that death will reunite her with her dead lover. The next morning, Lucy finds Miss Marchmont dead.",
      "question_template": "Conan stole [[CANDIDATE_ANSWER]] from Jungir during their first encounter.",
      "candidate_answers": [
        "Miss Marchmont dead"
      ],
      "predicates": [
        "RegainsEnergy(a_0) ::: Miss Marchmont regains all her energy.",
        "FeelsYoung(a_0) ::: Miss Marchmont feels young again.",
        "Shares(a_0, a_1) ::: Miss Marchmont shares her story with Lucy.",
        "SadLoveStory(a_0) ::: Miss Marchmont shares her sad love story.",
        "TreatBetter(a_0) ::: Miss Marchmont concludes that she should treat Lucy better.",
        "Believes(a_0, b_0) ::: Miss Marchmont believes that death will reunite her with her dead lover.",
        "Finds(a_1, a_0) ::: Lucy finds Miss Marchmont dead.",
        "Dead(a_0) ::: Miss Marchmont is dead."
      ],
      "premises": [
        "RegainsEnergy(a_0) ∧ FeelsYoung(a_0) ::: During an evening of dramatic weather changes, Miss Marchmont regains all her energy and feels young again.",
        "Shares(a_0, a_1) ∧ SadLoveStory(a_0) ::: She shares with Lucy her sad love story of 30 years previously.",
        "TreatBetter(a_0) ::: She concludes that she should treat Lucy better and be a better person.",
        "Believes(a_0, b_0) ::: She believes that death will reunite her with her dead lover.",
        "Finds(a_1, a_0) ∧ Dead(a_0) ::: The next morning, Lucy finds Miss Marchmont dead.",
        "¬(Dead(a_0) ∧ (TreatBetter(a_0) ∧ Believes(a_0, b_0))) ::: Miss Marchmont's death occurs after she expresses her beliefs and conclusions."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 497,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 10,
      "paragraph": "Brontë described the ambiguity of the ending as a \"little puzzle.\"",
      "question_template": "Conan stole [[CANDIDATE_ANSWER]] from Jungir during their first encounter.",
      "candidate_answers": [
        "Lucy discovers a \"little puzzle.\""
      ],
      "predicates": [
        "Describes(x, y) ::: x describes the concept y.",
        "IsAmbiguous(y) ::: y is ambiguous.",
        "IsPuzzle(y) ::: y is a puzzle."
      ],
      "premises": [
        "Describes(a_1, b_1) ::: Brontë described the ambiguity of the ending.",
        "IsAmbiguous(b_1) ::: The ambiguity of the ending is ambiguous.",
        "IsPuzzle(b_2) ::: The little puzzle is a puzzle."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "498": [
    {
      "id": 498,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 8,
      "paragraph": "During the course of the novel, Lucy has three encounters with the figure of a nun — which may be the ghost of a nun who was buried alive on the school's grounds as punishment for breaking her vow of chastity. In a highly symbolic scene near the end of the novel, she discovers the \"nun's\" habit in her bed and destroys it. She later finds out that it was a disguise worn by Ginevra's amour, Alfred de Hamal. The episodes with the nun no doubt contributed substantially to the novel's reputation as a gothic novel.",
      "question_template": "The woman is forced to [[CANDIDATE_ANSWER]] by the high priest.",
      "candidate_answers": [
        "three encounters with the figure of a nun"
      ],
      "predicates": [
        "Encounter(x, y) ::: x has an encounter with y.",
        "Ghost(x) ::: x is a ghost.",
        "BuriedAlive(x) ::: x was buried alive.",
        "VowOfChastity(x) ::: x has broken a vow of chastity.",
        "SymbolicScene(x) ::: x is a highly symbolic scene.",
        "DestroysHabit(x) ::: x destroys the \"nun's\" habit.",
        "Disguise(x, y) ::: x is a disguise worn by y.",
        "ContributesToReputation(x, y) ::: x contributes substantially to the reputation of y.",
        "GothicNovel(x) ::: x is a gothic novel."
      ],
      "premises": [
        "∀x (Encounter(Lucy, x) ∧ Ghost(x) â§ BuriedAlive(x) â§ VowOfChastity(x)) ::: The figure of a nun is linked to the ghost of a nun buried alive for breaking her vow of chastity.",
        "SymbolicScene(nearEnd) ∧ DestroysHabit(Lucy) ::: Lucy’s actions regarding the \"nun's\" habit are significant to the plot.",
        "ContributesToReputation(episodesWithNun, gothicNovel) ::: The episodes with the nun contribute substantially to the novel's reputation as a gothic novel."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "499": [
    {
      "id": 499,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 3,
      "paragraph": "Lucy then leaves the English countryside and goes to London. At the age of 23, she boards a ship for Labassecour despite knowing very little French. She travels to the city of Villette, where she finds employment as a bonne (nanny) at Mme. Beck's boarding school for girls. (This school is seen as being based upon the Hégers' Brussels pensionnat). After a time, she is hired to teach English at the school, in addition to having to mind Mme. Beck's three children. She thrives despite Mme. Beck's constant surveillance of the staff and students.",
      "question_template": "Conan is going to [[CANDIDATE_ANSWER]] with the magic ring now.",
      "candidate_answers": [
        "Villette"
      ],
      "predicates": [
        "Leaves(x, y) ::: x leaves location y.",
        "Boards(x, y) ::: x boards a ship for destination y.",
        "TravelsTo(x, y) ::: x travels to location y.",
        "FindsEmployment(x, y) ::: x finds employment at location y.",
        "Teaches(x, y) ::: x teaches subject y.",
        "Minds(x, y) ::: x minds y (children).",
        "Thrives(x) ::: x thrives in the given situation.",
        "Surveillance(x, y) ::: x conducts surveillance on y."
      ],
      "premises": [
        "Leaves(a_0, English countryside) ::: Lucy leaves the English countryside.",
        "Boards(a_0, Labassecour) ::: Lucy boards a ship for Labassecour.",
        "TravelsTo(a_0, Villette) ::: Lucy travels to the city of Villette.",
        "FindsEmployment(a_0, Mme_Beck's_boarding_school) ::: Lucy finds employment as a bonne at Mme. Beck's boarding school for girls.",
        "Teaches(a_0, English) ::: Lucy is hired to teach English at the school.",
        "Minds(a_0, Mme_Beck's_children) ::: Lucy has to mind Mme. Beck's three children.",
        "Thrives(a_0) ::: Lucy thrives despite the situation.",
        "Surveillance(Mme_Beck, staff_and_students) ::: Mme. Beck conducts constant surveillance of the staff and students."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 499,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 6,
      "paragraph": "Lucy becomes progressively closer to a colleague, the irascible, autocratic, and male chauvinist professor, M. Paul Emanuel, a relative of Mme. Beck. Lucy and Paul eventually fall in love.",
      "question_template": "Conan is going to [[CANDIDATE_ANSWER]] with the magic ring now.",
      "candidate_answers": [
        "Lucy becomes progressively closer to a colleague",
        "the irascible, autocratic, and male chauvinist professor, M. Paul Emanuel",
        "a relative of Mme. Beck",
        "Lucy and Paul eventually fall in love"
      ],
      "predicates": [
        "Closer(x, y) ::: x becomes progressively closer to y.",
        "InLove(x, y) ::: x and y are in love.",
        "Irascible(x) ::: x is irascible.",
        "Autocratic(x) ::: x is autocratic.",
        "MaleChauvinist(x) ::: x is a male chauvinist.",
        "Relative(x, y) ::: x is a relative of y."
      ],
      "premises": [
        "Closer(lucy, paul) ::: Lucy becomes progressively closer to M. Paul Emanuel.",
        "Irascible(paul) ::: M. Paul Emanuel is irascible.",
        "Autocratic(paul) ::: M. Paul Emanuel is autocratic.",
        "MaleChauvinist(paul) ::: M. Paul Emanuel is a male chauvinist.",
        "Relative(paul, beck) ::: M. Paul Emanuel is a relative of Mme. Beck.",
        "InLove(lucy, paul) ::: Lucy and M. Paul Emanuel eventually fall in love."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "500": [
    {
      "id": 500,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 1,
      "paragraph": "For reasons that are not stated, Lucy leaves Mrs. Bretton's home a few weeks after the Polly's departure. Some years pass, during which an unspecified family tragedy leaves Lucy without family, home, or means. After some initial hesitation, she is hired as a caregiver by Miss Marchmont, a rheumatic crippled woman. Lucy is soon accustomed to her work and has begun to feel content with her quiet lifestyle.",
      "question_template": "Nafertari has a relationship with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Lucy",
        "A caregiver by Miss Marchmont"
      ],
      "predicates": [
        "Leaves(x, y) ::: x leaves y.",
        "HiredAs(x, y) ::: x is hired as y.",
        "Content(x) ::: x feels content.",
        "Caregiver(x) ::: x is a caregiver.",
        "RheumaticCrippled(x) ::: x is a rheumatic crippled person.",
        "FamilyTragedy(x) ::: x experiences a family tragedy.",
        "HomeLess(x) ::: x is without a home.",
        "MeansLess(x) ::: x is without means."
      ],
      "premises": [
        "Leaves(lucy, mrsBretton) ::: Lucy leaves Mrs. Bretton's home a few weeks after Polly's departure.",
        "FamilyTragedy(lucy) ∧ HomeLess(lucy) ∧ MeansLess(lucy) ::: An unspecified family tragedy leaves Lucy without family, home, or means.",
        "HiredAs(lucy, caregiver) ∧ RheumaticCrippled(missMarchmont) ::: Lucy is hired as a caregiver by Miss Marchmont, a rheumatic crippled woman.",
        "Content(lucy) ::: Lucy feels content with her quiet lifestyle."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 500,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 3,
      "paragraph": "Lucy then leaves the English countryside and goes to London. At the age of 23, she boards a ship for Labassecour despite knowing very little French. She travels to the city of Villette, where she finds employment as a bonne (nanny) at Mme. Beck's boarding school for girls. (This school is seen as being based upon the Hégers' Brussels pensionnat). After a time, she is hired to teach English at the school, in addition to having to mind Mme. Beck's three children. She thrives despite Mme. Beck's constant surveillance of the staff and students.",
      "question_template": "Nafertari has a relationship with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Lucy"
      ],
      "predicates": [
        "Leaves(x, y) ::: x leaves location y.",
        "Boards(x, y) ::: x boards a ship for destination y.",
        "TravelsTo(x, y) ::: x travels to location y.",
        "FindsEmployment(x, y) ::: x finds employment at location y.",
        "Teaches(x, y) ::: x teaches subject y.",
        "Minds(x, y) ::: x minds y (children).",
        "Thrives(x) ::: x thrives in the given situation.",
        "Surveillance(x, y) ::: x conducts surveillance on y."
      ],
      "premises": [
        "Leaves(a_0, English countryside) ::: Lucy leaves the English countryside.",
        "Boards(a_0, Labassecour) ::: Lucy boards a ship for Labassecour.",
        "TravelsTo(a_0, Villette) ::: Lucy travels to the city of Villette.",
        "FindsEmployment(a_0, Mme_Beck's_boarding_school) ::: Lucy finds employment as a bonne at Mme. Beck's boarding school for girls.",
        "Teaches(a_0, English) ::: Lucy is hired to teach English at the school.",
        "Minds(a_0, Mme_Beck's_children) ::: Lucy has to mind Mme. Beck's three children.",
        "Thrives(a_0) ::: Lucy thrives despite the situation.",
        "Surveillance(Mme_Beck, staff_and_students) ::: Mme. Beck conducts constant surveillance of the staff and students."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 500,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 4,
      "paragraph": "\"Dr. John,\" a handsome English doctor, frequently visits the school because of his love for the coquette Ginevra Fanshawe. In one of Villette's famous plot twists, \"Dr. John\" is later revealed to be John Graham Bretton, a fact that Lucy has known but has deliberately concealed from the reader. After Dr. John (i.e., Graham) discovers Ginevra's unworthiness, he turns his attention to Lucy, and they become close friends. She values this friendship highly despite her usual emotional reserve.",
      "question_template": "Nafertari has a relationship with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Lucy",
        "Ginevra Fanshawe"
      ],
      "predicates": [
        "Handsome(x) ::: x is a handsome person.",
        "Doctor(x) ::: x is a doctor.",
        "Visits(x, y) ::: x frequently visits y.",
        "Loves(x, y) ::: x loves y.",
        "RevealedAs(x, y) ::: x is revealed to be y.",
        "Concealed(x, y) ::: x has concealed y from the reader.",
        "CloseFriends(x, y) ::: x and y are close friends.",
        "ValuesFriendship(x, y) ::: x values her friendship with y highly.",
        "EmotionalReserve(x) ::: x has a usual emotional reserve."
      ],
      "premises": [
        "Handsome(drJohn) ∧ Doctor(drJohn) ∧ Visits(drJohn, school) ∧ Loves(drJohn, ginevra) ::: \"Dr. John\" is a handsome English doctor who frequently visits the school because of his love for Ginevra Fanshawe.",
        "RevealedAs(drJohn, johnGrahamBretton) ∧ Concealed(lucy, revealedAs(drJohn, johnGrahamBretton)) ::: \"Dr. John\" is later revealed to be John Graham Bretton, a fact that Lucy has known but has deliberately concealed from the reader.",
        "CloseFriends(lucy, drJohn) ::: After Dr. John discovers Ginevra's unworthiness, he turns his attention to Lucy, and they become close friends.",
        "ValuesFriendship(lucy, drJohn) ∧ EmotionalReserve(lucy) ::: Lucy values her friendship with Dr. John despite her usual emotional reserve."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 500,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 5,
      "paragraph": "We meet Polly (Paulina Home) again at this point; her father has inherited the title \"de Bassompierre\" and is now a Count. Thus her name is now Paulina Home de Bassompierre. Polly and Graham soon discover that they knew each other in the past and renew their friendship. They fall in love and eventually marry.",
      "question_template": "Nafertari has a relationship with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Polly",
        "Paulina Home de Bassompierre"
      ],
      "predicates": [
        "Count(x) ::: x is a Count.",
        "InheritsTitle(x, y) ::: x inherits the title y.",
        "RenewsFriendship(x, y) ::: x renews friendship with y.",
        "FallsInLove(x, y) ::: x falls in love with y.",
        "Marries(x, y) ::: x marries y."
      ],
      "premises": [
        "InheritsTitle(father, \"de Bassompierre\") ::: Polly's father has inherited the title \"de Bassompierre\".",
        "Count(father) ::: Polly's father is now a Count.",
        "RenewsFriendship(polly, graham) ::: Polly and Graham renew their friendship.",
        "FallsInLove(polly, graham) ::: Polly and Graham fall in love.",
        "Marries(polly, graham) ::: Polly and Graham eventually marry."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 500,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 6,
      "paragraph": "Lucy becomes progressively closer to a colleague, the irascible, autocratic, and male chauvinist professor, M. Paul Emanuel, a relative of Mme. Beck. Lucy and Paul eventually fall in love.",
      "question_template": "Nafertari has a relationship with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Lucy",
        "A colleague",
        "The irascible, autocratic, and male chauvinist professor, M. Paul Emanuel",
        "A relative of Mme. Beck"
      ],
      "predicates": [
        "Closer(x, y) ::: x becomes progressively closer to y.",
        "InLove(x, y) ::: x and y are in love.",
        "Irascible(x) ::: x is irascible.",
        "Autocratic(x) ::: x is autocratic.",
        "MaleChauvinist(x) ::: x is a male chauvinist.",
        "Relative(x, y) ::: x is a relative of y."
      ],
      "premises": [
        "Closer(lucy, paul) ::: Lucy becomes progressively closer to M. Paul Emanuel.",
        "Irascible(paul) ::: M. Paul Emanuel is irascible.",
        "Autocratic(paul) ::: M. Paul Emanuel is autocratic.",
        "MaleChauvinist(paul) ::: M. Paul Emanuel is a male chauvinist.",
        "Relative(paul, beck) ::: M. Paul Emanuel is a relative of Mme. Beck.",
        "InLove(lucy, paul) ::: Lucy and M. Paul Emanuel eventually fall in love."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 500,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 7,
      "paragraph": "However, a group of conspiring antagonists, including Mme. Beck, the priest Père Silas, and the relatives of M. Paul's long-dead fiancée, work to keep the two apart. They finally succeed in forcing M. Paul's departure for the West Indies to oversee a plantation there. He nonetheless declares his love for Lucy before his departure and arranges for her to live independently as the headmistress of her own day school, which she later expands into a pensionnat (boarding school).",
      "question_template": "Nafertari has a relationship with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Lucy",
        "The headmistress of her own day school"
      ],
      "predicates": [
        "Antagonists(x) ::: x is a group of conspiring antagonists.",
        "KeepsApart(x, y) ::: x keeps y apart from z.",
        "DeclaresLove(x, y) ::: x declares love for y.",
        "Arranges(x, y, z) ::: x arranges for y to do z.",
        "Headmistress(x) ::: x is a headmistress.",
        "Pensionnat(x) ::: x is a boarding school."
      ],
      "premises": [
        "Antagonists(group) ::: A group of conspiring antagonists exists.",
        "KeepsApart(group, mPaul) ∧ KeepsApart(group, lucy) ::: The group of antagonists keeps M. Paul and Lucy apart.",
        "DeclaresLove(mPaul, lucy) ::: M. Paul declares his love for Lucy before his departure.",
        "Arranges(mPaul, lucy, liveIndependently) ::: M. Paul arranges for Lucy to live independently as the headmistress of her own day school.",
        "Headmistress(lucy) ::: Lucy is the headmistress of her own day school.",
        "Pensionnat(expandedSchool) ::: Lucy later expands her day school into a pensionnat (boarding school)."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 500,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 8,
      "paragraph": "During the course of the novel, Lucy has three encounters with the figure of a nun — which may be the ghost of a nun who was buried alive on the school's grounds as punishment for breaking her vow of chastity. In a highly symbolic scene near the end of the novel, she discovers the \"nun's\" habit in her bed and destroys it. She later finds out that it was a disguise worn by Ginevra's amour, Alfred de Hamal. The episodes with the nun no doubt contributed substantially to the novel's reputation as a gothic novel.",
      "question_template": "Nafertari has a relationship with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Ginevra's amour, Alfred de Hamal"
      ],
      "predicates": [
        "Encounter(x, y) ::: x has an encounter with y.",
        "Ghost(x) ::: x is a ghost.",
        "BuriedAlive(x) ::: x was buried alive.",
        "VowOfChastity(x) ::: x has broken a vow of chastity.",
        "SymbolicScene(x) ::: x is a highly symbolic scene.",
        "DestroysHabit(x) ::: x destroys the \"nun's\" habit.",
        "Disguise(x, y) ::: x is a disguise worn by y.",
        "ContributesToReputation(x, y) ::: x contributes substantially to the reputation of y.",
        "GothicNovel(x) ::: x is a gothic novel."
      ],
      "premises": [
        "∀x (Encounter(Lucy, x) ∧ Ghost(x) â§ BuriedAlive(x) â§ VowOfChastity(x)) ::: The figure of a nun is linked to the ghost of a nun buried alive for breaking her vow of chastity.",
        "SymbolicScene(nearEnd) ∧ DestroysHabit(Lucy) ::: Lucy’s actions regarding the \"nun's\" habit are significant to the plot.",
        "ContributesToReputation(episodesWithNun, gothicNovel) ::: The episodes with the nun contribute substantially to the novel's reputation as a gothic novel."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "501": [
    {
      "id": 501,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 1,
      "paragraph": "For reasons that are not stated, Lucy leaves Mrs. Bretton's home a few weeks after the Polly's departure. Some years pass, during which an unspecified family tragedy leaves Lucy without family, home, or means. After some initial hesitation, she is hired as a caregiver by Miss Marchmont, a rheumatic crippled woman. Lucy is soon accustomed to her work and has begun to feel content with her quiet lifestyle.",
      "question_template": "[[CANDIDATE_ANSWER]] takes Polly away from Mrs. Bretton's home.",
      "candidate_answers": [
        "Mrs. Bretton",
        "Miss Marchmont"
      ],
      "predicates": [
        "Leaves(x, y) ::: x leaves y.",
        "HiredAs(x, y) ::: x is hired as y.",
        "Content(x) ::: x feels content.",
        "Caregiver(x) ::: x is a caregiver.",
        "RheumaticCrippled(x) ::: x is a rheumatic crippled person.",
        "FamilyTragedy(x) ::: x experiences a family tragedy.",
        "HomeLess(x) ::: x is without a home.",
        "MeansLess(x) ::: x is without means."
      ],
      "premises": [
        "Leaves(lucy, mrsBretton) ::: Lucy leaves Mrs. Bretton's home a few weeks after Polly's departure.",
        "FamilyTragedy(lucy) ∧ HomeLess(lucy) ∧ MeansLess(lucy) ::: An unspecified family tragedy leaves Lucy without family, home, or means.",
        "HiredAs(lucy, caregiver) ∧ RheumaticCrippled(missMarchmont) ::: Lucy is hired as a caregiver by Miss Marchmont, a rheumatic crippled woman.",
        "Content(lucy) ::: Lucy feels content with her quiet lifestyle."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 501,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 2,
      "paragraph": "During an evening of dramatic weather changes, Miss Marchmont regains all her energy and feels young again. She shares with Lucy her sad love story of 30 years previously, and concludes that she should treat Lucy better and be a better person. She believes that death will reunite her with her dead lover. The next morning, Lucy finds Miss Marchmont dead.",
      "question_template": "[[CANDIDATE_ANSWER]] takes Polly away from Mrs. Bretton's home.",
      "candidate_answers": [
        "Miss Marchmont"
      ],
      "predicates": [
        "RegainsEnergy(a_0) ::: Miss Marchmont regains all her energy.",
        "FeelsYoung(a_0) ::: Miss Marchmont feels young again.",
        "Shares(a_0, a_1) ::: Miss Marchmont shares her story with Lucy.",
        "SadLoveStory(a_0) ::: Miss Marchmont shares her sad love story.",
        "TreatBetter(a_0) ::: Miss Marchmont concludes that she should treat Lucy better.",
        "Believes(a_0, b_0) ::: Miss Marchmont believes that death will reunite her with her dead lover.",
        "Finds(a_1, a_0) ::: Lucy finds Miss Marchmont dead.",
        "Dead(a_0) ::: Miss Marchmont is dead."
      ],
      "premises": [
        "RegainsEnergy(a_0) ∧ FeelsYoung(a_0) ::: During an evening of dramatic weather changes, Miss Marchmont regains all her energy and feels young again.",
        "Shares(a_0, a_1) ∧ SadLoveStory(a_0) ::: She shares with Lucy her sad love story of 30 years previously.",
        "TreatBetter(a_0) ::: She concludes that she should treat Lucy better and be a better person.",
        "Believes(a_0, b_0) ::: She believes that death will reunite her with her dead lover.",
        "Finds(a_1, a_0) ∧ Dead(a_0) ::: The next morning, Lucy finds Miss Marchmont dead.",
        "¬(Dead(a_0) ∧ (TreatBetter(a_0) ∧ Believes(a_0, b_0))) ::: Miss Marchmont's death occurs after she expresses her beliefs and conclusions."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 501,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 6,
      "paragraph": "Lucy becomes progressively closer to a colleague, the irascible, autocratic, and male chauvinist professor, M. Paul Emanuel, a relative of Mme. Beck. Lucy and Paul eventually fall in love.",
      "question_template": "[[CANDIDATE_ANSWER]] takes Polly away from Mrs. Bretton's home.",
      "candidate_answers": [
        "Mme. Beck"
      ],
      "predicates": [
        "Closer(x, y) ::: x becomes progressively closer to y.",
        "InLove(x, y) ::: x and y are in love.",
        "Irascible(x) ::: x is irascible.",
        "Autocratic(x) ::: x is autocratic.",
        "MaleChauvinist(x) ::: x is a male chauvinist.",
        "Relative(x, y) ::: x is a relative of y."
      ],
      "premises": [
        "Closer(lucy, paul) ::: Lucy becomes progressively closer to M. Paul Emanuel.",
        "Irascible(paul) ::: M. Paul Emanuel is irascible.",
        "Autocratic(paul) ::: M. Paul Emanuel is autocratic.",
        "MaleChauvinist(paul) ::: M. Paul Emanuel is a male chauvinist.",
        "Relative(paul, beck) ::: M. Paul Emanuel is a relative of Mme. Beck.",
        "InLove(lucy, paul) ::: Lucy and M. Paul Emanuel eventually fall in love."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 501,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 7,
      "paragraph": "However, a group of conspiring antagonists, including Mme. Beck, the priest Père Silas, and the relatives of M. Paul's long-dead fiancée, work to keep the two apart. They finally succeed in forcing M. Paul's departure for the West Indies to oversee a plantation there. He nonetheless declares his love for Lucy before his departure and arranges for her to live independently as the headmistress of her own day school, which she later expands into a pensionnat (boarding school).",
      "question_template": "[[CANDIDATE_ANSWER]] takes Polly away from Mrs. Bretton's home.",
      "candidate_answers": [
        "Lucy",
        "Mme. Beck",
        "M. Paul's long-dead fiancée"
      ],
      "predicates": [
        "Antagonists(x) ::: x is a group of conspiring antagonists.",
        "KeepsApart(x, y) ::: x keeps y apart from z.",
        "DeclaresLove(x, y) ::: x declares love for y.",
        "Arranges(x, y, z) ::: x arranges for y to do z.",
        "Headmistress(x) ::: x is a headmistress.",
        "Pensionnat(x) ::: x is a boarding school."
      ],
      "premises": [
        "Antagonists(group) ::: A group of conspiring antagonists exists.",
        "KeepsApart(group, mPaul) ∧ KeepsApart(group, lucy) ::: The group of antagonists keeps M. Paul and Lucy apart.",
        "DeclaresLove(mPaul, lucy) ::: M. Paul declares his love for Lucy before his departure.",
        "Arranges(mPaul, lucy, liveIndependently) ::: M. Paul arranges for Lucy to live independently as the headmistress of her own day school.",
        "Headmistress(lucy) ::: Lucy is the headmistress of her own day school.",
        "Pensionnat(expandedSchool) ::: Lucy later expands her day school into a pensionnat (boarding school)."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "502": [
    {
      "id": 502,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 0,
      "paragraph": " Villette begins with its famously passive protagonist, Lucy Snowe, age 14, staying at the home of her godmother Mrs. Bretton in \"the clean and ancient town of Bretton\", in England. Also in residence are Mrs. Bretton's son, John Graham Bretton (whom the family calls Graham), and a young visitor, Paulina Home (who is called Polly). Polly is a peculiar little girl who soon develops a deep devotion to Graham, who showers her with attention. But Polly's visit is cut short when her father arrives to take her away.",
      "question_template": "[[CANDIDATE_ANSWER]] causes Miss Marchmont's sudden youthful energy.",
      "candidate_answers": [
        "Mrs. Bretton"
      ],
      "predicates": [
        "PassiveProtagonist(x) ::: x is a passive protagonist.",
        "Age(x, y) ::: x is of age y.",
        "StaysAt(x, y) ::: x stays at the home of y.",
        "InResidence(x, y) ::: x is in residence with y.",
        "Devotion(x, y) ::: x has a deep devotion to y.",
        "Attention(x, y) ::: x showers y with attention.",
        "TakesAway(x, y) ::: x takes y away."
      ],
      "premises": [
        "PassiveProtagonist(lucy) ∧ Age(lucy, 14) ∧ StaysAt(lucy, mrsBretton) ::: Lucy Snowe is a famously passive protagonist, age 14, staying at the home of her godmother Mrs. Bretton.",
        "InResidence(mrsBretton, johnGraham) ∧ InResidence(mrsBretton, paulina) ::: Mrs. Bretton has her son John Graham Bretton and a young visitor Paulina Home in residence.",
        "Devotion(paulina, johnGraham) ∧ Attention(johnGraham, paulina) ::: Polly develops a deep devotion to Graham, who showers her with attention.",
        "TakesAway(father, paulina) ::: Polly's visit is cut short when her father arrives to take her away."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 502,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 1,
      "paragraph": "For reasons that are not stated, Lucy leaves Mrs. Bretton's home a few weeks after the Polly's departure. Some years pass, during which an unspecified family tragedy leaves Lucy without family, home, or means. After some initial hesitation, she is hired as a caregiver by Miss Marchmont, a rheumatic crippled woman. Lucy is soon accustomed to her work and has begun to feel content with her quiet lifestyle.",
      "question_template": "[[CANDIDATE_ANSWER]] causes Miss Marchmont's sudden youthful energy.",
      "candidate_answers": [
        "Miss Marchmont, a rheumatic crippled woman"
      ],
      "predicates": [
        "Leaves(x, y) ::: x leaves y.",
        "HiredAs(x, y) ::: x is hired as y.",
        "Content(x) ::: x feels content.",
        "Caregiver(x) ::: x is a caregiver.",
        "RheumaticCrippled(x) ::: x is a rheumatic crippled person.",
        "FamilyTragedy(x) ::: x experiences a family tragedy.",
        "HomeLess(x) ::: x is without a home.",
        "MeansLess(x) ::: x is without means."
      ],
      "premises": [
        "Leaves(lucy, mrsBretton) ::: Lucy leaves Mrs. Bretton's home a few weeks after Polly's departure.",
        "FamilyTragedy(lucy) ∧ HomeLess(lucy) ∧ MeansLess(lucy) ::: An unspecified family tragedy leaves Lucy without family, home, or means.",
        "HiredAs(lucy, caregiver) ∧ RheumaticCrippled(missMarchmont) ::: Lucy is hired as a caregiver by Miss Marchmont, a rheumatic crippled woman.",
        "Content(lucy) ::: Lucy feels content with her quiet lifestyle."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 502,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 4,
      "paragraph": "\"Dr. John,\" a handsome English doctor, frequently visits the school because of his love for the coquette Ginevra Fanshawe. In one of Villette's famous plot twists, \"Dr. John\" is later revealed to be John Graham Bretton, a fact that Lucy has known but has deliberately concealed from the reader. After Dr. John (i.e., Graham) discovers Ginevra's unworthiness, he turns his attention to Lucy, and they become close friends. She values this friendship highly despite her usual emotional reserve.",
      "question_template": "[[CANDIDATE_ANSWER]] causes Miss Marchmont's sudden youthful energy.",
      "candidate_answers": [
        "Lucy has not been hired as a caregiver by anyone in the provided context."
      ],
      "predicates": [
        "Handsome(x) ::: x is a handsome person.",
        "Doctor(x) ::: x is a doctor.",
        "Visits(x, y) ::: x frequently visits y.",
        "Loves(x, y) ::: x loves y.",
        "RevealedAs(x, y) ::: x is revealed to be y.",
        "Concealed(x, y) ::: x has concealed y from the reader.",
        "CloseFriends(x, y) ::: x and y are close friends.",
        "ValuesFriendship(x, y) ::: x values her friendship with y highly.",
        "EmotionalReserve(x) ::: x has a usual emotional reserve."
      ],
      "premises": [
        "Handsome(drJohn) ∧ Doctor(drJohn) ∧ Visits(drJohn, school) ∧ Loves(drJohn, ginevra) ::: \"Dr. John\" is a handsome English doctor who frequently visits the school because of his love for Ginevra Fanshawe.",
        "RevealedAs(drJohn, johnGrahamBretton) ∧ Concealed(lucy, revealedAs(drJohn, johnGrahamBretton)) ::: \"Dr. John\" is later revealed to be John Graham Bretton, a fact that Lucy has known but has deliberately concealed from the reader.",
        "CloseFriends(lucy, drJohn) ::: After Dr. John discovers Ginevra's unworthiness, he turns his attention to Lucy, and they become close friends.",
        "ValuesFriendship(lucy, drJohn) ∧ EmotionalReserve(lucy) ::: Lucy values her friendship with Dr. John despite her usual emotional reserve."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 502,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 7,
      "paragraph": "However, a group of conspiring antagonists, including Mme. Beck, the priest Père Silas, and the relatives of M. Paul's long-dead fiancée, work to keep the two apart. They finally succeed in forcing M. Paul's departure for the West Indies to oversee a plantation there. He nonetheless declares his love for Lucy before his departure and arranges for her to live independently as the headmistress of her own day school, which she later expands into a pensionnat (boarding school).",
      "question_template": "[[CANDIDATE_ANSWER]] causes Miss Marchmont's sudden youthful energy.",
      "candidate_answers": [
        "Lucy is arranged to live independently as the headmistress of her own day school",
        "She later expands into a pensionnat"
      ],
      "predicates": [
        "Antagonists(x) ::: x is a group of conspiring antagonists.",
        "KeepsApart(x, y) ::: x keeps y apart from z.",
        "DeclaresLove(x, y) ::: x declares love for y.",
        "Arranges(x, y, z) ::: x arranges for y to do z.",
        "Headmistress(x) ::: x is a headmistress.",
        "Pensionnat(x) ::: x is a boarding school."
      ],
      "premises": [
        "Antagonists(group) ::: A group of conspiring antagonists exists.",
        "KeepsApart(group, mPaul) ∧ KeepsApart(group, lucy) ::: The group of antagonists keeps M. Paul and Lucy apart.",
        "DeclaresLove(mPaul, lucy) ::: M. Paul declares his love for Lucy before his departure.",
        "Arranges(mPaul, lucy, liveIndependently) ::: M. Paul arranges for Lucy to live independently as the headmistress of her own day school.",
        "Headmistress(lucy) ::: Lucy is the headmistress of her own day school.",
        "Pensionnat(expandedSchool) ::: Lucy later expands her day school into a pensionnat (boarding school)."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 502,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 8,
      "paragraph": "During the course of the novel, Lucy has three encounters with the figure of a nun — which may be the ghost of a nun who was buried alive on the school's grounds as punishment for breaking her vow of chastity. In a highly symbolic scene near the end of the novel, she discovers the \"nun's\" habit in her bed and destroys it. She later finds out that it was a disguise worn by Ginevra's amour, Alfred de Hamal. The episodes with the nun no doubt contributed substantially to the novel's reputation as a gothic novel.",
      "question_template": "[[CANDIDATE_ANSWER]] causes Miss Marchmont's sudden youthful energy.",
      "candidate_answers": [
        "Lucy",
        "Ginevra's amour, Alfred de Hamal"
      ],
      "predicates": [
        "Encounter(x, y) ::: x has an encounter with y.",
        "Ghost(x) ::: x is a ghost.",
        "BuriedAlive(x) ::: x was buried alive.",
        "VowOfChastity(x) ::: x has broken a vow of chastity.",
        "SymbolicScene(x) ::: x is a highly symbolic scene.",
        "DestroysHabit(x) ::: x destroys the \"nun's\" habit.",
        "Disguise(x, y) ::: x is a disguise worn by y.",
        "ContributesToReputation(x, y) ::: x contributes substantially to the reputation of y.",
        "GothicNovel(x) ::: x is a gothic novel."
      ],
      "premises": [
        "∀x (Encounter(Lucy, x) ∧ Ghost(x) â§ BuriedAlive(x) â§ VowOfChastity(x)) ::: The figure of a nun is linked to the ghost of a nun buried alive for breaking her vow of chastity.",
        "SymbolicScene(nearEnd) ∧ DestroysHabit(Lucy) ::: Lucy’s actions regarding the \"nun's\" habit are significant to the plot.",
        "ContributesToReputation(episodesWithNun, gothicNovel) ::: The episodes with the nun contribute substantially to the novel's reputation as a gothic novel."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "503": [
    {
      "id": 503,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 1,
      "paragraph": "For reasons that are not stated, Lucy leaves Mrs. Bretton's home a few weeks after the Polly's departure. Some years pass, during which an unspecified family tragedy leaves Lucy without family, home, or means. After some initial hesitation, she is hired as a caregiver by Miss Marchmont, a rheumatic crippled woman. Lucy is soon accustomed to her work and has begun to feel content with her quiet lifestyle.",
      "question_template": "M. Paul arranges for [[CANDIDATE_ANSWER]] to be Lucy's job someday.",
      "candidate_answers": [
        "Lucy is hired as a caregiver by Miss Marchmont",
        "Lucy is soon accustomed to her work and has begun to feel content with her quiet lifestyle"
      ],
      "predicates": [
        "Leaves(x, y) ::: x leaves y.",
        "HiredAs(x, y) ::: x is hired as y.",
        "Content(x) ::: x feels content.",
        "Caregiver(x) ::: x is a caregiver.",
        "RheumaticCrippled(x) ::: x is a rheumatic crippled person.",
        "FamilyTragedy(x) ::: x experiences a family tragedy.",
        "HomeLess(x) ::: x is without a home.",
        "MeansLess(x) ::: x is without means."
      ],
      "premises": [
        "Leaves(lucy, mrsBretton) ::: Lucy leaves Mrs. Bretton's home a few weeks after Polly's departure.",
        "FamilyTragedy(lucy) ∧ HomeLess(lucy) ∧ MeansLess(lucy) ::: An unspecified family tragedy leaves Lucy without family, home, or means.",
        "HiredAs(lucy, caregiver) ∧ RheumaticCrippled(missMarchmont) ::: Lucy is hired as a caregiver by Miss Marchmont, a rheumatic crippled woman.",
        "Content(lucy) ::: Lucy feels content with her quiet lifestyle."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 503,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 3,
      "paragraph": "Lucy then leaves the English countryside and goes to London. At the age of 23, she boards a ship for Labassecour despite knowing very little French. She travels to the city of Villette, where she finds employment as a bonne (nanny) at Mme. Beck's boarding school for girls. (This school is seen as being based upon the Hégers' Brussels pensionnat). After a time, she is hired to teach English at the school, in addition to having to mind Mme. Beck's three children. She thrives despite Mme. Beck's constant surveillance of the staff and students.",
      "question_template": "M. Paul arranges for [[CANDIDATE_ANSWER]] to be Lucy's job someday.",
      "candidate_answers": [
        "She finds employment as a bonne at Mme. Beck's boarding school for girls.",
        "She is hired to teach English at the school."
      ],
      "predicates": [
        "Leaves(x, y) ::: x leaves location y.",
        "Boards(x, y) ::: x boards a ship for destination y.",
        "TravelsTo(x, y) ::: x travels to location y.",
        "FindsEmployment(x, y) ::: x finds employment at location y.",
        "Teaches(x, y) ::: x teaches subject y.",
        "Minds(x, y) ::: x minds y (children).",
        "Thrives(x) ::: x thrives in the given situation.",
        "Surveillance(x, y) ::: x conducts surveillance on y."
      ],
      "premises": [
        "Leaves(a_0, English countryside) ::: Lucy leaves the English countryside.",
        "Boards(a_0, Labassecour) ::: Lucy boards a ship for Labassecour.",
        "TravelsTo(a_0, Villette) ::: Lucy travels to the city of Villette.",
        "FindsEmployment(a_0, Mme_Beck's_boarding_school) ::: Lucy finds employment as a bonne at Mme. Beck's boarding school for girls.",
        "Teaches(a_0, English) ::: Lucy is hired to teach English at the school.",
        "Minds(a_0, Mme_Beck's_children) ::: Lucy has to mind Mme. Beck's three children.",
        "Thrives(a_0) ::: Lucy thrives despite the situation.",
        "Surveillance(Mme_Beck, staff_and_students) ::: Mme. Beck conducts constant surveillance of the staff and students."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 503,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 6,
      "paragraph": "Lucy becomes progressively closer to a colleague, the irascible, autocratic, and male chauvinist professor, M. Paul Emanuel, a relative of Mme. Beck. Lucy and Paul eventually fall in love.",
      "question_template": "M. Paul arranges for [[CANDIDATE_ANSWER]] to be Lucy's job someday.",
      "candidate_answers": [
        "Lucy becomes progressively closer to a colleague",
        "The irascible, autocratic, and male chauvinist professor, M. Paul Emanuel",
        "Lucy and Paul eventually fall in love"
      ],
      "predicates": [
        "Closer(x, y) ::: x becomes progressively closer to y.",
        "InLove(x, y) ::: x and y are in love.",
        "Irascible(x) ::: x is irascible.",
        "Autocratic(x) ::: x is autocratic.",
        "MaleChauvinist(x) ::: x is a male chauvinist.",
        "Relative(x, y) ::: x is a relative of y."
      ],
      "premises": [
        "Closer(lucy, paul) ::: Lucy becomes progressively closer to M. Paul Emanuel.",
        "Irascible(paul) ::: M. Paul Emanuel is irascible.",
        "Autocratic(paul) ::: M. Paul Emanuel is autocratic.",
        "MaleChauvinist(paul) ::: M. Paul Emanuel is a male chauvinist.",
        "Relative(paul, beck) ::: M. Paul Emanuel is a relative of Mme. Beck.",
        "InLove(lucy, paul) ::: Lucy and M. Paul Emanuel eventually fall in love."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 503,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 7,
      "paragraph": "However, a group of conspiring antagonists, including Mme. Beck, the priest Père Silas, and the relatives of M. Paul's long-dead fiancée, work to keep the two apart. They finally succeed in forcing M. Paul's departure for the West Indies to oversee a plantation there. He nonetheless declares his love for Lucy before his departure and arranges for her to live independently as the headmistress of her own day school, which she later expands into a pensionnat (boarding school).",
      "question_template": "M. Paul arranges for [[CANDIDATE_ANSWER]] to be Lucy's job someday.",
      "candidate_answers": [
        "Headmistress of her own day school",
        "Expands into a pensionnat"
      ],
      "predicates": [
        "Antagonists(x) ::: x is a group of conspiring antagonists.",
        "KeepsApart(x, y) ::: x keeps y apart from z.",
        "DeclaresLove(x, y) ::: x declares love for y.",
        "Arranges(x, y, z) ::: x arranges for y to do z.",
        "Headmistress(x) ::: x is a headmistress.",
        "Pensionnat(x) ::: x is a boarding school."
      ],
      "premises": [
        "Antagonists(group) ::: A group of conspiring antagonists exists.",
        "KeepsApart(group, mPaul) ∧ KeepsApart(group, lucy) ::: The group of antagonists keeps M. Paul and Lucy apart.",
        "DeclaresLove(mPaul, lucy) ::: M. Paul declares his love for Lucy before his departure.",
        "Arranges(mPaul, lucy, liveIndependently) ::: M. Paul arranges for Lucy to live independently as the headmistress of her own day school.",
        "Headmistress(lucy) ::: Lucy is the headmistress of her own day school.",
        "Pensionnat(expandedSchool) ::: Lucy later expands her day school into a pensionnat (boarding school)."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "505": [
    {
      "id": 505,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 1,
      "paragraph": "For reasons that are not stated, Lucy leaves Mrs. Bretton's home a few weeks after the Polly's departure. Some years pass, during which an unspecified family tragedy leaves Lucy without family, home, or means. After some initial hesitation, she is hired as a caregiver by Miss Marchmont, a rheumatic crippled woman. Lucy is soon accustomed to her work and has begun to feel content with her quiet lifestyle.",
      "question_template": "Dr. John turns out to be [[CANDIDATE_ANSWER]] from Lucy's past.",
      "candidate_answers": [
        "Lucy",
        "Miss Marchmont, a rheumatic crippled woman"
      ],
      "predicates": [
        "Leaves(x, y) ::: x leaves y.",
        "HiredAs(x, y) ::: x is hired as y.",
        "Content(x) ::: x feels content.",
        "Caregiver(x) ::: x is a caregiver.",
        "RheumaticCrippled(x) ::: x is a rheumatic crippled person.",
        "FamilyTragedy(x) ::: x experiences a family tragedy.",
        "HomeLess(x) ::: x is without a home.",
        "MeansLess(x) ::: x is without means."
      ],
      "premises": [
        "Leaves(lucy, mrsBretton) ::: Lucy leaves Mrs. Bretton's home a few weeks after Polly's departure.",
        "FamilyTragedy(lucy) ∧ HomeLess(lucy) ∧ MeansLess(lucy) ::: An unspecified family tragedy leaves Lucy without family, home, or means.",
        "HiredAs(lucy, caregiver) ∧ RheumaticCrippled(missMarchmont) ::: Lucy is hired as a caregiver by Miss Marchmont, a rheumatic crippled woman.",
        "Content(lucy) ::: Lucy feels content with her quiet lifestyle."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 505,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 4,
      "paragraph": "\"Dr. John,\" a handsome English doctor, frequently visits the school because of his love for the coquette Ginevra Fanshawe. In one of Villette's famous plot twists, \"Dr. John\" is later revealed to be John Graham Bretton, a fact that Lucy has known but has deliberately concealed from the reader. After Dr. John (i.e., Graham) discovers Ginevra's unworthiness, he turns his attention to Lucy, and they become close friends. She values this friendship highly despite her usual emotional reserve.",
      "question_template": "Dr. John turns out to be [[CANDIDATE_ANSWER]] from Lucy's past.",
      "candidate_answers": [
        "Ginevra Fanshawe",
        "Lucy"
      ],
      "predicates": [
        "Handsome(x) ::: x is a handsome person.",
        "Doctor(x) ::: x is a doctor.",
        "Visits(x, y) ::: x frequently visits y.",
        "Loves(x, y) ::: x loves y.",
        "RevealedAs(x, y) ::: x is revealed to be y.",
        "Concealed(x, y) ::: x has concealed y from the reader.",
        "CloseFriends(x, y) ::: x and y are close friends.",
        "ValuesFriendship(x, y) ::: x values her friendship with y highly.",
        "EmotionalReserve(x) ::: x has a usual emotional reserve."
      ],
      "premises": [
        "Handsome(drJohn) ∧ Doctor(drJohn) ∧ Visits(drJohn, school) ∧ Loves(drJohn, ginevra) ::: \"Dr. John\" is a handsome English doctor who frequently visits the school because of his love for Ginevra Fanshawe.",
        "RevealedAs(drJohn, johnGrahamBretton) ∧ Concealed(lucy, revealedAs(drJohn, johnGrahamBretton)) ::: \"Dr. John\" is later revealed to be John Graham Bretton, a fact that Lucy has known but has deliberately concealed from the reader.",
        "CloseFriends(lucy, drJohn) ::: After Dr. John discovers Ginevra's unworthiness, he turns his attention to Lucy, and they become close friends.",
        "ValuesFriendship(lucy, drJohn) ∧ EmotionalReserve(lucy) ::: Lucy values her friendship with Dr. John despite her usual emotional reserve."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 505,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 6,
      "paragraph": "Lucy becomes progressively closer to a colleague, the irascible, autocratic, and male chauvinist professor, M. Paul Emanuel, a relative of Mme. Beck. Lucy and Paul eventually fall in love.",
      "question_template": "Dr. John turns out to be [[CANDIDATE_ANSWER]] from Lucy's past.",
      "candidate_answers": [
        "Lucy",
        "A colleague",
        "The irascible, autocratic, and male chauvinist professor, M. Paul Emanuel",
        "A relative of Mme. Beck",
        "Lucy and Paul eventually fall in love"
      ],
      "predicates": [
        "Closer(x, y) ::: x becomes progressively closer to y.",
        "InLove(x, y) ::: x and y are in love.",
        "Irascible(x) ::: x is irascible.",
        "Autocratic(x) ::: x is autocratic.",
        "MaleChauvinist(x) ::: x is a male chauvinist.",
        "Relative(x, y) ::: x is a relative of y."
      ],
      "premises": [
        "Closer(lucy, paul) ::: Lucy becomes progressively closer to M. Paul Emanuel.",
        "Irascible(paul) ::: M. Paul Emanuel is irascible.",
        "Autocratic(paul) ::: M. Paul Emanuel is autocratic.",
        "MaleChauvinist(paul) ::: M. Paul Emanuel is a male chauvinist.",
        "Relative(paul, beck) ::: M. Paul Emanuel is a relative of Mme. Beck.",
        "InLove(lucy, paul) ::: Lucy and M. Paul Emanuel eventually fall in love."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 505,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 7,
      "paragraph": "However, a group of conspiring antagonists, including Mme. Beck, the priest Père Silas, and the relatives of M. Paul's long-dead fiancée, work to keep the two apart. They finally succeed in forcing M. Paul's departure for the West Indies to oversee a plantation there. He nonetheless declares his love for Lucy before his departure and arranges for her to live independently as the headmistress of her own day school, which she later expands into a pensionnat (boarding school).",
      "question_template": "Dr. John turns out to be [[CANDIDATE_ANSWER]] from Lucy's past.",
      "candidate_answers": [
        "Lucy",
        "The headmistress of her own day school"
      ],
      "predicates": [
        "Antagonists(x) ::: x is a group of conspiring antagonists.",
        "KeepsApart(x, y) ::: x keeps y apart from z.",
        "DeclaresLove(x, y) ::: x declares love for y.",
        "Arranges(x, y, z) ::: x arranges for y to do z.",
        "Headmistress(x) ::: x is a headmistress.",
        "Pensionnat(x) ::: x is a boarding school."
      ],
      "premises": [
        "Antagonists(group) ::: A group of conspiring antagonists exists.",
        "KeepsApart(group, mPaul) ∧ KeepsApart(group, lucy) ::: The group of antagonists keeps M. Paul and Lucy apart.",
        "DeclaresLove(mPaul, lucy) ::: M. Paul declares his love for Lucy before his departure.",
        "Arranges(mPaul, lucy, liveIndependently) ::: M. Paul arranges for Lucy to live independently as the headmistress of her own day school.",
        "Headmistress(lucy) ::: Lucy is the headmistress of her own day school.",
        "Pensionnat(expandedSchool) ::: Lucy later expands her day school into a pensionnat (boarding school)."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "506": [
    {
      "id": 506,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 0,
      "paragraph": " Villette begins with its famously passive protagonist, Lucy Snowe, age 14, staying at the home of her godmother Mrs. Bretton in \"the clean and ancient town of Bretton\", in England. Also in residence are Mrs. Bretton's son, John Graham Bretton (whom the family calls Graham), and a young visitor, Paulina Home (who is called Polly). Polly is a peculiar little girl who soon develops a deep devotion to Graham, who showers her with attention. But Polly's visit is cut short when her father arrives to take her away.",
      "question_template": "M. Paul is sent to run a plantation in [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Lucy Snowe",
        "John Graham Bretton",
        "Paulina Home"
      ],
      "predicates": [
        "PassiveProtagonist(x) ::: x is a passive protagonist.",
        "Age(x, y) ::: x is of age y.",
        "StaysAt(x, y) ::: x stays at the home of y.",
        "InResidence(x, y) ::: x is in residence with y.",
        "Devotion(x, y) ::: x has a deep devotion to y.",
        "Attention(x, y) ::: x showers y with attention.",
        "TakesAway(x, y) ::: x takes y away."
      ],
      "premises": [
        "PassiveProtagonist(lucy) ∧ Age(lucy, 14) ∧ StaysAt(lucy, mrsBretton) ::: Lucy Snowe is a famously passive protagonist, age 14, staying at the home of her godmother Mrs. Bretton.",
        "InResidence(mrsBretton, johnGraham) ∧ InResidence(mrsBretton, paulina) ::: Mrs. Bretton has her son John Graham Bretton and a young visitor Paulina Home in residence.",
        "Devotion(paulina, johnGraham) ∧ Attention(johnGraham, paulina) ::: Polly develops a deep devotion to Graham, who showers her with attention.",
        "TakesAway(father, paulina) ::: Polly's visit is cut short when her father arrives to take her away."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 506,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 4,
      "paragraph": "\"Dr. John,\" a handsome English doctor, frequently visits the school because of his love for the coquette Ginevra Fanshawe. In one of Villette's famous plot twists, \"Dr. John\" is later revealed to be John Graham Bretton, a fact that Lucy has known but has deliberately concealed from the reader. After Dr. John (i.e., Graham) discovers Ginevra's unworthiness, he turns his attention to Lucy, and they become close friends. She values this friendship highly despite her usual emotional reserve.",
      "question_template": "M. Paul is sent to run a plantation in [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Ginevra Fanshawe",
        "John Graham Bretton",
        "Dr. John",
        "Lucy values this friendship highly"
      ],
      "predicates": [
        "Handsome(x) ::: x is a handsome person.",
        "Doctor(x) ::: x is a doctor.",
        "Visits(x, y) ::: x frequently visits y.",
        "Loves(x, y) ::: x loves y.",
        "RevealedAs(x, y) ::: x is revealed to be y.",
        "Concealed(x, y) ::: x has concealed y from the reader.",
        "CloseFriends(x, y) ::: x and y are close friends.",
        "ValuesFriendship(x, y) ::: x values her friendship with y highly.",
        "EmotionalReserve(x) ::: x has a usual emotional reserve."
      ],
      "premises": [
        "Handsome(drJohn) ∧ Doctor(drJohn) ∧ Visits(drJohn, school) ∧ Loves(drJohn, ginevra) ::: \"Dr. John\" is a handsome English doctor who frequently visits the school because of his love for Ginevra Fanshawe.",
        "RevealedAs(drJohn, johnGrahamBretton) ∧ Concealed(lucy, revealedAs(drJohn, johnGrahamBretton)) ::: \"Dr. John\" is later revealed to be John Graham Bretton, a fact that Lucy has known but has deliberately concealed from the reader.",
        "CloseFriends(lucy, drJohn) ::: After Dr. John discovers Ginevra's unworthiness, he turns his attention to Lucy, and they become close friends.",
        "ValuesFriendship(lucy, drJohn) ∧ EmotionalReserve(lucy) ::: Lucy values her friendship with Dr. John despite her usual emotional reserve."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 506,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 5,
      "paragraph": "We meet Polly (Paulina Home) again at this point; her father has inherited the title \"de Bassompierre\" and is now a Count. Thus her name is now Paulina Home de Bassompierre. Polly and Graham soon discover that they knew each other in the past and renew their friendship. They fall in love and eventually marry.",
      "question_template": "M. Paul is sent to run a plantation in [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Polly and Graham",
        "They fall in love and eventually marry"
      ],
      "predicates": [
        "Count(x) ::: x is a Count.",
        "InheritsTitle(x, y) ::: x inherits the title y.",
        "RenewsFriendship(x, y) ::: x renews friendship with y.",
        "FallsInLove(x, y) ::: x falls in love with y.",
        "Marries(x, y) ::: x marries y."
      ],
      "premises": [
        "InheritsTitle(father, \"de Bassompierre\") ::: Polly's father has inherited the title \"de Bassompierre\".",
        "Count(father) ::: Polly's father is now a Count.",
        "RenewsFriendship(polly, graham) ::: Polly and Graham renew their friendship.",
        "FallsInLove(polly, graham) ::: Polly and Graham fall in love.",
        "Marries(polly, graham) ::: Polly and Graham eventually marry."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 506,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 7,
      "paragraph": "However, a group of conspiring antagonists, including Mme. Beck, the priest Père Silas, and the relatives of M. Paul's long-dead fiancée, work to keep the two apart. They finally succeed in forcing M. Paul's departure for the West Indies to oversee a plantation there. He nonetheless declares his love for Lucy before his departure and arranges for her to live independently as the headmistress of her own day school, which she later expands into a pensionnat (boarding school).",
      "question_template": "M. Paul is sent to run a plantation in [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Lucy",
        "M. Paul",
        "M. Paul's long-dead fiancée"
      ],
      "predicates": [
        "Antagonists(x) ::: x is a group of conspiring antagonists.",
        "KeepsApart(x, y) ::: x keeps y apart from z.",
        "DeclaresLove(x, y) ::: x declares love for y.",
        "Arranges(x, y, z) ::: x arranges for y to do z.",
        "Headmistress(x) ::: x is a headmistress.",
        "Pensionnat(x) ::: x is a boarding school."
      ],
      "premises": [
        "Antagonists(group) ::: A group of conspiring antagonists exists.",
        "KeepsApart(group, mPaul) ∧ KeepsApart(group, lucy) ::: The group of antagonists keeps M. Paul and Lucy apart.",
        "DeclaresLove(mPaul, lucy) ::: M. Paul declares his love for Lucy before his departure.",
        "Arranges(mPaul, lucy, liveIndependently) ::: M. Paul arranges for Lucy to live independently as the headmistress of her own day school.",
        "Headmistress(lucy) ::: Lucy is the headmistress of her own day school.",
        "Pensionnat(expandedSchool) ::: Lucy later expands her day school into a pensionnat (boarding school)."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 506,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 8,
      "paragraph": "During the course of the novel, Lucy has three encounters with the figure of a nun — which may be the ghost of a nun who was buried alive on the school's grounds as punishment for breaking her vow of chastity. In a highly symbolic scene near the end of the novel, she discovers the \"nun's\" habit in her bed and destroys it. She later finds out that it was a disguise worn by Ginevra's amour, Alfred de Hamal. The episodes with the nun no doubt contributed substantially to the novel's reputation as a gothic novel.",
      "question_template": "M. Paul is sent to run a plantation in [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Ginevra's amour, Alfred de Hamal"
      ],
      "predicates": [
        "Encounter(x, y) ::: x has an encounter with y.",
        "Ghost(x) ::: x is a ghost.",
        "BuriedAlive(x) ::: x was buried alive.",
        "VowOfChastity(x) ::: x has broken a vow of chastity.",
        "SymbolicScene(x) ::: x is a highly symbolic scene.",
        "DestroysHabit(x) ::: x destroys the \"nun's\" habit.",
        "Disguise(x, y) ::: x is a disguise worn by y.",
        "ContributesToReputation(x, y) ::: x contributes substantially to the reputation of y.",
        "GothicNovel(x) ::: x is a gothic novel."
      ],
      "premises": [
        "∀x (Encounter(Lucy, x) ∧ Ghost(x) â§ BuriedAlive(x) â§ VowOfChastity(x)) ::: The figure of a nun is linked to the ghost of a nun buried alive for breaking her vow of chastity.",
        "SymbolicScene(nearEnd) ∧ DestroysHabit(Lucy) ::: Lucy’s actions regarding the \"nun's\" habit are significant to the plot.",
        "ContributesToReputation(episodesWithNun, gothicNovel) ::: The episodes with the nun contribute substantially to the novel's reputation as a gothic novel."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "507": [
    {
      "id": 507,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 6,
      "paragraph": "Lucy becomes progressively closer to a colleague, the irascible, autocratic, and male chauvinist professor, M. Paul Emanuel, a relative of Mme. Beck. Lucy and Paul eventually fall in love.",
      "question_template": "Lucy discovers [[CANDIDATE_ANSWER]] in her bed.",
      "candidate_answers": [
        "Lucy becomes progressively closer to a colleague",
        "The irascible, autocratic, and male chauvinist professor, M. Paul Emanuel",
        "Lucy and Paul eventually fall in love"
      ],
      "predicates": [
        "Closer(x, y) ::: x becomes progressively closer to y.",
        "InLove(x, y) ::: x and y are in love.",
        "Irascible(x) ::: x is irascible.",
        "Autocratic(x) ::: x is autocratic.",
        "MaleChauvinist(x) ::: x is a male chauvinist.",
        "Relative(x, y) ::: x is a relative of y."
      ],
      "premises": [
        "Closer(lucy, paul) ::: Lucy becomes progressively closer to M. Paul Emanuel.",
        "Irascible(paul) ::: M. Paul Emanuel is irascible.",
        "Autocratic(paul) ::: M. Paul Emanuel is autocratic.",
        "MaleChauvinist(paul) ::: M. Paul Emanuel is a male chauvinist.",
        "Relative(paul, beck) ::: M. Paul Emanuel is a relative of Mme. Beck.",
        "InLove(lucy, paul) ::: Lucy and M. Paul Emanuel eventually fall in love."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 507,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 7,
      "paragraph": "However, a group of conspiring antagonists, including Mme. Beck, the priest Père Silas, and the relatives of M. Paul's long-dead fiancée, work to keep the two apart. They finally succeed in forcing M. Paul's departure for the West Indies to oversee a plantation there. He nonetheless declares his love for Lucy before his departure and arranges for her to live independently as the headmistress of her own day school, which she later expands into a pensionnat (boarding school).",
      "question_template": "Lucy discovers [[CANDIDATE_ANSWER]] in her bed.",
      "candidate_answers": [
        "A group of conspiring antagonists",
        "Mme. Beck, the priest Père Silas, and the relatives of M. Paul's long-dead fiancée",
        "They finally succeed in forcing M. Paul's departure for the West Indies"
      ],
      "predicates": [
        "Antagonists(x) ::: x is a group of conspiring antagonists.",
        "KeepsApart(x, y) ::: x keeps y apart from z.",
        "DeclaresLove(x, y) ::: x declares love for y.",
        "Arranges(x, y, z) ::: x arranges for y to do z.",
        "Headmistress(x) ::: x is a headmistress.",
        "Pensionnat(x) ::: x is a boarding school."
      ],
      "premises": [
        "Antagonists(group) ::: A group of conspiring antagonists exists.",
        "KeepsApart(group, mPaul) ∧ KeepsApart(group, lucy) ::: The group of antagonists keeps M. Paul and Lucy apart.",
        "DeclaresLove(mPaul, lucy) ::: M. Paul declares his love for Lucy before his departure.",
        "Arranges(mPaul, lucy, liveIndependently) ::: M. Paul arranges for Lucy to live independently as the headmistress of her own day school.",
        "Headmistress(lucy) ::: Lucy is the headmistress of her own day school.",
        "Pensionnat(expandedSchool) ::: Lucy later expands her day school into a pensionnat (boarding school)."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "508": [
    {
      "id": 508,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 0,
      "paragraph": " Villette begins with its famously passive protagonist, Lucy Snowe, age 14, staying at the home of her godmother Mrs. Bretton in \"the clean and ancient town of Bretton\", in England. Also in residence are Mrs. Bretton's son, John Graham Bretton (whom the family calls Graham), and a young visitor, Paulina Home (who is called Polly). Polly is a peculiar little girl who soon develops a deep devotion to Graham, who showers her with attention. But Polly's visit is cut short when her father arrives to take her away.",
      "question_template": "Lucy has [[CANDIDATE_ANSWER]] encounters with the nun.",
      "candidate_answers": [
        "No relevant information found in the paragraph."
      ],
      "predicates": [
        "PassiveProtagonist(x) ::: x is a passive protagonist.",
        "Age(x, y) ::: x is of age y.",
        "StaysAt(x, y) ::: x stays at the home of y.",
        "InResidence(x, y) ::: x is in residence with y.",
        "Devotion(x, y) ::: x has a deep devotion to y.",
        "Attention(x, y) ::: x showers y with attention.",
        "TakesAway(x, y) ::: x takes y away."
      ],
      "premises": [
        "PassiveProtagonist(lucy) ∧ Age(lucy, 14) ∧ StaysAt(lucy, mrsBretton) ::: Lucy Snowe is a famously passive protagonist, age 14, staying at the home of her godmother Mrs. Bretton.",
        "InResidence(mrsBretton, johnGraham) ∧ InResidence(mrsBretton, paulina) ::: Mrs. Bretton has her son John Graham Bretton and a young visitor Paulina Home in residence.",
        "Devotion(paulina, johnGraham) ∧ Attention(johnGraham, paulina) ::: Polly develops a deep devotion to Graham, who showers her with attention.",
        "TakesAway(father, paulina) ::: Polly's visit is cut short when her father arrives to take her away."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 508,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 7,
      "paragraph": "However, a group of conspiring antagonists, including Mme. Beck, the priest Père Silas, and the relatives of M. Paul's long-dead fiancée, work to keep the two apart. They finally succeed in forcing M. Paul's departure for the West Indies to oversee a plantation there. He nonetheless declares his love for Lucy before his departure and arranges for her to live independently as the headmistress of her own day school, which she later expands into a pensionnat (boarding school).",
      "question_template": "Lucy has [[CANDIDATE_ANSWER]] encounters with the nun.",
      "candidate_answers": [
        "- Declares his love for Lucy before his departure",
        "- Arranges for her to live independently as the headmistress of her own day school"
      ],
      "predicates": [
        "Antagonists(x) ::: x is a group of conspiring antagonists.",
        "KeepsApart(x, y) ::: x keeps y apart from z.",
        "DeclaresLove(x, y) ::: x declares love for y.",
        "Arranges(x, y, z) ::: x arranges for y to do z.",
        "Headmistress(x) ::: x is a headmistress.",
        "Pensionnat(x) ::: x is a boarding school."
      ],
      "premises": [
        "Antagonists(group) ::: A group of conspiring antagonists exists.",
        "KeepsApart(group, mPaul) ∧ KeepsApart(group, lucy) ::: The group of antagonists keeps M. Paul and Lucy apart.",
        "DeclaresLove(mPaul, lucy) ::: M. Paul declares his love for Lucy before his departure.",
        "Arranges(mPaul, lucy, liveIndependently) ::: M. Paul arranges for Lucy to live independently as the headmistress of her own day school.",
        "Headmistress(lucy) ::: Lucy is the headmistress of her own day school.",
        "Pensionnat(expandedSchool) ::: Lucy later expands her day school into a pensionnat (boarding school)."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "510": [
    {
      "id": 510,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 1,
      "paragraph": "For reasons that are not stated, Lucy leaves Mrs. Bretton's home a few weeks after the Polly's departure. Some years pass, during which an unspecified family tragedy leaves Lucy without family, home, or means. After some initial hesitation, she is hired as a caregiver by Miss Marchmont, a rheumatic crippled woman. Lucy is soon accustomed to her work and has begun to feel content with her quiet lifestyle.",
      "question_template": "[[CANDIDATE_ANSWER]] eventually marries Graham.",
      "candidate_answers": [
        "Lucy leaves Mrs. Bretton's home a few weeks after Polly's departure.",
        "An unspecified family tragedy leaves Lucy without family, home, or means.",
        "She is hired as a caregiver by Miss Marchmont, a rheumatic crippled woman.",
        "Lucy is soon accustomed to her work and has begun to feel content with her quiet lifestyle."
      ],
      "predicates": [
        "Leaves(x, y) ::: x leaves y.",
        "HiredAs(x, y) ::: x is hired as y.",
        "Content(x) ::: x feels content.",
        "Caregiver(x) ::: x is a caregiver.",
        "RheumaticCrippled(x) ::: x is a rheumatic crippled person.",
        "FamilyTragedy(x) ::: x experiences a family tragedy.",
        "HomeLess(x) ::: x is without a home.",
        "MeansLess(x) ::: x is without means."
      ],
      "premises": [
        "Leaves(lucy, mrsBretton) ::: Lucy leaves Mrs. Bretton's home a few weeks after Polly's departure.",
        "FamilyTragedy(lucy) ∧ HomeLess(lucy) ∧ MeansLess(lucy) ::: An unspecified family tragedy leaves Lucy without family, home, or means.",
        "HiredAs(lucy, caregiver) ∧ RheumaticCrippled(missMarchmont) ::: Lucy is hired as a caregiver by Miss Marchmont, a rheumatic crippled woman.",
        "Content(lucy) ::: Lucy feels content with her quiet lifestyle."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 510,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 4,
      "paragraph": "\"Dr. John,\" a handsome English doctor, frequently visits the school because of his love for the coquette Ginevra Fanshawe. In one of Villette's famous plot twists, \"Dr. John\" is later revealed to be John Graham Bretton, a fact that Lucy has known but has deliberately concealed from the reader. After Dr. John (i.e., Graham) discovers Ginevra's unworthiness, he turns his attention to Lucy, and they become close friends. She values this friendship highly despite her usual emotional reserve.",
      "question_template": "[[CANDIDATE_ANSWER]] eventually marries Graham.",
      "candidate_answers": [
        "Lucy has known but has deliberately concealed from the reader.",
        "She values this friendship highly despite her usual emotional reserve."
      ],
      "predicates": [
        "Handsome(x) ::: x is a handsome person.",
        "Doctor(x) ::: x is a doctor.",
        "Visits(x, y) ::: x frequently visits y.",
        "Loves(x, y) ::: x loves y.",
        "RevealedAs(x, y) ::: x is revealed to be y.",
        "Concealed(x, y) ::: x has concealed y from the reader.",
        "CloseFriends(x, y) ::: x and y are close friends.",
        "ValuesFriendship(x, y) ::: x values her friendship with y highly.",
        "EmotionalReserve(x) ::: x has a usual emotional reserve."
      ],
      "premises": [
        "Handsome(drJohn) ∧ Doctor(drJohn) ∧ Visits(drJohn, school) ∧ Loves(drJohn, ginevra) ::: \"Dr. John\" is a handsome English doctor who frequently visits the school because of his love for Ginevra Fanshawe.",
        "RevealedAs(drJohn, johnGrahamBretton) ∧ Concealed(lucy, revealedAs(drJohn, johnGrahamBretton)) ::: \"Dr. John\" is later revealed to be John Graham Bretton, a fact that Lucy has known but has deliberately concealed from the reader.",
        "CloseFriends(lucy, drJohn) ::: After Dr. John discovers Ginevra's unworthiness, he turns his attention to Lucy, and they become close friends.",
        "ValuesFriendship(lucy, drJohn) ∧ EmotionalReserve(lucy) ::: Lucy values her friendship with Dr. John despite her usual emotional reserve."
      ],
      "conclusions": [
        "None",
        "ValuesFriendship(lucy, drJohn) ∧ EmotionalReserve(lucy)"
      ]
    },
    {
      "id": 510,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 6,
      "paragraph": "Lucy becomes progressively closer to a colleague, the irascible, autocratic, and male chauvinist professor, M. Paul Emanuel, a relative of Mme. Beck. Lucy and Paul eventually fall in love.",
      "question_template": "[[CANDIDATE_ANSWER]] eventually marries Graham.",
      "candidate_answers": [
        "Lucy becomes progressively closer to a colleague",
        "The irascible, autocratic, and male chauvinist professor, M. Paul Emanuel",
        "Lucy and Paul eventually fall in love"
      ],
      "predicates": [
        "Closer(x, y) ::: x becomes progressively closer to y.",
        "InLove(x, y) ::: x and y are in love.",
        "Irascible(x) ::: x is irascible.",
        "Autocratic(x) ::: x is autocratic.",
        "MaleChauvinist(x) ::: x is a male chauvinist.",
        "Relative(x, y) ::: x is a relative of y."
      ],
      "premises": [
        "Closer(lucy, paul) ::: Lucy becomes progressively closer to M. Paul Emanuel.",
        "Irascible(paul) ::: M. Paul Emanuel is irascible.",
        "Autocratic(paul) ::: M. Paul Emanuel is autocratic.",
        "MaleChauvinist(paul) ::: M. Paul Emanuel is a male chauvinist.",
        "Relative(paul, beck) ::: M. Paul Emanuel is a relative of Mme. Beck.",
        "InLove(lucy, paul) ::: Lucy and M. Paul Emanuel eventually fall in love."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 510,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 7,
      "paragraph": "However, a group of conspiring antagonists, including Mme. Beck, the priest Père Silas, and the relatives of M. Paul's long-dead fiancée, work to keep the two apart. They finally succeed in forcing M. Paul's departure for the West Indies to oversee a plantation there. He nonetheless declares his love for Lucy before his departure and arranges for her to live independently as the headmistress of her own day school, which she later expands into a pensionnat (boarding school).",
      "question_template": "[[CANDIDATE_ANSWER]] eventually marries Graham.",
      "candidate_answers": [
        "- A group of conspiring antagonists",
        "- Mme. Beck, the priest Père Silas, and the relatives of M. Paul's long-dead fiancée",
        "- Forcing M. Paul's departure for the West Indies",
        "- He nonetheless declares his love for Lucy before his departure",
        "- Arranges for her to live independently as the headmistress of her own day school",
        "- Expands into a pensionnat"
      ],
      "predicates": [
        "Antagonists(x) ::: x is a group of conspiring antagonists.",
        "KeepsApart(x, y) ::: x keeps y apart from z.",
        "DeclaresLove(x, y) ::: x declares love for y.",
        "Arranges(x, y, z) ::: x arranges for y to do z.",
        "Headmistress(x) ::: x is a headmistress.",
        "Pensionnat(x) ::: x is a boarding school."
      ],
      "premises": [
        "Antagonists(group) ::: A group of conspiring antagonists exists.",
        "KeepsApart(group, mPaul) ∧ KeepsApart(group, lucy) ::: The group of antagonists keeps M. Paul and Lucy apart.",
        "DeclaresLove(mPaul, lucy) ::: M. Paul declares his love for Lucy before his departure.",
        "Arranges(mPaul, lucy, liveIndependently) ::: M. Paul arranges for Lucy to live independently as the headmistress of her own day school.",
        "Headmistress(lucy) ::: Lucy is the headmistress of her own day school.",
        "Pensionnat(expandedSchool) ::: Lucy later expands her day school into a pensionnat (boarding school)."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 510,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 9,
      "paragraph": "Villette's final pages are ambiguous. Although Lucy says that she wants to leave the reader free to imagine a happy ending, she hints strongly that M. Paul's ship was destroyed by a storm during his return journey from the West Indies. She says that, \"M. Emanuel was away three years. Reader, they were the three happiest years of my life.\" This passage suggests that he was drowned by the \"destroying angel of tempest.\"",
      "question_template": "[[CANDIDATE_ANSWER]] eventually marries Graham.",
      "candidate_answers": [
        "M. Paul's ship was destroyed by a storm",
        "He was drowned by the \"destroying angel of tempest\""
      ],
      "predicates": [
        "Ambiguous(x) ::: x is ambiguous.",
        "Hints(x, y) ::: x hints strongly that y is true.",
        "WantsFreeEnding(x) ::: x wants to leave the reader free to imagine a happy ending.",
        "Drowned(x) ::: x was drowned.",
        "DestroyedByStorm(x) ::: x was destroyed by a storm.",
        "HappiestYears(x, y) ::: x had the happiest years of y's life."
      ],
      "premises": [
        "Ambiguous(villette) ::: Villette's final pages are ambiguous.",
        "WantsFreeEnding(lucy) ::: Lucy says that she wants to leave the reader free to imagine a happy ending.",
        "Hints(lucy, destroyedByStorm(mPaulShip)) ::: Lucy hints strongly that M. Paul's ship was destroyed by a storm during his return journey from the West Indies.",
        "Hints(lucy, drowned(mEmanuel)) ::: Lucy hints strongly that M. Emanuel was drowned.",
        "HappiestYears(mEmanuel, 3) ::: M. Emanuel was away three years, which were the three happiest years of Lucy's life."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 510,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 10,
      "paragraph": "Brontë described the ambiguity of the ending as a \"little puzzle.\"",
      "question_template": "[[CANDIDATE_ANSWER]] eventually marries Graham.",
      "candidate_answers": [
        "Lucy hints that something ambiguous happened to M. Paul."
      ],
      "predicates": [
        "Describes(x, y) ::: x describes the concept y.",
        "IsAmbiguous(y) ::: y is ambiguous.",
        "IsPuzzle(y) ::: y is a puzzle."
      ],
      "premises": [
        "Describes(a_1, b_1) ::: Brontë described the ambiguity of the ending.",
        "IsAmbiguous(b_1) ::: The ambiguity of the ending is ambiguous.",
        "IsPuzzle(b_2) ::: The little puzzle is a puzzle."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "511": [
    {
      "id": 511,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 0,
      "paragraph": " Villette begins with its famously passive protagonist, Lucy Snowe, age 14, staying at the home of her godmother Mrs. Bretton in \"the clean and ancient town of Bretton\", in England. Also in residence are Mrs. Bretton's son, John Graham Bretton (whom the family calls Graham), and a young visitor, Paulina Home (who is called Polly). Polly is a peculiar little girl who soon develops a deep devotion to Graham, who showers her with attention. But Polly's visit is cut short when her father arrives to take her away.",
      "question_template": "[[CANDIDATE_ANSWER]] is the name of Lucy's godmother.",
      "candidate_answers": [
        "age 14"
      ],
      "predicates": [
        "PassiveProtagonist(x) ::: x is a passive protagonist.",
        "Age(x, y) ::: x is of age y.",
        "StaysAt(x, y) ::: x stays at the home of y.",
        "InResidence(x, y) ::: x is in residence with y.",
        "Devotion(x, y) ::: x has a deep devotion to y.",
        "Attention(x, y) ::: x showers y with attention.",
        "TakesAway(x, y) ::: x takes y away."
      ],
      "premises": [
        "PassiveProtagonist(lucy) ∧ Age(lucy, 14) ∧ StaysAt(lucy, mrsBretton) ::: Lucy Snowe is a famously passive protagonist, age 14, staying at the home of her godmother Mrs. Bretton.",
        "InResidence(mrsBretton, johnGraham) ∧ InResidence(mrsBretton, paulina) ::: Mrs. Bretton has her son John Graham Bretton and a young visitor Paulina Home in residence.",
        "Devotion(paulina, johnGraham) ∧ Attention(johnGraham, paulina) ::: Polly develops a deep devotion to Graham, who showers her with attention.",
        "TakesAway(father, paulina) ::: Polly's visit is cut short when her father arrives to take her away."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "512": [
    {
      "id": 512,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 0,
      "paragraph": " Villette begins with its famously passive protagonist, Lucy Snowe, age 14, staying at the home of her godmother Mrs. Bretton in \"the clean and ancient town of Bretton\", in England. Also in residence are Mrs. Bretton's son, John Graham Bretton (whom the family calls Graham), and a young visitor, Paulina Home (who is called Polly). Polly is a peculiar little girl who soon develops a deep devotion to Graham, who showers her with attention. But Polly's visit is cut short when her father arrives to take her away.",
      "question_template": "[[CANDIDATE_ANSWER]] hires Lucy as a caregiver.",
      "candidate_answers": [
        "Her father"
      ],
      "predicates": [
        "PassiveProtagonist(x) ::: x is a passive protagonist.",
        "Age(x, y) ::: x is of age y.",
        "StaysAt(x, y) ::: x stays at the home of y.",
        "InResidence(x, y) ::: x is in residence with y.",
        "Devotion(x, y) ::: x has a deep devotion to y.",
        "Attention(x, y) ::: x showers y with attention.",
        "TakesAway(x, y) ::: x takes y away."
      ],
      "premises": [
        "PassiveProtagonist(lucy) ∧ Age(lucy, 14) ∧ StaysAt(lucy, mrsBretton) ::: Lucy Snowe is a famously passive protagonist, age 14, staying at the home of her godmother Mrs. Bretton.",
        "InResidence(mrsBretton, johnGraham) ∧ InResidence(mrsBretton, paulina) ::: Mrs. Bretton has her son John Graham Bretton and a young visitor Paulina Home in residence.",
        "Devotion(paulina, johnGraham) ∧ Attention(johnGraham, paulina) ::: Polly develops a deep devotion to Graham, who showers her with attention.",
        "TakesAway(father, paulina) ::: Polly's visit is cut short when her father arrives to take her away."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 512,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 1,
      "paragraph": "For reasons that are not stated, Lucy leaves Mrs. Bretton's home a few weeks after the Polly's departure. Some years pass, during which an unspecified family tragedy leaves Lucy without family, home, or means. After some initial hesitation, she is hired as a caregiver by Miss Marchmont, a rheumatic crippled woman. Lucy is soon accustomed to her work and has begun to feel content with her quiet lifestyle.",
      "question_template": "[[CANDIDATE_ANSWER]] hires Lucy as a caregiver.",
      "candidate_answers": [
        "Lucy",
        "Mrs. Bretton",
        "An unspecified family tragedy"
      ],
      "predicates": [
        "Leaves(x, y) ::: x leaves y.",
        "HiredAs(x, y) ::: x is hired as y.",
        "Content(x) ::: x feels content.",
        "Caregiver(x) ::: x is a caregiver.",
        "RheumaticCrippled(x) ::: x is a rheumatic crippled person.",
        "FamilyTragedy(x) ::: x experiences a family tragedy.",
        "HomeLess(x) ::: x is without a home.",
        "MeansLess(x) ::: x is without means."
      ],
      "premises": [
        "Leaves(lucy, mrsBretton) ::: Lucy leaves Mrs. Bretton's home a few weeks after Polly's departure.",
        "FamilyTragedy(lucy) ∧ HomeLess(lucy) ∧ MeansLess(lucy) ::: An unspecified family tragedy leaves Lucy without family, home, or means.",
        "HiredAs(lucy, caregiver) ∧ RheumaticCrippled(missMarchmont) ::: Lucy is hired as a caregiver by Miss Marchmont, a rheumatic crippled woman.",
        "Content(lucy) ::: Lucy feels content with her quiet lifestyle."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 512,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 6,
      "paragraph": "Lucy becomes progressively closer to a colleague, the irascible, autocratic, and male chauvinist professor, M. Paul Emanuel, a relative of Mme. Beck. Lucy and Paul eventually fall in love.",
      "question_template": "[[CANDIDATE_ANSWER]] hires Lucy as a caregiver.",
      "candidate_answers": [
        "Lucy",
        "M. Paul Emanuel",
        "A colleague",
        "The irascible, autocratic, and male chauvinist professor"
      ],
      "predicates": [
        "Closer(x, y) ::: x becomes progressively closer to y.",
        "InLove(x, y) ::: x and y are in love.",
        "Irascible(x) ::: x is irascible.",
        "Autocratic(x) ::: x is autocratic.",
        "MaleChauvinist(x) ::: x is a male chauvinist.",
        "Relative(x, y) ::: x is a relative of y."
      ],
      "premises": [
        "Closer(lucy, paul) ::: Lucy becomes progressively closer to M. Paul Emanuel.",
        "Irascible(paul) ::: M. Paul Emanuel is irascible.",
        "Autocratic(paul) ::: M. Paul Emanuel is autocratic.",
        "MaleChauvinist(paul) ::: M. Paul Emanuel is a male chauvinist.",
        "Relative(paul, beck) ::: M. Paul Emanuel is a relative of Mme. Beck.",
        "InLove(lucy, paul) ::: Lucy and M. Paul Emanuel eventually fall in love."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "513": [
    {
      "id": 513,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 0,
      "paragraph": " Villette begins with its famously passive protagonist, Lucy Snowe, age 14, staying at the home of her godmother Mrs. Bretton in \"the clean and ancient town of Bretton\", in England. Also in residence are Mrs. Bretton's son, John Graham Bretton (whom the family calls Graham), and a young visitor, Paulina Home (who is called Polly). Polly is a peculiar little girl who soon develops a deep devotion to Graham, who showers her with attention. But Polly's visit is cut short when her father arrives to take her away.",
      "question_template": "Lucy does [[CANDIDATE_ANSWER]] after Mrs. Marchmont died.",
      "candidate_answers": [
        "No relevant information found in the paragraph."
      ],
      "predicates": [
        "PassiveProtagonist(x) ::: x is a passive protagonist.",
        "Age(x, y) ::: x is of age y.",
        "StaysAt(x, y) ::: x stays at the home of y.",
        "InResidence(x, y) ::: x is in residence with y.",
        "Devotion(x, y) ::: x has a deep devotion to y.",
        "Attention(x, y) ::: x showers y with attention.",
        "TakesAway(x, y) ::: x takes y away."
      ],
      "premises": [
        "PassiveProtagonist(lucy) ∧ Age(lucy, 14) ∧ StaysAt(lucy, mrsBretton) ::: Lucy Snowe is a famously passive protagonist, age 14, staying at the home of her godmother Mrs. Bretton.",
        "InResidence(mrsBretton, johnGraham) ∧ InResidence(mrsBretton, paulina) ::: Mrs. Bretton has her son John Graham Bretton and a young visitor Paulina Home in residence.",
        "Devotion(paulina, johnGraham) ∧ Attention(johnGraham, paulina) ::: Polly develops a deep devotion to Graham, who showers her with attention.",
        "TakesAway(father, paulina) ::: Polly's visit is cut short when her father arrives to take her away."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 513,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 2,
      "paragraph": "During an evening of dramatic weather changes, Miss Marchmont regains all her energy and feels young again. She shares with Lucy her sad love story of 30 years previously, and concludes that she should treat Lucy better and be a better person. She believes that death will reunite her with her dead lover. The next morning, Lucy finds Miss Marchmont dead.",
      "question_template": "Lucy does [[CANDIDATE_ANSWER]] after Mrs. Marchmont died.",
      "candidate_answers": [
        "She believes that death will reunite her with her dead lover."
      ],
      "predicates": [
        "RegainsEnergy(a_0) ::: Miss Marchmont regains all her energy.",
        "FeelsYoung(a_0) ::: Miss Marchmont feels young again.",
        "Shares(a_0, a_1) ::: Miss Marchmont shares her story with Lucy.",
        "SadLoveStory(a_0) ::: Miss Marchmont shares her sad love story.",
        "TreatBetter(a_0) ::: Miss Marchmont concludes that she should treat Lucy better.",
        "Believes(a_0, b_0) ::: Miss Marchmont believes that death will reunite her with her dead lover.",
        "Finds(a_1, a_0) ::: Lucy finds Miss Marchmont dead.",
        "Dead(a_0) ::: Miss Marchmont is dead."
      ],
      "premises": [
        "RegainsEnergy(a_0) ∧ FeelsYoung(a_0) ::: During an evening of dramatic weather changes, Miss Marchmont regains all her energy and feels young again.",
        "Shares(a_0, a_1) ∧ SadLoveStory(a_0) ::: She shares with Lucy her sad love story of 30 years previously.",
        "TreatBetter(a_0) ::: She concludes that she should treat Lucy better and be a better person.",
        "Believes(a_0, b_0) ::: She believes that death will reunite her with her dead lover.",
        "Finds(a_1, a_0) ∧ Dead(a_0) ::: The next morning, Lucy finds Miss Marchmont dead.",
        "¬(Dead(a_0) ∧ (TreatBetter(a_0) ∧ Believes(a_0, b_0))) ::: Miss Marchmont's death occurs after she expresses her beliefs and conclusions."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 513,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 6,
      "paragraph": "Lucy becomes progressively closer to a colleague, the irascible, autocratic, and male chauvinist professor, M. Paul Emanuel, a relative of Mme. Beck. Lucy and Paul eventually fall in love.",
      "question_template": "Lucy does [[CANDIDATE_ANSWER]] after Mrs. Marchmont died.",
      "candidate_answers": [
        "Lucy becomes progressively closer to a colleague",
        "The irascible, autocratic, and male chauvinist professor, M. Paul Emanuel",
        "Lucy and Paul eventually fall in love"
      ],
      "predicates": [
        "Closer(x, y) ::: x becomes progressively closer to y.",
        "InLove(x, y) ::: x and y are in love.",
        "Irascible(x) ::: x is irascible.",
        "Autocratic(x) ::: x is autocratic.",
        "MaleChauvinist(x) ::: x is a male chauvinist.",
        "Relative(x, y) ::: x is a relative of y."
      ],
      "premises": [
        "Closer(lucy, paul) ::: Lucy becomes progressively closer to M. Paul Emanuel.",
        "Irascible(paul) ::: M. Paul Emanuel is irascible.",
        "Autocratic(paul) ::: M. Paul Emanuel is autocratic.",
        "MaleChauvinist(paul) ::: M. Paul Emanuel is a male chauvinist.",
        "Relative(paul, beck) ::: M. Paul Emanuel is a relative of Mme. Beck.",
        "InLove(lucy, paul) ::: Lucy and M. Paul Emanuel eventually fall in love."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "514": [
    {
      "id": 514,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 0,
      "paragraph": " Villette begins with its famously passive protagonist, Lucy Snowe, age 14, staying at the home of her godmother Mrs. Bretton in \"the clean and ancient town of Bretton\", in England. Also in residence are Mrs. Bretton's son, John Graham Bretton (whom the family calls Graham), and a young visitor, Paulina Home (who is called Polly). Polly is a peculiar little girl who soon develops a deep devotion to Graham, who showers her with attention. But Polly's visit is cut short when her father arrives to take her away.",
      "question_template": "Dr. John frequently visits the school because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Lucy Snowe",
        "The home of her godmother Mrs. Bretton",
        "In \"the clean and ancient town of Bretton\""
      ],
      "predicates": [
        "PassiveProtagonist(x) ::: x is a passive protagonist.",
        "Age(x, y) ::: x is of age y.",
        "StaysAt(x, y) ::: x stays at the home of y.",
        "InResidence(x, y) ::: x is in residence with y.",
        "Devotion(x, y) ::: x has a deep devotion to y.",
        "Attention(x, y) ::: x showers y with attention.",
        "TakesAway(x, y) ::: x takes y away."
      ],
      "premises": [
        "PassiveProtagonist(lucy) ∧ Age(lucy, 14) ∧ StaysAt(lucy, mrsBretton) ::: Lucy Snowe is a famously passive protagonist, age 14, staying at the home of her godmother Mrs. Bretton.",
        "InResidence(mrsBretton, johnGraham) ∧ InResidence(mrsBretton, paulina) ::: Mrs. Bretton has her son John Graham Bretton and a young visitor Paulina Home in residence.",
        "Devotion(paulina, johnGraham) ∧ Attention(johnGraham, paulina) ::: Polly develops a deep devotion to Graham, who showers her with attention.",
        "TakesAway(father, paulina) ::: Polly's visit is cut short when her father arrives to take her away."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 514,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 1,
      "paragraph": "For reasons that are not stated, Lucy leaves Mrs. Bretton's home a few weeks after the Polly's departure. Some years pass, during which an unspecified family tragedy leaves Lucy without family, home, or means. After some initial hesitation, she is hired as a caregiver by Miss Marchmont, a rheumatic crippled woman. Lucy is soon accustomed to her work and has begun to feel content with her quiet lifestyle.",
      "question_template": "Dr. John frequently visits the school because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Hired as a caregiver by Miss Marchmont"
      ],
      "predicates": [
        "Leaves(x, y) ::: x leaves y.",
        "HiredAs(x, y) ::: x is hired as y.",
        "Content(x) ::: x feels content.",
        "Caregiver(x) ::: x is a caregiver.",
        "RheumaticCrippled(x) ::: x is a rheumatic crippled person.",
        "FamilyTragedy(x) ::: x experiences a family tragedy.",
        "HomeLess(x) ::: x is without a home.",
        "MeansLess(x) ::: x is without means."
      ],
      "premises": [
        "Leaves(lucy, mrsBretton) ::: Lucy leaves Mrs. Bretton's home a few weeks after Polly's departure.",
        "FamilyTragedy(lucy) ∧ HomeLess(lucy) ∧ MeansLess(lucy) ::: An unspecified family tragedy leaves Lucy without family, home, or means.",
        "HiredAs(lucy, caregiver) ∧ RheumaticCrippled(missMarchmont) ::: Lucy is hired as a caregiver by Miss Marchmont, a rheumatic crippled woman.",
        "Content(lucy) ::: Lucy feels content with her quiet lifestyle."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 514,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 3,
      "paragraph": "Lucy then leaves the English countryside and goes to London. At the age of 23, she boards a ship for Labassecour despite knowing very little French. She travels to the city of Villette, where she finds employment as a bonne (nanny) at Mme. Beck's boarding school for girls. (This school is seen as being based upon the Hégers' Brussels pensionnat). After a time, she is hired to teach English at the school, in addition to having to mind Mme. Beck's three children. She thrives despite Mme. Beck's constant surveillance of the staff and students.",
      "question_template": "Dr. John frequently visits the school because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "a bonne at Mme. Beck's boarding school for girls"
      ],
      "predicates": [
        "Leaves(x, y) ::: x leaves location y.",
        "Boards(x, y) ::: x boards a ship for destination y.",
        "TravelsTo(x, y) ::: x travels to location y.",
        "FindsEmployment(x, y) ::: x finds employment at location y.",
        "Teaches(x, y) ::: x teaches subject y.",
        "Minds(x, y) ::: x minds y (children).",
        "Thrives(x) ::: x thrives in the given situation.",
        "Surveillance(x, y) ::: x conducts surveillance on y."
      ],
      "premises": [
        "Leaves(a_0, English countryside) ::: Lucy leaves the English countryside.",
        "Boards(a_0, Labassecour) ::: Lucy boards a ship for Labassecour.",
        "TravelsTo(a_0, Villette) ::: Lucy travels to the city of Villette.",
        "FindsEmployment(a_0, Mme_Beck's_boarding_school) ::: Lucy finds employment as a bonne at Mme. Beck's boarding school for girls.",
        "Teaches(a_0, English) ::: Lucy is hired to teach English at the school.",
        "Minds(a_0, Mme_Beck's_children) ::: Lucy has to mind Mme. Beck's three children.",
        "Thrives(a_0) ::: Lucy thrives despite the situation.",
        "Surveillance(Mme_Beck, staff_and_students) ::: Mme. Beck conducts constant surveillance of the staff and students."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 514,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 7,
      "paragraph": "However, a group of conspiring antagonists, including Mme. Beck, the priest Père Silas, and the relatives of M. Paul's long-dead fiancée, work to keep the two apart. They finally succeed in forcing M. Paul's departure for the West Indies to oversee a plantation there. He nonetheless declares his love for Lucy before his departure and arranges for her to live independently as the headmistress of her own day school, which she later expands into a pensionnat (boarding school).",
      "question_template": "Dr. John frequently visits the school because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Lucy finds employment as the headmistress of her own day school",
        "She later expands into a pensionnat"
      ],
      "predicates": [
        "Antagonists(x) ::: x is a group of conspiring antagonists.",
        "KeepsApart(x, y) ::: x keeps y apart from z.",
        "DeclaresLove(x, y) ::: x declares love for y.",
        "Arranges(x, y, z) ::: x arranges for y to do z.",
        "Headmistress(x) ::: x is a headmistress.",
        "Pensionnat(x) ::: x is a boarding school."
      ],
      "premises": [
        "Antagonists(group) ::: A group of conspiring antagonists exists.",
        "KeepsApart(group, mPaul) ∧ KeepsApart(group, lucy) ::: The group of antagonists keeps M. Paul and Lucy apart.",
        "DeclaresLove(mPaul, lucy) ::: M. Paul declares his love for Lucy before his departure.",
        "Arranges(mPaul, lucy, liveIndependently) ::: M. Paul arranges for Lucy to live independently as the headmistress of her own day school.",
        "Headmistress(lucy) ::: Lucy is the headmistress of her own day school.",
        "Pensionnat(expandedSchool) ::: Lucy later expands her day school into a pensionnat (boarding school)."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 514,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 8,
      "paragraph": "During the course of the novel, Lucy has three encounters with the figure of a nun — which may be the ghost of a nun who was buried alive on the school's grounds as punishment for breaking her vow of chastity. In a highly symbolic scene near the end of the novel, she discovers the \"nun's\" habit in her bed and destroys it. She later finds out that it was a disguise worn by Ginevra's amour, Alfred de Hamal. The episodes with the nun no doubt contributed substantially to the novel's reputation as a gothic novel.",
      "question_template": "Dr. John frequently visits the school because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Lucy has three encounters with the figure of a nun",
        "The ghost of a nun who was buried alive on the school's grounds",
        "A disguise worn by Ginevra's amour, Alfred de Hamal",
        "The episodes with the nun no doubt contributed substantially to the novel's reputation as a gothic novel"
      ],
      "predicates": [
        "Encounter(x, y) ::: x has an encounter with y.",
        "Ghost(x) ::: x is a ghost.",
        "BuriedAlive(x) ::: x was buried alive.",
        "VowOfChastity(x) ::: x has broken a vow of chastity.",
        "SymbolicScene(x) ::: x is a highly symbolic scene.",
        "DestroysHabit(x) ::: x destroys the \"nun's\" habit.",
        "Disguise(x, y) ::: x is a disguise worn by y.",
        "ContributesToReputation(x, y) ::: x contributes substantially to the reputation of y.",
        "GothicNovel(x) ::: x is a gothic novel."
      ],
      "premises": [
        "∀x (Encounter(Lucy, x) ∧ Ghost(x) â§ BuriedAlive(x) â§ VowOfChastity(x)) ::: The figure of a nun is linked to the ghost of a nun buried alive for breaking her vow of chastity.",
        "SymbolicScene(nearEnd) ∧ DestroysHabit(Lucy) ::: Lucy’s actions regarding the \"nun's\" habit are significant to the plot.",
        "ContributesToReputation(episodesWithNun, gothicNovel) ::: The episodes with the nun contribute substantially to the novel's reputation as a gothic novel."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "515": [
    {
      "id": 515,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 7,
      "paragraph": "However, a group of conspiring antagonists, including Mme. Beck, the priest Père Silas, and the relatives of M. Paul's long-dead fiancée, work to keep the two apart. They finally succeed in forcing M. Paul's departure for the West Indies to oversee a plantation there. He nonetheless declares his love for Lucy before his departure and arranges for her to live independently as the headmistress of her own day school, which she later expands into a pensionnat (boarding school).",
      "question_template": "Lucy marries [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- A group of conspiring antagonists, including Mme. Beck, the priest Père Silas, and the relatives of M. Paul's long-dead fiancée, work to keep the two apart.",
        "- They finally succeed in forcing M. Paul's departure for the West Indies to oversee a plantation there.",
        "- He nonetheless declares his love for Lucy before his departure and arranges for her to live independently as the headmistress of her own day school, which she later expands into a pensionnat ."
      ],
      "predicates": [
        "Antagonists(x) ::: x is a group of conspiring antagonists.",
        "KeepsApart(x, y) ::: x keeps y apart from z.",
        "DeclaresLove(x, y) ::: x declares love for y.",
        "Arranges(x, y, z) ::: x arranges for y to do z.",
        "Headmistress(x) ::: x is a headmistress.",
        "Pensionnat(x) ::: x is a boarding school."
      ],
      "premises": [
        "Antagonists(group) ::: A group of conspiring antagonists exists.",
        "KeepsApart(group, mPaul) ∧ KeepsApart(group, lucy) ::: The group of antagonists keeps M. Paul and Lucy apart.",
        "DeclaresLove(mPaul, lucy) ::: M. Paul declares his love for Lucy before his departure.",
        "Arranges(mPaul, lucy, liveIndependently) ::: M. Paul arranges for Lucy to live independently as the headmistress of her own day school.",
        "Headmistress(lucy) ::: Lucy is the headmistress of her own day school.",
        "Pensionnat(expandedSchool) ::: Lucy later expands her day school into a pensionnat (boarding school)."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "516": [
    {
      "id": 516,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 6,
      "paragraph": "Lucy becomes progressively closer to a colleague, the irascible, autocratic, and male chauvinist professor, M. Paul Emanuel, a relative of Mme. Beck. Lucy and Paul eventually fall in love.",
      "question_template": "Lucy falls in love with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Lucy becomes progressively closer to a colleague",
        "the irascible, autocratic, and male chauvinist professor, M. Paul Emanuel",
        "a relative of Mme. Beck",
        "Lucy and Paul eventually fall in love"
      ],
      "predicates": [
        "Closer(x, y) ::: x becomes progressively closer to y.",
        "InLove(x, y) ::: x and y are in love.",
        "Irascible(x) ::: x is irascible.",
        "Autocratic(x) ::: x is autocratic.",
        "MaleChauvinist(x) ::: x is a male chauvinist.",
        "Relative(x, y) ::: x is a relative of y."
      ],
      "premises": [
        "Closer(lucy, paul) ::: Lucy becomes progressively closer to M. Paul Emanuel.",
        "Irascible(paul) ::: M. Paul Emanuel is irascible.",
        "Autocratic(paul) ::: M. Paul Emanuel is autocratic.",
        "MaleChauvinist(paul) ::: M. Paul Emanuel is a male chauvinist.",
        "Relative(paul, beck) ::: M. Paul Emanuel is a relative of Mme. Beck.",
        "InLove(lucy, paul) ::: Lucy and M. Paul Emanuel eventually fall in love."
      ],
      "conclusions": [
        "None",
        "InLove(lucy, paul) ∧ Irascible(paul) ∧ Autocratic(paul) ∧ MaleChauvinist(paul)",
        "Relative(paul, beck) → InLove(lucy, paul)",
        "None"
      ]
    },
    {
      "id": 516,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 10,
      "paragraph": "Brontë described the ambiguity of the ending as a \"little puzzle.\"",
      "question_template": "Lucy falls in love with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Brontë described the ambiguity of the ending as a \"little puzzle.\""
      ],
      "predicates": [
        "Describes(x, y) ::: x describes the concept y.",
        "IsAmbiguous(y) ::: y is ambiguous.",
        "IsPuzzle(y) ::: y is a puzzle."
      ],
      "premises": [
        "Describes(a_1, b_1) ::: Brontë described the ambiguity of the ending.",
        "IsAmbiguous(b_1) ::: The ambiguity of the ending is ambiguous.",
        "IsPuzzle(b_2) ::: The little puzzle is a puzzle."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "517": [
    {
      "id": 517,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 5,
      "paragraph": "We meet Polly (Paulina Home) again at this point; her father has inherited the title \"de Bassompierre\" and is now a Count. Thus her name is now Paulina Home de Bassompierre. Polly and Graham soon discover that they knew each other in the past and renew their friendship. They fall in love and eventually marry.",
      "question_template": "[[CANDIDATE_ANSWER]] was the reason Paul was forced to leave for the West Indies.",
      "candidate_answers": [
        "\"de Bassompierre\"",
        "\"Count\""
      ],
      "predicates": [
        "Count(x) ::: x is a Count.",
        "InheritsTitle(x, y) ::: x inherits the title y.",
        "RenewsFriendship(x, y) ::: x renews friendship with y.",
        "FallsInLove(x, y) ::: x falls in love with y.",
        "Marries(x, y) ::: x marries y."
      ],
      "premises": [
        "InheritsTitle(father, \"de Bassompierre\") ::: Polly's father has inherited the title \"de Bassompierre\".",
        "Count(father) ::: Polly's father is now a Count.",
        "RenewsFriendship(polly, graham) ::: Polly and Graham renew their friendship.",
        "FallsInLove(polly, graham) ::: Polly and Graham fall in love.",
        "Marries(polly, graham) ::: Polly and Graham eventually marry."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "518": [
    {
      "id": 518,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 6,
      "paragraph": "Lucy becomes progressively closer to a colleague, the irascible, autocratic, and male chauvinist professor, M. Paul Emanuel, a relative of Mme. Beck. Lucy and Paul eventually fall in love.",
      "question_template": "Paul did [[CANDIDATE_ANSWER]] for Lucy before he left.",
      "candidate_answers": [
        "Lucy becomes progressively closer to a colleague",
        "The irascible, autocratic, and male chauvinist professor, M. Paul Emanuel",
        "A relative of Mme. Beck",
        "Lucy and Paul eventually fall in love"
      ],
      "predicates": [
        "Closer(x, y) ::: x becomes progressively closer to y.",
        "InLove(x, y) ::: x and y are in love.",
        "Irascible(x) ::: x is irascible.",
        "Autocratic(x) ::: x is autocratic.",
        "MaleChauvinist(x) ::: x is a male chauvinist.",
        "Relative(x, y) ::: x is a relative of y."
      ],
      "premises": [
        "Closer(lucy, paul) ::: Lucy becomes progressively closer to M. Paul Emanuel.",
        "Irascible(paul) ::: M. Paul Emanuel is irascible.",
        "Autocratic(paul) ::: M. Paul Emanuel is autocratic.",
        "MaleChauvinist(paul) ::: M. Paul Emanuel is a male chauvinist.",
        "Relative(paul, beck) ::: M. Paul Emanuel is a relative of Mme. Beck.",
        "InLove(lucy, paul) ::: Lucy and M. Paul Emanuel eventually fall in love."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 518,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 7,
      "paragraph": "However, a group of conspiring antagonists, including Mme. Beck, the priest Père Silas, and the relatives of M. Paul's long-dead fiancée, work to keep the two apart. They finally succeed in forcing M. Paul's departure for the West Indies to oversee a plantation there. He nonetheless declares his love for Lucy before his departure and arranges for her to live independently as the headmistress of her own day school, which she later expands into a pensionnat (boarding school).",
      "question_template": "Paul did [[CANDIDATE_ANSWER]] for Lucy before he left.",
      "candidate_answers": [
        "The West Indies"
      ],
      "predicates": [
        "Antagonists(x) ::: x is a group of conspiring antagonists.",
        "KeepsApart(x, y) ::: x keeps y apart from z.",
        "DeclaresLove(x, y) ::: x declares love for y.",
        "Arranges(x, y, z) ::: x arranges for y to do z.",
        "Headmistress(x) ::: x is a headmistress.",
        "Pensionnat(x) ::: x is a boarding school."
      ],
      "premises": [
        "Antagonists(group) ::: A group of conspiring antagonists exists.",
        "KeepsApart(group, mPaul) ∧ KeepsApart(group, lucy) ::: The group of antagonists keeps M. Paul and Lucy apart.",
        "DeclaresLove(mPaul, lucy) ::: M. Paul declares his love for Lucy before his departure.",
        "Arranges(mPaul, lucy, liveIndependently) ::: M. Paul arranges for Lucy to live independently as the headmistress of her own day school.",
        "Headmistress(lucy) ::: Lucy is the headmistress of her own day school.",
        "Pensionnat(expandedSchool) ::: Lucy later expands her day school into a pensionnat (boarding school)."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 518,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 9,
      "paragraph": "Villette's final pages are ambiguous. Although Lucy says that she wants to leave the reader free to imagine a happy ending, she hints strongly that M. Paul's ship was destroyed by a storm during his return journey from the West Indies. She says that, \"M. Emanuel was away three years. Reader, they were the three happiest years of my life.\" This passage suggests that he was drowned by the \"destroying angel of tempest.\"",
      "question_template": "Paul did [[CANDIDATE_ANSWER]] for Lucy before he left.",
      "candidate_answers": [
        "The West Indies"
      ],
      "predicates": [
        "Ambiguous(x) ::: x is ambiguous.",
        "Hints(x, y) ::: x hints strongly that y is true.",
        "WantsFreeEnding(x) ::: x wants to leave the reader free to imagine a happy ending.",
        "Drowned(x) ::: x was drowned.",
        "DestroyedByStorm(x) ::: x was destroyed by a storm.",
        "HappiestYears(x, y) ::: x had the happiest years of y's life."
      ],
      "premises": [
        "Ambiguous(villette) ::: Villette's final pages are ambiguous.",
        "WantsFreeEnding(lucy) ::: Lucy says that she wants to leave the reader free to imagine a happy ending.",
        "Hints(lucy, destroyedByStorm(mPaulShip)) ::: Lucy hints strongly that M. Paul's ship was destroyed by a storm during his return journey from the West Indies.",
        "Hints(lucy, drowned(mEmanuel)) ::: Lucy hints strongly that M. Emanuel was drowned.",
        "HappiestYears(mEmanuel, 3) ::: M. Emanuel was away three years, which were the three happiest years of Lucy's life."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "519": [
    {
      "id": 519,
      "context_id": "4e6e052732e90a9c127f6502feddee1a17301c14",
      "paragraph_id": 8,
      "paragraph": "During the course of the novel, Lucy has three encounters with the figure of a nun — which may be the ghost of a nun who was buried alive on the school's grounds as punishment for breaking her vow of chastity. In a highly symbolic scene near the end of the novel, she discovers the \"nun's\" habit in her bed and destroys it. She later finds out that it was a disguise worn by Ginevra's amour, Alfred de Hamal. The episodes with the nun no doubt contributed substantially to the novel's reputation as a gothic novel.",
      "question_template": "Lucy has [[CANDIDATE_ANSWER]] with a nun.",
      "candidate_answers": [
        "three encounters with the figure of a nun"
      ],
      "predicates": [
        "Encounter(x, y) ::: x has an encounter with y.",
        "Ghost(x) ::: x is a ghost.",
        "BuriedAlive(x) ::: x was buried alive.",
        "VowOfChastity(x) ::: x has broken a vow of chastity.",
        "SymbolicScene(x) ::: x is a highly symbolic scene.",
        "DestroysHabit(x) ::: x destroys the \"nun's\" habit.",
        "Disguise(x, y) ::: x is a disguise worn by y.",
        "ContributesToReputation(x, y) ::: x contributes substantially to the reputation of y.",
        "GothicNovel(x) ::: x is a gothic novel."
      ],
      "premises": [
        "∀x (Encounter(Lucy, x) ∧ Ghost(x) â§ BuriedAlive(x) â§ VowOfChastity(x)) ::: The figure of a nun is linked to the ghost of a nun buried alive for breaking her vow of chastity.",
        "SymbolicScene(nearEnd) ∧ DestroysHabit(Lucy) ::: Lucy’s actions regarding the \"nun's\" habit are significant to the plot.",
        "ContributesToReputation(episodesWithNun, gothicNovel) ::: The episodes with the nun contribute substantially to the novel's reputation as a gothic novel."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "520": [
    {
      "id": 520,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 4,
      "paragraph": "Chad is questioned by Richards and Morrison, and fears they suspect him. He turns on Marie, drugging her and stealing the diamonds. Marie and Elena give chase, following Chad into the woods, where Marie kills him with a tire iron. Marie then meets the diamond buyer Chad set up, but learns that the diamonds are fake. Elena, who is left to deal with Chad's body, is caught by Richards and Morrison.",
      "question_template": "Lucy hints that [[CANDIDATE_ANSWER]] happened to M. Paul.",
      "candidate_answers": [
        "Marie and Elena",
        "Diamonds",
        "The diamonds are fake"
      ],
      "predicates": [
        "Questioned(x, y) ::: x is questioned by y.",
        "Fears(x, y) ::: x fears y suspects him.",
        "TurnsOn(x, y) ::: x turns on y.",
        "Drugs(x, y) ::: x drugs y.",
        "Steals(x, y) ::: x steals y.",
        "Chases(x, y) ::: x gives chase to y.",
        "Kills(x, y) ::: x kills y.",
        "Learns(x, y) ::: x learns that y is fake.",
        "Caught(x, y) ::: x is caught by y.",
        "DealsWith(x, y) ::: x deals with y."
      ],
      "premises": [
        "Questioned(chad, richards) ∧ Fears(chad, richards) ::: Chad is questioned by Richards and fears they suspect him.",
        "TurnsOn(chad, marie) ∧ Drugs(chad, marie) ∧ Steals(chad, diamonds) ::: Chad turns on Marie, drugging her and stealing the diamonds.",
        "Chases(marie, chad) ∧ Chases(elena, chad) ::: Marie and Elena give chase, following Chad into the woods.",
        "Kills(marie, chad) ::: Marie kills Chad with a tire iron.",
        "Learns(marie, diamonds) ::: Marie learns that the diamonds are fake after Chad's death.",
        "Caught(elena, richards) ::: Elena, who is left to deal with Chad's body, is caught by Richards.",
        "Conclusion:",
        "Fears(chad, richards) ::: Chad fears that Richards suspects him.",
        "Steals(chad, diamonds) ::: Chad steals the diamonds.",
        "Kills(marie, chad) ::: Marie kills Chad."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "523": [
    {
      "id": 523,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 1,
      "paragraph": "At Marie's swim-meet, Jay encounters towel girl Elena Sandoval (McCoy), and invites her to Marie's eighteenth birthday party. Elena attends the party but is assaulted by Marie, who says that Elena is not welcome. Jay comforts Elena, and brings her to the construction site of one of his buildings for privacy. Later, Elena alleges that Jay raped her at the site. Detective Michael Morrison (Ashby) is placed on the case, as is Richards, who is Elena's probation officer. Chad is placed in charge of documenting Elena's injuries, and testifies to the court that Elena was raped.",
      "question_template": "Miss Marchmont believes that when she dies, [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Marie assaults Elena",
        "Marie says that Elena is not welcome"
      ],
      "predicates": [
        "NotWelcome(a_2, a_0) ::: Elena Sandoval is not welcome at Marie's birthday party.",
        "Comforts(a_3, a_2) ::: Jay comforts Elena Sandoval after the assault.",
        "Alleges(a_2, a_3) ::: Elena Sandoval alleges that Jay raped her.",
        "Testifies(a_1, a_2) ::: Chad testifies that Elena Sandoval was raped."
      ],
      "premises": [
        "NotWelcome(a_2, a_0) ::: Elena Sandoval is not welcome at Marie's birthday party.",
        "Comforts(a_3, a_2) ::: Jay comforts Elena Sandoval after the assault.",
        "Alleges(a_2, a_3) ::: Elena Sandoval alleges that Jay raped her.",
        "Testifies(a_1, a_2) ::: Chad testifies that Elena Sandoval was raped."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 523,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 2,
      "paragraph": "Marie believes that Elena is doing this for money and tells Jay to pay her off. When Jay admits that he's broke, Marie suggests that they sell the diamonds. Jay agrees, and revokes his claim to the will, giving Marie custody of the diamonds so she can sell them off. However, this was a ploy between Elena, Marie and Chad to get the diamonds, and the trio are in a sexual relationship together.",
      "question_template": "Miss Marchmont believes that when she dies, [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Marie believes that Elena is doing this for money",
        "Marie suggests that they sell the diamonds",
        "Jay agrees, and revokes his claim to the will, giving Marie custody of the diamonds"
      ],
      "predicates": [
        "Believes(x, y) ::: x believes y.",
        "PayOff(x, y) ::: x pays off y.",
        "Broke(x) ::: x is broke.",
        "Sell(x, y) ::: x sells y.",
        "RevokesClaim(x, y) ::: x revokes his claim to y.",
        "Custody(x, y) ::: x has custody of y.",
        "InRelationship(x, y) ::: x is in a relationship with y.",
        "Conspire(x, y) ::: x conspires with y.",
        "Collaborate(x, y) ::: x collaborates with y."
      ],
      "premises": [
        "Believes(marie, payOff(elena)) ::: Marie believes that Elena is doing this for money and tells Jay to pay her off.",
        "Broke(jay) ::: Jay admits that he's broke.",
        "Conspire(marie, jay) ::: Marie and Jay conspire to sell the diamonds to resolve their financial issues.",
        "Sell(marie, diamonds) ::: Marie suggests that they sell the diamonds.",
        "Agree(jay, sell(diamonds)) ::: Jay agrees to sell the diamonds.",
        "RevokesClaim(jay, will) ::: Jay revokes his claim to the will.",
        "Custody(marie, diamonds) ::: Marie has custody of the diamonds so she can sell them off.",
        "Collaborate(elena, marie, chad) ::: Elena, Marie, and Chad collaborate in a scheme to acquire the diamonds.",
        "InRelationship(elena, marie) ::: Elena is in a relationship with Marie.",
        "InRelationship(elena, chad) ::: Elena is in a relationship with Chad.",
        "InRelationship(marie, chad) ::: Marie is in a relationship with Chad."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "524": [
    {
      "id": 524,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 1,
      "paragraph": "At Marie's swim-meet, Jay encounters towel girl Elena Sandoval (McCoy), and invites her to Marie's eighteenth birthday party. Elena attends the party but is assaulted by Marie, who says that Elena is not welcome. Jay comforts Elena, and brings her to the construction site of one of his buildings for privacy. Later, Elena alleges that Jay raped her at the site. Detective Michael Morrison (Ashby) is placed on the case, as is Richards, who is Elena's probation officer. Chad is placed in charge of documenting Elena's injuries, and testifies to the court that Elena was raped.",
      "question_template": "Lucy finds employment as a Nanny with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Elena alleges that Jay raped her at the site.",
        "- Detective Michael Morrison is placed on the case.",
        "- Chad is placed in charge of documenting Elena's injuries."
      ],
      "predicates": [
        "NotWelcome(a_2, a_0) ::: Elena Sandoval is not welcome at Marie's birthday party.",
        "Comforts(a_3, a_2) ::: Jay comforts Elena Sandoval after the assault.",
        "Alleges(a_2, a_3) ::: Elena Sandoval alleges that Jay raped her.",
        "Testifies(a_1, a_2) ::: Chad testifies that Elena Sandoval was raped."
      ],
      "premises": [
        "NotWelcome(a_2, a_0) ::: Elena Sandoval is not welcome at Marie's birthday party.",
        "Comforts(a_3, a_2) ::: Jay comforts Elena Sandoval after the assault.",
        "Alleges(a_2, a_3) ::: Elena Sandoval alleges that Jay raped her.",
        "Testifies(a_1, a_2) ::: Chad testifies that Elena Sandoval was raped."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 524,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 2,
      "paragraph": "Marie believes that Elena is doing this for money and tells Jay to pay her off. When Jay admits that he's broke, Marie suggests that they sell the diamonds. Jay agrees, and revokes his claim to the will, giving Marie custody of the diamonds so she can sell them off. However, this was a ploy between Elena, Marie and Chad to get the diamonds, and the trio are in a sexual relationship together.",
      "question_template": "Lucy finds employment as a Nanny with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Marie believes that Elena is doing this for money and tells Jay to pay her off.",
        "- Jay admits that he's broke.",
        "- Marie suggests that they sell the diamonds.",
        "- Jay agrees, and revokes his claim to the will, giving Marie custody of the diamonds so she can sell them off.",
        "- This was a ploy between Elena, Marie and Chad to get the diamonds.",
        "- The trio are in a sexual relationship together."
      ],
      "predicates": [
        "Believes(x, y) ::: x believes y.",
        "PayOff(x, y) ::: x pays off y.",
        "Broke(x) ::: x is broke.",
        "Sell(x, y) ::: x sells y.",
        "RevokesClaim(x, y) ::: x revokes his claim to y.",
        "Custody(x, y) ::: x has custody of y.",
        "InRelationship(x, y) ::: x is in a relationship with y.",
        "Conspire(x, y) ::: x conspires with y.",
        "Collaborate(x, y) ::: x collaborates with y."
      ],
      "premises": [
        "Believes(marie, payOff(elena)) ::: Marie believes that Elena is doing this for money and tells Jay to pay her off.",
        "Broke(jay) ::: Jay admits that he's broke.",
        "Conspire(marie, jay) ::: Marie and Jay conspire to sell the diamonds to resolve their financial issues.",
        "Sell(marie, diamonds) ::: Marie suggests that they sell the diamonds.",
        "Agree(jay, sell(diamonds)) ::: Jay agrees to sell the diamonds.",
        "RevokesClaim(jay, will) ::: Jay revokes his claim to the will.",
        "Custody(marie, diamonds) ::: Marie has custody of the diamonds so she can sell them off.",
        "Collaborate(elena, marie, chad) ::: Elena, Marie, and Chad collaborate in a scheme to acquire the diamonds.",
        "InRelationship(elena, marie) ::: Elena is in a relationship with Marie.",
        "InRelationship(elena, chad) ::: Elena is in a relationship with Chad.",
        "InRelationship(marie, chad) ::: Marie is in a relationship with Chad."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 524,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 3,
      "paragraph": "Jay believes that Elena will recant her accusation after being paid off, but at the next court session Elena testifies that Jay also threatened to kill her. Jay is sent to prison, but Richards is now suspicious of Elena's behavior. Richards and Morrison search Elena's trailer and discover she's gathered information about Kristen's rape, using it to form her testimony. Richards and Morrison discuss their suspicions with Jay, and conclude that Marie, Elena and Chad must be working together.",
      "question_template": "Lucy finds employment as a Nanny with [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Elena testifies that Jay also threatened to kill her.",
        "- Jay is sent to prison.",
        "- Richards is now suspicious of Elena's behavior.",
        "- Richards and Morrison search Elena's trailer and discover she's gathered information about Kristen's rape."
      ],
      "predicates": [
        "Believes(x, y) ::: x believes y.",
        "Recant(x) ::: x recants her accusation.",
        "Threatens(x, y) ::: x threatens to kill y.",
        "SentToPrison(x) ::: x is sent to prison.",
        "SuspiciousOf(x, y) ::: x is suspicious of y's behavior.",
        "Search(x, y) ::: x searches y's trailer.",
        "GathersInformation(x, y) ::: x gathers information about y.",
        "FormsTestimony(x, y) ::: x forms her testimony based on y.",
        "Collaborating(x, y, z) ::: x, y, and z are collaborating."
      ],
      "premises": [
        "Believes(a_3, Recant(a_2)) ::: Jay believes that Elena will recant her accusation after being paid off.",
        "Testifies(a_2, Threatens(a_3, a_2)) ::: At the next court session, Elena testifies that Jay also threatened to kill her.",
        "SentToPrison(a_3) ::: Jay is sent to prison.",
        "SuspiciousOf(a_1, a_2) ::: Richards is now suspicious of Elena's behavior.",
        "Search(a_1, a_2) ::: Richards and Morrison search Elena's trailer.",
        "GathersInformation(a_2, a_4) ::: Elena has gathered information about Kristen's rape.",
        "FormsTestimony(a_2, GathersInformation(a_2, a_4)) ::: Elena's testimony is influenced by the information she gathered about Kristen's rape.",
        "Collaborating(a_2, a_0, a_3) ::: Marie, Elena, and Chad are suspected to be collaborating."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "525": [
    {
      "id": 525,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 0,
      "paragraph": " Marie Clifton (Laine) is set to inherit two beautiful diamonds, called the \"mother and daughter\", which her late mother bestowed to her. Marie's step-father, Jay Clifton (Johnson), challenges the will, claiming that Marie isn't ready for the responsibility, but actually wants to take the diamonds for himself. At a sexual education seminar at Marie's school, physician Dr. Chad Johnson (Melendez) and probation officer Kristen Richards (Meyer) discuss sex crimes, and Richards reveals she was a victim of an anonymous rapist many years before.",
      "question_template": "Dr. John made frequent visits to the school because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Marie is set to inherit two beautiful diamonds",
        "Jay Clifton challenges the will",
        "Jay wants to take the diamonds for himself",
        "Richards reveals she was a victim of an anonymous rapist"
      ],
      "predicates": [
        "Inherit(x, y) ::: x is set to inherit y.",
        "ChallengeWill(x, y) ::: x challenges the will of y.",
        "ReadyForResponsibility(x) ::: x is ready for the responsibility.",
        "WantsToTakeForSelf(x, y) ::: x wants to take y for himself.",
        "VictimOf(x, y) ::: x is a victim of y.",
        "Discuss(x, y) ::: x discusses y."
      ],
      "premises": [
        "Inherit(marie, motherAndDaughter) ::: Marie Clifton is set to inherit the \"mother and daughter\" diamonds.",
        "ChallengeWill(jay, willOf(marie)) ::: Jay Clifton challenges the will of Marie Clifton.",
        "¬ReadyForResponsibility(marie) ::: Marie Clifton is not ready for the responsibility (implied by Jay's claim).",
        "WantsToTakeForSelf(jay, motherAndDaughter) ::: Jay Clifton wants to take the diamonds for himself by challenging the will of Marie Clifton.",
        "Discuss(chad, sexCrimes) ::: Dr. Chad Johnson discusses sex crimes at the seminar.",
        "VictimOf(kristen, anonymousRapist) ::: Kristen Richards reveals she was a victim of an anonymous rapist many years before."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 525,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 1,
      "paragraph": "At Marie's swim-meet, Jay encounters towel girl Elena Sandoval (McCoy), and invites her to Marie's eighteenth birthday party. Elena attends the party but is assaulted by Marie, who says that Elena is not welcome. Jay comforts Elena, and brings her to the construction site of one of his buildings for privacy. Later, Elena alleges that Jay raped her at the site. Detective Michael Morrison (Ashby) is placed on the case, as is Richards, who is Elena's probation officer. Chad is placed in charge of documenting Elena's injuries, and testifies to the court that Elena was raped.",
      "question_template": "Dr. John made frequent visits to the school because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Chad is placed in charge of documenting Elena's injuries",
        "- Testifies to the court that Elena was raped"
      ],
      "predicates": [
        "NotWelcome(a_2, a_0) ::: Elena Sandoval is not welcome at Marie's birthday party.",
        "Comforts(a_3, a_2) ::: Jay comforts Elena Sandoval after the assault.",
        "Alleges(a_2, a_3) ::: Elena Sandoval alleges that Jay raped her.",
        "Testifies(a_1, a_2) ::: Chad testifies that Elena Sandoval was raped."
      ],
      "premises": [
        "NotWelcome(a_2, a_0) ::: Elena Sandoval is not welcome at Marie's birthday party.",
        "Comforts(a_3, a_2) ::: Jay comforts Elena Sandoval after the assault.",
        "Alleges(a_2, a_3) ::: Elena Sandoval alleges that Jay raped her.",
        "Testifies(a_1, a_2) ::: Chad testifies that Elena Sandoval was raped."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 525,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 2,
      "paragraph": "Marie believes that Elena is doing this for money and tells Jay to pay her off. When Jay admits that he's broke, Marie suggests that they sell the diamonds. Jay agrees, and revokes his claim to the will, giving Marie custody of the diamonds so she can sell them off. However, this was a ploy between Elena, Marie and Chad to get the diamonds, and the trio are in a sexual relationship together.",
      "question_template": "Dr. John made frequent visits to the school because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- This was a ploy between Elena, Marie and Chad to get the diamonds",
        "- The trio are in a sexual relationship together"
      ],
      "predicates": [
        "Believes(x, y) ::: x believes y.",
        "PayOff(x, y) ::: x pays off y.",
        "Broke(x) ::: x is broke.",
        "Sell(x, y) ::: x sells y.",
        "RevokesClaim(x, y) ::: x revokes his claim to y.",
        "Custody(x, y) ::: x has custody of y.",
        "InRelationship(x, y) ::: x is in a relationship with y.",
        "Conspire(x, y) ::: x conspires with y.",
        "Collaborate(x, y) ::: x collaborates with y."
      ],
      "premises": [
        "Believes(marie, payOff(elena)) ::: Marie believes that Elena is doing this for money and tells Jay to pay her off.",
        "Broke(jay) ::: Jay admits that he's broke.",
        "Conspire(marie, jay) ::: Marie and Jay conspire to sell the diamonds to resolve their financial issues.",
        "Sell(marie, diamonds) ::: Marie suggests that they sell the diamonds.",
        "Agree(jay, sell(diamonds)) ::: Jay agrees to sell the diamonds.",
        "RevokesClaim(jay, will) ::: Jay revokes his claim to the will.",
        "Custody(marie, diamonds) ::: Marie has custody of the diamonds so she can sell them off.",
        "Collaborate(elena, marie, chad) ::: Elena, Marie, and Chad collaborate in a scheme to acquire the diamonds.",
        "InRelationship(elena, marie) ::: Elena is in a relationship with Marie.",
        "InRelationship(elena, chad) ::: Elena is in a relationship with Chad.",
        "InRelationship(marie, chad) ::: Marie is in a relationship with Chad."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 525,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 3,
      "paragraph": "Jay believes that Elena will recant her accusation after being paid off, but at the next court session Elena testifies that Jay also threatened to kill her. Jay is sent to prison, but Richards is now suspicious of Elena's behavior. Richards and Morrison search Elena's trailer and discover she's gathered information about Kristen's rape, using it to form her testimony. Richards and Morrison discuss their suspicions with Jay, and conclude that Marie, Elena and Chad must be working together.",
      "question_template": "Dr. John made frequent visits to the school because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Marie, Elena and Chad must be working together"
      ],
      "predicates": [
        "Believes(x, y) ::: x believes y.",
        "Recant(x) ::: x recants her accusation.",
        "Threatens(x, y) ::: x threatens to kill y.",
        "SentToPrison(x) ::: x is sent to prison.",
        "SuspiciousOf(x, y) ::: x is suspicious of y's behavior.",
        "Search(x, y) ::: x searches y's trailer.",
        "GathersInformation(x, y) ::: x gathers information about y.",
        "FormsTestimony(x, y) ::: x forms her testimony based on y.",
        "Collaborating(x, y, z) ::: x, y, and z are collaborating."
      ],
      "premises": [
        "Believes(a_3, Recant(a_2)) ::: Jay believes that Elena will recant her accusation after being paid off.",
        "Testifies(a_2, Threatens(a_3, a_2)) ::: At the next court session, Elena testifies that Jay also threatened to kill her.",
        "SentToPrison(a_3) ::: Jay is sent to prison.",
        "SuspiciousOf(a_1, a_2) ::: Richards is now suspicious of Elena's behavior.",
        "Search(a_1, a_2) ::: Richards and Morrison search Elena's trailer.",
        "GathersInformation(a_2, a_4) ::: Elena has gathered information about Kristen's rape.",
        "FormsTestimony(a_2, GathersInformation(a_2, a_4)) ::: Elena's testimony is influenced by the information she gathered about Kristen's rape.",
        "Collaborating(a_2, a_0, a_3) ::: Marie, Elena, and Chad are suspected to be collaborating."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 525,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 4,
      "paragraph": "Chad is questioned by Richards and Morrison, and fears they suspect him. He turns on Marie, drugging her and stealing the diamonds. Marie and Elena give chase, following Chad into the woods, where Marie kills him with a tire iron. Marie then meets the diamond buyer Chad set up, but learns that the diamonds are fake. Elena, who is left to deal with Chad's body, is caught by Richards and Morrison.",
      "question_template": "Dr. John made frequent visits to the school because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Fears they suspect him",
        "- Drugging her and stealing the diamonds"
      ],
      "predicates": [
        "Questioned(x, y) ::: x is questioned by y.",
        "Fears(x, y) ::: x fears y suspects him.",
        "TurnsOn(x, y) ::: x turns on y.",
        "Drugs(x, y) ::: x drugs y.",
        "Steals(x, y) ::: x steals y.",
        "Chases(x, y) ::: x gives chase to y.",
        "Kills(x, y) ::: x kills y.",
        "Learns(x, y) ::: x learns that y is fake.",
        "Caught(x, y) ::: x is caught by y.",
        "DealsWith(x, y) ::: x deals with y."
      ],
      "premises": [
        "Questioned(chad, richards) ∧ Fears(chad, richards) ::: Chad is questioned by Richards and fears they suspect him.",
        "TurnsOn(chad, marie) ∧ Drugs(chad, marie) ∧ Steals(chad, diamonds) ::: Chad turns on Marie, drugging her and stealing the diamonds.",
        "Chases(marie, chad) ∧ Chases(elena, chad) ::: Marie and Elena give chase, following Chad into the woods.",
        "Kills(marie, chad) ::: Marie kills Chad with a tire iron.",
        "Learns(marie, diamonds) ::: Marie learns that the diamonds are fake after Chad's death.",
        "Caught(elena, richards) ::: Elena, who is left to deal with Chad's body, is caught by Richards.",
        "Conclusion:",
        "Fears(chad, richards) ::: Chad fears that Richards suspects him.",
        "Steals(chad, diamonds) ::: Chad steals the diamonds.",
        "Kills(marie, chad) ::: Marie kills Chad."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "526": [
    {
      "id": 526,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 4,
      "paragraph": "Chad is questioned by Richards and Morrison, and fears they suspect him. He turns on Marie, drugging her and stealing the diamonds. Marie and Elena give chase, following Chad into the woods, where Marie kills him with a tire iron. Marie then meets the diamond buyer Chad set up, but learns that the diamonds are fake. Elena, who is left to deal with Chad's body, is caught by Richards and Morrison.",
      "question_template": "Dr. John turns out to be [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Marie kills him with a tire iron"
      ],
      "predicates": [
        "Questioned(x, y) ::: x is questioned by y.",
        "Fears(x, y) ::: x fears y suspects him.",
        "TurnsOn(x, y) ::: x turns on y.",
        "Drugs(x, y) ::: x drugs y.",
        "Steals(x, y) ::: x steals y.",
        "Chases(x, y) ::: x gives chase to y.",
        "Kills(x, y) ::: x kills y.",
        "Learns(x, y) ::: x learns that y is fake.",
        "Caught(x, y) ::: x is caught by y.",
        "DealsWith(x, y) ::: x deals with y."
      ],
      "premises": [
        "Questioned(chad, richards) ∧ Fears(chad, richards) ::: Chad is questioned by Richards and fears they suspect him.",
        "TurnsOn(chad, marie) ∧ Drugs(chad, marie) ∧ Steals(chad, diamonds) ::: Chad turns on Marie, drugging her and stealing the diamonds.",
        "Chases(marie, chad) ∧ Chases(elena, chad) ::: Marie and Elena give chase, following Chad into the woods.",
        "Kills(marie, chad) ::: Marie kills Chad with a tire iron.",
        "Learns(marie, diamonds) ::: Marie learns that the diamonds are fake after Chad's death.",
        "Caught(elena, richards) ::: Elena, who is left to deal with Chad's body, is caught by Richards.",
        "Conclusion:",
        "Fears(chad, richards) ::: Chad fears that Richards suspects him.",
        "Steals(chad, diamonds) ::: Chad steals the diamonds.",
        "Kills(marie, chad) ::: Marie kills Chad."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "527": [
    {
      "id": 527,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 1,
      "paragraph": "At Marie's swim-meet, Jay encounters towel girl Elena Sandoval (McCoy), and invites her to Marie's eighteenth birthday party. Elena attends the party but is assaulted by Marie, who says that Elena is not welcome. Jay comforts Elena, and brings her to the construction site of one of his buildings for privacy. Later, Elena alleges that Jay raped her at the site. Detective Michael Morrison (Ashby) is placed on the case, as is Richards, who is Elena's probation officer. Chad is placed in charge of documenting Elena's injuries, and testifies to the court that Elena was raped.",
      "question_template": "[[CANDIDATE_ANSWER]] is the title that Polly's father inherited.",
      "candidate_answers": [
        "- Elena attends the party but is assaulted by Marie, who says that Elena is not welcome.",
        "- Jay comforts Elena, and brings her to the construction site of one of his buildings for privacy.",
        "- Later, Elena alleges that Jay raped her at the site."
      ],
      "predicates": [
        "NotWelcome(a_2, a_0) ::: Elena Sandoval is not welcome at Marie's birthday party.",
        "Comforts(a_3, a_2) ::: Jay comforts Elena Sandoval after the assault.",
        "Alleges(a_2, a_3) ::: Elena Sandoval alleges that Jay raped her.",
        "Testifies(a_1, a_2) ::: Chad testifies that Elena Sandoval was raped."
      ],
      "premises": [
        "NotWelcome(a_2, a_0) ::: Elena Sandoval is not welcome at Marie's birthday party.",
        "Comforts(a_3, a_2) ::: Jay comforts Elena Sandoval after the assault.",
        "Alleges(a_2, a_3) ::: Elena Sandoval alleges that Jay raped her.",
        "Testifies(a_1, a_2) ::: Chad testifies that Elena Sandoval was raped."
      ],
      "conclusions": [
        "None",
        "None",
        "Alleges(a_2, a_3)"
      ]
    },
    {
      "id": 527,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 2,
      "paragraph": "Marie believes that Elena is doing this for money and tells Jay to pay her off. When Jay admits that he's broke, Marie suggests that they sell the diamonds. Jay agrees, and revokes his claim to the will, giving Marie custody of the diamonds so she can sell them off. However, this was a ploy between Elena, Marie and Chad to get the diamonds, and the trio are in a sexual relationship together.",
      "question_template": "[[CANDIDATE_ANSWER]] is the title that Polly's father inherited.",
      "candidate_answers": [
        "- A ploy between Elena, Marie and Chad to get the diamonds",
        "- The trio are in a sexual relationship together"
      ],
      "predicates": [
        "Believes(x, y) ::: x believes y.",
        "PayOff(x, y) ::: x pays off y.",
        "Broke(x) ::: x is broke.",
        "Sell(x, y) ::: x sells y.",
        "RevokesClaim(x, y) ::: x revokes his claim to y.",
        "Custody(x, y) ::: x has custody of y.",
        "InRelationship(x, y) ::: x is in a relationship with y.",
        "Conspire(x, y) ::: x conspires with y.",
        "Collaborate(x, y) ::: x collaborates with y."
      ],
      "premises": [
        "Believes(marie, payOff(elena)) ::: Marie believes that Elena is doing this for money and tells Jay to pay her off.",
        "Broke(jay) ::: Jay admits that he's broke.",
        "Conspire(marie, jay) ::: Marie and Jay conspire to sell the diamonds to resolve their financial issues.",
        "Sell(marie, diamonds) ::: Marie suggests that they sell the diamonds.",
        "Agree(jay, sell(diamonds)) ::: Jay agrees to sell the diamonds.",
        "RevokesClaim(jay, will) ::: Jay revokes his claim to the will.",
        "Custody(marie, diamonds) ::: Marie has custody of the diamonds so she can sell them off.",
        "Collaborate(elena, marie, chad) ::: Elena, Marie, and Chad collaborate in a scheme to acquire the diamonds.",
        "InRelationship(elena, marie) ::: Elena is in a relationship with Marie.",
        "InRelationship(elena, chad) ::: Elena is in a relationship with Chad.",
        "InRelationship(marie, chad) ::: Marie is in a relationship with Chad."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 527,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 3,
      "paragraph": "Jay believes that Elena will recant her accusation after being paid off, but at the next court session Elena testifies that Jay also threatened to kill her. Jay is sent to prison, but Richards is now suspicious of Elena's behavior. Richards and Morrison search Elena's trailer and discover she's gathered information about Kristen's rape, using it to form her testimony. Richards and Morrison discuss their suspicions with Jay, and conclude that Marie, Elena and Chad must be working together.",
      "question_template": "[[CANDIDATE_ANSWER]] is the title that Polly's father inherited.",
      "candidate_answers": [
        "- Elena testifies that Jay also threatened to kill her.",
        "- She's gathered information about Kristen's rape, using it to form her testimony."
      ],
      "predicates": [
        "Believes(x, y) ::: x believes y.",
        "Recant(x) ::: x recants her accusation.",
        "Threatens(x, y) ::: x threatens to kill y.",
        "SentToPrison(x) ::: x is sent to prison.",
        "SuspiciousOf(x, y) ::: x is suspicious of y's behavior.",
        "Search(x, y) ::: x searches y's trailer.",
        "GathersInformation(x, y) ::: x gathers information about y.",
        "FormsTestimony(x, y) ::: x forms her testimony based on y.",
        "Collaborating(x, y, z) ::: x, y, and z are collaborating."
      ],
      "premises": [
        "Believes(a_3, Recant(a_2)) ::: Jay believes that Elena will recant her accusation after being paid off.",
        "Testifies(a_2, Threatens(a_3, a_2)) ::: At the next court session, Elena testifies that Jay also threatened to kill her.",
        "SentToPrison(a_3) ::: Jay is sent to prison.",
        "SuspiciousOf(a_1, a_2) ::: Richards is now suspicious of Elena's behavior.",
        "Search(a_1, a_2) ::: Richards and Morrison search Elena's trailer.",
        "GathersInformation(a_2, a_4) ::: Elena has gathered information about Kristen's rape.",
        "FormsTestimony(a_2, GathersInformation(a_2, a_4)) ::: Elena's testimony is influenced by the information she gathered about Kristen's rape.",
        "Collaborating(a_2, a_0, a_3) ::: Marie, Elena, and Chad are suspected to be collaborating."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 527,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 4,
      "paragraph": "Chad is questioned by Richards and Morrison, and fears they suspect him. He turns on Marie, drugging her and stealing the diamonds. Marie and Elena give chase, following Chad into the woods, where Marie kills him with a tire iron. Marie then meets the diamond buyer Chad set up, but learns that the diamonds are fake. Elena, who is left to deal with Chad's body, is caught by Richards and Morrison.",
      "question_template": "[[CANDIDATE_ANSWER]] is the title that Polly's father inherited.",
      "candidate_answers": [
        "- Chad turns on Marie, drugging her and stealing the diamonds.",
        "- Marie kills him with a tire iron.",
        "- Marie then meets the diamond buyer Chad set up, but learns that the diamonds are fake.",
        "- Elena, who is left to deal with Chad's body, is caught by Richards and Morrison."
      ],
      "predicates": [
        "Questioned(x, y) ::: x is questioned by y.",
        "Fears(x, y) ::: x fears y suspects him.",
        "TurnsOn(x, y) ::: x turns on y.",
        "Drugs(x, y) ::: x drugs y.",
        "Steals(x, y) ::: x steals y.",
        "Chases(x, y) ::: x gives chase to y.",
        "Kills(x, y) ::: x kills y.",
        "Learns(x, y) ::: x learns that y is fake.",
        "Caught(x, y) ::: x is caught by y.",
        "DealsWith(x, y) ::: x deals with y."
      ],
      "premises": [
        "Questioned(chad, richards) ∧ Fears(chad, richards) ::: Chad is questioned by Richards and fears they suspect him.",
        "TurnsOn(chad, marie) ∧ Drugs(chad, marie) ∧ Steals(chad, diamonds) ::: Chad turns on Marie, drugging her and stealing the diamonds.",
        "Chases(marie, chad) ∧ Chases(elena, chad) ::: Marie and Elena give chase, following Chad into the woods.",
        "Kills(marie, chad) ::: Marie kills Chad with a tire iron.",
        "Learns(marie, diamonds) ::: Marie learns that the diamonds are fake after Chad's death.",
        "Caught(elena, richards) ::: Elena, who is left to deal with Chad's body, is caught by Richards.",
        "Conclusion:",
        "Fears(chad, richards) ::: Chad fears that Richards suspects him.",
        "Steals(chad, diamonds) ::: Chad steals the diamonds.",
        "Kills(marie, chad) ::: Marie kills Chad."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "528": [
    {
      "id": 528,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 3,
      "paragraph": "Jay believes that Elena will recant her accusation after being paid off, but at the next court session Elena testifies that Jay also threatened to kill her. Jay is sent to prison, but Richards is now suspicious of Elena's behavior. Richards and Morrison search Elena's trailer and discover she's gathered information about Kristen's rape, using it to form her testimony. Richards and Morrison discuss their suspicions with Jay, and conclude that Marie, Elena and Chad must be working together.",
      "question_template": "M. Paul is forced to go to [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Jay believes that Elena will recant her accusation after being paid off",
        "- Elena testifies that Jay also threatened to kill her",
        "- Richards and Morrison search Elena's trailer and discover she's gathered information about Kristen's rape, using it to form her testimony",
        "- Richards and Morrison discuss their suspicions with Jay, and conclude that Marie, Elena and Chad must be working together"
      ],
      "predicates": [
        "Believes(x, y) ::: x believes y.",
        "Recant(x) ::: x recants her accusation.",
        "Threatens(x, y) ::: x threatens to kill y.",
        "SentToPrison(x) ::: x is sent to prison.",
        "SuspiciousOf(x, y) ::: x is suspicious of y's behavior.",
        "Search(x, y) ::: x searches y's trailer.",
        "GathersInformation(x, y) ::: x gathers information about y.",
        "FormsTestimony(x, y) ::: x forms her testimony based on y.",
        "Collaborating(x, y, z) ::: x, y, and z are collaborating."
      ],
      "premises": [
        "Believes(a_3, Recant(a_2)) ::: Jay believes that Elena will recant her accusation after being paid off.",
        "Testifies(a_2, Threatens(a_3, a_2)) ::: At the next court session, Elena testifies that Jay also threatened to kill her.",
        "SentToPrison(a_3) ::: Jay is sent to prison.",
        "SuspiciousOf(a_1, a_2) ::: Richards is now suspicious of Elena's behavior.",
        "Search(a_1, a_2) ::: Richards and Morrison search Elena's trailer.",
        "GathersInformation(a_2, a_4) ::: Elena has gathered information about Kristen's rape.",
        "FormsTestimony(a_2, GathersInformation(a_2, a_4)) ::: Elena's testimony is influenced by the information she gathered about Kristen's rape.",
        "Collaborating(a_2, a_0, a_3) ::: Marie, Elena, and Chad are suspected to be collaborating."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "529": [
    {
      "id": 529,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 1,
      "paragraph": "At Marie's swim-meet, Jay encounters towel girl Elena Sandoval (McCoy), and invites her to Marie's eighteenth birthday party. Elena attends the party but is assaulted by Marie, who says that Elena is not welcome. Jay comforts Elena, and brings her to the construction site of one of his buildings for privacy. Later, Elena alleges that Jay raped her at the site. Detective Michael Morrison (Ashby) is placed on the case, as is Richards, who is Elena's probation officer. Chad is placed in charge of documenting Elena's injuries, and testifies to the court that Elena was raped.",
      "question_template": "Lucy has [[CANDIDATE_ANSWER]] with a figure of a nun.",
      "candidate_answers": [
        "Jay",
        "Elena alleges that Jay raped her at the site",
        "Detective Michael Morrison",
        "Chad is placed in charge of documenting Elena's injuries"
      ],
      "predicates": [
        "NotWelcome(a_2, a_0) ::: Elena Sandoval is not welcome at Marie's birthday party.",
        "Comforts(a_3, a_2) ::: Jay comforts Elena Sandoval after the assault.",
        "Alleges(a_2, a_3) ::: Elena Sandoval alleges that Jay raped her.",
        "Testifies(a_1, a_2) ::: Chad testifies that Elena Sandoval was raped."
      ],
      "premises": [
        "NotWelcome(a_2, a_0) ::: Elena Sandoval is not welcome at Marie's birthday party.",
        "Comforts(a_3, a_2) ::: Jay comforts Elena Sandoval after the assault.",
        "Alleges(a_2, a_3) ::: Elena Sandoval alleges that Jay raped her.",
        "Testifies(a_1, a_2) ::: Chad testifies that Elena Sandoval was raped."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 529,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 3,
      "paragraph": "Jay believes that Elena will recant her accusation after being paid off, but at the next court session Elena testifies that Jay also threatened to kill her. Jay is sent to prison, but Richards is now suspicious of Elena's behavior. Richards and Morrison search Elena's trailer and discover she's gathered information about Kristen's rape, using it to form her testimony. Richards and Morrison discuss their suspicions with Jay, and conclude that Marie, Elena and Chad must be working together.",
      "question_template": "Lucy has [[CANDIDATE_ANSWER]] with a figure of a nun.",
      "candidate_answers": [
        "Kristen's rape",
        "Elena's trailer",
        "Marie, Elena and Chad must be working together"
      ],
      "predicates": [
        "Believes(x, y) ::: x believes y.",
        "Recant(x) ::: x recants her accusation.",
        "Threatens(x, y) ::: x threatens to kill y.",
        "SentToPrison(x) ::: x is sent to prison.",
        "SuspiciousOf(x, y) ::: x is suspicious of y's behavior.",
        "Search(x, y) ::: x searches y's trailer.",
        "GathersInformation(x, y) ::: x gathers information about y.",
        "FormsTestimony(x, y) ::: x forms her testimony based on y.",
        "Collaborating(x, y, z) ::: x, y, and z are collaborating."
      ],
      "premises": [
        "Believes(a_3, Recant(a_2)) ::: Jay believes that Elena will recant her accusation after being paid off.",
        "Testifies(a_2, Threatens(a_3, a_2)) ::: At the next court session, Elena testifies that Jay also threatened to kill her.",
        "SentToPrison(a_3) ::: Jay is sent to prison.",
        "SuspiciousOf(a_1, a_2) ::: Richards is now suspicious of Elena's behavior.",
        "Search(a_1, a_2) ::: Richards and Morrison search Elena's trailer.",
        "GathersInformation(a_2, a_4) ::: Elena has gathered information about Kristen's rape.",
        "FormsTestimony(a_2, GathersInformation(a_2, a_4)) ::: Elena's testimony is influenced by the information she gathered about Kristen's rape.",
        "Collaborating(a_2, a_0, a_3) ::: Marie, Elena, and Chad are suspected to be collaborating."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 529,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 5,
      "paragraph": "Richards and Morrison give Elena a task: wear a wire and get Marie to admit she killed Chad, and the charges against Elena will be lessened. Elena goes to Marie and plays along with her plan to get the real diamonds from Chad's safe at the construction site. Throughout, Elena repeatedly tries to get Marie to confess, but is unsuccessful. When Marie and Elena finally get the diamonds from the safe, Elena pulls a gun on her and flees with the diamonds, prompting Marie to chase her with her own gun. Richards and Morrison, who are listening in from nearby, enter the construction site separately. During the hide-and-seek, Richards finds Marie and shoots her in the chest, killing her. Afterward, Elena claims there were no diamonds, and is escorted from the scene by Richards.",
      "question_template": "Lucy has [[CANDIDATE_ANSWER]] with a figure of a nun.",
      "candidate_answers": [
        "Richards",
        "Morrison",
        "Elena",
        "Marie",
        "Chad"
      ],
      "predicates": [
        "WearsWire(x) ::: x wears a wire.",
        "GetsConfession(x, y) ::: x gets y to confess.",
        "ChargesLessened(x) ::: the charges against x will be lessened.",
        "Finds(x, y) ::: x finds y.",
        "Shoots(x, y) ::: x shoots y.",
        "Kills(x, y) ::: x kills y.",
        "Chases(x, y) ::: x chases y.",
        "HasDiamonds(x) ::: x has the diamonds.",
        "Plans(x, y) ::: x has a plan involving y."
      ],
      "premises": [
        "WearsWire(a_2) ∧ GetsConfession(a_2, a_3) âˆ’> ChargesLessened(a_2) ::: If Elena wears a wire and gets Marie to confess, the charges against Elena will be lessened.",
        "Finds(a_1, a_3) âˆ’> Shoots(a_1, a_3) ::: If Richards finds Marie, Richards may shoot Marie.",
        "Shoots(a_1, a_3) âˆ’> Kills(a_1, a_3) ::: If Richards shoots Marie, Richards may kill Marie.",
        "HasDiamonds(a_2) ∧ Chases(a_3, a_2) ::: Marie chases Elena with her own gun after Elena flees with the diamonds."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 529,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 6,
      "paragraph": "At the end it's revealed that Richards and Elena are mother and daughter. Jay was the man that raped Kristen in the past, and Elena is their daughter. During the credits, scenes are shown explaining how they managed to pull their plan off.",
      "question_template": "Lucy has [[CANDIDATE_ANSWER]] with a figure of a nun.",
      "candidate_answers": [
        "Jay"
      ],
      "predicates": [
        "Mother(x, y) ::: x is the mother of y.",
        "Daughter(x, y) ::: x is the daughter of y.",
        "Raped(x, y) ::: x raped y.",
        "Revealed(x) ::: x is revealed in the end.",
        "Shows(x, y) ::: x shows y during the credits.",
        "Plan(x) ::: x is a plan."
      ],
      "premises": [
        "Mother(a_1, a_2) ::: Richards is the mother of Elena.",
        "Daughter(a_2, a_1) ::: Elena is the daughter of Richards.",
        "Raped(a_3, a_4) ::: Jay raped Kristen.",
        "Revealed(Events(c_0)) ::: It is revealed that Richards and Elena are mother and daughter.",
        "Shows(Credits(d_0), Scenes(d_1)) ::: During the credits, scenes are shown explaining how they managed to pull their plan off.",
        "Plan(c_1) ::: There is a plan that they managed to pull off.",
        "Conclusion:",
        "Mother(a_1, a_2) ∧ Daughter(a_2, a_1) ::: Richards and Elena are mother and daughter.",
        "Raped(a_3, a_4) ::: Jay was the man that raped Kristen in the past."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "530": [
    {
      "id": 530,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 2,
      "paragraph": "Marie believes that Elena is doing this for money and tells Jay to pay her off. When Jay admits that he's broke, Marie suggests that they sell the diamonds. Jay agrees, and revokes his claim to the will, giving Marie custody of the diamonds so she can sell them off. However, this was a ploy between Elena, Marie and Chad to get the diamonds, and the trio are in a sexual relationship together.",
      "question_template": "Richards and Elena are [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Marie believes that Elena is doing this for money",
        "Marie suggests that they sell the diamonds",
        "Jay agrees, and revokes his claim to the will",
        "This was a ploy between Elena, Marie and Chad to get the diamonds"
      ],
      "predicates": [
        "Believes(x, y) ::: x believes y.",
        "PayOff(x, y) ::: x pays off y.",
        "Broke(x) ::: x is broke.",
        "Sell(x, y) ::: x sells y.",
        "RevokesClaim(x, y) ::: x revokes his claim to y.",
        "Custody(x, y) ::: x has custody of y.",
        "InRelationship(x, y) ::: x is in a relationship with y.",
        "Conspire(x, y) ::: x conspires with y.",
        "Collaborate(x, y) ::: x collaborates with y."
      ],
      "premises": [
        "Believes(marie, payOff(elena)) ::: Marie believes that Elena is doing this for money and tells Jay to pay her off.",
        "Broke(jay) ::: Jay admits that he's broke.",
        "Conspire(marie, jay) ::: Marie and Jay conspire to sell the diamonds to resolve their financial issues.",
        "Sell(marie, diamonds) ::: Marie suggests that they sell the diamonds.",
        "Agree(jay, sell(diamonds)) ::: Jay agrees to sell the diamonds.",
        "RevokesClaim(jay, will) ::: Jay revokes his claim to the will.",
        "Custody(marie, diamonds) ::: Marie has custody of the diamonds so she can sell them off.",
        "Collaborate(elena, marie, chad) ::: Elena, Marie, and Chad collaborate in a scheme to acquire the diamonds.",
        "InRelationship(elena, marie) ::: Elena is in a relationship with Marie.",
        "InRelationship(elena, chad) ::: Elena is in a relationship with Chad.",
        "InRelationship(marie, chad) ::: Marie is in a relationship with Chad."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "531": [
    {
      "id": 531,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 3,
      "paragraph": "Jay believes that Elena will recant her accusation after being paid off, but at the next court session Elena testifies that Jay also threatened to kill her. Jay is sent to prison, but Richards is now suspicious of Elena's behavior. Richards and Morrison search Elena's trailer and discover she's gathered information about Kristen's rape, using it to form her testimony. Richards and Morrison discuss their suspicions with Jay, and conclude that Marie, Elena and Chad must be working together.",
      "question_template": "Jay Clifton challenges the will of Marie's mother for [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Kristen's rape",
        "Elena's testimony"
      ],
      "predicates": [
        "Believes(x, y) ::: x believes y.",
        "Recant(x) ::: x recants her accusation.",
        "Threatens(x, y) ::: x threatens to kill y.",
        "SentToPrison(x) ::: x is sent to prison.",
        "SuspiciousOf(x, y) ::: x is suspicious of y's behavior.",
        "Search(x, y) ::: x searches y's trailer.",
        "GathersInformation(x, y) ::: x gathers information about y.",
        "FormsTestimony(x, y) ::: x forms her testimony based on y.",
        "Collaborating(x, y, z) ::: x, y, and z are collaborating."
      ],
      "premises": [
        "Believes(a_3, Recant(a_2)) ::: Jay believes that Elena will recant her accusation after being paid off.",
        "Testifies(a_2, Threatens(a_3, a_2)) ::: At the next court session, Elena testifies that Jay also threatened to kill her.",
        "SentToPrison(a_3) ::: Jay is sent to prison.",
        "SuspiciousOf(a_1, a_2) ::: Richards is now suspicious of Elena's behavior.",
        "Search(a_1, a_2) ::: Richards and Morrison search Elena's trailer.",
        "GathersInformation(a_2, a_4) ::: Elena has gathered information about Kristen's rape.",
        "FormsTestimony(a_2, GathersInformation(a_2, a_4)) ::: Elena's testimony is influenced by the information she gathered about Kristen's rape.",
        "Collaborating(a_2, a_0, a_3) ::: Marie, Elena, and Chad are suspected to be collaborating."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "533": [
    {
      "id": 533,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 0,
      "paragraph": " Marie Clifton (Laine) is set to inherit two beautiful diamonds, called the \"mother and daughter\", which her late mother bestowed to her. Marie's step-father, Jay Clifton (Johnson), challenges the will, claiming that Marie isn't ready for the responsibility, but actually wants to take the diamonds for himself. At a sexual education seminar at Marie's school, physician Dr. Chad Johnson (Melendez) and probation officer Kristen Richards (Meyer) discuss sex crimes, and Richards reveals she was a victim of an anonymous rapist many years before.",
      "question_template": "Marie reacts to Elena's presence at her birthday party by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Marie tells Jay to take the diamonds for himself."
      ],
      "predicates": [
        "Inherit(x, y) ::: x is set to inherit y.",
        "ChallengeWill(x, y) ::: x challenges the will of y.",
        "ReadyForResponsibility(x) ::: x is ready for the responsibility.",
        "WantsToTakeForSelf(x, y) ::: x wants to take y for himself.",
        "VictimOf(x, y) ::: x is a victim of y.",
        "Discuss(x, y) ::: x discusses y."
      ],
      "premises": [
        "Inherit(marie, motherAndDaughter) ::: Marie Clifton is set to inherit the \"mother and daughter\" diamonds.",
        "ChallengeWill(jay, willOf(marie)) ::: Jay Clifton challenges the will of Marie Clifton.",
        "¬ReadyForResponsibility(marie) ::: Marie Clifton is not ready for the responsibility (implied by Jay's claim).",
        "WantsToTakeForSelf(jay, motherAndDaughter) ::: Jay Clifton wants to take the diamonds for himself by challenging the will of Marie Clifton.",
        "Discuss(chad, sexCrimes) ::: Dr. Chad Johnson discusses sex crimes at the seminar.",
        "VictimOf(kristen, anonymousRapist) ::: Kristen Richards reveals she was a victim of an anonymous rapist many years before."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 533,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 3,
      "paragraph": "Jay believes that Elena will recant her accusation after being paid off, but at the next court session Elena testifies that Jay also threatened to kill her. Jay is sent to prison, but Richards is now suspicious of Elena's behavior. Richards and Morrison search Elena's trailer and discover she's gathered information about Kristen's rape, using it to form her testimony. Richards and Morrison discuss their suspicions with Jay, and conclude that Marie, Elena and Chad must be working together.",
      "question_template": "Marie reacts to Elena's presence at her birthday party by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Marie, Elena and Chad must be working together"
      ],
      "predicates": [
        "Believes(x, y) ::: x believes y.",
        "Recant(x) ::: x recants her accusation.",
        "Threatens(x, y) ::: x threatens to kill y.",
        "SentToPrison(x) ::: x is sent to prison.",
        "SuspiciousOf(x, y) ::: x is suspicious of y's behavior.",
        "Search(x, y) ::: x searches y's trailer.",
        "GathersInformation(x, y) ::: x gathers information about y.",
        "FormsTestimony(x, y) ::: x forms her testimony based on y.",
        "Collaborating(x, y, z) ::: x, y, and z are collaborating."
      ],
      "premises": [
        "Believes(a_3, Recant(a_2)) ::: Jay believes that Elena will recant her accusation after being paid off.",
        "Testifies(a_2, Threatens(a_3, a_2)) ::: At the next court session, Elena testifies that Jay also threatened to kill her.",
        "SentToPrison(a_3) ::: Jay is sent to prison.",
        "SuspiciousOf(a_1, a_2) ::: Richards is now suspicious of Elena's behavior.",
        "Search(a_1, a_2) ::: Richards and Morrison search Elena's trailer.",
        "GathersInformation(a_2, a_4) ::: Elena has gathered information about Kristen's rape.",
        "FormsTestimony(a_2, GathersInformation(a_2, a_4)) ::: Elena's testimony is influenced by the information she gathered about Kristen's rape.",
        "Collaborating(a_2, a_0, a_3) ::: Marie, Elena, and Chad are suspected to be collaborating."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "534": [
    {
      "id": 534,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 0,
      "paragraph": " Marie Clifton (Laine) is set to inherit two beautiful diamonds, called the \"mother and daughter\", which her late mother bestowed to her. Marie's step-father, Jay Clifton (Johnson), challenges the will, claiming that Marie isn't ready for the responsibility, but actually wants to take the diamonds for himself. At a sexual education seminar at Marie's school, physician Dr. Chad Johnson (Melendez) and probation officer Kristen Richards (Meyer) discuss sex crimes, and Richards reveals she was a victim of an anonymous rapist many years before.",
      "question_template": "As a result of Jay taking Elena to the construction site for privacy after leaving the party, [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Marie is set to inherit two beautiful diamonds",
        "Marie’s step-father, Jay Clifton, challenges the will",
        "Marie isn't ready for the responsibility",
        "Marie’s step-father actually wants to take the diamonds for himself",
        "At a sexual education seminar at Marie's school, physician Dr. Chad Johnson and probation officer Kristen Richards discuss sex crimes",
        "Richards reveals she was a victim of an anonymous rapist many years before"
      ],
      "predicates": [
        "Inherit(x, y) ::: x is set to inherit y.",
        "ChallengeWill(x, y) ::: x challenges the will of y.",
        "ReadyForResponsibility(x) ::: x is ready for the responsibility.",
        "WantsToTakeForSelf(x, y) ::: x wants to take y for himself.",
        "VictimOf(x, y) ::: x is a victim of y.",
        "Discuss(x, y) ::: x discusses y."
      ],
      "premises": [
        "Inherit(marie, motherAndDaughter) ::: Marie Clifton is set to inherit the \"mother and daughter\" diamonds.",
        "ChallengeWill(jay, willOf(marie)) ::: Jay Clifton challenges the will of Marie Clifton.",
        "¬ReadyForResponsibility(marie) ::: Marie Clifton is not ready for the responsibility (implied by Jay's claim).",
        "WantsToTakeForSelf(jay, motherAndDaughter) ::: Jay Clifton wants to take the diamonds for himself by challenging the will of Marie Clifton.",
        "Discuss(chad, sexCrimes) ::: Dr. Chad Johnson discusses sex crimes at the seminar.",
        "VictimOf(kristen, anonymousRapist) ::: Kristen Richards reveals she was a victim of an anonymous rapist many years before."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 534,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 2,
      "paragraph": "Marie believes that Elena is doing this for money and tells Jay to pay her off. When Jay admits that he's broke, Marie suggests that they sell the diamonds. Jay agrees, and revokes his claim to the will, giving Marie custody of the diamonds so she can sell them off. However, this was a ploy between Elena, Marie and Chad to get the diamonds, and the trio are in a sexual relationship together.",
      "question_template": "As a result of Jay taking Elena to the construction site for privacy after leaving the party, [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Marie believes that Elena is doing this for money",
        "Marie suggests that they sell the diamonds",
        "This was a ploy between Elena, Marie and Chad to get the diamonds"
      ],
      "predicates": [
        "Believes(x, y) ::: x believes y.",
        "PayOff(x, y) ::: x pays off y.",
        "Broke(x) ::: x is broke.",
        "Sell(x, y) ::: x sells y.",
        "RevokesClaim(x, y) ::: x revokes his claim to y.",
        "Custody(x, y) ::: x has custody of y.",
        "InRelationship(x, y) ::: x is in a relationship with y.",
        "Conspire(x, y) ::: x conspires with y.",
        "Collaborate(x, y) ::: x collaborates with y."
      ],
      "premises": [
        "Believes(marie, payOff(elena)) ::: Marie believes that Elena is doing this for money and tells Jay to pay her off.",
        "Broke(jay) ::: Jay admits that he's broke.",
        "Conspire(marie, jay) ::: Marie and Jay conspire to sell the diamonds to resolve their financial issues.",
        "Sell(marie, diamonds) ::: Marie suggests that they sell the diamonds.",
        "Agree(jay, sell(diamonds)) ::: Jay agrees to sell the diamonds.",
        "RevokesClaim(jay, will) ::: Jay revokes his claim to the will.",
        "Custody(marie, diamonds) ::: Marie has custody of the diamonds so she can sell them off.",
        "Collaborate(elena, marie, chad) ::: Elena, Marie, and Chad collaborate in a scheme to acquire the diamonds.",
        "InRelationship(elena, marie) ::: Elena is in a relationship with Marie.",
        "InRelationship(elena, chad) ::: Elena is in a relationship with Chad.",
        "InRelationship(marie, chad) ::: Marie is in a relationship with Chad."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 534,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 3,
      "paragraph": "Jay believes that Elena will recant her accusation after being paid off, but at the next court session Elena testifies that Jay also threatened to kill her. Jay is sent to prison, but Richards is now suspicious of Elena's behavior. Richards and Morrison search Elena's trailer and discover she's gathered information about Kristen's rape, using it to form her testimony. Richards and Morrison discuss their suspicions with Jay, and conclude that Marie, Elena and Chad must be working together.",
      "question_template": "As a result of Jay taking Elena to the construction site for privacy after leaving the party, [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Marie, Elena and Chad must be working together"
      ],
      "predicates": [
        "Believes(x, y) ::: x believes y.",
        "Recant(x) ::: x recants her accusation.",
        "Threatens(x, y) ::: x threatens to kill y.",
        "SentToPrison(x) ::: x is sent to prison.",
        "SuspiciousOf(x, y) ::: x is suspicious of y's behavior.",
        "Search(x, y) ::: x searches y's trailer.",
        "GathersInformation(x, y) ::: x gathers information about y.",
        "FormsTestimony(x, y) ::: x forms her testimony based on y.",
        "Collaborating(x, y, z) ::: x, y, and z are collaborating."
      ],
      "premises": [
        "Believes(a_3, Recant(a_2)) ::: Jay believes that Elena will recant her accusation after being paid off.",
        "Testifies(a_2, Threatens(a_3, a_2)) ::: At the next court session, Elena testifies that Jay also threatened to kill her.",
        "SentToPrison(a_3) ::: Jay is sent to prison.",
        "SuspiciousOf(a_1, a_2) ::: Richards is now suspicious of Elena's behavior.",
        "Search(a_1, a_2) ::: Richards and Morrison search Elena's trailer.",
        "GathersInformation(a_2, a_4) ::: Elena has gathered information about Kristen's rape.",
        "FormsTestimony(a_2, GathersInformation(a_2, a_4)) ::: Elena's testimony is influenced by the information she gathered about Kristen's rape.",
        "Collaborating(a_2, a_0, a_3) ::: Marie, Elena, and Chad are suspected to be collaborating."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 534,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 4,
      "paragraph": "Chad is questioned by Richards and Morrison, and fears they suspect him. He turns on Marie, drugging her and stealing the diamonds. Marie and Elena give chase, following Chad into the woods, where Marie kills him with a tire iron. Marie then meets the diamond buyer Chad set up, but learns that the diamonds are fake. Elena, who is left to deal with Chad's body, is caught by Richards and Morrison.",
      "question_template": "As a result of Jay taking Elena to the construction site for privacy after leaving the party, [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Marie kills him with a tire iron",
        "Elena, who is left to deal with Chad's body, is caught by Richards and Morrison"
      ],
      "predicates": [
        "Questioned(x, y) ::: x is questioned by y.",
        "Fears(x, y) ::: x fears y suspects him.",
        "TurnsOn(x, y) ::: x turns on y.",
        "Drugs(x, y) ::: x drugs y.",
        "Steals(x, y) ::: x steals y.",
        "Chases(x, y) ::: x gives chase to y.",
        "Kills(x, y) ::: x kills y.",
        "Learns(x, y) ::: x learns that y is fake.",
        "Caught(x, y) ::: x is caught by y.",
        "DealsWith(x, y) ::: x deals with y."
      ],
      "premises": [
        "Questioned(chad, richards) ∧ Fears(chad, richards) ::: Chad is questioned by Richards and fears they suspect him.",
        "TurnsOn(chad, marie) ∧ Drugs(chad, marie) ∧ Steals(chad, diamonds) ::: Chad turns on Marie, drugging her and stealing the diamonds.",
        "Chases(marie, chad) ∧ Chases(elena, chad) ::: Marie and Elena give chase, following Chad into the woods.",
        "Kills(marie, chad) ::: Marie kills Chad with a tire iron.",
        "Learns(marie, diamonds) ::: Marie learns that the diamonds are fake after Chad's death.",
        "Caught(elena, richards) ::: Elena, who is left to deal with Chad's body, is caught by Richards.",
        "Conclusion:",
        "Fears(chad, richards) ::: Chad fears that Richards suspects him.",
        "Steals(chad, diamonds) ::: Chad steals the diamonds.",
        "Kills(marie, chad) ::: Marie kills Chad."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 534,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 5,
      "paragraph": "Richards and Morrison give Elena a task: wear a wire and get Marie to admit she killed Chad, and the charges against Elena will be lessened. Elena goes to Marie and plays along with her plan to get the real diamonds from Chad's safe at the construction site. Throughout, Elena repeatedly tries to get Marie to confess, but is unsuccessful. When Marie and Elena finally get the diamonds from the safe, Elena pulls a gun on her and flees with the diamonds, prompting Marie to chase her with her own gun. Richards and Morrison, who are listening in from nearby, enter the construction site separately. During the hide-and-seek, Richards finds Marie and shoots her in the chest, killing her. Afterward, Elena claims there were no diamonds, and is escorted from the scene by Richards.",
      "question_template": "As a result of Jay taking Elena to the construction site for privacy after leaving the party, [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Elena pulls a gun on her and flees with the diamonds",
        "- Marie to chase her with her own gun"
      ],
      "predicates": [
        "WearsWire(x) ::: x wears a wire.",
        "GetsConfession(x, y) ::: x gets y to confess.",
        "ChargesLessened(x) ::: the charges against x will be lessened.",
        "Finds(x, y) ::: x finds y.",
        "Shoots(x, y) ::: x shoots y.",
        "Kills(x, y) ::: x kills y.",
        "Chases(x, y) ::: x chases y.",
        "HasDiamonds(x) ::: x has the diamonds.",
        "Plans(x, y) ::: x has a plan involving y."
      ],
      "premises": [
        "WearsWire(a_2) ∧ GetsConfession(a_2, a_3) âˆ’> ChargesLessened(a_2) ::: If Elena wears a wire and gets Marie to confess, the charges against Elena will be lessened.",
        "Finds(a_1, a_3) âˆ’> Shoots(a_1, a_3) ::: If Richards finds Marie, Richards may shoot Marie.",
        "Shoots(a_1, a_3) âˆ’> Kills(a_1, a_3) ::: If Richards shoots Marie, Richards may kill Marie.",
        "HasDiamonds(a_2) ∧ Chases(a_3, a_2) ::: Marie chases Elena with her own gun after Elena flees with the diamonds."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "535": [
    {
      "id": 535,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 2,
      "paragraph": "Marie believes that Elena is doing this for money and tells Jay to pay her off. When Jay admits that he's broke, Marie suggests that they sell the diamonds. Jay agrees, and revokes his claim to the will, giving Marie custody of the diamonds so she can sell them off. However, this was a ploy between Elena, Marie and Chad to get the diamonds, and the trio are in a sexual relationship together.",
      "question_template": "Chad betrayed Marie because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Marie believes that Elena is doing this for money",
        "Marie suggests that they sell the diamonds",
        "Jay agrees, and revokes his claim to the will",
        "This was a ploy between Elena, Marie and Chad to get the diamonds"
      ],
      "predicates": [
        "Believes(x, y) ::: x believes y.",
        "PayOff(x, y) ::: x pays off y.",
        "Broke(x) ::: x is broke.",
        "Sell(x, y) ::: x sells y.",
        "RevokesClaim(x, y) ::: x revokes his claim to y.",
        "Custody(x, y) ::: x has custody of y.",
        "InRelationship(x, y) ::: x is in a relationship with y.",
        "Conspire(x, y) ::: x conspires with y.",
        "Collaborate(x, y) ::: x collaborates with y."
      ],
      "premises": [
        "Believes(marie, payOff(elena)) ::: Marie believes that Elena is doing this for money and tells Jay to pay her off.",
        "Broke(jay) ::: Jay admits that he's broke.",
        "Conspire(marie, jay) ::: Marie and Jay conspire to sell the diamonds to resolve their financial issues.",
        "Sell(marie, diamonds) ::: Marie suggests that they sell the diamonds.",
        "Agree(jay, sell(diamonds)) ::: Jay agrees to sell the diamonds.",
        "RevokesClaim(jay, will) ::: Jay revokes his claim to the will.",
        "Custody(marie, diamonds) ::: Marie has custody of the diamonds so she can sell them off.",
        "Collaborate(elena, marie, chad) ::: Elena, Marie, and Chad collaborate in a scheme to acquire the diamonds.",
        "InRelationship(elena, marie) ::: Elena is in a relationship with Marie.",
        "InRelationship(elena, chad) ::: Elena is in a relationship with Chad.",
        "InRelationship(marie, chad) ::: Marie is in a relationship with Chad."
      ],
      "conclusions": [
        "Believes(marie, payOff(elena)) → InRelationship(elena, chad)",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 535,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 3,
      "paragraph": "Jay believes that Elena will recant her accusation after being paid off, but at the next court session Elena testifies that Jay also threatened to kill her. Jay is sent to prison, but Richards is now suspicious of Elena's behavior. Richards and Morrison search Elena's trailer and discover she's gathered information about Kristen's rape, using it to form her testimony. Richards and Morrison discuss their suspicions with Jay, and conclude that Marie, Elena and Chad must be working together.",
      "question_template": "Chad betrayed Marie because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Elena testifies that Jay also threatened to kill her."
      ],
      "predicates": [
        "Believes(x, y) ::: x believes y.",
        "Recant(x) ::: x recants her accusation.",
        "Threatens(x, y) ::: x threatens to kill y.",
        "SentToPrison(x) ::: x is sent to prison.",
        "SuspiciousOf(x, y) ::: x is suspicious of y's behavior.",
        "Search(x, y) ::: x searches y's trailer.",
        "GathersInformation(x, y) ::: x gathers information about y.",
        "FormsTestimony(x, y) ::: x forms her testimony based on y.",
        "Collaborating(x, y, z) ::: x, y, and z are collaborating."
      ],
      "premises": [
        "Believes(a_3, Recant(a_2)) ::: Jay believes that Elena will recant her accusation after being paid off.",
        "Testifies(a_2, Threatens(a_3, a_2)) ::: At the next court session, Elena testifies that Jay also threatened to kill her.",
        "SentToPrison(a_3) ::: Jay is sent to prison.",
        "SuspiciousOf(a_1, a_2) ::: Richards is now suspicious of Elena's behavior.",
        "Search(a_1, a_2) ::: Richards and Morrison search Elena's trailer.",
        "GathersInformation(a_2, a_4) ::: Elena has gathered information about Kristen's rape.",
        "FormsTestimony(a_2, GathersInformation(a_2, a_4)) ::: Elena's testimony is influenced by the information she gathered about Kristen's rape.",
        "Collaborating(a_2, a_0, a_3) ::: Marie, Elena, and Chad are suspected to be collaborating."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 535,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 6,
      "paragraph": "At the end it's revealed that Richards and Elena are mother and daughter. Jay was the man that raped Kristen in the past, and Elena is their daughter. During the credits, scenes are shown explaining how they managed to pull their plan off.",
      "question_template": "Chad betrayed Marie because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Jay was the man that raped Kristen in the past"
      ],
      "predicates": [
        "Mother(x, y) ::: x is the mother of y.",
        "Daughter(x, y) ::: x is the daughter of y.",
        "Raped(x, y) ::: x raped y.",
        "Revealed(x) ::: x is revealed in the end.",
        "Shows(x, y) ::: x shows y during the credits.",
        "Plan(x) ::: x is a plan."
      ],
      "premises": [
        "Mother(a_1, a_2) ::: Richards is the mother of Elena.",
        "Daughter(a_2, a_1) ::: Elena is the daughter of Richards.",
        "Raped(a_3, a_4) ::: Jay raped Kristen.",
        "Revealed(Events(c_0)) ::: It is revealed that Richards and Elena are mother and daughter.",
        "Shows(Credits(d_0), Scenes(d_1)) ::: During the credits, scenes are shown explaining how they managed to pull their plan off.",
        "Plan(c_1) ::: There is a plan that they managed to pull off.",
        "Conclusion:",
        "Mother(a_1, a_2) ∧ Daughter(a_2, a_1) ::: Richards and Elena are mother and daughter.",
        "Raped(a_3, a_4) ::: Jay was the man that raped Kristen in the past."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "538": [
    {
      "id": 538,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 2,
      "paragraph": "Marie believes that Elena is doing this for money and tells Jay to pay her off. When Jay admits that he's broke, Marie suggests that they sell the diamonds. Jay agrees, and revokes his claim to the will, giving Marie custody of the diamonds so she can sell them off. However, this was a ploy between Elena, Marie and Chad to get the diamonds, and the trio are in a sexual relationship together.",
      "question_template": "Morrison and Richards persuade Elena to betray Marie by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Jay admits that he's broke",
        "Marie suggests that they sell the diamonds",
        "Jay agrees, and revokes his claim to the will, giving Marie custody of the diamonds"
      ],
      "predicates": [
        "Believes(x, y) ::: x believes y.",
        "PayOff(x, y) ::: x pays off y.",
        "Broke(x) ::: x is broke.",
        "Sell(x, y) ::: x sells y.",
        "RevokesClaim(x, y) ::: x revokes his claim to y.",
        "Custody(x, y) ::: x has custody of y.",
        "InRelationship(x, y) ::: x is in a relationship with y.",
        "Conspire(x, y) ::: x conspires with y.",
        "Collaborate(x, y) ::: x collaborates with y."
      ],
      "premises": [
        "Believes(marie, payOff(elena)) ::: Marie believes that Elena is doing this for money and tells Jay to pay her off.",
        "Broke(jay) ::: Jay admits that he's broke.",
        "Conspire(marie, jay) ::: Marie and Jay conspire to sell the diamonds to resolve their financial issues.",
        "Sell(marie, diamonds) ::: Marie suggests that they sell the diamonds.",
        "Agree(jay, sell(diamonds)) ::: Jay agrees to sell the diamonds.",
        "RevokesClaim(jay, will) ::: Jay revokes his claim to the will.",
        "Custody(marie, diamonds) ::: Marie has custody of the diamonds so she can sell them off.",
        "Collaborate(elena, marie, chad) ::: Elena, Marie, and Chad collaborate in a scheme to acquire the diamonds.",
        "InRelationship(elena, marie) ::: Elena is in a relationship with Marie.",
        "InRelationship(elena, chad) ::: Elena is in a relationship with Chad.",
        "InRelationship(marie, chad) ::: Marie is in a relationship with Chad."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "542": [
    {
      "id": 542,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 1,
      "paragraph": "At Marie's swim-meet, Jay encounters towel girl Elena Sandoval (McCoy), and invites her to Marie's eighteenth birthday party. Elena attends the party but is assaulted by Marie, who says that Elena is not welcome. Jay comforts Elena, and brings her to the construction site of one of his buildings for privacy. Later, Elena alleges that Jay raped her at the site. Detective Michael Morrison (Ashby) is placed on the case, as is Richards, who is Elena's probation officer. Chad is placed in charge of documenting Elena's injuries, and testifies to the court that Elena was raped.",
      "question_template": "[[CANDIDATE_ANSWER]] was the man that raped Kristen.",
      "candidate_answers": [
        "Jay"
      ],
      "predicates": [
        "NotWelcome(a_2, a_0) ::: Elena Sandoval is not welcome at Marie's birthday party.",
        "Comforts(a_3, a_2) ::: Jay comforts Elena Sandoval after the assault.",
        "Alleges(a_2, a_3) ::: Elena Sandoval alleges that Jay raped her.",
        "Testifies(a_1, a_2) ::: Chad testifies that Elena Sandoval was raped."
      ],
      "premises": [
        "NotWelcome(a_2, a_0) ::: Elena Sandoval is not welcome at Marie's birthday party.",
        "Comforts(a_3, a_2) ::: Jay comforts Elena Sandoval after the assault.",
        "Alleges(a_2, a_3) ::: Elena Sandoval alleges that Jay raped her.",
        "Testifies(a_1, a_2) ::: Chad testifies that Elena Sandoval was raped."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 542,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 3,
      "paragraph": "Jay believes that Elena will recant her accusation after being paid off, but at the next court session Elena testifies that Jay also threatened to kill her. Jay is sent to prison, but Richards is now suspicious of Elena's behavior. Richards and Morrison search Elena's trailer and discover she's gathered information about Kristen's rape, using it to form her testimony. Richards and Morrison discuss their suspicions with Jay, and conclude that Marie, Elena and Chad must be working together.",
      "question_template": "[[CANDIDATE_ANSWER]] was the man that raped Kristen.",
      "candidate_answers": [
        "Kristen"
      ],
      "predicates": [
        "Believes(x, y) ::: x believes y.",
        "Recant(x) ::: x recants her accusation.",
        "Threatens(x, y) ::: x threatens to kill y.",
        "SentToPrison(x) ::: x is sent to prison.",
        "SuspiciousOf(x, y) ::: x is suspicious of y's behavior.",
        "Search(x, y) ::: x searches y's trailer.",
        "GathersInformation(x, y) ::: x gathers information about y.",
        "FormsTestimony(x, y) ::: x forms her testimony based on y.",
        "Collaborating(x, y, z) ::: x, y, and z are collaborating."
      ],
      "premises": [
        "Believes(a_3, Recant(a_2)) ::: Jay believes that Elena will recant her accusation after being paid off.",
        "Testifies(a_2, Threatens(a_3, a_2)) ::: At the next court session, Elena testifies that Jay also threatened to kill her.",
        "SentToPrison(a_3) ::: Jay is sent to prison.",
        "SuspiciousOf(a_1, a_2) ::: Richards is now suspicious of Elena's behavior.",
        "Search(a_1, a_2) ::: Richards and Morrison search Elena's trailer.",
        "GathersInformation(a_2, a_4) ::: Elena has gathered information about Kristen's rape.",
        "FormsTestimony(a_2, GathersInformation(a_2, a_4)) ::: Elena's testimony is influenced by the information she gathered about Kristen's rape.",
        "Collaborating(a_2, a_0, a_3) ::: Marie, Elena, and Chad are suspected to be collaborating."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "543": [
    {
      "id": 543,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 0,
      "paragraph": " Marie Clifton (Laine) is set to inherit two beautiful diamonds, called the \"mother and daughter\", which her late mother bestowed to her. Marie's step-father, Jay Clifton (Johnson), challenges the will, claiming that Marie isn't ready for the responsibility, but actually wants to take the diamonds for himself. At a sexual education seminar at Marie's school, physician Dr. Chad Johnson (Melendez) and probation officer Kristen Richards (Meyer) discuss sex crimes, and Richards reveals she was a victim of an anonymous rapist many years before.",
      "question_template": "Marie tells Jay to [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Marie Clifton",
        "Jay Clifton",
        "Dr. Chad Johnson",
        "Kristen Richards"
      ],
      "predicates": [
        "Inherit(x, y) ::: x is set to inherit y.",
        "ChallengeWill(x, y) ::: x challenges the will of y.",
        "ReadyForResponsibility(x) ::: x is ready for the responsibility.",
        "WantsToTakeForSelf(x, y) ::: x wants to take y for himself.",
        "VictimOf(x, y) ::: x is a victim of y.",
        "Discuss(x, y) ::: x discusses y."
      ],
      "premises": [
        "Inherit(marie, motherAndDaughter) ::: Marie Clifton is set to inherit the \"mother and daughter\" diamonds.",
        "ChallengeWill(jay, willOf(marie)) ::: Jay Clifton challenges the will of Marie Clifton.",
        "¬ReadyForResponsibility(marie) ::: Marie Clifton is not ready for the responsibility (implied by Jay's claim).",
        "WantsToTakeForSelf(jay, motherAndDaughter) ::: Jay Clifton wants to take the diamonds for himself by challenging the will of Marie Clifton.",
        "Discuss(chad, sexCrimes) ::: Dr. Chad Johnson discusses sex crimes at the seminar.",
        "VictimOf(kristen, anonymousRapist) ::: Kristen Richards reveals she was a victim of an anonymous rapist many years before."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 543,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 2,
      "paragraph": "Marie believes that Elena is doing this for money and tells Jay to pay her off. When Jay admits that he's broke, Marie suggests that they sell the diamonds. Jay agrees, and revokes his claim to the will, giving Marie custody of the diamonds so she can sell them off. However, this was a ploy between Elena, Marie and Chad to get the diamonds, and the trio are in a sexual relationship together.",
      "question_template": "Marie tells Jay to [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Elena, Marie, and Chad"
      ],
      "predicates": [
        "Believes(x, y) ::: x believes y.",
        "PayOff(x, y) ::: x pays off y.",
        "Broke(x) ::: x is broke.",
        "Sell(x, y) ::: x sells y.",
        "RevokesClaim(x, y) ::: x revokes his claim to y.",
        "Custody(x, y) ::: x has custody of y.",
        "InRelationship(x, y) ::: x is in a relationship with y.",
        "Conspire(x, y) ::: x conspires with y.",
        "Collaborate(x, y) ::: x collaborates with y."
      ],
      "premises": [
        "Believes(marie, payOff(elena)) ::: Marie believes that Elena is doing this for money and tells Jay to pay her off.",
        "Broke(jay) ::: Jay admits that he's broke.",
        "Conspire(marie, jay) ::: Marie and Jay conspire to sell the diamonds to resolve their financial issues.",
        "Sell(marie, diamonds) ::: Marie suggests that they sell the diamonds.",
        "Agree(jay, sell(diamonds)) ::: Jay agrees to sell the diamonds.",
        "RevokesClaim(jay, will) ::: Jay revokes his claim to the will.",
        "Custody(marie, diamonds) ::: Marie has custody of the diamonds so she can sell them off.",
        "Collaborate(elena, marie, chad) ::: Elena, Marie, and Chad collaborate in a scheme to acquire the diamonds.",
        "InRelationship(elena, marie) ::: Elena is in a relationship with Marie.",
        "InRelationship(elena, chad) ::: Elena is in a relationship with Chad.",
        "InRelationship(marie, chad) ::: Marie is in a relationship with Chad."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 543,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 3,
      "paragraph": "Jay believes that Elena will recant her accusation after being paid off, but at the next court session Elena testifies that Jay also threatened to kill her. Jay is sent to prison, but Richards is now suspicious of Elena's behavior. Richards and Morrison search Elena's trailer and discover she's gathered information about Kristen's rape, using it to form her testimony. Richards and Morrison discuss their suspicions with Jay, and conclude that Marie, Elena and Chad must be working together.",
      "question_template": "Marie tells Jay to [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Marie, Elena and Chad"
      ],
      "predicates": [
        "Believes(x, y) ::: x believes y.",
        "Recant(x) ::: x recants her accusation.",
        "Threatens(x, y) ::: x threatens to kill y.",
        "SentToPrison(x) ::: x is sent to prison.",
        "SuspiciousOf(x, y) ::: x is suspicious of y's behavior.",
        "Search(x, y) ::: x searches y's trailer.",
        "GathersInformation(x, y) ::: x gathers information about y.",
        "FormsTestimony(x, y) ::: x forms her testimony based on y.",
        "Collaborating(x, y, z) ::: x, y, and z are collaborating."
      ],
      "premises": [
        "Believes(a_3, Recant(a_2)) ::: Jay believes that Elena will recant her accusation after being paid off.",
        "Testifies(a_2, Threatens(a_3, a_2)) ::: At the next court session, Elena testifies that Jay also threatened to kill her.",
        "SentToPrison(a_3) ::: Jay is sent to prison.",
        "SuspiciousOf(a_1, a_2) ::: Richards is now suspicious of Elena's behavior.",
        "Search(a_1, a_2) ::: Richards and Morrison search Elena's trailer.",
        "GathersInformation(a_2, a_4) ::: Elena has gathered information about Kristen's rape.",
        "FormsTestimony(a_2, GathersInformation(a_2, a_4)) ::: Elena's testimony is influenced by the information she gathered about Kristen's rape.",
        "Collaborating(a_2, a_0, a_3) ::: Marie, Elena, and Chad are suspected to be collaborating."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 543,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 4,
      "paragraph": "Chad is questioned by Richards and Morrison, and fears they suspect him. He turns on Marie, drugging her and stealing the diamonds. Marie and Elena give chase, following Chad into the woods, where Marie kills him with a tire iron. Marie then meets the diamond buyer Chad set up, but learns that the diamonds are fake. Elena, who is left to deal with Chad's body, is caught by Richards and Morrison.",
      "question_template": "Marie tells Jay to [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Marie, Chad, and Elena"
      ],
      "predicates": [
        "Questioned(x, y) ::: x is questioned by y.",
        "Fears(x, y) ::: x fears y suspects him.",
        "TurnsOn(x, y) ::: x turns on y.",
        "Drugs(x, y) ::: x drugs y.",
        "Steals(x, y) ::: x steals y.",
        "Chases(x, y) ::: x gives chase to y.",
        "Kills(x, y) ::: x kills y.",
        "Learns(x, y) ::: x learns that y is fake.",
        "Caught(x, y) ::: x is caught by y.",
        "DealsWith(x, y) ::: x deals with y."
      ],
      "premises": [
        "Questioned(chad, richards) ∧ Fears(chad, richards) ::: Chad is questioned by Richards and fears they suspect him.",
        "TurnsOn(chad, marie) ∧ Drugs(chad, marie) ∧ Steals(chad, diamonds) ::: Chad turns on Marie, drugging her and stealing the diamonds.",
        "Chases(marie, chad) ∧ Chases(elena, chad) ::: Marie and Elena give chase, following Chad into the woods.",
        "Kills(marie, chad) ::: Marie kills Chad with a tire iron.",
        "Learns(marie, diamonds) ::: Marie learns that the diamonds are fake after Chad's death.",
        "Caught(elena, richards) ::: Elena, who is left to deal with Chad's body, is caught by Richards.",
        "Conclusion:",
        "Fears(chad, richards) ::: Chad fears that Richards suspects him.",
        "Steals(chad, diamonds) ::: Chad steals the diamonds.",
        "Kills(marie, chad) ::: Marie kills Chad."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 543,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 5,
      "paragraph": "Richards and Morrison give Elena a task: wear a wire and get Marie to admit she killed Chad, and the charges against Elena will be lessened. Elena goes to Marie and plays along with her plan to get the real diamonds from Chad's safe at the construction site. Throughout, Elena repeatedly tries to get Marie to confess, but is unsuccessful. When Marie and Elena finally get the diamonds from the safe, Elena pulls a gun on her and flees with the diamonds, prompting Marie to chase her with her own gun. Richards and Morrison, who are listening in from nearby, enter the construction site separately. During the hide-and-seek, Richards finds Marie and shoots her in the chest, killing her. Afterward, Elena claims there were no diamonds, and is escorted from the scene by Richards.",
      "question_template": "Marie tells Jay to [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Elena",
        "Marie",
        "Richards and Morrison"
      ],
      "predicates": [
        "WearsWire(x) ::: x wears a wire.",
        "GetsConfession(x, y) ::: x gets y to confess.",
        "ChargesLessened(x) ::: the charges against x will be lessened.",
        "Finds(x, y) ::: x finds y.",
        "Shoots(x, y) ::: x shoots y.",
        "Kills(x, y) ::: x kills y.",
        "Chases(x, y) ::: x chases y.",
        "HasDiamonds(x) ::: x has the diamonds.",
        "Plans(x, y) ::: x has a plan involving y."
      ],
      "premises": [
        "WearsWire(a_2) ∧ GetsConfession(a_2, a_3) âˆ’> ChargesLessened(a_2) ::: If Elena wears a wire and gets Marie to confess, the charges against Elena will be lessened.",
        "Finds(a_1, a_3) âˆ’> Shoots(a_1, a_3) ::: If Richards finds Marie, Richards may shoot Marie.",
        "Shoots(a_1, a_3) âˆ’> Kills(a_1, a_3) ::: If Richards shoots Marie, Richards may kill Marie.",
        "HasDiamonds(a_2) ∧ Chases(a_3, a_2) ::: Marie chases Elena with her own gun after Elena flees with the diamonds."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 543,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 6,
      "paragraph": "At the end it's revealed that Richards and Elena are mother and daughter. Jay was the man that raped Kristen in the past, and Elena is their daughter. During the credits, scenes are shown explaining how they managed to pull their plan off.",
      "question_template": "Marie tells Jay to [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Richards and Elena",
        "Jay",
        "Kristen"
      ],
      "predicates": [
        "Mother(x, y) ::: x is the mother of y.",
        "Daughter(x, y) ::: x is the daughter of y.",
        "Raped(x, y) ::: x raped y.",
        "Revealed(x) ::: x is revealed in the end.",
        "Shows(x, y) ::: x shows y during the credits.",
        "Plan(x) ::: x is a plan."
      ],
      "premises": [
        "Mother(a_1, a_2) ::: Richards is the mother of Elena.",
        "Daughter(a_2, a_1) ::: Elena is the daughter of Richards.",
        "Raped(a_3, a_4) ::: Jay raped Kristen.",
        "Revealed(Events(c_0)) ::: It is revealed that Richards and Elena are mother and daughter.",
        "Shows(Credits(d_0), Scenes(d_1)) ::: During the credits, scenes are shown explaining how they managed to pull their plan off.",
        "Plan(c_1) ::: There is a plan that they managed to pull off.",
        "Conclusion:",
        "Mother(a_1, a_2) ∧ Daughter(a_2, a_1) ::: Richards and Elena are mother and daughter.",
        "Raped(a_3, a_4) ::: Jay was the man that raped Kristen in the past."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "545": [
    {
      "id": 545,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 2,
      "paragraph": "Marie believes that Elena is doing this for money and tells Jay to pay her off. When Jay admits that he's broke, Marie suggests that they sell the diamonds. Jay agrees, and revokes his claim to the will, giving Marie custody of the diamonds so she can sell them off. However, this was a ploy between Elena, Marie and Chad to get the diamonds, and the trio are in a sexual relationship together.",
      "question_template": "Elena alleged that Jay [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Marie believes that Elena is doing this for money",
        "A ploy between Elena, Marie and Chad to get the diamonds",
        "The trio are in a sexual relationship together"
      ],
      "predicates": [
        "Believes(x, y) ::: x believes y.",
        "PayOff(x, y) ::: x pays off y.",
        "Broke(x) ::: x is broke.",
        "Sell(x, y) ::: x sells y.",
        "RevokesClaim(x, y) ::: x revokes his claim to y.",
        "Custody(x, y) ::: x has custody of y.",
        "InRelationship(x, y) ::: x is in a relationship with y.",
        "Conspire(x, y) ::: x conspires with y.",
        "Collaborate(x, y) ::: x collaborates with y."
      ],
      "premises": [
        "Believes(marie, payOff(elena)) ::: Marie believes that Elena is doing this for money and tells Jay to pay her off.",
        "Broke(jay) ::: Jay admits that he's broke.",
        "Conspire(marie, jay) ::: Marie and Jay conspire to sell the diamonds to resolve their financial issues.",
        "Sell(marie, diamonds) ::: Marie suggests that they sell the diamonds.",
        "Agree(jay, sell(diamonds)) ::: Jay agrees to sell the diamonds.",
        "RevokesClaim(jay, will) ::: Jay revokes his claim to the will.",
        "Custody(marie, diamonds) ::: Marie has custody of the diamonds so she can sell them off.",
        "Collaborate(elena, marie, chad) ::: Elena, Marie, and Chad collaborate in a scheme to acquire the diamonds.",
        "InRelationship(elena, marie) ::: Elena is in a relationship with Marie.",
        "InRelationship(elena, chad) ::: Elena is in a relationship with Chad.",
        "InRelationship(marie, chad) ::: Marie is in a relationship with Chad."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 545,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 3,
      "paragraph": "Jay believes that Elena will recant her accusation after being paid off, but at the next court session Elena testifies that Jay also threatened to kill her. Jay is sent to prison, but Richards is now suspicious of Elena's behavior. Richards and Morrison search Elena's trailer and discover she's gathered information about Kristen's rape, using it to form her testimony. Richards and Morrison discuss their suspicions with Jay, and conclude that Marie, Elena and Chad must be working together.",
      "question_template": "Elena alleged that Jay [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Richards is suspicious of Elena's behavior.",
        "Richards and Morrison search Elena's trailer.",
        "Elena testifies that Jay also threatened to kill her."
      ],
      "predicates": [
        "Believes(x, y) ::: x believes y.",
        "Recant(x) ::: x recants her accusation.",
        "Threatens(x, y) ::: x threatens to kill y.",
        "SentToPrison(x) ::: x is sent to prison.",
        "SuspiciousOf(x, y) ::: x is suspicious of y's behavior.",
        "Search(x, y) ::: x searches y's trailer.",
        "GathersInformation(x, y) ::: x gathers information about y.",
        "FormsTestimony(x, y) ::: x forms her testimony based on y.",
        "Collaborating(x, y, z) ::: x, y, and z are collaborating."
      ],
      "premises": [
        "Believes(a_3, Recant(a_2)) ::: Jay believes that Elena will recant her accusation after being paid off.",
        "Testifies(a_2, Threatens(a_3, a_2)) ::: At the next court session, Elena testifies that Jay also threatened to kill her.",
        "SentToPrison(a_3) ::: Jay is sent to prison.",
        "SuspiciousOf(a_1, a_2) ::: Richards is now suspicious of Elena's behavior.",
        "Search(a_1, a_2) ::: Richards and Morrison search Elena's trailer.",
        "GathersInformation(a_2, a_4) ::: Elena has gathered information about Kristen's rape.",
        "FormsTestimony(a_2, GathersInformation(a_2, a_4)) ::: Elena's testimony is influenced by the information she gathered about Kristen's rape.",
        "Collaborating(a_2, a_0, a_3) ::: Marie, Elena, and Chad are suspected to be collaborating."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 545,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 6,
      "paragraph": "At the end it's revealed that Richards and Elena are mother and daughter. Jay was the man that raped Kristen in the past, and Elena is their daughter. During the credits, scenes are shown explaining how they managed to pull their plan off.",
      "question_template": "Elena alleged that Jay [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Richards and Elena are mother and daughter"
      ],
      "predicates": [
        "Mother(x, y) ::: x is the mother of y.",
        "Daughter(x, y) ::: x is the daughter of y.",
        "Raped(x, y) ::: x raped y.",
        "Revealed(x) ::: x is revealed in the end.",
        "Shows(x, y) ::: x shows y during the credits.",
        "Plan(x) ::: x is a plan."
      ],
      "premises": [
        "Mother(a_1, a_2) ::: Richards is the mother of Elena.",
        "Daughter(a_2, a_1) ::: Elena is the daughter of Richards.",
        "Raped(a_3, a_4) ::: Jay raped Kristen.",
        "Revealed(Events(c_0)) ::: It is revealed that Richards and Elena are mother and daughter.",
        "Shows(Credits(d_0), Scenes(d_1)) ::: During the credits, scenes are shown explaining how they managed to pull their plan off.",
        "Plan(c_1) ::: There is a plan that they managed to pull off.",
        "Conclusion:",
        "Mother(a_1, a_2) ∧ Daughter(a_2, a_1) ::: Richards and Elena are mother and daughter.",
        "Raped(a_3, a_4) ::: Jay was the man that raped Kristen in the past."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "546": [
    {
      "id": 546,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 1,
      "paragraph": "At Marie's swim-meet, Jay encounters towel girl Elena Sandoval (McCoy), and invites her to Marie's eighteenth birthday party. Elena attends the party but is assaulted by Marie, who says that Elena is not welcome. Jay comforts Elena, and brings her to the construction site of one of his buildings for privacy. Later, Elena alleges that Jay raped her at the site. Detective Michael Morrison (Ashby) is placed on the case, as is Richards, who is Elena's probation officer. Chad is placed in charge of documenting Elena's injuries, and testifies to the court that Elena was raped.",
      "question_template": "Kristen reveals [[CANDIDATE_ANSWER]] at the seminar.",
      "candidate_answers": [
        "- Detective Michael Morrison is placed on the case",
        "- Richards, who is Elena's probation officer",
        "- Chad is placed in charge of documenting Elena's injuries",
        "- Testifies to the court that Elena was raped"
      ],
      "predicates": [
        "NotWelcome(a_2, a_0) ::: Elena Sandoval is not welcome at Marie's birthday party.",
        "Comforts(a_3, a_2) ::: Jay comforts Elena Sandoval after the assault.",
        "Alleges(a_2, a_3) ::: Elena Sandoval alleges that Jay raped her.",
        "Testifies(a_1, a_2) ::: Chad testifies that Elena Sandoval was raped."
      ],
      "premises": [
        "NotWelcome(a_2, a_0) ::: Elena Sandoval is not welcome at Marie's birthday party.",
        "Comforts(a_3, a_2) ::: Jay comforts Elena Sandoval after the assault.",
        "Alleges(a_2, a_3) ::: Elena Sandoval alleges that Jay raped her.",
        "Testifies(a_1, a_2) ::: Chad testifies that Elena Sandoval was raped."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 546,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 4,
      "paragraph": "Chad is questioned by Richards and Morrison, and fears they suspect him. He turns on Marie, drugging her and stealing the diamonds. Marie and Elena give chase, following Chad into the woods, where Marie kills him with a tire iron. Marie then meets the diamond buyer Chad set up, but learns that the diamonds are fake. Elena, who is left to deal with Chad's body, is caught by Richards and Morrison.",
      "question_template": "Kristen reveals [[CANDIDATE_ANSWER]] at the seminar.",
      "candidate_answers": [
        "- Chad is questioned by Richards and Morrison",
        "- He fears they suspect him",
        "- He turns on Marie, drugging her and stealing the diamonds",
        "- Marie and Elena give chase, following Chad into the woods",
        "- Marie kills him with a tire iron",
        "- Marie then meets the diamond buyer Chad set up, but learns that the diamonds are fake",
        "- Elena, who is left to deal with Chad's body, is caught by Richards and Morrison"
      ],
      "predicates": [
        "Questioned(x, y) ::: x is questioned by y.",
        "Fears(x, y) ::: x fears y suspects him.",
        "TurnsOn(x, y) ::: x turns on y.",
        "Drugs(x, y) ::: x drugs y.",
        "Steals(x, y) ::: x steals y.",
        "Chases(x, y) ::: x gives chase to y.",
        "Kills(x, y) ::: x kills y.",
        "Learns(x, y) ::: x learns that y is fake.",
        "Caught(x, y) ::: x is caught by y.",
        "DealsWith(x, y) ::: x deals with y."
      ],
      "premises": [
        "Questioned(chad, richards) ∧ Fears(chad, richards) ::: Chad is questioned by Richards and fears they suspect him.",
        "TurnsOn(chad, marie) ∧ Drugs(chad, marie) ∧ Steals(chad, diamonds) ::: Chad turns on Marie, drugging her and stealing the diamonds.",
        "Chases(marie, chad) ∧ Chases(elena, chad) ::: Marie and Elena give chase, following Chad into the woods.",
        "Kills(marie, chad) ::: Marie kills Chad with a tire iron.",
        "Learns(marie, diamonds) ::: Marie learns that the diamonds are fake after Chad's death.",
        "Caught(elena, richards) ::: Elena, who is left to deal with Chad's body, is caught by Richards.",
        "Conclusion:",
        "Fears(chad, richards) ::: Chad fears that Richards suspects him.",
        "Steals(chad, diamonds) ::: Chad steals the diamonds.",
        "Kills(marie, chad) ::: Marie kills Chad."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "Caught(elena, richards)"
      ]
    }
  ],
  "548": [
    {
      "id": 548,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 1,
      "paragraph": "At Marie's swim-meet, Jay encounters towel girl Elena Sandoval (McCoy), and invites her to Marie's eighteenth birthday party. Elena attends the party but is assaulted by Marie, who says that Elena is not welcome. Jay comforts Elena, and brings her to the construction site of one of his buildings for privacy. Later, Elena alleges that Jay raped her at the site. Detective Michael Morrison (Ashby) is placed on the case, as is Richards, who is Elena's probation officer. Chad is placed in charge of documenting Elena's injuries, and testifies to the court that Elena was raped.",
      "question_template": "Jay challenges the will because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Elena alleges that Jay raped her at the site.",
        "Detective Michael Morrison is placed on the case.",
        "Chad is placed in charge of documenting Elena's injuries."
      ],
      "predicates": [
        "NotWelcome(a_2, a_0) ::: Elena Sandoval is not welcome at Marie's birthday party.",
        "Comforts(a_3, a_2) ::: Jay comforts Elena Sandoval after the assault.",
        "Alleges(a_2, a_3) ::: Elena Sandoval alleges that Jay raped her.",
        "Testifies(a_1, a_2) ::: Chad testifies that Elena Sandoval was raped."
      ],
      "premises": [
        "NotWelcome(a_2, a_0) ::: Elena Sandoval is not welcome at Marie's birthday party.",
        "Comforts(a_3, a_2) ::: Jay comforts Elena Sandoval after the assault.",
        "Alleges(a_2, a_3) ::: Elena Sandoval alleges that Jay raped her.",
        "Testifies(a_1, a_2) ::: Chad testifies that Elena Sandoval was raped."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 548,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 3,
      "paragraph": "Jay believes that Elena will recant her accusation after being paid off, but at the next court session Elena testifies that Jay also threatened to kill her. Jay is sent to prison, but Richards is now suspicious of Elena's behavior. Richards and Morrison search Elena's trailer and discover she's gathered information about Kristen's rape, using it to form her testimony. Richards and Morrison discuss their suspicions with Jay, and conclude that Marie, Elena and Chad must be working together.",
      "question_template": "Jay challenges the will because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Elena testifies that Jay also threatened to kill her.",
        "- She's gathered information about Kristen's rape, using it to form her testimony."
      ],
      "predicates": [
        "Believes(x, y) ::: x believes y.",
        "Recant(x) ::: x recants her accusation.",
        "Threatens(x, y) ::: x threatens to kill y.",
        "SentToPrison(x) ::: x is sent to prison.",
        "SuspiciousOf(x, y) ::: x is suspicious of y's behavior.",
        "Search(x, y) ::: x searches y's trailer.",
        "GathersInformation(x, y) ::: x gathers information about y.",
        "FormsTestimony(x, y) ::: x forms her testimony based on y.",
        "Collaborating(x, y, z) ::: x, y, and z are collaborating."
      ],
      "premises": [
        "Believes(a_3, Recant(a_2)) ::: Jay believes that Elena will recant her accusation after being paid off.",
        "Testifies(a_2, Threatens(a_3, a_2)) ::: At the next court session, Elena testifies that Jay also threatened to kill her.",
        "SentToPrison(a_3) ::: Jay is sent to prison.",
        "SuspiciousOf(a_1, a_2) ::: Richards is now suspicious of Elena's behavior.",
        "Search(a_1, a_2) ::: Richards and Morrison search Elena's trailer.",
        "GathersInformation(a_2, a_4) ::: Elena has gathered information about Kristen's rape.",
        "FormsTestimony(a_2, GathersInformation(a_2, a_4)) ::: Elena's testimony is influenced by the information she gathered about Kristen's rape.",
        "Collaborating(a_2, a_0, a_3) ::: Marie, Elena, and Chad are suspected to be collaborating."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "549": [
    {
      "id": 549,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 0,
      "paragraph": " Marie Clifton (Laine) is set to inherit two beautiful diamonds, called the \"mother and daughter\", which her late mother bestowed to her. Marie's step-father, Jay Clifton (Johnson), challenges the will, claiming that Marie isn't ready for the responsibility, but actually wants to take the diamonds for himself. At a sexual education seminar at Marie's school, physician Dr. Chad Johnson (Melendez) and probation officer Kristen Richards (Meyer) discuss sex crimes, and Richards reveals she was a victim of an anonymous rapist many years before.",
      "question_template": "The diamonds are nicknamed [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Marie’s step-father, Jay Clifton, challenges the will",
        "Claiming that Marie isn't ready for the responsibility",
        "Wants to take the diamonds for himself"
      ],
      "predicates": [
        "Inherit(x, y) ::: x is set to inherit y.",
        "ChallengeWill(x, y) ::: x challenges the will of y.",
        "ReadyForResponsibility(x) ::: x is ready for the responsibility.",
        "WantsToTakeForSelf(x, y) ::: x wants to take y for himself.",
        "VictimOf(x, y) ::: x is a victim of y.",
        "Discuss(x, y) ::: x discusses y."
      ],
      "premises": [
        "Inherit(marie, motherAndDaughter) ::: Marie Clifton is set to inherit the \"mother and daughter\" diamonds.",
        "ChallengeWill(jay, willOf(marie)) ::: Jay Clifton challenges the will of Marie Clifton.",
        "¬ReadyForResponsibility(marie) ::: Marie Clifton is not ready for the responsibility (implied by Jay's claim).",
        "WantsToTakeForSelf(jay, motherAndDaughter) ::: Jay Clifton wants to take the diamonds for himself by challenging the will of Marie Clifton.",
        "Discuss(chad, sexCrimes) ::: Dr. Chad Johnson discusses sex crimes at the seminar.",
        "VictimOf(kristen, anonymousRapist) ::: Kristen Richards reveals she was a victim of an anonymous rapist many years before."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 549,
      "context_id": "5328457f649b51410906d4d23b915f5147bee4ed",
      "paragraph_id": 2,
      "paragraph": "Marie believes that Elena is doing this for money and tells Jay to pay her off. When Jay admits that he's broke, Marie suggests that they sell the diamonds. Jay agrees, and revokes his claim to the will, giving Marie custody of the diamonds so she can sell them off. However, this was a ploy between Elena, Marie and Chad to get the diamonds, and the trio are in a sexual relationship together.",
      "question_template": "The diamonds are nicknamed [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Jay admits that he's broke",
        "- Marie suggests that they sell the diamonds",
        "- Jay agrees, and revokes his claim to the will, giving Marie custody of the diamonds so she can sell them off",
        "- This was a ploy between Elena, Marie and Chad to get the diamonds"
      ],
      "predicates": [
        "Believes(x, y) ::: x believes y.",
        "PayOff(x, y) ::: x pays off y.",
        "Broke(x) ::: x is broke.",
        "Sell(x, y) ::: x sells y.",
        "RevokesClaim(x, y) ::: x revokes his claim to y.",
        "Custody(x, y) ::: x has custody of y.",
        "InRelationship(x, y) ::: x is in a relationship with y.",
        "Conspire(x, y) ::: x conspires with y.",
        "Collaborate(x, y) ::: x collaborates with y."
      ],
      "premises": [
        "Believes(marie, payOff(elena)) ::: Marie believes that Elena is doing this for money and tells Jay to pay her off.",
        "Broke(jay) ::: Jay admits that he's broke.",
        "Conspire(marie, jay) ::: Marie and Jay conspire to sell the diamonds to resolve their financial issues.",
        "Sell(marie, diamonds) ::: Marie suggests that they sell the diamonds.",
        "Agree(jay, sell(diamonds)) ::: Jay agrees to sell the diamonds.",
        "RevokesClaim(jay, will) ::: Jay revokes his claim to the will.",
        "Custody(marie, diamonds) ::: Marie has custody of the diamonds so she can sell them off.",
        "Collaborate(elena, marie, chad) ::: Elena, Marie, and Chad collaborate in a scheme to acquire the diamonds.",
        "InRelationship(elena, marie) ::: Elena is in a relationship with Marie.",
        "InRelationship(elena, chad) ::: Elena is in a relationship with Chad.",
        "InRelationship(marie, chad) ::: Marie is in a relationship with Chad."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "550": [
    {
      "id": 550,
      "context_id": "55ac84541ede6e0f1106b2e4ab01a2bac2f21e39",
      "paragraph_id": 2,
      "paragraph": "After some time at sea, Godfrey is awakened one foggy night and told to abandon ship as the Dream is foundering. After jumping into the sea, Godfrey is washed ashore on a deserted island, where he soon finds Tartlet has also been marooned. Godfrey, with scant help from Tartlet, will have to learn to survive, to organize his life, face hostile intruders, and overcome other obstacles. Eventually, they are also joined by Carefinotu, whom Godfrey rescues from Polynesians visiting the island. By the end of the story the formerly jaded young man has discovered the value of independent effort, and he gains poise and courage. The marooned group are rescued and returned to San Francisco, where Godfrey is reunited with Phina. They agree to marry before continuing the world tour, this time together.",
      "question_template": "[[CANDIDATE_ANSWER]] was the man that raped Kristen.",
      "candidate_answers": [
        "Polynesians visiting the island"
      ],
      "predicates": [
        "Awakened(a_1) ::: Godfrey is awakened.",
        "AbandonShip(a_1) ::: Godfrey is told to abandon ship.",
        "WashedAshore(a_1, b_1) ::: Godfrey is washed ashore on a deserted island.",
        "Finds(a_1, a_2) ::: Godfrey finds Tartlet.",
        "LearnToSurvive(a_1) ::: Godfrey learns to survive.",
        "OrganizeLife(a_1) ::: Godfrey organizes his life.",
        "FaceIntruders(a_1) ::: Godfrey faces hostile intruders.",
        "OvercomeObstacles(a_1) ::: Godfrey overcomes other obstacles.",
        "Rescue(a_1, a_3) ::: Godfrey rescues Carefinotu.",
        "JoinedBy(a_1, a_3) ::: Godfrey is joined by Carefinotu.",
        "DiscoverValue(a_1) ::: Godfrey discovers the value of independent effort.",
        "GainsPoise(a_1) ::: Godfrey gains poise.",
        "GainsCourage(a_1) ::: Godfrey gains courage.",
        "Rescued(c_1) ::: The marooned group is rescued.",
        "Returned(c_1, b_2) ::: The marooned group is returned to San Francisco.",
        "Reunited(a_1, a_4) ::: Godfrey is reunited with Phina.",
        "AgreeToMarry(a_1, a_4) ::: Godfrey and Phina agree to marry.",
        "ContinueWorldTour(a_1, a_4) ::: Godfrey and Phina continue the world tour together."
      ],
      "premises": [
        "Awakened(a_1) ∧ AbandonShip(a_1) ::: Godfrey is awakened and told to abandon ship.",
        "WashedAshore(a_1, b_1) ::: Godfrey is washed ashore on a deserted island.",
        "Finds(a_1, a_2) ::: Godfrey finds Tartlet on the deserted island.",
        "LearnToSurvive(a_1) ∧ OrganizeLife(a_1) ∧ FaceIntruders(a_1) ∧ OvercomeObstacles(a_1) ::: Godfrey learns to survive, organizes his life, faces hostile intruders, and overcomes other obstacles.",
        "Rescue(a_1, a_3) ::: Godfrey rescues Carefinotu from Polynesians visiting the island.",
        "JoinedBy(a_1, a_3) ::: Godfrey is joined by Carefinotu.",
        "DiscoverValue(a_1) ∧ GainsPoise(a_1) ∧ GainsCourage(a_1) ::: Godfrey discovers the value of independent effort and gains poise and courage.",
        "Rescued(c_1) ∧ Returned(c_1, b_2) ::: The marooned group is rescued and returned to San Francisco.",
        "Reunited(a_1, a_4) ∧ AgreeToMarry(a_1, a_4) ::: Godfrey is reunited with Phina and they agree to marry.",
        "ContinueWorldTour(a_1, a_4) ::: Godfrey and Phina continue the world tour together."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "551": [
    {
      "id": 551,
      "context_id": "55ac84541ede6e0f1106b2e4ab01a2bac2f21e39",
      "paragraph_id": 2,
      "paragraph": "After some time at sea, Godfrey is awakened one foggy night and told to abandon ship as the Dream is foundering. After jumping into the sea, Godfrey is washed ashore on a deserted island, where he soon finds Tartlet has also been marooned. Godfrey, with scant help from Tartlet, will have to learn to survive, to organize his life, face hostile intruders, and overcome other obstacles. Eventually, they are also joined by Carefinotu, whom Godfrey rescues from Polynesians visiting the island. By the end of the story the formerly jaded young man has discovered the value of independent effort, and he gains poise and courage. The marooned group are rescued and returned to San Francisco, where Godfrey is reunited with Phina. They agree to marry before continuing the world tour, this time together.",
      "question_template": "Marie tells Jay to [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "San Francisco"
      ],
      "predicates": [
        "Awakened(a_1) ::: Godfrey is awakened.",
        "AbandonShip(a_1) ::: Godfrey is told to abandon ship.",
        "WashedAshore(a_1, b_1) ::: Godfrey is washed ashore on a deserted island.",
        "Finds(a_1, a_2) ::: Godfrey finds Tartlet.",
        "LearnToSurvive(a_1) ::: Godfrey learns to survive.",
        "OrganizeLife(a_1) ::: Godfrey organizes his life.",
        "FaceIntruders(a_1) ::: Godfrey faces hostile intruders.",
        "OvercomeObstacles(a_1) ::: Godfrey overcomes other obstacles.",
        "Rescue(a_1, a_3) ::: Godfrey rescues Carefinotu.",
        "JoinedBy(a_1, a_3) ::: Godfrey is joined by Carefinotu.",
        "DiscoverValue(a_1) ::: Godfrey discovers the value of independent effort.",
        "GainsPoise(a_1) ::: Godfrey gains poise.",
        "GainsCourage(a_1) ::: Godfrey gains courage.",
        "Rescued(c_1) ::: The marooned group is rescued.",
        "Returned(c_1, b_2) ::: The marooned group is returned to San Francisco.",
        "Reunited(a_1, a_4) ::: Godfrey is reunited with Phina.",
        "AgreeToMarry(a_1, a_4) ::: Godfrey and Phina agree to marry.",
        "ContinueWorldTour(a_1, a_4) ::: Godfrey and Phina continue the world tour together."
      ],
      "premises": [
        "Awakened(a_1) ∧ AbandonShip(a_1) ::: Godfrey is awakened and told to abandon ship.",
        "WashedAshore(a_1, b_1) ::: Godfrey is washed ashore on a deserted island.",
        "Finds(a_1, a_2) ::: Godfrey finds Tartlet on the deserted island.",
        "LearnToSurvive(a_1) ∧ OrganizeLife(a_1) ∧ FaceIntruders(a_1) ∧ OvercomeObstacles(a_1) ::: Godfrey learns to survive, organizes his life, faces hostile intruders, and overcomes other obstacles.",
        "Rescue(a_1, a_3) ::: Godfrey rescues Carefinotu from Polynesians visiting the island.",
        "JoinedBy(a_1, a_3) ::: Godfrey is joined by Carefinotu.",
        "DiscoverValue(a_1) ∧ GainsPoise(a_1) ∧ GainsCourage(a_1) ::: Godfrey discovers the value of independent effort and gains poise and courage.",
        "Rescued(c_1) ∧ Returned(c_1, b_2) ::: The marooned group is rescued and returned to San Francisco.",
        "Reunited(a_1, a_4) ∧ AgreeToMarry(a_1, a_4) ::: Godfrey is reunited with Phina and they agree to marry.",
        "ContinueWorldTour(a_1, a_4) ::: Godfrey and Phina continue the world tour together."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "563": [
    {
      "id": 563,
      "context_id": "55ac84541ede6e0f1106b2e4ab01a2bac2f21e39",
      "paragraph_id": 2,
      "paragraph": "After some time at sea, Godfrey is awakened one foggy night and told to abandon ship as the Dream is foundering. After jumping into the sea, Godfrey is washed ashore on a deserted island, where he soon finds Tartlet has also been marooned. Godfrey, with scant help from Tartlet, will have to learn to survive, to organize his life, face hostile intruders, and overcome other obstacles. Eventually, they are also joined by Carefinotu, whom Godfrey rescues from Polynesians visiting the island. By the end of the story the formerly jaded young man has discovered the value of independent effort, and he gains poise and courage. The marooned group are rescued and returned to San Francisco, where Godfrey is reunited with Phina. They agree to marry before continuing the world tour, this time together.",
      "question_template": "The relationship between Richards and Elena is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Tartlet"
      ],
      "predicates": [
        "Awakened(a_1) ::: Godfrey is awakened.",
        "AbandonShip(a_1) ::: Godfrey is told to abandon ship.",
        "WashedAshore(a_1, b_1) ::: Godfrey is washed ashore on a deserted island.",
        "Finds(a_1, a_2) ::: Godfrey finds Tartlet.",
        "LearnToSurvive(a_1) ::: Godfrey learns to survive.",
        "OrganizeLife(a_1) ::: Godfrey organizes his life.",
        "FaceIntruders(a_1) ::: Godfrey faces hostile intruders.",
        "OvercomeObstacles(a_1) ::: Godfrey overcomes other obstacles.",
        "Rescue(a_1, a_3) ::: Godfrey rescues Carefinotu.",
        "JoinedBy(a_1, a_3) ::: Godfrey is joined by Carefinotu.",
        "DiscoverValue(a_1) ::: Godfrey discovers the value of independent effort.",
        "GainsPoise(a_1) ::: Godfrey gains poise.",
        "GainsCourage(a_1) ::: Godfrey gains courage.",
        "Rescued(c_1) ::: The marooned group is rescued.",
        "Returned(c_1, b_2) ::: The marooned group is returned to San Francisco.",
        "Reunited(a_1, a_4) ::: Godfrey is reunited with Phina.",
        "AgreeToMarry(a_1, a_4) ::: Godfrey and Phina agree to marry.",
        "ContinueWorldTour(a_1, a_4) ::: Godfrey and Phina continue the world tour together."
      ],
      "premises": [
        "Awakened(a_1) ∧ AbandonShip(a_1) ::: Godfrey is awakened and told to abandon ship.",
        "WashedAshore(a_1, b_1) ::: Godfrey is washed ashore on a deserted island.",
        "Finds(a_1, a_2) ::: Godfrey finds Tartlet on the deserted island.",
        "LearnToSurvive(a_1) ∧ OrganizeLife(a_1) ∧ FaceIntruders(a_1) ∧ OvercomeObstacles(a_1) ::: Godfrey learns to survive, organizes his life, faces hostile intruders, and overcomes other obstacles.",
        "Rescue(a_1, a_3) ::: Godfrey rescues Carefinotu from Polynesians visiting the island.",
        "JoinedBy(a_1, a_3) ::: Godfrey is joined by Carefinotu.",
        "DiscoverValue(a_1) ∧ GainsPoise(a_1) ∧ GainsCourage(a_1) ::: Godfrey discovers the value of independent effort and gains poise and courage.",
        "Rescued(c_1) ∧ Returned(c_1, b_2) ::: The marooned group is rescued and returned to San Francisco.",
        "Reunited(a_1, a_4) ∧ AgreeToMarry(a_1, a_4) ::: Godfrey is reunited with Phina and they agree to marry.",
        "ContinueWorldTour(a_1, a_4) ::: Godfrey and Phina continue the world tour together."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "565": [
    {
      "id": 565,
      "context_id": "55ac84541ede6e0f1106b2e4ab01a2bac2f21e39",
      "paragraph_id": 2,
      "paragraph": "After some time at sea, Godfrey is awakened one foggy night and told to abandon ship as the Dream is foundering. After jumping into the sea, Godfrey is washed ashore on a deserted island, where he soon finds Tartlet has also been marooned. Godfrey, with scant help from Tartlet, will have to learn to survive, to organize his life, face hostile intruders, and overcome other obstacles. Eventually, they are also joined by Carefinotu, whom Godfrey rescues from Polynesians visiting the island. By the end of the story the formerly jaded young man has discovered the value of independent effort, and he gains poise and courage. The marooned group are rescued and returned to San Francisco, where Godfrey is reunited with Phina. They agree to marry before continuing the world tour, this time together.",
      "question_template": "[[CANDIDATE_ANSWER]] was where Marie was shot.",
      "candidate_answers": [
        "Hostile intruders",
        "Polynesians visiting the island"
      ],
      "predicates": [
        "Awakened(a_1) ::: Godfrey is awakened.",
        "AbandonShip(a_1) ::: Godfrey is told to abandon ship.",
        "WashedAshore(a_1, b_1) ::: Godfrey is washed ashore on a deserted island.",
        "Finds(a_1, a_2) ::: Godfrey finds Tartlet.",
        "LearnToSurvive(a_1) ::: Godfrey learns to survive.",
        "OrganizeLife(a_1) ::: Godfrey organizes his life.",
        "FaceIntruders(a_1) ::: Godfrey faces hostile intruders.",
        "OvercomeObstacles(a_1) ::: Godfrey overcomes other obstacles.",
        "Rescue(a_1, a_3) ::: Godfrey rescues Carefinotu.",
        "JoinedBy(a_1, a_3) ::: Godfrey is joined by Carefinotu.",
        "DiscoverValue(a_1) ::: Godfrey discovers the value of independent effort.",
        "GainsPoise(a_1) ::: Godfrey gains poise.",
        "GainsCourage(a_1) ::: Godfrey gains courage.",
        "Rescued(c_1) ::: The marooned group is rescued.",
        "Returned(c_1, b_2) ::: The marooned group is returned to San Francisco.",
        "Reunited(a_1, a_4) ::: Godfrey is reunited with Phina.",
        "AgreeToMarry(a_1, a_4) ::: Godfrey and Phina agree to marry.",
        "ContinueWorldTour(a_1, a_4) ::: Godfrey and Phina continue the world tour together."
      ],
      "premises": [
        "Awakened(a_1) ∧ AbandonShip(a_1) ::: Godfrey is awakened and told to abandon ship.",
        "WashedAshore(a_1, b_1) ::: Godfrey is washed ashore on a deserted island.",
        "Finds(a_1, a_2) ::: Godfrey finds Tartlet on the deserted island.",
        "LearnToSurvive(a_1) ∧ OrganizeLife(a_1) ∧ FaceIntruders(a_1) ∧ OvercomeObstacles(a_1) ::: Godfrey learns to survive, organizes his life, faces hostile intruders, and overcomes other obstacles.",
        "Rescue(a_1, a_3) ::: Godfrey rescues Carefinotu from Polynesians visiting the island.",
        "JoinedBy(a_1, a_3) ::: Godfrey is joined by Carefinotu.",
        "DiscoverValue(a_1) ∧ GainsPoise(a_1) ∧ GainsCourage(a_1) ::: Godfrey discovers the value of independent effort and gains poise and courage.",
        "Rescued(c_1) ∧ Returned(c_1, b_2) ::: The marooned group is rescued and returned to San Francisco.",
        "Reunited(a_1, a_4) ∧ AgreeToMarry(a_1, a_4) ::: Godfrey is reunited with Phina and they agree to marry.",
        "ContinueWorldTour(a_1, a_4) ::: Godfrey and Phina continue the world tour together."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "566": [
    {
      "id": 566,
      "context_id": "55ac84541ede6e0f1106b2e4ab01a2bac2f21e39",
      "paragraph_id": 1,
      "paragraph": "Godfrey, an idle twenty-two-year-old, lives with Kolderup, his uncle, and Kolderup's adopted goddaughter, Phina, whom Godfrey has grown to love. Prior to marrying Phina, Godfrey asks to undertake a world tour. Acceding to his desire, his uncle sends Godfrey on a sea voyage around the world on board one of his steamships, the Dream, commanded by Captain Turcott. Godfrey is accompanied by his mentor, teacher, and dance instructor, Professor T. Artelett aka \"Tartlet\".",
      "question_template": "Elena does [[CANDIDATE_ANSWER]] to help the police.",
      "candidate_answers": [
        "Phina",
        "Kolderup's adopted goddaughter"
      ],
      "predicates": [
        "Idle(x) ::: x is idle.",
        "Age(x, y) ::: x is y years old.",
        "LivesWith(x, y) ::: x lives with y.",
        "Loves(x, y) ::: x loves y.",
        "UndertakesTour(x) ::: x undertakes a world tour.",
        "Sends(x, y, z) ::: x sends y on z.",
        "OnBoard(x, y) ::: x is on board y.",
        "CommandedBy(x, y) ::: x is commanded by y.",
        "AccompaniedBy(x, y) ::: x is accompanied by y."
      ],
      "premises": [
        "Idle(godfrey) ∧ Age(godfrey, 22) ::: Godfrey is an idle twenty-two-year-old.",
        "LivesWith(godfrey, kolderup) ∧ LivesWith(godfrey, phina) ::: Godfrey lives with Kolderup and Phina.",
        "Loves(godfrey, phina) ::: Godfrey has grown to love Phina.",
        "UndertakesTour(godfrey) ::: Godfrey undertakes a world tour before marrying Phina.",
        "Sends(kolderup, godfrey, seaVoyage) ::: Kolderup sends Godfrey on a sea voyage around the world.",
        "OnBoard(godfrey, dream) ::: Godfrey is on board one of Kolderup's steamships, the Dream.",
        "CommandedBy(dream, turcott) ::: The Dream is commanded by Captain Turcott.",
        "AccompaniedBy(godfrey, tartlet) ::: Godfrey is accompanied by his mentor, teacher, and dance instructor, Professor T. Artelett aka \"Tartlet\"."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "567": [
    {
      "id": 567,
      "context_id": "55ac84541ede6e0f1106b2e4ab01a2bac2f21e39",
      "paragraph_id": 0,
      "paragraph": " The narrative begins with the auction by the US Government of fictional Spencer Island, located 460 miles off the California coast (32°15′N 145°18′W). The island is uninhabited and there are only two bidders, William W. Kolderup, a very wealthy San Franciscan, and his arch-rival J. R. Taskinar, a resident of Stockton, California. Kolderup wins the auction, buying Spencer Island for four million dollars. J. R. Taskinar mutters, \"I will be avenged!\" before retiring to his hotel.",
      "question_template": "Jay is sent to prison because [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "J. R. Taskinar",
        "A resident of Stockton, California",
        "Mutters, \"I will be avenged!\""
      ],
      "predicates": [
        "Wealthy(x) ::: x is a wealthy person.",
        "Bidder(x, y) ::: x is a bidder for y.",
        "Wins(x, y) ::: x wins y.",
        "Buys(x, y, z) ::: x buys y for z.",
        "Mutters(x, y) ::: x mutters y.",
        "Retires(x, y) ::: x retires to y.",
        "Uninhabited(x) ::: x is uninhabited.",
        "LocatedAt(x, y) ::: x is located at coordinates y."
      ],
      "premises": [
        "Uninhabited(spencerIsland) ::: Spencer Island is uninhabited.",
        "LocatedAt(spencerIsland, (32°15′N, 145°18′W)) ::: Spencer Island is located at coordinates 32°15′N 145°18′W.",
        "Wealthy(kolderup) ::: William W. Kolderup is a very wealthy San Franciscan.",
        "Bidder(kolderup, spencerIsland) ::: Kolderup is a bidder for Spencer Island.",
        "Bidder(taskinar, spencerIsland) ::: J. R. Taskinar is a bidder for Spencer Island.",
        "Wins(kolderup, auction) ::: Kolderup wins the auction.",
        "Buys(kolderup, spencerIsland, 4000000) ::: Kolderup buys Spencer Island for four million dollars.",
        "Mutters(taskinar, \"I will be avenged!\") ::: Taskinar mutters \"I will be avenged!\".",
        "Retires(taskinar, hotel) ::: Taskinar retires to his hotel."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "569": [
    {
      "id": 569,
      "context_id": "55ac84541ede6e0f1106b2e4ab01a2bac2f21e39",
      "paragraph_id": 1,
      "paragraph": "Godfrey, an idle twenty-two-year-old, lives with Kolderup, his uncle, and Kolderup's adopted goddaughter, Phina, whom Godfrey has grown to love. Prior to marrying Phina, Godfrey asks to undertake a world tour. Acceding to his desire, his uncle sends Godfrey on a sea voyage around the world on board one of his steamships, the Dream, commanded by Captain Turcott. Godfrey is accompanied by his mentor, teacher, and dance instructor, Professor T. Artelett aka \"Tartlet\".",
      "question_template": "Godfrey sees Phina after being rescued in [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "His mentor, teacher, and dance instructor"
      ],
      "predicates": [
        "Idle(x) ::: x is idle.",
        "Age(x, y) ::: x is y years old.",
        "LivesWith(x, y) ::: x lives with y.",
        "Loves(x, y) ::: x loves y.",
        "UndertakesTour(x) ::: x undertakes a world tour.",
        "Sends(x, y, z) ::: x sends y on z.",
        "OnBoard(x, y) ::: x is on board y.",
        "CommandedBy(x, y) ::: x is commanded by y.",
        "AccompaniedBy(x, y) ::: x is accompanied by y."
      ],
      "premises": [
        "Idle(godfrey) ∧ Age(godfrey, 22) ::: Godfrey is an idle twenty-two-year-old.",
        "LivesWith(godfrey, kolderup) ∧ LivesWith(godfrey, phina) ::: Godfrey lives with Kolderup and Phina.",
        "Loves(godfrey, phina) ::: Godfrey has grown to love Phina.",
        "UndertakesTour(godfrey) ::: Godfrey undertakes a world tour before marrying Phina.",
        "Sends(kolderup, godfrey, seaVoyage) ::: Kolderup sends Godfrey on a sea voyage around the world.",
        "OnBoard(godfrey, dream) ::: Godfrey is on board one of Kolderup's steamships, the Dream.",
        "CommandedBy(dream, turcott) ::: The Dream is commanded by Captain Turcott.",
        "AccompaniedBy(godfrey, tartlet) ::: Godfrey is accompanied by his mentor, teacher, and dance instructor, Professor T. Artelett aka \"Tartlet\"."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "571": [
    {
      "id": 571,
      "context_id": "55ac84541ede6e0f1106b2e4ab01a2bac2f21e39",
      "paragraph_id": 1,
      "paragraph": "Godfrey, an idle twenty-two-year-old, lives with Kolderup, his uncle, and Kolderup's adopted goddaughter, Phina, whom Godfrey has grown to love. Prior to marrying Phina, Godfrey asks to undertake a world tour. Acceding to his desire, his uncle sends Godfrey on a sea voyage around the world on board one of his steamships, the Dream, commanded by Captain Turcott. Godfrey is accompanied by his mentor, teacher, and dance instructor, Professor T. Artelett aka \"Tartlet\".",
      "question_template": "Godfrey's uncle sends him on [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Godfrey, an idle twenty-two-year-old, lives with Kolderup, his uncle",
        "Kolderup's adopted goddaughter, Phina, whom Godfrey has grown to love"
      ],
      "predicates": [
        "Idle(x) ::: x is idle.",
        "Age(x, y) ::: x is y years old.",
        "LivesWith(x, y) ::: x lives with y.",
        "Loves(x, y) ::: x loves y.",
        "UndertakesTour(x) ::: x undertakes a world tour.",
        "Sends(x, y, z) ::: x sends y on z.",
        "OnBoard(x, y) ::: x is on board y.",
        "CommandedBy(x, y) ::: x is commanded by y.",
        "AccompaniedBy(x, y) ::: x is accompanied by y."
      ],
      "premises": [
        "Idle(godfrey) ∧ Age(godfrey, 22) ::: Godfrey is an idle twenty-two-year-old.",
        "LivesWith(godfrey, kolderup) ∧ LivesWith(godfrey, phina) ::: Godfrey lives with Kolderup and Phina.",
        "Loves(godfrey, phina) ::: Godfrey has grown to love Phina.",
        "UndertakesTour(godfrey) ::: Godfrey undertakes a world tour before marrying Phina.",
        "Sends(kolderup, godfrey, seaVoyage) ::: Kolderup sends Godfrey on a sea voyage around the world.",
        "OnBoard(godfrey, dream) ::: Godfrey is on board one of Kolderup's steamships, the Dream.",
        "CommandedBy(dream, turcott) ::: The Dream is commanded by Captain Turcott.",
        "AccompaniedBy(godfrey, tartlet) ::: Godfrey is accompanied by his mentor, teacher, and dance instructor, Professor T. Artelett aka \"Tartlet\"."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "573": [
    {
      "id": 573,
      "context_id": "55ac84541ede6e0f1106b2e4ab01a2bac2f21e39",
      "paragraph_id": 2,
      "paragraph": "After some time at sea, Godfrey is awakened one foggy night and told to abandon ship as the Dream is foundering. After jumping into the sea, Godfrey is washed ashore on a deserted island, where he soon finds Tartlet has also been marooned. Godfrey, with scant help from Tartlet, will have to learn to survive, to organize his life, face hostile intruders, and overcome other obstacles. Eventually, they are also joined by Carefinotu, whom Godfrey rescues from Polynesians visiting the island. By the end of the story the formerly jaded young man has discovered the value of independent effort, and he gains poise and courage. The marooned group are rescued and returned to San Francisco, where Godfrey is reunited with Phina. They agree to marry before continuing the world tour, this time together.",
      "question_template": "The US Government is auctioning off [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The marooned group are rescued and returned to San Francisco",
        "Godfrey is reunited with Phina",
        "They agree to marry before continuing the world tour, this time together"
      ],
      "predicates": [
        "Awakened(a_1) ::: Godfrey is awakened.",
        "AbandonShip(a_1) ::: Godfrey is told to abandon ship.",
        "WashedAshore(a_1, b_1) ::: Godfrey is washed ashore on a deserted island.",
        "Finds(a_1, a_2) ::: Godfrey finds Tartlet.",
        "LearnToSurvive(a_1) ::: Godfrey learns to survive.",
        "OrganizeLife(a_1) ::: Godfrey organizes his life.",
        "FaceIntruders(a_1) ::: Godfrey faces hostile intruders.",
        "OvercomeObstacles(a_1) ::: Godfrey overcomes other obstacles.",
        "Rescue(a_1, a_3) ::: Godfrey rescues Carefinotu.",
        "JoinedBy(a_1, a_3) ::: Godfrey is joined by Carefinotu.",
        "DiscoverValue(a_1) ::: Godfrey discovers the value of independent effort.",
        "GainsPoise(a_1) ::: Godfrey gains poise.",
        "GainsCourage(a_1) ::: Godfrey gains courage.",
        "Rescued(c_1) ::: The marooned group is rescued.",
        "Returned(c_1, b_2) ::: The marooned group is returned to San Francisco.",
        "Reunited(a_1, a_4) ::: Godfrey is reunited with Phina.",
        "AgreeToMarry(a_1, a_4) ::: Godfrey and Phina agree to marry.",
        "ContinueWorldTour(a_1, a_4) ::: Godfrey and Phina continue the world tour together."
      ],
      "premises": [
        "Awakened(a_1) ∧ AbandonShip(a_1) ::: Godfrey is awakened and told to abandon ship.",
        "WashedAshore(a_1, b_1) ::: Godfrey is washed ashore on a deserted island.",
        "Finds(a_1, a_2) ::: Godfrey finds Tartlet on the deserted island.",
        "LearnToSurvive(a_1) ∧ OrganizeLife(a_1) ∧ FaceIntruders(a_1) ∧ OvercomeObstacles(a_1) ::: Godfrey learns to survive, organizes his life, faces hostile intruders, and overcomes other obstacles.",
        "Rescue(a_1, a_3) ::: Godfrey rescues Carefinotu from Polynesians visiting the island.",
        "JoinedBy(a_1, a_3) ::: Godfrey is joined by Carefinotu.",
        "DiscoverValue(a_1) ∧ GainsPoise(a_1) ∧ GainsCourage(a_1) ::: Godfrey discovers the value of independent effort and gains poise and courage.",
        "Rescued(c_1) ∧ Returned(c_1, b_2) ::: The marooned group is rescued and returned to San Francisco.",
        "Reunited(a_1, a_4) ∧ AgreeToMarry(a_1, a_4) ::: Godfrey is reunited with Phina and they agree to marry.",
        "ContinueWorldTour(a_1, a_4) ::: Godfrey and Phina continue the world tour together."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "574": [
    {
      "id": 574,
      "context_id": "55ac84541ede6e0f1106b2e4ab01a2bac2f21e39",
      "paragraph_id": 1,
      "paragraph": "Godfrey, an idle twenty-two-year-old, lives with Kolderup, his uncle, and Kolderup's adopted goddaughter, Phina, whom Godfrey has grown to love. Prior to marrying Phina, Godfrey asks to undertake a world tour. Acceding to his desire, his uncle sends Godfrey on a sea voyage around the world on board one of his steamships, the Dream, commanded by Captain Turcott. Godfrey is accompanied by his mentor, teacher, and dance instructor, Professor T. Artelett aka \"Tartlet\".",
      "question_template": "[[CANDIDATE_ANSWER]] won the auction of Spencer Island.",
      "candidate_answers": [
        "Professor T. Artelett aka \"Tartlet\""
      ],
      "predicates": [
        "Idle(x) ::: x is idle.",
        "Age(x, y) ::: x is y years old.",
        "LivesWith(x, y) ::: x lives with y.",
        "Loves(x, y) ::: x loves y.",
        "UndertakesTour(x) ::: x undertakes a world tour.",
        "Sends(x, y, z) ::: x sends y on z.",
        "OnBoard(x, y) ::: x is on board y.",
        "CommandedBy(x, y) ::: x is commanded by y.",
        "AccompaniedBy(x, y) ::: x is accompanied by y."
      ],
      "premises": [
        "Idle(godfrey) ∧ Age(godfrey, 22) ::: Godfrey is an idle twenty-two-year-old.",
        "LivesWith(godfrey, kolderup) ∧ LivesWith(godfrey, phina) ::: Godfrey lives with Kolderup and Phina.",
        "Loves(godfrey, phina) ::: Godfrey has grown to love Phina.",
        "UndertakesTour(godfrey) ::: Godfrey undertakes a world tour before marrying Phina.",
        "Sends(kolderup, godfrey, seaVoyage) ::: Kolderup sends Godfrey on a sea voyage around the world.",
        "OnBoard(godfrey, dream) ::: Godfrey is on board one of Kolderup's steamships, the Dream.",
        "CommandedBy(dream, turcott) ::: The Dream is commanded by Captain Turcott.",
        "AccompaniedBy(godfrey, tartlet) ::: Godfrey is accompanied by his mentor, teacher, and dance instructor, Professor T. Artelett aka \"Tartlet\"."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "577": [
    {
      "id": 577,
      "context_id": "55ac84541ede6e0f1106b2e4ab01a2bac2f21e39",
      "paragraph_id": 2,
      "paragraph": "After some time at sea, Godfrey is awakened one foggy night and told to abandon ship as the Dream is foundering. After jumping into the sea, Godfrey is washed ashore on a deserted island, where he soon finds Tartlet has also been marooned. Godfrey, with scant help from Tartlet, will have to learn to survive, to organize his life, face hostile intruders, and overcome other obstacles. Eventually, they are also joined by Carefinotu, whom Godfrey rescues from Polynesians visiting the island. By the end of the story the formerly jaded young man has discovered the value of independent effort, and he gains poise and courage. The marooned group are rescued and returned to San Francisco, where Godfrey is reunited with Phina. They agree to marry before continuing the world tour, this time together.",
      "question_template": "Spencer Island was bought for [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Dream"
      ],
      "predicates": [
        "Awakened(a_1) ::: Godfrey is awakened.",
        "AbandonShip(a_1) ::: Godfrey is told to abandon ship.",
        "WashedAshore(a_1, b_1) ::: Godfrey is washed ashore on a deserted island.",
        "Finds(a_1, a_2) ::: Godfrey finds Tartlet.",
        "LearnToSurvive(a_1) ::: Godfrey learns to survive.",
        "OrganizeLife(a_1) ::: Godfrey organizes his life.",
        "FaceIntruders(a_1) ::: Godfrey faces hostile intruders.",
        "OvercomeObstacles(a_1) ::: Godfrey overcomes other obstacles.",
        "Rescue(a_1, a_3) ::: Godfrey rescues Carefinotu.",
        "JoinedBy(a_1, a_3) ::: Godfrey is joined by Carefinotu.",
        "DiscoverValue(a_1) ::: Godfrey discovers the value of independent effort.",
        "GainsPoise(a_1) ::: Godfrey gains poise.",
        "GainsCourage(a_1) ::: Godfrey gains courage.",
        "Rescued(c_1) ::: The marooned group is rescued.",
        "Returned(c_1, b_2) ::: The marooned group is returned to San Francisco.",
        "Reunited(a_1, a_4) ::: Godfrey is reunited with Phina.",
        "AgreeToMarry(a_1, a_4) ::: Godfrey and Phina agree to marry.",
        "ContinueWorldTour(a_1, a_4) ::: Godfrey and Phina continue the world tour together."
      ],
      "premises": [
        "Awakened(a_1) ∧ AbandonShip(a_1) ::: Godfrey is awakened and told to abandon ship.",
        "WashedAshore(a_1, b_1) ::: Godfrey is washed ashore on a deserted island.",
        "Finds(a_1, a_2) ::: Godfrey finds Tartlet on the deserted island.",
        "LearnToSurvive(a_1) ∧ OrganizeLife(a_1) ∧ FaceIntruders(a_1) ∧ OvercomeObstacles(a_1) ::: Godfrey learns to survive, organizes his life, faces hostile intruders, and overcomes other obstacles.",
        "Rescue(a_1, a_3) ::: Godfrey rescues Carefinotu from Polynesians visiting the island.",
        "JoinedBy(a_1, a_3) ::: Godfrey is joined by Carefinotu.",
        "DiscoverValue(a_1) ∧ GainsPoise(a_1) ∧ GainsCourage(a_1) ::: Godfrey discovers the value of independent effort and gains poise and courage.",
        "Rescued(c_1) ∧ Returned(c_1, b_2) ::: The marooned group is rescued and returned to San Francisco.",
        "Reunited(a_1, a_4) ∧ AgreeToMarry(a_1, a_4) ::: Godfrey is reunited with Phina and they agree to marry.",
        "ContinueWorldTour(a_1, a_4) ::: Godfrey and Phina continue the world tour together."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "579": [
    {
      "id": 579,
      "context_id": "55ac84541ede6e0f1106b2e4ab01a2bac2f21e39",
      "paragraph_id": 2,
      "paragraph": "After some time at sea, Godfrey is awakened one foggy night and told to abandon ship as the Dream is foundering. After jumping into the sea, Godfrey is washed ashore on a deserted island, where he soon finds Tartlet has also been marooned. Godfrey, with scant help from Tartlet, will have to learn to survive, to organize his life, face hostile intruders, and overcome other obstacles. Eventually, they are also joined by Carefinotu, whom Godfrey rescues from Polynesians visiting the island. By the end of the story the formerly jaded young man has discovered the value of independent effort, and he gains poise and courage. The marooned group are rescued and returned to San Francisco, where Godfrey is reunited with Phina. They agree to marry before continuing the world tour, this time together.",
      "question_template": "[[CANDIDATE_ANSWER]] wins the auction.",
      "candidate_answers": [
        "Polynesians visiting the island"
      ],
      "predicates": [
        "Awakened(a_1) ::: Godfrey is awakened.",
        "AbandonShip(a_1) ::: Godfrey is told to abandon ship.",
        "WashedAshore(a_1, b_1) ::: Godfrey is washed ashore on a deserted island.",
        "Finds(a_1, a_2) ::: Godfrey finds Tartlet.",
        "LearnToSurvive(a_1) ::: Godfrey learns to survive.",
        "OrganizeLife(a_1) ::: Godfrey organizes his life.",
        "FaceIntruders(a_1) ::: Godfrey faces hostile intruders.",
        "OvercomeObstacles(a_1) ::: Godfrey overcomes other obstacles.",
        "Rescue(a_1, a_3) ::: Godfrey rescues Carefinotu.",
        "JoinedBy(a_1, a_3) ::: Godfrey is joined by Carefinotu.",
        "DiscoverValue(a_1) ::: Godfrey discovers the value of independent effort.",
        "GainsPoise(a_1) ::: Godfrey gains poise.",
        "GainsCourage(a_1) ::: Godfrey gains courage.",
        "Rescued(c_1) ::: The marooned group is rescued.",
        "Returned(c_1, b_2) ::: The marooned group is returned to San Francisco.",
        "Reunited(a_1, a_4) ::: Godfrey is reunited with Phina.",
        "AgreeToMarry(a_1, a_4) ::: Godfrey and Phina agree to marry.",
        "ContinueWorldTour(a_1, a_4) ::: Godfrey and Phina continue the world tour together."
      ],
      "premises": [
        "Awakened(a_1) ∧ AbandonShip(a_1) ::: Godfrey is awakened and told to abandon ship.",
        "WashedAshore(a_1, b_1) ::: Godfrey is washed ashore on a deserted island.",
        "Finds(a_1, a_2) ::: Godfrey finds Tartlet on the deserted island.",
        "LearnToSurvive(a_1) ∧ OrganizeLife(a_1) ∧ FaceIntruders(a_1) ∧ OvercomeObstacles(a_1) ::: Godfrey learns to survive, organizes his life, faces hostile intruders, and overcomes other obstacles.",
        "Rescue(a_1, a_3) ::: Godfrey rescues Carefinotu from Polynesians visiting the island.",
        "JoinedBy(a_1, a_3) ::: Godfrey is joined by Carefinotu.",
        "DiscoverValue(a_1) ∧ GainsPoise(a_1) ∧ GainsCourage(a_1) ::: Godfrey discovers the value of independent effort and gains poise and courage.",
        "Rescued(c_1) ∧ Returned(c_1, b_2) ::: The marooned group is rescued and returned to San Francisco.",
        "Reunited(a_1, a_4) ∧ AgreeToMarry(a_1, a_4) ::: Godfrey is reunited with Phina and they agree to marry.",
        "ContinueWorldTour(a_1, a_4) ::: Godfrey and Phina continue the world tour together."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "580": [
    {
      "id": 580,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 1,
      "paragraph": "Nordau establishes the cultural phenomenon of fin de siĂ¨cle in the opening pages, but he quickly moves to the viewpoint of a physician and identifies what he sees as an illness:",
      "question_template": "[[CANDIDATE_ANSWER]] is the boat that Captain Turcott captains.",
      "candidate_answers": [
        "A physician"
      ],
      "predicates": [
        "CulturalPhenomenon(x) ::: x is a cultural phenomenon.",
        "Physician(x) ::: x is a physician.",
        "Identifies(x, y) ::: x identifies y as something.",
        "Illness(x) ::: x is an illness.",
        "MentalAberration(x) ::: x is a mental aberration.",
        "Malfunction(x) ::: x is a malfunction.",
        "HumanPsyche(x) ::: x is related to the human psyche.",
        "SymbolicApproach(x) ::: x is a symbolic approach.",
        "MythicApproach(x) ::: x is a mythic approach."
      ],
      "premises": [
        "CulturalPhenomenon(fin_de_siecle) ::: Nordau establishes the cultural phenomenon of fin de siècle.",
        "Physician(nordau) ::: Nordau moves to the viewpoint of a physician.",
        "Identifies(nordau, illness) ::: Nordau identifies what he sees as an illness.",
        "Illness(mental_aberrations) ::: Mental aberrations are considered an illness.",
        "Illness(malfunctions) ::: Malfunctions are also considered an illness.",
        "HumanPsyche(human_psyche) ::: The concept relates to the human psyche.",
        "SymbolicApproach(symbolic_approach) ::: There is a symbolic approach to understanding the human psyche.",
        "MythicApproach(mythic_approach) ::: There is also a mythic approach to understanding the human psyche.",
        "Conclusion:",
        "CulturalPhenomenon(fin_de_siecle) ∧ Physician(nordau) ∧ Identifies(nordau, illness) ::: Nordau establishes the cultural phenomenon of fin de siècle and identifies it as an illness from the viewpoint of a physician."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 580,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 4,
      "paragraph": "The original article's text comports quite closely to Howard Fertig, NY 1960. During the time of Nordau's writing, physical, physiognomic, or mechanical factors were still being regarded as causative in mental aberrations and malfunctions. The symbolic or mythic approached later implemented by Freud and Jung made no part of Nordau's understanding of the human psyche.",
      "question_template": "[[CANDIDATE_ANSWER]] is the boat that Captain Turcott captains.",
      "candidate_answers": [
        "Physical, physiognomic, or mechanical factors",
        "Causative in mental aberrations and malfunctions"
      ],
      "predicates": [
        "OriginalText(x) ::: x is the original article's text.",
        "ComportsWith(x, y) ::: x comports closely with y.",
        "CausativeFactors(x) ::: x are factors regarded as causative in mental aberrations and malfunctions.",
        "SymbolicApproach(x) ::: x is a symbolic approach.",
        "MythicApproach(x) ::: x is a mythic approach.",
        "Understanding(x, y) ::: x is the understanding of y."
      ],
      "premises": [
        "OriginalText(originalArticle) ∧ ComportsWith(originalArticle, howardFertig) ::: The original article's text comports quite closely to Howard Fertig, NY 1960.",
        "CausativeFactors(physicalFactors) ∧ CausativeFactors(physiognomicFactors) ∧ CausativeFactors(mechanicalFactors) ∧ (CausativeFactors(physicalFactors) ∧ CausativeFactors(physiognomicFactors) ∧ CausativeFactors(mechanicalFactors) → Understanding(nordau, mentalAberrations)) ::: During the time of Nordau's writing, physical, physiognomic, or mechanical factors were still being regarded as causative in mental aberrations and malfunctions.",
        "¬Understanding(nordau, symbolicApproach) ∧ ¬Understanding(nordau, mythicApproach) ::: The symbolic or mythic approaches later implemented by Freud and Jung made no part of Nordau's understanding of the human psyche."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "582": [
    {
      "id": 582,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 1,
      "paragraph": "Nordau establishes the cultural phenomenon of fin de siĂ¨cle in the opening pages, but he quickly moves to the viewpoint of a physician and identifies what he sees as an illness:",
      "question_template": "Kolderup spent [[CANDIDATE_ANSWER]] to buy the island.",
      "candidate_answers": [
        "the opening pages"
      ],
      "predicates": [
        "CulturalPhenomenon(x) ::: x is a cultural phenomenon.",
        "Physician(x) ::: x is a physician.",
        "Identifies(x, y) ::: x identifies y as something.",
        "Illness(x) ::: x is an illness.",
        "MentalAberration(x) ::: x is a mental aberration.",
        "Malfunction(x) ::: x is a malfunction.",
        "HumanPsyche(x) ::: x is related to the human psyche.",
        "SymbolicApproach(x) ::: x is a symbolic approach.",
        "MythicApproach(x) ::: x is a mythic approach."
      ],
      "premises": [
        "CulturalPhenomenon(fin_de_siecle) ::: Nordau establishes the cultural phenomenon of fin de siècle.",
        "Physician(nordau) ::: Nordau moves to the viewpoint of a physician.",
        "Identifies(nordau, illness) ::: Nordau identifies what he sees as an illness.",
        "Illness(mental_aberrations) ::: Mental aberrations are considered an illness.",
        "Illness(malfunctions) ::: Malfunctions are also considered an illness.",
        "HumanPsyche(human_psyche) ::: The concept relates to the human psyche.",
        "SymbolicApproach(symbolic_approach) ::: There is a symbolic approach to understanding the human psyche.",
        "MythicApproach(mythic_approach) ::: There is also a mythic approach to understanding the human psyche.",
        "Conclusion:",
        "CulturalPhenomenon(fin_de_siecle) ∧ Physician(nordau) ∧ Identifies(nordau, illness) ::: Nordau establishes the cultural phenomenon of fin de siècle and identifies it as an illness from the viewpoint of a physician."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 582,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 2,
      "paragraph": "In the fin-de-siĂ¨cle disposition, in the tendencies of contemporary art and poetry, in the life and conduct of men who write mystic, symbolic and 'decadent' works and the attitude taken by their admirers in the tastes and aesthetic instincts of fashionable society, the confluence of two well-defined conditions of disease, with which he [the physician] is quite familiar, viz. degeneration and hysteria, of which the minor stages are designated as neurasthenia.",
      "question_template": "Kolderup spent [[CANDIDATE_ANSWER]] to buy the island.",
      "candidate_answers": [
        "The fin-de-siècle disposition",
        "The tendencies of contemporary art and poetry",
        "The life and conduct of men who write mystic, symbolic and 'decadent' works",
        "The attitude taken by their admirers in the tastes and aesthetic instincts of fashionable society",
        "The confluence of two well-defined conditions of disease",
        "Degeneration and hysteria",
        "The minor stages are designated as neurasthenia"
      ],
      "predicates": [
        "Degeneration(x) ::: x is a condition of degeneration.",
        "Hysteria(x) ::: x is a condition of hysteria.",
        "Neurasthenia(x) ::: x is a minor stage of hysteria.",
        "ContemporaryArt(x) ::: x is a tendency of contemporary art.",
        "MysticWorks(x) ::: x is a mystic work.",
        "SymbolicWorks(x) ::: x is a symbolic work.",
        "DecadentWorks(x) ::: x is a decadent work.",
        "FashionableSociety(x) ::: x is a fashionable society.",
        "Admiration(x, y) ::: x admires y.",
        "MentalAberration(x) ::: x is a mental aberration.",
        "HumanPsyche(x) ::: x is related to the human psyche."
      ],
      "premises": [
        "∀x (Degeneration(x) ∧ Hysteria(x) → Neurasthenia(x)) ::: The confluence of degeneration and hysteria leads to neurasthenia.",
        "∀x (ContemporaryArt(x) ∧ MysticWorks(x) ∧ SymbolicWorks(x) ∧ DecadentWorks(x) ∧ FashionableSociety(x) → Admiration(a_0, x)) ::: The tendencies of contemporary art and poetry are admired by fashionable society.",
        "∀x (MentalAberration(x) → HumanPsyche(x)) ::: Mental aberrations are related to the human psyche.",
        "∀x (Neurasthenia(x) → (Degeneration(x) ∧ Hysteria(x))) ::: Neurasthenia is a minor stage of degeneration and hysteria.",
        "Conclusion:",
        "∃x (Degeneration(x) ∧ Hysteria(x)) ::: There exists a condition of degeneration and hysteria.",
        "∃y (Admiration(a_0, y) ∧ (MysticWorks(y) ∧ SymbolicWorks(y) ∧ DecadentWorks(y))) ::: There exists a mystic, symbolic, or decadent work that is admired by people."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "583": [
    {
      "id": 583,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 2,
      "paragraph": "In the fin-de-siĂ¨cle disposition, in the tendencies of contemporary art and poetry, in the life and conduct of men who write mystic, symbolic and 'decadent' works and the attitude taken by their admirers in the tastes and aesthetic instincts of fashionable society, the confluence of two well-defined conditions of disease, with which he [the physician] is quite familiar, viz. degeneration and hysteria, of which the minor stages are designated as neurasthenia.",
      "question_template": "[[CANDIDATE_ANSWER]] threatened them on the deserted island.",
      "candidate_answers": [
        "- The confluence of two well-defined conditions of disease",
        "- Degeneration and hysteria",
        "- Neurasthenia"
      ],
      "predicates": [
        "Degeneration(x) ::: x is a condition of degeneration.",
        "Hysteria(x) ::: x is a condition of hysteria.",
        "Neurasthenia(x) ::: x is a minor stage of hysteria.",
        "ContemporaryArt(x) ::: x is a tendency of contemporary art.",
        "MysticWorks(x) ::: x is a mystic work.",
        "SymbolicWorks(x) ::: x is a symbolic work.",
        "DecadentWorks(x) ::: x is a decadent work.",
        "FashionableSociety(x) ::: x is a fashionable society.",
        "Admiration(x, y) ::: x admires y.",
        "MentalAberration(x) ::: x is a mental aberration.",
        "HumanPsyche(x) ::: x is related to the human psyche."
      ],
      "premises": [
        "∀x (Degeneration(x) ∧ Hysteria(x) → Neurasthenia(x)) ::: The confluence of degeneration and hysteria leads to neurasthenia.",
        "∀x (ContemporaryArt(x) ∧ MysticWorks(x) ∧ SymbolicWorks(x) ∧ DecadentWorks(x) ∧ FashionableSociety(x) → Admiration(a_0, x)) ::: The tendencies of contemporary art and poetry are admired by fashionable society.",
        "∀x (MentalAberration(x) → HumanPsyche(x)) ::: Mental aberrations are related to the human psyche.",
        "∀x (Neurasthenia(x) → (Degeneration(x) ∧ Hysteria(x))) ::: Neurasthenia is a minor stage of degeneration and hysteria.",
        "Conclusion:",
        "∃x (Degeneration(x) ∧ Hysteria(x)) ::: There exists a condition of degeneration and hysteria.",
        "∃y (Admiration(a_0, y) ∧ (MysticWorks(y) ∧ SymbolicWorks(y) ∧ DecadentWorks(y))) ::: There exists a mystic, symbolic, or decadent work that is admired by people."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 583,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 3,
      "paragraph": "The book deals with numerous case studies of various artists, writers and thinkers (Oscar Wilde, Henrik Ibsen, Richard Wagner and Friedrich Nietzsche to name a few), but its basic premise remains that society and human beings themselves are degenerating, and this degeneration is both reflected in and influenced by art. Hannah Arendt, in her book The Origins of Totalitarianism, refers to late 19th Century French society as embracing unusual or exotic types or individuals, such as criminals, Gypsies and Turks, and certain others formerly not seen as socially acceptable, so Nordau's position is not novel or isolated as social criticism.",
      "question_template": "[[CANDIDATE_ANSWER]] threatened them on the deserted island.",
      "candidate_answers": [
        "- Society and human beings themselves are degenerating",
        "- Unusual or exotic types or individuals, such as criminals, Gypsies and Turks"
      ],
      "predicates": [
        "Degenerating(a_0) ::: a person or society is degenerating.",
        "ReflectsInArt(a_0) ::: a person or society is reflected in art.",
        "InfluencedByArt(a_0) ::: a person or society is influenced by art.",
        "CaseStudy(x) ::: x is a case study of an artist, writer, or thinker.",
        "Author(x, y) ::: x is the author of y.",
        "Book(x) ::: x is a book.",
        "Premise(x) ::: x is a basic premise of a book.",
        "UnusualTypes(x) ::: x refers to unusual or exotic types or individuals."
      ],
      "premises": [
        "Degenerating(a_0) ∧ ReflectsInArt(a_0) ∧ InfluencedByArt(a_0) ::: The degeneration of society and human beings is both reflected in and influenced by art.",
        "∃x (CaseStudy(x) ∧ Author(a_1, x)) ::: The book deals with numerous case studies of various artists, writers, and thinkers, including Howard Fertig.",
        "Premise(degeneration) ::: The basic premise of the book remains that society and human beings themselves are degenerating.",
        "∃y (UnusualTypes(y) ∧ Author(a_2, y)) ::: Hannah Arendt refers to unusual or exotic types or individuals in her book.",
        "∃z (CaseStudy(z) ∧ Author(a_3, z)) ::: Freud is a case study in the book.",
        "∃w (CaseStudy(w) ∧ Author(a_4, w)) ::: Jung is a case study in the book."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 583,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 4,
      "paragraph": "The original article's text comports quite closely to Howard Fertig, NY 1960. During the time of Nordau's writing, physical, physiognomic, or mechanical factors were still being regarded as causative in mental aberrations and malfunctions. The symbolic or mythic approached later implemented by Freud and Jung made no part of Nordau's understanding of the human psyche.",
      "question_template": "[[CANDIDATE_ANSWER]] threatened them on the deserted island.",
      "candidate_answers": [
        "Physical, physiognomic, or mechanical factors",
        "Mental aberrations and malfunctions"
      ],
      "predicates": [
        "OriginalText(x) ::: x is the original article's text.",
        "ComportsWith(x, y) ::: x comports closely with y.",
        "CausativeFactors(x) ::: x are factors regarded as causative in mental aberrations and malfunctions.",
        "SymbolicApproach(x) ::: x is a symbolic approach.",
        "MythicApproach(x) ::: x is a mythic approach.",
        "Understanding(x, y) ::: x is the understanding of y."
      ],
      "premises": [
        "OriginalText(originalArticle) ∧ ComportsWith(originalArticle, howardFertig) ::: The original article's text comports quite closely to Howard Fertig, NY 1960.",
        "CausativeFactors(physicalFactors) ∧ CausativeFactors(physiognomicFactors) ∧ CausativeFactors(mechanicalFactors) ∧ (CausativeFactors(physicalFactors) ∧ CausativeFactors(physiognomicFactors) ∧ CausativeFactors(mechanicalFactors) → Understanding(nordau, mentalAberrations)) ::: During the time of Nordau's writing, physical, physiognomic, or mechanical factors were still being regarded as causative in mental aberrations and malfunctions.",
        "¬Understanding(nordau, symbolicApproach) ∧ ¬Understanding(nordau, mythicApproach) ::: The symbolic or mythic approaches later implemented by Freud and Jung made no part of Nordau's understanding of the human psyche."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "584": [
    {
      "id": 584,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 0,
      "paragraph": " Nordau begins his work with a \"medical\" and social interpretation of what has created this Degeneration in society. Nordau divides his study into five books. In the first book, Nordau identifies the phenomenon of fin de siĂ¨cle in Europe. He sees this as first being recognised, though not originating, in France, describing this phenomenon as \"a contempt for the traditional views of custom and morality\". He sees it as a sort of decadence, a world-weariness, and the wilful rejection of the moral boundaries governing the world. He uses examples from French periodicals and books in French to show how it has affected all elements of society. Nordau accuses also society of becoming more and more inclined to imitate what they see in art. He sees in the fashionable society of Paris and London that \"[e]very single figure strives visibly by some singularity in outline, set, cut or colour, to startle attention violently, and imperiously to detain it. Each one wishes to create a strong nervous excitement, no matter whether agreeably or disagreeably\".",
      "question_template": "[[CANDIDATE_ANSWER]] is Godfrey's love interest, with whom he tours the world at the end.",
      "candidate_answers": [
        "- A contempt for the traditional views of custom and morality",
        "- A sort of decadence, a world-weariness, and the wilful rejection of the moral boundaries governing the world",
        "- Society of becoming more and more inclined to imitate what they see in art",
        "- Fashionable society of Paris and London"
      ],
      "predicates": [
        "Degeneration(x) ::: x represents degeneration in society.",
        "MedicalInterpretation(x) ::: x is a medical interpretation of degeneration.",
        "SocialInterpretation(x) ::: x is a social interpretation of degeneration.",
        "Divides(x, y) ::: x divides his study into y books.",
        "Identifies(x, y) ::: x identifies the phenomenon y.",
        "RecognizedIn(x, y) ::: x is recognized in y.",
        "Describes(x, y) ::: x describes y as a certain phenomenon.",
        "Accuses(x, y) ::: x accuses y of a certain behavior.",
        "Imitate(x, y) ::: x imitates what they see in y.",
        "FashionableSociety(x) ::: x is a fashionable society.",
        "Strives(x, y) ::: x strives for a certain quality or characteristic."
      ],
      "premises": [
        "MedicalInterpretation(nordau) ∧ SocialInterpretation(nordau) ∧ Degeneration(nordau) ::: Nordau begins his work with a \"medical\" and social interpretation of what has created this Degeneration in society.",
        "Divides(nordau, 5) ::: Nordau divides his study into five books.",
        "Identifies(nordau, fin_de_siècle) ::: In the first book, Nordau identifies the phenomenon of fin de siècle in Europe.",
        "RecognizedIn(fin_de_siècle, france) ::: He sees this as first being recognized in France.",
        "Describes(fin_de_siècle, contempt_for_traditional_views) ::: He describes this phenomenon as \"a contempt for the traditional views of custom and morality\".",
        "Accuses(nordau, society) ::: Nordau accuses society of becoming more inclined to imitate what they see in art.",
        "Imitate(society, art) ::: Society imitates what they see in art.",
        "FashionableSociety(paris) ∧ FashionableSociety(london) ::: He sees in the fashionable society of Paris and London.",
        "Strives(figure, singularity) ::: Every single figure strives visibly by some singularity in outline, set, cut or colour, to startle attention violently.",
        "Conclusion:",
        "∀x (Degeneration(x) → (MedicalInterpretation(x) ∧ SocialInterpretation(x))) ::: Any degeneration in society has both medical and social interpretations."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 584,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 2,
      "paragraph": "In the fin-de-siĂ¨cle disposition, in the tendencies of contemporary art and poetry, in the life and conduct of men who write mystic, symbolic and 'decadent' works and the attitude taken by their admirers in the tastes and aesthetic instincts of fashionable society, the confluence of two well-defined conditions of disease, with which he [the physician] is quite familiar, viz. degeneration and hysteria, of which the minor stages are designated as neurasthenia.",
      "question_template": "[[CANDIDATE_ANSWER]] is Godfrey's love interest, with whom he tours the world at the end.",
      "candidate_answers": [
        "- Individuals who write mystic, symbolic and 'decadent' works",
        "- Those with degeneration and hysteria",
        "- Individuals with neurasthenia"
      ],
      "predicates": [
        "Degeneration(x) ::: x is a condition of degeneration.",
        "Hysteria(x) ::: x is a condition of hysteria.",
        "Neurasthenia(x) ::: x is a minor stage of hysteria.",
        "ContemporaryArt(x) ::: x is a tendency of contemporary art.",
        "MysticWorks(x) ::: x is a mystic work.",
        "SymbolicWorks(x) ::: x is a symbolic work.",
        "DecadentWorks(x) ::: x is a decadent work.",
        "FashionableSociety(x) ::: x is a fashionable society.",
        "Admiration(x, y) ::: x admires y.",
        "MentalAberration(x) ::: x is a mental aberration.",
        "HumanPsyche(x) ::: x is related to the human psyche."
      ],
      "premises": [
        "∀x (Degeneration(x) ∧ Hysteria(x) → Neurasthenia(x)) ::: The confluence of degeneration and hysteria leads to neurasthenia.",
        "∀x (ContemporaryArt(x) ∧ MysticWorks(x) ∧ SymbolicWorks(x) ∧ DecadentWorks(x) ∧ FashionableSociety(x) → Admiration(a_0, x)) ::: The tendencies of contemporary art and poetry are admired by fashionable society.",
        "∀x (MentalAberration(x) → HumanPsyche(x)) ::: Mental aberrations are related to the human psyche.",
        "∀x (Neurasthenia(x) → (Degeneration(x) ∧ Hysteria(x))) ::: Neurasthenia is a minor stage of degeneration and hysteria.",
        "Conclusion:",
        "∃x (Degeneration(x) ∧ Hysteria(x)) ::: There exists a condition of degeneration and hysteria.",
        "∃y (Admiration(a_0, y) ∧ (MysticWorks(y) ∧ SymbolicWorks(y) ∧ DecadentWorks(y))) ::: There exists a mystic, symbolic, or decadent work that is admired by people."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "585": [
    {
      "id": 585,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 0,
      "paragraph": " Nordau begins his work with a \"medical\" and social interpretation of what has created this Degeneration in society. Nordau divides his study into five books. In the first book, Nordau identifies the phenomenon of fin de siĂ¨cle in Europe. He sees this as first being recognised, though not originating, in France, describing this phenomenon as \"a contempt for the traditional views of custom and morality\". He sees it as a sort of decadence, a world-weariness, and the wilful rejection of the moral boundaries governing the world. He uses examples from French periodicals and books in French to show how it has affected all elements of society. Nordau accuses also society of becoming more and more inclined to imitate what they see in art. He sees in the fashionable society of Paris and London that \"[e]very single figure strives visibly by some singularity in outline, set, cut or colour, to startle attention violently, and imperiously to detain it. Each one wishes to create a strong nervous excitement, no matter whether agreeably or disagreeably\".",
      "question_template": "[[CANDIDATE_ANSWER]] loses the auction and vows revenge.",
      "candidate_answers": [
        "- A contempt for the traditional views of custom and morality",
        "- Decadence",
        "- A world-weariness",
        "- The wilful rejection of the moral boundaries governing the world",
        "- Society becoming more inclined to imitate what they see in art",
        "- The fashionable society of Paris and London"
      ],
      "predicates": [
        "Degeneration(x) ::: x represents degeneration in society.",
        "MedicalInterpretation(x) ::: x is a medical interpretation of degeneration.",
        "SocialInterpretation(x) ::: x is a social interpretation of degeneration.",
        "Divides(x, y) ::: x divides his study into y books.",
        "Identifies(x, y) ::: x identifies the phenomenon y.",
        "RecognizedIn(x, y) ::: x is recognized in y.",
        "Describes(x, y) ::: x describes y as a certain phenomenon.",
        "Accuses(x, y) ::: x accuses y of a certain behavior.",
        "Imitate(x, y) ::: x imitates what they see in y.",
        "FashionableSociety(x) ::: x is a fashionable society.",
        "Strives(x, y) ::: x strives for a certain quality or characteristic."
      ],
      "premises": [
        "MedicalInterpretation(nordau) ∧ SocialInterpretation(nordau) ∧ Degeneration(nordau) ::: Nordau begins his work with a \"medical\" and social interpretation of what has created this Degeneration in society.",
        "Divides(nordau, 5) ::: Nordau divides his study into five books.",
        "Identifies(nordau, fin_de_siècle) ::: In the first book, Nordau identifies the phenomenon of fin de siècle in Europe.",
        "RecognizedIn(fin_de_siècle, france) ::: He sees this as first being recognized in France.",
        "Describes(fin_de_siècle, contempt_for_traditional_views) ::: He describes this phenomenon as \"a contempt for the traditional views of custom and morality\".",
        "Accuses(nordau, society) ::: Nordau accuses society of becoming more inclined to imitate what they see in art.",
        "Imitate(society, art) ::: Society imitates what they see in art.",
        "FashionableSociety(paris) ∧ FashionableSociety(london) ::: He sees in the fashionable society of Paris and London.",
        "Strives(figure, singularity) ::: Every single figure strives visibly by some singularity in outline, set, cut or colour, to startle attention violently.",
        "Conclusion:",
        "∀x (Degeneration(x) → (MedicalInterpretation(x) ∧ SocialInterpretation(x))) ::: Any degeneration in society has both medical and social interpretations."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 585,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 1,
      "paragraph": "Nordau establishes the cultural phenomenon of fin de siĂ¨cle in the opening pages, but he quickly moves to the viewpoint of a physician and identifies what he sees as an illness:",
      "question_template": "[[CANDIDATE_ANSWER]] loses the auction and vows revenge.",
      "candidate_answers": [
        "the cultural phenomenon of fin de siècle",
        "an illness"
      ],
      "predicates": [
        "CulturalPhenomenon(x) ::: x is a cultural phenomenon.",
        "Physician(x) ::: x is a physician.",
        "Identifies(x, y) ::: x identifies y as something.",
        "Illness(x) ::: x is an illness.",
        "MentalAberration(x) ::: x is a mental aberration.",
        "Malfunction(x) ::: x is a malfunction.",
        "HumanPsyche(x) ::: x is related to the human psyche.",
        "SymbolicApproach(x) ::: x is a symbolic approach.",
        "MythicApproach(x) ::: x is a mythic approach."
      ],
      "premises": [
        "CulturalPhenomenon(fin_de_siecle) ::: Nordau establishes the cultural phenomenon of fin de siècle.",
        "Physician(nordau) ::: Nordau moves to the viewpoint of a physician.",
        "Identifies(nordau, illness) ::: Nordau identifies what he sees as an illness.",
        "Illness(mental_aberrations) ::: Mental aberrations are considered an illness.",
        "Illness(malfunctions) ::: Malfunctions are also considered an illness.",
        "HumanPsyche(human_psyche) ::: The concept relates to the human psyche.",
        "SymbolicApproach(symbolic_approach) ::: There is a symbolic approach to understanding the human psyche.",
        "MythicApproach(mythic_approach) ::: There is also a mythic approach to understanding the human psyche.",
        "Conclusion:",
        "CulturalPhenomenon(fin_de_siecle) ∧ Physician(nordau) ∧ Identifies(nordau, illness) ::: Nordau establishes the cultural phenomenon of fin de siècle and identifies it as an illness from the viewpoint of a physician."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 585,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 2,
      "paragraph": "In the fin-de-siĂ¨cle disposition, in the tendencies of contemporary art and poetry, in the life and conduct of men who write mystic, symbolic and 'decadent' works and the attitude taken by their admirers in the tastes and aesthetic instincts of fashionable society, the confluence of two well-defined conditions of disease, with which he [the physician] is quite familiar, viz. degeneration and hysteria, of which the minor stages are designated as neurasthenia.",
      "question_template": "[[CANDIDATE_ANSWER]] loses the auction and vows revenge.",
      "candidate_answers": [
        "- The tendencies of contemporary art and poetry",
        "- The life and conduct of men who write mystic, symbolic and 'decadent' works",
        "- The attitude taken by their admirers in the tastes and aesthetic instincts of fashionable society"
      ],
      "predicates": [
        "Degeneration(x) ::: x is a condition of degeneration.",
        "Hysteria(x) ::: x is a condition of hysteria.",
        "Neurasthenia(x) ::: x is a minor stage of hysteria.",
        "ContemporaryArt(x) ::: x is a tendency of contemporary art.",
        "MysticWorks(x) ::: x is a mystic work.",
        "SymbolicWorks(x) ::: x is a symbolic work.",
        "DecadentWorks(x) ::: x is a decadent work.",
        "FashionableSociety(x) ::: x is a fashionable society.",
        "Admiration(x, y) ::: x admires y.",
        "MentalAberration(x) ::: x is a mental aberration.",
        "HumanPsyche(x) ::: x is related to the human psyche."
      ],
      "premises": [
        "∀x (Degeneration(x) ∧ Hysteria(x) → Neurasthenia(x)) ::: The confluence of degeneration and hysteria leads to neurasthenia.",
        "∀x (ContemporaryArt(x) ∧ MysticWorks(x) ∧ SymbolicWorks(x) ∧ DecadentWorks(x) ∧ FashionableSociety(x) → Admiration(a_0, x)) ::: The tendencies of contemporary art and poetry are admired by fashionable society.",
        "∀x (MentalAberration(x) → HumanPsyche(x)) ::: Mental aberrations are related to the human psyche.",
        "∀x (Neurasthenia(x) → (Degeneration(x) ∧ Hysteria(x))) ::: Neurasthenia is a minor stage of degeneration and hysteria.",
        "Conclusion:",
        "∃x (Degeneration(x) ∧ Hysteria(x)) ::: There exists a condition of degeneration and hysteria.",
        "∃y (Admiration(a_0, y) ∧ (MysticWorks(y) ∧ SymbolicWorks(y) ∧ DecadentWorks(y))) ::: There exists a mystic, symbolic, or decadent work that is admired by people."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 585,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 3,
      "paragraph": "The book deals with numerous case studies of various artists, writers and thinkers (Oscar Wilde, Henrik Ibsen, Richard Wagner and Friedrich Nietzsche to name a few), but its basic premise remains that society and human beings themselves are degenerating, and this degeneration is both reflected in and influenced by art. Hannah Arendt, in her book The Origins of Totalitarianism, refers to late 19th Century French society as embracing unusual or exotic types or individuals, such as criminals, Gypsies and Turks, and certain others formerly not seen as socially acceptable, so Nordau's position is not novel or isolated as social criticism.",
      "question_template": "[[CANDIDATE_ANSWER]] loses the auction and vows revenge.",
      "candidate_answers": [
        "Degeneration is both reflected in and influenced by art."
      ],
      "predicates": [
        "Degenerating(a_0) ::: a person or society is degenerating.",
        "ReflectsInArt(a_0) ::: a person or society is reflected in art.",
        "InfluencedByArt(a_0) ::: a person or society is influenced by art.",
        "CaseStudy(x) ::: x is a case study of an artist, writer, or thinker.",
        "Author(x, y) ::: x is the author of y.",
        "Book(x) ::: x is a book.",
        "Premise(x) ::: x is a basic premise of a book.",
        "UnusualTypes(x) ::: x refers to unusual or exotic types or individuals."
      ],
      "premises": [
        "Degenerating(a_0) ∧ ReflectsInArt(a_0) ∧ InfluencedByArt(a_0) ::: The degeneration of society and human beings is both reflected in and influenced by art.",
        "∃x (CaseStudy(x) ∧ Author(a_1, x)) ::: The book deals with numerous case studies of various artists, writers, and thinkers, including Howard Fertig.",
        "Premise(degeneration) ::: The basic premise of the book remains that society and human beings themselves are degenerating.",
        "∃y (UnusualTypes(y) ∧ Author(a_2, y)) ::: Hannah Arendt refers to unusual or exotic types or individuals in her book.",
        "∃z (CaseStudy(z) ∧ Author(a_3, z)) ::: Freud is a case study in the book.",
        "∃w (CaseStudy(w) ∧ Author(a_4, w)) ::: Jung is a case study in the book."
      ],
      "conclusions": [
        "Degenerating(a_0) ∧ ReflectsInArt(a_0) ∧ InfluencedByArt(a_0)"
      ]
    },
    {
      "id": 585,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 4,
      "paragraph": "The original article's text comports quite closely to Howard Fertig, NY 1960. During the time of Nordau's writing, physical, physiognomic, or mechanical factors were still being regarded as causative in mental aberrations and malfunctions. The symbolic or mythic approached later implemented by Freud and Jung made no part of Nordau's understanding of the human psyche.",
      "question_template": "[[CANDIDATE_ANSWER]] loses the auction and vows revenge.",
      "candidate_answers": [
        "Physical, physiognomic, or mechanical factors",
        "Causative in mental aberrations and malfunctions"
      ],
      "predicates": [
        "OriginalText(x) ::: x is the original article's text.",
        "ComportsWith(x, y) ::: x comports closely with y.",
        "CausativeFactors(x) ::: x are factors regarded as causative in mental aberrations and malfunctions.",
        "SymbolicApproach(x) ::: x is a symbolic approach.",
        "MythicApproach(x) ::: x is a mythic approach.",
        "Understanding(x, y) ::: x is the understanding of y."
      ],
      "premises": [
        "OriginalText(originalArticle) ∧ ComportsWith(originalArticle, howardFertig) ::: The original article's text comports quite closely to Howard Fertig, NY 1960.",
        "CausativeFactors(physicalFactors) ∧ CausativeFactors(physiognomicFactors) ∧ CausativeFactors(mechanicalFactors) ∧ (CausativeFactors(physicalFactors) ∧ CausativeFactors(physiognomicFactors) ∧ CausativeFactors(mechanicalFactors) → Understanding(nordau, mentalAberrations)) ::: During the time of Nordau's writing, physical, physiognomic, or mechanical factors were still being regarded as causative in mental aberrations and malfunctions.",
        "¬Understanding(nordau, symbolicApproach) ∧ ¬Understanding(nordau, mythicApproach) ::: The symbolic or mythic approaches later implemented by Freud and Jung made no part of Nordau's understanding of the human psyche."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "586": [
    {
      "id": 586,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 3,
      "paragraph": "The book deals with numerous case studies of various artists, writers and thinkers (Oscar Wilde, Henrik Ibsen, Richard Wagner and Friedrich Nietzsche to name a few), but its basic premise remains that society and human beings themselves are degenerating, and this degeneration is both reflected in and influenced by art. Hannah Arendt, in her book The Origins of Totalitarianism, refers to late 19th Century French society as embracing unusual or exotic types or individuals, such as criminals, Gypsies and Turks, and certain others formerly not seen as socially acceptable, so Nordau's position is not novel or isolated as social criticism.",
      "question_template": "Spencer Island is off the coastline of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Oscar Wilde, Henrik Ibsen, Richard Wagner, Friedrich Nietzsche"
      ],
      "predicates": [
        "Degenerating(a_0) ::: a person or society is degenerating.",
        "ReflectsInArt(a_0) ::: a person or society is reflected in art.",
        "InfluencedByArt(a_0) ::: a person or society is influenced by art.",
        "CaseStudy(x) ::: x is a case study of an artist, writer, or thinker.",
        "Author(x, y) ::: x is the author of y.",
        "Book(x) ::: x is a book.",
        "Premise(x) ::: x is a basic premise of a book.",
        "UnusualTypes(x) ::: x refers to unusual or exotic types or individuals."
      ],
      "premises": [
        "Degenerating(a_0) ∧ ReflectsInArt(a_0) ∧ InfluencedByArt(a_0) ::: The degeneration of society and human beings is both reflected in and influenced by art.",
        "∃x (CaseStudy(x) ∧ Author(a_1, x)) ::: The book deals with numerous case studies of various artists, writers, and thinkers, including Howard Fertig.",
        "Premise(degeneration) ::: The basic premise of the book remains that society and human beings themselves are degenerating.",
        "∃y (UnusualTypes(y) ∧ Author(a_2, y)) ::: Hannah Arendt refers to unusual or exotic types or individuals in her book.",
        "∃z (CaseStudy(z) ∧ Author(a_3, z)) ::: Freud is a case study in the book.",
        "∃w (CaseStudy(w) ∧ Author(a_4, w)) ::: Jung is a case study in the book."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "587": [
    {
      "id": 587,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 0,
      "paragraph": " Nordau begins his work with a \"medical\" and social interpretation of what has created this Degeneration in society. Nordau divides his study into five books. In the first book, Nordau identifies the phenomenon of fin de siĂ¨cle in Europe. He sees this as first being recognised, though not originating, in France, describing this phenomenon as \"a contempt for the traditional views of custom and morality\". He sees it as a sort of decadence, a world-weariness, and the wilful rejection of the moral boundaries governing the world. He uses examples from French periodicals and books in French to show how it has affected all elements of society. Nordau accuses also society of becoming more and more inclined to imitate what they see in art. He sees in the fashionable society of Paris and London that \"[e]very single figure strives visibly by some singularity in outline, set, cut or colour, to startle attention violently, and imperiously to detain it. Each one wishes to create a strong nervous excitement, no matter whether agreeably or disagreeably\".",
      "question_template": "The relationship between Godfrey and Professor Artlett is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- A contempt for the traditional views of custom and morality",
        "- A sort of decadence",
        "- A world-weariness",
        "- The wilful rejection of the moral boundaries governing the world"
      ],
      "predicates": [
        "Degeneration(x) ::: x represents degeneration in society.",
        "MedicalInterpretation(x) ::: x is a medical interpretation of degeneration.",
        "SocialInterpretation(x) ::: x is a social interpretation of degeneration.",
        "Divides(x, y) ::: x divides his study into y books.",
        "Identifies(x, y) ::: x identifies the phenomenon y.",
        "RecognizedIn(x, y) ::: x is recognized in y.",
        "Describes(x, y) ::: x describes y as a certain phenomenon.",
        "Accuses(x, y) ::: x accuses y of a certain behavior.",
        "Imitate(x, y) ::: x imitates what they see in y.",
        "FashionableSociety(x) ::: x is a fashionable society.",
        "Strives(x, y) ::: x strives for a certain quality or characteristic."
      ],
      "premises": [
        "MedicalInterpretation(nordau) ∧ SocialInterpretation(nordau) ∧ Degeneration(nordau) ::: Nordau begins his work with a \"medical\" and social interpretation of what has created this Degeneration in society.",
        "Divides(nordau, 5) ::: Nordau divides his study into five books.",
        "Identifies(nordau, fin_de_siècle) ::: In the first book, Nordau identifies the phenomenon of fin de siècle in Europe.",
        "RecognizedIn(fin_de_siècle, france) ::: He sees this as first being recognized in France.",
        "Describes(fin_de_siècle, contempt_for_traditional_views) ::: He describes this phenomenon as \"a contempt for the traditional views of custom and morality\".",
        "Accuses(nordau, society) ::: Nordau accuses society of becoming more inclined to imitate what they see in art.",
        "Imitate(society, art) ::: Society imitates what they see in art.",
        "FashionableSociety(paris) ∧ FashionableSociety(london) ::: He sees in the fashionable society of Paris and London.",
        "Strives(figure, singularity) ::: Every single figure strives visibly by some singularity in outline, set, cut or colour, to startle attention violently.",
        "Conclusion:",
        "∀x (Degeneration(x) → (MedicalInterpretation(x) ∧ SocialInterpretation(x))) ::: Any degeneration in society has both medical and social interpretations."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 587,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 2,
      "paragraph": "In the fin-de-siĂ¨cle disposition, in the tendencies of contemporary art and poetry, in the life and conduct of men who write mystic, symbolic and 'decadent' works and the attitude taken by their admirers in the tastes and aesthetic instincts of fashionable society, the confluence of two well-defined conditions of disease, with which he [the physician] is quite familiar, viz. degeneration and hysteria, of which the minor stages are designated as neurasthenia.",
      "question_template": "The relationship between Godfrey and Professor Artlett is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Degeneration",
        "Hysteria"
      ],
      "predicates": [
        "Degeneration(x) ::: x is a condition of degeneration.",
        "Hysteria(x) ::: x is a condition of hysteria.",
        "Neurasthenia(x) ::: x is a minor stage of hysteria.",
        "ContemporaryArt(x) ::: x is a tendency of contemporary art.",
        "MysticWorks(x) ::: x is a mystic work.",
        "SymbolicWorks(x) ::: x is a symbolic work.",
        "DecadentWorks(x) ::: x is a decadent work.",
        "FashionableSociety(x) ::: x is a fashionable society.",
        "Admiration(x, y) ::: x admires y.",
        "MentalAberration(x) ::: x is a mental aberration.",
        "HumanPsyche(x) ::: x is related to the human psyche."
      ],
      "premises": [
        "∀x (Degeneration(x) ∧ Hysteria(x) → Neurasthenia(x)) ::: The confluence of degeneration and hysteria leads to neurasthenia.",
        "∀x (ContemporaryArt(x) ∧ MysticWorks(x) ∧ SymbolicWorks(x) ∧ DecadentWorks(x) ∧ FashionableSociety(x) → Admiration(a_0, x)) ::: The tendencies of contemporary art and poetry are admired by fashionable society.",
        "∀x (MentalAberration(x) → HumanPsyche(x)) ::: Mental aberrations are related to the human psyche.",
        "∀x (Neurasthenia(x) → (Degeneration(x) ∧ Hysteria(x))) ::: Neurasthenia is a minor stage of degeneration and hysteria.",
        "Conclusion:",
        "∃x (Degeneration(x) ∧ Hysteria(x)) ::: There exists a condition of degeneration and hysteria.",
        "∃y (Admiration(a_0, y) ∧ (MysticWorks(y) ∧ SymbolicWorks(y) ∧ DecadentWorks(y))) ::: There exists a mystic, symbolic, or decadent work that is admired by people."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "589": [
    {
      "id": 589,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 1,
      "paragraph": "Nordau establishes the cultural phenomenon of fin de siĂ¨cle in the opening pages, but he quickly moves to the viewpoint of a physician and identifies what he sees as an illness:",
      "question_template": "[[CANDIDATE_ANSWER]] is related to Kolderup.",
      "candidate_answers": [
        "fin de siècle"
      ],
      "predicates": [
        "CulturalPhenomenon(x) ::: x is a cultural phenomenon.",
        "Physician(x) ::: x is a physician.",
        "Identifies(x, y) ::: x identifies y as something.",
        "Illness(x) ::: x is an illness.",
        "MentalAberration(x) ::: x is a mental aberration.",
        "Malfunction(x) ::: x is a malfunction.",
        "HumanPsyche(x) ::: x is related to the human psyche.",
        "SymbolicApproach(x) ::: x is a symbolic approach.",
        "MythicApproach(x) ::: x is a mythic approach."
      ],
      "premises": [
        "CulturalPhenomenon(fin_de_siecle) ::: Nordau establishes the cultural phenomenon of fin de siècle.",
        "Physician(nordau) ::: Nordau moves to the viewpoint of a physician.",
        "Identifies(nordau, illness) ::: Nordau identifies what he sees as an illness.",
        "Illness(mental_aberrations) ::: Mental aberrations are considered an illness.",
        "Illness(malfunctions) ::: Malfunctions are also considered an illness.",
        "HumanPsyche(human_psyche) ::: The concept relates to the human psyche.",
        "SymbolicApproach(symbolic_approach) ::: There is a symbolic approach to understanding the human psyche.",
        "MythicApproach(mythic_approach) ::: There is also a mythic approach to understanding the human psyche.",
        "Conclusion:",
        "CulturalPhenomenon(fin_de_siecle) ∧ Physician(nordau) ∧ Identifies(nordau, illness) ::: Nordau establishes the cultural phenomenon of fin de siècle and identifies it as an illness from the viewpoint of a physician."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 589,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 2,
      "paragraph": "In the fin-de-siĂ¨cle disposition, in the tendencies of contemporary art and poetry, in the life and conduct of men who write mystic, symbolic and 'decadent' works and the attitude taken by their admirers in the tastes and aesthetic instincts of fashionable society, the confluence of two well-defined conditions of disease, with which he [the physician] is quite familiar, viz. degeneration and hysteria, of which the minor stages are designated as neurasthenia.",
      "question_template": "[[CANDIDATE_ANSWER]] is related to Kolderup.",
      "candidate_answers": [
        "degeneration and hysteria",
        "the confluence of two well-defined conditions of disease"
      ],
      "predicates": [
        "Degeneration(x) ::: x is a condition of degeneration.",
        "Hysteria(x) ::: x is a condition of hysteria.",
        "Neurasthenia(x) ::: x is a minor stage of hysteria.",
        "ContemporaryArt(x) ::: x is a tendency of contemporary art.",
        "MysticWorks(x) ::: x is a mystic work.",
        "SymbolicWorks(x) ::: x is a symbolic work.",
        "DecadentWorks(x) ::: x is a decadent work.",
        "FashionableSociety(x) ::: x is a fashionable society.",
        "Admiration(x, y) ::: x admires y.",
        "MentalAberration(x) ::: x is a mental aberration.",
        "HumanPsyche(x) ::: x is related to the human psyche."
      ],
      "premises": [
        "∀x (Degeneration(x) ∧ Hysteria(x) → Neurasthenia(x)) ::: The confluence of degeneration and hysteria leads to neurasthenia.",
        "∀x (ContemporaryArt(x) ∧ MysticWorks(x) ∧ SymbolicWorks(x) ∧ DecadentWorks(x) ∧ FashionableSociety(x) → Admiration(a_0, x)) ::: The tendencies of contemporary art and poetry are admired by fashionable society.",
        "∀x (MentalAberration(x) → HumanPsyche(x)) ::: Mental aberrations are related to the human psyche.",
        "∀x (Neurasthenia(x) → (Degeneration(x) ∧ Hysteria(x))) ::: Neurasthenia is a minor stage of degeneration and hysteria.",
        "Conclusion:",
        "∃x (Degeneration(x) ∧ Hysteria(x)) ::: There exists a condition of degeneration and hysteria.",
        "∃y (Admiration(a_0, y) ∧ (MysticWorks(y) ∧ SymbolicWorks(y) ∧ DecadentWorks(y))) ::: There exists a mystic, symbolic, or decadent work that is admired by people."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "591": [
    {
      "id": 591,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 1,
      "paragraph": "Nordau establishes the cultural phenomenon of fin de siĂ¨cle in the opening pages, but he quickly moves to the viewpoint of a physician and identifies what he sees as an illness:",
      "question_template": "Godfrey asked [[CANDIDATE_ANSWER]] to do before marrying Phina.",
      "candidate_answers": [
        "Nordau establishes the cultural phenomenon of fin de siĂ¨cle",
        "He quickly moves to the viewpoint of a physician",
        "Identifies what he sees as an illness"
      ],
      "predicates": [
        "CulturalPhenomenon(x) ::: x is a cultural phenomenon.",
        "Physician(x) ::: x is a physician.",
        "Identifies(x, y) ::: x identifies y as something.",
        "Illness(x) ::: x is an illness.",
        "MentalAberration(x) ::: x is a mental aberration.",
        "Malfunction(x) ::: x is a malfunction.",
        "HumanPsyche(x) ::: x is related to the human psyche.",
        "SymbolicApproach(x) ::: x is a symbolic approach.",
        "MythicApproach(x) ::: x is a mythic approach."
      ],
      "premises": [
        "CulturalPhenomenon(fin_de_siecle) ::: Nordau establishes the cultural phenomenon of fin de siècle.",
        "Physician(nordau) ::: Nordau moves to the viewpoint of a physician.",
        "Identifies(nordau, illness) ::: Nordau identifies what he sees as an illness.",
        "Illness(mental_aberrations) ::: Mental aberrations are considered an illness.",
        "Illness(malfunctions) ::: Malfunctions are also considered an illness.",
        "HumanPsyche(human_psyche) ::: The concept relates to the human psyche.",
        "SymbolicApproach(symbolic_approach) ::: There is a symbolic approach to understanding the human psyche.",
        "MythicApproach(mythic_approach) ::: There is also a mythic approach to understanding the human psyche.",
        "Conclusion:",
        "CulturalPhenomenon(fin_de_siecle) ∧ Physician(nordau) ∧ Identifies(nordau, illness) ::: Nordau establishes the cultural phenomenon of fin de siècle and identifies it as an illness from the viewpoint of a physician."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 591,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 2,
      "paragraph": "In the fin-de-siĂ¨cle disposition, in the tendencies of contemporary art and poetry, in the life and conduct of men who write mystic, symbolic and 'decadent' works and the attitude taken by their admirers in the tastes and aesthetic instincts of fashionable society, the confluence of two well-defined conditions of disease, with which he [the physician] is quite familiar, viz. degeneration and hysteria, of which the minor stages are designated as neurasthenia.",
      "question_template": "Godfrey asked [[CANDIDATE_ANSWER]] to do before marrying Phina.",
      "candidate_answers": [
        "- The fin-de-siècle disposition",
        "- The tendencies of contemporary art and poetry",
        "- The life and conduct of men who write mystic, symbolic and 'decadent' works",
        "- The attitude taken by their admirers in the tastes and aesthetic instincts of fashionable society",
        "- The confluence of two well-defined conditions of disease"
      ],
      "predicates": [
        "Degeneration(x) ::: x is a condition of degeneration.",
        "Hysteria(x) ::: x is a condition of hysteria.",
        "Neurasthenia(x) ::: x is a minor stage of hysteria.",
        "ContemporaryArt(x) ::: x is a tendency of contemporary art.",
        "MysticWorks(x) ::: x is a mystic work.",
        "SymbolicWorks(x) ::: x is a symbolic work.",
        "DecadentWorks(x) ::: x is a decadent work.",
        "FashionableSociety(x) ::: x is a fashionable society.",
        "Admiration(x, y) ::: x admires y.",
        "MentalAberration(x) ::: x is a mental aberration.",
        "HumanPsyche(x) ::: x is related to the human psyche."
      ],
      "premises": [
        "∀x (Degeneration(x) ∧ Hysteria(x) → Neurasthenia(x)) ::: The confluence of degeneration and hysteria leads to neurasthenia.",
        "∀x (ContemporaryArt(x) ∧ MysticWorks(x) ∧ SymbolicWorks(x) ∧ DecadentWorks(x) ∧ FashionableSociety(x) → Admiration(a_0, x)) ::: The tendencies of contemporary art and poetry are admired by fashionable society.",
        "∀x (MentalAberration(x) → HumanPsyche(x)) ::: Mental aberrations are related to the human psyche.",
        "∀x (Neurasthenia(x) → (Degeneration(x) ∧ Hysteria(x))) ::: Neurasthenia is a minor stage of degeneration and hysteria.",
        "Conclusion:",
        "∃x (Degeneration(x) ∧ Hysteria(x)) ::: There exists a condition of degeneration and hysteria.",
        "∃y (Admiration(a_0, y) ∧ (MysticWorks(y) ∧ SymbolicWorks(y) ∧ DecadentWorks(y))) ::: There exists a mystic, symbolic, or decadent work that is admired by people."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 591,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 3,
      "paragraph": "The book deals with numerous case studies of various artists, writers and thinkers (Oscar Wilde, Henrik Ibsen, Richard Wagner and Friedrich Nietzsche to name a few), but its basic premise remains that society and human beings themselves are degenerating, and this degeneration is both reflected in and influenced by art. Hannah Arendt, in her book The Origins of Totalitarianism, refers to late 19th Century French society as embracing unusual or exotic types or individuals, such as criminals, Gypsies and Turks, and certain others formerly not seen as socially acceptable, so Nordau's position is not novel or isolated as social criticism.",
      "question_template": "Godfrey asked [[CANDIDATE_ANSWER]] to do before marrying Phina.",
      "candidate_answers": [
        "- Numerous case studies of various artists, writers and thinkers",
        "- Society and human beings themselves are degenerating",
        "- Late 19th Century French society as embracing unusual or exotic types or individuals, such as criminals, Gypsies and Turks"
      ],
      "predicates": [
        "Degenerating(a_0) ::: a person or society is degenerating.",
        "ReflectsInArt(a_0) ::: a person or society is reflected in art.",
        "InfluencedByArt(a_0) ::: a person or society is influenced by art.",
        "CaseStudy(x) ::: x is a case study of an artist, writer, or thinker.",
        "Author(x, y) ::: x is the author of y.",
        "Book(x) ::: x is a book.",
        "Premise(x) ::: x is a basic premise of a book.",
        "UnusualTypes(x) ::: x refers to unusual or exotic types or individuals."
      ],
      "premises": [
        "Degenerating(a_0) ∧ ReflectsInArt(a_0) ∧ InfluencedByArt(a_0) ::: The degeneration of society and human beings is both reflected in and influenced by art.",
        "∃x (CaseStudy(x) ∧ Author(a_1, x)) ::: The book deals with numerous case studies of various artists, writers, and thinkers, including Howard Fertig.",
        "Premise(degeneration) ::: The basic premise of the book remains that society and human beings themselves are degenerating.",
        "∃y (UnusualTypes(y) ∧ Author(a_2, y)) ::: Hannah Arendt refers to unusual or exotic types or individuals in her book.",
        "∃z (CaseStudy(z) ∧ Author(a_3, z)) ::: Freud is a case study in the book.",
        "∃w (CaseStudy(w) ∧ Author(a_4, w)) ::: Jung is a case study in the book."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "592": [
    {
      "id": 592,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 0,
      "paragraph": " Nordau begins his work with a \"medical\" and social interpretation of what has created this Degeneration in society. Nordau divides his study into five books. In the first book, Nordau identifies the phenomenon of fin de siĂ¨cle in Europe. He sees this as first being recognised, though not originating, in France, describing this phenomenon as \"a contempt for the traditional views of custom and morality\". He sees it as a sort of decadence, a world-weariness, and the wilful rejection of the moral boundaries governing the world. He uses examples from French periodicals and books in French to show how it has affected all elements of society. Nordau accuses also society of becoming more and more inclined to imitate what they see in art. He sees in the fashionable society of Paris and London that \"[e]very single figure strives visibly by some singularity in outline, set, cut or colour, to startle attention violently, and imperiously to detain it. Each one wishes to create a strong nervous excitement, no matter whether agreeably or disagreeably\".",
      "question_template": "[[CANDIDATE_ANSWER]] is Tartlet.",
      "candidate_answers": [
        "- Imitate what they see in art",
        "- The fashionable society of Paris and London"
      ],
      "predicates": [
        "Degeneration(x) ::: x represents degeneration in society.",
        "MedicalInterpretation(x) ::: x is a medical interpretation of degeneration.",
        "SocialInterpretation(x) ::: x is a social interpretation of degeneration.",
        "Divides(x, y) ::: x divides his study into y books.",
        "Identifies(x, y) ::: x identifies the phenomenon y.",
        "RecognizedIn(x, y) ::: x is recognized in y.",
        "Describes(x, y) ::: x describes y as a certain phenomenon.",
        "Accuses(x, y) ::: x accuses y of a certain behavior.",
        "Imitate(x, y) ::: x imitates what they see in y.",
        "FashionableSociety(x) ::: x is a fashionable society.",
        "Strives(x, y) ::: x strives for a certain quality or characteristic."
      ],
      "premises": [
        "MedicalInterpretation(nordau) ∧ SocialInterpretation(nordau) ∧ Degeneration(nordau) ::: Nordau begins his work with a \"medical\" and social interpretation of what has created this Degeneration in society.",
        "Divides(nordau, 5) ::: Nordau divides his study into five books.",
        "Identifies(nordau, fin_de_siècle) ::: In the first book, Nordau identifies the phenomenon of fin de siècle in Europe.",
        "RecognizedIn(fin_de_siècle, france) ::: He sees this as first being recognized in France.",
        "Describes(fin_de_siècle, contempt_for_traditional_views) ::: He describes this phenomenon as \"a contempt for the traditional views of custom and morality\".",
        "Accuses(nordau, society) ::: Nordau accuses society of becoming more inclined to imitate what they see in art.",
        "Imitate(society, art) ::: Society imitates what they see in art.",
        "FashionableSociety(paris) ∧ FashionableSociety(london) ::: He sees in the fashionable society of Paris and London.",
        "Strives(figure, singularity) ::: Every single figure strives visibly by some singularity in outline, set, cut or colour, to startle attention violently.",
        "Conclusion:",
        "∀x (Degeneration(x) → (MedicalInterpretation(x) ∧ SocialInterpretation(x))) ::: Any degeneration in society has both medical and social interpretations."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 592,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 1,
      "paragraph": "Nordau establishes the cultural phenomenon of fin de siĂ¨cle in the opening pages, but he quickly moves to the viewpoint of a physician and identifies what he sees as an illness:",
      "question_template": "[[CANDIDATE_ANSWER]] is Tartlet.",
      "candidate_answers": [
        "the cultural phenomenon of fin de siècle",
        "an illness"
      ],
      "predicates": [
        "CulturalPhenomenon(x) ::: x is a cultural phenomenon.",
        "Physician(x) ::: x is a physician.",
        "Identifies(x, y) ::: x identifies y as something.",
        "Illness(x) ::: x is an illness.",
        "MentalAberration(x) ::: x is a mental aberration.",
        "Malfunction(x) ::: x is a malfunction.",
        "HumanPsyche(x) ::: x is related to the human psyche.",
        "SymbolicApproach(x) ::: x is a symbolic approach.",
        "MythicApproach(x) ::: x is a mythic approach."
      ],
      "premises": [
        "CulturalPhenomenon(fin_de_siecle) ::: Nordau establishes the cultural phenomenon of fin de siècle.",
        "Physician(nordau) ::: Nordau moves to the viewpoint of a physician.",
        "Identifies(nordau, illness) ::: Nordau identifies what he sees as an illness.",
        "Illness(mental_aberrations) ::: Mental aberrations are considered an illness.",
        "Illness(malfunctions) ::: Malfunctions are also considered an illness.",
        "HumanPsyche(human_psyche) ::: The concept relates to the human psyche.",
        "SymbolicApproach(symbolic_approach) ::: There is a symbolic approach to understanding the human psyche.",
        "MythicApproach(mythic_approach) ::: There is also a mythic approach to understanding the human psyche.",
        "Conclusion:",
        "CulturalPhenomenon(fin_de_siecle) ∧ Physician(nordau) ∧ Identifies(nordau, illness) ::: Nordau establishes the cultural phenomenon of fin de siècle and identifies it as an illness from the viewpoint of a physician."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 592,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 2,
      "paragraph": "In the fin-de-siĂ¨cle disposition, in the tendencies of contemporary art and poetry, in the life and conduct of men who write mystic, symbolic and 'decadent' works and the attitude taken by their admirers in the tastes and aesthetic instincts of fashionable society, the confluence of two well-defined conditions of disease, with which he [the physician] is quite familiar, viz. degeneration and hysteria, of which the minor stages are designated as neurasthenia.",
      "question_template": "[[CANDIDATE_ANSWER]] is Tartlet.",
      "candidate_answers": [
        "degeneration and hysteria",
        "the tendencies of contemporary art and poetry",
        "the life and conduct of men who write mystic, symbolic and 'decadent' works"
      ],
      "predicates": [
        "Degeneration(x) ::: x is a condition of degeneration.",
        "Hysteria(x) ::: x is a condition of hysteria.",
        "Neurasthenia(x) ::: x is a minor stage of hysteria.",
        "ContemporaryArt(x) ::: x is a tendency of contemporary art.",
        "MysticWorks(x) ::: x is a mystic work.",
        "SymbolicWorks(x) ::: x is a symbolic work.",
        "DecadentWorks(x) ::: x is a decadent work.",
        "FashionableSociety(x) ::: x is a fashionable society.",
        "Admiration(x, y) ::: x admires y.",
        "MentalAberration(x) ::: x is a mental aberration.",
        "HumanPsyche(x) ::: x is related to the human psyche."
      ],
      "premises": [
        "∀x (Degeneration(x) ∧ Hysteria(x) → Neurasthenia(x)) ::: The confluence of degeneration and hysteria leads to neurasthenia.",
        "∀x (ContemporaryArt(x) ∧ MysticWorks(x) ∧ SymbolicWorks(x) ∧ DecadentWorks(x) ∧ FashionableSociety(x) → Admiration(a_0, x)) ::: The tendencies of contemporary art and poetry are admired by fashionable society.",
        "∀x (MentalAberration(x) → HumanPsyche(x)) ::: Mental aberrations are related to the human psyche.",
        "∀x (Neurasthenia(x) → (Degeneration(x) ∧ Hysteria(x))) ::: Neurasthenia is a minor stage of degeneration and hysteria.",
        "Conclusion:",
        "∃x (Degeneration(x) ∧ Hysteria(x)) ::: There exists a condition of degeneration and hysteria.",
        "∃y (Admiration(a_0, y) ∧ (MysticWorks(y) ∧ SymbolicWorks(y) ∧ DecadentWorks(y))) ::: There exists a mystic, symbolic, or decadent work that is admired by people."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 592,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 3,
      "paragraph": "The book deals with numerous case studies of various artists, writers and thinkers (Oscar Wilde, Henrik Ibsen, Richard Wagner and Friedrich Nietzsche to name a few), but its basic premise remains that society and human beings themselves are degenerating, and this degeneration is both reflected in and influenced by art. Hannah Arendt, in her book The Origins of Totalitarianism, refers to late 19th Century French society as embracing unusual or exotic types or individuals, such as criminals, Gypsies and Turks, and certain others formerly not seen as socially acceptable, so Nordau's position is not novel or isolated as social criticism.",
      "question_template": "[[CANDIDATE_ANSWER]] is Tartlet.",
      "candidate_answers": [
        "- Society and human beings themselves are degenerating",
        "- This degeneration is both reflected in and influenced by art",
        "- Late 19th Century French society as embracing unusual or exotic types or individuals"
      ],
      "predicates": [
        "Degenerating(a_0) ::: a person or society is degenerating.",
        "ReflectsInArt(a_0) ::: a person or society is reflected in art.",
        "InfluencedByArt(a_0) ::: a person or society is influenced by art.",
        "CaseStudy(x) ::: x is a case study of an artist, writer, or thinker.",
        "Author(x, y) ::: x is the author of y.",
        "Book(x) ::: x is a book.",
        "Premise(x) ::: x is a basic premise of a book.",
        "UnusualTypes(x) ::: x refers to unusual or exotic types or individuals."
      ],
      "premises": [
        "Degenerating(a_0) ∧ ReflectsInArt(a_0) ∧ InfluencedByArt(a_0) ::: The degeneration of society and human beings is both reflected in and influenced by art.",
        "∃x (CaseStudy(x) ∧ Author(a_1, x)) ::: The book deals with numerous case studies of various artists, writers, and thinkers, including Howard Fertig.",
        "Premise(degeneration) ::: The basic premise of the book remains that society and human beings themselves are degenerating.",
        "∃y (UnusualTypes(y) ∧ Author(a_2, y)) ::: Hannah Arendt refers to unusual or exotic types or individuals in her book.",
        "∃z (CaseStudy(z) ∧ Author(a_3, z)) ::: Freud is a case study in the book.",
        "∃w (CaseStudy(w) ∧ Author(a_4, w)) ::: Jung is a case study in the book."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "593": [
    {
      "id": 593,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 1,
      "paragraph": "Nordau establishes the cultural phenomenon of fin de siĂ¨cle in the opening pages, but he quickly moves to the viewpoint of a physician and identifies what he sees as an illness:",
      "question_template": "[[CANDIDATE_ANSWER]] is located on Spencer Island.",
      "candidate_answers": [
        "The cultural phenomenon of fin de siècle",
        "A viewpoint of a physician",
        "What he sees as an illness"
      ],
      "predicates": [
        "CulturalPhenomenon(x) ::: x is a cultural phenomenon.",
        "Physician(x) ::: x is a physician.",
        "Identifies(x, y) ::: x identifies y as something.",
        "Illness(x) ::: x is an illness.",
        "MentalAberration(x) ::: x is a mental aberration.",
        "Malfunction(x) ::: x is a malfunction.",
        "HumanPsyche(x) ::: x is related to the human psyche.",
        "SymbolicApproach(x) ::: x is a symbolic approach.",
        "MythicApproach(x) ::: x is a mythic approach."
      ],
      "premises": [
        "CulturalPhenomenon(fin_de_siecle) ::: Nordau establishes the cultural phenomenon of fin de siècle.",
        "Physician(nordau) ::: Nordau moves to the viewpoint of a physician.",
        "Identifies(nordau, illness) ::: Nordau identifies what he sees as an illness.",
        "Illness(mental_aberrations) ::: Mental aberrations are considered an illness.",
        "Illness(malfunctions) ::: Malfunctions are also considered an illness.",
        "HumanPsyche(human_psyche) ::: The concept relates to the human psyche.",
        "SymbolicApproach(symbolic_approach) ::: There is a symbolic approach to understanding the human psyche.",
        "MythicApproach(mythic_approach) ::: There is also a mythic approach to understanding the human psyche.",
        "Conclusion:",
        "CulturalPhenomenon(fin_de_siecle) ∧ Physician(nordau) ∧ Identifies(nordau, illness) ::: Nordau establishes the cultural phenomenon of fin de siècle and identifies it as an illness from the viewpoint of a physician."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 593,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 2,
      "paragraph": "In the fin-de-siĂ¨cle disposition, in the tendencies of contemporary art and poetry, in the life and conduct of men who write mystic, symbolic and 'decadent' works and the attitude taken by their admirers in the tastes and aesthetic instincts of fashionable society, the confluence of two well-defined conditions of disease, with which he [the physician] is quite familiar, viz. degeneration and hysteria, of which the minor stages are designated as neurasthenia.",
      "question_template": "[[CANDIDATE_ANSWER]] is located on Spencer Island.",
      "candidate_answers": [
        "- The confluence of two well-defined conditions of disease",
        "- Degeneration and hysteria",
        "- Minor stages are designated as neurasthenia"
      ],
      "predicates": [
        "Degeneration(x) ::: x is a condition of degeneration.",
        "Hysteria(x) ::: x is a condition of hysteria.",
        "Neurasthenia(x) ::: x is a minor stage of hysteria.",
        "ContemporaryArt(x) ::: x is a tendency of contemporary art.",
        "MysticWorks(x) ::: x is a mystic work.",
        "SymbolicWorks(x) ::: x is a symbolic work.",
        "DecadentWorks(x) ::: x is a decadent work.",
        "FashionableSociety(x) ::: x is a fashionable society.",
        "Admiration(x, y) ::: x admires y.",
        "MentalAberration(x) ::: x is a mental aberration.",
        "HumanPsyche(x) ::: x is related to the human psyche."
      ],
      "premises": [
        "∀x (Degeneration(x) ∧ Hysteria(x) → Neurasthenia(x)) ::: The confluence of degeneration and hysteria leads to neurasthenia.",
        "∀x (ContemporaryArt(x) ∧ MysticWorks(x) ∧ SymbolicWorks(x) ∧ DecadentWorks(x) ∧ FashionableSociety(x) → Admiration(a_0, x)) ::: The tendencies of contemporary art and poetry are admired by fashionable society.",
        "∀x (MentalAberration(x) → HumanPsyche(x)) ::: Mental aberrations are related to the human psyche.",
        "∀x (Neurasthenia(x) → (Degeneration(x) ∧ Hysteria(x))) ::: Neurasthenia is a minor stage of degeneration and hysteria.",
        "Conclusion:",
        "∃x (Degeneration(x) ∧ Hysteria(x)) ::: There exists a condition of degeneration and hysteria.",
        "∃y (Admiration(a_0, y) ∧ (MysticWorks(y) ∧ SymbolicWorks(y) ∧ DecadentWorks(y))) ::: There exists a mystic, symbolic, or decadent work that is admired by people."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 593,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 4,
      "paragraph": "The original article's text comports quite closely to Howard Fertig, NY 1960. During the time of Nordau's writing, physical, physiognomic, or mechanical factors were still being regarded as causative in mental aberrations and malfunctions. The symbolic or mythic approached later implemented by Freud and Jung made no part of Nordau's understanding of the human psyche.",
      "question_template": "[[CANDIDATE_ANSWER]] is located on Spencer Island.",
      "candidate_answers": [
        "Physical, physiognomic, or mechanical factors were still being regarded as causative in mental aberrations and malfunctions."
      ],
      "predicates": [
        "OriginalText(x) ::: x is the original article's text.",
        "ComportsWith(x, y) ::: x comports closely with y.",
        "CausativeFactors(x) ::: x are factors regarded as causative in mental aberrations and malfunctions.",
        "SymbolicApproach(x) ::: x is a symbolic approach.",
        "MythicApproach(x) ::: x is a mythic approach.",
        "Understanding(x, y) ::: x is the understanding of y."
      ],
      "premises": [
        "OriginalText(originalArticle) ∧ ComportsWith(originalArticle, howardFertig) ::: The original article's text comports quite closely to Howard Fertig, NY 1960.",
        "CausativeFactors(physicalFactors) ∧ CausativeFactors(physiognomicFactors) ∧ CausativeFactors(mechanicalFactors) ∧ (CausativeFactors(physicalFactors) ∧ CausativeFactors(physiognomicFactors) ∧ CausativeFactors(mechanicalFactors) → Understanding(nordau, mentalAberrations)) ::: During the time of Nordau's writing, physical, physiognomic, or mechanical factors were still being regarded as causative in mental aberrations and malfunctions.",
        "¬Understanding(nordau, symbolicApproach) ∧ ¬Understanding(nordau, mythicApproach) ::: The symbolic or mythic approaches later implemented by Freud and Jung made no part of Nordau's understanding of the human psyche."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "594": [
    {
      "id": 594,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 3,
      "paragraph": "The book deals with numerous case studies of various artists, writers and thinkers (Oscar Wilde, Henrik Ibsen, Richard Wagner and Friedrich Nietzsche to name a few), but its basic premise remains that society and human beings themselves are degenerating, and this degeneration is both reflected in and influenced by art. Hannah Arendt, in her book The Origins of Totalitarianism, refers to late 19th Century French society as embracing unusual or exotic types or individuals, such as criminals, Gypsies and Turks, and certain others formerly not seen as socially acceptable, so Nordau's position is not novel or isolated as social criticism.",
      "question_template": "[[CANDIDATE_ANSWER]] is from Kolderup.",
      "candidate_answers": [
        "Hannah Arendt"
      ],
      "predicates": [
        "Degenerating(a_0) ::: a person or society is degenerating.",
        "ReflectsInArt(a_0) ::: a person or society is reflected in art.",
        "InfluencedByArt(a_0) ::: a person or society is influenced by art.",
        "CaseStudy(x) ::: x is a case study of an artist, writer, or thinker.",
        "Author(x, y) ::: x is the author of y.",
        "Book(x) ::: x is a book.",
        "Premise(x) ::: x is a basic premise of a book.",
        "UnusualTypes(x) ::: x refers to unusual or exotic types or individuals."
      ],
      "premises": [
        "Degenerating(a_0) ∧ ReflectsInArt(a_0) ∧ InfluencedByArt(a_0) ::: The degeneration of society and human beings is both reflected in and influenced by art.",
        "∃x (CaseStudy(x) ∧ Author(a_1, x)) ::: The book deals with numerous case studies of various artists, writers, and thinkers, including Howard Fertig.",
        "Premise(degeneration) ::: The basic premise of the book remains that society and human beings themselves are degenerating.",
        "∃y (UnusualTypes(y) ∧ Author(a_2, y)) ::: Hannah Arendt refers to unusual or exotic types or individuals in her book.",
        "∃z (CaseStudy(z) ∧ Author(a_3, z)) ::: Freud is a case study in the book.",
        "∃w (CaseStudy(w) ∧ Author(a_4, w)) ::: Jung is a case study in the book."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "595": [
    {
      "id": 595,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 3,
      "paragraph": "The book deals with numerous case studies of various artists, writers and thinkers (Oscar Wilde, Henrik Ibsen, Richard Wagner and Friedrich Nietzsche to name a few), but its basic premise remains that society and human beings themselves are degenerating, and this degeneration is both reflected in and influenced by art. Hannah Arendt, in her book The Origins of Totalitarianism, refers to late 19th Century French society as embracing unusual or exotic types or individuals, such as criminals, Gypsies and Turks, and certain others formerly not seen as socially acceptable, so Nordau's position is not novel or isolated as social criticism.",
      "question_template": "The name of the ship used for Godfrey's world tour is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Numerous case studies of various artists, writers and thinkers",
        "- Society and human beings themselves are degenerating",
        "- Degeneration is both reflected in and influenced by art",
        "- Late 19th Century French society as embracing unusual or exotic types or individuals"
      ],
      "predicates": [
        "Degenerating(a_0) ::: a person or society is degenerating.",
        "ReflectsInArt(a_0) ::: a person or society is reflected in art.",
        "InfluencedByArt(a_0) ::: a person or society is influenced by art.",
        "CaseStudy(x) ::: x is a case study of an artist, writer, or thinker.",
        "Author(x, y) ::: x is the author of y.",
        "Book(x) ::: x is a book.",
        "Premise(x) ::: x is a basic premise of a book.",
        "UnusualTypes(x) ::: x refers to unusual or exotic types or individuals."
      ],
      "premises": [
        "Degenerating(a_0) ∧ ReflectsInArt(a_0) ∧ InfluencedByArt(a_0) ::: The degeneration of society and human beings is both reflected in and influenced by art.",
        "∃x (CaseStudy(x) ∧ Author(a_1, x)) ::: The book deals with numerous case studies of various artists, writers, and thinkers, including Howard Fertig.",
        "Premise(degeneration) ::: The basic premise of the book remains that society and human beings themselves are degenerating.",
        "∃y (UnusualTypes(y) ∧ Author(a_2, y)) ::: Hannah Arendt refers to unusual or exotic types or individuals in her book.",
        "∃z (CaseStudy(z) ∧ Author(a_3, z)) ::: Freud is a case study in the book.",
        "∃w (CaseStudy(w) ∧ Author(a_4, w)) ::: Jung is a case study in the book."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    }
  ],
  "596": [
    {
      "id": 596,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 3,
      "paragraph": "The book deals with numerous case studies of various artists, writers and thinkers (Oscar Wilde, Henrik Ibsen, Richard Wagner and Friedrich Nietzsche to name a few), but its basic premise remains that society and human beings themselves are degenerating, and this degeneration is both reflected in and influenced by art. Hannah Arendt, in her book The Origins of Totalitarianism, refers to late 19th Century French society as embracing unusual or exotic types or individuals, such as criminals, Gypsies and Turks, and certain others formerly not seen as socially acceptable, so Nordau's position is not novel or isolated as social criticism.",
      "question_template": "Godfrey was marooned on an island because of [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The basic premise remains that society and human beings themselves are degenerating, and this degeneration is both reflected in and influenced by art.",
        "Hannah Arendt, in her book The Origins of Totalitarianism, refers to late 19th Century French society as embracing unusual or exotic types or individuals."
      ],
      "predicates": [
        "Degenerating(a_0) ::: a person or society is degenerating.",
        "ReflectsInArt(a_0) ::: a person or society is reflected in art.",
        "InfluencedByArt(a_0) ::: a person or society is influenced by art.",
        "CaseStudy(x) ::: x is a case study of an artist, writer, or thinker.",
        "Author(x, y) ::: x is the author of y.",
        "Book(x) ::: x is a book.",
        "Premise(x) ::: x is a basic premise of a book.",
        "UnusualTypes(x) ::: x refers to unusual or exotic types or individuals."
      ],
      "premises": [
        "Degenerating(a_0) ∧ ReflectsInArt(a_0) ∧ InfluencedByArt(a_0) ::: The degeneration of society and human beings is both reflected in and influenced by art.",
        "∃x (CaseStudy(x) ∧ Author(a_1, x)) ::: The book deals with numerous case studies of various artists, writers, and thinkers, including Howard Fertig.",
        "Premise(degeneration) ::: The basic premise of the book remains that society and human beings themselves are degenerating.",
        "∃y (UnusualTypes(y) ∧ Author(a_2, y)) ::: Hannah Arendt refers to unusual or exotic types or individuals in her book.",
        "∃z (CaseStudy(z) ∧ Author(a_3, z)) ::: Freud is a case study in the book.",
        "∃w (CaseStudy(w) ∧ Author(a_4, w)) ::: Jung is a case study in the book."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "597": [
    {
      "id": 597,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 0,
      "paragraph": " Nordau begins his work with a \"medical\" and social interpretation of what has created this Degeneration in society. Nordau divides his study into five books. In the first book, Nordau identifies the phenomenon of fin de siĂ¨cle in Europe. He sees this as first being recognised, though not originating, in France, describing this phenomenon as \"a contempt for the traditional views of custom and morality\". He sees it as a sort of decadence, a world-weariness, and the wilful rejection of the moral boundaries governing the world. He uses examples from French periodicals and books in French to show how it has affected all elements of society. Nordau accuses also society of becoming more and more inclined to imitate what they see in art. He sees in the fashionable society of Paris and London that \"[e]very single figure strives visibly by some singularity in outline, set, cut or colour, to startle attention violently, and imperiously to detain it. Each one wishes to create a strong nervous excitement, no matter whether agreeably or disagreeably\".",
      "question_template": "Godfrey rescued Carefinotu from [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Nordau begins his work with a \"medical\" and social interpretation of what has created this Degeneration in society.",
        "- He sees it as a sort of decadence, a world-weariness, and the wilful rejection of the moral boundaries governing the world.",
        "- He uses examples from French periodicals and books in French to show how it has affected all elements of society.",
        "- Nordau accuses also society of becoming more and more inclined to imitate what they see in art."
      ],
      "predicates": [
        "Degeneration(x) ::: x represents degeneration in society.",
        "MedicalInterpretation(x) ::: x is a medical interpretation of degeneration.",
        "SocialInterpretation(x) ::: x is a social interpretation of degeneration.",
        "Divides(x, y) ::: x divides his study into y books.",
        "Identifies(x, y) ::: x identifies the phenomenon y.",
        "RecognizedIn(x, y) ::: x is recognized in y.",
        "Describes(x, y) ::: x describes y as a certain phenomenon.",
        "Accuses(x, y) ::: x accuses y of a certain behavior.",
        "Imitate(x, y) ::: x imitates what they see in y.",
        "FashionableSociety(x) ::: x is a fashionable society.",
        "Strives(x, y) ::: x strives for a certain quality or characteristic."
      ],
      "premises": [
        "MedicalInterpretation(nordau) ∧ SocialInterpretation(nordau) ∧ Degeneration(nordau) ::: Nordau begins his work with a \"medical\" and social interpretation of what has created this Degeneration in society.",
        "Divides(nordau, 5) ::: Nordau divides his study into five books.",
        "Identifies(nordau, fin_de_siècle) ::: In the first book, Nordau identifies the phenomenon of fin de siècle in Europe.",
        "RecognizedIn(fin_de_siècle, france) ::: He sees this as first being recognized in France.",
        "Describes(fin_de_siècle, contempt_for_traditional_views) ::: He describes this phenomenon as \"a contempt for the traditional views of custom and morality\".",
        "Accuses(nordau, society) ::: Nordau accuses society of becoming more inclined to imitate what they see in art.",
        "Imitate(society, art) ::: Society imitates what they see in art.",
        "FashionableSociety(paris) ∧ FashionableSociety(london) ::: He sees in the fashionable society of Paris and London.",
        "Strives(figure, singularity) ::: Every single figure strives visibly by some singularity in outline, set, cut or colour, to startle attention violently.",
        "Conclusion:",
        "∀x (Degeneration(x) → (MedicalInterpretation(x) ∧ SocialInterpretation(x))) ::: Any degeneration in society has both medical and social interpretations."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 597,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 1,
      "paragraph": "Nordau establishes the cultural phenomenon of fin de siĂ¨cle in the opening pages, but he quickly moves to the viewpoint of a physician and identifies what he sees as an illness:",
      "question_template": "Godfrey rescued Carefinotu from [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "A physician",
        "Identifies what he sees as an illness"
      ],
      "predicates": [
        "CulturalPhenomenon(x) ::: x is a cultural phenomenon.",
        "Physician(x) ::: x is a physician.",
        "Identifies(x, y) ::: x identifies y as something.",
        "Illness(x) ::: x is an illness.",
        "MentalAberration(x) ::: x is a mental aberration.",
        "Malfunction(x) ::: x is a malfunction.",
        "HumanPsyche(x) ::: x is related to the human psyche.",
        "SymbolicApproach(x) ::: x is a symbolic approach.",
        "MythicApproach(x) ::: x is a mythic approach."
      ],
      "premises": [
        "CulturalPhenomenon(fin_de_siecle) ::: Nordau establishes the cultural phenomenon of fin de siècle.",
        "Physician(nordau) ::: Nordau moves to the viewpoint of a physician.",
        "Identifies(nordau, illness) ::: Nordau identifies what he sees as an illness.",
        "Illness(mental_aberrations) ::: Mental aberrations are considered an illness.",
        "Illness(malfunctions) ::: Malfunctions are also considered an illness.",
        "HumanPsyche(human_psyche) ::: The concept relates to the human psyche.",
        "SymbolicApproach(symbolic_approach) ::: There is a symbolic approach to understanding the human psyche.",
        "MythicApproach(mythic_approach) ::: There is also a mythic approach to understanding the human psyche.",
        "Conclusion:",
        "CulturalPhenomenon(fin_de_siecle) ∧ Physician(nordau) ∧ Identifies(nordau, illness) ::: Nordau establishes the cultural phenomenon of fin de siècle and identifies it as an illness from the viewpoint of a physician."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 597,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 2,
      "paragraph": "In the fin-de-siĂ¨cle disposition, in the tendencies of contemporary art and poetry, in the life and conduct of men who write mystic, symbolic and 'decadent' works and the attitude taken by their admirers in the tastes and aesthetic instincts of fashionable society, the confluence of two well-defined conditions of disease, with which he [the physician] is quite familiar, viz. degeneration and hysteria, of which the minor stages are designated as neurasthenia.",
      "question_template": "Godfrey rescued Carefinotu from [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "the physician",
        "degeneration and hysteria",
        "neurasthenia"
      ],
      "predicates": [
        "Degeneration(x) ::: x is a condition of degeneration.",
        "Hysteria(x) ::: x is a condition of hysteria.",
        "Neurasthenia(x) ::: x is a minor stage of hysteria.",
        "ContemporaryArt(x) ::: x is a tendency of contemporary art.",
        "MysticWorks(x) ::: x is a mystic work.",
        "SymbolicWorks(x) ::: x is a symbolic work.",
        "DecadentWorks(x) ::: x is a decadent work.",
        "FashionableSociety(x) ::: x is a fashionable society.",
        "Admiration(x, y) ::: x admires y.",
        "MentalAberration(x) ::: x is a mental aberration.",
        "HumanPsyche(x) ::: x is related to the human psyche."
      ],
      "premises": [
        "∀x (Degeneration(x) ∧ Hysteria(x) → Neurasthenia(x)) ::: The confluence of degeneration and hysteria leads to neurasthenia.",
        "∀x (ContemporaryArt(x) ∧ MysticWorks(x) ∧ SymbolicWorks(x) ∧ DecadentWorks(x) ∧ FashionableSociety(x) → Admiration(a_0, x)) ::: The tendencies of contemporary art and poetry are admired by fashionable society.",
        "∀x (MentalAberration(x) → HumanPsyche(x)) ::: Mental aberrations are related to the human psyche.",
        "∀x (Neurasthenia(x) → (Degeneration(x) ∧ Hysteria(x))) ::: Neurasthenia is a minor stage of degeneration and hysteria.",
        "Conclusion:",
        "∃x (Degeneration(x) ∧ Hysteria(x)) ::: There exists a condition of degeneration and hysteria.",
        "∃y (Admiration(a_0, y) ∧ (MysticWorks(y) ∧ SymbolicWorks(y) ∧ DecadentWorks(y))) ::: There exists a mystic, symbolic, or decadent work that is admired by people."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 597,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 3,
      "paragraph": "The book deals with numerous case studies of various artists, writers and thinkers (Oscar Wilde, Henrik Ibsen, Richard Wagner and Friedrich Nietzsche to name a few), but its basic premise remains that society and human beings themselves are degenerating, and this degeneration is both reflected in and influenced by art. Hannah Arendt, in her book The Origins of Totalitarianism, refers to late 19th Century French society as embracing unusual or exotic types or individuals, such as criminals, Gypsies and Turks, and certain others formerly not seen as socially acceptable, so Nordau's position is not novel or isolated as social criticism.",
      "question_template": "Godfrey rescued Carefinotu from [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- The book deals with numerous case studies of various artists, writers and thinkers",
        "- Society and human beings themselves are degenerating",
        "- This degeneration is both reflected in and influenced by art",
        "- Hannah Arendt, in her book The Origins of Totalitarianism, refers to late 19th Century French society as embracing unusual or exotic types or individuals",
        "- Nordau's position is not novel or isolated as social criticism"
      ],
      "predicates": [
        "Degenerating(a_0) ::: a person or society is degenerating.",
        "ReflectsInArt(a_0) ::: a person or society is reflected in art.",
        "InfluencedByArt(a_0) ::: a person or society is influenced by art.",
        "CaseStudy(x) ::: x is a case study of an artist, writer, or thinker.",
        "Author(x, y) ::: x is the author of y.",
        "Book(x) ::: x is a book.",
        "Premise(x) ::: x is a basic premise of a book.",
        "UnusualTypes(x) ::: x refers to unusual or exotic types or individuals."
      ],
      "premises": [
        "Degenerating(a_0) ∧ ReflectsInArt(a_0) ∧ InfluencedByArt(a_0) ::: The degeneration of society and human beings is both reflected in and influenced by art.",
        "∃x (CaseStudy(x) ∧ Author(a_1, x)) ::: The book deals with numerous case studies of various artists, writers, and thinkers, including Howard Fertig.",
        "Premise(degeneration) ::: The basic premise of the book remains that society and human beings themselves are degenerating.",
        "∃y (UnusualTypes(y) ∧ Author(a_2, y)) ::: Hannah Arendt refers to unusual or exotic types or individuals in her book.",
        "∃z (CaseStudy(z) ∧ Author(a_3, z)) ::: Freud is a case study in the book.",
        "∃w (CaseStudy(w) ∧ Author(a_4, w)) ::: Jung is a case study in the book."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 597,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 4,
      "paragraph": "The original article's text comports quite closely to Howard Fertig, NY 1960. During the time of Nordau's writing, physical, physiognomic, or mechanical factors were still being regarded as causative in mental aberrations and malfunctions. The symbolic or mythic approached later implemented by Freud and Jung made no part of Nordau's understanding of the human psyche.",
      "question_template": "Godfrey rescued Carefinotu from [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The original article's text comports quite closely to Howard Fertig, NY 1960.",
        "Physical, physiognomic, or mechanical factors were still being regarded as causative in mental aberrations and malfunctions.",
        "The symbolic or mythic approached later implemented by Freud and Jung made no part of Nordau's understanding of the human psyche."
      ],
      "predicates": [
        "OriginalText(x) ::: x is the original article's text.",
        "ComportsWith(x, y) ::: x comports closely with y.",
        "CausativeFactors(x) ::: x are factors regarded as causative in mental aberrations and malfunctions.",
        "SymbolicApproach(x) ::: x is a symbolic approach.",
        "MythicApproach(x) ::: x is a mythic approach.",
        "Understanding(x, y) ::: x is the understanding of y."
      ],
      "premises": [
        "OriginalText(originalArticle) ∧ ComportsWith(originalArticle, howardFertig) ::: The original article's text comports quite closely to Howard Fertig, NY 1960.",
        "CausativeFactors(physicalFactors) ∧ CausativeFactors(physiognomicFactors) ∧ CausativeFactors(mechanicalFactors) ∧ (CausativeFactors(physicalFactors) ∧ CausativeFactors(physiognomicFactors) ∧ CausativeFactors(mechanicalFactors) → Understanding(nordau, mentalAberrations)) ::: During the time of Nordau's writing, physical, physiognomic, or mechanical factors were still being regarded as causative in mental aberrations and malfunctions.",
        "¬Understanding(nordau, symbolicApproach) ∧ ¬Understanding(nordau, mythicApproach) ::: The symbolic or mythic approaches later implemented by Freud and Jung made no part of Nordau's understanding of the human psyche."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "599": [
    {
      "id": 599,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 2,
      "paragraph": "In the fin-de-siĂ¨cle disposition, in the tendencies of contemporary art and poetry, in the life and conduct of men who write mystic, symbolic and 'decadent' works and the attitude taken by their admirers in the tastes and aesthetic instincts of fashionable society, the confluence of two well-defined conditions of disease, with which he [the physician] is quite familiar, viz. degeneration and hysteria, of which the minor stages are designated as neurasthenia.",
      "question_template": "The fashionable societies of [[CANDIDATE_ANSWER]] are pointed out as breaking moral boundaries.",
      "candidate_answers": [
        "- The tendencies of contemporary art and poetry",
        "- The life and conduct of men who write mystic, symbolic and 'decadent' works",
        "- The attitude taken by their admirers in the tastes and aesthetic instincts of fashionable society",
        "- The confluence of two well-defined conditions of disease",
        "- Degeneration and hysteria",
        "- Minor stages designated as neurasthenia"
      ],
      "predicates": [
        "Degeneration(x) ::: x is a condition of degeneration.",
        "Hysteria(x) ::: x is a condition of hysteria.",
        "Neurasthenia(x) ::: x is a minor stage of hysteria.",
        "ContemporaryArt(x) ::: x is a tendency of contemporary art.",
        "MysticWorks(x) ::: x is a mystic work.",
        "SymbolicWorks(x) ::: x is a symbolic work.",
        "DecadentWorks(x) ::: x is a decadent work.",
        "FashionableSociety(x) ::: x is a fashionable society.",
        "Admiration(x, y) ::: x admires y.",
        "MentalAberration(x) ::: x is a mental aberration.",
        "HumanPsyche(x) ::: x is related to the human psyche."
      ],
      "premises": [
        "∀x (Degeneration(x) ∧ Hysteria(x) → Neurasthenia(x)) ::: The confluence of degeneration and hysteria leads to neurasthenia.",
        "∀x (ContemporaryArt(x) ∧ MysticWorks(x) ∧ SymbolicWorks(x) ∧ DecadentWorks(x) ∧ FashionableSociety(x) → Admiration(a_0, x)) ::: The tendencies of contemporary art and poetry are admired by fashionable society.",
        "∀x (MentalAberration(x) → HumanPsyche(x)) ::: Mental aberrations are related to the human psyche.",
        "∀x (Neurasthenia(x) → (Degeneration(x) ∧ Hysteria(x))) ::: Neurasthenia is a minor stage of degeneration and hysteria.",
        "Conclusion:",
        "∃x (Degeneration(x) ∧ Hysteria(x)) ::: There exists a condition of degeneration and hysteria.",
        "∃y (Admiration(a_0, y) ∧ (MysticWorks(y) ∧ SymbolicWorks(y) ∧ DecadentWorks(y))) ::: There exists a mystic, symbolic, or decadent work that is admired by people."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 599,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 3,
      "paragraph": "The book deals with numerous case studies of various artists, writers and thinkers (Oscar Wilde, Henrik Ibsen, Richard Wagner and Friedrich Nietzsche to name a few), but its basic premise remains that society and human beings themselves are degenerating, and this degeneration is both reflected in and influenced by art. Hannah Arendt, in her book The Origins of Totalitarianism, refers to late 19th Century French society as embracing unusual or exotic types or individuals, such as criminals, Gypsies and Turks, and certain others formerly not seen as socially acceptable, so Nordau's position is not novel or isolated as social criticism.",
      "question_template": "The fashionable societies of [[CANDIDATE_ANSWER]] are pointed out as breaking moral boundaries.",
      "candidate_answers": [
        "- Society and human beings themselves are degenerating",
        "- This degeneration is both reflected in and influenced by art",
        "- Embracing unusual or exotic types or individuals, such as criminals, Gypsies and Turks"
      ],
      "predicates": [
        "Degenerating(a_0) ::: a person or society is degenerating.",
        "ReflectsInArt(a_0) ::: a person or society is reflected in art.",
        "InfluencedByArt(a_0) ::: a person or society is influenced by art.",
        "CaseStudy(x) ::: x is a case study of an artist, writer, or thinker.",
        "Author(x, y) ::: x is the author of y.",
        "Book(x) ::: x is a book.",
        "Premise(x) ::: x is a basic premise of a book.",
        "UnusualTypes(x) ::: x refers to unusual or exotic types or individuals."
      ],
      "premises": [
        "Degenerating(a_0) ∧ ReflectsInArt(a_0) ∧ InfluencedByArt(a_0) ::: The degeneration of society and human beings is both reflected in and influenced by art.",
        "∃x (CaseStudy(x) ∧ Author(a_1, x)) ::: The book deals with numerous case studies of various artists, writers, and thinkers, including Howard Fertig.",
        "Premise(degeneration) ::: The basic premise of the book remains that society and human beings themselves are degenerating.",
        "∃y (UnusualTypes(y) ∧ Author(a_2, y)) ::: Hannah Arendt refers to unusual or exotic types or individuals in her book.",
        "∃z (CaseStudy(z) ∧ Author(a_3, z)) ::: Freud is a case study in the book.",
        "∃w (CaseStudy(w) ∧ Author(a_4, w)) ::: Jung is a case study in the book."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "600": [
    {
      "id": 600,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 1,
      "paragraph": "Nordau establishes the cultural phenomenon of fin de siĂ¨cle in the opening pages, but he quickly moves to the viewpoint of a physician and identifies what he sees as an illness:",
      "question_template": "[[CANDIDATE_ANSWER]] is the disease first recognized although not originated from.",
      "candidate_answers": [
        "an illness"
      ],
      "predicates": [
        "CulturalPhenomenon(x) ::: x is a cultural phenomenon.",
        "Physician(x) ::: x is a physician.",
        "Identifies(x, y) ::: x identifies y as something.",
        "Illness(x) ::: x is an illness.",
        "MentalAberration(x) ::: x is a mental aberration.",
        "Malfunction(x) ::: x is a malfunction.",
        "HumanPsyche(x) ::: x is related to the human psyche.",
        "SymbolicApproach(x) ::: x is a symbolic approach.",
        "MythicApproach(x) ::: x is a mythic approach."
      ],
      "premises": [
        "CulturalPhenomenon(fin_de_siecle) ::: Nordau establishes the cultural phenomenon of fin de siècle.",
        "Physician(nordau) ::: Nordau moves to the viewpoint of a physician.",
        "Identifies(nordau, illness) ::: Nordau identifies what he sees as an illness.",
        "Illness(mental_aberrations) ::: Mental aberrations are considered an illness.",
        "Illness(malfunctions) ::: Malfunctions are also considered an illness.",
        "HumanPsyche(human_psyche) ::: The concept relates to the human psyche.",
        "SymbolicApproach(symbolic_approach) ::: There is a symbolic approach to understanding the human psyche.",
        "MythicApproach(mythic_approach) ::: There is also a mythic approach to understanding the human psyche.",
        "Conclusion:",
        "CulturalPhenomenon(fin_de_siecle) ∧ Physician(nordau) ∧ Identifies(nordau, illness) ::: Nordau establishes the cultural phenomenon of fin de siècle and identifies it as an illness from the viewpoint of a physician."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "601": [
    {
      "id": 601,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 2,
      "paragraph": "In the fin-de-siĂ¨cle disposition, in the tendencies of contemporary art and poetry, in the life and conduct of men who write mystic, symbolic and 'decadent' works and the attitude taken by their admirers in the tastes and aesthetic instincts of fashionable society, the confluence of two well-defined conditions of disease, with which he [the physician] is quite familiar, viz. degeneration and hysteria, of which the minor stages are designated as neurasthenia.",
      "question_template": "[[CANDIDATE_ANSWER]] is condemned as rising in the late 19th Century as a product of degeneration.",
      "candidate_answers": [
        "Degeneration and hysteria",
        "Neurasthenia"
      ],
      "predicates": [
        "Degeneration(x) ::: x is a condition of degeneration.",
        "Hysteria(x) ::: x is a condition of hysteria.",
        "Neurasthenia(x) ::: x is a minor stage of hysteria.",
        "ContemporaryArt(x) ::: x is a tendency of contemporary art.",
        "MysticWorks(x) ::: x is a mystic work.",
        "SymbolicWorks(x) ::: x is a symbolic work.",
        "DecadentWorks(x) ::: x is a decadent work.",
        "FashionableSociety(x) ::: x is a fashionable society.",
        "Admiration(x, y) ::: x admires y.",
        "MentalAberration(x) ::: x is a mental aberration.",
        "HumanPsyche(x) ::: x is related to the human psyche."
      ],
      "premises": [
        "∀x (Degeneration(x) ∧ Hysteria(x) → Neurasthenia(x)) ::: The confluence of degeneration and hysteria leads to neurasthenia.",
        "∀x (ContemporaryArt(x) ∧ MysticWorks(x) ∧ SymbolicWorks(x) ∧ DecadentWorks(x) ∧ FashionableSociety(x) → Admiration(a_0, x)) ::: The tendencies of contemporary art and poetry are admired by fashionable society.",
        "∀x (MentalAberration(x) → HumanPsyche(x)) ::: Mental aberrations are related to the human psyche.",
        "∀x (Neurasthenia(x) → (Degeneration(x) ∧ Hysteria(x))) ::: Neurasthenia is a minor stage of degeneration and hysteria.",
        "Conclusion:",
        "∃x (Degeneration(x) ∧ Hysteria(x)) ::: There exists a condition of degeneration and hysteria.",
        "∃y (Admiration(a_0, y) ∧ (MysticWorks(y) ∧ SymbolicWorks(y) ∧ DecadentWorks(y))) ::: There exists a mystic, symbolic, or decadent work that is admired by people."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 601,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 3,
      "paragraph": "The book deals with numerous case studies of various artists, writers and thinkers (Oscar Wilde, Henrik Ibsen, Richard Wagner and Friedrich Nietzsche to name a few), but its basic premise remains that society and human beings themselves are degenerating, and this degeneration is both reflected in and influenced by art. Hannah Arendt, in her book The Origins of Totalitarianism, refers to late 19th Century French society as embracing unusual or exotic types or individuals, such as criminals, Gypsies and Turks, and certain others formerly not seen as socially acceptable, so Nordau's position is not novel or isolated as social criticism.",
      "question_template": "[[CANDIDATE_ANSWER]] is condemned as rising in the late 19th Century as a product of degeneration.",
      "candidate_answers": [
        "Degeneration",
        "Society and human beings themselves are degenerating"
      ],
      "predicates": [
        "Degenerating(a_0) ::: a person or society is degenerating.",
        "ReflectsInArt(a_0) ::: a person or society is reflected in art.",
        "InfluencedByArt(a_0) ::: a person or society is influenced by art.",
        "CaseStudy(x) ::: x is a case study of an artist, writer, or thinker.",
        "Author(x, y) ::: x is the author of y.",
        "Book(x) ::: x is a book.",
        "Premise(x) ::: x is a basic premise of a book.",
        "UnusualTypes(x) ::: x refers to unusual or exotic types or individuals."
      ],
      "premises": [
        "Degenerating(a_0) ∧ ReflectsInArt(a_0) ∧ InfluencedByArt(a_0) ::: The degeneration of society and human beings is both reflected in and influenced by art.",
        "∃x (CaseStudy(x) ∧ Author(a_1, x)) ::: The book deals with numerous case studies of various artists, writers, and thinkers, including Howard Fertig.",
        "Premise(degeneration) ::: The basic premise of the book remains that society and human beings themselves are degenerating.",
        "∃y (UnusualTypes(y) ∧ Author(a_2, y)) ::: Hannah Arendt refers to unusual or exotic types or individuals in her book.",
        "∃z (CaseStudy(z) ∧ Author(a_3, z)) ::: Freud is a case study in the book.",
        "∃w (CaseStudy(w) ∧ Author(a_4, w)) ::: Jung is a case study in the book."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "602": [
    {
      "id": 602,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 0,
      "paragraph": " Nordau begins his work with a \"medical\" and social interpretation of what has created this Degeneration in society. Nordau divides his study into five books. In the first book, Nordau identifies the phenomenon of fin de siĂ¨cle in Europe. He sees this as first being recognised, though not originating, in France, describing this phenomenon as \"a contempt for the traditional views of custom and morality\". He sees it as a sort of decadence, a world-weariness, and the wilful rejection of the moral boundaries governing the world. He uses examples from French periodicals and books in French to show how it has affected all elements of society. Nordau accuses also society of becoming more and more inclined to imitate what they see in art. He sees in the fashionable society of Paris and London that \"[e]very single figure strives visibly by some singularity in outline, set, cut or colour, to startle attention violently, and imperiously to detain it. Each one wishes to create a strong nervous excitement, no matter whether agreeably or disagreeably\".",
      "question_template": "Individuals seen as socially unacceptable in the 19th Century included [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Nordau",
        "- Society",
        "- Those who see a contempt for the traditional views of custom and morality",
        "- Those who recognize the phenomenon of fin de siècle in Europe",
        "- Those who are inclined to imitate what they see in art"
      ],
      "predicates": [
        "Degeneration(x) ::: x represents degeneration in society.",
        "MedicalInterpretation(x) ::: x is a medical interpretation of degeneration.",
        "SocialInterpretation(x) ::: x is a social interpretation of degeneration.",
        "Divides(x, y) ::: x divides his study into y books.",
        "Identifies(x, y) ::: x identifies the phenomenon y.",
        "RecognizedIn(x, y) ::: x is recognized in y.",
        "Describes(x, y) ::: x describes y as a certain phenomenon.",
        "Accuses(x, y) ::: x accuses y of a certain behavior.",
        "Imitate(x, y) ::: x imitates what they see in y.",
        "FashionableSociety(x) ::: x is a fashionable society.",
        "Strives(x, y) ::: x strives for a certain quality or characteristic."
      ],
      "premises": [
        "MedicalInterpretation(nordau) ∧ SocialInterpretation(nordau) ∧ Degeneration(nordau) ::: Nordau begins his work with a \"medical\" and social interpretation of what has created this Degeneration in society.",
        "Divides(nordau, 5) ::: Nordau divides his study into five books.",
        "Identifies(nordau, fin_de_siècle) ::: In the first book, Nordau identifies the phenomenon of fin de siècle in Europe.",
        "RecognizedIn(fin_de_siècle, france) ::: He sees this as first being recognized in France.",
        "Describes(fin_de_siècle, contempt_for_traditional_views) ::: He describes this phenomenon as \"a contempt for the traditional views of custom and morality\".",
        "Accuses(nordau, society) ::: Nordau accuses society of becoming more inclined to imitate what they see in art.",
        "Imitate(society, art) ::: Society imitates what they see in art.",
        "FashionableSociety(paris) ∧ FashionableSociety(london) ::: He sees in the fashionable society of Paris and London.",
        "Strives(figure, singularity) ::: Every single figure strives visibly by some singularity in outline, set, cut or colour, to startle attention violently.",
        "Conclusion:",
        "∀x (Degeneration(x) → (MedicalInterpretation(x) ∧ SocialInterpretation(x))) ::: Any degeneration in society has both medical and social interpretations."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "Accuses(nordau, society) ∧ Imitate(society, art) → ¬SociallyAcceptable(individuals)"
      ]
    },
    {
      "id": 602,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 2,
      "paragraph": "In the fin-de-siĂ¨cle disposition, in the tendencies of contemporary art and poetry, in the life and conduct of men who write mystic, symbolic and 'decadent' works and the attitude taken by their admirers in the tastes and aesthetic instincts of fashionable society, the confluence of two well-defined conditions of disease, with which he [the physician] is quite familiar, viz. degeneration and hysteria, of which the minor stages are designated as neurasthenia.",
      "question_template": "Individuals seen as socially unacceptable in the 19th Century included [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "the admirers in the tastes and aesthetic instincts of fashionable society"
      ],
      "predicates": [
        "Degeneration(x) ::: x is a condition of degeneration.",
        "Hysteria(x) ::: x is a condition of hysteria.",
        "Neurasthenia(x) ::: x is a minor stage of hysteria.",
        "ContemporaryArt(x) ::: x is a tendency of contemporary art.",
        "MysticWorks(x) ::: x is a mystic work.",
        "SymbolicWorks(x) ::: x is a symbolic work.",
        "DecadentWorks(x) ::: x is a decadent work.",
        "FashionableSociety(x) ::: x is a fashionable society.",
        "Admiration(x, y) ::: x admires y.",
        "MentalAberration(x) ::: x is a mental aberration.",
        "HumanPsyche(x) ::: x is related to the human psyche."
      ],
      "premises": [
        "∀x (Degeneration(x) ∧ Hysteria(x) → Neurasthenia(x)) ::: The confluence of degeneration and hysteria leads to neurasthenia.",
        "∀x (ContemporaryArt(x) ∧ MysticWorks(x) ∧ SymbolicWorks(x) ∧ DecadentWorks(x) ∧ FashionableSociety(x) → Admiration(a_0, x)) ::: The tendencies of contemporary art and poetry are admired by fashionable society.",
        "∀x (MentalAberration(x) → HumanPsyche(x)) ::: Mental aberrations are related to the human psyche.",
        "∀x (Neurasthenia(x) → (Degeneration(x) ∧ Hysteria(x))) ::: Neurasthenia is a minor stage of degeneration and hysteria.",
        "Conclusion:",
        "∃x (Degeneration(x) ∧ Hysteria(x)) ::: There exists a condition of degeneration and hysteria.",
        "∃y (Admiration(a_0, y) ∧ (MysticWorks(y) ∧ SymbolicWorks(y) ∧ DecadentWorks(y))) ::: There exists a mystic, symbolic, or decadent work that is admired by people."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "603": [
    {
      "id": 603,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 2,
      "paragraph": "In the fin-de-siĂ¨cle disposition, in the tendencies of contemporary art and poetry, in the life and conduct of men who write mystic, symbolic and 'decadent' works and the attitude taken by their admirers in the tastes and aesthetic instincts of fashionable society, the confluence of two well-defined conditions of disease, with which he [the physician] is quite familiar, viz. degeneration and hysteria, of which the minor stages are designated as neurasthenia.",
      "question_template": "Degeneration is both reflected in and influenced by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The life and conduct of men who write mystic, symbolic and 'decadent' works",
        "The tastes and aesthetic instincts of fashionable society"
      ],
      "predicates": [
        "Degeneration(x) ::: x is a condition of degeneration.",
        "Hysteria(x) ::: x is a condition of hysteria.",
        "Neurasthenia(x) ::: x is a minor stage of hysteria.",
        "ContemporaryArt(x) ::: x is a tendency of contemporary art.",
        "MysticWorks(x) ::: x is a mystic work.",
        "SymbolicWorks(x) ::: x is a symbolic work.",
        "DecadentWorks(x) ::: x is a decadent work.",
        "FashionableSociety(x) ::: x is a fashionable society.",
        "Admiration(x, y) ::: x admires y.",
        "MentalAberration(x) ::: x is a mental aberration.",
        "HumanPsyche(x) ::: x is related to the human psyche."
      ],
      "premises": [
        "∀x (Degeneration(x) ∧ Hysteria(x) → Neurasthenia(x)) ::: The confluence of degeneration and hysteria leads to neurasthenia.",
        "∀x (ContemporaryArt(x) ∧ MysticWorks(x) ∧ SymbolicWorks(x) ∧ DecadentWorks(x) ∧ FashionableSociety(x) → Admiration(a_0, x)) ::: The tendencies of contemporary art and poetry are admired by fashionable society.",
        "∀x (MentalAberration(x) → HumanPsyche(x)) ::: Mental aberrations are related to the human psyche.",
        "∀x (Neurasthenia(x) → (Degeneration(x) ∧ Hysteria(x))) ::: Neurasthenia is a minor stage of degeneration and hysteria.",
        "Conclusion:",
        "∃x (Degeneration(x) ∧ Hysteria(x)) ::: There exists a condition of degeneration and hysteria.",
        "∃y (Admiration(a_0, y) ∧ (MysticWorks(y) ∧ SymbolicWorks(y) ∧ DecadentWorks(y))) ::: There exists a mystic, symbolic, or decadent work that is admired by people."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    },
    {
      "id": 603,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 3,
      "paragraph": "The book deals with numerous case studies of various artists, writers and thinkers (Oscar Wilde, Henrik Ibsen, Richard Wagner and Friedrich Nietzsche to name a few), but its basic premise remains that society and human beings themselves are degenerating, and this degeneration is both reflected in and influenced by art. Hannah Arendt, in her book The Origins of Totalitarianism, refers to late 19th Century French society as embracing unusual or exotic types or individuals, such as criminals, Gypsies and Turks, and certain others formerly not seen as socially acceptable, so Nordau's position is not novel or isolated as social criticism.",
      "question_template": "Degeneration is both reflected in and influenced by [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Artists, writers and thinkers",
        "- Society and human beings themselves",
        "- Unusual or exotic types or individuals, such as criminals, Gypsies and Turks"
      ],
      "predicates": [
        "Degenerating(a_0) ::: a person or society is degenerating.",
        "ReflectsInArt(a_0) ::: a person or society is reflected in art.",
        "InfluencedByArt(a_0) ::: a person or society is influenced by art.",
        "CaseStudy(x) ::: x is a case study of an artist, writer, or thinker.",
        "Author(x, y) ::: x is the author of y.",
        "Book(x) ::: x is a book.",
        "Premise(x) ::: x is a basic premise of a book.",
        "UnusualTypes(x) ::: x refers to unusual or exotic types or individuals."
      ],
      "premises": [
        "Degenerating(a_0) ∧ ReflectsInArt(a_0) ∧ InfluencedByArt(a_0) ::: The degeneration of society and human beings is both reflected in and influenced by art.",
        "∃x (CaseStudy(x) ∧ Author(a_1, x)) ::: The book deals with numerous case studies of various artists, writers, and thinkers, including Howard Fertig.",
        "Premise(degeneration) ::: The basic premise of the book remains that society and human beings themselves are degenerating.",
        "∃y (UnusualTypes(y) ∧ Author(a_2, y)) ::: Hannah Arendt refers to unusual or exotic types or individuals in her book.",
        "∃z (CaseStudy(z) ∧ Author(a_3, z)) ::: Freud is a case study in the book.",
        "∃w (CaseStudy(w) ∧ Author(a_4, w)) ::: Jung is a case study in the book."
      ],
      "conclusions": [
        "None",
        "Degenerating(a_0) ∧ ReflectsInArt(a_0) ∧ InfluencedByArt(a_0)",
        "None"
      ]
    }
  ],
  "604": [
    {
      "id": 604,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 0,
      "paragraph": " Nordau begins his work with a \"medical\" and social interpretation of what has created this Degeneration in society. Nordau divides his study into five books. In the first book, Nordau identifies the phenomenon of fin de siĂ¨cle in Europe. He sees this as first being recognised, though not originating, in France, describing this phenomenon as \"a contempt for the traditional views of custom and morality\". He sees it as a sort of decadence, a world-weariness, and the wilful rejection of the moral boundaries governing the world. He uses examples from French periodicals and books in French to show how it has affected all elements of society. Nordau accuses also society of becoming more and more inclined to imitate what they see in art. He sees in the fashionable society of Paris and London that \"[e]very single figure strives visibly by some singularity in outline, set, cut or colour, to startle attention violently, and imperiously to detain it. Each one wishes to create a strong nervous excitement, no matter whether agreeably or disagreeably\".",
      "question_template": "The disease is specifically discussed in relation to [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- A contempt for the traditional views of custom and morality",
        "- A sort of decadence, a world-weariness, and the wilful rejection of the moral boundaries governing the world",
        "- Society of becoming more and more inclined to imitate what they see in art",
        "- Each one wishes to create a strong nervous excitement, no matter whether agreeably or disagreeably"
      ],
      "predicates": [
        "Degeneration(x) ::: x represents degeneration in society.",
        "MedicalInterpretation(x) ::: x is a medical interpretation of degeneration.",
        "SocialInterpretation(x) ::: x is a social interpretation of degeneration.",
        "Divides(x, y) ::: x divides his study into y books.",
        "Identifies(x, y) ::: x identifies the phenomenon y.",
        "RecognizedIn(x, y) ::: x is recognized in y.",
        "Describes(x, y) ::: x describes y as a certain phenomenon.",
        "Accuses(x, y) ::: x accuses y of a certain behavior.",
        "Imitate(x, y) ::: x imitates what they see in y.",
        "FashionableSociety(x) ::: x is a fashionable society.",
        "Strives(x, y) ::: x strives for a certain quality or characteristic."
      ],
      "premises": [
        "MedicalInterpretation(nordau) ∧ SocialInterpretation(nordau) ∧ Degeneration(nordau) ::: Nordau begins his work with a \"medical\" and social interpretation of what has created this Degeneration in society.",
        "Divides(nordau, 5) ::: Nordau divides his study into five books.",
        "Identifies(nordau, fin_de_siècle) ::: In the first book, Nordau identifies the phenomenon of fin de siècle in Europe.",
        "RecognizedIn(fin_de_siècle, france) ::: He sees this as first being recognized in France.",
        "Describes(fin_de_siècle, contempt_for_traditional_views) ::: He describes this phenomenon as \"a contempt for the traditional views of custom and morality\".",
        "Accuses(nordau, society) ::: Nordau accuses society of becoming more inclined to imitate what they see in art.",
        "Imitate(society, art) ::: Society imitates what they see in art.",
        "FashionableSociety(paris) ∧ FashionableSociety(london) ::: He sees in the fashionable society of Paris and London.",
        "Strives(figure, singularity) ::: Every single figure strives visibly by some singularity in outline, set, cut or colour, to startle attention violently.",
        "Conclusion:",
        "∀x (Degeneration(x) → (MedicalInterpretation(x) ∧ SocialInterpretation(x))) ::: Any degeneration in society has both medical and social interpretations."
      ],
      "conclusions": [
        "Describes(fin_de_siècle, contempt_for_traditional_views)",
        "None",
        "Accuses(nordau, society) ∧ Imitate(society, art)",
        "None"
      ]
    },
    {
      "id": 604,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 2,
      "paragraph": "In the fin-de-siĂ¨cle disposition, in the tendencies of contemporary art and poetry, in the life and conduct of men who write mystic, symbolic and 'decadent' works and the attitude taken by their admirers in the tastes and aesthetic instincts of fashionable society, the confluence of two well-defined conditions of disease, with which he [the physician] is quite familiar, viz. degeneration and hysteria, of which the minor stages are designated as neurasthenia.",
      "question_template": "The disease is specifically discussed in relation to [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- The confluence of two well-defined conditions of disease",
        "- Degeneration and hysteria",
        "- Minor stages are designated as neurasthenia"
      ],
      "predicates": [
        "Degeneration(x) ::: x is a condition of degeneration.",
        "Hysteria(x) ::: x is a condition of hysteria.",
        "Neurasthenia(x) ::: x is a minor stage of hysteria.",
        "ContemporaryArt(x) ::: x is a tendency of contemporary art.",
        "MysticWorks(x) ::: x is a mystic work.",
        "SymbolicWorks(x) ::: x is a symbolic work.",
        "DecadentWorks(x) ::: x is a decadent work.",
        "FashionableSociety(x) ::: x is a fashionable society.",
        "Admiration(x, y) ::: x admires y.",
        "MentalAberration(x) ::: x is a mental aberration.",
        "HumanPsyche(x) ::: x is related to the human psyche."
      ],
      "premises": [
        "∀x (Degeneration(x) ∧ Hysteria(x) → Neurasthenia(x)) ::: The confluence of degeneration and hysteria leads to neurasthenia.",
        "∀x (ContemporaryArt(x) ∧ MysticWorks(x) ∧ SymbolicWorks(x) ∧ DecadentWorks(x) ∧ FashionableSociety(x) → Admiration(a_0, x)) ::: The tendencies of contemporary art and poetry are admired by fashionable society.",
        "∀x (MentalAberration(x) → HumanPsyche(x)) ::: Mental aberrations are related to the human psyche.",
        "∀x (Neurasthenia(x) → (Degeneration(x) ∧ Hysteria(x))) ::: Neurasthenia is a minor stage of degeneration and hysteria.",
        "Conclusion:",
        "∃x (Degeneration(x) ∧ Hysteria(x)) ::: There exists a condition of degeneration and hysteria.",
        "∃y (Admiration(a_0, y) ∧ (MysticWorks(y) ∧ SymbolicWorks(y) ∧ DecadentWorks(y))) ::: There exists a mystic, symbolic, or decadent work that is admired by people."
      ],
      "conclusions": [
        "None",
        "∃x (Degeneration(x) ∧ Hysteria(x))",
        "None"
      ]
    }
  ],
  "605": [
    {
      "id": 605,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 0,
      "paragraph": " Nordau begins his work with a \"medical\" and social interpretation of what has created this Degeneration in society. Nordau divides his study into five books. In the first book, Nordau identifies the phenomenon of fin de siĂ¨cle in Europe. He sees this as first being recognised, though not originating, in France, describing this phenomenon as \"a contempt for the traditional views of custom and morality\". He sees it as a sort of decadence, a world-weariness, and the wilful rejection of the moral boundaries governing the world. He uses examples from French periodicals and books in French to show how it has affected all elements of society. Nordau accuses also society of becoming more and more inclined to imitate what they see in art. He sees in the fashionable society of Paris and London that \"[e]very single figure strives visibly by some singularity in outline, set, cut or colour, to startle attention violently, and imperiously to detain it. Each one wishes to create a strong nervous excitement, no matter whether agreeably or disagreeably\".",
      "question_template": "The two defined conditions of the disease are [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Degeneration",
        "A contempt for the traditional views of custom and morality",
        "Decadence",
        "World-weariness",
        "The wilful rejection of the moral boundaries governing the world"
      ],
      "predicates": [
        "Degeneration(x) ::: x represents degeneration in society.",
        "MedicalInterpretation(x) ::: x is a medical interpretation of degeneration.",
        "SocialInterpretation(x) ::: x is a social interpretation of degeneration.",
        "Divides(x, y) ::: x divides his study into y books.",
        "Identifies(x, y) ::: x identifies the phenomenon y.",
        "RecognizedIn(x, y) ::: x is recognized in y.",
        "Describes(x, y) ::: x describes y as a certain phenomenon.",
        "Accuses(x, y) ::: x accuses y of a certain behavior.",
        "Imitate(x, y) ::: x imitates what they see in y.",
        "FashionableSociety(x) ::: x is a fashionable society.",
        "Strives(x, y) ::: x strives for a certain quality or characteristic."
      ],
      "premises": [
        "MedicalInterpretation(nordau) ∧ SocialInterpretation(nordau) ∧ Degeneration(nordau) ::: Nordau begins his work with a \"medical\" and social interpretation of what has created this Degeneration in society.",
        "Divides(nordau, 5) ::: Nordau divides his study into five books.",
        "Identifies(nordau, fin_de_siècle) ::: In the first book, Nordau identifies the phenomenon of fin de siècle in Europe.",
        "RecognizedIn(fin_de_siècle, france) ::: He sees this as first being recognized in France.",
        "Describes(fin_de_siècle, contempt_for_traditional_views) ::: He describes this phenomenon as \"a contempt for the traditional views of custom and morality\".",
        "Accuses(nordau, society) ::: Nordau accuses society of becoming more inclined to imitate what they see in art.",
        "Imitate(society, art) ::: Society imitates what they see in art.",
        "FashionableSociety(paris) ∧ FashionableSociety(london) ::: He sees in the fashionable society of Paris and London.",
        "Strives(figure, singularity) ::: Every single figure strives visibly by some singularity in outline, set, cut or colour, to startle attention violently.",
        "Conclusion:",
        "∀x (Degeneration(x) → (MedicalInterpretation(x) ∧ SocialInterpretation(x))) ::: Any degeneration in society has both medical and social interpretations."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 605,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 2,
      "paragraph": "In the fin-de-siĂ¨cle disposition, in the tendencies of contemporary art and poetry, in the life and conduct of men who write mystic, symbolic and 'decadent' works and the attitude taken by their admirers in the tastes and aesthetic instincts of fashionable society, the confluence of two well-defined conditions of disease, with which he [the physician] is quite familiar, viz. degeneration and hysteria, of which the minor stages are designated as neurasthenia.",
      "question_template": "The two defined conditions of the disease are [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Degeneration and hysteria",
        "Neurasthenia"
      ],
      "predicates": [
        "Degeneration(x) ::: x is a condition of degeneration.",
        "Hysteria(x) ::: x is a condition of hysteria.",
        "Neurasthenia(x) ::: x is a minor stage of hysteria.",
        "ContemporaryArt(x) ::: x is a tendency of contemporary art.",
        "MysticWorks(x) ::: x is a mystic work.",
        "SymbolicWorks(x) ::: x is a symbolic work.",
        "DecadentWorks(x) ::: x is a decadent work.",
        "FashionableSociety(x) ::: x is a fashionable society.",
        "Admiration(x, y) ::: x admires y.",
        "MentalAberration(x) ::: x is a mental aberration.",
        "HumanPsyche(x) ::: x is related to the human psyche."
      ],
      "premises": [
        "∀x (Degeneration(x) ∧ Hysteria(x) → Neurasthenia(x)) ::: The confluence of degeneration and hysteria leads to neurasthenia.",
        "∀x (ContemporaryArt(x) ∧ MysticWorks(x) ∧ SymbolicWorks(x) ∧ DecadentWorks(x) ∧ FashionableSociety(x) → Admiration(a_0, x)) ::: The tendencies of contemporary art and poetry are admired by fashionable society.",
        "∀x (MentalAberration(x) → HumanPsyche(x)) ::: Mental aberrations are related to the human psyche.",
        "∀x (Neurasthenia(x) → (Degeneration(x) ∧ Hysteria(x))) ::: Neurasthenia is a minor stage of degeneration and hysteria.",
        "Conclusion:",
        "∃x (Degeneration(x) ∧ Hysteria(x)) ::: There exists a condition of degeneration and hysteria.",
        "∃y (Admiration(a_0, y) ∧ (MysticWorks(y) ∧ SymbolicWorks(y) ∧ DecadentWorks(y))) ::: There exists a mystic, symbolic, or decadent work that is admired by people."
      ],
      "conclusions": [
        "∃x (Degeneration(x) ∧ Hysteria(x))",
        "None"
      ]
    },
    {
      "id": 605,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 3,
      "paragraph": "The book deals with numerous case studies of various artists, writers and thinkers (Oscar Wilde, Henrik Ibsen, Richard Wagner and Friedrich Nietzsche to name a few), but its basic premise remains that society and human beings themselves are degenerating, and this degeneration is both reflected in and influenced by art. Hannah Arendt, in her book The Origins of Totalitarianism, refers to late 19th Century French society as embracing unusual or exotic types or individuals, such as criminals, Gypsies and Turks, and certain others formerly not seen as socially acceptable, so Nordau's position is not novel or isolated as social criticism.",
      "question_template": "The two defined conditions of the disease are [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The book deals with numerous case studies of various artists, writers and thinkers",
        "Nordau's position is not novel or isolated as social criticism"
      ],
      "predicates": [
        "Degenerating(a_0) ::: a person or society is degenerating.",
        "ReflectsInArt(a_0) ::: a person or society is reflected in art.",
        "InfluencedByArt(a_0) ::: a person or society is influenced by art.",
        "CaseStudy(x) ::: x is a case study of an artist, writer, or thinker.",
        "Author(x, y) ::: x is the author of y.",
        "Book(x) ::: x is a book.",
        "Premise(x) ::: x is a basic premise of a book.",
        "UnusualTypes(x) ::: x refers to unusual or exotic types or individuals."
      ],
      "premises": [
        "Degenerating(a_0) ∧ ReflectsInArt(a_0) ∧ InfluencedByArt(a_0) ::: The degeneration of society and human beings is both reflected in and influenced by art.",
        "∃x (CaseStudy(x) ∧ Author(a_1, x)) ::: The book deals with numerous case studies of various artists, writers, and thinkers, including Howard Fertig.",
        "Premise(degeneration) ::: The basic premise of the book remains that society and human beings themselves are degenerating.",
        "∃y (UnusualTypes(y) ∧ Author(a_2, y)) ::: Hannah Arendt refers to unusual or exotic types or individuals in her book.",
        "∃z (CaseStudy(z) ∧ Author(a_3, z)) ::: Freud is a case study in the book.",
        "∃w (CaseStudy(w) ∧ Author(a_4, w)) ::: Jung is a case study in the book."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "606": [
    {
      "id": 606,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 1,
      "paragraph": "Nordau establishes the cultural phenomenon of fin de siĂ¨cle in the opening pages, but he quickly moves to the viewpoint of a physician and identifies what he sees as an illness:",
      "question_template": "The confluence of the minor stages of the disease is designated as [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "The viewpoint of a physician"
      ],
      "predicates": [
        "CulturalPhenomenon(x) ::: x is a cultural phenomenon.",
        "Physician(x) ::: x is a physician.",
        "Identifies(x, y) ::: x identifies y as something.",
        "Illness(x) ::: x is an illness.",
        "MentalAberration(x) ::: x is a mental aberration.",
        "Malfunction(x) ::: x is a malfunction.",
        "HumanPsyche(x) ::: x is related to the human psyche.",
        "SymbolicApproach(x) ::: x is a symbolic approach.",
        "MythicApproach(x) ::: x is a mythic approach."
      ],
      "premises": [
        "CulturalPhenomenon(fin_de_siecle) ::: Nordau establishes the cultural phenomenon of fin de siècle.",
        "Physician(nordau) ::: Nordau moves to the viewpoint of a physician.",
        "Identifies(nordau, illness) ::: Nordau identifies what he sees as an illness.",
        "Illness(mental_aberrations) ::: Mental aberrations are considered an illness.",
        "Illness(malfunctions) ::: Malfunctions are also considered an illness.",
        "HumanPsyche(human_psyche) ::: The concept relates to the human psyche.",
        "SymbolicApproach(symbolic_approach) ::: There is a symbolic approach to understanding the human psyche.",
        "MythicApproach(mythic_approach) ::: There is also a mythic approach to understanding the human psyche.",
        "Conclusion:",
        "CulturalPhenomenon(fin_de_siecle) ∧ Physician(nordau) ∧ Identifies(nordau, illness) ::: Nordau establishes the cultural phenomenon of fin de siècle and identifies it as an illness from the viewpoint of a physician."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 606,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 3,
      "paragraph": "The book deals with numerous case studies of various artists, writers and thinkers (Oscar Wilde, Henrik Ibsen, Richard Wagner and Friedrich Nietzsche to name a few), but its basic premise remains that society and human beings themselves are degenerating, and this degeneration is both reflected in and influenced by art. Hannah Arendt, in her book The Origins of Totalitarianism, refers to late 19th Century French society as embracing unusual or exotic types or individuals, such as criminals, Gypsies and Turks, and certain others formerly not seen as socially acceptable, so Nordau's position is not novel or isolated as social criticism.",
      "question_template": "The confluence of the minor stages of the disease is designated as [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Nordau's position is not novel or isolated as social criticism"
      ],
      "predicates": [
        "Degenerating(a_0) ::: a person or society is degenerating.",
        "ReflectsInArt(a_0) ::: a person or society is reflected in art.",
        "InfluencedByArt(a_0) ::: a person or society is influenced by art.",
        "CaseStudy(x) ::: x is a case study of an artist, writer, or thinker.",
        "Author(x, y) ::: x is the author of y.",
        "Book(x) ::: x is a book.",
        "Premise(x) ::: x is a basic premise of a book.",
        "UnusualTypes(x) ::: x refers to unusual or exotic types or individuals."
      ],
      "premises": [
        "Degenerating(a_0) ∧ ReflectsInArt(a_0) ∧ InfluencedByArt(a_0) ::: The degeneration of society and human beings is both reflected in and influenced by art.",
        "∃x (CaseStudy(x) ∧ Author(a_1, x)) ::: The book deals with numerous case studies of various artists, writers, and thinkers, including Howard Fertig.",
        "Premise(degeneration) ::: The basic premise of the book remains that society and human beings themselves are degenerating.",
        "∃y (UnusualTypes(y) ∧ Author(a_2, y)) ::: Hannah Arendt refers to unusual or exotic types or individuals in her book.",
        "∃z (CaseStudy(z) ∧ Author(a_3, z)) ::: Freud is a case study in the book.",
        "∃w (CaseStudy(w) ∧ Author(a_4, w)) ::: Jung is a case study in the book."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 606,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 4,
      "paragraph": "The original article's text comports quite closely to Howard Fertig, NY 1960. During the time of Nordau's writing, physical, physiognomic, or mechanical factors were still being regarded as causative in mental aberrations and malfunctions. The symbolic or mythic approached later implemented by Freud and Jung made no part of Nordau's understanding of the human psyche.",
      "question_template": "The confluence of the minor stages of the disease is designated as [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Physical, physiognomic, or mechanical factors",
        "Causative in mental aberrations and malfunctions"
      ],
      "predicates": [
        "OriginalText(x) ::: x is the original article's text.",
        "ComportsWith(x, y) ::: x comports closely with y.",
        "CausativeFactors(x) ::: x are factors regarded as causative in mental aberrations and malfunctions.",
        "SymbolicApproach(x) ::: x is a symbolic approach.",
        "MythicApproach(x) ::: x is a mythic approach.",
        "Understanding(x, y) ::: x is the understanding of y."
      ],
      "premises": [
        "OriginalText(originalArticle) ∧ ComportsWith(originalArticle, howardFertig) ::: The original article's text comports quite closely to Howard Fertig, NY 1960.",
        "CausativeFactors(physicalFactors) ∧ CausativeFactors(physiognomicFactors) ∧ CausativeFactors(mechanicalFactors) ∧ (CausativeFactors(physicalFactors) ∧ CausativeFactors(physiognomicFactors) ∧ CausativeFactors(mechanicalFactors) → Understanding(nordau, mentalAberrations)) ::: During the time of Nordau's writing, physical, physiognomic, or mechanical factors were still being regarded as causative in mental aberrations and malfunctions.",
        "¬Understanding(nordau, symbolicApproach) ∧ ¬Understanding(nordau, mythicApproach) ::: The symbolic or mythic approaches later implemented by Freud and Jung made no part of Nordau's understanding of the human psyche."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "607": [
    {
      "id": 607,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 0,
      "paragraph": " Nordau begins his work with a \"medical\" and social interpretation of what has created this Degeneration in society. Nordau divides his study into five books. In the first book, Nordau identifies the phenomenon of fin de siĂ¨cle in Europe. He sees this as first being recognised, though not originating, in France, describing this phenomenon as \"a contempt for the traditional views of custom and morality\". He sees it as a sort of decadence, a world-weariness, and the wilful rejection of the moral boundaries governing the world. He uses examples from French periodicals and books in French to show how it has affected all elements of society. Nordau accuses also society of becoming more and more inclined to imitate what they see in art. He sees in the fashionable society of Paris and London that \"[e]very single figure strives visibly by some singularity in outline, set, cut or colour, to startle attention violently, and imperiously to detain it. Each one wishes to create a strong nervous excitement, no matter whether agreeably or disagreeably\".",
      "question_template": "[[CANDIDATE_ANSWER]] is called a contempt for the traditional views of custom and morality.",
      "candidate_answers": [
        "- Nordau begins his work with a \"medical\" and social interpretation of what has created this Degeneration in society.",
        "- Nordau divides his study into five books.",
        "- In the first book, Nordau identifies the phenomenon of fin de siècle in Europe.",
        "- He sees this as first being recognised, though not originating, in France.",
        "- He describes this phenomenon as \"a contempt for the traditional views of custom and morality\".",
        "- He sees it as a sort of decadence, a world-weariness, and the wilful rejection of the moral boundaries governing the world.",
        "- He uses examples from French periodicals and books in French to show how it has affected all elements of society.",
        "- Nordau accuses also society of becoming more and more inclined to imitate what they see in art.",
        "- He sees in the fashionable society of Paris and London that \"[e]very single figure strives visibly by some singularity in outline, set, cut or colour, to startle attention violently, and imperiously to detain it.\""
      ],
      "predicates": [
        "Degeneration(x) ::: x represents degeneration in society.",
        "MedicalInterpretation(x) ::: x is a medical interpretation of degeneration.",
        "SocialInterpretation(x) ::: x is a social interpretation of degeneration.",
        "Divides(x, y) ::: x divides his study into y books.",
        "Identifies(x, y) ::: x identifies the phenomenon y.",
        "RecognizedIn(x, y) ::: x is recognized in y.",
        "Describes(x, y) ::: x describes y as a certain phenomenon.",
        "Accuses(x, y) ::: x accuses y of a certain behavior.",
        "Imitate(x, y) ::: x imitates what they see in y.",
        "FashionableSociety(x) ::: x is a fashionable society.",
        "Strives(x, y) ::: x strives for a certain quality or characteristic."
      ],
      "premises": [
        "MedicalInterpretation(nordau) ∧ SocialInterpretation(nordau) ∧ Degeneration(nordau) ::: Nordau begins his work with a \"medical\" and social interpretation of what has created this Degeneration in society.",
        "Divides(nordau, 5) ::: Nordau divides his study into five books.",
        "Identifies(nordau, fin_de_siècle) ::: In the first book, Nordau identifies the phenomenon of fin de siècle in Europe.",
        "RecognizedIn(fin_de_siècle, france) ::: He sees this as first being recognized in France.",
        "Describes(fin_de_siècle, contempt_for_traditional_views) ::: He describes this phenomenon as \"a contempt for the traditional views of custom and morality\".",
        "Accuses(nordau, society) ::: Nordau accuses society of becoming more inclined to imitate what they see in art.",
        "Imitate(society, art) ::: Society imitates what they see in art.",
        "FashionableSociety(paris) ∧ FashionableSociety(london) ::: He sees in the fashionable society of Paris and London.",
        "Strives(figure, singularity) ::: Every single figure strives visibly by some singularity in outline, set, cut or colour, to startle attention violently.",
        "Conclusion:",
        "∀x (Degeneration(x) → (MedicalInterpretation(x) ∧ SocialInterpretation(x))) ::: Any degeneration in society has both medical and social interpretations."
      ],
      "conclusions": [
        "None",
        "None",
        "Identifies(nordau, fin_de_siècle) ∧ Describes(fin_de_siècle, contempt_for_traditional_views)",
        "None",
        "Describes(fin_de_siècle, contempt_for_traditional_views)",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 607,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 2,
      "paragraph": "In the fin-de-siĂ¨cle disposition, in the tendencies of contemporary art and poetry, in the life and conduct of men who write mystic, symbolic and 'decadent' works and the attitude taken by their admirers in the tastes and aesthetic instincts of fashionable society, the confluence of two well-defined conditions of disease, with which he [the physician] is quite familiar, viz. degeneration and hysteria, of which the minor stages are designated as neurasthenia.",
      "question_template": "[[CANDIDATE_ANSWER]] is called a contempt for the traditional views of custom and morality.",
      "candidate_answers": [
        "- The confluence of two well-defined conditions of disease",
        "- Degeneration and hysteria",
        "- Minor stages are designated as neurasthenia"
      ],
      "predicates": [
        "Degeneration(x) ::: x is a condition of degeneration.",
        "Hysteria(x) ::: x is a condition of hysteria.",
        "Neurasthenia(x) ::: x is a minor stage of hysteria.",
        "ContemporaryArt(x) ::: x is a tendency of contemporary art.",
        "MysticWorks(x) ::: x is a mystic work.",
        "SymbolicWorks(x) ::: x is a symbolic work.",
        "DecadentWorks(x) ::: x is a decadent work.",
        "FashionableSociety(x) ::: x is a fashionable society.",
        "Admiration(x, y) ::: x admires y.",
        "MentalAberration(x) ::: x is a mental aberration.",
        "HumanPsyche(x) ::: x is related to the human psyche."
      ],
      "premises": [
        "∀x (Degeneration(x) ∧ Hysteria(x) → Neurasthenia(x)) ::: The confluence of degeneration and hysteria leads to neurasthenia.",
        "∀x (ContemporaryArt(x) ∧ MysticWorks(x) ∧ SymbolicWorks(x) ∧ DecadentWorks(x) ∧ FashionableSociety(x) → Admiration(a_0, x)) ::: The tendencies of contemporary art and poetry are admired by fashionable society.",
        "∀x (MentalAberration(x) → HumanPsyche(x)) ::: Mental aberrations are related to the human psyche.",
        "∀x (Neurasthenia(x) → (Degeneration(x) ∧ Hysteria(x))) ::: Neurasthenia is a minor stage of degeneration and hysteria.",
        "Conclusion:",
        "∃x (Degeneration(x) ∧ Hysteria(x)) ::: There exists a condition of degeneration and hysteria.",
        "∃y (Admiration(a_0, y) ∧ (MysticWorks(y) ∧ SymbolicWorks(y) ∧ DecadentWorks(y))) ::: There exists a mystic, symbolic, or decadent work that is admired by people."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 607,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 3,
      "paragraph": "The book deals with numerous case studies of various artists, writers and thinkers (Oscar Wilde, Henrik Ibsen, Richard Wagner and Friedrich Nietzsche to name a few), but its basic premise remains that society and human beings themselves are degenerating, and this degeneration is both reflected in and influenced by art. Hannah Arendt, in her book The Origins of Totalitarianism, refers to late 19th Century French society as embracing unusual or exotic types or individuals, such as criminals, Gypsies and Turks, and certain others formerly not seen as socially acceptable, so Nordau's position is not novel or isolated as social criticism.",
      "question_template": "[[CANDIDATE_ANSWER]] is called a contempt for the traditional views of custom and morality.",
      "candidate_answers": [
        "- The book deals with numerous case studies of various artists, writers and thinkers",
        "- Society and human beings themselves are degenerating",
        "- This degeneration is both reflected in and influenced by art",
        "- Hannah Arendt refers to late 19th Century French society as embracing unusual or exotic types or individuals",
        "- Nordau's position is not novel or isolated as social criticism"
      ],
      "predicates": [
        "Degenerating(a_0) ::: a person or society is degenerating.",
        "ReflectsInArt(a_0) ::: a person or society is reflected in art.",
        "InfluencedByArt(a_0) ::: a person or society is influenced by art.",
        "CaseStudy(x) ::: x is a case study of an artist, writer, or thinker.",
        "Author(x, y) ::: x is the author of y.",
        "Book(x) ::: x is a book.",
        "Premise(x) ::: x is a basic premise of a book.",
        "UnusualTypes(x) ::: x refers to unusual or exotic types or individuals."
      ],
      "premises": [
        "Degenerating(a_0) ∧ ReflectsInArt(a_0) ∧ InfluencedByArt(a_0) ::: The degeneration of society and human beings is both reflected in and influenced by art.",
        "∃x (CaseStudy(x) ∧ Author(a_1, x)) ::: The book deals with numerous case studies of various artists, writers, and thinkers, including Howard Fertig.",
        "Premise(degeneration) ::: The basic premise of the book remains that society and human beings themselves are degenerating.",
        "∃y (UnusualTypes(y) ∧ Author(a_2, y)) ::: Hannah Arendt refers to unusual or exotic types or individuals in her book.",
        "∃z (CaseStudy(z) ∧ Author(a_3, z)) ::: Freud is a case study in the book.",
        "∃w (CaseStudy(w) ∧ Author(a_4, w)) ::: Jung is a case study in the book."
      ],
      "conclusions": [
        "None",
        "None",
        "None",
        "None",
        "None"
      ]
    },
    {
      "id": 607,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 4,
      "paragraph": "The original article's text comports quite closely to Howard Fertig, NY 1960. During the time of Nordau's writing, physical, physiognomic, or mechanical factors were still being regarded as causative in mental aberrations and malfunctions. The symbolic or mythic approached later implemented by Freud and Jung made no part of Nordau's understanding of the human psyche.",
      "question_template": "[[CANDIDATE_ANSWER]] is called a contempt for the traditional views of custom and morality.",
      "candidate_answers": [
        "- Physical, physiognomic, or mechanical factors were still being regarded as causative in mental aberrations and malfunctions.",
        "- The symbolic or mythic approached later implemented by Freud and Jung made no part of Nordau's understanding of the human psyche."
      ],
      "predicates": [
        "OriginalText(x) ::: x is the original article's text.",
        "ComportsWith(x, y) ::: x comports closely with y.",
        "CausativeFactors(x) ::: x are factors regarded as causative in mental aberrations and malfunctions.",
        "SymbolicApproach(x) ::: x is a symbolic approach.",
        "MythicApproach(x) ::: x is a mythic approach.",
        "Understanding(x, y) ::: x is the understanding of y."
      ],
      "premises": [
        "OriginalText(originalArticle) ∧ ComportsWith(originalArticle, howardFertig) ::: The original article's text comports quite closely to Howard Fertig, NY 1960.",
        "CausativeFactors(physicalFactors) ∧ CausativeFactors(physiognomicFactors) ∧ CausativeFactors(mechanicalFactors) ∧ (CausativeFactors(physicalFactors) ∧ CausativeFactors(physiognomicFactors) ∧ CausativeFactors(mechanicalFactors) → Understanding(nordau, mentalAberrations)) ::: During the time of Nordau's writing, physical, physiognomic, or mechanical factors were still being regarded as causative in mental aberrations and malfunctions.",
        "¬Understanding(nordau, symbolicApproach) ∧ ¬Understanding(nordau, mythicApproach) ::: The symbolic or mythic approaches later implemented by Freud and Jung made no part of Nordau's understanding of the human psyche."
      ],
      "conclusions": [
        "None",
        "None"
      ]
    }
  ],
  "608": [
    {
      "id": 608,
      "context_id": "5e34e97ac8ff6cfb0f6e6e2ddcb4c23e55ea1c78",
      "paragraph_id": 3,
      "paragraph": "The book deals with numerous case studies of various artists, writers and thinkers (Oscar Wilde, Henrik Ibsen, Richard Wagner and Friedrich Nietzsche to name a few), but its basic premise remains that society and human beings themselves are degenerating, and this degeneration is both reflected in and influenced by art. Hannah Arendt, in her book The Origins of Totalitarianism, refers to late 19th Century French society as embracing unusual or exotic types or individuals, such as criminals, Gypsies and Turks, and certain others formerly not seen as socially acceptable, so Nordau's position is not novel or isolated as social criticism.",
      "question_template": "Nordau divided his study into [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "- Society and human beings themselves are degenerating",
        "- This degeneration is both reflected in and influenced by art",
        "- Late 19th Century French society as embracing unusual or exotic types or individuals"
      ],
      "predicates": [
        "Degenerating(a_0) ::: a person or society is degenerating.",
        "ReflectsInArt(a_0) ::: a person or society is reflected in art.",
        "InfluencedByArt(a_0) ::: a person or society is influenced by art.",
        "CaseStudy(x) ::: x is a case study of an artist, writer, or thinker.",
        "Author(x, y) ::: x is the author of y.",
        "Book(x) ::: x is a book.",
        "Premise(x) ::: x is a basic premise of a book.",
        "UnusualTypes(x) ::: x refers to unusual or exotic types or individuals."
      ],
      "premises": [
        "Degenerating(a_0) ∧ ReflectsInArt(a_0) ∧ InfluencedByArt(a_0) ::: The degeneration of society and human beings is both reflected in and influenced by art.",
        "∃x (CaseStudy(x) ∧ Author(a_1, x)) ::: The book deals with numerous case studies of various artists, writers, and thinkers, including Howard Fertig.",
        "Premise(degeneration) ::: The basic premise of the book remains that society and human beings themselves are degenerating.",
        "∃y (UnusualTypes(y) ∧ Author(a_2, y)) ::: Hannah Arendt refers to unusual or exotic types or individuals in her book.",
        "∃z (CaseStudy(z) ∧ Author(a_3, z)) ::: Freud is a case study in the book.",
        "∃w (CaseStudy(w) ∧ Author(a_4, w)) ::: Jung is a case study in the book."
      ],
      "conclusions": [
        "None",
        "None",
        "None"
      ]
    }
  ],
  "609": [
    {
      "id": 609,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 1,
      "paragraph": "Since the disappearance of his son Sean, PreCrime Captain John Anderton has separated from his wife Lara and becomes a drug addict. While United States Department of Justice agent Danny Witwer is auditing the program, the Precogs generate a new prediction, saying Anderton will murder a man named Leo Crow in 36 hours. Anderton does not know Crow, but flees the area as Witwer begins a manhunt. Anderton seeks the advice of Dr. Iris Hineman, the creator of PreCrime technology. She reveals that sometimes, one of the Precogs, usually Agatha, has a different vision than the other two, a \"minority report\" of a possible alternate future; this has been kept a secret as it would damage the system's credibility. Anderton resolves to recover the minority report to prove his innocence.",
      "question_template": "Nordau draws his examples of how fin de siècle has affected all aspects of society from [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "John Anderton"
      ],
      "predicates": [
        "Separated(a_2, a_3) ::: John Anderton has separated from his wife Lara.",
        "DrugAddict(a_2) ::: John Anderton has become a drug addict.",
        "Auditing(a_1, d) ::: Danny Witwer is auditing the PreCrime program.",
        "GeneratesPrediction(b_1, a_2, a_4, t) ::: The Precogs generate a prediction that Anderton will murder a man named Leo Crow in 36 hours.",
        "Flees(a_2, c_0) ::: John Anderton flees the area.",
        "SeeksAdvice(a_2, a_5) ::: John Anderton seeks the advice of Dr. Iris Hineman.",
        "Reveals(a_5, b_1) ::: Dr. Iris Hineman reveals information about the Precogs.",
        "HasDifferentVision(b_1, a_6) ::: One of the Precogs, usually Agatha, has a different vision than the other two.",
        "KeepsSecret(b_1) ::: The existence of the minority report is kept a secret.",
        "Resolves(a_2, b_1) ::: John Anderton resolves to recover the minority report."
      ],
      "premises": [
        "Separated(a_2, a_3) ::: John Anderton has separated from his wife Lara.",
        "DrugAddict(a_2) ::: John Anderton has become a drug addict.",
        "Auditing(a_1, d) ::: Danny Witwer is auditing the PreCrime program.",
        "GeneratesPrediction(b_1, a_2, a_4, 36) ::: The Precogs generate a prediction that Anderton will murder a man named Leo Crow in 36 hours.",
        "Flees(a_2, c_0) ::: John Anderton flees the area.",
        "SeeksAdvice(a_2, a_5) ::: John Anderton seeks the advice of Dr. Iris Hineman.",
        "Reveals(a_5, b_1) ::: Dr. Iris Hineman reveals information about the Precogs.",
        "HasDifferentVision(b_1, a_6) ::: One of the Precogs, usually Agatha, has a different vision than the other two.",
        "KeepsSecret(b_1) ::: The existence of the minority report is kept a secret.",
        "Resolves(a_2, b_1) ::: John Anderton resolves to recover the minority report to prove his innocence."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "610": [
    {
      "id": 610,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 1,
      "paragraph": "Since the disappearance of his son Sean, PreCrime Captain John Anderton has separated from his wife Lara and becomes a drug addict. While United States Department of Justice agent Danny Witwer is auditing the program, the Precogs generate a new prediction, saying Anderton will murder a man named Leo Crow in 36 hours. Anderton does not know Crow, but flees the area as Witwer begins a manhunt. Anderton seeks the advice of Dr. Iris Hineman, the creator of PreCrime technology. She reveals that sometimes, one of the Precogs, usually Agatha, has a different vision than the other two, a \"minority report\" of a possible alternate future; this has been kept a secret as it would damage the system's credibility. Anderton resolves to recover the minority report to prove his innocence.",
      "question_template": "Nordau says that people are imitating [[CANDIDATE_ANSWER]], which is causing the decline in society.",
      "candidate_answers": [
        "Leo Crow"
      ],
      "predicates": [
        "Separated(a_2, a_3) ::: John Anderton has separated from his wife Lara.",
        "DrugAddict(a_2) ::: John Anderton has become a drug addict.",
        "Auditing(a_1, d) ::: Danny Witwer is auditing the PreCrime program.",
        "GeneratesPrediction(b_1, a_2, a_4, t) ::: The Precogs generate a prediction that Anderton will murder a man named Leo Crow in 36 hours.",
        "Flees(a_2, c_0) ::: John Anderton flees the area.",
        "SeeksAdvice(a_2, a_5) ::: John Anderton seeks the advice of Dr. Iris Hineman.",
        "Reveals(a_5, b_1) ::: Dr. Iris Hineman reveals information about the Precogs.",
        "HasDifferentVision(b_1, a_6) ::: One of the Precogs, usually Agatha, has a different vision than the other two.",
        "KeepsSecret(b_1) ::: The existence of the minority report is kept a secret.",
        "Resolves(a_2, b_1) ::: John Anderton resolves to recover the minority report."
      ],
      "premises": [
        "Separated(a_2, a_3) ::: John Anderton has separated from his wife Lara.",
        "DrugAddict(a_2) ::: John Anderton has become a drug addict.",
        "Auditing(a_1, d) ::: Danny Witwer is auditing the PreCrime program.",
        "GeneratesPrediction(b_1, a_2, a_4, 36) ::: The Precogs generate a prediction that Anderton will murder a man named Leo Crow in 36 hours.",
        "Flees(a_2, c_0) ::: John Anderton flees the area.",
        "SeeksAdvice(a_2, a_5) ::: John Anderton seeks the advice of Dr. Iris Hineman.",
        "Reveals(a_5, b_1) ::: Dr. Iris Hineman reveals information about the Precogs.",
        "HasDifferentVision(b_1, a_6) ::: One of the Precogs, usually Agatha, has a different vision than the other two.",
        "KeepsSecret(b_1) ::: The existence of the minority report is kept a secret.",
        "Resolves(a_2, b_1) ::: John Anderton resolves to recover the minority report to prove his innocence."
      ],
      "conclusions": [
        "None"
      ]
    },
    {
      "id": 610,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 6,
      "paragraph": "Agatha is reconnected to the PreCrime system. While attempting to comfort Lara, Burgess accidentally reveals himself as Lively's murderer. Lara frees Anderton from stasis, and Anderton exposes Burgess at a PreCrime celebratory banquet by playing the full video of Agatha's vision of Burgess killing Lively. A new report is generated at PreCrime: Burgess will kill Anderton. Burgess corners Anderton, and explains that as he could not afford to let Lively take Agatha back without impacting PreCrime, he arranged to kill Lively following an actual attempt on her life, so that the murder would appear as an echo to the technician within PreCrime and be ignored. Anderton points out Burgess's dilemma: If Burgess kills Anderton, he will be imprisoned for life, but PreCrime will be validated; if he spares Anderton, PreCrime will be discredited and shut down. Anderton reveals the ultimate flaw of the system: once people are aware of their future, they are able to change it. Burgess shoots himself.",
      "question_template": "Nordau says that people are imitating [[CANDIDATE_ANSWER]], which is causing the decline in society.",
      "candidate_answers": [
        "Burgess will kill Anderton"
      ],
      "predicates": [
        "Reconnected(a_1) ::: Burgess is reconnected to the PreCrime system.",
        "Murderer(a_1, a_2) ::: Burgess is the murderer of Lively.",
        "Freed(a_3, a_2) ::: Lara frees Anderton from stasis.",
        "Exposes(a_2, a_1) ::: Anderton exposes Burgess.",
        "GeneratedReport(d, a_1) ::: A new report is generated at PreCrime stating that Burgess will kill Anderton.",
        "Corners(a_1, a_2) ::: Burgess corners Anderton.",
        "Explains(a_1, a_2) ::: Burgess explains his actions to Anderton.",
        "Dilemma(a_1) ::: Burgess faces a moral dilemma.",
        "Imprisoned(a_1) ::: Burgess will be imprisoned for life if he kills Anderton.",
        "Validated(d) ::: PreCrime will be validated if Burgess kills Anderton.",
        "Discredited(d) ::: PreCrime will be discredited if Burgess spares Anderton.",
        "Flaw(d) ::: There is a flaw in the PreCrime system.",
        "Aware(a_0, f) ::: People are aware of their future.",
        "ChangeFuture(a_0) ::: People are able to change their future.",
        "Shoots(a_1) ::: Burgess shoots himself."
      ],
      "premises": [
        "Reconnected(burgess) ::: Agatha is reconnected to the PreCrime system.",
        "Murderer(burgess, lively) ::: Burgess accidentally reveals himself as Lively's murderer.",
        "Freed(lara, anderton) ::: Lara frees Anderton from stasis.",
        "Exposes(anderton, burgess) ::: Anderton exposes Burgess at a PreCrime celebratory banquet by playing the full video of Agatha's vision of Burgess killing Lively.",
        "GeneratedReport(d, burgess) ::: A new report is generated at PreCrime: Burgess will kill Anderton.",
        "Corners(burgess, anderton) ::: Burgess corners Anderton.",
        "Explains(burgess, anderton) ::: Burgess explains his actions to Anderton.",
        "Dilemma(burgess) ::: Burgess faces a moral dilemma regarding the lives of others.",
        "Imprisoned(burgess) → Validated(d) ::: If Burgess kills Anderton, he will be imprisoned for life, but PreCrime will be validated.",
        "Spared(burgess) → Discredited(d) ::: If Burgess spares Anderton, PreCrime will be discredited and shut down.",
        "Flaw(d) ::: Anderton reveals the ultimate flaw of the system: once people are aware of their future, they are able to change it.",
        "Shoots(burgess) ::: Burgess shoots himself.",
        "Conclusion:",
        "Dilemma(burgess) ::: Burgess's actions are driven by the need to protect the PreCrime system, leading to a moral dilemma regarding the lives of others."
      ],
      "conclusions": [
        "None"
      ]
    }
  ],
  "611": [
    {
      "id": 611,
      "context_id": "5f4f9df9f707d382b33c73db83b316a60599a6ea",
      "paragraph_id": 1,
      "paragraph": "Since the disappearance of his son Sean, PreCrime Captain John Anderton has separated from his wife Lara and becomes a drug addict. While United States Department of Justice agent Danny Witwer is auditing the program, the Precogs generate a new prediction, saying Anderton will murder a man named Leo Crow in 36 hours. Anderton does not know Crow, but flees the area as Witwer begins a manhunt. Anderton seeks the advice of Dr. Iris Hineman, the creator of PreCrime technology. She reveals that sometimes, one of the Precogs, usually Agatha, has a different vision than the other two, a \"minority report\" of a possible alternate future; this has been kept a secret as it would damage the system's credibility. Anderton resolves to recover the minority report to prove his innocence.",
      "question_template": "The basic premise of Nordau's writings is [[CANDIDATE_ANSWER]].",
      "candidate_answers": [
        "Dr. Iris Hineman, the creator of PreCrime technology"
      ],
      "predicates": [
        "Separated(a_2, a_3) ::: John Anderton has separated from his wife Lara.",
        "DrugAddict(a_2) ::: John Anderton has become a drug addict.",
        "Auditing(a_1, d) ::: Danny Witwer is auditing the PreCrime program.",
        "GeneratesPrediction(b_1, a_2, a_4, t) ::: The Precogs generate a prediction that Anderton will murder a man named Leo Crow in 36 hours.",
        "Flees(a_2, c_0) ::: John Anderton flees the area.",
        "SeeksAdvice(a_2, a_5) ::: John Anderton seeks the advice of Dr. Iris Hineman.",
        "Reveals(a_5, b_1) ::: Dr. Iris Hineman reveals information about the Precogs.",
        "HasDifferentVision(b_1, a_6) ::: One of the Precogs, usually Agatha, has a different vision than the other two.",
        "KeepsSecret(b_1) ::: The existence of the minority report is kept a secret.",
        "Resolves(a_2, b_1) ::: John Anderton resolves to recover the minority report."
      ],
      "premises": [
        "Separated(a_2, a_3) ::: John Anderton has separated from his wife Lara.",
        "DrugAddict(a_2) ::: John Anderton has become a drug addict.",
        "Auditing(a_1, d) ::: Danny Witwer is auditing the PreCrime program.",
        "GeneratesPrediction(b_1, a_2, a_4, 36) ::: The Precogs generate a prediction that Anderton will murder a man named Leo Crow in 36 hours.",
        "Flees(a_2, c_0) ::: John Anderton flees the area.",
        "SeeksAdvice(a_2, a_5) ::: John Anderton seeks the advice of Dr. Iris Hineman.",
        "Reveals(a_5, b_1) ::: Dr. Iris Hineman reveals information about the Precogs.",
        "HasDifferentVision(b_1, a_6) ::: One of the Precogs, usually Agatha, has a different vision than the other two.",
        "KeepsSecret(b_1) ::: The existence of the minority report is kept a secret.",
        "Resolves(a_2, b_1) ::: John Anderton resolves to recover the minority report to prove his innocence."
      ],
      "conclusions": [
        "None"
      ]
    }
  ]
}